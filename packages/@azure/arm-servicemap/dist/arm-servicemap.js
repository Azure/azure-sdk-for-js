/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmServicemap = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for OperatingSystemFamily.
     * Possible values include: 'unknown', 'windows', 'linux', 'solaris', 'aix'
     * @readonly
     * @enum {string}
     */
    var OperatingSystemFamily;
    (function (OperatingSystemFamily) {
        OperatingSystemFamily["Unknown"] = "unknown";
        OperatingSystemFamily["Windows"] = "windows";
        OperatingSystemFamily["Linux"] = "linux";
        OperatingSystemFamily["Solaris"] = "solaris";
        OperatingSystemFamily["Aix"] = "aix";
    })(OperatingSystemFamily || (OperatingSystemFamily = {}));
    /**
     * Defines values for MonitoringState.
     * Possible values include: 'monitored', 'discovered'
     * @readonly
     * @enum {string}
     */
    var MonitoringState;
    (function (MonitoringState) {
        MonitoringState["Monitored"] = "monitored";
        MonitoringState["Discovered"] = "discovered";
    })(MonitoringState || (MonitoringState = {}));
    /**
     * Defines values for VirtualizationState.
     * Possible values include: 'unknown', 'physical', 'virtual', 'hypervisor'
     * @readonly
     * @enum {string}
     */
    var VirtualizationState;
    (function (VirtualizationState) {
        VirtualizationState["Unknown"] = "unknown";
        VirtualizationState["Physical"] = "physical";
        VirtualizationState["Virtual"] = "virtual";
        VirtualizationState["Hypervisor"] = "hypervisor";
    })(VirtualizationState || (VirtualizationState = {}));
    /**
     * Defines values for MachineRebootStatus.
     * Possible values include: 'unknown', 'rebooted', 'notRebooted'
     * @readonly
     * @enum {string}
     */
    var MachineRebootStatus;
    (function (MachineRebootStatus) {
        MachineRebootStatus["Unknown"] = "unknown";
        MachineRebootStatus["Rebooted"] = "rebooted";
        MachineRebootStatus["NotRebooted"] = "notRebooted";
    })(MachineRebootStatus || (MachineRebootStatus = {}));
    /**
     * Defines values for Accuracy.
     * Possible values include: 'actual', 'estimated'
     * @readonly
     * @enum {string}
     */
    var Accuracy;
    (function (Accuracy) {
        Accuracy["Actual"] = "actual";
        Accuracy["Estimated"] = "estimated";
    })(Accuracy || (Accuracy = {}));
    /**
     * Defines values for Bitness.
     * Possible values include: '32bit', '64bit'
     * @readonly
     * @enum {string}
     */
    var Bitness;
    (function (Bitness) {
        Bitness["ThreeTwobit"] = "32bit";
        Bitness["SixFourbit"] = "64bit";
    })(Bitness || (Bitness = {}));
    /**
     * Defines values for VirtualMachineType.
     * Possible values include: 'unknown', 'hyperv', 'ldom', 'lpar', 'vmware',
     * 'virtualPc', 'xen'
     * @readonly
     * @enum {string}
     */
    var VirtualMachineType;
    (function (VirtualMachineType) {
        VirtualMachineType["Unknown"] = "unknown";
        VirtualMachineType["Hyperv"] = "hyperv";
        VirtualMachineType["Ldom"] = "ldom";
        VirtualMachineType["Lpar"] = "lpar";
        VirtualMachineType["Vmware"] = "vmware";
        VirtualMachineType["VirtualPc"] = "virtualPc";
        VirtualMachineType["Xen"] = "xen";
    })(VirtualMachineType || (VirtualMachineType = {}));
    /**
     * Defines values for HypervisorType.
     * Possible values include: 'unknown', 'hyperv'
     * @readonly
     * @enum {string}
     */
    var HypervisorType;
    (function (HypervisorType) {
        HypervisorType["Unknown"] = "unknown";
        HypervisorType["Hyperv"] = "hyperv";
    })(HypervisorType || (HypervisorType = {}));
    /**
     * Defines values for ProcessRole.
     * Possible values include: 'webServer', 'appServer', 'databaseServer',
     * 'ldapServer', 'smbServer'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ProcessRole =
     * <ProcessRole>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ProcessRole;
    (function (ProcessRole) {
        ProcessRole["WebServer"] = "webServer";
        ProcessRole["AppServer"] = "appServer";
        ProcessRole["DatabaseServer"] = "databaseServer";
        ProcessRole["LdapServer"] = "ldapServer";
        ProcessRole["SmbServer"] = "smbServer";
    })(ProcessRole || (ProcessRole = {}));
    /**
     * Defines values for MachineGroupType.
     * Possible values include: 'unknown', 'azure-cs', 'azure-sf', 'azure-vmss',
     * 'user-static'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: MachineGroupType =
     * <MachineGroupType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var MachineGroupType;
    (function (MachineGroupType) {
        MachineGroupType["Unknown"] = "unknown";
        MachineGroupType["AzureCs"] = "azure-cs";
        MachineGroupType["AzureSf"] = "azure-sf";
        MachineGroupType["AzureVmss"] = "azure-vmss";
        MachineGroupType["UserStatic"] = "user-static";
    })(MachineGroupType || (MachineGroupType = {}));
    /**
     * Defines values for ConnectionFailureState.
     * Possible values include: 'ok', 'failed', 'mixed'
     * @readonly
     * @enum {string}
     */
    var ConnectionFailureState;
    (function (ConnectionFailureState) {
        ConnectionFailureState["Ok"] = "ok";
        ConnectionFailureState["Failed"] = "failed";
        ConnectionFailureState["Mixed"] = "mixed";
    })(ConnectionFailureState || (ConnectionFailureState = {}));
    /**
     * Defines values for AzureCloudServiceRoleType.
     * Possible values include: 'unknown', 'worker', 'web'
     * @readonly
     * @enum {string}
     */
    var AzureCloudServiceRoleType;
    (function (AzureCloudServiceRoleType) {
        AzureCloudServiceRoleType["Unknown"] = "unknown";
        AzureCloudServiceRoleType["Worker"] = "worker";
        AzureCloudServiceRoleType["Web"] = "web";
    })(AzureCloudServiceRoleType || (AzureCloudServiceRoleType = {}));
    /**
     * Defines values for Provider.
     * Possible values include: 'azure'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Provider = <Provider>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Provider;
    (function (Provider) {
        Provider["Azure"] = "azure";
    })(Provider || (Provider = {}));
    /**
     * Defines values for Provider1.
     * Possible values include: 'azure'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Provider1 = <Provider1>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Provider1;
    (function (Provider1) {
        Provider1["Azure"] = "azure";
    })(Provider1 || (Provider1 = {}));

    var index = /*#__PURE__*/Object.freeze({
        get OperatingSystemFamily () { return OperatingSystemFamily; },
        get MonitoringState () { return MonitoringState; },
        get VirtualizationState () { return VirtualizationState; },
        get MachineRebootStatus () { return MachineRebootStatus; },
        get Accuracy () { return Accuracy; },
        get Bitness () { return Bitness; },
        get VirtualMachineType () { return VirtualMachineType; },
        get HypervisorType () { return HypervisorType; },
        get ProcessRole () { return ProcessRole; },
        get MachineGroupType () { return MachineGroupType; },
        get ConnectionFailureState () { return ConnectionFailureState; },
        get AzureCloudServiceRoleType () { return AzureCloudServiceRoleType; },
        get Provider () { return Provider; },
        get Provider1 () { return Provider1; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceReference = {
        serializedName: "ResourceReference",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "kind",
                clientName: "kind"
            },
            uberParent: "ResourceReference",
            className: "ResourceReference",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                kind: {
                    required: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MachineReference = {
        serializedName: "ref:machine",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResourceReference.type.polymorphicDiscriminator,
            uberParent: "ResourceReference",
            className: "MachineReference",
            modelProperties: __assign({}, ResourceReference.type.modelProperties)
        }
    };
    var ProcessReference = {
        serializedName: "ref:process",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResourceReference.type.polymorphicDiscriminator,
            uberParent: "ResourceReference",
            className: "ProcessReference",
            modelProperties: __assign({}, ResourceReference.type.modelProperties, { machine: {
                    readOnly: true,
                    serializedName: "properties.machine",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: ResourceReference.type.polymorphicDiscriminator,
                        uberParent: "ResourceReference",
                        className: "MachineReference"
                    }
                } })
        }
    };
    var PortReference = {
        serializedName: "ref:port",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResourceReference.type.polymorphicDiscriminator,
            uberParent: "ResourceReference",
            className: "PortReference",
            modelProperties: __assign({}, ResourceReference.type.modelProperties, { machine: {
                    readOnly: true,
                    serializedName: "properties.machine",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: ResourceReference.type.polymorphicDiscriminator,
                        uberParent: "ResourceReference",
                        className: "MachineReference"
                    }
                }, ipAddress: {
                    readOnly: true,
                    serializedName: "properties.ipAddress",
                    type: {
                        name: "String"
                    }
                }, portNumber: {
                    serializedName: "properties.portNumber",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var MachineReferenceWithHints = {
        serializedName: "ref:machinewithhints",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResourceReference.type.polymorphicDiscriminator,
            uberParent: "ResourceReference",
            className: "MachineReferenceWithHints",
            modelProperties: __assign({}, ResourceReference.type.modelProperties, { displayNameHint: {
                    readOnly: true,
                    serializedName: "properties.displayNameHint",
                    type: {
                        name: "String"
                    }
                }, osFamilyHint: {
                    readOnly: true,
                    serializedName: "properties.osFamilyHint",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "unknown",
                            "windows",
                            "linux",
                            "solaris",
                            "aix"
                        ]
                    }
                } })
        }
    };
    var ClientGroupReference = {
        serializedName: "ref:clientgroup",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResourceReference.type.polymorphicDiscriminator,
            uberParent: "ResourceReference",
            className: "ClientGroupReference",
            modelProperties: __assign({}, ResourceReference.type.modelProperties)
        }
    };
    var CoreResource = {
        serializedName: "CoreResource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "kind",
                clientName: "kind"
            },
            uberParent: "CoreResource",
            className: "CoreResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }, kind: {
                    required: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Timezone = {
        serializedName: "Timezone",
        type: {
            name: "Composite",
            className: "Timezone",
            modelProperties: {
                fullName: {
                    serializedName: "fullName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AgentConfiguration = {
        serializedName: "AgentConfiguration",
        type: {
            name: "Composite",
            className: "AgentConfiguration",
            modelProperties: {
                agentId: {
                    required: true,
                    serializedName: "agentId",
                    type: {
                        name: "String"
                    }
                },
                dependencyAgentId: {
                    serializedName: "dependencyAgentId",
                    type: {
                        name: "String"
                    }
                },
                dependencyAgentVersion: {
                    serializedName: "dependencyAgentVersion",
                    type: {
                        name: "String"
                    }
                },
                dependencyAgentRevision: {
                    serializedName: "dependencyAgentRevision",
                    type: {
                        name: "String"
                    }
                },
                rebootStatus: {
                    serializedName: "rebootStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "unknown",
                            "rebooted",
                            "notRebooted"
                        ]
                    }
                },
                clockGranularity: {
                    serializedName: "clockGranularity",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var MachineResourcesConfiguration = {
        serializedName: "MachineResourcesConfiguration",
        type: {
            name: "Composite",
            className: "MachineResourcesConfiguration",
            modelProperties: {
                physicalMemory: {
                    serializedName: "physicalMemory",
                    type: {
                        name: "Number"
                    }
                },
                cpus: {
                    serializedName: "cpus",
                    type: {
                        name: "Number"
                    }
                },
                cpuSpeed: {
                    serializedName: "cpuSpeed",
                    type: {
                        name: "Number"
                    }
                },
                cpuSpeedAccuracy: {
                    serializedName: "cpuSpeedAccuracy",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "actual",
                            "estimated"
                        ]
                    }
                }
            }
        }
    };
    var Ipv4NetworkInterface = {
        serializedName: "Ipv4NetworkInterface",
        type: {
            name: "Composite",
            className: "Ipv4NetworkInterface",
            modelProperties: {
                ipAddress: {
                    required: true,
                    serializedName: "ipAddress",
                    type: {
                        name: "String"
                    }
                },
                subnetMask: {
                    serializedName: "subnetMask",
                    defaultValue: '255.255.255.255',
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Ipv6NetworkInterface = {
        serializedName: "Ipv6NetworkInterface",
        type: {
            name: "Composite",
            className: "Ipv6NetworkInterface",
            modelProperties: {
                ipAddress: {
                    required: true,
                    serializedName: "ipAddress",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NetworkConfiguration = {
        serializedName: "NetworkConfiguration",
        type: {
            name: "Composite",
            className: "NetworkConfiguration",
            modelProperties: {
                ipv4Interfaces: {
                    serializedName: "ipv4Interfaces",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Ipv4NetworkInterface"
                            }
                        }
                    }
                },
                ipv6Interfaces: {
                    serializedName: "ipv6Interfaces",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Ipv6NetworkInterface"
                            }
                        }
                    }
                },
                defaultIpv4Gateways: {
                    serializedName: "defaultIpv4Gateways",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                macAddresses: {
                    serializedName: "macAddresses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                dnsNames: {
                    serializedName: "dnsNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var OperatingSystemConfiguration = {
        serializedName: "OperatingSystemConfiguration",
        type: {
            name: "Composite",
            className: "OperatingSystemConfiguration",
            modelProperties: {
                family: {
                    required: true,
                    serializedName: "family",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "unknown",
                            "windows",
                            "linux",
                            "solaris",
                            "aix"
                        ]
                    }
                },
                fullName: {
                    required: true,
                    serializedName: "fullName",
                    type: {
                        name: "String"
                    }
                },
                bitness: {
                    required: true,
                    serializedName: "bitness",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "32bit",
                            "64bit"
                        ]
                    }
                }
            }
        }
    };
    var VirtualMachineConfiguration = {
        serializedName: "VirtualMachineConfiguration",
        type: {
            name: "Composite",
            className: "VirtualMachineConfiguration",
            modelProperties: {
                virtualMachineType: {
                    serializedName: "virtualMachineType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "unknown",
                            "hyperv",
                            "ldom",
                            "lpar",
                            "vmware",
                            "virtualPc",
                            "xen"
                        ]
                    }
                },
                nativeMachineId: {
                    serializedName: "nativeMachineId",
                    type: {
                        name: "String"
                    }
                },
                virtualMachineName: {
                    serializedName: "virtualMachineName",
                    type: {
                        name: "String"
                    }
                },
                nativeHostMachineId: {
                    serializedName: "nativeHostMachineId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HypervisorConfiguration = {
        serializedName: "HypervisorConfiguration",
        type: {
            name: "Composite",
            className: "HypervisorConfiguration",
            modelProperties: {
                hypervisorType: {
                    serializedName: "hypervisorType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "unknown",
                            "hyperv"
                        ]
                    }
                },
                nativeHostMachineId: {
                    serializedName: "nativeHostMachineId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HostingConfiguration = {
        serializedName: "HostingConfiguration",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "kind",
                clientName: "kind"
            },
            uberParent: "HostingConfiguration",
            className: "HostingConfiguration",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                kind: {
                    required: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Machine = {
        serializedName: "machine",
        type: {
            name: "Composite",
            className: "Machine",
            modelProperties: __assign({}, CoreResource.type.modelProperties, { timestamp: {
                    serializedName: "properties.timestamp",
                    type: {
                        name: "DateTime"
                    }
                }, monitoringState: {
                    serializedName: "properties.monitoringState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "monitored",
                            "discovered"
                        ]
                    }
                }, virtualizationState: {
                    serializedName: "properties.virtualizationState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "unknown",
                            "physical",
                            "virtual",
                            "hypervisor"
                        ]
                    }
                }, displayName: {
                    serializedName: "properties.displayName",
                    type: {
                        name: "String"
                    }
                }, computerName: {
                    serializedName: "properties.computerName",
                    type: {
                        name: "String"
                    }
                }, fullyQualifiedDomainName: {
                    serializedName: "properties.fullyQualifiedDomainName",
                    type: {
                        name: "String"
                    }
                }, bootTime: {
                    serializedName: "properties.bootTime",
                    type: {
                        name: "DateTime"
                    }
                }, timezone: {
                    serializedName: "properties.timezone",
                    type: {
                        name: "Composite",
                        className: "Timezone"
                    }
                }, agent: {
                    serializedName: "properties.agent",
                    type: {
                        name: "Composite",
                        className: "AgentConfiguration"
                    }
                }, resources: {
                    serializedName: "properties.resources",
                    type: {
                        name: "Composite",
                        className: "MachineResourcesConfiguration"
                    }
                }, networking: {
                    serializedName: "properties.networking",
                    type: {
                        name: "Composite",
                        className: "NetworkConfiguration"
                    }
                }, operatingSystem: {
                    serializedName: "properties.operatingSystem",
                    type: {
                        name: "Composite",
                        className: "OperatingSystemConfiguration"
                    }
                }, virtualMachine: {
                    serializedName: "properties.virtualMachine",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineConfiguration"
                    }
                }, hypervisor: {
                    serializedName: "properties.hypervisor",
                    type: {
                        name: "Composite",
                        className: "HypervisorConfiguration"
                    }
                }, hosting: {
                    serializedName: "properties.hosting",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "kind",
                            clientName: "kind"
                        },
                        uberParent: "HostingConfiguration",
                        className: "HostingConfiguration"
                    }
                } })
        }
    };
    var ProcessHostedService = {
        serializedName: "ProcessHostedService",
        type: {
            name: "Composite",
            className: "ProcessHostedService",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProcessDetails = {
        serializedName: "ProcessDetails",
        type: {
            name: "Composite",
            className: "ProcessDetails",
            modelProperties: {
                persistentKey: {
                    serializedName: "persistentKey",
                    type: {
                        name: "String"
                    }
                },
                poolId: {
                    serializedName: "poolId",
                    type: {
                        name: "Number"
                    }
                },
                firstPid: {
                    serializedName: "firstPid",
                    type: {
                        name: "Number"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                companyName: {
                    serializedName: "companyName",
                    type: {
                        name: "String"
                    }
                },
                internalName: {
                    serializedName: "internalName",
                    type: {
                        name: "String"
                    }
                },
                productName: {
                    serializedName: "productName",
                    type: {
                        name: "String"
                    }
                },
                productVersion: {
                    serializedName: "productVersion",
                    type: {
                        name: "String"
                    }
                },
                fileVersion: {
                    serializedName: "fileVersion",
                    type: {
                        name: "String"
                    }
                },
                commandLine: {
                    serializedName: "commandLine",
                    type: {
                        name: "String"
                    }
                },
                executablePath: {
                    serializedName: "executablePath",
                    type: {
                        name: "String"
                    }
                },
                workingDirectory: {
                    serializedName: "workingDirectory",
                    type: {
                        name: "String"
                    }
                },
                services: {
                    serializedName: "services",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ProcessHostedService"
                            }
                        }
                    }
                },
                zoneName: {
                    serializedName: "zoneName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProcessUser = {
        serializedName: "ProcessUser",
        type: {
            name: "Composite",
            className: "ProcessUser",
            modelProperties: {
                userName: {
                    serializedName: "userName",
                    type: {
                        name: "String"
                    }
                },
                userDomain: {
                    serializedName: "userDomain",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProcessHostingConfiguration = {
        serializedName: "ProcessHostingConfiguration",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "kind",
                clientName: "kind"
            },
            uberParent: "ProcessHostingConfiguration",
            className: "ProcessHostingConfiguration",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                kind: {
                    required: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Process = {
        serializedName: "process",
        type: {
            name: "Composite",
            className: "Process",
            modelProperties: __assign({}, CoreResource.type.modelProperties, { timestamp: {
                    serializedName: "properties.timestamp",
                    type: {
                        name: "DateTime"
                    }
                }, monitoringState: {
                    serializedName: "properties.monitoringState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "monitored",
                            "discovered"
                        ]
                    }
                }, machine: {
                    serializedName: "properties.machine",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "kind",
                            clientName: "kind"
                        },
                        uberParent: "ResourceReference",
                        className: "ResourceReference"
                    }
                }, executableName: {
                    serializedName: "properties.executableName",
                    type: {
                        name: "String"
                    }
                }, displayName: {
                    serializedName: "properties.displayName",
                    type: {
                        name: "String"
                    }
                }, startTime: {
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                }, role: {
                    serializedName: "properties.role",
                    type: {
                        name: "String"
                    }
                }, group: {
                    serializedName: "properties.group",
                    type: {
                        name: "String"
                    }
                }, details: {
                    serializedName: "properties.details",
                    type: {
                        name: "Composite",
                        className: "ProcessDetails"
                    }
                }, user: {
                    serializedName: "properties.user",
                    type: {
                        name: "Composite",
                        className: "ProcessUser"
                    }
                }, clientOf: {
                    serializedName: "properties.clientOf",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "kind",
                            clientName: "kind"
                        },
                        uberParent: "ResourceReference",
                        className: "ResourceReference"
                    }
                }, acceptorOf: {
                    serializedName: "properties.acceptorOf",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "kind",
                            clientName: "kind"
                        },
                        uberParent: "ResourceReference",
                        className: "ResourceReference"
                    }
                }, hosting: {
                    serializedName: "properties.hosting",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "kind",
                            clientName: "kind"
                        },
                        uberParent: "ProcessHostingConfiguration",
                        className: "ProcessHostingConfiguration"
                    }
                } })
        }
    };
    var Port = {
        serializedName: "port",
        type: {
            name: "Composite",
            className: "Port",
            modelProperties: __assign({}, CoreResource.type.modelProperties, { monitoringState: {
                    serializedName: "properties.monitoringState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "monitored",
                            "discovered"
                        ]
                    }
                }, machine: {
                    serializedName: "properties.machine",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "kind",
                            clientName: "kind"
                        },
                        uberParent: "ResourceReference",
                        className: "ResourceReference"
                    }
                }, displayName: {
                    serializedName: "properties.displayName",
                    type: {
                        name: "String"
                    }
                }, ipAddress: {
                    serializedName: "properties.ipAddress",
                    type: {
                        name: "String"
                    }
                }, portNumber: {
                    serializedName: "properties.portNumber",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var ClientGroup = {
        serializedName: "clientGroup",
        type: {
            name: "Composite",
            className: "ClientGroup",
            modelProperties: __assign({}, CoreResource.type.modelProperties, { clientsOf: {
                    required: true,
                    serializedName: "properties.clientsOf",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "kind",
                            clientName: "kind"
                        },
                        uberParent: "ResourceReference",
                        className: "ResourceReference"
                    }
                } })
        }
    };
    var ClientGroupMember = {
        serializedName: "ClientGroupMember",
        type: {
            name: "Composite",
            className: "ClientGroupMember",
            modelProperties: __assign({}, Resource.type.modelProperties, { ipAddress: {
                    serializedName: "properties.ipAddress",
                    type: {
                        name: "String"
                    }
                }, port: {
                    serializedName: "properties.port",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: ResourceReference.type.polymorphicDiscriminator,
                        uberParent: "ResourceReference",
                        className: "PortReference"
                    }
                }, processes: {
                    serializedName: "properties.processes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: ResourceReference.type.polymorphicDiscriminator,
                                uberParent: "ResourceReference",
                                className: "ProcessReference"
                            }
                        }
                    }
                } })
        }
    };
    var MachineGroup = {
        serializedName: "machineGroup",
        type: {
            name: "Composite",
            className: "MachineGroup",
            modelProperties: __assign({}, CoreResource.type.modelProperties, { groupType: {
                    serializedName: "properties.groupType",
                    type: {
                        name: "String"
                    }
                }, displayName: {
                    required: true,
                    serializedName: "properties.displayName",
                    constraints: {
                        MaxLength: 256,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                }, count: {
                    serializedName: "properties.count",
                    type: {
                        name: "Number"
                    }
                }, machines: {
                    serializedName: "properties.machines",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: ResourceReference.type.polymorphicDiscriminator,
                                uberParent: "ResourceReference",
                                className: "MachineReferenceWithHints"
                            }
                        }
                    }
                } })
        }
    };
    var Summary = {
        serializedName: "Summary",
        type: {
            name: "Composite",
            className: "Summary",
            modelProperties: __assign({}, Resource.type.modelProperties)
        }
    };
    var MachineCountsByOperatingSystem = {
        serializedName: "MachineCountsByOperatingSystem",
        type: {
            name: "Composite",
            className: "MachineCountsByOperatingSystem",
            modelProperties: {
                windows: {
                    required: true,
                    serializedName: "windows",
                    type: {
                        name: "Number"
                    }
                },
                linux: {
                    required: true,
                    serializedName: "linux",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var MachinesSummary = {
        serializedName: "MachinesSummary",
        type: {
            name: "Composite",
            className: "MachinesSummary",
            modelProperties: __assign({}, Summary.type.modelProperties, { startTime: {
                    required: true,
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                }, endTime: {
                    required: true,
                    serializedName: "properties.endTime",
                    type: {
                        name: "DateTime"
                    }
                }, total: {
                    required: true,
                    serializedName: "properties.total",
                    type: {
                        name: "Number"
                    }
                }, live: {
                    required: true,
                    serializedName: "properties.live",
                    type: {
                        name: "Number"
                    }
                }, os: {
                    required: true,
                    serializedName: "properties.os",
                    type: {
                        name: "Composite",
                        className: "MachineCountsByOperatingSystem"
                    }
                } })
        }
    };
    var Relationship = {
        serializedName: "Relationship",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "kind",
                clientName: "kind"
            },
            uberParent: "Relationship",
            className: "Relationship",
            modelProperties: __assign({}, Resource.type.modelProperties, { kind: {
                    required: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Connection = {
        serializedName: "rel:connection",
        type: {
            name: "Composite",
            className: "Connection",
            modelProperties: __assign({}, Relationship.type.modelProperties, { source: {
                    required: true,
                    serializedName: "properties.source",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "kind",
                            clientName: "kind"
                        },
                        uberParent: "ResourceReference",
                        className: "ResourceReference"
                    }
                }, destination: {
                    required: true,
                    serializedName: "properties.destination",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "kind",
                            clientName: "kind"
                        },
                        uberParent: "ResourceReference",
                        className: "ResourceReference"
                    }
                }, startTime: {
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                }, endTime: {
                    serializedName: "properties.endTime",
                    type: {
                        name: "DateTime"
                    }
                }, serverPort: {
                    serializedName: "properties.serverPort",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: ResourceReference.type.polymorphicDiscriminator,
                        uberParent: "ResourceReference",
                        className: "PortReference"
                    }
                }, failureState: {
                    serializedName: "properties.failureState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "ok",
                            "failed",
                            "mixed"
                        ]
                    }
                } })
        }
    };
    var Acceptor = {
        serializedName: "rel:acceptor",
        type: {
            name: "Composite",
            className: "Acceptor",
            modelProperties: __assign({}, Relationship.type.modelProperties, { source: {
                    required: true,
                    serializedName: "properties.source",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: ResourceReference.type.polymorphicDiscriminator,
                        uberParent: "ResourceReference",
                        className: "PortReference"
                    }
                }, destination: {
                    required: true,
                    serializedName: "properties.destination",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: ResourceReference.type.polymorphicDiscriminator,
                        uberParent: "ResourceReference",
                        className: "ProcessReference"
                    }
                }, startTime: {
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                }, endTime: {
                    serializedName: "properties.endTime",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var SummaryProperties = {
        serializedName: "SummaryProperties",
        type: {
            name: "Composite",
            className: "SummaryProperties",
            modelProperties: {
                startTime: {
                    required: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    required: true,
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var RelationshipProperties = {
        serializedName: "RelationshipProperties",
        type: {
            name: "Composite",
            className: "RelationshipProperties",
            modelProperties: {
                source: {
                    required: true,
                    serializedName: "source",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "kind",
                            clientName: "kind"
                        },
                        uberParent: "ResourceReference",
                        className: "ResourceReference"
                    }
                },
                destination: {
                    required: true,
                    serializedName: "destination",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "kind",
                            clientName: "kind"
                        },
                        uberParent: "ResourceReference",
                        className: "ResourceReference"
                    }
                },
                startTime: {
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var ImageConfiguration = {
        serializedName: "ImageConfiguration",
        type: {
            name: "Composite",
            className: "ImageConfiguration",
            modelProperties: {
                publisher: {
                    serializedName: "publisher",
                    type: {
                        name: "String"
                    }
                },
                offering: {
                    serializedName: "offering",
                    type: {
                        name: "String"
                    }
                },
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AzureCloudServiceConfiguration = {
        serializedName: "AzureCloudServiceConfiguration",
        type: {
            name: "Composite",
            className: "AzureCloudServiceConfiguration",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                instanceId: {
                    serializedName: "instanceId",
                    type: {
                        name: "String"
                    }
                },
                deployment: {
                    serializedName: "deployment",
                    type: {
                        name: "String"
                    }
                },
                roleName: {
                    serializedName: "roleName",
                    type: {
                        name: "String"
                    }
                },
                roleType: {
                    serializedName: "roleType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "unknown",
                            "worker",
                            "web"
                        ]
                    }
                }
            }
        }
    };
    var AzureVmScaleSetConfiguration = {
        serializedName: "AzureVmScaleSetConfiguration",
        type: {
            name: "Composite",
            className: "AzureVmScaleSetConfiguration",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                instanceId: {
                    serializedName: "instanceId",
                    type: {
                        name: "String"
                    }
                },
                deployment: {
                    serializedName: "deployment",
                    type: {
                        name: "String"
                    }
                },
                resourceId: {
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AzureServiceFabricClusterConfiguration = {
        serializedName: "AzureServiceFabricClusterConfiguration",
        type: {
            name: "Composite",
            className: "AzureServiceFabricClusterConfiguration",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                clusterId: {
                    serializedName: "clusterId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AzureHostingConfiguration = {
        serializedName: "provider:azure",
        type: {
            name: "Composite",
            polymorphicDiscriminator: HostingConfiguration.type.polymorphicDiscriminator,
            uberParent: "HostingConfiguration",
            className: "AzureHostingConfiguration",
            modelProperties: __assign({}, HostingConfiguration.type.modelProperties, { vmId: {
                    serializedName: "vmId",
                    type: {
                        name: "String"
                    }
                }, location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, size: {
                    serializedName: "size",
                    type: {
                        name: "String"
                    }
                }, updateDomain: {
                    serializedName: "updateDomain",
                    type: {
                        name: "String"
                    }
                }, faultDomain: {
                    serializedName: "faultDomain",
                    type: {
                        name: "String"
                    }
                }, subscriptionId: {
                    serializedName: "subscriptionId",
                    type: {
                        name: "String"
                    }
                }, resourceGroup: {
                    serializedName: "resourceGroup",
                    type: {
                        name: "String"
                    }
                }, resourceId: {
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                }, image: {
                    serializedName: "image",
                    type: {
                        name: "Composite",
                        className: "ImageConfiguration"
                    }
                }, cloudService: {
                    serializedName: "cloudService",
                    type: {
                        name: "Composite",
                        className: "AzureCloudServiceConfiguration"
                    }
                }, vmScaleSet: {
                    serializedName: "vmScaleSet",
                    type: {
                        name: "Composite",
                        className: "AzureVmScaleSetConfiguration"
                    }
                }, serviceFabricCluster: {
                    serializedName: "serviceFabricCluster",
                    type: {
                        name: "Composite",
                        className: "AzureServiceFabricClusterConfiguration"
                    }
                } })
        }
    };
    var AzureProcessHostingConfiguration = {
        serializedName: "provider:azure",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProcessHostingConfiguration.type.polymorphicDiscriminator,
            uberParent: "ProcessHostingConfiguration",
            className: "AzureProcessHostingConfiguration",
            modelProperties: __assign({}, ProcessHostingConfiguration.type.modelProperties, { cloudService: {
                    serializedName: "cloudService",
                    type: {
                        name: "Composite",
                        className: "AzureCloudServiceConfiguration"
                    }
                } })
        }
    };
    var MapNodes = {
        serializedName: "MapNodes",
        type: {
            name: "Composite",
            className: "MapNodes",
            modelProperties: {
                machines: {
                    serializedName: "machines",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Machine"
                            }
                        }
                    }
                },
                processes: {
                    serializedName: "processes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Process"
                            }
                        }
                    }
                },
                ports: {
                    serializedName: "ports",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Port"
                            }
                        }
                    }
                },
                clientGroups: {
                    serializedName: "clientGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ClientGroup"
                            }
                        }
                    }
                }
            }
        }
    };
    var MapEdges = {
        serializedName: "MapEdges",
        type: {
            name: "Composite",
            className: "MapEdges",
            modelProperties: {
                connections: {
                    serializedName: "connections",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Connection"
                            }
                        }
                    }
                },
                acceptors: {
                    serializedName: "acceptors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Acceptor"
                            }
                        }
                    }
                }
            }
        }
    };
    var Map = {
        serializedName: "Map",
        type: {
            name: "Composite",
            className: "Map",
            modelProperties: {
                nodes: {
                    required: true,
                    serializedName: "nodes",
                    type: {
                        name: "Composite",
                        className: "MapNodes"
                    }
                },
                edges: {
                    required: true,
                    serializedName: "edges",
                    type: {
                        name: "Composite",
                        className: "MapEdges"
                    }
                }
            }
        }
    };
    var Liveness = {
        serializedName: "Liveness",
        type: {
            name: "Composite",
            className: "Liveness",
            modelProperties: {
                startTime: {
                    required: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    required: true,
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                live: {
                    required: true,
                    serializedName: "live",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var MapRequest = {
        serializedName: "MapRequest",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "kind",
                clientName: "kind"
            },
            uberParent: "MapRequest",
            className: "MapRequest",
            modelProperties: {
                startTime: {
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                kind: {
                    required: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SingleMachineDependencyMapRequest = {
        serializedName: "map:single-machine-dependency",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MapRequest.type.polymorphicDiscriminator,
            uberParent: "MapRequest",
            className: "SingleMachineDependencyMapRequest",
            modelProperties: __assign({}, MapRequest.type.modelProperties, { machineId: {
                    required: true,
                    serializedName: "machineId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var MultipleMachinesMapRequest = {
        serializedName: "MultipleMachinesMapRequest",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MapRequest.type.polymorphicDiscriminator,
            uberParent: "MapRequest",
            className: "MultipleMachinesMapRequest",
            modelProperties: __assign({}, MapRequest.type.modelProperties, { filterProcesses: {
                    serializedName: "filterProcesses",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var MachineListMapRequest = {
        serializedName: "map:machine-list-dependency",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MapRequest.type.polymorphicDiscriminator,
            uberParent: "MapRequest",
            className: "MachineListMapRequest",
            modelProperties: __assign({}, MultipleMachinesMapRequest.type.modelProperties, { machineIds: {
                    required: true,
                    serializedName: "machineIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var MachineGroupMapRequest = {
        serializedName: "map:machine-group-dependency",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MapRequest.type.polymorphicDiscriminator,
            uberParent: "MapRequest",
            className: "MachineGroupMapRequest",
            modelProperties: __assign({}, MultipleMachinesMapRequest.type.modelProperties, { machineGroupId: {
                    required: true,
                    serializedName: "machineGroupId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var MapResponse = {
        serializedName: "MapResponse",
        type: {
            name: "Composite",
            className: "MapResponse",
            modelProperties: {
                startTime: {
                    required: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    required: true,
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                map: {
                    required: true,
                    serializedName: "map",
                    type: {
                        name: "Composite",
                        className: "Map"
                    }
                }
            }
        }
    };
    var ClientGroupMembersCount = {
        serializedName: "ClientGroupMembersCount",
        type: {
            name: "Composite",
            className: "ClientGroupMembersCount",
            modelProperties: {
                startTime: {
                    required: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    required: true,
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                groupId: {
                    required: true,
                    serializedName: "groupId",
                    type: {
                        name: "String"
                    }
                },
                count: {
                    required: true,
                    serializedName: "count",
                    type: {
                        name: "Number"
                    }
                },
                accuracy: {
                    required: true,
                    serializedName: "accuracy",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "actual",
                            "estimated"
                        ]
                    }
                }
            }
        }
    };
    var ErrorModel = {
        serializedName: "Error",
        type: {
            name: "Composite",
            className: "ErrorModel",
            modelProperties: {
                code: {
                    required: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                error: {
                    required: true,
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorModel"
                    }
                }
            }
        }
    };
    var MachineCollection = {
        serializedName: "MachineCollection",
        type: {
            name: "Composite",
            className: "MachineCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Machine"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ConnectionCollection = {
        serializedName: "ConnectionCollection",
        type: {
            name: "Composite",
            className: "ConnectionCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Connection"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProcessCollection = {
        serializedName: "ProcessCollection",
        type: {
            name: "Composite",
            className: "ProcessCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Process"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PortCollection = {
        serializedName: "PortCollection",
        type: {
            name: "Composite",
            className: "PortCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Port"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MachineGroupCollection = {
        serializedName: "MachineGroupCollection",
        type: {
            name: "Composite",
            className: "MachineGroupCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MachineGroup"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ClientGroupMembersCollection = {
        serializedName: "ClientGroupMembersCollection",
        type: {
            name: "Composite",
            className: "ClientGroupMembersCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ClientGroupMember"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var discriminators = {
        'ResourceReference': ResourceReference,
        'ResourceReference.ref:machine': MachineReference,
        'ResourceReference.ref:process': ProcessReference,
        'ResourceReference.ref:port': PortReference,
        'ResourceReference.ref:machinewithhints': MachineReferenceWithHints,
        'ResourceReference.ref:clientgroup': ClientGroupReference,
        'BaseResource.CoreResource': CoreResource,
        'HostingConfiguration': HostingConfiguration,
        'BaseResource.machine': Machine,
        'ProcessHostingConfiguration': ProcessHostingConfiguration,
        'BaseResource.process': Process,
        'BaseResource.port': Port,
        'BaseResource.clientGroup': ClientGroup,
        'BaseResource.machineGroup': MachineGroup,
        'BaseResource.Relationship': Relationship,
        'BaseResource.rel:connection': Connection,
        'BaseResource.rel:acceptor': Acceptor,
        'HostingConfiguration.provider:azure': AzureHostingConfiguration,
        'ProcessHostingConfiguration.provider:azure': AzureProcessHostingConfiguration,
        'MapRequest': MapRequest,
        'MapRequest.map:single-machine-dependency': SingleMachineDependencyMapRequest,
        'MapRequest.MultipleMachinesMapRequest': MultipleMachinesMapRequest,
        'MapRequest.map:machine-list-dependency': MachineListMapRequest,
        'MapRequest.map:machine-group-dependency': MachineGroupMapRequest
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        Resource: Resource,
        ResourceReference: ResourceReference,
        MachineReference: MachineReference,
        ProcessReference: ProcessReference,
        PortReference: PortReference,
        MachineReferenceWithHints: MachineReferenceWithHints,
        ClientGroupReference: ClientGroupReference,
        CoreResource: CoreResource,
        Timezone: Timezone,
        AgentConfiguration: AgentConfiguration,
        MachineResourcesConfiguration: MachineResourcesConfiguration,
        Ipv4NetworkInterface: Ipv4NetworkInterface,
        Ipv6NetworkInterface: Ipv6NetworkInterface,
        NetworkConfiguration: NetworkConfiguration,
        OperatingSystemConfiguration: OperatingSystemConfiguration,
        VirtualMachineConfiguration: VirtualMachineConfiguration,
        HypervisorConfiguration: HypervisorConfiguration,
        HostingConfiguration: HostingConfiguration,
        Machine: Machine,
        ProcessHostedService: ProcessHostedService,
        ProcessDetails: ProcessDetails,
        ProcessUser: ProcessUser,
        ProcessHostingConfiguration: ProcessHostingConfiguration,
        Process: Process,
        Port: Port,
        ClientGroup: ClientGroup,
        ClientGroupMember: ClientGroupMember,
        MachineGroup: MachineGroup,
        Summary: Summary,
        MachineCountsByOperatingSystem: MachineCountsByOperatingSystem,
        MachinesSummary: MachinesSummary,
        Relationship: Relationship,
        Connection: Connection,
        Acceptor: Acceptor,
        SummaryProperties: SummaryProperties,
        RelationshipProperties: RelationshipProperties,
        ImageConfiguration: ImageConfiguration,
        AzureCloudServiceConfiguration: AzureCloudServiceConfiguration,
        AzureVmScaleSetConfiguration: AzureVmScaleSetConfiguration,
        AzureServiceFabricClusterConfiguration: AzureServiceFabricClusterConfiguration,
        AzureHostingConfiguration: AzureHostingConfiguration,
        AzureProcessHostingConfiguration: AzureProcessHostingConfiguration,
        MapNodes: MapNodes,
        MapEdges: MapEdges,
        Map: Map,
        Liveness: Liveness,
        MapRequest: MapRequest,
        SingleMachineDependencyMapRequest: SingleMachineDependencyMapRequest,
        MultipleMachinesMapRequest: MultipleMachinesMapRequest,
        MachineListMapRequest: MachineListMapRequest,
        MachineGroupMapRequest: MachineGroupMapRequest,
        MapResponse: MapResponse,
        ClientGroupMembersCount: ClientGroupMembersCount,
        ErrorModel: ErrorModel,
        ErrorResponse: ErrorResponse,
        MachineCollection: MachineCollection,
        ConnectionCollection: ConnectionCollection,
        ProcessCollection: ProcessCollection,
        PortCollection: PortCollection,
        MachineGroupCollection: MachineGroupCollection,
        ClientGroupMembersCollection: ClientGroupMembersCollection,
        discriminators: discriminators
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        MachineCollection: MachineCollection,
        Machine: Machine,
        CoreResource: CoreResource,
        Resource: Resource,
        BaseResource: BaseResource,
        Timezone: Timezone,
        AgentConfiguration: AgentConfiguration,
        MachineResourcesConfiguration: MachineResourcesConfiguration,
        NetworkConfiguration: NetworkConfiguration,
        Ipv4NetworkInterface: Ipv4NetworkInterface,
        Ipv6NetworkInterface: Ipv6NetworkInterface,
        OperatingSystemConfiguration: OperatingSystemConfiguration,
        VirtualMachineConfiguration: VirtualMachineConfiguration,
        HypervisorConfiguration: HypervisorConfiguration,
        HostingConfiguration: HostingConfiguration,
        ErrorResponse: ErrorResponse,
        ErrorModel: ErrorModel,
        Liveness: Liveness,
        ConnectionCollection: ConnectionCollection,
        Connection: Connection,
        Relationship: Relationship,
        ResourceReference: ResourceReference,
        PortReference: PortReference,
        MachineReference: MachineReference,
        ProcessCollection: ProcessCollection,
        Process: Process,
        ProcessDetails: ProcessDetails,
        ProcessHostedService: ProcessHostedService,
        ProcessUser: ProcessUser,
        ProcessHostingConfiguration: ProcessHostingConfiguration,
        PortCollection: PortCollection,
        Port: Port,
        MachineGroupCollection: MachineGroupCollection,
        MachineGroup: MachineGroup,
        MachineReferenceWithHints: MachineReferenceWithHints,
        ProcessReference: ProcessReference,
        ClientGroupReference: ClientGroupReference,
        ClientGroup: ClientGroup,
        ClientGroupMember: ClientGroupMember,
        Summary: Summary,
        MachinesSummary: MachinesSummary,
        MachineCountsByOperatingSystem: MachineCountsByOperatingSystem,
        Acceptor: Acceptor,
        AzureHostingConfiguration: AzureHostingConfiguration,
        ImageConfiguration: ImageConfiguration,
        AzureCloudServiceConfiguration: AzureCloudServiceConfiguration,
        AzureVmScaleSetConfiguration: AzureVmScaleSetConfiguration,
        AzureServiceFabricClusterConfiguration: AzureServiceFabricClusterConfiguration,
        AzureProcessHostingConfiguration: AzureProcessHostingConfiguration
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var clientGroupName = {
        parameterPath: "clientGroupName",
        mapper: {
            required: true,
            serializedName: "clientGroupName",
            constraints: {
                MaxLength: 256,
                MinLength: 3
            },
            type: {
                name: "String"
            }
        }
    };
    var endTime = {
        parameterPath: [
            "options",
            "endTime"
        ],
        mapper: {
            serializedName: "endTime",
            type: {
                name: "DateTime"
            }
        }
    };
    var live = {
        parameterPath: [
            "options",
            "live"
        ],
        mapper: {
            serializedName: "live",
            defaultValue: true,
            type: {
                name: "Boolean"
            }
        }
    };
    var machineGroupName = {
        parameterPath: "machineGroupName",
        mapper: {
            required: true,
            serializedName: "machineGroupName",
            constraints: {
                MaxLength: 36,
                MinLength: 36
            },
            type: {
                name: "String"
            }
        }
    };
    var machineName = {
        parameterPath: "machineName",
        mapper: {
            required: true,
            serializedName: "machineName",
            constraints: {
                MaxLength: 64,
                MinLength: 3
            },
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var portName = {
        parameterPath: "portName",
        mapper: {
            required: true,
            serializedName: "portName",
            constraints: {
                MaxLength: 64,
                MinLength: 3
            },
            type: {
                name: "String"
            }
        }
    };
    var processName = {
        parameterPath: "processName",
        mapper: {
            required: true,
            serializedName: "processName",
            constraints: {
                MaxLength: 128,
                MinLength: 3
            },
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            constraints: {
                MaxLength: 64,
                MinLength: 1,
                Pattern: /[a-zA-Z0-9_-]+/
            },
            type: {
                name: "String"
            }
        }
    };
    var startTime = {
        parameterPath: [
            "options",
            "startTime"
        ],
        mapper: {
            serializedName: "startTime",
            type: {
                name: "DateTime"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var timestamp = {
        parameterPath: [
            "options",
            "timestamp"
        ],
        mapper: {
            serializedName: "timestamp",
            type: {
                name: "DateTime"
            }
        }
    };
    var top = {
        parameterPath: [
            "options",
            "top"
        ],
        mapper: {
            serializedName: "$top",
            constraints: {
                InclusiveMaximum: 200,
                InclusiveMinimum: 1
            },
            type: {
                name: "Number"
            }
        }
    };
    var workspaceName = {
        parameterPath: "workspaceName",
        mapper: {
            required: true,
            serializedName: "workspaceName",
            constraints: {
                MaxLength: 63,
                MinLength: 3,
                Pattern: /[a-zA-Z0-9_][a-zA-Z0-9_-]+[a-zA-Z0-9_]/
            },
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Machines. */
    var Machines = /** @class */ (function () {
        /**
         * Create a Machines.
         * @param {ServicemapManagementClientContext} client Reference to the service client.
         */
        function Machines(client) {
            this.client = client;
        }
        Machines.prototype.listByWorkspace = function (resourceGroupName$$1, workspaceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                options: options
            }, listByWorkspaceOperationSpec, callback);
        };
        Machines.prototype.get = function (resourceGroupName$$1, workspaceName$$1, machineName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                machineName: machineName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        Machines.prototype.getLiveness = function (resourceGroupName$$1, workspaceName$$1, machineName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                machineName: machineName$$1,
                options: options
            }, getLivenessOperationSpec, callback);
        };
        Machines.prototype.listConnections = function (resourceGroupName$$1, workspaceName$$1, machineName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                machineName: machineName$$1,
                options: options
            }, listConnectionsOperationSpec, callback);
        };
        Machines.prototype.listProcesses = function (resourceGroupName$$1, workspaceName$$1, machineName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                machineName: machineName$$1,
                options: options
            }, listProcessesOperationSpec, callback);
        };
        Machines.prototype.listPorts = function (resourceGroupName$$1, workspaceName$$1, machineName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                machineName: machineName$$1,
                options: options
            }, listPortsOperationSpec, callback);
        };
        Machines.prototype.listMachineGroupMembership = function (resourceGroupName$$1, workspaceName$$1, machineName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                machineName: machineName$$1,
                options: options
            }, listMachineGroupMembershipOperationSpec, callback);
        };
        Machines.prototype.listByWorkspaceNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByWorkspaceNextOperationSpec, callback);
        };
        Machines.prototype.listConnectionsNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listConnectionsNextOperationSpec, callback);
        };
        Machines.prototype.listProcessesNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listProcessesNextOperationSpec, callback);
        };
        Machines.prototype.listPortsNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listPortsNextOperationSpec, callback);
        };
        Machines.prototype.listMachineGroupMembershipNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listMachineGroupMembershipNextOperationSpec, callback);
        };
        return Machines;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listByWorkspaceOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workspaceName
        ],
        queryParameters: [
            apiVersion,
            live,
            startTime,
            endTime,
            timestamp,
            top
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MachineCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workspaceName,
            machineName
        ],
        queryParameters: [
            apiVersion,
            timestamp
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Machine
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var getLivenessOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/liveness",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workspaceName,
            machineName
        ],
        queryParameters: [
            apiVersion,
            startTime,
            endTime
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Liveness
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listConnectionsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/connections",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workspaceName,
            machineName
        ],
        queryParameters: [
            apiVersion,
            startTime,
            endTime
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ConnectionCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listProcessesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/processes",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workspaceName,
            machineName
        ],
        queryParameters: [
            apiVersion,
            live,
            startTime,
            endTime,
            timestamp
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProcessCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listPortsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/ports",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workspaceName,
            machineName
        ],
        queryParameters: [
            apiVersion,
            startTime,
            endTime
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PortCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listMachineGroupMembershipOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/machineGroups",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workspaceName,
            machineName
        ],
        queryParameters: [
            apiVersion,
            startTime,
            endTime
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MachineGroupCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listByWorkspaceNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MachineCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listConnectionsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ConnectionCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listProcessesNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProcessCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listPortsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PortCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listMachineGroupMembershipNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MachineGroupCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        Process: Process,
        CoreResource: CoreResource,
        Resource: Resource,
        BaseResource: BaseResource,
        ResourceReference: ResourceReference,
        ProcessDetails: ProcessDetails,
        ProcessHostedService: ProcessHostedService,
        ProcessUser: ProcessUser,
        ProcessHostingConfiguration: ProcessHostingConfiguration,
        ErrorResponse: ErrorResponse,
        ErrorModel: ErrorModel,
        Liveness: Liveness,
        PortCollection: PortCollection,
        Port: Port,
        ConnectionCollection: ConnectionCollection,
        Connection: Connection,
        Relationship: Relationship,
        PortReference: PortReference,
        MachineReference: MachineReference,
        ProcessReference: ProcessReference,
        MachineReferenceWithHints: MachineReferenceWithHints,
        ClientGroupReference: ClientGroupReference,
        Machine: Machine,
        Timezone: Timezone,
        AgentConfiguration: AgentConfiguration,
        MachineResourcesConfiguration: MachineResourcesConfiguration,
        NetworkConfiguration: NetworkConfiguration,
        Ipv4NetworkInterface: Ipv4NetworkInterface,
        Ipv6NetworkInterface: Ipv6NetworkInterface,
        OperatingSystemConfiguration: OperatingSystemConfiguration,
        VirtualMachineConfiguration: VirtualMachineConfiguration,
        HypervisorConfiguration: HypervisorConfiguration,
        HostingConfiguration: HostingConfiguration,
        ClientGroup: ClientGroup,
        ClientGroupMember: ClientGroupMember,
        MachineGroup: MachineGroup,
        Summary: Summary,
        MachinesSummary: MachinesSummary,
        MachineCountsByOperatingSystem: MachineCountsByOperatingSystem,
        Acceptor: Acceptor,
        AzureHostingConfiguration: AzureHostingConfiguration,
        ImageConfiguration: ImageConfiguration,
        AzureCloudServiceConfiguration: AzureCloudServiceConfiguration,
        AzureVmScaleSetConfiguration: AzureVmScaleSetConfiguration,
        AzureServiceFabricClusterConfiguration: AzureServiceFabricClusterConfiguration,
        AzureProcessHostingConfiguration: AzureProcessHostingConfiguration
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Processes. */
    var Processes = /** @class */ (function () {
        /**
         * Create a Processes.
         * @param {ServicemapManagementClientContext} client Reference to the service client.
         */
        function Processes(client) {
            this.client = client;
        }
        Processes.prototype.get = function (resourceGroupName$$1, workspaceName$$1, machineName$$1, processName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                machineName: machineName$$1,
                processName: processName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        Processes.prototype.getLiveness = function (resourceGroupName$$1, workspaceName$$1, machineName$$1, processName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                machineName: machineName$$1,
                processName: processName$$1,
                options: options
            }, getLivenessOperationSpec$1, callback);
        };
        Processes.prototype.listAcceptingPorts = function (resourceGroupName$$1, workspaceName$$1, machineName$$1, processName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                machineName: machineName$$1,
                processName: processName$$1,
                options: options
            }, listAcceptingPortsOperationSpec, callback);
        };
        Processes.prototype.listConnections = function (resourceGroupName$$1, workspaceName$$1, machineName$$1, processName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                machineName: machineName$$1,
                processName: processName$$1,
                options: options
            }, listConnectionsOperationSpec$1, callback);
        };
        Processes.prototype.listAcceptingPortsNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listAcceptingPortsNextOperationSpec, callback);
        };
        Processes.prototype.listConnectionsNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listConnectionsNextOperationSpec$1, callback);
        };
        return Processes;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/processes/{processName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workspaceName,
            machineName,
            processName
        ],
        queryParameters: [
            apiVersion,
            timestamp
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Process
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var getLivenessOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/processes/{processName}/liveness",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workspaceName,
            machineName,
            processName
        ],
        queryParameters: [
            apiVersion,
            startTime,
            endTime
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Liveness
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listAcceptingPortsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/processes/{processName}/acceptingPorts",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workspaceName,
            machineName,
            processName
        ],
        queryParameters: [
            apiVersion,
            startTime,
            endTime
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PortCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listConnectionsOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/processes/{processName}/connections",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workspaceName,
            machineName,
            processName
        ],
        queryParameters: [
            apiVersion,
            startTime,
            endTime
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ConnectionCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listAcceptingPortsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PortCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listConnectionsNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ConnectionCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        Port: Port,
        CoreResource: CoreResource,
        Resource: Resource,
        BaseResource: BaseResource,
        ResourceReference: ResourceReference,
        ErrorResponse: ErrorResponse,
        ErrorModel: ErrorModel,
        Liveness: Liveness,
        ProcessCollection: ProcessCollection,
        Process: Process,
        ProcessDetails: ProcessDetails,
        ProcessHostedService: ProcessHostedService,
        ProcessUser: ProcessUser,
        ProcessHostingConfiguration: ProcessHostingConfiguration,
        ConnectionCollection: ConnectionCollection,
        Connection: Connection,
        Relationship: Relationship,
        PortReference: PortReference,
        MachineReference: MachineReference,
        ProcessReference: ProcessReference,
        MachineReferenceWithHints: MachineReferenceWithHints,
        ClientGroupReference: ClientGroupReference,
        Machine: Machine,
        Timezone: Timezone,
        AgentConfiguration: AgentConfiguration,
        MachineResourcesConfiguration: MachineResourcesConfiguration,
        NetworkConfiguration: NetworkConfiguration,
        Ipv4NetworkInterface: Ipv4NetworkInterface,
        Ipv6NetworkInterface: Ipv6NetworkInterface,
        OperatingSystemConfiguration: OperatingSystemConfiguration,
        VirtualMachineConfiguration: VirtualMachineConfiguration,
        HypervisorConfiguration: HypervisorConfiguration,
        HostingConfiguration: HostingConfiguration,
        ClientGroup: ClientGroup,
        ClientGroupMember: ClientGroupMember,
        MachineGroup: MachineGroup,
        Summary: Summary,
        MachinesSummary: MachinesSummary,
        MachineCountsByOperatingSystem: MachineCountsByOperatingSystem,
        Acceptor: Acceptor,
        AzureHostingConfiguration: AzureHostingConfiguration,
        ImageConfiguration: ImageConfiguration,
        AzureCloudServiceConfiguration: AzureCloudServiceConfiguration,
        AzureVmScaleSetConfiguration: AzureVmScaleSetConfiguration,
        AzureServiceFabricClusterConfiguration: AzureServiceFabricClusterConfiguration,
        AzureProcessHostingConfiguration: AzureProcessHostingConfiguration
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Ports. */
    var Ports = /** @class */ (function () {
        /**
         * Create a Ports.
         * @param {ServicemapManagementClientContext} client Reference to the service client.
         */
        function Ports(client) {
            this.client = client;
        }
        Ports.prototype.get = function (resourceGroupName$$1, workspaceName$$1, machineName$$1, portName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                machineName: machineName$$1,
                portName: portName$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        Ports.prototype.getLiveness = function (resourceGroupName$$1, workspaceName$$1, machineName$$1, portName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                machineName: machineName$$1,
                portName: portName$$1,
                options: options
            }, getLivenessOperationSpec$2, callback);
        };
        Ports.prototype.listAcceptingProcesses = function (resourceGroupName$$1, workspaceName$$1, machineName$$1, portName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                machineName: machineName$$1,
                portName: portName$$1,
                options: options
            }, listAcceptingProcessesOperationSpec, callback);
        };
        Ports.prototype.listConnections = function (resourceGroupName$$1, workspaceName$$1, machineName$$1, portName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                machineName: machineName$$1,
                portName: portName$$1,
                options: options
            }, listConnectionsOperationSpec$2, callback);
        };
        Ports.prototype.listAcceptingProcessesNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listAcceptingProcessesNextOperationSpec, callback);
        };
        Ports.prototype.listConnectionsNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listConnectionsNextOperationSpec$2, callback);
        };
        return Ports;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/ports/{portName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workspaceName,
            machineName,
            portName
        ],
        queryParameters: [
            apiVersion,
            startTime,
            endTime
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Port
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getLivenessOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/ports/{portName}/liveness",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workspaceName,
            machineName,
            portName
        ],
        queryParameters: [
            apiVersion,
            startTime,
            endTime
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Liveness
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listAcceptingProcessesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/ports/{portName}/acceptingProcesses",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workspaceName,
            machineName,
            portName
        ],
        queryParameters: [
            apiVersion,
            startTime,
            endTime
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProcessCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listConnectionsOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/ports/{portName}/connections",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workspaceName,
            machineName,
            portName
        ],
        queryParameters: [
            apiVersion,
            startTime,
            endTime
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ConnectionCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listAcceptingProcessesNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProcessCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listConnectionsNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ConnectionCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        ClientGroup: ClientGroup,
        CoreResource: CoreResource,
        Resource: Resource,
        BaseResource: BaseResource,
        ResourceReference: ResourceReference,
        ErrorResponse: ErrorResponse,
        ErrorModel: ErrorModel,
        ClientGroupMembersCount: ClientGroupMembersCount,
        ClientGroupMembersCollection: ClientGroupMembersCollection,
        ClientGroupMember: ClientGroupMember,
        PortReference: PortReference,
        MachineReference: MachineReference,
        ProcessReference: ProcessReference,
        MachineReferenceWithHints: MachineReferenceWithHints,
        ClientGroupReference: ClientGroupReference,
        Machine: Machine,
        Timezone: Timezone,
        AgentConfiguration: AgentConfiguration,
        MachineResourcesConfiguration: MachineResourcesConfiguration,
        NetworkConfiguration: NetworkConfiguration,
        Ipv4NetworkInterface: Ipv4NetworkInterface,
        Ipv6NetworkInterface: Ipv6NetworkInterface,
        OperatingSystemConfiguration: OperatingSystemConfiguration,
        VirtualMachineConfiguration: VirtualMachineConfiguration,
        HypervisorConfiguration: HypervisorConfiguration,
        HostingConfiguration: HostingConfiguration,
        Process: Process,
        ProcessDetails: ProcessDetails,
        ProcessHostedService: ProcessHostedService,
        ProcessUser: ProcessUser,
        ProcessHostingConfiguration: ProcessHostingConfiguration,
        Port: Port,
        MachineGroup: MachineGroup,
        Summary: Summary,
        MachinesSummary: MachinesSummary,
        MachineCountsByOperatingSystem: MachineCountsByOperatingSystem,
        Relationship: Relationship,
        Connection: Connection,
        Acceptor: Acceptor,
        AzureHostingConfiguration: AzureHostingConfiguration,
        ImageConfiguration: ImageConfiguration,
        AzureCloudServiceConfiguration: AzureCloudServiceConfiguration,
        AzureVmScaleSetConfiguration: AzureVmScaleSetConfiguration,
        AzureServiceFabricClusterConfiguration: AzureServiceFabricClusterConfiguration,
        AzureProcessHostingConfiguration: AzureProcessHostingConfiguration
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ClientGroups. */
    var ClientGroups = /** @class */ (function () {
        /**
         * Create a ClientGroups.
         * @param {ServicemapManagementClientContext} client Reference to the service client.
         */
        function ClientGroups(client) {
            this.client = client;
        }
        ClientGroups.prototype.get = function (resourceGroupName$$1, workspaceName$$1, clientGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                clientGroupName: clientGroupName$$1,
                options: options
            }, getOperationSpec$3, callback);
        };
        ClientGroups.prototype.getMembersCount = function (resourceGroupName$$1, workspaceName$$1, clientGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                clientGroupName: clientGroupName$$1,
                options: options
            }, getMembersCountOperationSpec, callback);
        };
        ClientGroups.prototype.listMembers = function (resourceGroupName$$1, workspaceName$$1, clientGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                clientGroupName: clientGroupName$$1,
                options: options
            }, listMembersOperationSpec, callback);
        };
        ClientGroups.prototype.listMembersNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listMembersNextOperationSpec, callback);
        };
        return ClientGroups;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/clientGroups/{clientGroupName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workspaceName,
            clientGroupName
        ],
        queryParameters: [
            apiVersion,
            startTime,
            endTime
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ClientGroup
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var getMembersCountOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/clientGroups/{clientGroupName}/membersCount",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workspaceName,
            clientGroupName
        ],
        queryParameters: [
            apiVersion,
            startTime,
            endTime
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ClientGroupMembersCount
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var listMembersOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/clientGroups/{clientGroupName}/members",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workspaceName,
            clientGroupName
        ],
        queryParameters: [
            apiVersion,
            startTime,
            endTime,
            top
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ClientGroupMembersCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var listMembersNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ClientGroupMembersCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        MapRequest: MapRequest,
        MapResponse: MapResponse,
        Map: Map,
        MapNodes: MapNodes,
        Machine: Machine,
        CoreResource: CoreResource,
        Resource: Resource,
        BaseResource: BaseResource,
        Timezone: Timezone,
        AgentConfiguration: AgentConfiguration,
        MachineResourcesConfiguration: MachineResourcesConfiguration,
        NetworkConfiguration: NetworkConfiguration,
        Ipv4NetworkInterface: Ipv4NetworkInterface,
        Ipv6NetworkInterface: Ipv6NetworkInterface,
        OperatingSystemConfiguration: OperatingSystemConfiguration,
        VirtualMachineConfiguration: VirtualMachineConfiguration,
        HypervisorConfiguration: HypervisorConfiguration,
        HostingConfiguration: HostingConfiguration,
        Process: Process,
        ResourceReference: ResourceReference,
        ProcessDetails: ProcessDetails,
        ProcessHostedService: ProcessHostedService,
        ProcessUser: ProcessUser,
        ProcessHostingConfiguration: ProcessHostingConfiguration,
        Port: Port,
        ClientGroup: ClientGroup,
        MapEdges: MapEdges,
        Connection: Connection,
        Relationship: Relationship,
        PortReference: PortReference,
        MachineReference: MachineReference,
        Acceptor: Acceptor,
        ProcessReference: ProcessReference,
        ErrorResponse: ErrorResponse,
        ErrorModel: ErrorModel,
        MachineReferenceWithHints: MachineReferenceWithHints,
        ClientGroupReference: ClientGroupReference,
        ClientGroupMember: ClientGroupMember,
        MachineGroup: MachineGroup,
        Summary: Summary,
        MachinesSummary: MachinesSummary,
        MachineCountsByOperatingSystem: MachineCountsByOperatingSystem,
        AzureHostingConfiguration: AzureHostingConfiguration,
        ImageConfiguration: ImageConfiguration,
        AzureCloudServiceConfiguration: AzureCloudServiceConfiguration,
        AzureVmScaleSetConfiguration: AzureVmScaleSetConfiguration,
        AzureServiceFabricClusterConfiguration: AzureServiceFabricClusterConfiguration,
        AzureProcessHostingConfiguration: AzureProcessHostingConfiguration,
        SingleMachineDependencyMapRequest: SingleMachineDependencyMapRequest,
        MultipleMachinesMapRequest: MultipleMachinesMapRequest,
        MachineListMapRequest: MachineListMapRequest,
        MachineGroupMapRequest: MachineGroupMapRequest
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Maps. */
    var Maps = /** @class */ (function () {
        /**
         * Create a Maps.
         * @param {ServicemapManagementClientContext} client Reference to the service client.
         */
        function Maps(client) {
            this.client = client;
        }
        Maps.prototype.generate = function (resourceGroupName$$1, workspaceName$$1, request, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                request: request,
                options: options
            }, generateOperationSpec, callback);
        };
        return Maps;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var generateOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/generateMap",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workspaceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "request",
            mapper: __assign({}, MapRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: MapResponse
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        MachinesSummary: MachinesSummary,
        Summary: Summary,
        Resource: Resource,
        BaseResource: BaseResource,
        MachineCountsByOperatingSystem: MachineCountsByOperatingSystem,
        ErrorResponse: ErrorResponse,
        ErrorModel: ErrorModel,
        CoreResource: CoreResource,
        Machine: Machine,
        Timezone: Timezone,
        AgentConfiguration: AgentConfiguration,
        MachineResourcesConfiguration: MachineResourcesConfiguration,
        NetworkConfiguration: NetworkConfiguration,
        Ipv4NetworkInterface: Ipv4NetworkInterface,
        Ipv6NetworkInterface: Ipv6NetworkInterface,
        OperatingSystemConfiguration: OperatingSystemConfiguration,
        VirtualMachineConfiguration: VirtualMachineConfiguration,
        HypervisorConfiguration: HypervisorConfiguration,
        HostingConfiguration: HostingConfiguration,
        Process: Process,
        ResourceReference: ResourceReference,
        ProcessDetails: ProcessDetails,
        ProcessHostedService: ProcessHostedService,
        ProcessUser: ProcessUser,
        ProcessHostingConfiguration: ProcessHostingConfiguration,
        Port: Port,
        ClientGroup: ClientGroup,
        ClientGroupMember: ClientGroupMember,
        PortReference: PortReference,
        MachineReference: MachineReference,
        ProcessReference: ProcessReference,
        MachineGroup: MachineGroup,
        MachineReferenceWithHints: MachineReferenceWithHints,
        Relationship: Relationship,
        Connection: Connection,
        Acceptor: Acceptor,
        AzureHostingConfiguration: AzureHostingConfiguration,
        ImageConfiguration: ImageConfiguration,
        AzureCloudServiceConfiguration: AzureCloudServiceConfiguration,
        AzureVmScaleSetConfiguration: AzureVmScaleSetConfiguration,
        AzureServiceFabricClusterConfiguration: AzureServiceFabricClusterConfiguration,
        AzureProcessHostingConfiguration: AzureProcessHostingConfiguration,
        ClientGroupReference: ClientGroupReference
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Summaries. */
    var Summaries = /** @class */ (function () {
        /**
         * Create a Summaries.
         * @param {ServicemapManagementClientContext} client Reference to the service client.
         */
        function Summaries(client) {
            this.client = client;
        }
        Summaries.prototype.getMachines = function (resourceGroupName$$1, workspaceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                options: options
            }, getMachinesOperationSpec, callback);
        };
        return Summaries;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var getMachinesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/summaries/machines",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workspaceName
        ],
        queryParameters: [
            apiVersion,
            startTime,
            endTime
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MachinesSummary
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        MachineGroupCollection: MachineGroupCollection,
        MachineGroup: MachineGroup,
        CoreResource: CoreResource,
        Resource: Resource,
        BaseResource: BaseResource,
        MachineReferenceWithHints: MachineReferenceWithHints,
        ResourceReference: ResourceReference,
        ErrorResponse: ErrorResponse,
        ErrorModel: ErrorModel,
        MachineReference: MachineReference,
        ProcessReference: ProcessReference,
        PortReference: PortReference,
        ClientGroupReference: ClientGroupReference,
        Machine: Machine,
        Timezone: Timezone,
        AgentConfiguration: AgentConfiguration,
        MachineResourcesConfiguration: MachineResourcesConfiguration,
        NetworkConfiguration: NetworkConfiguration,
        Ipv4NetworkInterface: Ipv4NetworkInterface,
        Ipv6NetworkInterface: Ipv6NetworkInterface,
        OperatingSystemConfiguration: OperatingSystemConfiguration,
        VirtualMachineConfiguration: VirtualMachineConfiguration,
        HypervisorConfiguration: HypervisorConfiguration,
        HostingConfiguration: HostingConfiguration,
        Process: Process,
        ProcessDetails: ProcessDetails,
        ProcessHostedService: ProcessHostedService,
        ProcessUser: ProcessUser,
        ProcessHostingConfiguration: ProcessHostingConfiguration,
        Port: Port,
        ClientGroup: ClientGroup,
        ClientGroupMember: ClientGroupMember,
        Summary: Summary,
        MachinesSummary: MachinesSummary,
        MachineCountsByOperatingSystem: MachineCountsByOperatingSystem,
        Relationship: Relationship,
        Connection: Connection,
        Acceptor: Acceptor,
        AzureHostingConfiguration: AzureHostingConfiguration,
        ImageConfiguration: ImageConfiguration,
        AzureCloudServiceConfiguration: AzureCloudServiceConfiguration,
        AzureVmScaleSetConfiguration: AzureVmScaleSetConfiguration,
        AzureServiceFabricClusterConfiguration: AzureServiceFabricClusterConfiguration,
        AzureProcessHostingConfiguration: AzureProcessHostingConfiguration
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a MachineGroups. */
    var MachineGroups = /** @class */ (function () {
        /**
         * Create a MachineGroups.
         * @param {ServicemapManagementClientContext} client Reference to the service client.
         */
        function MachineGroups(client) {
            this.client = client;
        }
        MachineGroups.prototype.listByWorkspace = function (resourceGroupName$$1, workspaceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                options: options
            }, listByWorkspaceOperationSpec$1, callback);
        };
        MachineGroups.prototype.create = function (resourceGroupName$$1, workspaceName$$1, machineGroup, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                machineGroup: machineGroup,
                options: options
            }, createOperationSpec, callback);
        };
        MachineGroups.prototype.get = function (resourceGroupName$$1, workspaceName$$1, machineGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                machineGroupName: machineGroupName$$1,
                options: options
            }, getOperationSpec$4, callback);
        };
        MachineGroups.prototype.update = function (resourceGroupName$$1, workspaceName$$1, machineGroupName$$1, machineGroup, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                machineGroupName: machineGroupName$$1,
                machineGroup: machineGroup,
                options: options
            }, updateOperationSpec, callback);
        };
        MachineGroups.prototype.deleteMethod = function (resourceGroupName$$1, workspaceName$$1, machineGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                machineGroupName: machineGroupName$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        MachineGroups.prototype.listByWorkspaceNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByWorkspaceNextOperationSpec$1, callback);
        };
        return MachineGroups;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var listByWorkspaceOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machineGroups",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workspaceName
        ],
        queryParameters: [
            apiVersion,
            startTime,
            endTime
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MachineGroupCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };
    var createOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machineGroups",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workspaceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "machineGroup",
            mapper: __assign({}, MachineGroup, { required: true })
        },
        responses: {
            201: {
                bodyMapper: MachineGroup
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machineGroups/{machineGroupName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workspaceName,
            machineGroupName
        ],
        queryParameters: [
            apiVersion,
            startTime,
            endTime
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MachineGroup
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };
    var updateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machineGroups/{machineGroupName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workspaceName,
            machineGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "machineGroup",
            mapper: __assign({}, MachineGroup, { required: true })
        },
        responses: {
            200: {
                bodyMapper: MachineGroup
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machineGroups/{machineGroupName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workspaceName,
            machineGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };
    var listByWorkspaceNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MachineGroupCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-servicemap";
    var packageVersion = "1.0.0-preview";
    var ServicemapManagementClientContext = /** @class */ (function (_super) {
        __extends(ServicemapManagementClientContext, _super);
        /**
         * Initializes a new instance of the ServicemapManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Azure subscription identifier.
         * @param [options] The parameter options
         */
        function ServicemapManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2015-11-01-preview';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return ServicemapManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var ServicemapManagementClient = /** @class */ (function (_super) {
        __extends(ServicemapManagementClient, _super);
        /**
         * Initializes a new instance of the ServicemapManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Azure subscription identifier.
         * @param [options] The parameter options
         */
        function ServicemapManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.machines = new Machines(_this);
            _this.processes = new Processes(_this);
            _this.ports = new Ports(_this);
            _this.clientGroups = new ClientGroups(_this);
            _this.maps = new Maps(_this);
            _this.summaries = new Summaries(_this);
            _this.machineGroups = new MachineGroups(_this);
            return _this;
        }
        return ServicemapManagementClient;
    }(ServicemapManagementClientContext));

    exports.ServicemapManagementClient = ServicemapManagementClient;
    exports.ServicemapManagementClientContext = ServicemapManagementClientContext;
    exports.ServicemapManagementModels = index;
    exports.ServicemapManagementMappers = mappers;
    exports.Machines = Machines;
    exports.Processes = Processes;
    exports.Ports = Ports;
    exports.ClientGroups = ClientGroups;
    exports.Maps = Maps;
    exports.Summaries = Summaries;
    exports.MachineGroups = MachineGroups;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-servicemap.js.map
