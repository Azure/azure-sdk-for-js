/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "ms-rest-azure-js";
import * as msRest from "ms-rest-js";

export { BaseResource, CloudError };


/**
 * @interface
 * An interface representing Resource.
 * Resource model definition.
 *
 * @extends BaseResource
 */
export interface Resource extends BaseResource {
  /**
   * @member {string} [id] Resource identifier.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [type] Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string} [name] Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
}

/**
 * Contains the possible cases for ResourceReference.
 */
export type ResourceReferenceUnion = ResourceReference | MachineReference | ProcessReference | PortReference | MachineReferenceWithHints | ClientGroupReference;

/**
 * @interface
 * An interface representing ResourceReference.
 * Represents a reference to another resource.
 *
 */
export interface ResourceReference {
  /**
   * @member {string} kind Polymorphic Discriminator
   */
  kind: "ResourceReference";
  /**
   * @member {string} id Resource URI.
   */
  id: string;
  /**
   * @member {string} [type] Resource type qualifier.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string} [name] Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
}

/**
 * @interface
 * An interface representing MachineReference.
 * Reference to a machine.
 *
 */
export interface MachineReference {
  /**
   * @member {string} kind Polymorphic Discriminator
   */
  kind: "ref:machine";
  /**
   * @member {string} id Resource URI.
   */
  id: string;
  /**
   * @member {string} [type] Resource type qualifier.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string} [name] Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
}

/**
 * @interface
 * An interface representing ProcessReferenceProperties.
 * Resource properties.
 *
 */
export interface ProcessReferenceProperties {
  /**
   * @member {MachineReference} [machine] Machine hosting the process.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly machine?: MachineReference;
}

/**
 * @interface
 * An interface representing ProcessReference.
 * Reference to a process.
 *
 */
export interface ProcessReference {
  /**
   * @member {string} kind Polymorphic Discriminator
   */
  kind: "ref:process";
  /**
   * @member {string} id Resource URI.
   */
  id: string;
  /**
   * @member {string} [type] Resource type qualifier.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string} [name] Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {MachineReference} [machine] Machine hosting the process.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly machine?: MachineReference;
}

/**
 * @interface
 * An interface representing PortReferenceProperties.
 * Resource properties.
 *
 */
export interface PortReferenceProperties {
  /**
   * @member {MachineReference} [machine] Machine hosting the port.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly machine?: MachineReference;
  /**
   * @member {string} [ipAddress] IP address of the port.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly ipAddress?: string;
  /**
   * @member {number} [portNumber] Port number.
   */
  portNumber?: number;
}

/**
 * @interface
 * An interface representing PortReference.
 * Reference to a port.
 *
 */
export interface PortReference {
  /**
   * @member {string} kind Polymorphic Discriminator
   */
  kind: "ref:port";
  /**
   * @member {string} id Resource URI.
   */
  id: string;
  /**
   * @member {string} [type] Resource type qualifier.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string} [name] Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {MachineReference} [machine] Machine hosting the port.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly machine?: MachineReference;
  /**
   * @member {string} [ipAddress] IP address of the port.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly ipAddress?: string;
  /**
   * @member {number} [portNumber] Port number.
   */
  portNumber?: number;
}

/**
 * @interface
 * An interface representing MachineReferenceWithHintsProperties.
 * Machine reference with name and os hints.
 *
 */
export interface MachineReferenceWithHintsProperties {
  /**
   * @member {string} [displayNameHint] Last known display name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly displayNameHint?: string;
  /**
   * @member {OperatingSystemFamily} [osFamilyHint] Last known operating system
   * family. Possible values include: 'unknown', 'windows', 'linux', 'solaris',
   * 'aix'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly osFamilyHint?: OperatingSystemFamily;
}

/**
 * @interface
 * An interface representing MachineReferenceWithHints.
 * A machine reference with a hint of the machine's name and operating system.
 *
 */
export interface MachineReferenceWithHints {
  /**
   * @member {string} kind Polymorphic Discriminator
   */
  kind: "ref:machinewithhints";
  /**
   * @member {string} id Resource URI.
   */
  id: string;
  /**
   * @member {string} [type] Resource type qualifier.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string} [name] Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [displayNameHint] Last known display name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly displayNameHint?: string;
  /**
   * @member {OperatingSystemFamily} [osFamilyHint] Last known operating system
   * family. Possible values include: 'unknown', 'windows', 'linux', 'solaris',
   * 'aix'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly osFamilyHint?: OperatingSystemFamily;
}

/**
 * @interface
 * An interface representing ClientGroupReference.
 * Reference to a client group.
 *
 */
export interface ClientGroupReference {
  /**
   * @member {string} kind Polymorphic Discriminator
   */
  kind: "ref:clientgroup";
  /**
   * @member {string} id Resource URI.
   */
  id: string;
  /**
   * @member {string} [type] Resource type qualifier.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string} [name] Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
}

/**
 * Contains the possible cases for CoreResource.
 */
export type CoreResourceUnion = CoreResource | Machine | Process | Port | ClientGroup | MachineGroup;

/**
 * @interface
 * An interface representing CoreResource.
 * Marker resource for the core Service Map resources
 *
 */
export interface CoreResource {
  /**
   * @member {string} kind Polymorphic Discriminator
   */
  kind: "CoreResource";
  /**
   * @member {string} [id] Resource identifier.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [type] Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string} [name] Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [etag] Resource ETAG.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing Timezone.
 * Describes a timezone.
 *
 */
export interface Timezone {
  /**
   * @member {string} [fullName] Timezone full name.
   */
  fullName?: string;
}

/**
 * @interface
 * An interface representing AgentConfiguration.
 * Describes the configuration of the Dependency Agent installed on a machine.
 *
 */
export interface AgentConfiguration {
  /**
   * @member {string} agentId Health Service Agent unique identifier.
   */
  agentId: string;
  /**
   * @member {string} [dependencyAgentId] Dependency Agent unique identifier.
   */
  dependencyAgentId?: string;
  /**
   * @member {string} [dependencyAgentVersion] Dependency Agent version number.
   */
  dependencyAgentVersion?: string;
  /**
   * @member {string} [dependencyAgentRevision] Dependency Agent revision
   * number.
   */
  dependencyAgentRevision?: string;
  /**
   * @member {MachineRebootStatus} [rebootStatus] Specifies whether the machine
   * has been rebooted since the Dependency Agent installation. Possible values
   * include: 'unknown', 'rebooted', 'notRebooted'
   */
  rebootStatus?: MachineRebootStatus;
  /**
   * @member {number} [clockGranularity] Machine clock granularity in
   * milliseconds.
   */
  clockGranularity?: number;
}

/**
 * @interface
 * An interface representing MachineResourcesConfiguration.
 * Describes the resources of a machine.
 *
 */
export interface MachineResourcesConfiguration {
  /**
   * @member {number} [physicalMemory] Physical memory in megabytes (MB).
   */
  physicalMemory?: number;
  /**
   * @member {number} [cpus] Number of CPUs.
   */
  cpus?: number;
  /**
   * @member {number} [cpuSpeed] CPU speed in megahertz (Mhz).
   */
  cpuSpeed?: number;
  /**
   * @member {Accuracy} [cpuSpeedAccuracy] Describes the accuracy of the
   * cpuSpeed field. Possible values include: 'actual', 'estimated'
   */
  cpuSpeedAccuracy?: Accuracy;
}

/**
 * @interface
 * An interface representing Ipv4NetworkInterface.
 * Describes an IPv4 network interface.
 *
 */
export interface Ipv4NetworkInterface {
  /**
   * @member {string} ipAddress IPv4 address.
   */
  ipAddress: string;
  /**
   * @member {string} [subnetMask] IPv4 subnet mask. Default value:
   * '255.255.255.255' .
   */
  subnetMask?: string;
}

/**
 * @interface
 * An interface representing Ipv6NetworkInterface.
 * Describes an IPv6 network interface.
 *
 */
export interface Ipv6NetworkInterface {
  /**
   * @member {string} ipAddress IPv6 address.
   */
  ipAddress: string;
}

/**
 * @interface
 * An interface representing NetworkConfiguration.
 * Describes the network configuration of a machine.
 *
 */
export interface NetworkConfiguration {
  /**
   * @member {Ipv4NetworkInterface[]} [ipv4Interfaces] IPv4 interfaces.
   */
  ipv4Interfaces?: Ipv4NetworkInterface[];
  /**
   * @member {Ipv6NetworkInterface[]} [ipv6Interfaces] IPv6 interfaces.
   */
  ipv6Interfaces?: Ipv6NetworkInterface[];
  /**
   * @member {string[]} [defaultIpv4Gateways] Default IPv4 gateways.
   */
  defaultIpv4Gateways?: string[];
  /**
   * @member {string[]} [macAddresses] MAC addresses of all active network
   * interfaces.
   */
  macAddresses?: string[];
  /**
   * @member {string[]} [dnsNames] DNS names associated with the machine.
   */
  dnsNames?: string[];
}

/**
 * @interface
 * An interface representing OperatingSystemConfiguration.
 * Describes the configuration of the operating system of a machine.
 *
 */
export interface OperatingSystemConfiguration {
  /**
   * @member {OperatingSystemFamily} family Windows, Linux, etc. Possible
   * values include: 'unknown', 'windows', 'linux', 'solaris', 'aix'
   */
  family: OperatingSystemFamily;
  /**
   * @member {string} fullName Operating system full name.
   */
  fullName: string;
  /**
   * @member {Bitness} bitness Operating system bitness (32-bit or 64-bit).
   * Possible values include: '32bit', '64bit'
   */
  bitness: Bitness;
}

/**
 * @interface
 * An interface representing VirtualMachineConfiguration.
 * Describes the virtualizaton-related configuration of a machine.
 *
 */
export interface VirtualMachineConfiguration {
  /**
   * @member {VirtualMachineType} [virtualMachineType] Specifies the
   * virtualization technology used by the machine (hyperv, vmware, etc.).
   * Possible values include: 'unknown', 'hyperv', 'ldom', 'lpar', 'vmware',
   * 'virtualPc', 'xen'
   */
  virtualMachineType?: VirtualMachineType;
  /**
   * @member {string} [nativeMachineId] The unique identifier of the virtual
   * machine as reported by the underlying virtualization sytem.
   */
  nativeMachineId?: string;
  /**
   * @member {string} [virtualMachineName] The Name of the virtual machine.
   */
  virtualMachineName?: string;
  /**
   * @member {string} [nativeHostMachineId] The unique identifier of the host
   * of this virtual machine as reported by the underlying virtualization
   * system.
   */
  nativeHostMachineId?: string;
}

/**
 * @interface
 * An interface representing HypervisorConfiguration.
 * Describes the hypervisor configuration of a machine.
 *
 */
export interface HypervisorConfiguration {
  /**
   * @member {HypervisorType} [hypervisorType] Specifies the virtualization
   * technology used by the hypervisor (hyperv, vmware, etc.). Possible values
   * include: 'unknown', 'hyperv'
   */
  hypervisorType?: HypervisorType;
  /**
   * @member {string} [nativeHostMachineId] The unique identifier of the
   * hypervisor machine as reported by the underlying virtualization system.
   */
  nativeHostMachineId?: string;
}

/**
 * Contains the possible cases for HostingConfiguration.
 */
export type HostingConfigurationUnion = HostingConfiguration | AzureHostingConfiguration;

/**
 * @interface
 * An interface representing HostingConfiguration.
 * Describes the hosting configuration of a machine.
 *
 */
export interface HostingConfiguration {
  /**
   * @member {string} kind Polymorphic Discriminator
   */
  kind: "HostingConfiguration";
  /**
   * @member {Provider} [provider] The hosting provider of the VM. Possible
   * values include: 'azure'
   */
  provider?: Provider;
}

/**
 * @interface
 * An interface representing MachineProperties.
 * Resource properties.
 *
 */
export interface MachineProperties {
  /**
   * @member {Date} [timestamp] UTC date and time when this resource was
   * updated in the system.
   */
  timestamp?: Date;
  /**
   * @member {MonitoringState} [monitoringState] Specifies whether the machine
   * is actively monitored or discovered. Possible values include: 'monitored',
   * 'discovered'
   */
  monitoringState?: MonitoringState;
  /**
   * @member {VirtualizationState} [virtualizationState] Specifies whether the
   * machine is virtualized. Possible values include: 'unknown', 'physical',
   * 'virtual', 'hypervisor'
   */
  virtualizationState?: VirtualizationState;
  /**
   * @member {string} [displayName] Name to use for display purposes
   */
  displayName?: string;
  /**
   * @member {string} [computerName] Name of the machine, e.g., server
   */
  computerName?: string;
  /**
   * @member {string} [fullyQualifiedDomainName] Fully-qualified name of the
   * machine, e.g., server.company.com
   */
  fullyQualifiedDomainName?: string;
  /**
   * @member {Date} [bootTime] UTC date and time when the machine last booted
   */
  bootTime?: Date;
  /**
   * @member {Timezone} [timezone] Timezone of the machine.
   */
  timezone?: Timezone;
  /**
   * @member {AgentConfiguration} [agent] Dependency Agent configuration.
   */
  agent?: AgentConfiguration;
  /**
   * @member {MachineResourcesConfiguration} [resources] Machine resources
   * (memory, cpu, etc.).
   */
  resources?: MachineResourcesConfiguration;
  /**
   * @member {NetworkConfiguration} [networking] Network configuration (ips,
   * gateways, dns, etc.)
   */
  networking?: NetworkConfiguration;
  /**
   * @member {OperatingSystemConfiguration} [operatingSystem] Operating system
   * information.
   */
  operatingSystem?: OperatingSystemConfiguration;
  /**
   * @member {VirtualMachineConfiguration} [virtualMachine]
   * Virtualization-related configuration. Present only when
   * `virtualizationState` is `virtual`.
   */
  virtualMachine?: VirtualMachineConfiguration;
  /**
   * @member {HypervisorConfiguration} [hypervisor] Hypervisor-related
   * configuration. Present only when 'virtualizationState' is `hypervisor`.
   */
  hypervisor?: HypervisorConfiguration;
  /**
   * @member {HostingConfigurationUnion} [hosting] Hosting-related
   * configuration. Present if hosting information is discovered for the VM.
   */
  hosting?: HostingConfigurationUnion;
}

/**
 * @interface
 * An interface representing Machine.
 * A machine resource represents a discovered computer system. It can be
 * *monitored*, i.e., a Dependency Agent is running on it, or *discovered*,
 * i.e., its existence was inferred by observing the data stream from monitored
 * machines. As machines change, prior versions of the machine resource are
 * preserved and available for access. A machine is live during an interval of
 * time, if either its Dependency Agent has reported data during (parts) of
 * that interval, or a Dependency agent running on other machines has reported
 * activity associated with the machine.
 *
 */
export interface Machine {
  /**
   * @member {string} kind Polymorphic Discriminator
   */
  kind: "machine";
  /**
   * @member {string} [id] Resource identifier.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [type] Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string} [name] Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [etag] Resource ETAG.
   */
  etag?: string;
  /**
   * @member {Date} [timestamp] UTC date and time when this resource was
   * updated in the system.
   */
  timestamp?: Date;
  /**
   * @member {MonitoringState} [monitoringState] Specifies whether the machine
   * is actively monitored or discovered. Possible values include: 'monitored',
   * 'discovered'
   */
  monitoringState?: MonitoringState;
  /**
   * @member {VirtualizationState} [virtualizationState] Specifies whether the
   * machine is virtualized. Possible values include: 'unknown', 'physical',
   * 'virtual', 'hypervisor'
   */
  virtualizationState?: VirtualizationState;
  /**
   * @member {string} [displayName] Name to use for display purposes
   */
  displayName?: string;
  /**
   * @member {string} [computerName] Name of the machine, e.g., server
   */
  computerName?: string;
  /**
   * @member {string} [fullyQualifiedDomainName] Fully-qualified name of the
   * machine, e.g., server.company.com
   */
  fullyQualifiedDomainName?: string;
  /**
   * @member {Date} [bootTime] UTC date and time when the machine last booted
   */
  bootTime?: Date;
  /**
   * @member {Timezone} [timezone] Timezone of the machine.
   */
  timezone?: Timezone;
  /**
   * @member {AgentConfiguration} [agent] Dependency Agent configuration.
   */
  agent?: AgentConfiguration;
  /**
   * @member {MachineResourcesConfiguration} [resources] Machine resources
   * (memory, cpu, etc.).
   */
  resources?: MachineResourcesConfiguration;
  /**
   * @member {NetworkConfiguration} [networking] Network configuration (ips,
   * gateways, dns, etc.)
   */
  networking?: NetworkConfiguration;
  /**
   * @member {OperatingSystemConfiguration} [operatingSystem] Operating system
   * information.
   */
  operatingSystem?: OperatingSystemConfiguration;
  /**
   * @member {VirtualMachineConfiguration} [virtualMachine]
   * Virtualization-related configuration. Present only when
   * `virtualizationState` is `virtual`.
   */
  virtualMachine?: VirtualMachineConfiguration;
  /**
   * @member {HypervisorConfiguration} [hypervisor] Hypervisor-related
   * configuration. Present only when 'virtualizationState' is `hypervisor`.
   */
  hypervisor?: HypervisorConfiguration;
  /**
   * @member {HostingConfigurationUnion} [hosting] Hosting-related
   * configuration. Present if hosting information is discovered for the VM.
   */
  hosting?: HostingConfigurationUnion;
}

/**
 * @interface
 * An interface representing ProcessHostedService.
 * A service hosted by a process.
 *
 */
export interface ProcessHostedService {
  /**
   * @member {string} [name] The name of the service.
   */
  name?: string;
  /**
   * @member {string} [displayName] The service's display name.
   */
  displayName?: string;
}

/**
 * @interface
 * An interface representing ProcessDetails.
 * Describes process metadata.
 *
 */
export interface ProcessDetails {
  /**
   * @member {string} [persistentKey] A unique indentifier for a process,
   * generally resilient to process restart, computed by Service Map.
   */
  persistentKey?: string;
  /**
   * @member {number} [poolId] Represents the identity of the process pool
   * assigned to the process by Dependency Agent.
   */
  poolId?: number;
  /**
   * @member {number} [firstPid] The Operating System Process Idendifier (PID)
   * of the first process in this process pool.
   */
  firstPid?: number;
  /**
   * @member {string} [description] Process description.
   */
  description?: string;
  /**
   * @member {string} [companyName] Name of company that created the process
   * executable.
   */
  companyName?: string;
  /**
   * @member {string} [internalName] Internal process name.
   */
  internalName?: string;
  /**
   * @member {string} [productName] Product name.
   */
  productName?: string;
  /**
   * @member {string} [productVersion] Product version.
   */
  productVersion?: string;
  /**
   * @member {string} [fileVersion] File version.
   */
  fileVersion?: string;
  /**
   * @member {string} [commandLine] Process command line.
   */
  commandLine?: string;
  /**
   * @member {string} [executablePath] Process executable path.
   */
  executablePath?: string;
  /**
   * @member {string} [workingDirectory] Process workingDirectory.
   */
  workingDirectory?: string;
  /**
   * @member {ProcessHostedService[]} [services] Collection of services hosted
   * by this Process (Windows only).
   */
  services?: ProcessHostedService[];
  /**
   * @member {string} [zoneName] Process zone name (Linux only).
   */
  zoneName?: string;
}

/**
 * @interface
 * An interface representing ProcessUser.
 * Describes the user under which a process is running.
 *
 */
export interface ProcessUser {
  /**
   * @member {string} [userName] User name under which the process is running.
   */
  userName?: string;
  /**
   * @member {string} [userDomain] Domain name for the user.
   */
  userDomain?: string;
}

/**
 * Contains the possible cases for ProcessHostingConfiguration.
 */
export type ProcessHostingConfigurationUnion = ProcessHostingConfiguration | AzureProcessHostingConfiguration;

/**
 * @interface
 * An interface representing ProcessHostingConfiguration.
 * Describes the hosting configuration of a process.
 *
 */
export interface ProcessHostingConfiguration {
  /**
   * @member {string} kind Polymorphic Discriminator
   */
  kind: "ProcessHostingConfiguration";
  /**
   * @member {Provider1} [provider] The hosting provider of the VM. Possible
   * values include: 'azure'
   */
  provider?: Provider1;
}

/**
 * @interface
 * An interface representing ProcessProperties.
 * Resource properties.
 *
 */
export interface ProcessProperties {
  /**
   * @member {Date} [timestamp] UTC date and time when this process resource
   * was updated in the system
   */
  timestamp?: Date;
  /**
   * @member {MonitoringState} [monitoringState] Specifies whether the process
   * is actively monitored or discovered. Possible values include: 'monitored',
   * 'discovered'
   */
  monitoringState?: MonitoringState;
  /**
   * @member {ResourceReferenceUnion} [machine] Machine hosting this process.
   */
  machine?: ResourceReferenceUnion;
  /**
   * @member {string} [executableName] The name of the process executable
   */
  executableName?: string;
  /**
   * @member {string} [displayName] Name to use for display purposes
   */
  displayName?: string;
  /**
   * @member {Date} [startTime] UTC date and time when the process started
   */
  startTime?: Date;
  /**
   * @member {ProcessRole} [role] The inferred role of this process based on
   * its name, command line, etc. Possible values include: 'webServer',
   * 'appServer', 'databaseServer', 'ldapServer', 'smbServer'
   */
  role?: ProcessRole;
  /**
   * @member {string} [group] The name of the product or suite of the process.
   * The group is determined by its executable name, command line, etc.
   */
  group?: string;
  /**
   * @member {ProcessDetails} [details] Process metadata (command line, product
   * name, etc.).
   */
  details?: ProcessDetails;
  /**
   * @member {ProcessUser} [user] Information about the account under which the
   * process is executing.
   */
  user?: ProcessUser;
  /**
   * @member {ResourceReferenceUnion} [clientOf] Present only for a discovered
   * process acting as a client of a monitored process/machine/port. References
   * the monitored process/machine/port that this process is a client of.
   */
  clientOf?: ResourceReferenceUnion;
  /**
   * @member {ResourceReferenceUnion} [acceptorOf] Present only for a
   * discovered process acting as a server. References the port on which the
   * discovered process is accepting.
   */
  acceptorOf?: ResourceReferenceUnion;
  /**
   * @member {ProcessHostingConfigurationUnion} [hosting] Information about the
   * hosting environment
   */
  hosting?: ProcessHostingConfigurationUnion;
}

/**
 * @interface
 * An interface representing Process.
 * A process resource represents a process running on a machine. The process
 * may be actively *monitored*, i.e., a Dependency Agent is running on its
 * machine, or *discovered*, i.e., its existence was inferred by observing the
 * data stream from monitored machines. A process resource represents a pool of
 * actual operating system resources that share command lines and metadata. As
 * the process pool evolves over time, prior versions of the process resource
 * are preserved and available for access. A process is live during an interval
 * of time, if that process is executing during (parts) of that interval
 *
 */
export interface Process {
  /**
   * @member {string} kind Polymorphic Discriminator
   */
  kind: "process";
  /**
   * @member {string} [id] Resource identifier.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [type] Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string} [name] Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [etag] Resource ETAG.
   */
  etag?: string;
  /**
   * @member {Date} [timestamp] UTC date and time when this process resource
   * was updated in the system
   */
  timestamp?: Date;
  /**
   * @member {MonitoringState} [monitoringState] Specifies whether the process
   * is actively monitored or discovered. Possible values include: 'monitored',
   * 'discovered'
   */
  monitoringState?: MonitoringState;
  /**
   * @member {ResourceReferenceUnion} [machine] Machine hosting this process.
   */
  machine?: ResourceReferenceUnion;
  /**
   * @member {string} [executableName] The name of the process executable
   */
  executableName?: string;
  /**
   * @member {string} [displayName] Name to use for display purposes
   */
  displayName?: string;
  /**
   * @member {Date} [startTime] UTC date and time when the process started
   */
  startTime?: Date;
  /**
   * @member {ProcessRole} [role] The inferred role of this process based on
   * its name, command line, etc. Possible values include: 'webServer',
   * 'appServer', 'databaseServer', 'ldapServer', 'smbServer'
   */
  role?: ProcessRole;
  /**
   * @member {string} [group] The name of the product or suite of the process.
   * The group is determined by its executable name, command line, etc.
   */
  group?: string;
  /**
   * @member {ProcessDetails} [details] Process metadata (command line, product
   * name, etc.).
   */
  details?: ProcessDetails;
  /**
   * @member {ProcessUser} [user] Information about the account under which the
   * process is executing.
   */
  user?: ProcessUser;
  /**
   * @member {ResourceReferenceUnion} [clientOf] Present only for a discovered
   * process acting as a client of a monitored process/machine/port. References
   * the monitored process/machine/port that this process is a client of.
   */
  clientOf?: ResourceReferenceUnion;
  /**
   * @member {ResourceReferenceUnion} [acceptorOf] Present only for a
   * discovered process acting as a server. References the port on which the
   * discovered process is accepting.
   */
  acceptorOf?: ResourceReferenceUnion;
  /**
   * @member {ProcessHostingConfigurationUnion} [hosting] Information about the
   * hosting environment
   */
  hosting?: ProcessHostingConfigurationUnion;
}

/**
 * @interface
 * An interface representing PortProperties.
 * Resource properties.
 *
 */
export interface PortProperties {
  /**
   * @member {MonitoringState} [monitoringState] Specifies whether the port is
   * actively monitored or discovered. Possible values include: 'monitored',
   * 'discovered'
   */
  monitoringState?: MonitoringState;
  /**
   * @member {ResourceReferenceUnion} [machine] Machine hosting this port.
   */
  machine?: ResourceReferenceUnion;
  /**
   * @member {string} [displayName] Name to use for display purposes.
   */
  displayName?: string;
  /**
   * @member {string} [ipAddress] IP address associated with the port. At
   * present only IPv4 addresses are supported.
   */
  ipAddress?: string;
  /**
   * @member {number} [portNumber] Port number.
   */
  portNumber?: number;
}

/**
 * @interface
 * An interface representing Port.
 * A port resource represents a server port on a machine. The port may be
 * actively *monitored*, i.e., a Dependency Agent is running on its machine, or
 * *discovered*, i.e., its existence was inferred by observing the data stream
 * from monitored machines. A port is live during an interval of time, if that
 * port had associated activity during (parts) of that interval.
 *
 */
export interface Port {
  /**
   * @member {string} kind Polymorphic Discriminator
   */
  kind: "port";
  /**
   * @member {string} [id] Resource identifier.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [type] Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string} [name] Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [etag] Resource ETAG.
   */
  etag?: string;
  /**
   * @member {MonitoringState} [monitoringState] Specifies whether the port is
   * actively monitored or discovered. Possible values include: 'monitored',
   * 'discovered'
   */
  monitoringState?: MonitoringState;
  /**
   * @member {ResourceReferenceUnion} [machine] Machine hosting this port.
   */
  machine?: ResourceReferenceUnion;
  /**
   * @member {string} [displayName] Name to use for display purposes.
   */
  displayName?: string;
  /**
   * @member {string} [ipAddress] IP address associated with the port. At
   * present only IPv4 addresses are supported.
   */
  ipAddress?: string;
  /**
   * @member {number} [portNumber] Port number.
   */
  portNumber?: number;
}

/**
 * @interface
 * An interface representing ClientGroupProperties.
 * Resource properties.
 *
 */
export interface ClientGroupProperties {
  /**
   * @member {ResourceReferenceUnion} clientsOf Reference to the resource whose
   * clients are represented by this group.
   */
  clientsOf: ResourceReferenceUnion;
}

/**
 * @interface
 * An interface representing ClientGroup.
 * Represents a collection of clients of a resource. A client group can
 * represent the clients of a port, process, or a machine.
 *
 */
export interface ClientGroup {
  /**
   * @member {string} kind Polymorphic Discriminator
   */
  kind: "clientGroup";
  /**
   * @member {string} [id] Resource identifier.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [type] Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string} [name] Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [etag] Resource ETAG.
   */
  etag?: string;
  /**
   * @member {ResourceReferenceUnion} clientsOf Reference to the resource whose
   * clients are represented by this group.
   */
  clientsOf: ResourceReferenceUnion;
}

/**
 * @interface
 * An interface representing ClientGroupMemberProperties.
 * Resource properties.
 *
 */
export interface ClientGroupMemberProperties {
  /**
   * @member {string} [ipAddress] IP address.
   */
  ipAddress?: string;
  /**
   * @member {PortReference} [port] Port into which this client connected
   */
  port?: PortReference;
  /**
   * @member {ProcessReference[]} [processes] Processes accepting on the above
   * port that received connections from this client.
   */
  processes?: ProcessReference[];
}

/**
 * @interface
 * An interface representing ClientGroupMember.
 * Represents a member of a client group
 *
 * @extends Resource
 */
export interface ClientGroupMember extends Resource {
  /**
   * @member {string} [ipAddress] IP address.
   */
  ipAddress?: string;
  /**
   * @member {PortReference} [port] Port into which this client connected
   */
  port?: PortReference;
  /**
   * @member {ProcessReference[]} [processes] Processes accepting on the above
   * port that received connections from this client.
   */
  processes?: ProcessReference[];
}

/**
 * @interface
 * An interface representing MachineGroupProperties.
 * Resource properties.
 *
 */
export interface MachineGroupProperties {
  /**
   * @member {MachineGroupType} [groupType] Type of the machine group. Possible
   * values include: 'unknown', 'azure-cs', 'azure-sf', 'azure-vmss',
   * 'user-static'
   */
  groupType?: MachineGroupType;
  /**
   * @member {string} displayName User defined name for the group
   */
  displayName: string;
  /**
   * @member {number} [count] Count of machines in this group. The value of
   * count may be bigger than the number of machines in case of the group has
   * been truncated due to exceeding the max number of machines a group can
   * handle.
   */
  count?: number;
  /**
   * @member {MachineReferenceWithHints[]} [machines] References of the
   * machines in this group. The hints within each reference do not represent
   * the current value of the corresponding fields. They are a snapshot created
   * during the last time the machine group was updated.
   */
  machines?: MachineReferenceWithHints[];
}

/**
 * @interface
 * An interface representing MachineGroup.
 * A user-defined logical grouping of machines.
 *
 */
export interface MachineGroup {
  /**
   * @member {string} kind Polymorphic Discriminator
   */
  kind: "machineGroup";
  /**
   * @member {string} [id] Resource identifier.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [type] Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string} [name] Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [etag] Resource ETAG.
   */
  etag?: string;
  /**
   * @member {MachineGroupType} [groupType] Type of the machine group. Possible
   * values include: 'unknown', 'azure-cs', 'azure-sf', 'azure-vmss',
   * 'user-static'
   */
  groupType?: MachineGroupType;
  /**
   * @member {string} displayName User defined name for the group
   */
  displayName: string;
  /**
   * @member {number} [count] Count of machines in this group. The value of
   * count may be bigger than the number of machines in case of the group has
   * been truncated due to exceeding the max number of machines a group can
   * handle.
   */
  count?: number;
  /**
   * @member {MachineReferenceWithHints[]} [machines] References of the
   * machines in this group. The hints within each reference do not represent
   * the current value of the corresponding fields. They are a snapshot created
   * during the last time the machine group was updated.
   */
  machines?: MachineReferenceWithHints[];
}

/**
 * @interface
 * An interface representing Summary.
 * Base for all resource summaries.
 *
 * @extends Resource
 */
export interface Summary extends Resource {
}

/**
 * @interface
 * An interface representing MachineCountsByOperatingSystem.
 * Machines by operating system.
 *
 */
export interface MachineCountsByOperatingSystem {
  /**
   * @member {number} windows Number of live Windows machines.
   */
  windows: number;
  /**
   * @member {number} linux Number of live Linux machines.
   */
  linux: number;
}

/**
 * @interface
 * An interface representing SummaryProperties.
 * Base for all summaries.
 *
 */
export interface SummaryProperties {
  /**
   * @member {Date} startTime Summary interval start time.
   */
  startTime: Date;
  /**
   * @member {Date} endTime Summary interval end time.
   */
  endTime: Date;
}

/**
 * @interface
 * An interface representing MachinesSummaryProperties.
 * Summarizes machines in the workspace.
 *
 * @extends SummaryProperties
 */
export interface MachinesSummaryProperties extends SummaryProperties {
  /**
   * @member {number} total Total number of machines.
   */
  total: number;
  /**
   * @member {number} live Number of live machines.
   */
  live: number;
  /**
   * @member {MachineCountsByOperatingSystem} os Machine counts by operating
   * system.
   */
  os: MachineCountsByOperatingSystem;
}

/**
 * @interface
 * An interface representing MachinesSummary.
 * A summary of the machines in the workspace.
 *
 * @extends Summary
 */
export interface MachinesSummary extends Summary {
  /**
   * @member {Date} startTime Summary interval start time.
   */
  startTime: Date;
  /**
   * @member {Date} endTime Summary interval end time.
   */
  endTime: Date;
  /**
   * @member {number} total Total number of machines.
   */
  total: number;
  /**
   * @member {number} live Number of live machines.
   */
  live: number;
  /**
   * @member {MachineCountsByOperatingSystem} os Machine counts by operating
   * system.
   */
  os: MachineCountsByOperatingSystem;
}

/**
 * Contains the possible cases for Relationship.
 */
export type RelationshipUnion = Relationship | Connection | Acceptor;

/**
 * @interface
 * An interface representing Relationship.
 * A typed relationship between two entities.
 *
 */
export interface Relationship {
  /**
   * @member {string} kind Polymorphic Discriminator
   */
  kind: "Relationship";
  /**
   * @member {string} [id] Resource identifier.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [type] Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string} [name] Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
}

/**
 * @interface
 * An interface representing RelationshipProperties.
 * Relationship properties.
 *
 */
export interface RelationshipProperties {
  /**
   * @member {ResourceReferenceUnion} source Source resource of the
   * relationship.
   */
  source: ResourceReferenceUnion;
  /**
   * @member {ResourceReferenceUnion} destination Destination resource of the
   * relationship.
   */
  destination: ResourceReferenceUnion;
  /**
   * @member {Date} [startTime] Relationship start time.
   */
  startTime?: Date;
  /**
   * @member {Date} [endTime] Relationship end time.
   */
  endTime?: Date;
}

/**
 * @interface
 * An interface representing ConnectionProperties.
 * Properties for a connection resource.
 *
 * @extends RelationshipProperties
 */
export interface ConnectionProperties extends RelationshipProperties {
  /**
   * @member {PortReference} [serverPort] Reference to the server port via
   * which this connection has been established.
   */
  serverPort?: PortReference;
  /**
   * @member {ConnectionFailureState} [failureState] Specifies whether there
   * are only successful, failed or a mixture of both connections represented
   * by this resource. Possible values include: 'ok', 'failed', 'mixed'
   */
  failureState?: ConnectionFailureState;
}

/**
 * @interface
 * An interface representing Connection.
 * A network connection.
 *
 */
export interface Connection {
  /**
   * @member {string} kind Polymorphic Discriminator
   */
  kind: "rel:connection";
  /**
   * @member {string} [id] Resource identifier.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [type] Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string} [name] Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {ResourceReferenceUnion} source Source resource of the
   * relationship.
   */
  source: ResourceReferenceUnion;
  /**
   * @member {ResourceReferenceUnion} destination Destination resource of the
   * relationship.
   */
  destination: ResourceReferenceUnion;
  /**
   * @member {Date} [startTime] Relationship start time.
   */
  startTime?: Date;
  /**
   * @member {Date} [endTime] Relationship end time.
   */
  endTime?: Date;
  /**
   * @member {PortReference} [serverPort] Reference to the server port via
   * which this connection has been established.
   */
  serverPort?: PortReference;
  /**
   * @member {ConnectionFailureState} [failureState] Specifies whether there
   * are only successful, failed or a mixture of both connections represented
   * by this resource. Possible values include: 'ok', 'failed', 'mixed'
   */
  failureState?: ConnectionFailureState;
}

/**
 * @interface
 * An interface representing AcceptorProperties.
 * Properties for an acceptor relationship.
 *
 */
export interface AcceptorProperties {
  /**
   * @member {PortReference} source Port being accepted.
   */
  source: PortReference;
  /**
   * @member {ProcessReference} destination Accepting process.
   */
  destination: ProcessReference;
  /**
   * @member {Date} [startTime] Relationship start time.
   */
  startTime?: Date;
  /**
   * @member {Date} [endTime] Relationship end time.
   */
  endTime?: Date;
}

/**
 * @interface
 * An interface representing Acceptor.
 * A process accepting on a port.
 *
 */
export interface Acceptor {
  /**
   * @member {string} kind Polymorphic Discriminator
   */
  kind: "rel:acceptor";
  /**
   * @member {string} [id] Resource identifier.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [type] Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string} [name] Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {PortReference} source Port being accepted.
   */
  source: PortReference;
  /**
   * @member {ProcessReference} destination Accepting process.
   */
  destination: ProcessReference;
  /**
   * @member {Date} [startTime] Relationship start time.
   */
  startTime?: Date;
  /**
   * @member {Date} [endTime] Relationship end time.
   */
  endTime?: Date;
}

/**
 * @interface
 * An interface representing ImageConfiguration.
 * Describes the VM image of a machine.
 *
 */
export interface ImageConfiguration {
  /**
   * @member {string} [publisher] Publisher of the VM image.
   */
  publisher?: string;
  /**
   * @member {string} [offering] Offering of the VM image.
   */
  offering?: string;
  /**
   * @member {string} [sku] SKU of the VM image.
   */
  sku?: string;
  /**
   * @member {string} [version] Version of the VM image.
   */
  version?: string;
}

/**
 * @interface
 * An interface representing AzureCloudServiceConfiguration.
 * Describes an Azure Cloud Service
 *
 */
export interface AzureCloudServiceConfiguration {
  /**
   * @member {string} [name] Cloud Service name
   */
  name?: string;
  /**
   * @member {string} [instanceId] Cloud Service instance identifier
   */
  instanceId?: string;
  /**
   * @member {string} [deployment] Cloud Service deployment identifier
   */
  deployment?: string;
  /**
   * @member {string} [roleName] Cloud Service role name
   */
  roleName?: string;
  /**
   * @member {AzureCloudServiceRoleType} [roleType] Used to specify type of an
   * Azure Cloud Service role. Possible values include: 'unknown', 'worker',
   * 'web'
   */
  roleType?: AzureCloudServiceRoleType;
}

/**
 * @interface
 * An interface representing AzureVmScaleSetConfiguration.
 * Describes an Azure Virtual Machine Scale Set
 *
 */
export interface AzureVmScaleSetConfiguration {
  /**
   * @member {string} [name] Virtual Machine Scale Set name
   */
  name?: string;
  /**
   * @member {string} [instanceId] Virtual Machine Scale Set instance
   * identifier
   */
  instanceId?: string;
  /**
   * @member {string} [deployment] Virtual Machine Scale Set deployment
   * identifier
   */
  deployment?: string;
  /**
   * @member {string} [resourceId] Unique identifier of the resource.
   */
  resourceId?: string;
}

/**
 * @interface
 * An interface representing AzureServiceFabricClusterConfiguration.
 * Describes an Azure Service Fabric Cluster
 *
 */
export interface AzureServiceFabricClusterConfiguration {
  /**
   * @member {string} [name] Service Fabric cluster name.
   */
  name?: string;
  /**
   * @member {string} [clusterId] Service Fabric cluster indentifier.
   */
  clusterId?: string;
}

/**
 * @interface
 * An interface representing AzureHostingConfiguration.
 * Provides information about how a machine is hosted in Azure
 *
 */
export interface AzureHostingConfiguration {
  /**
   * @member {string} kind Polymorphic Discriminator
   */
  kind: "provider:azure";
  /**
   * @member {Provider} [provider] The hosting provider of the VM. Possible
   * values include: 'azure'
   */
  provider?: Provider;
  /**
   * @member {string} [vmId] Virtual Machine ID (unique identifier).
   */
  vmId?: string;
  /**
   * @member {string} [location] Geographical location of the VM.
   */
  location?: string;
  /**
   * @member {string} [name] Machine name according to the hosting provider.
   */
  name?: string;
  /**
   * @member {string} [size] Size of the VM.
   */
  size?: string;
  /**
   * @member {string} [updateDomain] Update domain of the VM.
   */
  updateDomain?: string;
  /**
   * @member {string} [faultDomain] Fault domain of the VM.
   */
  faultDomain?: string;
  /**
   * @member {string} [subscriptionId] Subscription ID.
   */
  subscriptionId?: string;
  /**
   * @member {string} [resourceGroup] Resource group name within the specified
   * subscription.
   */
  resourceGroup?: string;
  /**
   * @member {string} [resourceId] Unique identifier of the resource.
   */
  resourceId?: string;
  /**
   * @member {ImageConfiguration} [image] Image of the machine.
   */
  image?: ImageConfiguration;
  /**
   * @member {AzureCloudServiceConfiguration} [cloudService] Contains
   * information about machines hosted as an Azure Cloud Service
   */
  cloudService?: AzureCloudServiceConfiguration;
  /**
   * @member {AzureVmScaleSetConfiguration} [vmScaleSet] Contains information
   * about machines hosted as an Azure Virtual Machine Scale Set
   */
  vmScaleSet?: AzureVmScaleSetConfiguration;
  /**
   * @member {AzureServiceFabricClusterConfiguration} [serviceFabricCluster]
   * Contains information about machines that belong an Azure Service Fabric
   * Cluster
   */
  serviceFabricCluster?: AzureServiceFabricClusterConfiguration;
}

/**
 * @interface
 * An interface representing AzureProcessHostingConfiguration.
 * Describes the hosting configuration of a process when hosted on azure
 *
 */
export interface AzureProcessHostingConfiguration {
  /**
   * @member {string} kind Polymorphic Discriminator
   */
  kind: "provider:azure";
  /**
   * @member {Provider1} [provider] The hosting provider of the VM. Possible
   * values include: 'azure'
   */
  provider?: Provider1;
  /**
   * @member {AzureCloudServiceConfiguration} [cloudService] Contains
   * information about the cloud service the process belongs to
   */
  cloudService?: AzureCloudServiceConfiguration;
}

/**
 * @interface
 * An interface representing MapNodes.
 * The nodes (entities) of a map.
 *
 */
export interface MapNodes {
  /**
   * @member {Machine[]} [machines] Machine resources.
   */
  machines?: Machine[];
  /**
   * @member {Process[]} [processes] Process resources.
   */
  processes?: Process[];
  /**
   * @member {Port[]} [ports] Port resources.
   */
  ports?: Port[];
  /**
   * @member {ClientGroup[]} [clientGroups] Client Group resources.
   */
  clientGroups?: ClientGroup[];
}

/**
 * @interface
 * An interface representing MapEdges.
 * The edges (relationships) of a map.
 *
 */
export interface MapEdges {
  /**
   * @member {Connection[]} [connections] Network connections.
   */
  connections?: Connection[];
  /**
   * @member {Acceptor[]} [acceptors] Processes accepting on a port.
   */
  acceptors?: Acceptor[];
}

/**
 * @interface
 * An interface representing Map.
 * A map of resources and relationships between them.
 *
 */
export interface Map {
  /**
   * @member {MapNodes} nodes
   */
  nodes: MapNodes;
  /**
   * @member {MapEdges} edges
   */
  edges: MapEdges;
}

/**
 * @interface
 * An interface representing Liveness.
 * Specifies the contents of a check liveness response.
 *
 */
export interface Liveness {
  /**
   * @member {Date} startTime Liveness interval start time.
   */
  startTime: Date;
  /**
   * @member {Date} endTime Liveness interval end time.
   */
  endTime: Date;
  /**
   * @member {boolean} live `true` if the resource is live during [startTime,
   * endTime], `false` otherwise
   */
  live: boolean;
}

/**
 * Contains the possible cases for MapRequest.
 */
export type MapRequestUnion = MapRequest | SingleMachineDependencyMapRequest | MultipleMachinesMapRequestUnion;

/**
 * @interface
 * An interface representing MapRequest.
 * Specifies the contents of request to generate a map.
 *
 */
export interface MapRequest {
  /**
   * @member {string} kind Polymorphic Discriminator
   */
  kind: "MapRequest";
  /**
   * @member {Date} [startTime] Map interval start time.
   */
  startTime?: Date;
  /**
   * @member {Date} [endTime] Map interval end time.
   */
  endTime?: Date;
}

/**
 * @interface
 * An interface representing SingleMachineDependencyMapRequest.
 * Specifies the computation of a single server dependency map. A single server
 * dependency map includes all direct dependencies of a given machine.
 *
 */
export interface SingleMachineDependencyMapRequest {
  /**
   * @member {string} kind Polymorphic Discriminator
   */
  kind: "map:single-machine-dependency";
  /**
   * @member {Date} [startTime] Map interval start time.
   */
  startTime?: Date;
  /**
   * @member {Date} [endTime] Map interval end time.
   */
  endTime?: Date;
  /**
   * @member {string} machineId URI of machine resource for which to generate
   * the map.
   */
  machineId: string;
}

/**
 * Contains the possible cases for MultipleMachinesMapRequest.
 */
export type MultipleMachinesMapRequestUnion = MultipleMachinesMapRequest | MachineListMapRequest | MachineGroupMapRequest;

/**
 * @interface
 * An interface representing MultipleMachinesMapRequest.
 * Provides a base class for describing map requests for a collection of
 * machines
 *
 */
export interface MultipleMachinesMapRequest {
  /**
   * @member {string} kind Polymorphic Discriminator
   */
  kind: "MultipleMachinesMapRequest";
  /**
   * @member {Date} [startTime] Map interval start time.
   */
  startTime?: Date;
  /**
   * @member {Date} [endTime] Map interval end time.
   */
  endTime?: Date;
  /**
   * @member {boolean} [filterProcesses] If true, only processes between
   * specified machines will be included. Any connections in or out of those
   * processes will be included.
   */
  filterProcesses?: boolean;
}

/**
 * @interface
 * An interface representing MachineListMapRequest.
 * Specifies the computation of a one hope dependency map for a list of
 * machines. The resulting map includes all direct dependencies for the
 * specified machines.
 *
 */
export interface MachineListMapRequest {
  /**
   * @member {string} kind Polymorphic Discriminator
   */
  kind: "map:machine-list-dependency";
  /**
   * @member {Date} [startTime] Map interval start time.
   */
  startTime?: Date;
  /**
   * @member {Date} [endTime] Map interval end time.
   */
  endTime?: Date;
  /**
   * @member {boolean} [filterProcesses] If true, only processes between
   * specified machines will be included. Any connections in or out of those
   * processes will be included.
   */
  filterProcesses?: boolean;
  /**
   * @member {string[]} machineIds a list of URIs of machine resources for
   * which to generate the map.
   */
  machineIds: string[];
}

/**
 * @interface
 * An interface representing MachineGroupMapRequest.
 * Specifies the computation of a machine group dependency map. A machine group
 * dependency map includes all direct dependencies the machines in the group.
 *
 */
export interface MachineGroupMapRequest {
  /**
   * @member {string} kind Polymorphic Discriminator
   */
  kind: "map:machine-group-dependency";
  /**
   * @member {Date} [startTime] Map interval start time.
   */
  startTime?: Date;
  /**
   * @member {Date} [endTime] Map interval end time.
   */
  endTime?: Date;
  /**
   * @member {boolean} [filterProcesses] If true, only processes between
   * specified machines will be included. Any connections in or out of those
   * processes will be included.
   */
  filterProcesses?: boolean;
  /**
   * @member {string} machineGroupId URI of machine group resource for which to
   * generate the map.
   */
  machineGroupId: string;
}

/**
 * @interface
 * An interface representing MapResponse.
 * Specified the contents of a map response.
 *
 */
export interface MapResponse {
  /**
   * @member {Date} startTime Map interval start time.
   */
  startTime: Date;
  /**
   * @member {Date} endTime Map interval end time.
   */
  endTime: Date;
  /**
   * @member {Map} map The generated map.
   */
  map: Map;
}

/**
 * @interface
 * An interface representing ClientGroupMembersCount.
 * Specifies the number of members in a client group.
 *
 */
export interface ClientGroupMembersCount {
  /**
   * @member {Date} startTime Membership interval start time.
   */
  startTime: Date;
  /**
   * @member {Date} endTime Membership interval start time.
   */
  endTime: Date;
  /**
   * @member {string} groupId Client Group URI.
   */
  groupId: string;
  /**
   * @member {number} count Number of members in the client group. Use this
   * value together with the value of ```accuracy```. If accuracy is `exact`
   * then the value represents the actual number of members in the cloud. When
   * accuracy is `estimated`, the actual number of members is larger than the
   * value of ```count```.
   */
  count: number;
  /**
   * @member {Accuracy} accuracy Accuracy of the reported count. Possible
   * values include: 'actual', 'estimated'
   */
  accuracy: Accuracy;
}

/**
 * @interface
 * An interface representing ErrorModel.
 * Error details.
 *
 */
export interface ErrorModel {
  /**
   * @member {string} code Error code identifying the specific error.
   */
  code: string;
  /**
   * @member {string} [message] Error message in the caller's locale.
   */
  message?: string;
}

/**
 * @interface
 * An interface representing ErrorResponse.
 * An error response from the API.
 *
 */
export interface ErrorResponse {
  /**
   * @member {ErrorModel} error Error information.
   */
  error: ErrorModel;
}

/**
 * @interface
 * An interface representing MachinesListByWorkspaceOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface MachinesListByWorkspaceOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {boolean} [live] Specifies whether to return live resources (true)
   * or inventory resources (false). Defaults to **true**. When retrieving live
   * resources, the start time (`startTime`) and end time (`endTime`) of the
   * desired interval should be included. When retrieving inventory resources,
   * an optional timestamp (`timestamp`) parameter can be specified to return
   * the version of each resource closest (not-after) that timestamp. Default
   * value: true .
   */
  live?: boolean;
  /**
   * @member {Date} [startTime] UTC date and time specifying the start time of
   * an interval. When not specified the service uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * @member {Date} [endTime] UTC date and time specifying the end time of an
   * interval. When not specified the service uses DateTime.UtcNow
   */
  endTime?: Date;
  /**
   * @member {Date} [timestamp] UTC date and time specifying a time instance
   * relative to which to evaluate each machine resource. Only applies when
   * `live=false`. When not specified, the service uses DateTime.UtcNow.
   */
  timestamp?: Date;
  /**
   * @member {number} [top] Page size to use. When not specified, the default
   * page size is 100 records.
   */
  top?: number;
}

/**
 * @interface
 * An interface representing MachinesGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface MachinesGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {Date} [timestamp] UTC date and time specifying a time instance
   * relative to which to evaluate the machine resource. When not specified,
   * the service uses DateTime.UtcNow.
   */
  timestamp?: Date;
}

/**
 * @interface
 * An interface representing MachinesGetLivenessOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface MachinesGetLivenessOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {Date} [startTime] UTC date and time specifying the start time of
   * an interval. When not specified the service uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * @member {Date} [endTime] UTC date and time specifying the end time of an
   * interval. When not specified the service uses DateTime.UtcNow
   */
  endTime?: Date;
}

/**
 * @interface
 * An interface representing MachinesListConnectionsOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface MachinesListConnectionsOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {Date} [startTime] UTC date and time specifying the start time of
   * an interval. When not specified the service uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * @member {Date} [endTime] UTC date and time specifying the end time of an
   * interval. When not specified the service uses DateTime.UtcNow
   */
  endTime?: Date;
}

/**
 * @interface
 * An interface representing MachinesListProcessesOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface MachinesListProcessesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {boolean} [live] Specifies whether to return live resources (true)
   * or inventory resources (false). Defaults to **true**. When retrieving live
   * resources, the start time (`startTime`) and end time (`endTime`) of the
   * desired interval should be included. When retrieving inventory resources,
   * an optional timestamp (`timestamp`) parameter can be specified to return
   * the version of each resource closest (not-after) that timestamp. Default
   * value: true .
   */
  live?: boolean;
  /**
   * @member {Date} [startTime] UTC date and time specifying the start time of
   * an interval. When not specified the service uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * @member {Date} [endTime] UTC date and time specifying the end time of an
   * interval. When not specified the service uses DateTime.UtcNow
   */
  endTime?: Date;
  /**
   * @member {Date} [timestamp] UTC date and time specifying a time instance
   * relative to which to evaluate all process resource. Only applies when
   * `live=false`. When not specified, the service uses DateTime.UtcNow.
   */
  timestamp?: Date;
}

/**
 * @interface
 * An interface representing MachinesListPortsOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface MachinesListPortsOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {Date} [startTime] UTC date and time specifying the start time of
   * an interval. When not specified the service uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * @member {Date} [endTime] UTC date and time specifying the end time of an
   * interval. When not specified the service uses DateTime.UtcNow
   */
  endTime?: Date;
}

/**
 * @interface
 * An interface representing MachinesListMachineGroupMembershipOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface MachinesListMachineGroupMembershipOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {Date} [startTime] UTC date and time specifying the start time of
   * an interval. When not specified the service uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * @member {Date} [endTime] UTC date and time specifying the end time of an
   * interval. When not specified the service uses DateTime.UtcNow
   */
  endTime?: Date;
}

/**
 * @interface
 * An interface representing ProcessesGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ProcessesGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {Date} [timestamp] UTC date and time specifying a time instance
   * relative to which to evaluate a resource. When not specified, the service
   * uses DateTime.UtcNow.
   */
  timestamp?: Date;
}

/**
 * @interface
 * An interface representing ProcessesGetLivenessOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ProcessesGetLivenessOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {Date} [startTime] UTC date and time specifying the start time of
   * an interval. When not specified the service uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * @member {Date} [endTime] UTC date and time specifying the end time of an
   * interval. When not specified the service uses DateTime.UtcNow
   */
  endTime?: Date;
}

/**
 * @interface
 * An interface representing ProcessesListAcceptingPortsOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ProcessesListAcceptingPortsOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {Date} [startTime] UTC date and time specifying the start time of
   * an interval. When not specified the service uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * @member {Date} [endTime] UTC date and time specifying the end time of an
   * interval. When not specified the service uses DateTime.UtcNow
   */
  endTime?: Date;
}

/**
 * @interface
 * An interface representing ProcessesListConnectionsOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ProcessesListConnectionsOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {Date} [startTime] UTC date and time specifying the start time of
   * an interval. When not specified the service uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * @member {Date} [endTime] UTC date and time specifying the end time of an
   * interval. When not specified the service uses DateTime.UtcNow
   */
  endTime?: Date;
}

/**
 * @interface
 * An interface representing PortsGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface PortsGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {Date} [startTime] UTC date and time specifying the start time of
   * an interval. When not specified the service uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * @member {Date} [endTime] UTC date and time specifying the end time of an
   * interval. When not specified the service uses DateTime.UtcNow
   */
  endTime?: Date;
}

/**
 * @interface
 * An interface representing PortsGetLivenessOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface PortsGetLivenessOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {Date} [startTime] UTC date and time specifying the start time of
   * an interval. When not specified the service uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * @member {Date} [endTime] UTC date and time specifying the end time of an
   * interval. When not specified the service uses DateTime.UtcNow
   */
  endTime?: Date;
}

/**
 * @interface
 * An interface representing PortsListAcceptingProcessesOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface PortsListAcceptingProcessesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {Date} [startTime] UTC date and time specifying the start time of
   * an interval. When not specified the service uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * @member {Date} [endTime] UTC date and time specifying the end time of an
   * interval. When not specified the service uses DateTime.UtcNow
   */
  endTime?: Date;
}

/**
 * @interface
 * An interface representing PortsListConnectionsOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface PortsListConnectionsOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {Date} [startTime] UTC date and time specifying the start time of
   * an interval. When not specified the service uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * @member {Date} [endTime] UTC date and time specifying the end time of an
   * interval. When not specified the service uses DateTime.UtcNow
   */
  endTime?: Date;
}

/**
 * @interface
 * An interface representing ClientGroupsGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ClientGroupsGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {Date} [startTime] UTC date and time specifying the start time of
   * an interval. When not specified the service uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * @member {Date} [endTime] UTC date and time specifying the end time of an
   * interval. When not specified the service uses DateTime.UtcNow
   */
  endTime?: Date;
}

/**
 * @interface
 * An interface representing ClientGroupsGetMembersCountOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ClientGroupsGetMembersCountOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {Date} [startTime] UTC date and time specifying the start time of
   * an interval. When not specified the service uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * @member {Date} [endTime] UTC date and time specifying the end time of an
   * interval. When not specified the service uses DateTime.UtcNow
   */
  endTime?: Date;
}

/**
 * @interface
 * An interface representing ClientGroupsListMembersOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ClientGroupsListMembersOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {Date} [startTime] UTC date and time specifying the start time of
   * an interval. When not specified the service uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * @member {Date} [endTime] UTC date and time specifying the end time of an
   * interval. When not specified the service uses DateTime.UtcNow
   */
  endTime?: Date;
  /**
   * @member {number} [top] Page size to use. When not specified, the default
   * page size is 100 records.
   */
  top?: number;
}

/**
 * @interface
 * An interface representing SummariesGetMachinesOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SummariesGetMachinesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {Date} [startTime] UTC date and time specifying the start time of
   * an interval. When not specified the service uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * @member {Date} [endTime] UTC date and time specifying the end time of an
   * interval. When not specified the service uses DateTime.UtcNow
   */
  endTime?: Date;
}

/**
 * @interface
 * An interface representing MachineGroupsListByWorkspaceOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface MachineGroupsListByWorkspaceOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {Date} [startTime] UTC date and time specifying the start time of
   * an interval. When not specified the service uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * @member {Date} [endTime] UTC date and time specifying the end time of an
   * interval. When not specified the service uses DateTime.UtcNow
   */
  endTime?: Date;
}

/**
 * @interface
 * An interface representing MachineGroupsGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface MachineGroupsGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {Date} [startTime] UTC date and time specifying the start time of
   * an interval. When not specified the service uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * @member {Date} [endTime] UTC date and time specifying the end time of an
   * interval. When not specified the service uses DateTime.UtcNow
   */
  endTime?: Date;
}

/**
 * @interface
 * An interface representing ServicemapManagementClientOptions.
 * @extends AzureServiceClientOptions
 */
export interface ServicemapManagementClientOptions extends AzureServiceClientOptions {
  /**
   * @member {string} [baseUri]
   */
  baseUri?: string;
}


/**
 * @interface
 * An interface representing the MachineCollection.
 * Collection of Machine resources.
 *
 * @extends Array<Machine>
 */
export interface MachineCollection extends Array<Machine> {
  /**
   * @member {string} [nextLink] The URL to the next set of resources.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ConnectionCollection.
 * Collection of Connection resources.
 *
 * @extends Array<Connection>
 */
export interface ConnectionCollection extends Array<Connection> {
  /**
   * @member {string} [nextLink] The URL to the next set of resources.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ProcessCollection.
 * Collection of Process resources.
 *
 * @extends Array<Process>
 */
export interface ProcessCollection extends Array<Process> {
  /**
   * @member {string} [nextLink] The URL to the next set of resources.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the PortCollection.
 * Collection of Port resources.
 *
 * @extends Array<Port>
 */
export interface PortCollection extends Array<Port> {
  /**
   * @member {string} [nextLink] The URL to the next set of resources.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the MachineGroupCollection.
 * Collection of Machine Group resources.
 *
 * @extends Array<MachineGroup>
 */
export interface MachineGroupCollection extends Array<MachineGroup> {
  /**
   * @member {string} [nextLink] The URL to the next set of resources.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ClientGroupMembersCollection.
 * Collection of ClientGroupMember resources.
 *
 * @extends Array<ClientGroupMember>
 */
export interface ClientGroupMembersCollection extends Array<ClientGroupMember> {
  /**
   * @member {string} [nextLink] The URL to the next set of resources.
   */
  nextLink?: string;
}

/**
 * Defines values for OperatingSystemFamily.
 * Possible values include: 'unknown', 'windows', 'linux', 'solaris', 'aix'
 * @readonly
 * @enum {string}
 */
export enum OperatingSystemFamily {
  Unknown = 'unknown',
  Windows = 'windows',
  Linux = 'linux',
  Solaris = 'solaris',
  Aix = 'aix',
}

/**
 * Defines values for MonitoringState.
 * Possible values include: 'monitored', 'discovered'
 * @readonly
 * @enum {string}
 */
export enum MonitoringState {
  Monitored = 'monitored',
  Discovered = 'discovered',
}

/**
 * Defines values for VirtualizationState.
 * Possible values include: 'unknown', 'physical', 'virtual', 'hypervisor'
 * @readonly
 * @enum {string}
 */
export enum VirtualizationState {
  Unknown = 'unknown',
  Physical = 'physical',
  Virtual = 'virtual',
  Hypervisor = 'hypervisor',
}

/**
 * Defines values for MachineRebootStatus.
 * Possible values include: 'unknown', 'rebooted', 'notRebooted'
 * @readonly
 * @enum {string}
 */
export enum MachineRebootStatus {
  Unknown = 'unknown',
  Rebooted = 'rebooted',
  NotRebooted = 'notRebooted',
}

/**
 * Defines values for Accuracy.
 * Possible values include: 'actual', 'estimated'
 * @readonly
 * @enum {string}
 */
export enum Accuracy {
  Actual = 'actual',
  Estimated = 'estimated',
}

/**
 * Defines values for Bitness.
 * Possible values include: '32bit', '64bit'
 * @readonly
 * @enum {string}
 */
export enum Bitness {
  ThreeTwobit = '32bit',
  SixFourbit = '64bit',
}

/**
 * Defines values for VirtualMachineType.
 * Possible values include: 'unknown', 'hyperv', 'ldom', 'lpar', 'vmware',
 * 'virtualPc', 'xen'
 * @readonly
 * @enum {string}
 */
export enum VirtualMachineType {
  Unknown = 'unknown',
  Hyperv = 'hyperv',
  Ldom = 'ldom',
  Lpar = 'lpar',
  Vmware = 'vmware',
  VirtualPc = 'virtualPc',
  Xen = 'xen',
}

/**
 * Defines values for HypervisorType.
 * Possible values include: 'unknown', 'hyperv'
 * @readonly
 * @enum {string}
 */
export enum HypervisorType {
  Unknown = 'unknown',
  Hyperv = 'hyperv',
}

/**
 * Defines values for ProcessRole.
 * Possible values include: 'webServer', 'appServer', 'databaseServer',
 * 'ldapServer', 'smbServer'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ProcessRole =
 * <ProcessRole>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum ProcessRole {
  WebServer = 'webServer',
  AppServer = 'appServer',
  DatabaseServer = 'databaseServer',
  LdapServer = 'ldapServer',
  SmbServer = 'smbServer',
}

/**
 * Defines values for MachineGroupType.
 * Possible values include: 'unknown', 'azure-cs', 'azure-sf', 'azure-vmss',
 * 'user-static'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: MachineGroupType =
 * <MachineGroupType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum MachineGroupType {
  Unknown = 'unknown',
  AzureCs = 'azure-cs',
  AzureSf = 'azure-sf',
  AzureVmss = 'azure-vmss',
  UserStatic = 'user-static',
}

/**
 * Defines values for ConnectionFailureState.
 * Possible values include: 'ok', 'failed', 'mixed'
 * @readonly
 * @enum {string}
 */
export enum ConnectionFailureState {
  Ok = 'ok',
  Failed = 'failed',
  Mixed = 'mixed',
}

/**
 * Defines values for AzureCloudServiceRoleType.
 * Possible values include: 'unknown', 'worker', 'web'
 * @readonly
 * @enum {string}
 */
export enum AzureCloudServiceRoleType {
  Unknown = 'unknown',
  Worker = 'worker',
  Web = 'web',
}

/**
 * Defines values for Provider.
 * Possible values include: 'azure'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Provider = <Provider>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Provider {
  Azure = 'azure',
}

/**
 * Defines values for Provider1.
 * Possible values include: 'azure'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Provider1 = <Provider1>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Provider1 {
  Azure = 'azure',
}

/**
 * Contains response data for the listByWorkspace operation.
 */
export type MachinesListByWorkspaceResponse = MachineCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MachineCollection;
    };
};

/**
 * Contains response data for the get operation.
 */
export type MachinesGetResponse = Machine & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Machine;
    };
};

/**
 * Contains response data for the getLiveness operation.
 */
export type MachinesGetLivenessResponse = Liveness & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Liveness;
    };
};

/**
 * Contains response data for the listConnections operation.
 */
export type MachinesListConnectionsResponse = ConnectionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionCollection;
    };
};

/**
 * Contains response data for the listProcesses operation.
 */
export type MachinesListProcessesResponse = ProcessCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProcessCollection;
    };
};

/**
 * Contains response data for the listPorts operation.
 */
export type MachinesListPortsResponse = PortCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PortCollection;
    };
};

/**
 * Contains response data for the listMachineGroupMembership operation.
 */
export type MachinesListMachineGroupMembershipResponse = MachineGroupCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MachineGroupCollection;
    };
};

/**
 * Contains response data for the listByWorkspaceNext operation.
 */
export type MachinesListByWorkspaceNextResponse = MachineCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MachineCollection;
    };
};

/**
 * Contains response data for the listConnectionsNext operation.
 */
export type MachinesListConnectionsNextResponse = ConnectionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionCollection;
    };
};

/**
 * Contains response data for the listProcessesNext operation.
 */
export type MachinesListProcessesNextResponse = ProcessCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProcessCollection;
    };
};

/**
 * Contains response data for the listPortsNext operation.
 */
export type MachinesListPortsNextResponse = PortCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PortCollection;
    };
};

/**
 * Contains response data for the listMachineGroupMembershipNext operation.
 */
export type MachinesListMachineGroupMembershipNextResponse = MachineGroupCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MachineGroupCollection;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ProcessesGetResponse = Process & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Process;
    };
};

/**
 * Contains response data for the getLiveness operation.
 */
export type ProcessesGetLivenessResponse = Liveness & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Liveness;
    };
};

/**
 * Contains response data for the listAcceptingPorts operation.
 */
export type ProcessesListAcceptingPortsResponse = PortCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PortCollection;
    };
};

/**
 * Contains response data for the listConnections operation.
 */
export type ProcessesListConnectionsResponse = ConnectionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionCollection;
    };
};

/**
 * Contains response data for the listAcceptingPortsNext operation.
 */
export type ProcessesListAcceptingPortsNextResponse = PortCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PortCollection;
    };
};

/**
 * Contains response data for the listConnectionsNext operation.
 */
export type ProcessesListConnectionsNextResponse = ConnectionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionCollection;
    };
};

/**
 * Contains response data for the get operation.
 */
export type PortsGetResponse = Port & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Port;
    };
};

/**
 * Contains response data for the getLiveness operation.
 */
export type PortsGetLivenessResponse = Liveness & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Liveness;
    };
};

/**
 * Contains response data for the listAcceptingProcesses operation.
 */
export type PortsListAcceptingProcessesResponse = ProcessCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProcessCollection;
    };
};

/**
 * Contains response data for the listConnections operation.
 */
export type PortsListConnectionsResponse = ConnectionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionCollection;
    };
};

/**
 * Contains response data for the listAcceptingProcessesNext operation.
 */
export type PortsListAcceptingProcessesNextResponse = ProcessCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProcessCollection;
    };
};

/**
 * Contains response data for the listConnectionsNext operation.
 */
export type PortsListConnectionsNextResponse = ConnectionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionCollection;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ClientGroupsGetResponse = ClientGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ClientGroup;
    };
};

/**
 * Contains response data for the getMembersCount operation.
 */
export type ClientGroupsGetMembersCountResponse = ClientGroupMembersCount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ClientGroupMembersCount;
    };
};

/**
 * Contains response data for the listMembers operation.
 */
export type ClientGroupsListMembersResponse = ClientGroupMembersCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ClientGroupMembersCollection;
    };
};

/**
 * Contains response data for the listMembersNext operation.
 */
export type ClientGroupsListMembersNextResponse = ClientGroupMembersCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ClientGroupMembersCollection;
    };
};

/**
 * Contains response data for the generate operation.
 */
export type MapsGenerateResponse = MapResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MapResponse;
    };
};

/**
 * Contains response data for the getMachines operation.
 */
export type SummariesGetMachinesResponse = MachinesSummary & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MachinesSummary;
    };
};

/**
 * Contains response data for the listByWorkspace operation.
 */
export type MachineGroupsListByWorkspaceResponse = MachineGroupCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MachineGroupCollection;
    };
};

/**
 * Contains response data for the create operation.
 */
export type MachineGroupsCreateResponse = MachineGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MachineGroup;
    };
};

/**
 * Contains response data for the get operation.
 */
export type MachineGroupsGetResponse = MachineGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MachineGroup;
    };
};

/**
 * Contains response data for the update operation.
 */
export type MachineGroupsUpdateResponse = MachineGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MachineGroup;
    };
};

/**
 * Contains response data for the listByWorkspaceNext operation.
 */
export type MachineGroupsListByWorkspaceNextResponse = MachineGroupCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MachineGroupCollection;
    };
};
