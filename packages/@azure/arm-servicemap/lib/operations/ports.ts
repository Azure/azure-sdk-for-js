/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/portsMappers";
import * as Parameters from "../models/parameters";
import { ServicemapManagementClientContext } from "../servicemapManagementClientContext";

/** Class representing a Ports. */
export class Ports {
  private readonly client: ServicemapManagementClientContext;

  /**
   * Create a Ports.
   * @param {ServicemapManagementClientContext} client Reference to the service client.
   */
  constructor(client: ServicemapManagementClientContext) {
    this.client = client;
  }

  /**
   * Returns the specified port. The port must be live during the specified time interval. If the
   * port is not live during the interval, status 404 (Not Found) is returned.
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param machineName Machine resource name.
   * @param portName Port resource name.
   * @param [options] The optional parameters
   * @returns Promise<Models.PortsGetResponse>
   */
  get(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, options?: Models.PortsGetOptionalParams): Promise<Models.PortsGetResponse>;
  /**
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param machineName Machine resource name.
   * @param portName Port resource name.
   * @param callback The callback
   */
  get(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, callback: msRest.ServiceCallback<Models.Port>): void;
  /**
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param machineName Machine resource name.
   * @param portName Port resource name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, options: Models.PortsGetOptionalParams, callback: msRest.ServiceCallback<Models.Port>): void;
  get(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, options?: Models.PortsGetOptionalParams | msRest.ServiceCallback<Models.Port>, callback?: msRest.ServiceCallback<Models.Port>): Promise<Models.PortsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        machineName,
        portName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.PortsGetResponse>;
  }

  /**
   * Obtains the liveness status of the port during the specified time interval.
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param machineName Machine resource name.
   * @param portName Port resource name.
   * @param [options] The optional parameters
   * @returns Promise<Models.PortsGetLivenessResponse>
   */
  getLiveness(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, options?: Models.PortsGetLivenessOptionalParams): Promise<Models.PortsGetLivenessResponse>;
  /**
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param machineName Machine resource name.
   * @param portName Port resource name.
   * @param callback The callback
   */
  getLiveness(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, callback: msRest.ServiceCallback<Models.Liveness>): void;
  /**
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param machineName Machine resource name.
   * @param portName Port resource name.
   * @param options The optional parameters
   * @param callback The callback
   */
  getLiveness(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, options: Models.PortsGetLivenessOptionalParams, callback: msRest.ServiceCallback<Models.Liveness>): void;
  getLiveness(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, options?: Models.PortsGetLivenessOptionalParams | msRest.ServiceCallback<Models.Liveness>, callback?: msRest.ServiceCallback<Models.Liveness>): Promise<Models.PortsGetLivenessResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        machineName,
        portName,
        options
      },
      getLivenessOperationSpec,
      callback) as Promise<Models.PortsGetLivenessResponse>;
  }

  /**
   * Returns a collection of processes accepting on the specified port
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param machineName Machine resource name.
   * @param portName Port resource name.
   * @param [options] The optional parameters
   * @returns Promise<Models.PortsListAcceptingProcessesResponse>
   */
  listAcceptingProcesses(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, options?: Models.PortsListAcceptingProcessesOptionalParams): Promise<Models.PortsListAcceptingProcessesResponse>;
  /**
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param machineName Machine resource name.
   * @param portName Port resource name.
   * @param callback The callback
   */
  listAcceptingProcesses(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, callback: msRest.ServiceCallback<Models.ProcessCollection>): void;
  /**
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param machineName Machine resource name.
   * @param portName Port resource name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listAcceptingProcesses(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, options: Models.PortsListAcceptingProcessesOptionalParams, callback: msRest.ServiceCallback<Models.ProcessCollection>): void;
  listAcceptingProcesses(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, options?: Models.PortsListAcceptingProcessesOptionalParams | msRest.ServiceCallback<Models.ProcessCollection>, callback?: msRest.ServiceCallback<Models.ProcessCollection>): Promise<Models.PortsListAcceptingProcessesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        machineName,
        portName,
        options
      },
      listAcceptingProcessesOperationSpec,
      callback) as Promise<Models.PortsListAcceptingProcessesResponse>;
  }

  /**
   * Returns a collection of connections established via the specified port.
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param machineName Machine resource name.
   * @param portName Port resource name.
   * @param [options] The optional parameters
   * @returns Promise<Models.PortsListConnectionsResponse>
   */
  listConnections(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, options?: Models.PortsListConnectionsOptionalParams): Promise<Models.PortsListConnectionsResponse>;
  /**
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param machineName Machine resource name.
   * @param portName Port resource name.
   * @param callback The callback
   */
  listConnections(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, callback: msRest.ServiceCallback<Models.ConnectionCollection>): void;
  /**
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param machineName Machine resource name.
   * @param portName Port resource name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listConnections(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, options: Models.PortsListConnectionsOptionalParams, callback: msRest.ServiceCallback<Models.ConnectionCollection>): void;
  listConnections(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, options?: Models.PortsListConnectionsOptionalParams | msRest.ServiceCallback<Models.ConnectionCollection>, callback?: msRest.ServiceCallback<Models.ConnectionCollection>): Promise<Models.PortsListConnectionsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        machineName,
        portName,
        options
      },
      listConnectionsOperationSpec,
      callback) as Promise<Models.PortsListConnectionsResponse>;
  }

  /**
   * Returns a collection of processes accepting on the specified port
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PortsListAcceptingProcessesNextResponse>
   */
  listAcceptingProcessesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PortsListAcceptingProcessesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listAcceptingProcessesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProcessCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listAcceptingProcessesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessCollection>): void;
  listAcceptingProcessesNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProcessCollection>, callback?: msRest.ServiceCallback<Models.ProcessCollection>): Promise<Models.PortsListAcceptingProcessesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listAcceptingProcessesNextOperationSpec,
      callback) as Promise<Models.PortsListAcceptingProcessesNextResponse>;
  }

  /**
   * Returns a collection of connections established via the specified port.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PortsListConnectionsNextResponse>
   */
  listConnectionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PortsListConnectionsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listConnectionsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ConnectionCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listConnectionsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectionCollection>): void;
  listConnectionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ConnectionCollection>, callback?: msRest.ServiceCallback<Models.ConnectionCollection>): Promise<Models.PortsListConnectionsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listConnectionsNextOperationSpec,
      callback) as Promise<Models.PortsListConnectionsNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/ports/{portName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.machineName,
    Parameters.portName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.startTime,
    Parameters.endTime
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Port
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getLivenessOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/ports/{portName}/liveness",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.machineName,
    Parameters.portName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.startTime,
    Parameters.endTime
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Liveness
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listAcceptingProcessesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/ports/{portName}/acceptingProcesses",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.machineName,
    Parameters.portName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.startTime,
    Parameters.endTime
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProcessCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listConnectionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/ports/{portName}/connections",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.machineName,
    Parameters.portName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.startTime,
    Parameters.endTime
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listAcceptingProcessesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProcessCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listConnectionsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
