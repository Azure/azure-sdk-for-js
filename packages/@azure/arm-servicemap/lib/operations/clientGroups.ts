/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/clientGroupsMappers";
import * as Parameters from "../models/parameters";
import { ServicemapManagementClientContext } from "../servicemapManagementClientContext";

/** Class representing a ClientGroups. */
export class ClientGroups {
  private readonly client: ServicemapManagementClientContext;

  /**
   * Create a ClientGroups.
   * @param {ServicemapManagementClientContext} client Reference to the service client.
   */
  constructor(client: ServicemapManagementClientContext) {
    this.client = client;
  }

  /**
   * Retrieves the specified client group
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param clientGroupName Client Group resource name.
   * @param [options] The optional parameters
   * @returns Promise<Models.ClientGroupsGetResponse>
   */
  get(resourceGroupName: string, workspaceName: string, clientGroupName: string, options?: Models.ClientGroupsGetOptionalParams): Promise<Models.ClientGroupsGetResponse>;
  /**
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param clientGroupName Client Group resource name.
   * @param callback The callback
   */
  get(resourceGroupName: string, workspaceName: string, clientGroupName: string, callback: msRest.ServiceCallback<Models.ClientGroup>): void;
  /**
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param clientGroupName Client Group resource name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, workspaceName: string, clientGroupName: string, options: Models.ClientGroupsGetOptionalParams, callback: msRest.ServiceCallback<Models.ClientGroup>): void;
  get(resourceGroupName: string, workspaceName: string, clientGroupName: string, options?: Models.ClientGroupsGetOptionalParams | msRest.ServiceCallback<Models.ClientGroup>, callback?: msRest.ServiceCallback<Models.ClientGroup>): Promise<Models.ClientGroupsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        clientGroupName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ClientGroupsGetResponse>;
  }

  /**
   * Returns the approximate number of members in the client group.
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param clientGroupName Client Group resource name.
   * @param [options] The optional parameters
   * @returns Promise<Models.ClientGroupsGetMembersCountResponse>
   */
  getMembersCount(resourceGroupName: string, workspaceName: string, clientGroupName: string, options?: Models.ClientGroupsGetMembersCountOptionalParams): Promise<Models.ClientGroupsGetMembersCountResponse>;
  /**
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param clientGroupName Client Group resource name.
   * @param callback The callback
   */
  getMembersCount(resourceGroupName: string, workspaceName: string, clientGroupName: string, callback: msRest.ServiceCallback<Models.ClientGroupMembersCount>): void;
  /**
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param clientGroupName Client Group resource name.
   * @param options The optional parameters
   * @param callback The callback
   */
  getMembersCount(resourceGroupName: string, workspaceName: string, clientGroupName: string, options: Models.ClientGroupsGetMembersCountOptionalParams, callback: msRest.ServiceCallback<Models.ClientGroupMembersCount>): void;
  getMembersCount(resourceGroupName: string, workspaceName: string, clientGroupName: string, options?: Models.ClientGroupsGetMembersCountOptionalParams | msRest.ServiceCallback<Models.ClientGroupMembersCount>, callback?: msRest.ServiceCallback<Models.ClientGroupMembersCount>): Promise<Models.ClientGroupsGetMembersCountResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        clientGroupName,
        options
      },
      getMembersCountOperationSpec,
      callback) as Promise<Models.ClientGroupsGetMembersCountResponse>;
  }

  /**
   * Returns the members of the client group during the specified time interval.
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param clientGroupName Client Group resource name.
   * @param [options] The optional parameters
   * @returns Promise<Models.ClientGroupsListMembersResponse>
   */
  listMembers(resourceGroupName: string, workspaceName: string, clientGroupName: string, options?: Models.ClientGroupsListMembersOptionalParams): Promise<Models.ClientGroupsListMembersResponse>;
  /**
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param clientGroupName Client Group resource name.
   * @param callback The callback
   */
  listMembers(resourceGroupName: string, workspaceName: string, clientGroupName: string, callback: msRest.ServiceCallback<Models.ClientGroupMembersCollection>): void;
  /**
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param clientGroupName Client Group resource name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listMembers(resourceGroupName: string, workspaceName: string, clientGroupName: string, options: Models.ClientGroupsListMembersOptionalParams, callback: msRest.ServiceCallback<Models.ClientGroupMembersCollection>): void;
  listMembers(resourceGroupName: string, workspaceName: string, clientGroupName: string, options?: Models.ClientGroupsListMembersOptionalParams | msRest.ServiceCallback<Models.ClientGroupMembersCollection>, callback?: msRest.ServiceCallback<Models.ClientGroupMembersCollection>): Promise<Models.ClientGroupsListMembersResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        clientGroupName,
        options
      },
      listMembersOperationSpec,
      callback) as Promise<Models.ClientGroupsListMembersResponse>;
  }

  /**
   * Returns the members of the client group during the specified time interval.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ClientGroupsListMembersNextResponse>
   */
  listMembersNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ClientGroupsListMembersNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listMembersNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ClientGroupMembersCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listMembersNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ClientGroupMembersCollection>): void;
  listMembersNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ClientGroupMembersCollection>, callback?: msRest.ServiceCallback<Models.ClientGroupMembersCollection>): Promise<Models.ClientGroupsListMembersNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listMembersNextOperationSpec,
      callback) as Promise<Models.ClientGroupsListMembersNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/clientGroups/{clientGroupName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.clientGroupName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.startTime,
    Parameters.endTime
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ClientGroup
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getMembersCountOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/clientGroups/{clientGroupName}/membersCount",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.clientGroupName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.startTime,
    Parameters.endTime
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ClientGroupMembersCount
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listMembersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/clientGroups/{clientGroupName}/members",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.clientGroupName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.startTime,
    Parameters.endTime,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ClientGroupMembersCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listMembersNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ClientGroupMembersCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
