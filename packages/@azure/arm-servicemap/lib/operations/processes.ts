/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/processesMappers";
import * as Parameters from "../models/parameters";
import { ServicemapManagementClientContext } from "../servicemapManagementClientContext";

/** Class representing a Processes. */
export class Processes {
  private readonly client: ServicemapManagementClientContext;

  /**
   * Create a Processes.
   * @param {ServicemapManagementClientContext} client Reference to the service client.
   */
  constructor(client: ServicemapManagementClientContext) {
    this.client = client;
  }

  /**
   * Returns the specified process.
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param machineName Machine resource name.
   * @param processName Process resource name.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProcessesGetResponse>
   */
  get(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, options?: Models.ProcessesGetOptionalParams): Promise<Models.ProcessesGetResponse>;
  /**
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param machineName Machine resource name.
   * @param processName Process resource name.
   * @param callback The callback
   */
  get(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, callback: msRest.ServiceCallback<Models.Process>): void;
  /**
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param machineName Machine resource name.
   * @param processName Process resource name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, options: Models.ProcessesGetOptionalParams, callback: msRest.ServiceCallback<Models.Process>): void;
  get(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, options?: Models.ProcessesGetOptionalParams | msRest.ServiceCallback<Models.Process>, callback?: msRest.ServiceCallback<Models.Process>): Promise<Models.ProcessesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        machineName,
        processName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ProcessesGetResponse>;
  }

  /**
   * Obtains the liveness status of the process during the specified time interval.
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param machineName Machine resource name.
   * @param processName Process resource name.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProcessesGetLivenessResponse>
   */
  getLiveness(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, options?: Models.ProcessesGetLivenessOptionalParams): Promise<Models.ProcessesGetLivenessResponse>;
  /**
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param machineName Machine resource name.
   * @param processName Process resource name.
   * @param callback The callback
   */
  getLiveness(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, callback: msRest.ServiceCallback<Models.Liveness>): void;
  /**
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param machineName Machine resource name.
   * @param processName Process resource name.
   * @param options The optional parameters
   * @param callback The callback
   */
  getLiveness(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, options: Models.ProcessesGetLivenessOptionalParams, callback: msRest.ServiceCallback<Models.Liveness>): void;
  getLiveness(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, options?: Models.ProcessesGetLivenessOptionalParams | msRest.ServiceCallback<Models.Liveness>, callback?: msRest.ServiceCallback<Models.Liveness>): Promise<Models.ProcessesGetLivenessResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        machineName,
        processName,
        options
      },
      getLivenessOperationSpec,
      callback) as Promise<Models.ProcessesGetLivenessResponse>;
  }

  /**
   * Returns a collection of ports on which this process is accepting
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param machineName Machine resource name.
   * @param processName Process resource name.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProcessesListAcceptingPortsResponse>
   */
  listAcceptingPorts(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, options?: Models.ProcessesListAcceptingPortsOptionalParams): Promise<Models.ProcessesListAcceptingPortsResponse>;
  /**
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param machineName Machine resource name.
   * @param processName Process resource name.
   * @param callback The callback
   */
  listAcceptingPorts(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, callback: msRest.ServiceCallback<Models.PortCollection>): void;
  /**
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param machineName Machine resource name.
   * @param processName Process resource name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listAcceptingPorts(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, options: Models.ProcessesListAcceptingPortsOptionalParams, callback: msRest.ServiceCallback<Models.PortCollection>): void;
  listAcceptingPorts(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, options?: Models.ProcessesListAcceptingPortsOptionalParams | msRest.ServiceCallback<Models.PortCollection>, callback?: msRest.ServiceCallback<Models.PortCollection>): Promise<Models.ProcessesListAcceptingPortsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        machineName,
        processName,
        options
      },
      listAcceptingPortsOperationSpec,
      callback) as Promise<Models.ProcessesListAcceptingPortsResponse>;
  }

  /**
   * Returns a collection of connections terminating or originating at the specified process
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param machineName Machine resource name.
   * @param processName Process resource name.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProcessesListConnectionsResponse>
   */
  listConnections(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, options?: Models.ProcessesListConnectionsOptionalParams): Promise<Models.ProcessesListConnectionsResponse>;
  /**
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param machineName Machine resource name.
   * @param processName Process resource name.
   * @param callback The callback
   */
  listConnections(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, callback: msRest.ServiceCallback<Models.ConnectionCollection>): void;
  /**
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param machineName Machine resource name.
   * @param processName Process resource name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listConnections(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, options: Models.ProcessesListConnectionsOptionalParams, callback: msRest.ServiceCallback<Models.ConnectionCollection>): void;
  listConnections(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, options?: Models.ProcessesListConnectionsOptionalParams | msRest.ServiceCallback<Models.ConnectionCollection>, callback?: msRest.ServiceCallback<Models.ConnectionCollection>): Promise<Models.ProcessesListConnectionsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        machineName,
        processName,
        options
      },
      listConnectionsOperationSpec,
      callback) as Promise<Models.ProcessesListConnectionsResponse>;
  }

  /**
   * Returns a collection of ports on which this process is accepting
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProcessesListAcceptingPortsNextResponse>
   */
  listAcceptingPortsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ProcessesListAcceptingPortsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listAcceptingPortsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PortCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listAcceptingPortsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PortCollection>): void;
  listAcceptingPortsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PortCollection>, callback?: msRest.ServiceCallback<Models.PortCollection>): Promise<Models.ProcessesListAcceptingPortsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listAcceptingPortsNextOperationSpec,
      callback) as Promise<Models.ProcessesListAcceptingPortsNextResponse>;
  }

  /**
   * Returns a collection of connections terminating or originating at the specified process
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProcessesListConnectionsNextResponse>
   */
  listConnectionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ProcessesListConnectionsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listConnectionsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ConnectionCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listConnectionsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectionCollection>): void;
  listConnectionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ConnectionCollection>, callback?: msRest.ServiceCallback<Models.ConnectionCollection>): Promise<Models.ProcessesListConnectionsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listConnectionsNextOperationSpec,
      callback) as Promise<Models.ProcessesListConnectionsNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/processes/{processName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.machineName,
    Parameters.processName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timestamp
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Process
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getLivenessOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/processes/{processName}/liveness",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.machineName,
    Parameters.processName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.startTime,
    Parameters.endTime
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Liveness
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listAcceptingPortsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/processes/{processName}/acceptingPorts",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.machineName,
    Parameters.processName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.startTime,
    Parameters.endTime
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PortCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listConnectionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/processes/{processName}/connections",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.machineName,
    Parameters.processName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.startTime,
    Parameters.endTime
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listAcceptingPortsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PortCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listConnectionsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
