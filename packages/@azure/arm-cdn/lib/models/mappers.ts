/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const Sku: msRest.CompositeMapper = {
  serializedName: "Sku",
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: msRest.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: msRest.CompositeMapper = {
  serializedName: "TrackedResource",
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const Profile: msRest.CompositeMapper = {
  serializedName: "Profile",
  type: {
    name: "Composite",
    className: "Profile",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      sku: {
        required: true,
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      resourceState: {
        readOnly: true,
        serializedName: "properties.resourceState",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProfileUpdateParameters: msRest.CompositeMapper = {
  serializedName: "ProfileUpdateParameters",
  type: {
    name: "Composite",
    className: "ProfileUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const SsoUri: msRest.CompositeMapper = {
  serializedName: "SsoUri",
  type: {
    name: "Composite",
    className: "SsoUri",
    modelProperties: {
      ssoUriValue: {
        readOnly: true,
        serializedName: "ssoUriValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SupportedOptimizationTypesListResult: msRest.CompositeMapper = {
  serializedName: "SupportedOptimizationTypesListResult",
  type: {
    name: "Composite",
    className: "SupportedOptimizationTypesListResult",
    modelProperties: {
      supportedOptimizationTypes: {
        readOnly: true,
        serializedName: "supportedOptimizationTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DeepCreatedOrigin: msRest.CompositeMapper = {
  serializedName: "DeepCreatedOrigin",
  type: {
    name: "Composite",
    className: "DeepCreatedOrigin",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      hostName: {
        required: true,
        serializedName: "properties.hostName",
        type: {
          name: "String"
        }
      },
      httpPort: {
        serializedName: "properties.httpPort",
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      httpsPort: {
        serializedName: "properties.httpsPort",
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Endpoint: msRest.CompositeMapper = {
  serializedName: "Endpoint",
  type: {
    name: "Composite",
    className: "Endpoint",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      originHostHeader: {
        serializedName: "properties.originHostHeader",
        type: {
          name: "String"
        }
      },
      originPath: {
        serializedName: "properties.originPath",
        type: {
          name: "String"
        }
      },
      contentTypesToCompress: {
        serializedName: "properties.contentTypesToCompress",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      isCompressionEnabled: {
        serializedName: "properties.isCompressionEnabled",
        type: {
          name: "Boolean"
        }
      },
      isHttpAllowed: {
        serializedName: "properties.isHttpAllowed",
        type: {
          name: "Boolean"
        }
      },
      isHttpsAllowed: {
        serializedName: "properties.isHttpsAllowed",
        type: {
          name: "Boolean"
        }
      },
      queryStringCachingBehavior: {
        serializedName: "properties.queryStringCachingBehavior",
        type: {
          name: "Enum",
          allowedValues: [
            "IgnoreQueryString",
            "BypassCaching",
            "UseQueryString",
            "NotSet"
          ]
        }
      },
      optimizationType: {
        serializedName: "properties.optimizationType",
        type: {
          name: "String"
        }
      },
      probePath: {
        serializedName: "properties.probePath",
        type: {
          name: "String"
        }
      },
      geoFilters: {
        serializedName: "properties.geoFilters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GeoFilter"
            }
          }
        }
      },
      deliveryPolicy: {
        serializedName: "properties.deliveryPolicy",
        type: {
          name: "Composite",
          className: "EndpointPropertiesUpdateParametersDeliveryPolicy"
        }
      },
      hostName: {
        readOnly: true,
        serializedName: "properties.hostName",
        type: {
          name: "String"
        }
      },
      origins: {
        required: true,
        serializedName: "properties.origins",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeepCreatedOrigin"
            }
          }
        }
      },
      resourceState: {
        readOnly: true,
        serializedName: "properties.resourceState",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GeoFilter: msRest.CompositeMapper = {
  serializedName: "GeoFilter",
  type: {
    name: "Composite",
    className: "GeoFilter",
    modelProperties: {
      relativePath: {
        required: true,
        serializedName: "relativePath",
        type: {
          name: "String"
        }
      },
      action: {
        required: true,
        serializedName: "action",
        type: {
          name: "Enum",
          allowedValues: [
            "Block",
            "Allow"
          ]
        }
      },
      countryCodes: {
        required: true,
        serializedName: "countryCodes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DeliveryRuleAction: msRest.CompositeMapper = {
  serializedName: "DeliveryRuleAction",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "name",
      clientName: "name"
    },
    uberParent: "DeliveryRuleAction",
    className: "DeliveryRuleAction",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeliveryRuleCondition: msRest.CompositeMapper = {
  serializedName: "DeliveryRuleCondition",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "name",
      clientName: "name"
    },
    uberParent: "DeliveryRuleCondition",
    className: "DeliveryRuleCondition",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeliveryRule: msRest.CompositeMapper = {
  serializedName: "DeliveryRule",
  type: {
    name: "Composite",
    className: "DeliveryRule",
    modelProperties: {
      order: {
        required: true,
        serializedName: "order",
        type: {
          name: "Number"
        }
      },
      actions: {
        required: true,
        serializedName: "actions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeliveryRuleAction"
            }
          }
        }
      },
      conditions: {
        serializedName: "conditions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeliveryRuleCondition"
            }
          }
        }
      }
    }
  }
};

export const EndpointPropertiesUpdateParametersDeliveryPolicy: msRest.CompositeMapper = {
  serializedName: "EndpointPropertiesUpdateParameters_deliveryPolicy",
  type: {
    name: "Composite",
    className: "EndpointPropertiesUpdateParametersDeliveryPolicy",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      rules: {
        required: true,
        serializedName: "rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeliveryRule"
            }
          }
        }
      }
    }
  }
};

export const EndpointUpdateParameters: msRest.CompositeMapper = {
  serializedName: "EndpointUpdateParameters",
  type: {
    name: "Composite",
    className: "EndpointUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      originHostHeader: {
        serializedName: "properties.originHostHeader",
        type: {
          name: "String"
        }
      },
      originPath: {
        serializedName: "properties.originPath",
        type: {
          name: "String"
        }
      },
      contentTypesToCompress: {
        serializedName: "properties.contentTypesToCompress",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      isCompressionEnabled: {
        serializedName: "properties.isCompressionEnabled",
        type: {
          name: "Boolean"
        }
      },
      isHttpAllowed: {
        serializedName: "properties.isHttpAllowed",
        type: {
          name: "Boolean"
        }
      },
      isHttpsAllowed: {
        serializedName: "properties.isHttpsAllowed",
        type: {
          name: "Boolean"
        }
      },
      queryStringCachingBehavior: {
        serializedName: "properties.queryStringCachingBehavior",
        type: {
          name: "Enum",
          allowedValues: [
            "IgnoreQueryString",
            "BypassCaching",
            "UseQueryString",
            "NotSet"
          ]
        }
      },
      optimizationType: {
        serializedName: "properties.optimizationType",
        type: {
          name: "String"
        }
      },
      probePath: {
        serializedName: "properties.probePath",
        type: {
          name: "String"
        }
      },
      geoFilters: {
        serializedName: "properties.geoFilters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GeoFilter"
            }
          }
        }
      },
      deliveryPolicy: {
        serializedName: "properties.deliveryPolicy",
        type: {
          name: "Composite",
          className: "EndpointPropertiesUpdateParametersDeliveryPolicy"
        }
      }
    }
  }
};

export const UrlPathConditionParameters: msRest.CompositeMapper = {
  serializedName: "UrlPathConditionParameters",
  type: {
    name: "Composite",
    className: "UrlPathConditionParameters",
    modelProperties: {
      odatatype: {
        required: true,
        isConstant: true,
        serializedName: "@odata\\.type",
        defaultValue: 'Microsoft.Azure.Cdn.Models.DeliveryRuleUrlPathConditionParameters',
        type: {
          name: "String"
        }
      },
      path: {
        required: true,
        serializedName: "path",
        type: {
          name: "String"
        }
      },
      matchType: {
        required: true,
        serializedName: "matchType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeliveryRuleUrlPathCondition: msRest.CompositeMapper = {
  serializedName: "UrlPath",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DeliveryRuleCondition.type.polymorphicDiscriminator,
    uberParent: "DeliveryRuleCondition",
    className: "DeliveryRuleUrlPathCondition",
    modelProperties: {
      ...DeliveryRuleCondition.type.modelProperties,
      parameters: {
        required: true,
        serializedName: "parameters",
        defaultValue: {},
        type: {
          name: "Composite",
          className: "UrlPathConditionParameters"
        }
      }
    }
  }
};

export const UrlFileExtensionConditionParameters: msRest.CompositeMapper = {
  serializedName: "UrlFileExtensionConditionParameters",
  type: {
    name: "Composite",
    className: "UrlFileExtensionConditionParameters",
    modelProperties: {
      odatatype: {
        required: true,
        isConstant: true,
        serializedName: "@odata\\.type",
        defaultValue: 'Microsoft.Azure.Cdn.Models.DeliveryRuleUrlFileExtensionConditionParameters',
        type: {
          name: "String"
        }
      },
      extensions: {
        required: true,
        serializedName: "extensions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DeliveryRuleUrlFileExtensionCondition: msRest.CompositeMapper = {
  serializedName: "UrlFileExtension",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DeliveryRuleCondition.type.polymorphicDiscriminator,
    uberParent: "DeliveryRuleCondition",
    className: "DeliveryRuleUrlFileExtensionCondition",
    modelProperties: {
      ...DeliveryRuleCondition.type.modelProperties,
      parameters: {
        required: true,
        serializedName: "parameters",
        defaultValue: {},
        type: {
          name: "Composite",
          className: "UrlFileExtensionConditionParameters"
        }
      }
    }
  }
};

export const CacheExpirationActionParameters: msRest.CompositeMapper = {
  serializedName: "CacheExpirationActionParameters",
  type: {
    name: "Composite",
    className: "CacheExpirationActionParameters",
    modelProperties: {
      odatatype: {
        required: true,
        isConstant: true,
        serializedName: "@odata\\.type",
        defaultValue: 'Microsoft.Azure.Cdn.Models.DeliveryRuleCacheExpirationActionParameters',
        type: {
          name: "String"
        }
      },
      cacheBehavior: {
        required: true,
        serializedName: "cacheBehavior",
        type: {
          name: "String"
        }
      },
      cacheType: {
        required: true,
        isConstant: true,
        serializedName: "cacheType",
        defaultValue: 'All',
        type: {
          name: "String"
        }
      },
      cacheDuration: {
        nullable: true,
        serializedName: "cacheDuration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeliveryRuleCacheExpirationAction: msRest.CompositeMapper = {
  serializedName: "CacheExpiration",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DeliveryRuleAction.type.polymorphicDiscriminator,
    uberParent: "DeliveryRuleAction",
    className: "DeliveryRuleCacheExpirationAction",
    modelProperties: {
      ...DeliveryRuleAction.type.modelProperties,
      parameters: {
        required: true,
        serializedName: "parameters",
        defaultValue: {},
        type: {
          name: "Composite",
          className: "CacheExpirationActionParameters"
        }
      }
    }
  }
};

export const PurgeParameters: msRest.CompositeMapper = {
  serializedName: "PurgeParameters",
  type: {
    name: "Composite",
    className: "PurgeParameters",
    modelProperties: {
      contentPaths: {
        required: true,
        serializedName: "contentPaths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const LoadParameters: msRest.CompositeMapper = {
  serializedName: "LoadParameters",
  type: {
    name: "Composite",
    className: "LoadParameters",
    modelProperties: {
      contentPaths: {
        required: true,
        serializedName: "contentPaths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const Origin: msRest.CompositeMapper = {
  serializedName: "Origin",
  type: {
    name: "Composite",
    className: "Origin",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      hostName: {
        required: true,
        serializedName: "properties.hostName",
        type: {
          name: "String"
        }
      },
      httpPort: {
        serializedName: "properties.httpPort",
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      httpsPort: {
        serializedName: "properties.httpsPort",
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      resourceState: {
        readOnly: true,
        serializedName: "properties.resourceState",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OriginUpdateParameters: msRest.CompositeMapper = {
  serializedName: "OriginUpdateParameters",
  type: {
    name: "Composite",
    className: "OriginUpdateParameters",
    modelProperties: {
      hostName: {
        serializedName: "properties.hostName",
        type: {
          name: "String"
        }
      },
      httpPort: {
        serializedName: "properties.httpPort",
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      httpsPort: {
        serializedName: "properties.httpsPort",
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ProxyResource: msRest.CompositeMapper = {
  serializedName: "ProxyResource",
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const CustomDomain: msRest.CompositeMapper = {
  serializedName: "CustomDomain",
  type: {
    name: "Composite",
    className: "CustomDomain",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      hostName: {
        required: true,
        serializedName: "properties.hostName",
        type: {
          name: "String"
        }
      },
      resourceState: {
        readOnly: true,
        serializedName: "properties.resourceState",
        type: {
          name: "String"
        }
      },
      customHttpsProvisioningState: {
        readOnly: true,
        serializedName: "properties.customHttpsProvisioningState",
        type: {
          name: "String"
        }
      },
      customHttpsProvisioningSubstate: {
        readOnly: true,
        serializedName: "properties.customHttpsProvisioningSubstate",
        type: {
          name: "String"
        }
      },
      validationData: {
        serializedName: "properties.validationData",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomDomainParameters: msRest.CompositeMapper = {
  serializedName: "CustomDomainParameters",
  type: {
    name: "Composite",
    className: "CustomDomainParameters",
    modelProperties: {
      hostName: {
        required: true,
        serializedName: "properties.hostName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ValidateCustomDomainInput: msRest.CompositeMapper = {
  serializedName: "ValidateCustomDomainInput",
  type: {
    name: "Composite",
    className: "ValidateCustomDomainInput",
    modelProperties: {
      hostName: {
        required: true,
        serializedName: "hostName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ValidateCustomDomainOutput: msRest.CompositeMapper = {
  serializedName: "ValidateCustomDomainOutput",
  type: {
    name: "Composite",
    className: "ValidateCustomDomainOutput",
    modelProperties: {
      customDomainValidated: {
        readOnly: true,
        serializedName: "customDomainValidated",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        readOnly: true,
        serializedName: "reason",
        type: {
          name: "String"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityInput: msRest.CompositeMapper = {
  serializedName: "CheckNameAvailabilityInput",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityInput",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        required: true,
        isConstant: true,
        serializedName: "type",
        defaultValue: 'Microsoft.Cdn/Profiles/Endpoints',
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityOutput: msRest.CompositeMapper = {
  serializedName: "CheckNameAvailabilityOutput",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityOutput",
    modelProperties: {
      nameAvailable: {
        readOnly: true,
        serializedName: "nameAvailable",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        readOnly: true,
        serializedName: "reason",
        type: {
          name: "String"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ValidateProbeInput: msRest.CompositeMapper = {
  serializedName: "ValidateProbeInput",
  type: {
    name: "Composite",
    className: "ValidateProbeInput",
    modelProperties: {
      probeURL: {
        required: true,
        serializedName: "probeURL",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ValidateProbeOutput: msRest.CompositeMapper = {
  serializedName: "ValidateProbeOutput",
  type: {
    name: "Composite",
    className: "ValidateProbeOutput",
    modelProperties: {
      isValid: {
        readOnly: true,
        serializedName: "isValid",
        type: {
          name: "Boolean"
        }
      },
      errorCode: {
        readOnly: true,
        serializedName: "errorCode",
        type: {
          name: "String"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceUsage: msRest.CompositeMapper = {
  serializedName: "ResourceUsage",
  type: {
    name: "Composite",
    className: "ResourceUsage",
    modelProperties: {
      resourceType: {
        readOnly: true,
        serializedName: "resourceType",
        type: {
          name: "String"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      currentValue: {
        readOnly: true,
        serializedName: "currentValue",
        type: {
          name: "Number"
        }
      },
      limit: {
        readOnly: true,
        serializedName: "limit",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const OperationDisplay: msRest.CompositeMapper = {
  serializedName: "Operation_display",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        readOnly: true,
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        readOnly: true,
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        readOnly: true,
        serializedName: "operation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: msRest.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      }
    }
  }
};

export const CidrIpAddress: msRest.CompositeMapper = {
  serializedName: "cidrIpAddress",
  type: {
    name: "Composite",
    className: "CidrIpAddress",
    modelProperties: {
      baseIpAddress: {
        serializedName: "baseIpAddress",
        type: {
          name: "String"
        }
      },
      prefixLength: {
        serializedName: "prefixLength",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const IpAddressGroup: msRest.CompositeMapper = {
  serializedName: "IpAddressGroup",
  type: {
    name: "Composite",
    className: "IpAddressGroup",
    modelProperties: {
      deliveryRegion: {
        serializedName: "deliveryRegion",
        type: {
          name: "String"
        }
      },
      ipv4Addresses: {
        serializedName: "ipv4Addresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CidrIpAddress"
            }
          }
        }
      },
      ipv6Addresses: {
        serializedName: "ipv6Addresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CidrIpAddress"
            }
          }
        }
      }
    }
  }
};

export const EdgeNode: msRest.CompositeMapper = {
  serializedName: "EdgeNode",
  type: {
    name: "Composite",
    className: "EdgeNode",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      ipAddressGroups: {
        required: true,
        serializedName: "properties.ipAddressGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpAddressGroup"
            }
          }
        }
      }
    }
  }
};

export const ErrorResponse: msRest.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      code: {
        readOnly: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProfileListResult: msRest.CompositeMapper = {
  serializedName: "ProfileListResult",
  type: {
    name: "Composite",
    className: "ProfileListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Profile"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceUsageListResult: msRest.CompositeMapper = {
  serializedName: "ResourceUsageListResult",
  type: {
    name: "Composite",
    className: "ResourceUsageListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceUsage"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EndpointListResult: msRest.CompositeMapper = {
  serializedName: "EndpointListResult",
  type: {
    name: "Composite",
    className: "EndpointListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Endpoint"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OriginListResult: msRest.CompositeMapper = {
  serializedName: "OriginListResult",
  type: {
    name: "Composite",
    className: "OriginListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Origin"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomDomainListResult: msRest.CompositeMapper = {
  serializedName: "CustomDomainListResult",
  type: {
    name: "Composite",
    className: "CustomDomainListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CustomDomain"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationsListResult: msRest.CompositeMapper = {
  serializedName: "OperationsListResult",
  type: {
    name: "Composite",
    className: "OperationsListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EdgenodeResult: msRest.CompositeMapper = {
  serializedName: "EdgenodeResult",
  type: {
    name: "Composite",
    className: "EdgenodeResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EdgeNode"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const discriminators = {
  'DeliveryRuleAction' : DeliveryRuleAction,
  'DeliveryRuleCondition' : DeliveryRuleCondition,
  'DeliveryRuleCondition.UrlPath' : DeliveryRuleUrlPathCondition,
  'DeliveryRuleCondition.UrlFileExtension' : DeliveryRuleUrlFileExtensionCondition,
  'DeliveryRuleAction.CacheExpiration' : DeliveryRuleCacheExpirationAction
};
