/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmCdn = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for SkuName.
     * Possible values include: 'Standard_Verizon', 'Premium_Verizon',
     * 'Custom_Verizon', 'Standard_Akamai', 'Standard_ChinaCdn',
     * 'Standard_Microsoft'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SkuName = <SkuName>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SkuName;
    (function (SkuName) {
        SkuName["StandardVerizon"] = "Standard_Verizon";
        SkuName["PremiumVerizon"] = "Premium_Verizon";
        SkuName["CustomVerizon"] = "Custom_Verizon";
        SkuName["StandardAkamai"] = "Standard_Akamai";
        SkuName["StandardChinaCdn"] = "Standard_ChinaCdn";
        SkuName["StandardMicrosoft"] = "Standard_Microsoft";
    })(SkuName || (SkuName = {}));
    /**
     * Defines values for ProfileResourceState.
     * Possible values include: 'Creating', 'Active', 'Deleting', 'Disabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ProfileResourceState =
     * <ProfileResourceState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ProfileResourceState;
    (function (ProfileResourceState) {
        ProfileResourceState["Creating"] = "Creating";
        ProfileResourceState["Active"] = "Active";
        ProfileResourceState["Deleting"] = "Deleting";
        ProfileResourceState["Disabled"] = "Disabled";
    })(ProfileResourceState || (ProfileResourceState = {}));
    /**
     * Defines values for OptimizationType.
     * Possible values include: 'GeneralWebDelivery', 'GeneralMediaStreaming',
     * 'VideoOnDemandMediaStreaming', 'LargeFileDownload',
     * 'DynamicSiteAcceleration'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: OptimizationType =
     * <OptimizationType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var OptimizationType;
    (function (OptimizationType) {
        OptimizationType["GeneralWebDelivery"] = "GeneralWebDelivery";
        OptimizationType["GeneralMediaStreaming"] = "GeneralMediaStreaming";
        OptimizationType["VideoOnDemandMediaStreaming"] = "VideoOnDemandMediaStreaming";
        OptimizationType["LargeFileDownload"] = "LargeFileDownload";
        OptimizationType["DynamicSiteAcceleration"] = "DynamicSiteAcceleration";
    })(OptimizationType || (OptimizationType = {}));
    /**
     * Defines values for EndpointResourceState.
     * Possible values include: 'Creating', 'Deleting', 'Running', 'Starting',
     * 'Stopped', 'Stopping'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: EndpointResourceState =
     * <EndpointResourceState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var EndpointResourceState;
    (function (EndpointResourceState) {
        EndpointResourceState["Creating"] = "Creating";
        EndpointResourceState["Deleting"] = "Deleting";
        EndpointResourceState["Running"] = "Running";
        EndpointResourceState["Starting"] = "Starting";
        EndpointResourceState["Stopped"] = "Stopped";
        EndpointResourceState["Stopping"] = "Stopping";
    })(EndpointResourceState || (EndpointResourceState = {}));
    /**
     * Defines values for QueryStringCachingBehavior.
     * Possible values include: 'IgnoreQueryString', 'BypassCaching',
     * 'UseQueryString', 'NotSet'
     * @readonly
     * @enum {string}
     */
    var QueryStringCachingBehavior;
    (function (QueryStringCachingBehavior) {
        QueryStringCachingBehavior["IgnoreQueryString"] = "IgnoreQueryString";
        QueryStringCachingBehavior["BypassCaching"] = "BypassCaching";
        QueryStringCachingBehavior["UseQueryString"] = "UseQueryString";
        QueryStringCachingBehavior["NotSet"] = "NotSet";
    })(QueryStringCachingBehavior || (QueryStringCachingBehavior = {}));
    /**
     * Defines values for GeoFilterActions.
     * Possible values include: 'Block', 'Allow'
     * @readonly
     * @enum {string}
     */
    var GeoFilterActions;
    (function (GeoFilterActions) {
        GeoFilterActions["Block"] = "Block";
        GeoFilterActions["Allow"] = "Allow";
    })(GeoFilterActions || (GeoFilterActions = {}));
    /**
     * Defines values for OriginResourceState.
     * Possible values include: 'Creating', 'Active', 'Deleting'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: OriginResourceState =
     * <OriginResourceState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var OriginResourceState;
    (function (OriginResourceState) {
        OriginResourceState["Creating"] = "Creating";
        OriginResourceState["Active"] = "Active";
        OriginResourceState["Deleting"] = "Deleting";
    })(OriginResourceState || (OriginResourceState = {}));
    /**
     * Defines values for CustomDomainResourceState.
     * Possible values include: 'Creating', 'Active', 'Deleting'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: CustomDomainResourceState =
     * <CustomDomainResourceState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var CustomDomainResourceState;
    (function (CustomDomainResourceState) {
        CustomDomainResourceState["Creating"] = "Creating";
        CustomDomainResourceState["Active"] = "Active";
        CustomDomainResourceState["Deleting"] = "Deleting";
    })(CustomDomainResourceState || (CustomDomainResourceState = {}));
    /**
     * Defines values for CustomHttpsProvisioningState.
     * Possible values include: 'Enabling', 'Enabled', 'Disabling', 'Disabled',
     * 'Failed'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: CustomHttpsProvisioningState =
     * <CustomHttpsProvisioningState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var CustomHttpsProvisioningState;
    (function (CustomHttpsProvisioningState) {
        CustomHttpsProvisioningState["Enabling"] = "Enabling";
        CustomHttpsProvisioningState["Enabled"] = "Enabled";
        CustomHttpsProvisioningState["Disabling"] = "Disabling";
        CustomHttpsProvisioningState["Disabled"] = "Disabled";
        CustomHttpsProvisioningState["Failed"] = "Failed";
    })(CustomHttpsProvisioningState || (CustomHttpsProvisioningState = {}));
    /**
     * Defines values for CustomHttpsProvisioningSubstate.
     * Possible values include: 'SubmittingDomainControlValidationRequest',
     * 'PendingDomainControlValidationREquestApproval',
     * 'DomainControlValidationRequestApproved',
     * 'DomainControlValidationRequestRejected',
     * 'DomainControlValidationRequestTimedOut', 'IssuingCertificate',
     * 'DeployingCertificate', 'CertificateDeployed', 'DeletingCertificate',
     * 'CertificateDeleted'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: CustomHttpsProvisioningSubstate =
     * <CustomHttpsProvisioningSubstate>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var CustomHttpsProvisioningSubstate;
    (function (CustomHttpsProvisioningSubstate) {
        CustomHttpsProvisioningSubstate["SubmittingDomainControlValidationRequest"] = "SubmittingDomainControlValidationRequest";
        CustomHttpsProvisioningSubstate["PendingDomainControlValidationREquestApproval"] = "PendingDomainControlValidationREquestApproval";
        CustomHttpsProvisioningSubstate["DomainControlValidationRequestApproved"] = "DomainControlValidationRequestApproved";
        CustomHttpsProvisioningSubstate["DomainControlValidationRequestRejected"] = "DomainControlValidationRequestRejected";
        CustomHttpsProvisioningSubstate["DomainControlValidationRequestTimedOut"] = "DomainControlValidationRequestTimedOut";
        CustomHttpsProvisioningSubstate["IssuingCertificate"] = "IssuingCertificate";
        CustomHttpsProvisioningSubstate["DeployingCertificate"] = "DeployingCertificate";
        CustomHttpsProvisioningSubstate["CertificateDeployed"] = "CertificateDeployed";
        CustomHttpsProvisioningSubstate["DeletingCertificate"] = "DeletingCertificate";
        CustomHttpsProvisioningSubstate["CertificateDeleted"] = "CertificateDeleted";
    })(CustomHttpsProvisioningSubstate || (CustomHttpsProvisioningSubstate = {}));
    /**
     * Defines values for ResourceType.
     * Possible values include: 'Microsoft.Cdn/Profiles/Endpoints'
     * @readonly
     * @enum {string}
     */
    var ResourceType;
    (function (ResourceType) {
        ResourceType["MicrosoftCdnProfilesEndpoints"] = "Microsoft.Cdn/Profiles/Endpoints";
    })(ResourceType || (ResourceType = {}));
    /**
     * Defines values for MatchType.
     * Possible values include: 'Literal', 'Wildcard'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: MatchType = <MatchType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var MatchType;
    (function (MatchType) {
        MatchType["Literal"] = "Literal";
        MatchType["Wildcard"] = "Wildcard";
    })(MatchType || (MatchType = {}));
    /**
     * Defines values for CacheBehavior.
     * Possible values include: 'BypassCache', 'Override', 'SetIfMissing'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: CacheBehavior =
     * <CacheBehavior>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var CacheBehavior;
    (function (CacheBehavior) {
        CacheBehavior["BypassCache"] = "BypassCache";
        CacheBehavior["Override"] = "Override";
        CacheBehavior["SetIfMissing"] = "SetIfMissing";
    })(CacheBehavior || (CacheBehavior = {}));

    var index = /*#__PURE__*/Object.freeze({
        get SkuName () { return SkuName; },
        get ProfileResourceState () { return ProfileResourceState; },
        get OptimizationType () { return OptimizationType; },
        get EndpointResourceState () { return EndpointResourceState; },
        get QueryStringCachingBehavior () { return QueryStringCachingBehavior; },
        get GeoFilterActions () { return GeoFilterActions; },
        get OriginResourceState () { return OriginResourceState; },
        get CustomDomainResourceState () { return CustomDomainResourceState; },
        get CustomHttpsProvisioningState () { return CustomHttpsProvisioningState; },
        get CustomHttpsProvisioningSubstate () { return CustomHttpsProvisioningSubstate; },
        get ResourceType () { return ResourceType; },
        get MatchType () { return MatchType; },
        get CacheBehavior () { return CacheBehavior; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var Sku = {
        serializedName: "Sku",
        type: {
            name: "Composite",
            className: "Sku",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TrackedResource = {
        serializedName: "TrackedResource",
        type: {
            name: "Composite",
            className: "TrackedResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var Profile = {
        serializedName: "Profile",
        type: {
            name: "Composite",
            className: "Profile",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { sku: {
                    required: true,
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }, resourceState: {
                    readOnly: true,
                    serializedName: "properties.resourceState",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ProfileUpdateParameters = {
        serializedName: "ProfileUpdateParameters",
        type: {
            name: "Composite",
            className: "ProfileUpdateParameters",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var SsoUri = {
        serializedName: "SsoUri",
        type: {
            name: "Composite",
            className: "SsoUri",
            modelProperties: {
                ssoUriValue: {
                    readOnly: true,
                    serializedName: "ssoUriValue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SupportedOptimizationTypesListResult = {
        serializedName: "SupportedOptimizationTypesListResult",
        type: {
            name: "Composite",
            className: "SupportedOptimizationTypesListResult",
            modelProperties: {
                supportedOptimizationTypes: {
                    readOnly: true,
                    serializedName: "supportedOptimizationTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var DeepCreatedOrigin = {
        serializedName: "DeepCreatedOrigin",
        type: {
            name: "Composite",
            className: "DeepCreatedOrigin",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                hostName: {
                    required: true,
                    serializedName: "properties.hostName",
                    type: {
                        name: "String"
                    }
                },
                httpPort: {
                    serializedName: "properties.httpPort",
                    constraints: {
                        InclusiveMaximum: 65535,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                httpsPort: {
                    serializedName: "properties.httpsPort",
                    constraints: {
                        InclusiveMaximum: 65535,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Endpoint = {
        serializedName: "Endpoint",
        type: {
            name: "Composite",
            className: "Endpoint",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { originHostHeader: {
                    serializedName: "properties.originHostHeader",
                    type: {
                        name: "String"
                    }
                }, originPath: {
                    serializedName: "properties.originPath",
                    type: {
                        name: "String"
                    }
                }, contentTypesToCompress: {
                    serializedName: "properties.contentTypesToCompress",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, isCompressionEnabled: {
                    serializedName: "properties.isCompressionEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, isHttpAllowed: {
                    serializedName: "properties.isHttpAllowed",
                    type: {
                        name: "Boolean"
                    }
                }, isHttpsAllowed: {
                    serializedName: "properties.isHttpsAllowed",
                    type: {
                        name: "Boolean"
                    }
                }, queryStringCachingBehavior: {
                    serializedName: "properties.queryStringCachingBehavior",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "IgnoreQueryString",
                            "BypassCaching",
                            "UseQueryString",
                            "NotSet"
                        ]
                    }
                }, optimizationType: {
                    serializedName: "properties.optimizationType",
                    type: {
                        name: "String"
                    }
                }, probePath: {
                    serializedName: "properties.probePath",
                    type: {
                        name: "String"
                    }
                }, geoFilters: {
                    serializedName: "properties.geoFilters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "GeoFilter"
                            }
                        }
                    }
                }, deliveryPolicy: {
                    serializedName: "properties.deliveryPolicy",
                    type: {
                        name: "Composite",
                        className: "EndpointPropertiesUpdateParametersDeliveryPolicy"
                    }
                }, hostName: {
                    readOnly: true,
                    serializedName: "properties.hostName",
                    type: {
                        name: "String"
                    }
                }, origins: {
                    required: true,
                    serializedName: "properties.origins",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DeepCreatedOrigin"
                            }
                        }
                    }
                }, resourceState: {
                    readOnly: true,
                    serializedName: "properties.resourceState",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var GeoFilter = {
        serializedName: "GeoFilter",
        type: {
            name: "Composite",
            className: "GeoFilter",
            modelProperties: {
                relativePath: {
                    required: true,
                    serializedName: "relativePath",
                    type: {
                        name: "String"
                    }
                },
                action: {
                    required: true,
                    serializedName: "action",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Block",
                            "Allow"
                        ]
                    }
                },
                countryCodes: {
                    required: true,
                    serializedName: "countryCodes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var DeliveryRuleAction = {
        serializedName: "DeliveryRuleAction",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "name",
                clientName: "name"
            },
            uberParent: "DeliveryRuleAction",
            className: "DeliveryRuleAction",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DeliveryRuleCondition = {
        serializedName: "DeliveryRuleCondition",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "name",
                clientName: "name"
            },
            uberParent: "DeliveryRuleCondition",
            className: "DeliveryRuleCondition",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DeliveryRule = {
        serializedName: "DeliveryRule",
        type: {
            name: "Composite",
            className: "DeliveryRule",
            modelProperties: {
                order: {
                    required: true,
                    serializedName: "order",
                    type: {
                        name: "Number"
                    }
                },
                actions: {
                    required: true,
                    serializedName: "actions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: {
                                    serializedName: "name",
                                    clientName: "name"
                                },
                                uberParent: "DeliveryRuleAction",
                                className: "DeliveryRuleAction"
                            }
                        }
                    }
                },
                conditions: {
                    serializedName: "conditions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: {
                                    serializedName: "name",
                                    clientName: "name"
                                },
                                uberParent: "DeliveryRuleCondition",
                                className: "DeliveryRuleCondition"
                            }
                        }
                    }
                }
            }
        }
    };
    var EndpointPropertiesUpdateParametersDeliveryPolicy = {
        serializedName: "EndpointPropertiesUpdateParameters_deliveryPolicy",
        type: {
            name: "Composite",
            className: "EndpointPropertiesUpdateParametersDeliveryPolicy",
            modelProperties: {
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                rules: {
                    required: true,
                    serializedName: "rules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DeliveryRule"
                            }
                        }
                    }
                }
            }
        }
    };
    var EndpointUpdateParameters = {
        serializedName: "EndpointUpdateParameters",
        type: {
            name: "Composite",
            className: "EndpointUpdateParameters",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                originHostHeader: {
                    serializedName: "properties.originHostHeader",
                    type: {
                        name: "String"
                    }
                },
                originPath: {
                    serializedName: "properties.originPath",
                    type: {
                        name: "String"
                    }
                },
                contentTypesToCompress: {
                    serializedName: "properties.contentTypesToCompress",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                isCompressionEnabled: {
                    serializedName: "properties.isCompressionEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                isHttpAllowed: {
                    serializedName: "properties.isHttpAllowed",
                    type: {
                        name: "Boolean"
                    }
                },
                isHttpsAllowed: {
                    serializedName: "properties.isHttpsAllowed",
                    type: {
                        name: "Boolean"
                    }
                },
                queryStringCachingBehavior: {
                    serializedName: "properties.queryStringCachingBehavior",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "IgnoreQueryString",
                            "BypassCaching",
                            "UseQueryString",
                            "NotSet"
                        ]
                    }
                },
                optimizationType: {
                    serializedName: "properties.optimizationType",
                    type: {
                        name: "String"
                    }
                },
                probePath: {
                    serializedName: "properties.probePath",
                    type: {
                        name: "String"
                    }
                },
                geoFilters: {
                    serializedName: "properties.geoFilters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "GeoFilter"
                            }
                        }
                    }
                },
                deliveryPolicy: {
                    serializedName: "properties.deliveryPolicy",
                    type: {
                        name: "Composite",
                        className: "EndpointPropertiesUpdateParametersDeliveryPolicy"
                    }
                }
            }
        }
    };
    var UrlPathConditionParameters = {
        serializedName: "UrlPathConditionParameters",
        type: {
            name: "Composite",
            className: "UrlPathConditionParameters",
            modelProperties: {
                odatatype: {
                    required: true,
                    isConstant: true,
                    serializedName: "@odata\\.type",
                    defaultValue: 'Microsoft.Azure.Cdn.Models.DeliveryRuleUrlPathConditionParameters',
                    type: {
                        name: "String"
                    }
                },
                path: {
                    required: true,
                    serializedName: "path",
                    type: {
                        name: "String"
                    }
                },
                matchType: {
                    required: true,
                    serializedName: "matchType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DeliveryRuleUrlPathCondition = {
        serializedName: "UrlPath",
        type: {
            name: "Composite",
            polymorphicDiscriminator: DeliveryRuleCondition.type.polymorphicDiscriminator,
            uberParent: "DeliveryRuleCondition",
            className: "DeliveryRuleUrlPathCondition",
            modelProperties: __assign({}, DeliveryRuleCondition.type.modelProperties, { parameters: {
                    required: true,
                    serializedName: "parameters",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "UrlPathConditionParameters"
                    }
                } })
        }
    };
    var UrlFileExtensionConditionParameters = {
        serializedName: "UrlFileExtensionConditionParameters",
        type: {
            name: "Composite",
            className: "UrlFileExtensionConditionParameters",
            modelProperties: {
                odatatype: {
                    required: true,
                    isConstant: true,
                    serializedName: "@odata\\.type",
                    defaultValue: 'Microsoft.Azure.Cdn.Models.DeliveryRuleUrlFileExtensionConditionParameters',
                    type: {
                        name: "String"
                    }
                },
                extensions: {
                    required: true,
                    serializedName: "extensions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var DeliveryRuleUrlFileExtensionCondition = {
        serializedName: "UrlFileExtension",
        type: {
            name: "Composite",
            polymorphicDiscriminator: DeliveryRuleCondition.type.polymorphicDiscriminator,
            uberParent: "DeliveryRuleCondition",
            className: "DeliveryRuleUrlFileExtensionCondition",
            modelProperties: __assign({}, DeliveryRuleCondition.type.modelProperties, { parameters: {
                    required: true,
                    serializedName: "parameters",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "UrlFileExtensionConditionParameters"
                    }
                } })
        }
    };
    var CacheExpirationActionParameters = {
        serializedName: "CacheExpirationActionParameters",
        type: {
            name: "Composite",
            className: "CacheExpirationActionParameters",
            modelProperties: {
                odatatype: {
                    required: true,
                    isConstant: true,
                    serializedName: "@odata\\.type",
                    defaultValue: 'Microsoft.Azure.Cdn.Models.DeliveryRuleCacheExpirationActionParameters',
                    type: {
                        name: "String"
                    }
                },
                cacheBehavior: {
                    required: true,
                    serializedName: "cacheBehavior",
                    type: {
                        name: "String"
                    }
                },
                cacheType: {
                    required: true,
                    isConstant: true,
                    serializedName: "cacheType",
                    defaultValue: 'All',
                    type: {
                        name: "String"
                    }
                },
                cacheDuration: {
                    nullable: true,
                    serializedName: "cacheDuration",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DeliveryRuleCacheExpirationAction = {
        serializedName: "CacheExpiration",
        type: {
            name: "Composite",
            polymorphicDiscriminator: DeliveryRuleAction.type.polymorphicDiscriminator,
            uberParent: "DeliveryRuleAction",
            className: "DeliveryRuleCacheExpirationAction",
            modelProperties: __assign({}, DeliveryRuleAction.type.modelProperties, { parameters: {
                    required: true,
                    serializedName: "parameters",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "CacheExpirationActionParameters"
                    }
                } })
        }
    };
    var PurgeParameters = {
        serializedName: "PurgeParameters",
        type: {
            name: "Composite",
            className: "PurgeParameters",
            modelProperties: {
                contentPaths: {
                    required: true,
                    serializedName: "contentPaths",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var LoadParameters = {
        serializedName: "LoadParameters",
        type: {
            name: "Composite",
            className: "LoadParameters",
            modelProperties: {
                contentPaths: {
                    required: true,
                    serializedName: "contentPaths",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var Origin = {
        serializedName: "Origin",
        type: {
            name: "Composite",
            className: "Origin",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { hostName: {
                    required: true,
                    serializedName: "properties.hostName",
                    type: {
                        name: "String"
                    }
                }, httpPort: {
                    serializedName: "properties.httpPort",
                    constraints: {
                        InclusiveMaximum: 65535,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }, httpsPort: {
                    serializedName: "properties.httpsPort",
                    constraints: {
                        InclusiveMaximum: 65535,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }, resourceState: {
                    readOnly: true,
                    serializedName: "properties.resourceState",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var OriginUpdateParameters = {
        serializedName: "OriginUpdateParameters",
        type: {
            name: "Composite",
            className: "OriginUpdateParameters",
            modelProperties: {
                hostName: {
                    serializedName: "properties.hostName",
                    type: {
                        name: "String"
                    }
                },
                httpPort: {
                    serializedName: "properties.httpPort",
                    constraints: {
                        InclusiveMaximum: 65535,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                httpsPort: {
                    serializedName: "properties.httpsPort",
                    constraints: {
                        InclusiveMaximum: 65535,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ProxyResource = {
        serializedName: "ProxyResource",
        type: {
            name: "Composite",
            className: "ProxyResource",
            modelProperties: __assign({}, Resource.type.modelProperties)
        }
    };
    var CustomDomain = {
        serializedName: "CustomDomain",
        type: {
            name: "Composite",
            className: "CustomDomain",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { hostName: {
                    required: true,
                    serializedName: "properties.hostName",
                    type: {
                        name: "String"
                    }
                }, resourceState: {
                    readOnly: true,
                    serializedName: "properties.resourceState",
                    type: {
                        name: "String"
                    }
                }, customHttpsProvisioningState: {
                    readOnly: true,
                    serializedName: "properties.customHttpsProvisioningState",
                    type: {
                        name: "String"
                    }
                }, customHttpsProvisioningSubstate: {
                    readOnly: true,
                    serializedName: "properties.customHttpsProvisioningSubstate",
                    type: {
                        name: "String"
                    }
                }, validationData: {
                    serializedName: "properties.validationData",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var CustomDomainParameters = {
        serializedName: "CustomDomainParameters",
        type: {
            name: "Composite",
            className: "CustomDomainParameters",
            modelProperties: {
                hostName: {
                    required: true,
                    serializedName: "properties.hostName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ValidateCustomDomainInput = {
        serializedName: "ValidateCustomDomainInput",
        type: {
            name: "Composite",
            className: "ValidateCustomDomainInput",
            modelProperties: {
                hostName: {
                    required: true,
                    serializedName: "hostName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ValidateCustomDomainOutput = {
        serializedName: "ValidateCustomDomainOutput",
        type: {
            name: "Composite",
            className: "ValidateCustomDomainOutput",
            modelProperties: {
                customDomainValidated: {
                    readOnly: true,
                    serializedName: "customDomainValidated",
                    type: {
                        name: "Boolean"
                    }
                },
                reason: {
                    readOnly: true,
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CheckNameAvailabilityInput = {
        serializedName: "CheckNameAvailabilityInput",
        type: {
            name: "Composite",
            className: "CheckNameAvailabilityInput",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    isConstant: true,
                    serializedName: "type",
                    defaultValue: 'Microsoft.Cdn/Profiles/Endpoints',
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CheckNameAvailabilityOutput = {
        serializedName: "CheckNameAvailabilityOutput",
        type: {
            name: "Composite",
            className: "CheckNameAvailabilityOutput",
            modelProperties: {
                nameAvailable: {
                    readOnly: true,
                    serializedName: "nameAvailable",
                    type: {
                        name: "Boolean"
                    }
                },
                reason: {
                    readOnly: true,
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ValidateProbeInput = {
        serializedName: "ValidateProbeInput",
        type: {
            name: "Composite",
            className: "ValidateProbeInput",
            modelProperties: {
                probeURL: {
                    required: true,
                    serializedName: "probeURL",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ValidateProbeOutput = {
        serializedName: "ValidateProbeOutput",
        type: {
            name: "Composite",
            className: "ValidateProbeOutput",
            modelProperties: {
                isValid: {
                    readOnly: true,
                    serializedName: "isValid",
                    type: {
                        name: "Boolean"
                    }
                },
                errorCode: {
                    readOnly: true,
                    serializedName: "errorCode",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceUsage = {
        serializedName: "ResourceUsage",
        type: {
            name: "Composite",
            className: "ResourceUsage",
            modelProperties: {
                resourceType: {
                    readOnly: true,
                    serializedName: "resourceType",
                    type: {
                        name: "String"
                    }
                },
                unit: {
                    readOnly: true,
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                currentValue: {
                    readOnly: true,
                    serializedName: "currentValue",
                    type: {
                        name: "Number"
                    }
                },
                limit: {
                    readOnly: true,
                    serializedName: "limit",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    readOnly: true,
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    readOnly: true,
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    readOnly: true,
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                }
            }
        }
    };
    var CidrIpAddress = {
        serializedName: "cidrIpAddress",
        type: {
            name: "Composite",
            className: "CidrIpAddress",
            modelProperties: {
                baseIpAddress: {
                    serializedName: "baseIpAddress",
                    type: {
                        name: "String"
                    }
                },
                prefixLength: {
                    serializedName: "prefixLength",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var IpAddressGroup = {
        serializedName: "IpAddressGroup",
        type: {
            name: "Composite",
            className: "IpAddressGroup",
            modelProperties: {
                deliveryRegion: {
                    serializedName: "deliveryRegion",
                    type: {
                        name: "String"
                    }
                },
                ipv4Addresses: {
                    serializedName: "ipv4Addresses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CidrIpAddress"
                            }
                        }
                    }
                },
                ipv6Addresses: {
                    serializedName: "ipv6Addresses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CidrIpAddress"
                            }
                        }
                    }
                }
            }
        }
    };
    var EdgeNode = {
        serializedName: "EdgeNode",
        type: {
            name: "Composite",
            className: "EdgeNode",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { ipAddressGroups: {
                    required: true,
                    serializedName: "properties.ipAddressGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IpAddressGroup"
                            }
                        }
                    }
                } })
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProfileListResult = {
        serializedName: "ProfileListResult",
        type: {
            name: "Composite",
            className: "ProfileListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Profile"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceUsageListResult = {
        serializedName: "ResourceUsageListResult",
        type: {
            name: "Composite",
            className: "ResourceUsageListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceUsage"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EndpointListResult = {
        serializedName: "EndpointListResult",
        type: {
            name: "Composite",
            className: "EndpointListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Endpoint"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OriginListResult = {
        serializedName: "OriginListResult",
        type: {
            name: "Composite",
            className: "OriginListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Origin"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CustomDomainListResult = {
        serializedName: "CustomDomainListResult",
        type: {
            name: "Composite",
            className: "CustomDomainListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CustomDomain"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationsListResult = {
        serializedName: "OperationsListResult",
        type: {
            name: "Composite",
            className: "OperationsListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EdgenodeResult = {
        serializedName: "EdgenodeResult",
        type: {
            name: "Composite",
            className: "EdgenodeResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EdgeNode"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var discriminators = {
        'DeliveryRuleAction': DeliveryRuleAction,
        'DeliveryRuleCondition': DeliveryRuleCondition,
        'DeliveryRuleCondition.UrlPath': DeliveryRuleUrlPathCondition,
        'DeliveryRuleCondition.UrlFileExtension': DeliveryRuleUrlFileExtensionCondition,
        'DeliveryRuleAction.CacheExpiration': DeliveryRuleCacheExpirationAction
    };

    var Mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        Sku: Sku,
        Resource: Resource,
        TrackedResource: TrackedResource,
        Profile: Profile,
        ProfileUpdateParameters: ProfileUpdateParameters,
        SsoUri: SsoUri,
        SupportedOptimizationTypesListResult: SupportedOptimizationTypesListResult,
        DeepCreatedOrigin: DeepCreatedOrigin,
        Endpoint: Endpoint,
        GeoFilter: GeoFilter,
        DeliveryRuleAction: DeliveryRuleAction,
        DeliveryRuleCondition: DeliveryRuleCondition,
        DeliveryRule: DeliveryRule,
        EndpointPropertiesUpdateParametersDeliveryPolicy: EndpointPropertiesUpdateParametersDeliveryPolicy,
        EndpointUpdateParameters: EndpointUpdateParameters,
        UrlPathConditionParameters: UrlPathConditionParameters,
        DeliveryRuleUrlPathCondition: DeliveryRuleUrlPathCondition,
        UrlFileExtensionConditionParameters: UrlFileExtensionConditionParameters,
        DeliveryRuleUrlFileExtensionCondition: DeliveryRuleUrlFileExtensionCondition,
        CacheExpirationActionParameters: CacheExpirationActionParameters,
        DeliveryRuleCacheExpirationAction: DeliveryRuleCacheExpirationAction,
        PurgeParameters: PurgeParameters,
        LoadParameters: LoadParameters,
        Origin: Origin,
        OriginUpdateParameters: OriginUpdateParameters,
        ProxyResource: ProxyResource,
        CustomDomain: CustomDomain,
        CustomDomainParameters: CustomDomainParameters,
        ValidateCustomDomainInput: ValidateCustomDomainInput,
        ValidateCustomDomainOutput: ValidateCustomDomainOutput,
        CheckNameAvailabilityInput: CheckNameAvailabilityInput,
        CheckNameAvailabilityOutput: CheckNameAvailabilityOutput,
        ValidateProbeInput: ValidateProbeInput,
        ValidateProbeOutput: ValidateProbeOutput,
        ResourceUsage: ResourceUsage,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        CidrIpAddress: CidrIpAddress,
        IpAddressGroup: IpAddressGroup,
        EdgeNode: EdgeNode,
        ErrorResponse: ErrorResponse,
        ProfileListResult: ProfileListResult,
        ResourceUsageListResult: ResourceUsageListResult,
        EndpointListResult: EndpointListResult,
        OriginListResult: OriginListResult,
        CustomDomainListResult: CustomDomainListResult,
        OperationsListResult: OperationsListResult,
        EdgenodeResult: EdgenodeResult,
        discriminators: discriminators
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var customDomainName = {
        parameterPath: "customDomainName",
        mapper: {
            required: true,
            serializedName: "customDomainName",
            type: {
                name: "String"
            }
        }
    };
    var endpointName = {
        parameterPath: "endpointName",
        mapper: {
            required: true,
            serializedName: "endpointName",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var originName = {
        parameterPath: "originName",
        mapper: {
            required: true,
            serializedName: "originName",
            type: {
                name: "String"
            }
        }
    };
    var profileName = {
        parameterPath: "profileName",
        mapper: {
            required: true,
            serializedName: "profileName",
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            constraints: {
                MaxLength: 90,
                MinLength: 1,
                Pattern: /^[-\w\._\(\)]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        ProfileListResult: ProfileListResult,
        Profile: Profile,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        Sku: Sku,
        ErrorResponse: ErrorResponse,
        ProfileUpdateParameters: ProfileUpdateParameters,
        SsoUri: SsoUri,
        SupportedOptimizationTypesListResult: SupportedOptimizationTypesListResult,
        ResourceUsageListResult: ResourceUsageListResult,
        ResourceUsage: ResourceUsage,
        DeepCreatedOrigin: DeepCreatedOrigin,
        Endpoint: Endpoint,
        GeoFilter: GeoFilter,
        EndpointPropertiesUpdateParametersDeliveryPolicy: EndpointPropertiesUpdateParametersDeliveryPolicy,
        DeliveryRule: DeliveryRule,
        DeliveryRuleAction: DeliveryRuleAction,
        DeliveryRuleCondition: DeliveryRuleCondition,
        EndpointUpdateParameters: EndpointUpdateParameters,
        DeliveryRuleUrlPathCondition: DeliveryRuleUrlPathCondition,
        UrlPathConditionParameters: UrlPathConditionParameters,
        DeliveryRuleUrlFileExtensionCondition: DeliveryRuleUrlFileExtensionCondition,
        UrlFileExtensionConditionParameters: UrlFileExtensionConditionParameters,
        DeliveryRuleCacheExpirationAction: DeliveryRuleCacheExpirationAction,
        CacheExpirationActionParameters: CacheExpirationActionParameters,
        Origin: Origin,
        OriginUpdateParameters: OriginUpdateParameters,
        ProxyResource: ProxyResource,
        CustomDomain: CustomDomain,
        EdgeNode: EdgeNode,
        IpAddressGroup: IpAddressGroup,
        CidrIpAddress: CidrIpAddress
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Profiles. */
    var Profiles = /** @class */ (function () {
        /**
         * Create a Profiles.
         * @param {CdnManagementClientContext} client Reference to the service client.
         */
        function Profiles(client) {
            this.client = client;
        }
        Profiles.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Profiles.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        Profiles.prototype.get = function (resourceGroupName$$1, profileName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                profileName: profileName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        /**
         * Creates a new CDN profile with a profile name under the specified subscription and resource
         * group.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param profileName Name of the CDN profile which is unique within the resource group.
         * @param profile Profile properties needed to create a new profile.
         * @param [options] The optional parameters
         * @returns Promise<Models.ProfilesCreateResponse>
         */
        Profiles.prototype.create = function (resourceGroupName$$1, profileName$$1, profile, options) {
            return this.beginCreate(resourceGroupName$$1, profileName$$1, profile, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates an existing CDN profile with the specified profile name under the specified subscription
         * and resource group.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param profileName Name of the CDN profile which is unique within the resource group.
         * @param [options] The optional parameters
         * @returns Promise<Models.ProfilesUpdateResponse>
         */
        Profiles.prototype.update = function (resourceGroupName$$1, profileName$$1, options) {
            return this.beginUpdate(resourceGroupName$$1, profileName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes an existing CDN profile with the specified parameters. Deleting a profile will result in
         * the deletion of all of the sub-resources including endpoints, origins and custom domains.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param profileName Name of the CDN profile which is unique within the resource group.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Profiles.prototype.deleteMethod = function (resourceGroupName$$1, profileName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, profileName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Profiles.prototype.generateSsoUri = function (resourceGroupName$$1, profileName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                profileName: profileName$$1,
                options: options
            }, generateSsoUriOperationSpec, callback);
        };
        Profiles.prototype.listSupportedOptimizationTypes = function (resourceGroupName$$1, profileName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                profileName: profileName$$1,
                options: options
            }, listSupportedOptimizationTypesOperationSpec, callback);
        };
        Profiles.prototype.listResourceUsage = function (resourceGroupName$$1, profileName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                profileName: profileName$$1,
                options: options
            }, listResourceUsageOperationSpec, callback);
        };
        /**
         * Creates a new CDN profile with a profile name under the specified subscription and resource
         * group.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param profileName Name of the CDN profile which is unique within the resource group.
         * @param profile Profile properties needed to create a new profile.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Profiles.prototype.beginCreate = function (resourceGroupName$$1, profileName$$1, profile, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                profileName: profileName$$1,
                profile: profile,
                options: options
            }, beginCreateOperationSpec, options);
        };
        /**
         * Updates an existing CDN profile with the specified profile name under the specified subscription
         * and resource group.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param profileName Name of the CDN profile which is unique within the resource group.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Profiles.prototype.beginUpdate = function (resourceGroupName$$1, profileName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                profileName: profileName$$1,
                options: options
            }, beginUpdateOperationSpec, options);
        };
        /**
         * Deletes an existing CDN profile with the specified parameters. Deleting a profile will result in
         * the deletion of all of the sub-resources including endpoints, origins and custom domains.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param profileName Name of the CDN profile which is unique within the resource group.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Profiles.prototype.beginDeleteMethod = function (resourceGroupName$$1, profileName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                profileName: profileName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        Profiles.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        Profiles.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        Profiles.prototype.listResourceUsageNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listResourceUsageNextOperationSpec, callback);
        };
        return Profiles;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers$1);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Cdn/profiles",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProfileListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProfileListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}",
        urlParameters: [
            resourceGroupName,
            profileName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Profile
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var generateSsoUriOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/generateSsoUri",
        urlParameters: [
            resourceGroupName,
            profileName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SsoUri
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listSupportedOptimizationTypesOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/getSupportedOptimizationTypes",
        urlParameters: [
            resourceGroupName,
            profileName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SupportedOptimizationTypesListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listResourceUsageOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/checkResourceUsage",
        urlParameters: [
            resourceGroupName,
            profileName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceUsageListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var beginCreateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}",
        urlParameters: [
            resourceGroupName,
            profileName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "profile",
            mapper: __assign({}, Profile, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Profile
            },
            201: {
                bodyMapper: Profile
            },
            202: {
                bodyMapper: Profile
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var beginUpdateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}",
        urlParameters: [
            resourceGroupName,
            profileName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                tags: [
                    "options",
                    "tags"
                ]
            },
            mapper: __assign({}, ProfileUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Profile
            },
            202: {
                bodyMapper: Profile
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}",
        urlParameters: [
            resourceGroupName,
            profileName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProfileListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProfileListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listResourceUsageNextOperationSpec = {
        httpMethod: "POST",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceUsageListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        EndpointListResult: EndpointListResult,
        Endpoint: Endpoint,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        GeoFilter: GeoFilter,
        EndpointPropertiesUpdateParametersDeliveryPolicy: EndpointPropertiesUpdateParametersDeliveryPolicy,
        DeliveryRule: DeliveryRule,
        DeliveryRuleAction: DeliveryRuleAction,
        DeliveryRuleCondition: DeliveryRuleCondition,
        DeepCreatedOrigin: DeepCreatedOrigin,
        ErrorResponse: ErrorResponse,
        EndpointUpdateParameters: EndpointUpdateParameters,
        PurgeParameters: PurgeParameters,
        LoadParameters: LoadParameters,
        ValidateCustomDomainInput: ValidateCustomDomainInput,
        ValidateCustomDomainOutput: ValidateCustomDomainOutput,
        ResourceUsageListResult: ResourceUsageListResult,
        ResourceUsage: ResourceUsage,
        Profile: Profile,
        Sku: Sku,
        ProfileUpdateParameters: ProfileUpdateParameters,
        DeliveryRuleUrlPathCondition: DeliveryRuleUrlPathCondition,
        UrlPathConditionParameters: UrlPathConditionParameters,
        DeliveryRuleUrlFileExtensionCondition: DeliveryRuleUrlFileExtensionCondition,
        UrlFileExtensionConditionParameters: UrlFileExtensionConditionParameters,
        DeliveryRuleCacheExpirationAction: DeliveryRuleCacheExpirationAction,
        CacheExpirationActionParameters: CacheExpirationActionParameters,
        Origin: Origin,
        OriginUpdateParameters: OriginUpdateParameters,
        ProxyResource: ProxyResource,
        CustomDomain: CustomDomain,
        EdgeNode: EdgeNode,
        IpAddressGroup: IpAddressGroup,
        CidrIpAddress: CidrIpAddress
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Endpoints. */
    var Endpoints = /** @class */ (function () {
        /**
         * Create a Endpoints.
         * @param {CdnManagementClientContext} client Reference to the service client.
         */
        function Endpoints(client) {
            this.client = client;
        }
        Endpoints.prototype.listByProfile = function (resourceGroupName$$1, profileName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                profileName: profileName$$1,
                options: options
            }, listByProfileOperationSpec, callback);
        };
        Endpoints.prototype.get = function (resourceGroupName$$1, profileName$$1, endpointName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                profileName: profileName$$1,
                endpointName: endpointName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        /**
         * Creates a new CDN endpoint with the specified endpoint name under the specified subscription,
         * resource group and profile.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param profileName Name of the CDN profile which is unique within the resource group.
         * @param endpointName Name of the endpoint under the profile which is unique globally.
         * @param endpoint Endpoint properties
         * @param [options] The optional parameters
         * @returns Promise<Models.EndpointsCreateResponse>
         */
        Endpoints.prototype.create = function (resourceGroupName$$1, profileName$$1, endpointName$$1, endpoint, options) {
            return this.beginCreate(resourceGroupName$$1, profileName$$1, endpointName$$1, endpoint, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates an existing CDN endpoint with the specified endpoint name under the specified
         * subscription, resource group and profile. Only tags and Origin HostHeader can be updated after
         * creating an endpoint. To update origins, use the Update Origin operation. To update custom
         * domains, use the Update Custom Domain operation.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param profileName Name of the CDN profile which is unique within the resource group.
         * @param endpointName Name of the endpoint under the profile which is unique globally.
         * @param endpointUpdateProperties Endpoint update properties
         * @param [options] The optional parameters
         * @returns Promise<Models.EndpointsUpdateResponse>
         */
        Endpoints.prototype.update = function (resourceGroupName$$1, profileName$$1, endpointName$$1, endpointUpdateProperties, options) {
            return this.beginUpdate(resourceGroupName$$1, profileName$$1, endpointName$$1, endpointUpdateProperties, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes an existing CDN endpoint with the specified endpoint name under the specified
         * subscription, resource group and profile.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param profileName Name of the CDN profile which is unique within the resource group.
         * @param endpointName Name of the endpoint under the profile which is unique globally.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Endpoints.prototype.deleteMethod = function (resourceGroupName$$1, profileName$$1, endpointName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, profileName$$1, endpointName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Starts an existing CDN endpoint that is on a stopped state.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param profileName Name of the CDN profile which is unique within the resource group.
         * @param endpointName Name of the endpoint under the profile which is unique globally.
         * @param [options] The optional parameters
         * @returns Promise<Models.EndpointsStartResponse>
         */
        Endpoints.prototype.start = function (resourceGroupName$$1, profileName$$1, endpointName$$1, options) {
            return this.beginStart(resourceGroupName$$1, profileName$$1, endpointName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Stops an existing running CDN endpoint.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param profileName Name of the CDN profile which is unique within the resource group.
         * @param endpointName Name of the endpoint under the profile which is unique globally.
         * @param [options] The optional parameters
         * @returns Promise<Models.EndpointsStopResponse>
         */
        Endpoints.prototype.stop = function (resourceGroupName$$1, profileName$$1, endpointName$$1, options) {
            return this.beginStop(resourceGroupName$$1, profileName$$1, endpointName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Removes a content from CDN.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param profileName Name of the CDN profile which is unique within the resource group.
         * @param endpointName Name of the endpoint under the profile which is unique globally.
         * @param contentPaths The path to the content to be purged. Can describe a file path or a wild
         * card directory.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Endpoints.prototype.purgeContent = function (resourceGroupName$$1, profileName$$1, endpointName$$1, contentPaths, options) {
            return this.beginPurgeContent(resourceGroupName$$1, profileName$$1, endpointName$$1, contentPaths, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Pre-loads a content to CDN. Available for Verizon Profiles.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param profileName Name of the CDN profile which is unique within the resource group.
         * @param endpointName Name of the endpoint under the profile which is unique globally.
         * @param contentPaths The path to the content to be loaded. Path should be a relative file URL of
         * the origin.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Endpoints.prototype.loadContent = function (resourceGroupName$$1, profileName$$1, endpointName$$1, contentPaths, options) {
            return this.beginLoadContent(resourceGroupName$$1, profileName$$1, endpointName$$1, contentPaths, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Endpoints.prototype.validateCustomDomain = function (resourceGroupName$$1, profileName$$1, endpointName$$1, hostName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                profileName: profileName$$1,
                endpointName: endpointName$$1,
                hostName: hostName,
                options: options
            }, validateCustomDomainOperationSpec, callback);
        };
        Endpoints.prototype.listResourceUsage = function (resourceGroupName$$1, profileName$$1, endpointName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                profileName: profileName$$1,
                endpointName: endpointName$$1,
                options: options
            }, listResourceUsageOperationSpec$1, callback);
        };
        /**
         * Creates a new CDN endpoint with the specified endpoint name under the specified subscription,
         * resource group and profile.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param profileName Name of the CDN profile which is unique within the resource group.
         * @param endpointName Name of the endpoint under the profile which is unique globally.
         * @param endpoint Endpoint properties
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Endpoints.prototype.beginCreate = function (resourceGroupName$$1, profileName$$1, endpointName$$1, endpoint, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                profileName: profileName$$1,
                endpointName: endpointName$$1,
                endpoint: endpoint,
                options: options
            }, beginCreateOperationSpec$1, options);
        };
        /**
         * Updates an existing CDN endpoint with the specified endpoint name under the specified
         * subscription, resource group and profile. Only tags and Origin HostHeader can be updated after
         * creating an endpoint. To update origins, use the Update Origin operation. To update custom
         * domains, use the Update Custom Domain operation.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param profileName Name of the CDN profile which is unique within the resource group.
         * @param endpointName Name of the endpoint under the profile which is unique globally.
         * @param endpointUpdateProperties Endpoint update properties
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Endpoints.prototype.beginUpdate = function (resourceGroupName$$1, profileName$$1, endpointName$$1, endpointUpdateProperties, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                profileName: profileName$$1,
                endpointName: endpointName$$1,
                endpointUpdateProperties: endpointUpdateProperties,
                options: options
            }, beginUpdateOperationSpec$1, options);
        };
        /**
         * Deletes an existing CDN endpoint with the specified endpoint name under the specified
         * subscription, resource group and profile.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param profileName Name of the CDN profile which is unique within the resource group.
         * @param endpointName Name of the endpoint under the profile which is unique globally.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Endpoints.prototype.beginDeleteMethod = function (resourceGroupName$$1, profileName$$1, endpointName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                profileName: profileName$$1,
                endpointName: endpointName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$1, options);
        };
        /**
         * Starts an existing CDN endpoint that is on a stopped state.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param profileName Name of the CDN profile which is unique within the resource group.
         * @param endpointName Name of the endpoint under the profile which is unique globally.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Endpoints.prototype.beginStart = function (resourceGroupName$$1, profileName$$1, endpointName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                profileName: profileName$$1,
                endpointName: endpointName$$1,
                options: options
            }, beginStartOperationSpec, options);
        };
        /**
         * Stops an existing running CDN endpoint.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param profileName Name of the CDN profile which is unique within the resource group.
         * @param endpointName Name of the endpoint under the profile which is unique globally.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Endpoints.prototype.beginStop = function (resourceGroupName$$1, profileName$$1, endpointName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                profileName: profileName$$1,
                endpointName: endpointName$$1,
                options: options
            }, beginStopOperationSpec, options);
        };
        /**
         * Removes a content from CDN.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param profileName Name of the CDN profile which is unique within the resource group.
         * @param endpointName Name of the endpoint under the profile which is unique globally.
         * @param contentPaths The path to the content to be purged. Can describe a file path or a wild
         * card directory.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Endpoints.prototype.beginPurgeContent = function (resourceGroupName$$1, profileName$$1, endpointName$$1, contentPaths, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                profileName: profileName$$1,
                endpointName: endpointName$$1,
                contentPaths: contentPaths,
                options: options
            }, beginPurgeContentOperationSpec, options);
        };
        /**
         * Pre-loads a content to CDN. Available for Verizon Profiles.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param profileName Name of the CDN profile which is unique within the resource group.
         * @param endpointName Name of the endpoint under the profile which is unique globally.
         * @param contentPaths The path to the content to be loaded. Path should be a relative file URL of
         * the origin.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Endpoints.prototype.beginLoadContent = function (resourceGroupName$$1, profileName$$1, endpointName$$1, contentPaths, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                profileName: profileName$$1,
                endpointName: endpointName$$1,
                contentPaths: contentPaths,
                options: options
            }, beginLoadContentOperationSpec, options);
        };
        Endpoints.prototype.listByProfileNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByProfileNextOperationSpec, callback);
        };
        Endpoints.prototype.listResourceUsageNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listResourceUsageNextOperationSpec$1, callback);
        };
        return Endpoints;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$2);
    var listByProfileOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints",
        urlParameters: [
            resourceGroupName,
            profileName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EndpointListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}",
        urlParameters: [
            resourceGroupName,
            profileName,
            endpointName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Endpoint
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var validateCustomDomainOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/validateCustomDomain",
        urlParameters: [
            resourceGroupName,
            profileName,
            endpointName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                hostName: "hostName"
            },
            mapper: __assign({}, ValidateCustomDomainInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ValidateCustomDomainOutput
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listResourceUsageOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/checkResourceUsage",
        urlParameters: [
            resourceGroupName,
            profileName,
            endpointName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceUsageListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var beginCreateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}",
        urlParameters: [
            resourceGroupName,
            profileName,
            endpointName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "endpoint",
            mapper: __assign({}, Endpoint, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Endpoint
            },
            201: {
                bodyMapper: Endpoint
            },
            202: {
                bodyMapper: Endpoint
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var beginUpdateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}",
        urlParameters: [
            resourceGroupName,
            profileName,
            endpointName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "endpointUpdateProperties",
            mapper: __assign({}, EndpointUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Endpoint
            },
            202: {
                bodyMapper: Endpoint
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var beginDeleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}",
        urlParameters: [
            resourceGroupName,
            profileName,
            endpointName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var beginStartOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/start",
        urlParameters: [
            resourceGroupName,
            profileName,
            endpointName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Endpoint
            },
            202: {
                bodyMapper: Endpoint
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var beginStopOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/stop",
        urlParameters: [
            resourceGroupName,
            profileName,
            endpointName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Endpoint
            },
            202: {
                bodyMapper: Endpoint
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var beginPurgeContentOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/purge",
        urlParameters: [
            resourceGroupName,
            profileName,
            endpointName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                contentPaths: "contentPaths"
            },
            mapper: __assign({}, PurgeParameters, { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var beginLoadContentOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/load",
        urlParameters: [
            resourceGroupName,
            profileName,
            endpointName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                contentPaths: "contentPaths"
            },
            mapper: __assign({}, LoadParameters, { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listByProfileNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EndpointListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listResourceUsageNextOperationSpec$1 = {
        httpMethod: "POST",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceUsageListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        OriginListResult: OriginListResult,
        Origin: Origin,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        ErrorResponse: ErrorResponse,
        OriginUpdateParameters: OriginUpdateParameters,
        Profile: Profile,
        Sku: Sku,
        ProfileUpdateParameters: ProfileUpdateParameters,
        DeepCreatedOrigin: DeepCreatedOrigin,
        Endpoint: Endpoint,
        GeoFilter: GeoFilter,
        EndpointPropertiesUpdateParametersDeliveryPolicy: EndpointPropertiesUpdateParametersDeliveryPolicy,
        DeliveryRule: DeliveryRule,
        DeliveryRuleAction: DeliveryRuleAction,
        DeliveryRuleCondition: DeliveryRuleCondition,
        EndpointUpdateParameters: EndpointUpdateParameters,
        DeliveryRuleUrlPathCondition: DeliveryRuleUrlPathCondition,
        UrlPathConditionParameters: UrlPathConditionParameters,
        DeliveryRuleUrlFileExtensionCondition: DeliveryRuleUrlFileExtensionCondition,
        UrlFileExtensionConditionParameters: UrlFileExtensionConditionParameters,
        DeliveryRuleCacheExpirationAction: DeliveryRuleCacheExpirationAction,
        CacheExpirationActionParameters: CacheExpirationActionParameters,
        ProxyResource: ProxyResource,
        CustomDomain: CustomDomain,
        EdgeNode: EdgeNode,
        IpAddressGroup: IpAddressGroup,
        CidrIpAddress: CidrIpAddress
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Origins. */
    var Origins = /** @class */ (function () {
        /**
         * Create a Origins.
         * @param {CdnManagementClientContext} client Reference to the service client.
         */
        function Origins(client) {
            this.client = client;
        }
        Origins.prototype.listByEndpoint = function (resourceGroupName$$1, profileName$$1, endpointName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                profileName: profileName$$1,
                endpointName: endpointName$$1,
                options: options
            }, listByEndpointOperationSpec, callback);
        };
        Origins.prototype.get = function (resourceGroupName$$1, profileName$$1, endpointName$$1, originName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                profileName: profileName$$1,
                endpointName: endpointName$$1,
                originName: originName$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        /**
         * Updates an existing origin within an endpoint.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param profileName Name of the CDN profile which is unique within the resource group.
         * @param endpointName Name of the endpoint under the profile which is unique globally.
         * @param originName Name of the origin which is unique within the endpoint.
         * @param originUpdateProperties Origin properties
         * @param [options] The optional parameters
         * @returns Promise<Models.OriginsUpdateResponse>
         */
        Origins.prototype.update = function (resourceGroupName$$1, profileName$$1, endpointName$$1, originName$$1, originUpdateProperties, options) {
            return this.beginUpdate(resourceGroupName$$1, profileName$$1, endpointName$$1, originName$$1, originUpdateProperties, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates an existing origin within an endpoint.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param profileName Name of the CDN profile which is unique within the resource group.
         * @param endpointName Name of the endpoint under the profile which is unique globally.
         * @param originName Name of the origin which is unique within the endpoint.
         * @param originUpdateProperties Origin properties
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Origins.prototype.beginUpdate = function (resourceGroupName$$1, profileName$$1, endpointName$$1, originName$$1, originUpdateProperties, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                profileName: profileName$$1,
                endpointName: endpointName$$1,
                originName: originName$$1,
                originUpdateProperties: originUpdateProperties,
                options: options
            }, beginUpdateOperationSpec$2, options);
        };
        Origins.prototype.listByEndpointNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByEndpointNextOperationSpec, callback);
        };
        return Origins;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$3);
    var listByEndpointOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/origins",
        urlParameters: [
            resourceGroupName,
            profileName,
            endpointName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OriginListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/origins/{originName}",
        urlParameters: [
            resourceGroupName,
            profileName,
            endpointName,
            originName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Origin
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var beginUpdateOperationSpec$2 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/origins/{originName}",
        urlParameters: [
            resourceGroupName,
            profileName,
            endpointName,
            originName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "originUpdateProperties",
            mapper: __assign({}, OriginUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Origin
            },
            202: {
                bodyMapper: Origin
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listByEndpointNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OriginListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        CustomDomainListResult: CustomDomainListResult,
        CustomDomain: CustomDomain,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        ErrorResponse: ErrorResponse,
        CustomDomainParameters: CustomDomainParameters,
        ProfileUpdateParameters: ProfileUpdateParameters,
        DeepCreatedOrigin: DeepCreatedOrigin,
        EndpointUpdateParameters: EndpointUpdateParameters,
        GeoFilter: GeoFilter,
        EndpointPropertiesUpdateParametersDeliveryPolicy: EndpointPropertiesUpdateParametersDeliveryPolicy,
        DeliveryRule: DeliveryRule,
        DeliveryRuleAction: DeliveryRuleAction,
        DeliveryRuleCondition: DeliveryRuleCondition,
        DeliveryRuleUrlPathCondition: DeliveryRuleUrlPathCondition,
        UrlPathConditionParameters: UrlPathConditionParameters,
        DeliveryRuleUrlFileExtensionCondition: DeliveryRuleUrlFileExtensionCondition,
        UrlFileExtensionConditionParameters: UrlFileExtensionConditionParameters,
        DeliveryRuleCacheExpirationAction: DeliveryRuleCacheExpirationAction,
        CacheExpirationActionParameters: CacheExpirationActionParameters,
        OriginUpdateParameters: OriginUpdateParameters,
        EdgeNode: EdgeNode,
        IpAddressGroup: IpAddressGroup,
        CidrIpAddress: CidrIpAddress,
        TrackedResource: TrackedResource,
        Profile: Profile,
        Sku: Sku,
        Endpoint: Endpoint,
        Origin: Origin
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a CustomDomains. */
    var CustomDomains = /** @class */ (function () {
        /**
         * Create a CustomDomains.
         * @param {CdnManagementClientContext} client Reference to the service client.
         */
        function CustomDomains(client) {
            this.client = client;
        }
        CustomDomains.prototype.listByEndpoint = function (resourceGroupName$$1, profileName$$1, endpointName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                profileName: profileName$$1,
                endpointName: endpointName$$1,
                options: options
            }, listByEndpointOperationSpec$1, callback);
        };
        CustomDomains.prototype.get = function (resourceGroupName$$1, profileName$$1, endpointName$$1, customDomainName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                profileName: profileName$$1,
                endpointName: endpointName$$1,
                customDomainName: customDomainName$$1,
                options: options
            }, getOperationSpec$3, callback);
        };
        /**
         * Creates a new custom domain within an endpoint.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param profileName Name of the CDN profile which is unique within the resource group.
         * @param endpointName Name of the endpoint under the profile which is unique globally.
         * @param customDomainName Name of the custom domain within an endpoint.
         * @param hostName The host name of the custom domain. Must be a domain name.
         * @param [options] The optional parameters
         * @returns Promise<Models.CustomDomainsCreateResponse>
         */
        CustomDomains.prototype.create = function (resourceGroupName$$1, profileName$$1, endpointName$$1, customDomainName$$1, hostName, options) {
            return this.beginCreate(resourceGroupName$$1, profileName$$1, endpointName$$1, customDomainName$$1, hostName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes an existing custom domain within an endpoint.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param profileName Name of the CDN profile which is unique within the resource group.
         * @param endpointName Name of the endpoint under the profile which is unique globally.
         * @param customDomainName Name of the custom domain within an endpoint.
         * @param [options] The optional parameters
         * @returns Promise<Models.CustomDomainsDeleteMethodResponse>
         */
        CustomDomains.prototype.deleteMethod = function (resourceGroupName$$1, profileName$$1, endpointName$$1, customDomainName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, profileName$$1, endpointName$$1, customDomainName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        CustomDomains.prototype.disableCustomHttps = function (resourceGroupName$$1, profileName$$1, endpointName$$1, customDomainName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                profileName: profileName$$1,
                endpointName: endpointName$$1,
                customDomainName: customDomainName$$1,
                options: options
            }, disableCustomHttpsOperationSpec, callback);
        };
        CustomDomains.prototype.enableCustomHttps = function (resourceGroupName$$1, profileName$$1, endpointName$$1, customDomainName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                profileName: profileName$$1,
                endpointName: endpointName$$1,
                customDomainName: customDomainName$$1,
                options: options
            }, enableCustomHttpsOperationSpec, callback);
        };
        /**
         * Creates a new custom domain within an endpoint.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param profileName Name of the CDN profile which is unique within the resource group.
         * @param endpointName Name of the endpoint under the profile which is unique globally.
         * @param customDomainName Name of the custom domain within an endpoint.
         * @param hostName The host name of the custom domain. Must be a domain name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        CustomDomains.prototype.beginCreate = function (resourceGroupName$$1, profileName$$1, endpointName$$1, customDomainName$$1, hostName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                profileName: profileName$$1,
                endpointName: endpointName$$1,
                customDomainName: customDomainName$$1,
                hostName: hostName,
                options: options
            }, beginCreateOperationSpec$2, options);
        };
        /**
         * Deletes an existing custom domain within an endpoint.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param profileName Name of the CDN profile which is unique within the resource group.
         * @param endpointName Name of the endpoint under the profile which is unique globally.
         * @param customDomainName Name of the custom domain within an endpoint.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        CustomDomains.prototype.beginDeleteMethod = function (resourceGroupName$$1, profileName$$1, endpointName$$1, customDomainName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                profileName: profileName$$1,
                endpointName: endpointName$$1,
                customDomainName: customDomainName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$2, options);
        };
        CustomDomains.prototype.listByEndpointNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByEndpointNextOperationSpec$1, callback);
        };
        return CustomDomains;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$4);
    var listByEndpointOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/customDomains",
        urlParameters: [
            resourceGroupName,
            profileName,
            endpointName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CustomDomainListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/customDomains/{customDomainName}",
        urlParameters: [
            resourceGroupName,
            profileName,
            endpointName,
            customDomainName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CustomDomain
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var disableCustomHttpsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/customDomains/{customDomainName}/disableCustomHttps",
        urlParameters: [
            resourceGroupName,
            profileName,
            endpointName,
            customDomainName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {
                bodyMapper: CustomDomain
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var enableCustomHttpsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/customDomains/{customDomainName}/enableCustomHttps",
        urlParameters: [
            resourceGroupName,
            profileName,
            endpointName,
            customDomainName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {
                bodyMapper: CustomDomain
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var beginCreateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/customDomains/{customDomainName}",
        urlParameters: [
            resourceGroupName,
            profileName,
            endpointName,
            customDomainName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                hostName: "hostName"
            },
            mapper: __assign({}, CustomDomainParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: CustomDomain
            },
            201: {
                bodyMapper: CustomDomain
            },
            202: {
                bodyMapper: CustomDomain
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var beginDeleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/customDomains/{customDomainName}",
        urlParameters: [
            resourceGroupName,
            profileName,
            endpointName,
            customDomainName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {
                bodyMapper: CustomDomain
            },
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var listByEndpointNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CustomDomainListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        ResourceUsageListResult: ResourceUsageListResult,
        ResourceUsage: ResourceUsage,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ResourceUsageOperations. */
    var ResourceUsageOperations = /** @class */ (function () {
        /**
         * Create a ResourceUsageOperations.
         * @param {CdnManagementClientContext} client Reference to the service client.
         */
        function ResourceUsageOperations(client) {
            this.client = client;
        }
        ResourceUsageOperations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        ResourceUsageOperations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return ResourceUsageOperations;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$5);
    var listOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Cdn/checkResourceUsage",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceUsageListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var listNextOperationSpec$1 = {
        httpMethod: "POST",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceUsageListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        OperationsListResult: OperationsListResult,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {CdnManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$2, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$2, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$6);
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "providers/Microsoft.Cdn/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var listNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$7 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        EdgenodeResult: EdgenodeResult,
        EdgeNode: EdgeNode,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        IpAddressGroup: IpAddressGroup,
        CidrIpAddress: CidrIpAddress,
        ErrorResponse: ErrorResponse,
        ProfileUpdateParameters: ProfileUpdateParameters,
        DeepCreatedOrigin: DeepCreatedOrigin,
        EndpointUpdateParameters: EndpointUpdateParameters,
        GeoFilter: GeoFilter,
        EndpointPropertiesUpdateParametersDeliveryPolicy: EndpointPropertiesUpdateParametersDeliveryPolicy,
        DeliveryRule: DeliveryRule,
        DeliveryRuleAction: DeliveryRuleAction,
        DeliveryRuleCondition: DeliveryRuleCondition,
        DeliveryRuleUrlPathCondition: DeliveryRuleUrlPathCondition,
        UrlPathConditionParameters: UrlPathConditionParameters,
        DeliveryRuleUrlFileExtensionCondition: DeliveryRuleUrlFileExtensionCondition,
        UrlFileExtensionConditionParameters: UrlFileExtensionConditionParameters,
        DeliveryRuleCacheExpirationAction: DeliveryRuleCacheExpirationAction,
        CacheExpirationActionParameters: CacheExpirationActionParameters,
        OriginUpdateParameters: OriginUpdateParameters,
        CustomDomain: CustomDomain,
        TrackedResource: TrackedResource,
        Profile: Profile,
        Sku: Sku,
        Endpoint: Endpoint,
        Origin: Origin
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a EdgeNodes. */
    var EdgeNodes = /** @class */ (function () {
        /**
         * Create a EdgeNodes.
         * @param {CdnManagementClientContext} client Reference to the service client.
         */
        function EdgeNodes(client) {
            this.client = client;
        }
        EdgeNodes.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$3, callback);
        };
        EdgeNodes.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$3, callback);
        };
        return EdgeNodes;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$7);
    var listOperationSpec$3 = {
        httpMethod: "GET",
        path: "providers/Microsoft.Cdn/edgenodes",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EdgenodeResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };
    var listNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EdgenodeResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-cdn";
    var packageVersion = "1.0.0";
    var CdnManagementClientContext = /** @class */ (function (_super) {
        __extends(CdnManagementClientContext, _super);
        /**
         * Initializes a new instance of the CdnManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Azure Subscription ID.
         * @param [options] The parameter options
         */
        function CdnManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2017-10-12';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return CdnManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CdnManagementClient = /** @class */ (function (_super) {
        __extends(CdnManagementClient, _super);
        /**
         * Initializes a new instance of the CdnManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Azure Subscription ID.
         * @param [options] The parameter options
         */
        function CdnManagementClient(credentials, subscriptionId$$1, options) {
            var _this = _super.call(this, credentials, subscriptionId$$1, options) || this;
            _this.profiles = new Profiles(_this);
            _this.endpoints = new Endpoints(_this);
            _this.origins = new Origins(_this);
            _this.customDomains = new CustomDomains(_this);
            _this.resourceUsage = new ResourceUsageOperations(_this);
            _this.operations = new Operations(_this);
            _this.edgeNodes = new EdgeNodes(_this);
            return _this;
        }
        CdnManagementClient.prototype.checkNameAvailability = function (name, options, callback) {
            return this.sendOperationRequest({
                name: name,
                options: options
            }, checkNameAvailabilityOperationSpec, callback);
        };
        CdnManagementClient.prototype.checkNameAvailabilityWithSubscription = function (name, options, callback) {
            return this.sendOperationRequest({
                name: name,
                options: options
            }, checkNameAvailabilityWithSubscriptionOperationSpec, callback);
        };
        CdnManagementClient.prototype.validateProbe = function (probeURL, options, callback) {
            return this.sendOperationRequest({
                probeURL: probeURL,
                options: options
            }, validateProbeOperationSpec, callback);
        };
        return CdnManagementClient;
    }(CdnManagementClientContext));
    // Operation Specifications
    var serializer$7 = new msRest.Serializer(Mappers);
    var checkNameAvailabilityOperationSpec = {
        httpMethod: "POST",
        path: "providers/Microsoft.Cdn/checkNameAvailability",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                name: "name"
            },
            mapper: __assign({}, CheckNameAvailabilityInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: CheckNameAvailabilityOutput
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };
    var checkNameAvailabilityWithSubscriptionOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Cdn/checkNameAvailability",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                name: "name"
            },
            mapper: __assign({}, CheckNameAvailabilityInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: CheckNameAvailabilityOutput
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };
    var validateProbeOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Cdn/validateProbe",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                probeURL: "probeURL"
            },
            mapper: __assign({}, ValidateProbeInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ValidateProbeOutput
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };

    exports.CdnManagementClient = CdnManagementClient;
    exports.CdnManagementClientContext = CdnManagementClientContext;
    exports.CdnManagementModels = index;
    exports.CdnManagementMappers = Mappers;
    exports.Profiles = Profiles;
    exports.Endpoints = Endpoints;
    exports.Origins = Origins;
    exports.CustomDomains = CustomDomains;
    exports.ResourceUsageOperations = ResourceUsageOperations;
    exports.Operations = Operations;
    exports.EdgeNodes = EdgeNodes;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-cdn.js.map
