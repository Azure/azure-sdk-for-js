/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmKeyvault = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for SkuName.
     * Possible values include: 'standard', 'premium'
     * @readonly
     * @enum {string}
     */
    var SkuName;
    (function (SkuName) {
        SkuName["Standard"] = "standard";
        SkuName["Premium"] = "premium";
    })(SkuName || (SkuName = {}));
    /**
     * Defines values for KeyPermissions.
     * Possible values include: 'encrypt', 'decrypt', 'wrapKey', 'unwrapKey',
     * 'sign', 'verify', 'get', 'list', 'create', 'update', 'import', 'delete',
     * 'backup', 'restore', 'recover', 'purge'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: KeyPermissions =
     * <KeyPermissions>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var KeyPermissions;
    (function (KeyPermissions) {
        KeyPermissions["Encrypt"] = "encrypt";
        KeyPermissions["Decrypt"] = "decrypt";
        KeyPermissions["WrapKey"] = "wrapKey";
        KeyPermissions["UnwrapKey"] = "unwrapKey";
        KeyPermissions["Sign"] = "sign";
        KeyPermissions["Verify"] = "verify";
        KeyPermissions["Get"] = "get";
        KeyPermissions["List"] = "list";
        KeyPermissions["Create"] = "create";
        KeyPermissions["Update"] = "update";
        KeyPermissions["Import"] = "import";
        KeyPermissions["Delete"] = "delete";
        KeyPermissions["Backup"] = "backup";
        KeyPermissions["Restore"] = "restore";
        KeyPermissions["Recover"] = "recover";
        KeyPermissions["Purge"] = "purge";
    })(KeyPermissions || (KeyPermissions = {}));
    /**
     * Defines values for SecretPermissions.
     * Possible values include: 'get', 'list', 'set', 'delete', 'backup',
     * 'restore', 'recover', 'purge'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SecretPermissions =
     * <SecretPermissions>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SecretPermissions;
    (function (SecretPermissions) {
        SecretPermissions["Get"] = "get";
        SecretPermissions["List"] = "list";
        SecretPermissions["Set"] = "set";
        SecretPermissions["Delete"] = "delete";
        SecretPermissions["Backup"] = "backup";
        SecretPermissions["Restore"] = "restore";
        SecretPermissions["Recover"] = "recover";
        SecretPermissions["Purge"] = "purge";
    })(SecretPermissions || (SecretPermissions = {}));
    /**
     * Defines values for CertificatePermissions.
     * Possible values include: 'get', 'list', 'delete', 'create', 'import',
     * 'update', 'managecontacts', 'getissuers', 'listissuers', 'setissuers',
     * 'deleteissuers', 'manageissuers', 'recover', 'purge', 'backup', 'restore'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: CertificatePermissions =
     * <CertificatePermissions>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var CertificatePermissions;
    (function (CertificatePermissions) {
        CertificatePermissions["Get"] = "get";
        CertificatePermissions["List"] = "list";
        CertificatePermissions["Delete"] = "delete";
        CertificatePermissions["Create"] = "create";
        CertificatePermissions["Import"] = "import";
        CertificatePermissions["Update"] = "update";
        CertificatePermissions["Managecontacts"] = "managecontacts";
        CertificatePermissions["Getissuers"] = "getissuers";
        CertificatePermissions["Listissuers"] = "listissuers";
        CertificatePermissions["Setissuers"] = "setissuers";
        CertificatePermissions["Deleteissuers"] = "deleteissuers";
        CertificatePermissions["Manageissuers"] = "manageissuers";
        CertificatePermissions["Recover"] = "recover";
        CertificatePermissions["Purge"] = "purge";
        CertificatePermissions["Backup"] = "backup";
        CertificatePermissions["Restore"] = "restore";
    })(CertificatePermissions || (CertificatePermissions = {}));
    /**
     * Defines values for StoragePermissions.
     * Possible values include: 'get', 'list', 'delete', 'set', 'update',
     * 'regeneratekey', 'recover', 'purge', 'backup', 'restore', 'setsas',
     * 'listsas', 'getsas', 'deletesas'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: StoragePermissions =
     * <StoragePermissions>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var StoragePermissions;
    (function (StoragePermissions) {
        StoragePermissions["Get"] = "get";
        StoragePermissions["List"] = "list";
        StoragePermissions["Delete"] = "delete";
        StoragePermissions["Set"] = "set";
        StoragePermissions["Update"] = "update";
        StoragePermissions["Regeneratekey"] = "regeneratekey";
        StoragePermissions["Recover"] = "recover";
        StoragePermissions["Purge"] = "purge";
        StoragePermissions["Backup"] = "backup";
        StoragePermissions["Restore"] = "restore";
        StoragePermissions["Setsas"] = "setsas";
        StoragePermissions["Listsas"] = "listsas";
        StoragePermissions["Getsas"] = "getsas";
        StoragePermissions["Deletesas"] = "deletesas";
    })(StoragePermissions || (StoragePermissions = {}));
    /**
     * Defines values for CreateMode.
     * Possible values include: 'recover', 'default'
     * @readonly
     * @enum {string}
     */
    var CreateMode;
    (function (CreateMode) {
        CreateMode["Recover"] = "recover";
        CreateMode["Default"] = "default";
    })(CreateMode || (CreateMode = {}));
    /**
     * Defines values for NetworkRuleBypassOptions.
     * Possible values include: 'AzureServices', 'None'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: NetworkRuleBypassOptions =
     * <NetworkRuleBypassOptions>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var NetworkRuleBypassOptions;
    (function (NetworkRuleBypassOptions) {
        NetworkRuleBypassOptions["AzureServices"] = "AzureServices";
        NetworkRuleBypassOptions["None"] = "None";
    })(NetworkRuleBypassOptions || (NetworkRuleBypassOptions = {}));
    /**
     * Defines values for NetworkRuleAction.
     * Possible values include: 'Allow', 'Deny'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: NetworkRuleAction =
     * <NetworkRuleAction>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var NetworkRuleAction;
    (function (NetworkRuleAction) {
        NetworkRuleAction["Allow"] = "Allow";
        NetworkRuleAction["Deny"] = "Deny";
    })(NetworkRuleAction || (NetworkRuleAction = {}));
    /**
     * Defines values for Reason.
     * Possible values include: 'AccountNameInvalid', 'AlreadyExists'
     * @readonly
     * @enum {string}
     */
    var Reason;
    (function (Reason) {
        Reason["AccountNameInvalid"] = "AccountNameInvalid";
        Reason["AlreadyExists"] = "AlreadyExists";
    })(Reason || (Reason = {}));
    /**
     * Defines values for AccessPolicyUpdateKind.
     * Possible values include: 'add', 'replace', 'remove'
     * @readonly
     * @enum {string}
     */
    var AccessPolicyUpdateKind;
    (function (AccessPolicyUpdateKind) {
        AccessPolicyUpdateKind["Add"] = "add";
        AccessPolicyUpdateKind["Replace"] = "replace";
        AccessPolicyUpdateKind["Remove"] = "remove";
    })(AccessPolicyUpdateKind || (AccessPolicyUpdateKind = {}));

    var index = /*#__PURE__*/Object.freeze({
        get SkuName () { return SkuName; },
        get KeyPermissions () { return KeyPermissions; },
        get SecretPermissions () { return SecretPermissions; },
        get CertificatePermissions () { return CertificatePermissions; },
        get StoragePermissions () { return StoragePermissions; },
        get CreateMode () { return CreateMode; },
        get NetworkRuleBypassOptions () { return NetworkRuleBypassOptions; },
        get NetworkRuleAction () { return NetworkRuleAction; },
        get Reason () { return Reason; },
        get AccessPolicyUpdateKind () { return AccessPolicyUpdateKind; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var Sku = {
        serializedName: "Sku",
        type: {
            name: "Composite",
            className: "Sku",
            modelProperties: {
                family: {
                    required: true,
                    isConstant: true,
                    serializedName: "family",
                    defaultValue: 'A',
                    type: {
                        name: "String"
                    }
                },
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "standard",
                            "premium"
                        ]
                    }
                }
            }
        }
    };
    var Permissions = {
        serializedName: "Permissions",
        type: {
            name: "Composite",
            className: "Permissions",
            modelProperties: {
                keys: {
                    serializedName: "keys",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                secrets: {
                    serializedName: "secrets",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                certificates: {
                    serializedName: "certificates",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                storage: {
                    serializedName: "storage",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var AccessPolicyEntry = {
        serializedName: "AccessPolicyEntry",
        type: {
            name: "Composite",
            className: "AccessPolicyEntry",
            modelProperties: {
                tenantId: {
                    required: true,
                    serializedName: "tenantId",
                    type: {
                        name: "Uuid"
                    }
                },
                objectId: {
                    required: true,
                    serializedName: "objectId",
                    type: {
                        name: "String"
                    }
                },
                applicationId: {
                    serializedName: "applicationId",
                    type: {
                        name: "Uuid"
                    }
                },
                permissions: {
                    required: true,
                    serializedName: "permissions",
                    type: {
                        name: "Composite",
                        className: "Permissions"
                    }
                }
            }
        }
    };
    var IPRule = {
        serializedName: "IPRule",
        type: {
            name: "Composite",
            className: "IPRule",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualNetworkRule = {
        serializedName: "VirtualNetworkRule",
        type: {
            name: "Composite",
            className: "VirtualNetworkRule",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NetworkRuleSet = {
        serializedName: "NetworkRuleSet",
        type: {
            name: "Composite",
            className: "NetworkRuleSet",
            modelProperties: {
                bypass: {
                    serializedName: "bypass",
                    type: {
                        name: "String"
                    }
                },
                defaultAction: {
                    serializedName: "defaultAction",
                    type: {
                        name: "String"
                    }
                },
                ipRules: {
                    serializedName: "ipRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IPRule"
                            }
                        }
                    }
                },
                virtualNetworkRules: {
                    serializedName: "virtualNetworkRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualNetworkRule"
                            }
                        }
                    }
                }
            }
        }
    };
    var VaultProperties = {
        serializedName: "VaultProperties",
        type: {
            name: "Composite",
            className: "VaultProperties",
            modelProperties: {
                tenantId: {
                    required: true,
                    serializedName: "tenantId",
                    type: {
                        name: "Uuid"
                    }
                },
                sku: {
                    required: true,
                    serializedName: "sku",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                },
                accessPolicies: {
                    serializedName: "accessPolicies",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AccessPolicyEntry"
                            }
                        }
                    }
                },
                vaultUri: {
                    serializedName: "vaultUri",
                    type: {
                        name: "String"
                    }
                },
                enabledForDeployment: {
                    serializedName: "enabledForDeployment",
                    type: {
                        name: "Boolean"
                    }
                },
                enabledForDiskEncryption: {
                    serializedName: "enabledForDiskEncryption",
                    type: {
                        name: "Boolean"
                    }
                },
                enabledForTemplateDeployment: {
                    serializedName: "enabledForTemplateDeployment",
                    type: {
                        name: "Boolean"
                    }
                },
                enableSoftDelete: {
                    serializedName: "enableSoftDelete",
                    type: {
                        name: "Boolean"
                    }
                },
                createMode: {
                    serializedName: "createMode",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "recover",
                            "default"
                        ]
                    }
                },
                enablePurgeProtection: {
                    serializedName: "enablePurgeProtection",
                    type: {
                        name: "Boolean"
                    }
                },
                networkAcls: {
                    serializedName: "networkAcls",
                    type: {
                        name: "Composite",
                        className: "NetworkRuleSet"
                    }
                }
            }
        }
    };
    var VaultPatchProperties = {
        serializedName: "VaultPatchProperties",
        type: {
            name: "Composite",
            className: "VaultPatchProperties",
            modelProperties: {
                tenantId: {
                    serializedName: "tenantId",
                    type: {
                        name: "Uuid"
                    }
                },
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                },
                accessPolicies: {
                    serializedName: "accessPolicies",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AccessPolicyEntry"
                            }
                        }
                    }
                },
                enabledForDeployment: {
                    serializedName: "enabledForDeployment",
                    type: {
                        name: "Boolean"
                    }
                },
                enabledForDiskEncryption: {
                    serializedName: "enabledForDiskEncryption",
                    type: {
                        name: "Boolean"
                    }
                },
                enabledForTemplateDeployment: {
                    serializedName: "enabledForTemplateDeployment",
                    type: {
                        name: "Boolean"
                    }
                },
                enableSoftDelete: {
                    serializedName: "enableSoftDelete",
                    type: {
                        name: "Boolean"
                    }
                },
                createMode: {
                    serializedName: "createMode",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "recover",
                            "default"
                        ]
                    }
                },
                enablePurgeProtection: {
                    serializedName: "enablePurgeProtection",
                    type: {
                        name: "Boolean"
                    }
                },
                networkAcls: {
                    serializedName: "networkAcls",
                    type: {
                        name: "Composite",
                        className: "NetworkRuleSet"
                    }
                }
            }
        }
    };
    var VaultAccessPolicyProperties = {
        serializedName: "VaultAccessPolicyProperties",
        type: {
            name: "Composite",
            className: "VaultAccessPolicyProperties",
            modelProperties: {
                accessPolicies: {
                    required: true,
                    serializedName: "accessPolicies",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AccessPolicyEntry"
                            }
                        }
                    }
                }
            }
        }
    };
    var DeletedVaultProperties = {
        serializedName: "DeletedVaultProperties",
        type: {
            name: "Composite",
            className: "DeletedVaultProperties",
            modelProperties: {
                vaultId: {
                    readOnly: true,
                    serializedName: "vaultId",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                deletionDate: {
                    readOnly: true,
                    serializedName: "deletionDate",
                    type: {
                        name: "DateTime"
                    }
                },
                scheduledPurgeDate: {
                    readOnly: true,
                    serializedName: "scheduledPurgeDate",
                    type: {
                        name: "DateTime"
                    }
                },
                tags: {
                    readOnly: true,
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var VaultCreateOrUpdateParameters = {
        serializedName: "VaultCreateOrUpdateParameters",
        type: {
            name: "Composite",
            className: "VaultCreateOrUpdateParameters",
            modelProperties: {
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                properties: {
                    required: true,
                    serializedName: "properties",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "VaultProperties"
                    }
                }
            }
        }
    };
    var VaultPatchParameters = {
        serializedName: "VaultPatchParameters",
        type: {
            name: "Composite",
            className: "VaultPatchParameters",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "VaultPatchProperties"
                    }
                }
            }
        }
    };
    var VaultAccessPolicyParameters = {
        serializedName: "VaultAccessPolicyParameters",
        type: {
            name: "Composite",
            className: "VaultAccessPolicyParameters",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    required: true,
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "VaultAccessPolicyProperties"
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var Vault = {
        serializedName: "Vault",
        type: {
            name: "Composite",
            className: "Vault",
            modelProperties: __assign({}, Resource.type.modelProperties, { properties: {
                    required: true,
                    serializedName: "properties",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "VaultProperties"
                    }
                } })
        }
    };
    var DeletedVault = {
        serializedName: "DeletedVault",
        type: {
            name: "Composite",
            className: "DeletedVault",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "DeletedVaultProperties"
                    }
                }
            }
        }
    };
    var VaultCheckNameAvailabilityParameters = {
        serializedName: "VaultCheckNameAvailabilityParameters",
        type: {
            name: "Composite",
            className: "VaultCheckNameAvailabilityParameters",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    isConstant: true,
                    serializedName: "type",
                    defaultValue: 'Microsoft.KeyVault/vaults',
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CheckNameAvailabilityResult = {
        serializedName: "CheckNameAvailabilityResult",
        type: {
            name: "Composite",
            className: "CheckNameAvailabilityResult",
            modelProperties: {
                nameAvailable: {
                    readOnly: true,
                    serializedName: "nameAvailable",
                    type: {
                        name: "Boolean"
                    }
                },
                reason: {
                    readOnly: true,
                    serializedName: "reason",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "AccountNameInvalid",
                            "AlreadyExists"
                        ]
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LogSpecification = {
        serializedName: "LogSpecification",
        type: {
            name: "Composite",
            className: "LogSpecification",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                blobDuration: {
                    serializedName: "blobDuration",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServiceSpecification = {
        serializedName: "ServiceSpecification",
        type: {
            name: "Composite",
            className: "ServiceSpecification",
            modelProperties: {
                logSpecifications: {
                    serializedName: "logSpecifications",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LogSpecification"
                            }
                        }
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                },
                origin: {
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                },
                serviceSpecification: {
                    serializedName: "properties.serviceSpecification",
                    type: {
                        name: "Composite",
                        className: "ServiceSpecification"
                    }
                }
            }
        }
    };
    var VaultListResult = {
        serializedName: "VaultListResult",
        type: {
            name: "Composite",
            className: "VaultListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Vault"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DeletedVaultListResult = {
        serializedName: "DeletedVaultListResult",
        type: {
            name: "Composite",
            className: "DeletedVaultListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DeletedVault"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceListResult = {
        serializedName: "ResourceListResult",
        type: {
            name: "Composite",
            className: "ResourceListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Resource"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        Sku: Sku,
        Permissions: Permissions,
        AccessPolicyEntry: AccessPolicyEntry,
        IPRule: IPRule,
        VirtualNetworkRule: VirtualNetworkRule,
        NetworkRuleSet: NetworkRuleSet,
        VaultProperties: VaultProperties,
        VaultPatchProperties: VaultPatchProperties,
        VaultAccessPolicyProperties: VaultAccessPolicyProperties,
        DeletedVaultProperties: DeletedVaultProperties,
        VaultCreateOrUpdateParameters: VaultCreateOrUpdateParameters,
        VaultPatchParameters: VaultPatchParameters,
        VaultAccessPolicyParameters: VaultAccessPolicyParameters,
        Resource: Resource,
        Vault: Vault,
        DeletedVault: DeletedVault,
        VaultCheckNameAvailabilityParameters: VaultCheckNameAvailabilityParameters,
        CheckNameAvailabilityResult: CheckNameAvailabilityResult,
        OperationDisplay: OperationDisplay,
        LogSpecification: LogSpecification,
        ServiceSpecification: ServiceSpecification,
        Operation: Operation,
        VaultListResult: VaultListResult,
        DeletedVaultListResult: DeletedVaultListResult,
        ResourceListResult: ResourceListResult,
        OperationListResult: OperationListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        VaultCreateOrUpdateParameters: VaultCreateOrUpdateParameters,
        BaseResource: BaseResource,
        VaultProperties: VaultProperties,
        Sku: Sku,
        AccessPolicyEntry: AccessPolicyEntry,
        Permissions: Permissions,
        NetworkRuleSet: NetworkRuleSet,
        IPRule: IPRule,
        VirtualNetworkRule: VirtualNetworkRule,
        Vault: Vault,
        Resource: Resource,
        CloudError: CloudError,
        VaultPatchParameters: VaultPatchParameters,
        VaultPatchProperties: VaultPatchProperties,
        VaultAccessPolicyParameters: VaultAccessPolicyParameters,
        VaultAccessPolicyProperties: VaultAccessPolicyProperties,
        VaultListResult: VaultListResult,
        DeletedVaultListResult: DeletedVaultListResult,
        DeletedVault: DeletedVault,
        DeletedVaultProperties: DeletedVaultProperties,
        ResourceListResult: ResourceListResult,
        VaultCheckNameAvailabilityParameters: VaultCheckNameAvailabilityParameters,
        CheckNameAvailabilityResult: CheckNameAvailabilityResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion0 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var apiVersion1 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2015-11-01',
            type: {
                name: "String"
            }
        }
    };
    var filter = {
        parameterPath: "filter",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "$filter",
            defaultValue: 'resourceType eq \'Microsoft.KeyVault/vaults\'',
            type: {
                name: "String"
            }
        }
    };
    var location = {
        parameterPath: "location",
        mapper: {
            required: true,
            serializedName: "location",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var operationKind = {
        parameterPath: "operationKind",
        mapper: {
            required: true,
            serializedName: "operationKind",
            type: {
                name: "Enum",
                allowedValues: [
                    "add",
                    "replace",
                    "remove"
                ]
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var top = {
        parameterPath: [
            "options",
            "top"
        ],
        mapper: {
            serializedName: "$top",
            type: {
                name: "Number"
            }
        }
    };
    var vaultName0 = {
        parameterPath: "vaultName",
        mapper: {
            required: true,
            serializedName: "vaultName",
            constraints: {
                Pattern: /^[a-zA-Z0-9-]{3,24}$/
            },
            type: {
                name: "String"
            }
        }
    };
    var vaultName1 = {
        parameterPath: "vaultName",
        mapper: {
            required: true,
            serializedName: "vaultName",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Vaults. */
    var Vaults = /** @class */ (function () {
        /**
         * Create a Vaults.
         * @param {KeyVaultManagementClientContext} client Reference to the service client.
         */
        function Vaults(client) {
            this.client = client;
        }
        /**
         * Create or update a key vault in the specified subscription.
         * @param resourceGroupName The name of the Resource Group to which the server belongs.
         * @param vaultName Name of the vault
         * @param parameters Parameters to create or update the vault
         * @param [options] The optional parameters
         * @returns Promise<Models.VaultsCreateOrUpdateResponse>
         */
        Vaults.prototype.createOrUpdate = function (resourceGroupName$$1, vaultName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, vaultName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Vaults.prototype.update = function (resourceGroupName$$1, vaultName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                vaultName: vaultName,
                parameters: parameters,
                options: options
            }, updateOperationSpec, callback);
        };
        Vaults.prototype.deleteMethod = function (resourceGroupName$$1, vaultName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                vaultName: vaultName,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        Vaults.prototype.get = function (resourceGroupName$$1, vaultName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                vaultName: vaultName,
                options: options
            }, getOperationSpec, callback);
        };
        Vaults.prototype.updateAccessPolicy = function (resourceGroupName$$1, vaultName, operationKind$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                vaultName: vaultName,
                operationKind: operationKind$$1,
                parameters: parameters,
                options: options
            }, updateAccessPolicyOperationSpec, callback);
        };
        Vaults.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        Vaults.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec, callback);
        };
        Vaults.prototype.listDeleted = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listDeletedOperationSpec, callback);
        };
        Vaults.prototype.getDeleted = function (vaultName, location$$1, options, callback) {
            return this.client.sendOperationRequest({
                vaultName: vaultName,
                location: location$$1,
                options: options
            }, getDeletedOperationSpec, callback);
        };
        /**
         * Permanently deletes the specified vault. aka Purges the deleted Azure key vault.
         * @param vaultName The name of the soft-deleted vault.
         * @param location The location of the soft-deleted vault.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Vaults.prototype.purgeDeleted = function (vaultName, location$$1, options) {
            return this.beginPurgeDeleted(vaultName, location$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Vaults.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Vaults.prototype.checkNameAvailability = function (vaultName, options, callback) {
            return this.client.sendOperationRequest({
                vaultName: vaultName,
                options: options
            }, checkNameAvailabilityOperationSpec, callback);
        };
        /**
         * Create or update a key vault in the specified subscription.
         * @param resourceGroupName The name of the Resource Group to which the server belongs.
         * @param vaultName Name of the vault
         * @param parameters Parameters to create or update the vault
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Vaults.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, vaultName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vaultName: vaultName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        /**
         * Permanently deletes the specified vault. aka Purges the deleted Azure key vault.
         * @param vaultName The name of the soft-deleted vault.
         * @param location The location of the soft-deleted vault.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Vaults.prototype.beginPurgeDeleted = function (vaultName, location$$1, options) {
            return this.client.sendLRORequest({
                vaultName: vaultName,
                location: location$$1,
                options: options
            }, beginPurgeDeletedOperationSpec, options);
        };
        Vaults.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        Vaults.prototype.listBySubscriptionNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listBySubscriptionNextOperationSpec, callback);
        };
        Vaults.prototype.listDeletedNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listDeletedNextOperationSpec, callback);
        };
        Vaults.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Vaults;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}",
        urlParameters: [
            resourceGroupName,
            vaultName0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, VaultPatchParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Vault
            },
            201: {
                bodyMapper: Vault
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}",
        urlParameters: [
            resourceGroupName,
            vaultName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}",
        urlParameters: [
            resourceGroupName,
            vaultName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Vault
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var updateAccessPolicyOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/accessPolicies/{operationKind}",
        urlParameters: [
            resourceGroupName,
            vaultName0,
            operationKind,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, VaultAccessPolicyParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VaultAccessPolicyParameters
            },
            201: {
                bodyMapper: VaultAccessPolicyParameters
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            top,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VaultListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listBySubscriptionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/vaults",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            top,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VaultListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listDeletedOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/deletedVaults",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeletedVaultListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var getDeletedOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/locations/{location}/deletedVaults/{vaultName}",
        urlParameters: [
            vaultName1,
            location,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeletedVault
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resources",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            filter,
            top,
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var checkNameAvailabilityOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/checkNameAvailability",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "vaultName",
            mapper: __assign({}, VaultCheckNameAvailabilityParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: CheckNameAvailabilityResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}",
        urlParameters: [
            resourceGroupName,
            vaultName0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, VaultCreateOrUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Vault
            },
            201: {
                bodyMapper: Vault
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginPurgeDeletedOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/locations/{location}/deletedVaults/{vaultName}/purge",
        urlParameters: [
            vaultName1,
            location,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VaultListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listBySubscriptionNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VaultListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listDeletedNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeletedVaultListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        OperationListResult: OperationListResult,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        ServiceSpecification: ServiceSpecification,
        LogSpecification: LogSpecification,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {KeyVaultManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.KeyVault/operations",
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-keyvault";
    var packageVersion = "1.0.0";
    var KeyVaultManagementClientContext = /** @class */ (function (_super) {
        __extends(KeyVaultManagementClientContext, _super);
        /**
         * Initializes a new instance of the KeyVaultManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function KeyVaultManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2018-02-14';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return KeyVaultManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var KeyVaultManagementClient = /** @class */ (function (_super) {
        __extends(KeyVaultManagementClient, _super);
        /**
         * Initializes a new instance of the KeyVaultManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function KeyVaultManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.vaults = new Vaults(_this);
            _this.operations = new Operations(_this);
            return _this;
        }
        return KeyVaultManagementClient;
    }(KeyVaultManagementClientContext));

    exports.KeyVaultManagementClient = KeyVaultManagementClient;
    exports.KeyVaultManagementClientContext = KeyVaultManagementClientContext;
    exports.KeyVaultManagementModels = index;
    exports.KeyVaultManagementMappers = mappers;
    exports.Vaults = Vaults;
    exports.Operations = Operations;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-keyvault.js.map
