/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmReservations = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for ReservationStatusCode.
     * Possible values include: 'None', 'Pending', 'Active', 'PurchaseError',
     * 'PaymentInstrumentError', 'Split', 'Merged', 'Expired', 'Succeeded'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ReservationStatusCode =
     * <ReservationStatusCode>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ReservationStatusCode;
    (function (ReservationStatusCode) {
        ReservationStatusCode["None"] = "None";
        ReservationStatusCode["Pending"] = "Pending";
        ReservationStatusCode["Active"] = "Active";
        ReservationStatusCode["PurchaseError"] = "PurchaseError";
        ReservationStatusCode["PaymentInstrumentError"] = "PaymentInstrumentError";
        ReservationStatusCode["Split"] = "Split";
        ReservationStatusCode["Merged"] = "Merged";
        ReservationStatusCode["Expired"] = "Expired";
        ReservationStatusCode["Succeeded"] = "Succeeded";
    })(ReservationStatusCode || (ReservationStatusCode = {}));
    /**
     * Defines values for ErrorResponseCode.
     * Possible values include: 'NotSpecified', 'InternalServerError',
     * 'ServerTimeout', 'AuthorizationFailed', 'BadRequest',
     * 'ClientCertificateThumbprintNotSet', 'InvalidRequestContent',
     * 'OperationFailed', 'HttpMethodNotSupported', 'InvalidRequestUri',
     * 'MissingTenantId', 'InvalidTenantId', 'InvalidReservationOrderId',
     * 'InvalidReservationId', 'ReservationIdNotInReservationOrder',
     * 'ReservationOrderNotFound', 'InvalidSubscriptionId', 'InvalidAccessToken',
     * 'InvalidLocationId', 'UnauthenticatedRequestsThrottled',
     * 'InvalidHealthCheckType', 'Forbidden', 'BillingScopeIdCannotBeChanged',
     * 'AppliedScopesNotAssociatedWithCommerceAccount',
     * 'PatchValuesSameAsExisting', 'RoleAssignmentCreationFailed',
     * 'ReservationOrderCreationFailed', 'ReservationOrderNotEnabled',
     * 'CapacityUpdateScopesFailed', 'UnsupportedReservationTerm',
     * 'ReservationOrderIdAlreadyExists', 'RiskCheckFailed', 'CreateQuoteFailed',
     * 'ActivateQuoteFailed', 'NonsupportedAccountId', 'PaymentInstrumentNotFound',
     * 'MissingAppliedScopesForSingle', 'NoValidReservationsToReRate',
     * 'ReRateOnlyAllowedForEA', 'OperationCannotBePerformedInCurrentState',
     * 'InvalidSingleAppliedScopesCount', 'InvalidFulfillmentRequestParameters',
     * 'NotSupportedCountry', 'InvalidRefundQuantity', 'PurchaseError',
     * 'BillingCustomerInputError', 'BillingPaymentInstrumentSoftError',
     * 'BillingPaymentInstrumentHardError', 'BillingTransientError',
     * 'BillingError', 'FulfillmentConfigurationError',
     * 'FulfillmentOutOfStockError', 'FulfillmentTransientError',
     * 'FulfillmentError', 'CalculatePriceFailed'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ErrorResponseCode =
     * <ErrorResponseCode>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ErrorResponseCode;
    (function (ErrorResponseCode) {
        ErrorResponseCode["NotSpecified"] = "NotSpecified";
        ErrorResponseCode["InternalServerError"] = "InternalServerError";
        ErrorResponseCode["ServerTimeout"] = "ServerTimeout";
        ErrorResponseCode["AuthorizationFailed"] = "AuthorizationFailed";
        ErrorResponseCode["BadRequest"] = "BadRequest";
        ErrorResponseCode["ClientCertificateThumbprintNotSet"] = "ClientCertificateThumbprintNotSet";
        ErrorResponseCode["InvalidRequestContent"] = "InvalidRequestContent";
        ErrorResponseCode["OperationFailed"] = "OperationFailed";
        ErrorResponseCode["HttpMethodNotSupported"] = "HttpMethodNotSupported";
        ErrorResponseCode["InvalidRequestUri"] = "InvalidRequestUri";
        ErrorResponseCode["MissingTenantId"] = "MissingTenantId";
        ErrorResponseCode["InvalidTenantId"] = "InvalidTenantId";
        ErrorResponseCode["InvalidReservationOrderId"] = "InvalidReservationOrderId";
        ErrorResponseCode["InvalidReservationId"] = "InvalidReservationId";
        ErrorResponseCode["ReservationIdNotInReservationOrder"] = "ReservationIdNotInReservationOrder";
        ErrorResponseCode["ReservationOrderNotFound"] = "ReservationOrderNotFound";
        ErrorResponseCode["InvalidSubscriptionId"] = "InvalidSubscriptionId";
        ErrorResponseCode["InvalidAccessToken"] = "InvalidAccessToken";
        ErrorResponseCode["InvalidLocationId"] = "InvalidLocationId";
        ErrorResponseCode["UnauthenticatedRequestsThrottled"] = "UnauthenticatedRequestsThrottled";
        ErrorResponseCode["InvalidHealthCheckType"] = "InvalidHealthCheckType";
        ErrorResponseCode["Forbidden"] = "Forbidden";
        ErrorResponseCode["BillingScopeIdCannotBeChanged"] = "BillingScopeIdCannotBeChanged";
        ErrorResponseCode["AppliedScopesNotAssociatedWithCommerceAccount"] = "AppliedScopesNotAssociatedWithCommerceAccount";
        ErrorResponseCode["PatchValuesSameAsExisting"] = "PatchValuesSameAsExisting";
        ErrorResponseCode["RoleAssignmentCreationFailed"] = "RoleAssignmentCreationFailed";
        ErrorResponseCode["ReservationOrderCreationFailed"] = "ReservationOrderCreationFailed";
        ErrorResponseCode["ReservationOrderNotEnabled"] = "ReservationOrderNotEnabled";
        ErrorResponseCode["CapacityUpdateScopesFailed"] = "CapacityUpdateScopesFailed";
        ErrorResponseCode["UnsupportedReservationTerm"] = "UnsupportedReservationTerm";
        ErrorResponseCode["ReservationOrderIdAlreadyExists"] = "ReservationOrderIdAlreadyExists";
        ErrorResponseCode["RiskCheckFailed"] = "RiskCheckFailed";
        ErrorResponseCode["CreateQuoteFailed"] = "CreateQuoteFailed";
        ErrorResponseCode["ActivateQuoteFailed"] = "ActivateQuoteFailed";
        ErrorResponseCode["NonsupportedAccountId"] = "NonsupportedAccountId";
        ErrorResponseCode["PaymentInstrumentNotFound"] = "PaymentInstrumentNotFound";
        ErrorResponseCode["MissingAppliedScopesForSingle"] = "MissingAppliedScopesForSingle";
        ErrorResponseCode["NoValidReservationsToReRate"] = "NoValidReservationsToReRate";
        ErrorResponseCode["ReRateOnlyAllowedForEA"] = "ReRateOnlyAllowedForEA";
        ErrorResponseCode["OperationCannotBePerformedInCurrentState"] = "OperationCannotBePerformedInCurrentState";
        ErrorResponseCode["InvalidSingleAppliedScopesCount"] = "InvalidSingleAppliedScopesCount";
        ErrorResponseCode["InvalidFulfillmentRequestParameters"] = "InvalidFulfillmentRequestParameters";
        ErrorResponseCode["NotSupportedCountry"] = "NotSupportedCountry";
        ErrorResponseCode["InvalidRefundQuantity"] = "InvalidRefundQuantity";
        ErrorResponseCode["PurchaseError"] = "PurchaseError";
        ErrorResponseCode["BillingCustomerInputError"] = "BillingCustomerInputError";
        ErrorResponseCode["BillingPaymentInstrumentSoftError"] = "BillingPaymentInstrumentSoftError";
        ErrorResponseCode["BillingPaymentInstrumentHardError"] = "BillingPaymentInstrumentHardError";
        ErrorResponseCode["BillingTransientError"] = "BillingTransientError";
        ErrorResponseCode["BillingError"] = "BillingError";
        ErrorResponseCode["FulfillmentConfigurationError"] = "FulfillmentConfigurationError";
        ErrorResponseCode["FulfillmentOutOfStockError"] = "FulfillmentOutOfStockError";
        ErrorResponseCode["FulfillmentTransientError"] = "FulfillmentTransientError";
        ErrorResponseCode["FulfillmentError"] = "FulfillmentError";
        ErrorResponseCode["CalculatePriceFailed"] = "CalculatePriceFailed";
    })(ErrorResponseCode || (ErrorResponseCode = {}));
    /**
     * Defines values for ReservationTerm.
     * Possible values include: 'P1Y', 'P3Y'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ReservationTerm =
     * <ReservationTerm>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ReservationTerm;
    (function (ReservationTerm) {
        ReservationTerm["P1Y"] = "P1Y";
        ReservationTerm["P3Y"] = "P3Y";
    })(ReservationTerm || (ReservationTerm = {}));
    /**
     * Defines values for ReservedResourceType.
     * Possible values include: 'VirtualMachines', 'SqlDatabases', 'SuseLinux',
     * 'CosmosDb'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ReservedResourceType =
     * <ReservedResourceType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ReservedResourceType;
    (function (ReservedResourceType) {
        ReservedResourceType["VirtualMachines"] = "VirtualMachines";
        ReservedResourceType["SqlDatabases"] = "SqlDatabases";
        ReservedResourceType["SuseLinux"] = "SuseLinux";
        ReservedResourceType["CosmosDb"] = "CosmosDb";
    })(ReservedResourceType || (ReservedResourceType = {}));
    /**
     * Defines values for InstanceFlexibility.
     * Possible values include: 'On', 'Off', 'NotSupported'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: InstanceFlexibility =
     * <InstanceFlexibility>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var InstanceFlexibility;
    (function (InstanceFlexibility) {
        InstanceFlexibility["On"] = "On";
        InstanceFlexibility["Off"] = "Off";
        InstanceFlexibility["NotSupported"] = "NotSupported";
    })(InstanceFlexibility || (InstanceFlexibility = {}));
    /**
     * Defines values for AppliedScopeType.
     * Possible values include: 'Single', 'Shared'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: AppliedScopeType =
     * <AppliedScopeType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var AppliedScopeType;
    (function (AppliedScopeType) {
        AppliedScopeType["Single"] = "Single";
        AppliedScopeType["Shared"] = "Shared";
    })(AppliedScopeType || (AppliedScopeType = {}));

    var index = /*#__PURE__*/Object.freeze({
        get ReservationStatusCode () { return ReservationStatusCode; },
        get ErrorResponseCode () { return ErrorResponseCode; },
        get ReservationTerm () { return ReservationTerm; },
        get ReservedResourceType () { return ReservedResourceType; },
        get InstanceFlexibility () { return InstanceFlexibility; },
        get AppliedScopeType () { return AppliedScopeType; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var SkuName = {
        serializedName: "SkuName",
        type: {
            name: "Composite",
            className: "SkuName",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SkuProperty = {
        serializedName: "SkuProperty",
        type: {
            name: "Composite",
            className: "SkuProperty",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SkuRestriction = {
        serializedName: "SkuRestriction",
        type: {
            name: "Composite",
            className: "SkuRestriction",
            modelProperties: {
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                values: {
                    serializedName: "values",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                reasonCode: {
                    serializedName: "reasonCode",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Catalog = {
        serializedName: "Catalog",
        type: {
            name: "Composite",
            className: "Catalog",
            modelProperties: {
                resourceType: {
                    readOnly: true,
                    serializedName: "resourceType",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                terms: {
                    readOnly: true,
                    serializedName: "terms",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                locations: {
                    readOnly: true,
                    serializedName: "locations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                skuProperties: {
                    readOnly: true,
                    serializedName: "skuProperties",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SkuProperty"
                            }
                        }
                    }
                },
                restrictions: {
                    readOnly: true,
                    serializedName: "restrictions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SkuRestriction"
                            }
                        }
                    }
                }
            }
        }
    };
    var ExtendedStatusInfo = {
        serializedName: "ExtendedStatusInfo",
        type: {
            name: "Composite",
            className: "ExtendedStatusInfo",
            modelProperties: {
                statusCode: {
                    serializedName: "statusCode",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ReservationSplitProperties = {
        serializedName: "ReservationSplitProperties",
        type: {
            name: "Composite",
            className: "ReservationSplitProperties",
            modelProperties: {
                splitDestinations: {
                    serializedName: "splitDestinations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                splitSource: {
                    serializedName: "splitSource",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ReservationMergeProperties = {
        serializedName: "ReservationMergeProperties",
        type: {
            name: "Composite",
            className: "ReservationMergeProperties",
            modelProperties: {
                mergeDestination: {
                    serializedName: "mergeDestination",
                    type: {
                        name: "String"
                    }
                },
                mergeSources: {
                    serializedName: "mergeSources",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ReservationProperties = {
        serializedName: "ReservationProperties",
        type: {
            name: "Composite",
            className: "ReservationProperties",
            modelProperties: {
                reservedResourceType: {
                    serializedName: "reservedResourceType",
                    type: {
                        name: "String"
                    }
                },
                instanceFlexibility: {
                    serializedName: "instanceFlexibility",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                appliedScopes: {
                    serializedName: "appliedScopes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                appliedScopeType: {
                    serializedName: "appliedScopeType",
                    type: {
                        name: "String"
                    }
                },
                quantity: {
                    serializedName: "quantity",
                    type: {
                        name: "Number"
                    }
                },
                provisioningState: {
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                effectiveDateTime: {
                    serializedName: "effectiveDateTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastUpdatedDateTime: {
                    readOnly: true,
                    serializedName: "lastUpdatedDateTime",
                    type: {
                        name: "DateTime"
                    }
                },
                expiryDate: {
                    serializedName: "expiryDate",
                    type: {
                        name: "Date"
                    }
                },
                skuDescription: {
                    serializedName: "skuDescription",
                    type: {
                        name: "String"
                    }
                },
                extendedStatusInfo: {
                    serializedName: "extendedStatusInfo",
                    type: {
                        name: "Composite",
                        className: "ExtendedStatusInfo"
                    }
                },
                splitProperties: {
                    serializedName: "splitProperties",
                    type: {
                        name: "Composite",
                        className: "ReservationSplitProperties"
                    }
                },
                mergeProperties: {
                    serializedName: "mergeProperties",
                    type: {
                        name: "Composite",
                        className: "ReservationMergeProperties"
                    }
                }
            }
        }
    };
    var ReservationResponse = {
        serializedName: "ReservationResponse",
        type: {
            name: "Composite",
            className: "ReservationResponse",
            modelProperties: {
                location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                etag: {
                    serializedName: "etag",
                    type: {
                        name: "Number"
                    }
                },
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "SkuName"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "ReservationProperties"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ReservationOrderResponse = {
        serializedName: "ReservationOrderResponse",
        type: {
            name: "Composite",
            className: "ReservationOrderResponse",
            modelProperties: {
                etag: {
                    serializedName: "etag",
                    type: {
                        name: "Number"
                    }
                },
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "properties.displayName",
                    type: {
                        name: "String"
                    }
                },
                requestDateTime: {
                    serializedName: "properties.requestDateTime",
                    type: {
                        name: "DateTime"
                    }
                },
                createdDateTime: {
                    serializedName: "properties.createdDateTime",
                    type: {
                        name: "DateTime"
                    }
                },
                expiryDate: {
                    serializedName: "properties.expiryDate",
                    type: {
                        name: "Date"
                    }
                },
                originalQuantity: {
                    serializedName: "properties.originalQuantity",
                    type: {
                        name: "Number"
                    }
                },
                term: {
                    serializedName: "properties.term",
                    type: {
                        name: "String"
                    }
                },
                provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                },
                reservations: {
                    serializedName: "properties.reservations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReservationResponse"
                            }
                        }
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MergeRequest = {
        serializedName: "MergeRequest",
        type: {
            name: "Composite",
            className: "MergeRequest",
            modelProperties: {
                sources: {
                    serializedName: "properties.sources",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var Patch = {
        serializedName: "Patch",
        type: {
            name: "Composite",
            className: "Patch",
            modelProperties: {
                appliedScopeType: {
                    serializedName: "properties.appliedScopeType",
                    type: {
                        name: "String"
                    }
                },
                appliedScopes: {
                    serializedName: "properties.appliedScopes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                instanceFlexibility: {
                    serializedName: "properties.instanceFlexibility",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "properties.name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SplitRequest = {
        serializedName: "SplitRequest",
        type: {
            name: "Composite",
            className: "SplitRequest",
            modelProperties: {
                quantities: {
                    serializedName: "properties.quantities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                },
                reservationId: {
                    serializedName: "properties.reservationId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ExtendedErrorInfo = {
        serializedName: "ExtendedErrorInfo",
        type: {
            name: "Composite",
            className: "ExtendedErrorInfo",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorModel = {
        serializedName: "Error",
        type: {
            name: "Composite",
            className: "ErrorModel",
            modelProperties: {
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ExtendedErrorInfo"
                    }
                }
            }
        }
    };
    var AppliedReservationList = {
        serializedName: "AppliedReservationList",
        type: {
            name: "Composite",
            className: "AppliedReservationList",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AppliedReservations = {
        serializedName: "AppliedReservations",
        type: {
            name: "Composite",
            className: "AppliedReservations",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                reservationOrderIds: {
                    serializedName: "properties.reservationOrderIds",
                    type: {
                        name: "Composite",
                        className: "AppliedReservationList"
                    }
                }
            }
        }
    };
    var OperationDisplay = {
        serializedName: "OperationDisplay",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationResponse = {
        serializedName: "OperationResponse",
        type: {
            name: "Composite",
            className: "OperationResponse",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                },
                origin: {
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ReservationOrderList = {
        serializedName: "ReservationOrderList",
        type: {
            name: "Composite",
            className: "ReservationOrderList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReservationOrderResponse"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ReservationList = {
        serializedName: "ReservationList",
        type: {
            name: "Composite",
            className: "ReservationList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReservationResponse"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationList = {
        serializedName: "OperationList",
        type: {
            name: "Composite",
            className: "OperationList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OperationResponse"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var Mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        SkuName: SkuName,
        SkuProperty: SkuProperty,
        SkuRestriction: SkuRestriction,
        Catalog: Catalog,
        ExtendedStatusInfo: ExtendedStatusInfo,
        ReservationSplitProperties: ReservationSplitProperties,
        ReservationMergeProperties: ReservationMergeProperties,
        ReservationProperties: ReservationProperties,
        ReservationResponse: ReservationResponse,
        ReservationOrderResponse: ReservationOrderResponse,
        MergeRequest: MergeRequest,
        Patch: Patch,
        SplitRequest: SplitRequest,
        ExtendedErrorInfo: ExtendedErrorInfo,
        ErrorModel: ErrorModel,
        AppliedReservationList: AppliedReservationList,
        AppliedReservations: AppliedReservations,
        OperationDisplay: OperationDisplay,
        OperationResponse: OperationResponse,
        ReservationOrderList: ReservationOrderList,
        ReservationList: ReservationList,
        OperationList: OperationList
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var location = {
        parameterPath: [
            "options",
            "location"
        ],
        mapper: {
            serializedName: "location",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var reservationId = {
        parameterPath: "reservationId",
        mapper: {
            required: true,
            serializedName: "reservationId",
            type: {
                name: "String"
            }
        }
    };
    var reservationOrderId = {
        parameterPath: "reservationOrderId",
        mapper: {
            required: true,
            serializedName: "reservationOrderId",
            type: {
                name: "String"
            }
        }
    };
    var reservedResourceType = {
        parameterPath: "reservedResourceType",
        mapper: {
            required: true,
            serializedName: "reservedResourceType",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        ReservationOrderList: ReservationOrderList,
        ReservationOrderResponse: ReservationOrderResponse,
        BaseResource: BaseResource,
        ReservationResponse: ReservationResponse,
        SkuName: SkuName,
        ReservationProperties: ReservationProperties,
        ExtendedStatusInfo: ExtendedStatusInfo,
        ReservationSplitProperties: ReservationSplitProperties,
        ReservationMergeProperties: ReservationMergeProperties,
        ErrorModel: ErrorModel,
        ExtendedErrorInfo: ExtendedErrorInfo
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ReservationOrder. */
    var ReservationOrder = /** @class */ (function () {
        /**
         * Create a ReservationOrder.
         * @param {AzureReservationAPIContext} client Reference to the service client.
         */
        function ReservationOrder(client) {
            this.client = client;
        }
        ReservationOrder.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        ReservationOrder.prototype.get = function (reservationOrderId$$1, options, callback) {
            return this.client.sendOperationRequest({
                reservationOrderId: reservationOrderId$$1,
                options: options
            }, getOperationSpec, callback);
        };
        ReservationOrder.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return ReservationOrder;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers$1);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Capacity/reservationOrders",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReservationOrderList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}",
        urlParameters: [
            reservationOrderId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReservationOrderResponse
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReservationOrderList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        SplitRequest: SplitRequest,
        ReservationResponse: ReservationResponse,
        BaseResource: BaseResource,
        SkuName: SkuName,
        ReservationProperties: ReservationProperties,
        ExtendedStatusInfo: ExtendedStatusInfo,
        ReservationSplitProperties: ReservationSplitProperties,
        ReservationMergeProperties: ReservationMergeProperties,
        ErrorModel: ErrorModel,
        ExtendedErrorInfo: ExtendedErrorInfo,
        MergeRequest: MergeRequest,
        ReservationList: ReservationList,
        Patch: Patch,
        ReservationOrderResponse: ReservationOrderResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Reservation. */
    var Reservation = /** @class */ (function () {
        /**
         * Create a Reservation.
         * @param {AzureReservationAPIContext} client Reference to the service client.
         */
        function Reservation(client) {
            this.client = client;
        }
        /**
         * Split a `Reservation` into two `Reservation`s with specified quantity distribution.
         *
         * @summary Split the `Reservation`.
         * @param reservationOrderId Order Id of the reservation
         *
         * @param body Information needed to Split a reservation item
         * @param [options] The optional parameters
         * @returns Promise<Models.ReservationSplitResponse>
         */
        Reservation.prototype.split = function (reservationOrderId$$1, body, options) {
            return this.beginSplit(reservationOrderId$$1, body, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Merge the specified `Reservation`s into a new `Reservation`. The two `Reservation`s being merged
         * must have same properties.
         * @summary Merges two `Reservation`s.
         * @param reservationOrderId Order Id of the reservation
         *
         * @param body Information needed for commercial request for a reservation
         * @param [options] The optional parameters
         * @returns Promise<Models.ReservationMergeResponse>
         */
        Reservation.prototype.merge = function (reservationOrderId$$1, body, options) {
            return this.beginMerge(reservationOrderId$$1, body, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Reservation.prototype.list = function (reservationOrderId$$1, options, callback) {
            return this.client.sendOperationRequest({
                reservationOrderId: reservationOrderId$$1,
                options: options
            }, listOperationSpec$1, callback);
        };
        Reservation.prototype.get = function (reservationId$$1, reservationOrderId$$1, options, callback) {
            return this.client.sendOperationRequest({
                reservationId: reservationId$$1,
                reservationOrderId: reservationOrderId$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        /**
         * Updates the applied scopes of the `Reservation`.
         * @summary Updates a `Reservation`.
         * @param reservationOrderId Order Id of the reservation
         *
         * @param reservationId Id of the Reservation Item
         * @param parameters Information needed to patch a reservation item
         * @param [options] The optional parameters
         * @returns Promise<Models.ReservationUpdateResponse>
         */
        Reservation.prototype.update = function (reservationOrderId$$1, reservationId$$1, parameters, options) {
            return this.beginUpdate(reservationOrderId$$1, reservationId$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Reservation.prototype.listRevisions = function (reservationId$$1, reservationOrderId$$1, options, callback) {
            return this.client.sendOperationRequest({
                reservationId: reservationId$$1,
                reservationOrderId: reservationOrderId$$1,
                options: options
            }, listRevisionsOperationSpec, callback);
        };
        /**
         * Split a `Reservation` into two `Reservation`s with specified quantity distribution.
         *
         * @summary Split the `Reservation`.
         * @param reservationOrderId Order Id of the reservation
         *
         * @param body Information needed to Split a reservation item
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Reservation.prototype.beginSplit = function (reservationOrderId$$1, body, options) {
            return this.client.sendLRORequest({
                reservationOrderId: reservationOrderId$$1,
                body: body,
                options: options
            }, beginSplitOperationSpec, options);
        };
        /**
         * Merge the specified `Reservation`s into a new `Reservation`. The two `Reservation`s being merged
         * must have same properties.
         * @summary Merges two `Reservation`s.
         * @param reservationOrderId Order Id of the reservation
         *
         * @param body Information needed for commercial request for a reservation
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Reservation.prototype.beginMerge = function (reservationOrderId$$1, body, options) {
            return this.client.sendLRORequest({
                reservationOrderId: reservationOrderId$$1,
                body: body,
                options: options
            }, beginMergeOperationSpec, options);
        };
        /**
         * Updates the applied scopes of the `Reservation`.
         * @summary Updates a `Reservation`.
         * @param reservationOrderId Order Id of the reservation
         *
         * @param reservationId Id of the Reservation Item
         * @param parameters Information needed to patch a reservation item
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Reservation.prototype.beginUpdate = function (reservationOrderId$$1, reservationId$$1, parameters, options) {
            return this.client.sendLRORequest({
                reservationOrderId: reservationOrderId$$1,
                reservationId: reservationId$$1,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec, options);
        };
        Reservation.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        Reservation.prototype.listRevisionsNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listRevisionsNextOperationSpec, callback);
        };
        return Reservation;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$2);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations",
        urlParameters: [
            reservationOrderId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReservationList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
        urlParameters: [
            reservationId,
            reservationOrderId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReservationResponse
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$1
    };
    var listRevisionsOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}/revisions",
        urlParameters: [
            reservationId,
            reservationOrderId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReservationList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$1
    };
    var beginSplitOperationSpec = {
        httpMethod: "POST",
        path: "providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/split",
        urlParameters: [
            reservationOrderId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "body",
            mapper: __assign({}, SplitRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReservationResponse"
                            }
                        }
                    }
                }
            },
            202: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$1
    };
    var beginMergeOperationSpec = {
        httpMethod: "POST",
        path: "providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/merge",
        urlParameters: [
            reservationOrderId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "body",
            mapper: __assign({}, MergeRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReservationResponse"
                            }
                        }
                    }
                }
            },
            202: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$1
    };
    var beginUpdateOperationSpec = {
        httpMethod: "PATCH",
        path: "providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
        urlParameters: [
            reservationOrderId,
            reservationId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Patch, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ReservationResponse
            },
            202: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReservationList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$1
    };
    var listRevisionsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReservationList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        OperationList: OperationList,
        OperationResponse: OperationResponse,
        OperationDisplay: OperationDisplay,
        ErrorModel: ErrorModel,
        ExtendedErrorInfo: ExtendedErrorInfo
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operation. */
    var Operation = /** @class */ (function () {
        /**
         * Create a Operation.
         * @param {AzureReservationAPIContext} client Reference to the service client.
         */
        function Operation(client) {
            this.client = client;
        }
        Operation.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$2, callback);
        };
        Operation.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$2, callback);
        };
        return Operation;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$3);
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "providers/Microsoft.Capacity/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$2
    };
    var listNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-reservations";
    var packageVersion = "1.0.0-preview";
    var AzureReservationAPIContext = /** @class */ (function (_super) {
        __extends(AzureReservationAPIContext, _super);
        /**
         * Initializes a new instance of the AzureReservationAPI class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param [options] The parameter options
         */
        function AzureReservationAPIContext(credentials, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2018-06-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return AzureReservationAPIContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var AzureReservationAPI = /** @class */ (function (_super) {
        __extends(AzureReservationAPI, _super);
        /**
         * Initializes a new instance of the AzureReservationAPI class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param [options] The parameter options
         */
        function AzureReservationAPI(credentials, options) {
            var _this = _super.call(this, credentials, options) || this;
            _this.reservationOrder = new ReservationOrder(_this);
            _this.reservation = new Reservation(_this);
            _this.operation = new Operation(_this);
            return _this;
        }
        AzureReservationAPI.prototype.getCatalog = function (subscriptionId$$1, reservedResourceType$$1, options, callback) {
            return this.sendOperationRequest({
                subscriptionId: subscriptionId$$1,
                reservedResourceType: reservedResourceType$$1,
                options: options
            }, getCatalogOperationSpec, callback);
        };
        AzureReservationAPI.prototype.getAppliedReservationList = function (subscriptionId$$1, options, callback) {
            return this.sendOperationRequest({
                subscriptionId: subscriptionId$$1,
                options: options
            }, getAppliedReservationListOperationSpec, callback);
        };
        return AzureReservationAPI;
    }(AzureReservationAPIContext));
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers);
    var getCatalogOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Capacity/catalogs",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion,
            reservedResourceType,
            location
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Catalog"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$3
    };
    var getAppliedReservationListOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Capacity/appliedReservations",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AppliedReservations
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$3
    };

    exports.AzureReservationAPI = AzureReservationAPI;
    exports.AzureReservationAPIContext = AzureReservationAPIContext;
    exports.AzureReservationAPIModels = index;
    exports.AzureReservationAPIMappers = Mappers;
    exports.ReservationOrder = ReservationOrder;
    exports.Reservation = Reservation;
    exports.Operation = Operation;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-reservations.js.map
