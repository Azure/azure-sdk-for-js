/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmStreamanalytics = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for SkuName.
     * Possible values include: 'Standard'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SkuName = <SkuName>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SkuName;
    (function (SkuName) {
        SkuName["Standard"] = "Standard";
    })(SkuName || (SkuName = {}));
    /**
     * Defines values for OutputStartMode.
     * Possible values include: 'JobStartTime', 'CustomTime', 'LastOutputEventTime'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: OutputStartMode =
     * <OutputStartMode>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var OutputStartMode;
    (function (OutputStartMode) {
        OutputStartMode["JobStartTime"] = "JobStartTime";
        OutputStartMode["CustomTime"] = "CustomTime";
        OutputStartMode["LastOutputEventTime"] = "LastOutputEventTime";
    })(OutputStartMode || (OutputStartMode = {}));
    /**
     * Defines values for EventsOutOfOrderPolicy.
     * Possible values include: 'Adjust', 'Drop'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: EventsOutOfOrderPolicy =
     * <EventsOutOfOrderPolicy>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var EventsOutOfOrderPolicy;
    (function (EventsOutOfOrderPolicy) {
        EventsOutOfOrderPolicy["Adjust"] = "Adjust";
        EventsOutOfOrderPolicy["Drop"] = "Drop";
    })(EventsOutOfOrderPolicy || (EventsOutOfOrderPolicy = {}));
    /**
     * Defines values for OutputErrorPolicy.
     * Possible values include: 'Stop', 'Drop'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: OutputErrorPolicy =
     * <OutputErrorPolicy>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var OutputErrorPolicy;
    (function (OutputErrorPolicy) {
        OutputErrorPolicy["Stop"] = "Stop";
        OutputErrorPolicy["Drop"] = "Drop";
    })(OutputErrorPolicy || (OutputErrorPolicy = {}));
    /**
     * Defines values for CompatibilityLevel.
     * Possible values include: '1.0'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: CompatibilityLevel =
     * <CompatibilityLevel>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var CompatibilityLevel;
    (function (CompatibilityLevel) {
        CompatibilityLevel["OneFullStopZero"] = "1.0";
    })(CompatibilityLevel || (CompatibilityLevel = {}));
    /**
     * Defines values for JsonOutputSerializationFormat.
     * Possible values include: 'LineSeparated', 'Array'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: JsonOutputSerializationFormat =
     * <JsonOutputSerializationFormat>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var JsonOutputSerializationFormat;
    (function (JsonOutputSerializationFormat) {
        JsonOutputSerializationFormat["LineSeparated"] = "LineSeparated";
        JsonOutputSerializationFormat["Array"] = "Array";
    })(JsonOutputSerializationFormat || (JsonOutputSerializationFormat = {}));
    /**
     * Defines values for Encoding.
     * Possible values include: 'UTF8'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Encoding = <Encoding>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Encoding;
    (function (Encoding) {
        Encoding["UTF8"] = "UTF8";
    })(Encoding || (Encoding = {}));
    /**
     * Defines values for UdfType.
     * Possible values include: 'Scalar'
     * @readonly
     * @enum {string}
     */
    var UdfType;
    (function (UdfType) {
        UdfType["Scalar"] = "Scalar";
    })(UdfType || (UdfType = {}));

    var index = /*#__PURE__*/Object.freeze({
        get SkuName () { return SkuName; },
        get OutputStartMode () { return OutputStartMode; },
        get EventsOutOfOrderPolicy () { return EventsOutOfOrderPolicy; },
        get OutputErrorPolicy () { return OutputErrorPolicy; },
        get CompatibilityLevel () { return CompatibilityLevel; },
        get JsonOutputSerializationFormat () { return JsonOutputSerializationFormat; },
        get Encoding () { return Encoding; },
        get UdfType () { return UdfType; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    readOnly: true,
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    readOnly: true,
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    readOnly: true,
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    readOnly: true,
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    readOnly: true,
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                }
            }
        }
    };
    var Sku = {
        serializedName: "Sku",
        type: {
            name: "Composite",
            className: "Sku",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Serialization = {
        serializedName: "Serialization",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "type",
                clientName: "type"
            },
            uberParent: "Serialization",
            className: "Serialization",
            modelProperties: {
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DiagnosticCondition = {
        serializedName: "DiagnosticCondition",
        type: {
            name: "Composite",
            className: "DiagnosticCondition",
            modelProperties: {
                since: {
                    readOnly: true,
                    serializedName: "since",
                    type: {
                        name: "String"
                    }
                },
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Diagnostics = {
        serializedName: "Diagnostics",
        type: {
            name: "Composite",
            className: "Diagnostics",
            modelProperties: {
                conditions: {
                    readOnly: true,
                    serializedName: "conditions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DiagnosticCondition"
                            }
                        }
                    }
                }
            }
        }
    };
    var InputProperties = {
        serializedName: "InputProperties",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "type",
                clientName: "type"
            },
            uberParent: "InputProperties",
            className: "InputProperties",
            modelProperties: {
                serialization: {
                    serializedName: "serialization",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "Serialization",
                        className: "Serialization"
                    }
                },
                diagnostics: {
                    readOnly: true,
                    serializedName: "diagnostics",
                    type: {
                        name: "Composite",
                        className: "Diagnostics"
                    }
                },
                etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SubResource = {
        serializedName: "SubResource",
        type: {
            name: "Composite",
            className: "SubResource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Input = {
        serializedName: "Input",
        type: {
            name: "Composite",
            className: "Input",
            modelProperties: __assign({}, SubResource.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "InputProperties",
                        className: "InputProperties"
                    }
                } })
        }
    };
    var Transformation = {
        serializedName: "Transformation",
        type: {
            name: "Composite",
            className: "Transformation",
            modelProperties: __assign({}, SubResource.type.modelProperties, { streamingUnits: {
                    serializedName: "properties.streamingUnits",
                    type: {
                        name: "Number"
                    }
                }, query: {
                    serializedName: "properties.query",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    readOnly: true,
                    serializedName: "properties.etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var OutputDataSource = {
        serializedName: "OutputDataSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "type",
                clientName: "type"
            },
            uberParent: "OutputDataSource",
            className: "OutputDataSource",
            modelProperties: {
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Output = {
        serializedName: "Output",
        type: {
            name: "Composite",
            className: "Output",
            modelProperties: __assign({}, SubResource.type.modelProperties, { datasource: {
                    serializedName: "properties.datasource",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "OutputDataSource",
                        className: "OutputDataSource"
                    }
                }, serialization: {
                    serializedName: "properties.serialization",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "Serialization",
                        className: "Serialization"
                    }
                }, diagnostics: {
                    readOnly: true,
                    serializedName: "properties.diagnostics",
                    type: {
                        name: "Composite",
                        className: "Diagnostics"
                    }
                }, etag: {
                    readOnly: true,
                    serializedName: "properties.etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var FunctionProperties = {
        serializedName: "FunctionProperties",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "type",
                clientName: "type"
            },
            uberParent: "FunctionProperties",
            className: "FunctionProperties",
            modelProperties: {
                etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FunctionModel = {
        serializedName: "Function",
        type: {
            name: "Composite",
            className: "FunctionModel",
            modelProperties: __assign({}, SubResource.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "FunctionProperties",
                        className: "FunctionProperties"
                    }
                } })
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var StreamingJob = {
        serializedName: "StreamingJob",
        type: {
            name: "Composite",
            className: "StreamingJob",
            modelProperties: __assign({}, Resource.type.modelProperties, { sku: {
                    serializedName: "properties.sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }, jobId: {
                    readOnly: true,
                    serializedName: "properties.jobId",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, jobState: {
                    readOnly: true,
                    serializedName: "properties.jobState",
                    type: {
                        name: "String"
                    }
                }, outputStartMode: {
                    serializedName: "properties.outputStartMode",
                    type: {
                        name: "String"
                    }
                }, outputStartTime: {
                    serializedName: "properties.outputStartTime",
                    type: {
                        name: "DateTime"
                    }
                }, lastOutputEventTime: {
                    readOnly: true,
                    serializedName: "properties.lastOutputEventTime",
                    type: {
                        name: "DateTime"
                    }
                }, eventsOutOfOrderPolicy: {
                    serializedName: "properties.eventsOutOfOrderPolicy",
                    type: {
                        name: "String"
                    }
                }, outputErrorPolicy: {
                    serializedName: "properties.outputErrorPolicy",
                    type: {
                        name: "String"
                    }
                }, eventsOutOfOrderMaxDelayInSeconds: {
                    serializedName: "properties.eventsOutOfOrderMaxDelayInSeconds",
                    type: {
                        name: "Number"
                    }
                }, eventsLateArrivalMaxDelayInSeconds: {
                    serializedName: "properties.eventsLateArrivalMaxDelayInSeconds",
                    type: {
                        name: "Number"
                    }
                }, dataLocale: {
                    serializedName: "properties.dataLocale",
                    type: {
                        name: "String"
                    }
                }, compatibilityLevel: {
                    serializedName: "properties.compatibilityLevel",
                    type: {
                        name: "String"
                    }
                }, createdDate: {
                    readOnly: true,
                    serializedName: "properties.createdDate",
                    type: {
                        name: "DateTime"
                    }
                }, inputs: {
                    serializedName: "properties.inputs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Input"
                            }
                        }
                    }
                }, transformation: {
                    serializedName: "properties.transformation",
                    type: {
                        name: "Composite",
                        className: "Transformation"
                    }
                }, outputs: {
                    serializedName: "properties.outputs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Output"
                            }
                        }
                    }
                }, functions: {
                    serializedName: "properties.functions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FunctionModel"
                            }
                        }
                    }
                }, etag: {
                    readOnly: true,
                    serializedName: "properties.etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var StartStreamingJobParameters = {
        serializedName: "StartStreamingJobParameters",
        type: {
            name: "Composite",
            className: "StartStreamingJobParameters",
            modelProperties: {
                outputStartMode: {
                    serializedName: "outputStartMode",
                    type: {
                        name: "String"
                    }
                },
                outputStartTime: {
                    serializedName: "outputStartTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var FunctionBinding = {
        serializedName: "FunctionBinding",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "type",
                clientName: "type"
            },
            uberParent: "FunctionBinding",
            className: "FunctionBinding",
            modelProperties: {
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JavaScriptFunctionBinding = {
        serializedName: "Microsoft.StreamAnalytics/JavascriptUdf",
        type: {
            name: "Composite",
            polymorphicDiscriminator: FunctionBinding.type.polymorphicDiscriminator,
            uberParent: "FunctionBinding",
            className: "JavaScriptFunctionBinding",
            modelProperties: __assign({}, FunctionBinding.type.modelProperties, { script: {
                    serializedName: "properties.script",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var AzureMachineLearningWebServiceOutputColumn = {
        serializedName: "AzureMachineLearningWebServiceOutputColumn",
        type: {
            name: "Composite",
            className: "AzureMachineLearningWebServiceOutputColumn",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                dataType: {
                    serializedName: "dataType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AzureMachineLearningWebServiceInputColumn = {
        serializedName: "AzureMachineLearningWebServiceInputColumn",
        type: {
            name: "Composite",
            className: "AzureMachineLearningWebServiceInputColumn",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                dataType: {
                    serializedName: "dataType",
                    type: {
                        name: "String"
                    }
                },
                mapTo: {
                    serializedName: "mapTo",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var AzureMachineLearningWebServiceInputs = {
        serializedName: "AzureMachineLearningWebServiceInputs",
        type: {
            name: "Composite",
            className: "AzureMachineLearningWebServiceInputs",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                columnNames: {
                    serializedName: "columnNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AzureMachineLearningWebServiceInputColumn"
                            }
                        }
                    }
                }
            }
        }
    };
    var AzureMachineLearningWebServiceFunctionBinding = {
        serializedName: "Microsoft.MachineLearning/WebService",
        type: {
            name: "Composite",
            polymorphicDiscriminator: FunctionBinding.type.polymorphicDiscriminator,
            uberParent: "FunctionBinding",
            className: "AzureMachineLearningWebServiceFunctionBinding",
            modelProperties: __assign({}, FunctionBinding.type.modelProperties, { endpoint: {
                    serializedName: "properties.endpoint",
                    type: {
                        name: "String"
                    }
                }, apiKey: {
                    serializedName: "properties.apiKey",
                    type: {
                        name: "String"
                    }
                }, inputs: {
                    serializedName: "properties.inputs",
                    type: {
                        name: "Composite",
                        className: "AzureMachineLearningWebServiceInputs"
                    }
                }, outputs: {
                    serializedName: "properties.outputs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AzureMachineLearningWebServiceOutputColumn"
                            }
                        }
                    }
                }, batchSize: {
                    serializedName: "properties.batchSize",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var FunctionOutput = {
        serializedName: "FunctionOutput",
        type: {
            name: "Composite",
            className: "FunctionOutput",
            modelProperties: {
                dataType: {
                    serializedName: "dataType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FunctionInput = {
        serializedName: "FunctionInput",
        type: {
            name: "Composite",
            className: "FunctionInput",
            modelProperties: {
                dataType: {
                    serializedName: "dataType",
                    type: {
                        name: "String"
                    }
                },
                isConfigurationParameter: {
                    serializedName: "isConfigurationParameter",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var ScalarFunctionProperties = {
        serializedName: "Scalar",
        type: {
            name: "Composite",
            polymorphicDiscriminator: FunctionProperties.type.polymorphicDiscriminator,
            uberParent: "FunctionProperties",
            className: "ScalarFunctionProperties",
            modelProperties: __assign({}, FunctionProperties.type.modelProperties, { inputs: {
                    serializedName: "properties.inputs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FunctionInput"
                            }
                        }
                    }
                }, output: {
                    serializedName: "properties.output",
                    type: {
                        name: "Composite",
                        className: "FunctionOutput"
                    }
                }, binding: {
                    serializedName: "properties.binding",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "FunctionBinding",
                        className: "FunctionBinding"
                    }
                } })
        }
    };
    var AvroSerialization = {
        serializedName: "Avro",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Serialization.type.polymorphicDiscriminator,
            uberParent: "Serialization",
            className: "AvroSerialization",
            modelProperties: __assign({}, Serialization.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Object"
                    }
                } })
        }
    };
    var JsonSerialization = {
        serializedName: "Json",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Serialization.type.polymorphicDiscriminator,
            uberParent: "Serialization",
            className: "JsonSerialization",
            modelProperties: __assign({}, Serialization.type.modelProperties, { encoding: {
                    serializedName: "properties.encoding",
                    type: {
                        name: "String"
                    }
                }, format: {
                    serializedName: "properties.format",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var CsvSerialization = {
        serializedName: "Csv",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Serialization.type.polymorphicDiscriminator,
            uberParent: "Serialization",
            className: "CsvSerialization",
            modelProperties: __assign({}, Serialization.type.modelProperties, { fieldDelimiter: {
                    serializedName: "properties.fieldDelimiter",
                    type: {
                        name: "String"
                    }
                }, encoding: {
                    serializedName: "properties.encoding",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var OAuthBasedDataSourceProperties = {
        serializedName: "OAuthBasedDataSourceProperties",
        type: {
            name: "Composite",
            className: "OAuthBasedDataSourceProperties",
            modelProperties: {
                refreshToken: {
                    serializedName: "refreshToken",
                    type: {
                        name: "String"
                    }
                },
                tokenUserPrincipalName: {
                    serializedName: "tokenUserPrincipalName",
                    type: {
                        name: "String"
                    }
                },
                tokenUserDisplayName: {
                    serializedName: "tokenUserDisplayName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AzureDataLakeStoreOutputDataSource = {
        serializedName: "Microsoft.DataLake/Accounts",
        type: {
            name: "Composite",
            polymorphicDiscriminator: OutputDataSource.type.polymorphicDiscriminator,
            uberParent: "OutputDataSource",
            className: "AzureDataLakeStoreOutputDataSource",
            modelProperties: __assign({}, OutputDataSource.type.modelProperties, { refreshToken: {
                    serializedName: "properties.refreshToken",
                    type: {
                        name: "String"
                    }
                }, tokenUserPrincipalName: {
                    serializedName: "properties.tokenUserPrincipalName",
                    type: {
                        name: "String"
                    }
                }, tokenUserDisplayName: {
                    serializedName: "properties.tokenUserDisplayName",
                    type: {
                        name: "String"
                    }
                }, accountName: {
                    serializedName: "properties.accountName",
                    type: {
                        name: "String"
                    }
                }, tenantId: {
                    serializedName: "properties.tenantId",
                    type: {
                        name: "String"
                    }
                }, filePathPrefix: {
                    serializedName: "properties.filePathPrefix",
                    type: {
                        name: "String"
                    }
                }, dateFormat: {
                    serializedName: "properties.dateFormat",
                    type: {
                        name: "String"
                    }
                }, timeFormat: {
                    serializedName: "properties.timeFormat",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var PowerBIOutputDataSource = {
        serializedName: "PowerBI",
        type: {
            name: "Composite",
            polymorphicDiscriminator: OutputDataSource.type.polymorphicDiscriminator,
            uberParent: "OutputDataSource",
            className: "PowerBIOutputDataSource",
            modelProperties: __assign({}, OutputDataSource.type.modelProperties, { refreshToken: {
                    serializedName: "properties.refreshToken",
                    type: {
                        name: "String"
                    }
                }, tokenUserPrincipalName: {
                    serializedName: "properties.tokenUserPrincipalName",
                    type: {
                        name: "String"
                    }
                }, tokenUserDisplayName: {
                    serializedName: "properties.tokenUserDisplayName",
                    type: {
                        name: "String"
                    }
                }, dataset: {
                    serializedName: "properties.dataset",
                    type: {
                        name: "String"
                    }
                }, table: {
                    serializedName: "properties.table",
                    type: {
                        name: "String"
                    }
                }, groupId: {
                    serializedName: "properties.groupId",
                    type: {
                        name: "String"
                    }
                }, groupName: {
                    serializedName: "properties.groupName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ServiceBusDataSourceProperties = {
        serializedName: "ServiceBusDataSourceProperties",
        type: {
            name: "Composite",
            className: "ServiceBusDataSourceProperties",
            modelProperties: {
                serviceBusNamespace: {
                    serializedName: "serviceBusNamespace",
                    type: {
                        name: "String"
                    }
                },
                sharedAccessPolicyName: {
                    serializedName: "sharedAccessPolicyName",
                    type: {
                        name: "String"
                    }
                },
                sharedAccessPolicyKey: {
                    serializedName: "sharedAccessPolicyKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EventHubDataSourceProperties = {
        serializedName: "EventHubDataSourceProperties",
        type: {
            name: "Composite",
            className: "EventHubDataSourceProperties",
            modelProperties: __assign({}, ServiceBusDataSourceProperties.type.modelProperties, { eventHubName: {
                    serializedName: "eventHubName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ServiceBusTopicOutputDataSource = {
        serializedName: "Microsoft.ServiceBus/Topic",
        type: {
            name: "Composite",
            polymorphicDiscriminator: OutputDataSource.type.polymorphicDiscriminator,
            uberParent: "OutputDataSource",
            className: "ServiceBusTopicOutputDataSource",
            modelProperties: __assign({}, OutputDataSource.type.modelProperties, { serviceBusNamespace: {
                    serializedName: "properties.serviceBusNamespace",
                    type: {
                        name: "String"
                    }
                }, sharedAccessPolicyName: {
                    serializedName: "properties.sharedAccessPolicyName",
                    type: {
                        name: "String"
                    }
                }, sharedAccessPolicyKey: {
                    serializedName: "properties.sharedAccessPolicyKey",
                    type: {
                        name: "String"
                    }
                }, topicName: {
                    serializedName: "properties.topicName",
                    type: {
                        name: "String"
                    }
                }, propertyColumns: {
                    serializedName: "properties.propertyColumns",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var ServiceBusQueueOutputDataSource = {
        serializedName: "Microsoft.ServiceBus/Queue",
        type: {
            name: "Composite",
            polymorphicDiscriminator: OutputDataSource.type.polymorphicDiscriminator,
            uberParent: "OutputDataSource",
            className: "ServiceBusQueueOutputDataSource",
            modelProperties: __assign({}, OutputDataSource.type.modelProperties, { serviceBusNamespace: {
                    serializedName: "properties.serviceBusNamespace",
                    type: {
                        name: "String"
                    }
                }, sharedAccessPolicyName: {
                    serializedName: "properties.sharedAccessPolicyName",
                    type: {
                        name: "String"
                    }
                }, sharedAccessPolicyKey: {
                    serializedName: "properties.sharedAccessPolicyKey",
                    type: {
                        name: "String"
                    }
                }, queueName: {
                    serializedName: "properties.queueName",
                    type: {
                        name: "String"
                    }
                }, propertyColumns: {
                    serializedName: "properties.propertyColumns",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var DocumentDbOutputDataSource = {
        serializedName: "Microsoft.Storage/DocumentDB",
        type: {
            name: "Composite",
            polymorphicDiscriminator: OutputDataSource.type.polymorphicDiscriminator,
            uberParent: "OutputDataSource",
            className: "DocumentDbOutputDataSource",
            modelProperties: __assign({}, OutputDataSource.type.modelProperties, { accountId: {
                    serializedName: "properties.accountId",
                    type: {
                        name: "String"
                    }
                }, accountKey: {
                    serializedName: "properties.accountKey",
                    type: {
                        name: "String"
                    }
                }, database: {
                    serializedName: "properties.database",
                    type: {
                        name: "String"
                    }
                }, collectionNamePattern: {
                    serializedName: "properties.collectionNamePattern",
                    type: {
                        name: "String"
                    }
                }, partitionKey: {
                    serializedName: "properties.partitionKey",
                    type: {
                        name: "String"
                    }
                }, documentId: {
                    serializedName: "properties.documentId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var AzureSqlDatabaseDataSourceProperties = {
        serializedName: "AzureSqlDatabaseDataSourceProperties",
        type: {
            name: "Composite",
            className: "AzureSqlDatabaseDataSourceProperties",
            modelProperties: {
                server: {
                    serializedName: "server",
                    type: {
                        name: "String"
                    }
                },
                database: {
                    serializedName: "database",
                    type: {
                        name: "String"
                    }
                },
                user: {
                    serializedName: "user",
                    type: {
                        name: "String"
                    }
                },
                password: {
                    serializedName: "password",
                    type: {
                        name: "String"
                    }
                },
                table: {
                    serializedName: "table",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AzureSqlDatabaseOutputDataSource = {
        serializedName: "Microsoft.Sql/Server/Database",
        type: {
            name: "Composite",
            polymorphicDiscriminator: OutputDataSource.type.polymorphicDiscriminator,
            uberParent: "OutputDataSource",
            className: "AzureSqlDatabaseOutputDataSource",
            modelProperties: __assign({}, OutputDataSource.type.modelProperties, { server: {
                    serializedName: "properties.server",
                    type: {
                        name: "String"
                    }
                }, database: {
                    serializedName: "properties.database",
                    type: {
                        name: "String"
                    }
                }, user: {
                    serializedName: "properties.user",
                    type: {
                        name: "String"
                    }
                }, password: {
                    serializedName: "properties.password",
                    type: {
                        name: "String"
                    }
                }, table: {
                    serializedName: "properties.table",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var EventHubOutputDataSource = {
        serializedName: "Microsoft.ServiceBus/EventHub",
        type: {
            name: "Composite",
            polymorphicDiscriminator: OutputDataSource.type.polymorphicDiscriminator,
            uberParent: "OutputDataSource",
            className: "EventHubOutputDataSource",
            modelProperties: __assign({}, OutputDataSource.type.modelProperties, { serviceBusNamespace: {
                    serializedName: "properties.serviceBusNamespace",
                    type: {
                        name: "String"
                    }
                }, sharedAccessPolicyName: {
                    serializedName: "properties.sharedAccessPolicyName",
                    type: {
                        name: "String"
                    }
                }, sharedAccessPolicyKey: {
                    serializedName: "properties.sharedAccessPolicyKey",
                    type: {
                        name: "String"
                    }
                }, eventHubName: {
                    serializedName: "properties.eventHubName",
                    type: {
                        name: "String"
                    }
                }, partitionKey: {
                    serializedName: "properties.partitionKey",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var AzureTableOutputDataSource = {
        serializedName: "Microsoft.Storage/Table",
        type: {
            name: "Composite",
            polymorphicDiscriminator: OutputDataSource.type.polymorphicDiscriminator,
            uberParent: "OutputDataSource",
            className: "AzureTableOutputDataSource",
            modelProperties: __assign({}, OutputDataSource.type.modelProperties, { accountName: {
                    serializedName: "properties.accountName",
                    type: {
                        name: "String"
                    }
                }, accountKey: {
                    serializedName: "properties.accountKey",
                    type: {
                        name: "String"
                    }
                }, table: {
                    serializedName: "properties.table",
                    type: {
                        name: "String"
                    }
                }, partitionKey: {
                    serializedName: "properties.partitionKey",
                    type: {
                        name: "String"
                    }
                }, rowKey: {
                    serializedName: "properties.rowKey",
                    type: {
                        name: "String"
                    }
                }, columnsToRemove: {
                    serializedName: "properties.columnsToRemove",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, batchSize: {
                    serializedName: "properties.batchSize",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var StorageAccount = {
        serializedName: "StorageAccount",
        type: {
            name: "Composite",
            className: "StorageAccount",
            modelProperties: {
                accountName: {
                    serializedName: "accountName",
                    type: {
                        name: "String"
                    }
                },
                accountKey: {
                    serializedName: "accountKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BlobDataSourceProperties = {
        serializedName: "BlobDataSourceProperties",
        type: {
            name: "Composite",
            className: "BlobDataSourceProperties",
            modelProperties: {
                storageAccounts: {
                    serializedName: "storageAccounts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StorageAccount"
                            }
                        }
                    }
                },
                container: {
                    serializedName: "container",
                    type: {
                        name: "String"
                    }
                },
                pathPattern: {
                    serializedName: "pathPattern",
                    type: {
                        name: "String"
                    }
                },
                dateFormat: {
                    serializedName: "dateFormat",
                    type: {
                        name: "String"
                    }
                },
                timeFormat: {
                    serializedName: "timeFormat",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BlobOutputDataSource = {
        serializedName: "Microsoft.Storage/Blob",
        type: {
            name: "Composite",
            polymorphicDiscriminator: OutputDataSource.type.polymorphicDiscriminator,
            uberParent: "OutputDataSource",
            className: "BlobOutputDataSource",
            modelProperties: __assign({}, OutputDataSource.type.modelProperties, { storageAccounts: {
                    serializedName: "properties.storageAccounts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StorageAccount"
                            }
                        }
                    }
                }, container: {
                    serializedName: "properties.container",
                    type: {
                        name: "String"
                    }
                }, pathPattern: {
                    serializedName: "properties.pathPattern",
                    type: {
                        name: "String"
                    }
                }, dateFormat: {
                    serializedName: "properties.dateFormat",
                    type: {
                        name: "String"
                    }
                }, timeFormat: {
                    serializedName: "properties.timeFormat",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ReferenceInputDataSource = {
        serializedName: "ReferenceInputDataSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "type",
                clientName: "type"
            },
            uberParent: "ReferenceInputDataSource",
            className: "ReferenceInputDataSource",
            modelProperties: {
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BlobReferenceInputDataSource = {
        serializedName: "Microsoft.Storage/Blob",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ReferenceInputDataSource.type.polymorphicDiscriminator,
            uberParent: "ReferenceInputDataSource",
            className: "BlobReferenceInputDataSource",
            modelProperties: __assign({}, ReferenceInputDataSource.type.modelProperties, { storageAccounts: {
                    serializedName: "properties.storageAccounts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StorageAccount"
                            }
                        }
                    }
                }, container: {
                    serializedName: "properties.container",
                    type: {
                        name: "String"
                    }
                }, pathPattern: {
                    serializedName: "properties.pathPattern",
                    type: {
                        name: "String"
                    }
                }, dateFormat: {
                    serializedName: "properties.dateFormat",
                    type: {
                        name: "String"
                    }
                }, timeFormat: {
                    serializedName: "properties.timeFormat",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ReferenceInputProperties = {
        serializedName: "Reference",
        type: {
            name: "Composite",
            polymorphicDiscriminator: InputProperties.type.polymorphicDiscriminator,
            uberParent: "InputProperties",
            className: "ReferenceInputProperties",
            modelProperties: __assign({}, InputProperties.type.modelProperties, { datasource: {
                    serializedName: "datasource",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "ReferenceInputDataSource",
                        className: "ReferenceInputDataSource"
                    }
                } })
        }
    };
    var StreamInputDataSource = {
        serializedName: "StreamInputDataSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "type",
                clientName: "type"
            },
            uberParent: "StreamInputDataSource",
            className: "StreamInputDataSource",
            modelProperties: {
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IoTHubStreamInputDataSource = {
        serializedName: "Microsoft.Devices/IotHubs",
        type: {
            name: "Composite",
            polymorphicDiscriminator: StreamInputDataSource.type.polymorphicDiscriminator,
            uberParent: "StreamInputDataSource",
            className: "IoTHubStreamInputDataSource",
            modelProperties: __assign({}, StreamInputDataSource.type.modelProperties, { iotHubNamespace: {
                    serializedName: "properties.iotHubNamespace",
                    type: {
                        name: "String"
                    }
                }, sharedAccessPolicyName: {
                    serializedName: "properties.sharedAccessPolicyName",
                    type: {
                        name: "String"
                    }
                }, sharedAccessPolicyKey: {
                    serializedName: "properties.sharedAccessPolicyKey",
                    type: {
                        name: "String"
                    }
                }, consumerGroupName: {
                    serializedName: "properties.consumerGroupName",
                    type: {
                        name: "String"
                    }
                }, endpoint: {
                    serializedName: "properties.endpoint",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var EventHubStreamInputDataSource = {
        serializedName: "Microsoft.ServiceBus/EventHub",
        type: {
            name: "Composite",
            polymorphicDiscriminator: StreamInputDataSource.type.polymorphicDiscriminator,
            uberParent: "StreamInputDataSource",
            className: "EventHubStreamInputDataSource",
            modelProperties: __assign({}, StreamInputDataSource.type.modelProperties, { serviceBusNamespace: {
                    serializedName: "properties.serviceBusNamespace",
                    type: {
                        name: "String"
                    }
                }, sharedAccessPolicyName: {
                    serializedName: "properties.sharedAccessPolicyName",
                    type: {
                        name: "String"
                    }
                }, sharedAccessPolicyKey: {
                    serializedName: "properties.sharedAccessPolicyKey",
                    type: {
                        name: "String"
                    }
                }, eventHubName: {
                    serializedName: "properties.eventHubName",
                    type: {
                        name: "String"
                    }
                }, consumerGroupName: {
                    serializedName: "properties.consumerGroupName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var BlobStreamInputDataSource = {
        serializedName: "Microsoft.Storage/Blob",
        type: {
            name: "Composite",
            polymorphicDiscriminator: StreamInputDataSource.type.polymorphicDiscriminator,
            uberParent: "StreamInputDataSource",
            className: "BlobStreamInputDataSource",
            modelProperties: __assign({}, StreamInputDataSource.type.modelProperties, { storageAccounts: {
                    serializedName: "properties.storageAccounts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StorageAccount"
                            }
                        }
                    }
                }, container: {
                    serializedName: "properties.container",
                    type: {
                        name: "String"
                    }
                }, pathPattern: {
                    serializedName: "properties.pathPattern",
                    type: {
                        name: "String"
                    }
                }, dateFormat: {
                    serializedName: "properties.dateFormat",
                    type: {
                        name: "String"
                    }
                }, timeFormat: {
                    serializedName: "properties.timeFormat",
                    type: {
                        name: "String"
                    }
                }, sourcePartitionCount: {
                    serializedName: "properties.sourcePartitionCount",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var StreamInputProperties = {
        serializedName: "Stream",
        type: {
            name: "Composite",
            polymorphicDiscriminator: InputProperties.type.polymorphicDiscriminator,
            uberParent: "InputProperties",
            className: "StreamInputProperties",
            modelProperties: __assign({}, InputProperties.type.modelProperties, { datasource: {
                    serializedName: "datasource",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "StreamInputDataSource",
                        className: "StreamInputDataSource"
                    }
                } })
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceTestStatus = {
        serializedName: "ResourceTestStatus",
        type: {
            name: "Composite",
            className: "ResourceTestStatus",
            modelProperties: {
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                error: {
                    readOnly: true,
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorResponse"
                    }
                }
            }
        }
    };
    var FunctionRetrieveDefaultDefinitionParameters = {
        serializedName: "FunctionRetrieveDefaultDefinitionParameters",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "bindingType",
                clientName: "bindingType"
            },
            uberParent: "FunctionRetrieveDefaultDefinitionParameters",
            className: "FunctionRetrieveDefaultDefinitionParameters",
            modelProperties: {
                bindingType: {
                    required: true,
                    serializedName: "bindingType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AzureMachineLearningWebServiceFunctionRetrieveDefaultDefinitionParameters = {
        serializedName: "Microsoft.MachineLearning/WebService",
        type: {
            name: "Composite",
            polymorphicDiscriminator: FunctionRetrieveDefaultDefinitionParameters.type.polymorphicDiscriminator,
            uberParent: "FunctionRetrieveDefaultDefinitionParameters",
            className: "AzureMachineLearningWebServiceFunctionRetrieveDefaultDefinitionParameters",
            modelProperties: __assign({}, FunctionRetrieveDefaultDefinitionParameters.type.modelProperties, { executeEndpoint: {
                    serializedName: "bindingRetrievalProperties.executeEndpoint",
                    type: {
                        name: "String"
                    }
                }, udfType: {
                    serializedName: "bindingRetrievalProperties.udfType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Scalar"
                        ]
                    }
                } })
        }
    };
    var JavaScriptFunctionRetrieveDefaultDefinitionParameters = {
        serializedName: "Microsoft.StreamAnalytics/JavascriptUdf",
        type: {
            name: "Composite",
            polymorphicDiscriminator: FunctionRetrieveDefaultDefinitionParameters.type.polymorphicDiscriminator,
            uberParent: "FunctionRetrieveDefaultDefinitionParameters",
            className: "JavaScriptFunctionRetrieveDefaultDefinitionParameters",
            modelProperties: __assign({}, FunctionRetrieveDefaultDefinitionParameters.type.modelProperties, { script: {
                    serializedName: "bindingRetrievalProperties.script",
                    type: {
                        name: "String"
                    }
                }, udfType: {
                    serializedName: "bindingRetrievalProperties.udfType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Scalar"
                        ]
                    }
                } })
        }
    };
    var SubscriptionQuota = {
        serializedName: "SubscriptionQuota",
        type: {
            name: "Composite",
            className: "SubscriptionQuota",
            modelProperties: __assign({}, SubResource.type.modelProperties, { maxCount: {
                    readOnly: true,
                    serializedName: "properties.maxCount",
                    type: {
                        name: "Number"
                    }
                }, currentCount: {
                    readOnly: true,
                    serializedName: "properties.currentCount",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var SubscriptionQuotasListResult = {
        serializedName: "SubscriptionQuotasListResult",
        type: {
            name: "Composite",
            className: "SubscriptionQuotasListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubscriptionQuota"
                            }
                        }
                    }
                }
            }
        }
    };
    var StreamingJobsCreateOrReplaceHeaders = {
        serializedName: "streamingjobs-createorreplace-headers",
        type: {
            name: "Composite",
            className: "StreamingJobsCreateOrReplaceHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StreamingJobsUpdateHeaders = {
        serializedName: "streamingjobs-update-headers",
        type: {
            name: "Composite",
            className: "StreamingJobsUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StreamingJobsGetHeaders = {
        serializedName: "streamingjobs-get-headers",
        type: {
            name: "Composite",
            className: "StreamingJobsGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var InputsCreateOrReplaceHeaders = {
        serializedName: "inputs-createorreplace-headers",
        type: {
            name: "Composite",
            className: "InputsCreateOrReplaceHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var InputsUpdateHeaders = {
        serializedName: "inputs-update-headers",
        type: {
            name: "Composite",
            className: "InputsUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var InputsGetHeaders = {
        serializedName: "inputs-get-headers",
        type: {
            name: "Composite",
            className: "InputsGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OutputsCreateOrReplaceHeaders = {
        serializedName: "outputs-createorreplace-headers",
        type: {
            name: "Composite",
            className: "OutputsCreateOrReplaceHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OutputsUpdateHeaders = {
        serializedName: "outputs-update-headers",
        type: {
            name: "Composite",
            className: "OutputsUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OutputsGetHeaders = {
        serializedName: "outputs-get-headers",
        type: {
            name: "Composite",
            className: "OutputsGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TransformationsCreateOrReplaceHeaders = {
        serializedName: "transformations-createorreplace-headers",
        type: {
            name: "Composite",
            className: "TransformationsCreateOrReplaceHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TransformationsUpdateHeaders = {
        serializedName: "transformations-update-headers",
        type: {
            name: "Composite",
            className: "TransformationsUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TransformationsGetHeaders = {
        serializedName: "transformations-get-headers",
        type: {
            name: "Composite",
            className: "TransformationsGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FunctionsCreateOrReplaceHeaders = {
        serializedName: "functions-createorreplace-headers",
        type: {
            name: "Composite",
            className: "FunctionsCreateOrReplaceHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FunctionsUpdateHeaders = {
        serializedName: "functions-update-headers",
        type: {
            name: "Composite",
            className: "FunctionsUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FunctionsGetHeaders = {
        serializedName: "functions-get-headers",
        type: {
            name: "Composite",
            className: "FunctionsGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StreamingJobListResult = {
        serializedName: "StreamingJobListResult",
        type: {
            name: "Composite",
            className: "StreamingJobListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StreamingJob"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var InputListResult = {
        serializedName: "InputListResult",
        type: {
            name: "Composite",
            className: "InputListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Input"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OutputListResult = {
        serializedName: "OutputListResult",
        type: {
            name: "Composite",
            className: "OutputListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Output"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FunctionListResult = {
        serializedName: "FunctionListResult",
        type: {
            name: "Composite",
            className: "FunctionListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FunctionModel"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var discriminators = {
        'Serialization': Serialization,
        'InputProperties': InputProperties,
        'OutputDataSource': OutputDataSource,
        'FunctionProperties': FunctionProperties,
        'FunctionBinding.Microsoft.StreamAnalytics/JavascriptUdf': JavaScriptFunctionBinding,
        'FunctionBinding.Microsoft.MachineLearning/WebService': AzureMachineLearningWebServiceFunctionBinding,
        'FunctionBinding': FunctionBinding,
        'FunctionProperties.Scalar': ScalarFunctionProperties,
        'Serialization.Avro': AvroSerialization,
        'Serialization.Json': JsonSerialization,
        'Serialization.Csv': CsvSerialization,
        'OutputDataSource.Microsoft.DataLake/Accounts': AzureDataLakeStoreOutputDataSource,
        'OutputDataSource.PowerBI': PowerBIOutputDataSource,
        'OutputDataSource.Microsoft.ServiceBus/Topic': ServiceBusTopicOutputDataSource,
        'OutputDataSource.Microsoft.ServiceBus/Queue': ServiceBusQueueOutputDataSource,
        'OutputDataSource.Microsoft.Storage/DocumentDB': DocumentDbOutputDataSource,
        'OutputDataSource.Microsoft.Sql/Server/Database': AzureSqlDatabaseOutputDataSource,
        'OutputDataSource.Microsoft.ServiceBus/EventHub': EventHubOutputDataSource,
        'OutputDataSource.Microsoft.Storage/Table': AzureTableOutputDataSource,
        'OutputDataSource.Microsoft.Storage/Blob': BlobOutputDataSource,
        'ReferenceInputDataSource.Microsoft.Storage/Blob': BlobReferenceInputDataSource,
        'ReferenceInputDataSource': ReferenceInputDataSource,
        'InputProperties.Reference': ReferenceInputProperties,
        'StreamInputDataSource.Microsoft.Devices/IotHubs': IoTHubStreamInputDataSource,
        'StreamInputDataSource.Microsoft.ServiceBus/EventHub': EventHubStreamInputDataSource,
        'StreamInputDataSource.Microsoft.Storage/Blob': BlobStreamInputDataSource,
        'StreamInputDataSource': StreamInputDataSource,
        'InputProperties.Stream': StreamInputProperties,
        'FunctionRetrieveDefaultDefinitionParameters': FunctionRetrieveDefaultDefinitionParameters,
        'FunctionRetrieveDefaultDefinitionParameters.Microsoft.MachineLearning/WebService': AzureMachineLearningWebServiceFunctionRetrieveDefaultDefinitionParameters,
        'FunctionRetrieveDefaultDefinitionParameters.Microsoft.StreamAnalytics/JavascriptUdf': JavaScriptFunctionRetrieveDefaultDefinitionParameters
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        Sku: Sku,
        Serialization: Serialization,
        DiagnosticCondition: DiagnosticCondition,
        Diagnostics: Diagnostics,
        InputProperties: InputProperties,
        SubResource: SubResource,
        Input: Input,
        Transformation: Transformation,
        OutputDataSource: OutputDataSource,
        Output: Output,
        FunctionProperties: FunctionProperties,
        FunctionModel: FunctionModel,
        Resource: Resource,
        StreamingJob: StreamingJob,
        StartStreamingJobParameters: StartStreamingJobParameters,
        FunctionBinding: FunctionBinding,
        JavaScriptFunctionBinding: JavaScriptFunctionBinding,
        AzureMachineLearningWebServiceOutputColumn: AzureMachineLearningWebServiceOutputColumn,
        AzureMachineLearningWebServiceInputColumn: AzureMachineLearningWebServiceInputColumn,
        AzureMachineLearningWebServiceInputs: AzureMachineLearningWebServiceInputs,
        AzureMachineLearningWebServiceFunctionBinding: AzureMachineLearningWebServiceFunctionBinding,
        FunctionOutput: FunctionOutput,
        FunctionInput: FunctionInput,
        ScalarFunctionProperties: ScalarFunctionProperties,
        AvroSerialization: AvroSerialization,
        JsonSerialization: JsonSerialization,
        CsvSerialization: CsvSerialization,
        OAuthBasedDataSourceProperties: OAuthBasedDataSourceProperties,
        AzureDataLakeStoreOutputDataSource: AzureDataLakeStoreOutputDataSource,
        PowerBIOutputDataSource: PowerBIOutputDataSource,
        ServiceBusDataSourceProperties: ServiceBusDataSourceProperties,
        EventHubDataSourceProperties: EventHubDataSourceProperties,
        ServiceBusTopicOutputDataSource: ServiceBusTopicOutputDataSource,
        ServiceBusQueueOutputDataSource: ServiceBusQueueOutputDataSource,
        DocumentDbOutputDataSource: DocumentDbOutputDataSource,
        AzureSqlDatabaseDataSourceProperties: AzureSqlDatabaseDataSourceProperties,
        AzureSqlDatabaseOutputDataSource: AzureSqlDatabaseOutputDataSource,
        EventHubOutputDataSource: EventHubOutputDataSource,
        AzureTableOutputDataSource: AzureTableOutputDataSource,
        StorageAccount: StorageAccount,
        BlobDataSourceProperties: BlobDataSourceProperties,
        BlobOutputDataSource: BlobOutputDataSource,
        ReferenceInputDataSource: ReferenceInputDataSource,
        BlobReferenceInputDataSource: BlobReferenceInputDataSource,
        ReferenceInputProperties: ReferenceInputProperties,
        StreamInputDataSource: StreamInputDataSource,
        IoTHubStreamInputDataSource: IoTHubStreamInputDataSource,
        EventHubStreamInputDataSource: EventHubStreamInputDataSource,
        BlobStreamInputDataSource: BlobStreamInputDataSource,
        StreamInputProperties: StreamInputProperties,
        ErrorResponse: ErrorResponse,
        ResourceTestStatus: ResourceTestStatus,
        FunctionRetrieveDefaultDefinitionParameters: FunctionRetrieveDefaultDefinitionParameters,
        AzureMachineLearningWebServiceFunctionRetrieveDefaultDefinitionParameters: AzureMachineLearningWebServiceFunctionRetrieveDefaultDefinitionParameters,
        JavaScriptFunctionRetrieveDefaultDefinitionParameters: JavaScriptFunctionRetrieveDefaultDefinitionParameters,
        SubscriptionQuota: SubscriptionQuota,
        SubscriptionQuotasListResult: SubscriptionQuotasListResult,
        StreamingJobsCreateOrReplaceHeaders: StreamingJobsCreateOrReplaceHeaders,
        StreamingJobsUpdateHeaders: StreamingJobsUpdateHeaders,
        StreamingJobsGetHeaders: StreamingJobsGetHeaders,
        InputsCreateOrReplaceHeaders: InputsCreateOrReplaceHeaders,
        InputsUpdateHeaders: InputsUpdateHeaders,
        InputsGetHeaders: InputsGetHeaders,
        OutputsCreateOrReplaceHeaders: OutputsCreateOrReplaceHeaders,
        OutputsUpdateHeaders: OutputsUpdateHeaders,
        OutputsGetHeaders: OutputsGetHeaders,
        TransformationsCreateOrReplaceHeaders: TransformationsCreateOrReplaceHeaders,
        TransformationsUpdateHeaders: TransformationsUpdateHeaders,
        TransformationsGetHeaders: TransformationsGetHeaders,
        FunctionsCreateOrReplaceHeaders: FunctionsCreateOrReplaceHeaders,
        FunctionsUpdateHeaders: FunctionsUpdateHeaders,
        FunctionsGetHeaders: FunctionsGetHeaders,
        OperationListResult: OperationListResult,
        StreamingJobListResult: StreamingJobListResult,
        InputListResult: InputListResult,
        OutputListResult: OutputListResult,
        FunctionListResult: FunctionListResult,
        discriminators: discriminators
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        OperationListResult: OperationListResult,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var expand = {
        parameterPath: [
            "options",
            "expand"
        ],
        mapper: {
            serializedName: "$expand",
            type: {
                name: "String"
            }
        }
    };
    var functionName = {
        parameterPath: "functionName",
        mapper: {
            required: true,
            serializedName: "functionName",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch = {
        parameterPath: [
            "options",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifNoneMatch = {
        parameterPath: [
            "options",
            "ifNoneMatch"
        ],
        mapper: {
            serializedName: "If-None-Match",
            type: {
                name: "String"
            }
        }
    };
    var inputName = {
        parameterPath: "inputName",
        mapper: {
            required: true,
            serializedName: "inputName",
            type: {
                name: "String"
            }
        }
    };
    var jobName = {
        parameterPath: "jobName",
        mapper: {
            required: true,
            serializedName: "jobName",
            type: {
                name: "String"
            }
        }
    };
    var location = {
        parameterPath: "location",
        mapper: {
            required: true,
            serializedName: "location",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var outputName = {
        parameterPath: "outputName",
        mapper: {
            required: true,
            serializedName: "outputName",
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var select = {
        parameterPath: [
            "options",
            "select"
        ],
        mapper: {
            serializedName: "$select",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var transformationName = {
        parameterPath: "transformationName",
        mapper: {
            required: true,
            serializedName: "transformationName",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {StreamAnalyticsManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.StreamAnalytics/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        StreamingJob: StreamingJob,
        Resource: Resource,
        BaseResource: BaseResource,
        Sku: Sku,
        Input: Input,
        SubResource: SubResource,
        InputProperties: InputProperties,
        Serialization: Serialization,
        Diagnostics: Diagnostics,
        DiagnosticCondition: DiagnosticCondition,
        Transformation: Transformation,
        Output: Output,
        OutputDataSource: OutputDataSource,
        FunctionModel: FunctionModel,
        FunctionProperties: FunctionProperties,
        StreamingJobsCreateOrReplaceHeaders: StreamingJobsCreateOrReplaceHeaders,
        CloudError: CloudError,
        StreamingJobsUpdateHeaders: StreamingJobsUpdateHeaders,
        StreamingJobsGetHeaders: StreamingJobsGetHeaders,
        StreamingJobListResult: StreamingJobListResult,
        StartStreamingJobParameters: StartStreamingJobParameters,
        ScalarFunctionProperties: ScalarFunctionProperties,
        FunctionInput: FunctionInput,
        FunctionOutput: FunctionOutput,
        FunctionBinding: FunctionBinding,
        AvroSerialization: AvroSerialization,
        JsonSerialization: JsonSerialization,
        CsvSerialization: CsvSerialization,
        AzureDataLakeStoreOutputDataSource: AzureDataLakeStoreOutputDataSource,
        PowerBIOutputDataSource: PowerBIOutputDataSource,
        ServiceBusTopicOutputDataSource: ServiceBusTopicOutputDataSource,
        ServiceBusQueueOutputDataSource: ServiceBusQueueOutputDataSource,
        DocumentDbOutputDataSource: DocumentDbOutputDataSource,
        AzureSqlDatabaseOutputDataSource: AzureSqlDatabaseOutputDataSource,
        EventHubOutputDataSource: EventHubOutputDataSource,
        AzureTableOutputDataSource: AzureTableOutputDataSource,
        BlobOutputDataSource: BlobOutputDataSource,
        StorageAccount: StorageAccount,
        ReferenceInputProperties: ReferenceInputProperties,
        ReferenceInputDataSource: ReferenceInputDataSource,
        StreamInputProperties: StreamInputProperties,
        StreamInputDataSource: StreamInputDataSource,
        SubscriptionQuota: SubscriptionQuota,
        JavaScriptFunctionBinding: JavaScriptFunctionBinding,
        AzureMachineLearningWebServiceFunctionBinding: AzureMachineLearningWebServiceFunctionBinding,
        AzureMachineLearningWebServiceInputs: AzureMachineLearningWebServiceInputs,
        AzureMachineLearningWebServiceInputColumn: AzureMachineLearningWebServiceInputColumn,
        AzureMachineLearningWebServiceOutputColumn: AzureMachineLearningWebServiceOutputColumn,
        BlobReferenceInputDataSource: BlobReferenceInputDataSource,
        IoTHubStreamInputDataSource: IoTHubStreamInputDataSource,
        EventHubStreamInputDataSource: EventHubStreamInputDataSource,
        BlobStreamInputDataSource: BlobStreamInputDataSource
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a StreamingJobs. */
    var StreamingJobs = /** @class */ (function () {
        /**
         * Create a StreamingJobs.
         * @param {StreamAnalyticsManagementClientContext} client Reference to the service client.
         */
        function StreamingJobs(client) {
            this.client = client;
        }
        /**
         * Creates a streaming job or replaces an already existing streaming job.
         * @param streamingJob The definition of the streaming job that will be used to create a new
         * streaming job or replace the existing one.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param jobName The name of the streaming job.
         * @param [options] The optional parameters
         * @returns Promise<Models.StreamingJobsCreateOrReplaceResponse>
         */
        StreamingJobs.prototype.createOrReplace = function (streamingJob, resourceGroupName$$1, jobName$$1, options) {
            return this.beginCreateOrReplace(streamingJob, resourceGroupName$$1, jobName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        StreamingJobs.prototype.update = function (streamingJob, resourceGroupName$$1, jobName$$1, options, callback) {
            return this.client.sendOperationRequest({
                streamingJob: streamingJob,
                resourceGroupName: resourceGroupName$$1,
                jobName: jobName$$1,
                options: options
            }, updateOperationSpec, callback);
        };
        /**
         * Deletes a streaming job.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param jobName The name of the streaming job.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        StreamingJobs.prototype.deleteMethod = function (resourceGroupName$$1, jobName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, jobName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        StreamingJobs.prototype.get = function (resourceGroupName$$1, jobName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                jobName: jobName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        StreamingJobs.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        StreamingJobs.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        /**
         * Starts a streaming job. Once a job is started it will start processing input events and produce
         * output.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param jobName The name of the streaming job.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        StreamingJobs.prototype.start = function (resourceGroupName$$1, jobName$$1, options) {
            return this.beginStart(resourceGroupName$$1, jobName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Stops a running streaming job. This will cause a running streaming job to stop processing input
         * events and producing output.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param jobName The name of the streaming job.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        StreamingJobs.prototype.stop = function (resourceGroupName$$1, jobName$$1, options) {
            return this.beginStop(resourceGroupName$$1, jobName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates a streaming job or replaces an already existing streaming job.
         * @param streamingJob The definition of the streaming job that will be used to create a new
         * streaming job or replace the existing one.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param jobName The name of the streaming job.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        StreamingJobs.prototype.beginCreateOrReplace = function (streamingJob, resourceGroupName$$1, jobName$$1, options) {
            return this.client.sendLRORequest({
                streamingJob: streamingJob,
                resourceGroupName: resourceGroupName$$1,
                jobName: jobName$$1,
                options: options
            }, beginCreateOrReplaceOperationSpec, options);
        };
        /**
         * Deletes a streaming job.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param jobName The name of the streaming job.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        StreamingJobs.prototype.beginDeleteMethod = function (resourceGroupName$$1, jobName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                jobName: jobName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        /**
         * Starts a streaming job. Once a job is started it will start processing input events and produce
         * output.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param jobName The name of the streaming job.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        StreamingJobs.prototype.beginStart = function (resourceGroupName$$1, jobName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                jobName: jobName$$1,
                options: options
            }, beginStartOperationSpec, options);
        };
        /**
         * Stops a running streaming job. This will cause a running streaming job to stop processing input
         * events and producing output.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param jobName The name of the streaming job.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        StreamingJobs.prototype.beginStop = function (resourceGroupName$$1, jobName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                jobName: jobName$$1,
                options: options
            }, beginStopOperationSpec, options);
        };
        StreamingJobs.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        StreamingJobs.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return StreamingJobs;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "streamingJob",
            mapper: __assign({}, StreamingJob, { required: true })
        },
        responses: {
            200: {
                bodyMapper: StreamingJob,
                headersMapper: StreamingJobsUpdateHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobName
        ],
        queryParameters: [
            expand,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StreamingJob,
                headersMapper: StreamingJobsGetHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            expand,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StreamingJobListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.StreamAnalytics/streamingjobs",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            expand,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StreamingJobListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginCreateOrReplaceOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch,
            ifNoneMatch,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "streamingJob",
            mapper: __assign({}, StreamingJob, { required: true })
        },
        responses: {
            200: {
                bodyMapper: StreamingJob,
                headersMapper: StreamingJobsCreateOrReplaceHeaders
            },
            201: {
                bodyMapper: StreamingJob,
                headersMapper: StreamingJobsCreateOrReplaceHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginStartOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/start",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "startJobParameters"
            ],
            mapper: StartStreamingJobParameters
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginStopOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/stop",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StreamingJobListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StreamingJobListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        Input: Input,
        SubResource: SubResource,
        BaseResource: BaseResource,
        InputProperties: InputProperties,
        Serialization: Serialization,
        Diagnostics: Diagnostics,
        DiagnosticCondition: DiagnosticCondition,
        InputsCreateOrReplaceHeaders: InputsCreateOrReplaceHeaders,
        CloudError: CloudError,
        InputsUpdateHeaders: InputsUpdateHeaders,
        InputsGetHeaders: InputsGetHeaders,
        InputListResult: InputListResult,
        ResourceTestStatus: ResourceTestStatus,
        ErrorResponse: ErrorResponse,
        Transformation: Transformation,
        Output: Output,
        OutputDataSource: OutputDataSource,
        FunctionModel: FunctionModel,
        FunctionProperties: FunctionProperties,
        Resource: Resource,
        ScalarFunctionProperties: ScalarFunctionProperties,
        FunctionInput: FunctionInput,
        FunctionOutput: FunctionOutput,
        FunctionBinding: FunctionBinding,
        AvroSerialization: AvroSerialization,
        JsonSerialization: JsonSerialization,
        CsvSerialization: CsvSerialization,
        AzureDataLakeStoreOutputDataSource: AzureDataLakeStoreOutputDataSource,
        PowerBIOutputDataSource: PowerBIOutputDataSource,
        ServiceBusTopicOutputDataSource: ServiceBusTopicOutputDataSource,
        ServiceBusQueueOutputDataSource: ServiceBusQueueOutputDataSource,
        DocumentDbOutputDataSource: DocumentDbOutputDataSource,
        AzureSqlDatabaseOutputDataSource: AzureSqlDatabaseOutputDataSource,
        EventHubOutputDataSource: EventHubOutputDataSource,
        AzureTableOutputDataSource: AzureTableOutputDataSource,
        BlobOutputDataSource: BlobOutputDataSource,
        StorageAccount: StorageAccount,
        ReferenceInputProperties: ReferenceInputProperties,
        ReferenceInputDataSource: ReferenceInputDataSource,
        StreamInputProperties: StreamInputProperties,
        StreamInputDataSource: StreamInputDataSource,
        SubscriptionQuota: SubscriptionQuota,
        StreamingJob: StreamingJob,
        Sku: Sku,
        JavaScriptFunctionBinding: JavaScriptFunctionBinding,
        AzureMachineLearningWebServiceFunctionBinding: AzureMachineLearningWebServiceFunctionBinding,
        AzureMachineLearningWebServiceInputs: AzureMachineLearningWebServiceInputs,
        AzureMachineLearningWebServiceInputColumn: AzureMachineLearningWebServiceInputColumn,
        AzureMachineLearningWebServiceOutputColumn: AzureMachineLearningWebServiceOutputColumn,
        BlobReferenceInputDataSource: BlobReferenceInputDataSource,
        IoTHubStreamInputDataSource: IoTHubStreamInputDataSource,
        EventHubStreamInputDataSource: EventHubStreamInputDataSource,
        BlobStreamInputDataSource: BlobStreamInputDataSource
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Inputs. */
    var Inputs = /** @class */ (function () {
        /**
         * Create a Inputs.
         * @param {StreamAnalyticsManagementClientContext} client Reference to the service client.
         */
        function Inputs(client) {
            this.client = client;
        }
        Inputs.prototype.createOrReplace = function (input, resourceGroupName$$1, jobName$$1, inputName$$1, options, callback) {
            return this.client.sendOperationRequest({
                input: input,
                resourceGroupName: resourceGroupName$$1,
                jobName: jobName$$1,
                inputName: inputName$$1,
                options: options
            }, createOrReplaceOperationSpec, callback);
        };
        Inputs.prototype.update = function (input, resourceGroupName$$1, jobName$$1, inputName$$1, options, callback) {
            return this.client.sendOperationRequest({
                input: input,
                resourceGroupName: resourceGroupName$$1,
                jobName: jobName$$1,
                inputName: inputName$$1,
                options: options
            }, updateOperationSpec$1, callback);
        };
        Inputs.prototype.deleteMethod = function (resourceGroupName$$1, jobName$$1, inputName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                jobName: jobName$$1,
                inputName: inputName$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        Inputs.prototype.get = function (resourceGroupName$$1, jobName$$1, inputName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                jobName: jobName$$1,
                inputName: inputName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        Inputs.prototype.listByStreamingJob = function (resourceGroupName$$1, jobName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                jobName: jobName$$1,
                options: options
            }, listByStreamingJobOperationSpec, callback);
        };
        /**
         * Tests whether an input’s datasource is reachable and usable by the Azure Stream Analytics
         * service.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param jobName The name of the streaming job.
         * @param inputName The name of the input.
         * @param [options] The optional parameters
         * @returns Promise<Models.InputsTestResponse>
         */
        Inputs.prototype.test = function (resourceGroupName$$1, jobName$$1, inputName$$1, options) {
            return this.beginTest(resourceGroupName$$1, jobName$$1, inputName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Tests whether an input’s datasource is reachable and usable by the Azure Stream Analytics
         * service.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param jobName The name of the streaming job.
         * @param inputName The name of the input.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Inputs.prototype.beginTest = function (resourceGroupName$$1, jobName$$1, inputName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                jobName: jobName$$1,
                inputName: inputName$$1,
                options: options
            }, beginTestOperationSpec, options);
        };
        Inputs.prototype.listByStreamingJobNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByStreamingJobNextOperationSpec, callback);
        };
        return Inputs;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var createOrReplaceOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/inputs/{inputName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobName,
            inputName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch,
            ifNoneMatch,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "input",
            mapper: __assign({}, Input, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Input,
                headersMapper: InputsCreateOrReplaceHeaders
            },
            201: {
                bodyMapper: Input,
                headersMapper: InputsCreateOrReplaceHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var updateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/inputs/{inputName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobName,
            inputName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "input",
            mapper: __assign({}, Input, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Input,
                headersMapper: InputsUpdateHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/inputs/{inputName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobName,
            inputName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/inputs/{inputName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobName,
            inputName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Input,
                headersMapper: InputsGetHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listByStreamingJobOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/inputs",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobName
        ],
        queryParameters: [
            select,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: InputListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var beginTestOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/inputs/{inputName}/test",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobName,
            inputName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "input"
            ],
            mapper: Input
        },
        responses: {
            200: {
                bodyMapper: ResourceTestStatus
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listByStreamingJobNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: InputListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        Output: Output,
        SubResource: SubResource,
        BaseResource: BaseResource,
        OutputDataSource: OutputDataSource,
        Serialization: Serialization,
        Diagnostics: Diagnostics,
        DiagnosticCondition: DiagnosticCondition,
        OutputsCreateOrReplaceHeaders: OutputsCreateOrReplaceHeaders,
        CloudError: CloudError,
        OutputsUpdateHeaders: OutputsUpdateHeaders,
        OutputsGetHeaders: OutputsGetHeaders,
        OutputListResult: OutputListResult,
        ResourceTestStatus: ResourceTestStatus,
        ErrorResponse: ErrorResponse,
        Input: Input,
        InputProperties: InputProperties,
        Transformation: Transformation,
        FunctionModel: FunctionModel,
        FunctionProperties: FunctionProperties,
        Resource: Resource,
        ScalarFunctionProperties: ScalarFunctionProperties,
        FunctionInput: FunctionInput,
        FunctionOutput: FunctionOutput,
        FunctionBinding: FunctionBinding,
        AvroSerialization: AvroSerialization,
        JsonSerialization: JsonSerialization,
        CsvSerialization: CsvSerialization,
        AzureDataLakeStoreOutputDataSource: AzureDataLakeStoreOutputDataSource,
        PowerBIOutputDataSource: PowerBIOutputDataSource,
        ServiceBusTopicOutputDataSource: ServiceBusTopicOutputDataSource,
        ServiceBusQueueOutputDataSource: ServiceBusQueueOutputDataSource,
        DocumentDbOutputDataSource: DocumentDbOutputDataSource,
        AzureSqlDatabaseOutputDataSource: AzureSqlDatabaseOutputDataSource,
        EventHubOutputDataSource: EventHubOutputDataSource,
        AzureTableOutputDataSource: AzureTableOutputDataSource,
        BlobOutputDataSource: BlobOutputDataSource,
        StorageAccount: StorageAccount,
        ReferenceInputProperties: ReferenceInputProperties,
        ReferenceInputDataSource: ReferenceInputDataSource,
        StreamInputProperties: StreamInputProperties,
        StreamInputDataSource: StreamInputDataSource,
        SubscriptionQuota: SubscriptionQuota,
        StreamingJob: StreamingJob,
        Sku: Sku,
        JavaScriptFunctionBinding: JavaScriptFunctionBinding,
        AzureMachineLearningWebServiceFunctionBinding: AzureMachineLearningWebServiceFunctionBinding,
        AzureMachineLearningWebServiceInputs: AzureMachineLearningWebServiceInputs,
        AzureMachineLearningWebServiceInputColumn: AzureMachineLearningWebServiceInputColumn,
        AzureMachineLearningWebServiceOutputColumn: AzureMachineLearningWebServiceOutputColumn,
        BlobReferenceInputDataSource: BlobReferenceInputDataSource,
        IoTHubStreamInputDataSource: IoTHubStreamInputDataSource,
        EventHubStreamInputDataSource: EventHubStreamInputDataSource,
        BlobStreamInputDataSource: BlobStreamInputDataSource
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Outputs. */
    var Outputs = /** @class */ (function () {
        /**
         * Create a Outputs.
         * @param {StreamAnalyticsManagementClientContext} client Reference to the service client.
         */
        function Outputs(client) {
            this.client = client;
        }
        Outputs.prototype.createOrReplace = function (output, resourceGroupName$$1, jobName$$1, outputName$$1, options, callback) {
            return this.client.sendOperationRequest({
                output: output,
                resourceGroupName: resourceGroupName$$1,
                jobName: jobName$$1,
                outputName: outputName$$1,
                options: options
            }, createOrReplaceOperationSpec$1, callback);
        };
        Outputs.prototype.update = function (output, resourceGroupName$$1, jobName$$1, outputName$$1, options, callback) {
            return this.client.sendOperationRequest({
                output: output,
                resourceGroupName: resourceGroupName$$1,
                jobName: jobName$$1,
                outputName: outputName$$1,
                options: options
            }, updateOperationSpec$2, callback);
        };
        Outputs.prototype.deleteMethod = function (resourceGroupName$$1, jobName$$1, outputName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                jobName: jobName$$1,
                outputName: outputName$$1,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        Outputs.prototype.get = function (resourceGroupName$$1, jobName$$1, outputName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                jobName: jobName$$1,
                outputName: outputName$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        Outputs.prototype.listByStreamingJob = function (resourceGroupName$$1, jobName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                jobName: jobName$$1,
                options: options
            }, listByStreamingJobOperationSpec$1, callback);
        };
        /**
         * Tests whether an output’s datasource is reachable and usable by the Azure Stream Analytics
         * service.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param jobName The name of the streaming job.
         * @param outputName The name of the output.
         * @param [options] The optional parameters
         * @returns Promise<Models.OutputsTestResponse>
         */
        Outputs.prototype.test = function (resourceGroupName$$1, jobName$$1, outputName$$1, options) {
            return this.beginTest(resourceGroupName$$1, jobName$$1, outputName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Tests whether an output’s datasource is reachable and usable by the Azure Stream Analytics
         * service.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param jobName The name of the streaming job.
         * @param outputName The name of the output.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Outputs.prototype.beginTest = function (resourceGroupName$$1, jobName$$1, outputName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                jobName: jobName$$1,
                outputName: outputName$$1,
                options: options
            }, beginTestOperationSpec$1, options);
        };
        Outputs.prototype.listByStreamingJobNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByStreamingJobNextOperationSpec$1, callback);
        };
        return Outputs;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var createOrReplaceOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/outputs/{outputName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobName,
            outputName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch,
            ifNoneMatch,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "output",
            mapper: __assign({}, Output, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Output,
                headersMapper: OutputsCreateOrReplaceHeaders
            },
            201: {
                bodyMapper: Output,
                headersMapper: OutputsCreateOrReplaceHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var updateOperationSpec$2 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/outputs/{outputName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobName,
            outputName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "output",
            mapper: __assign({}, Output, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Output,
                headersMapper: OutputsUpdateHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/outputs/{outputName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobName,
            outputName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/outputs/{outputName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobName,
            outputName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Output,
                headersMapper: OutputsGetHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listByStreamingJobOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/outputs",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobName
        ],
        queryParameters: [
            select,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OutputListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginTestOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/outputs/{outputName}/test",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobName,
            outputName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "output"
            ],
            mapper: Output
        },
        responses: {
            200: {
                bodyMapper: ResourceTestStatus
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listByStreamingJobNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OutputListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        Transformation: Transformation,
        SubResource: SubResource,
        BaseResource: BaseResource,
        TransformationsCreateOrReplaceHeaders: TransformationsCreateOrReplaceHeaders,
        CloudError: CloudError,
        TransformationsUpdateHeaders: TransformationsUpdateHeaders,
        TransformationsGetHeaders: TransformationsGetHeaders,
        Input: Input,
        InputProperties: InputProperties,
        Serialization: Serialization,
        Diagnostics: Diagnostics,
        DiagnosticCondition: DiagnosticCondition,
        Output: Output,
        OutputDataSource: OutputDataSource,
        FunctionModel: FunctionModel,
        FunctionProperties: FunctionProperties,
        Resource: Resource,
        ScalarFunctionProperties: ScalarFunctionProperties,
        FunctionInput: FunctionInput,
        FunctionOutput: FunctionOutput,
        FunctionBinding: FunctionBinding,
        AvroSerialization: AvroSerialization,
        JsonSerialization: JsonSerialization,
        CsvSerialization: CsvSerialization,
        AzureDataLakeStoreOutputDataSource: AzureDataLakeStoreOutputDataSource,
        PowerBIOutputDataSource: PowerBIOutputDataSource,
        ServiceBusTopicOutputDataSource: ServiceBusTopicOutputDataSource,
        ServiceBusQueueOutputDataSource: ServiceBusQueueOutputDataSource,
        DocumentDbOutputDataSource: DocumentDbOutputDataSource,
        AzureSqlDatabaseOutputDataSource: AzureSqlDatabaseOutputDataSource,
        EventHubOutputDataSource: EventHubOutputDataSource,
        AzureTableOutputDataSource: AzureTableOutputDataSource,
        BlobOutputDataSource: BlobOutputDataSource,
        StorageAccount: StorageAccount,
        ReferenceInputProperties: ReferenceInputProperties,
        ReferenceInputDataSource: ReferenceInputDataSource,
        StreamInputProperties: StreamInputProperties,
        StreamInputDataSource: StreamInputDataSource,
        SubscriptionQuota: SubscriptionQuota,
        StreamingJob: StreamingJob,
        Sku: Sku,
        JavaScriptFunctionBinding: JavaScriptFunctionBinding,
        AzureMachineLearningWebServiceFunctionBinding: AzureMachineLearningWebServiceFunctionBinding,
        AzureMachineLearningWebServiceInputs: AzureMachineLearningWebServiceInputs,
        AzureMachineLearningWebServiceInputColumn: AzureMachineLearningWebServiceInputColumn,
        AzureMachineLearningWebServiceOutputColumn: AzureMachineLearningWebServiceOutputColumn,
        BlobReferenceInputDataSource: BlobReferenceInputDataSource,
        IoTHubStreamInputDataSource: IoTHubStreamInputDataSource,
        EventHubStreamInputDataSource: EventHubStreamInputDataSource,
        BlobStreamInputDataSource: BlobStreamInputDataSource
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Transformations. */
    var Transformations = /** @class */ (function () {
        /**
         * Create a Transformations.
         * @param {StreamAnalyticsManagementClientContext} client Reference to the service client.
         */
        function Transformations(client) {
            this.client = client;
        }
        Transformations.prototype.createOrReplace = function (transformation, resourceGroupName$$1, jobName$$1, transformationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                transformation: transformation,
                resourceGroupName: resourceGroupName$$1,
                jobName: jobName$$1,
                transformationName: transformationName$$1,
                options: options
            }, createOrReplaceOperationSpec$2, callback);
        };
        Transformations.prototype.update = function (transformation, resourceGroupName$$1, jobName$$1, transformationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                transformation: transformation,
                resourceGroupName: resourceGroupName$$1,
                jobName: jobName$$1,
                transformationName: transformationName$$1,
                options: options
            }, updateOperationSpec$3, callback);
        };
        Transformations.prototype.get = function (resourceGroupName$$1, jobName$$1, transformationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                jobName: jobName$$1,
                transformationName: transformationName$$1,
                options: options
            }, getOperationSpec$3, callback);
        };
        return Transformations;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var createOrReplaceOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/transformations/{transformationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobName,
            transformationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch,
            ifNoneMatch,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "transformation",
            mapper: __assign({}, Transformation, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Transformation,
                headersMapper: TransformationsCreateOrReplaceHeaders
            },
            201: {
                bodyMapper: Transformation,
                headersMapper: TransformationsCreateOrReplaceHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var updateOperationSpec$3 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/transformations/{transformationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobName,
            transformationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "transformation",
            mapper: __assign({}, Transformation, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Transformation,
                headersMapper: TransformationsUpdateHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/transformations/{transformationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobName,
            transformationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Transformation,
                headersMapper: TransformationsGetHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        FunctionModel: FunctionModel,
        SubResource: SubResource,
        BaseResource: BaseResource,
        FunctionProperties: FunctionProperties,
        FunctionsCreateOrReplaceHeaders: FunctionsCreateOrReplaceHeaders,
        CloudError: CloudError,
        FunctionsUpdateHeaders: FunctionsUpdateHeaders,
        FunctionsGetHeaders: FunctionsGetHeaders,
        FunctionListResult: FunctionListResult,
        ResourceTestStatus: ResourceTestStatus,
        ErrorResponse: ErrorResponse,
        FunctionRetrieveDefaultDefinitionParameters: FunctionRetrieveDefaultDefinitionParameters,
        Input: Input,
        InputProperties: InputProperties,
        Serialization: Serialization,
        Diagnostics: Diagnostics,
        DiagnosticCondition: DiagnosticCondition,
        Transformation: Transformation,
        Output: Output,
        OutputDataSource: OutputDataSource,
        Resource: Resource,
        ScalarFunctionProperties: ScalarFunctionProperties,
        FunctionInput: FunctionInput,
        FunctionOutput: FunctionOutput,
        FunctionBinding: FunctionBinding,
        AvroSerialization: AvroSerialization,
        JsonSerialization: JsonSerialization,
        CsvSerialization: CsvSerialization,
        AzureDataLakeStoreOutputDataSource: AzureDataLakeStoreOutputDataSource,
        PowerBIOutputDataSource: PowerBIOutputDataSource,
        ServiceBusTopicOutputDataSource: ServiceBusTopicOutputDataSource,
        ServiceBusQueueOutputDataSource: ServiceBusQueueOutputDataSource,
        DocumentDbOutputDataSource: DocumentDbOutputDataSource,
        AzureSqlDatabaseOutputDataSource: AzureSqlDatabaseOutputDataSource,
        EventHubOutputDataSource: EventHubOutputDataSource,
        AzureTableOutputDataSource: AzureTableOutputDataSource,
        BlobOutputDataSource: BlobOutputDataSource,
        StorageAccount: StorageAccount,
        ReferenceInputProperties: ReferenceInputProperties,
        ReferenceInputDataSource: ReferenceInputDataSource,
        StreamInputProperties: StreamInputProperties,
        StreamInputDataSource: StreamInputDataSource,
        AzureMachineLearningWebServiceFunctionRetrieveDefaultDefinitionParameters: AzureMachineLearningWebServiceFunctionRetrieveDefaultDefinitionParameters,
        JavaScriptFunctionRetrieveDefaultDefinitionParameters: JavaScriptFunctionRetrieveDefaultDefinitionParameters,
        SubscriptionQuota: SubscriptionQuota,
        StreamingJob: StreamingJob,
        Sku: Sku,
        JavaScriptFunctionBinding: JavaScriptFunctionBinding,
        AzureMachineLearningWebServiceFunctionBinding: AzureMachineLearningWebServiceFunctionBinding,
        AzureMachineLearningWebServiceInputs: AzureMachineLearningWebServiceInputs,
        AzureMachineLearningWebServiceInputColumn: AzureMachineLearningWebServiceInputColumn,
        AzureMachineLearningWebServiceOutputColumn: AzureMachineLearningWebServiceOutputColumn,
        BlobReferenceInputDataSource: BlobReferenceInputDataSource,
        IoTHubStreamInputDataSource: IoTHubStreamInputDataSource,
        EventHubStreamInputDataSource: EventHubStreamInputDataSource,
        BlobStreamInputDataSource: BlobStreamInputDataSource
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Functions. */
    var Functions = /** @class */ (function () {
        /**
         * Create a Functions.
         * @param {StreamAnalyticsManagementClientContext} client Reference to the service client.
         */
        function Functions(client) {
            this.client = client;
        }
        Functions.prototype.createOrReplace = function (functionParameter, resourceGroupName$$1, jobName$$1, functionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                functionParameter: functionParameter,
                resourceGroupName: resourceGroupName$$1,
                jobName: jobName$$1,
                functionName: functionName$$1,
                options: options
            }, createOrReplaceOperationSpec$3, callback);
        };
        Functions.prototype.update = function (functionParameter, resourceGroupName$$1, jobName$$1, functionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                functionParameter: functionParameter,
                resourceGroupName: resourceGroupName$$1,
                jobName: jobName$$1,
                functionName: functionName$$1,
                options: options
            }, updateOperationSpec$4, callback);
        };
        Functions.prototype.deleteMethod = function (resourceGroupName$$1, jobName$$1, functionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                jobName: jobName$$1,
                functionName: functionName$$1,
                options: options
            }, deleteMethodOperationSpec$2, callback);
        };
        Functions.prototype.get = function (resourceGroupName$$1, jobName$$1, functionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                jobName: jobName$$1,
                functionName: functionName$$1,
                options: options
            }, getOperationSpec$4, callback);
        };
        Functions.prototype.listByStreamingJob = function (resourceGroupName$$1, jobName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                jobName: jobName$$1,
                options: options
            }, listByStreamingJobOperationSpec$2, callback);
        };
        /**
         * Tests if the information provided for a function is valid. This can range from testing the
         * connection to the underlying web service behind the function or making sure the function code
         * provided is syntactically correct.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param jobName The name of the streaming job.
         * @param functionName The name of the function.
         * @param [options] The optional parameters
         * @returns Promise<Models.FunctionsTestResponse>
         */
        Functions.prototype.test = function (resourceGroupName$$1, jobName$$1, functionName$$1, options) {
            return this.beginTest(resourceGroupName$$1, jobName$$1, functionName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Functions.prototype.retrieveDefaultDefinition = function (resourceGroupName$$1, jobName$$1, functionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                jobName: jobName$$1,
                functionName: functionName$$1,
                options: options
            }, retrieveDefaultDefinitionOperationSpec, callback);
        };
        /**
         * Tests if the information provided for a function is valid. This can range from testing the
         * connection to the underlying web service behind the function or making sure the function code
         * provided is syntactically correct.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param jobName The name of the streaming job.
         * @param functionName The name of the function.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Functions.prototype.beginTest = function (resourceGroupName$$1, jobName$$1, functionName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                jobName: jobName$$1,
                functionName: functionName$$1,
                options: options
            }, beginTestOperationSpec$2, options);
        };
        Functions.prototype.listByStreamingJobNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByStreamingJobNextOperationSpec$2, callback);
        };
        return Functions;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var createOrReplaceOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/functions/{functionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobName,
            functionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch,
            ifNoneMatch,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "functionParameter",
            mapper: __assign({}, FunctionModel, { required: true })
        },
        responses: {
            200: {
                bodyMapper: FunctionModel,
                headersMapper: FunctionsCreateOrReplaceHeaders
            },
            201: {
                bodyMapper: FunctionModel,
                headersMapper: FunctionsCreateOrReplaceHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var updateOperationSpec$4 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/functions/{functionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobName,
            functionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "functionParameter",
            mapper: __assign({}, FunctionModel, { required: true })
        },
        responses: {
            200: {
                bodyMapper: FunctionModel,
                headersMapper: FunctionsUpdateHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var deleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/functions/{functionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobName,
            functionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/functions/{functionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobName,
            functionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FunctionModel,
                headersMapper: FunctionsGetHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var listByStreamingJobOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/functions",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobName
        ],
        queryParameters: [
            select,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FunctionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var retrieveDefaultDefinitionOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/functions/{functionName}/RetrieveDefaultDefinition",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobName,
            functionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "functionRetrieveDefaultDefinitionParameters"
            ],
            mapper: FunctionRetrieveDefaultDefinitionParameters
        },
        responses: {
            200: {
                bodyMapper: FunctionModel
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var beginTestOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/functions/{functionName}/test",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobName,
            functionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "functionParameter"
            ],
            mapper: FunctionModel
        },
        responses: {
            200: {
                bodyMapper: ResourceTestStatus
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var listByStreamingJobNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FunctionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        SubscriptionQuotasListResult: SubscriptionQuotasListResult,
        SubscriptionQuota: SubscriptionQuota,
        SubResource: SubResource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Input: Input,
        InputProperties: InputProperties,
        Serialization: Serialization,
        Diagnostics: Diagnostics,
        DiagnosticCondition: DiagnosticCondition,
        Transformation: Transformation,
        Output: Output,
        OutputDataSource: OutputDataSource,
        FunctionModel: FunctionModel,
        FunctionProperties: FunctionProperties,
        Resource: Resource,
        ScalarFunctionProperties: ScalarFunctionProperties,
        FunctionInput: FunctionInput,
        FunctionOutput: FunctionOutput,
        FunctionBinding: FunctionBinding,
        AvroSerialization: AvroSerialization,
        JsonSerialization: JsonSerialization,
        CsvSerialization: CsvSerialization,
        AzureDataLakeStoreOutputDataSource: AzureDataLakeStoreOutputDataSource,
        PowerBIOutputDataSource: PowerBIOutputDataSource,
        ServiceBusTopicOutputDataSource: ServiceBusTopicOutputDataSource,
        ServiceBusQueueOutputDataSource: ServiceBusQueueOutputDataSource,
        DocumentDbOutputDataSource: DocumentDbOutputDataSource,
        AzureSqlDatabaseOutputDataSource: AzureSqlDatabaseOutputDataSource,
        EventHubOutputDataSource: EventHubOutputDataSource,
        AzureTableOutputDataSource: AzureTableOutputDataSource,
        BlobOutputDataSource: BlobOutputDataSource,
        StorageAccount: StorageAccount,
        ReferenceInputProperties: ReferenceInputProperties,
        ReferenceInputDataSource: ReferenceInputDataSource,
        StreamInputProperties: StreamInputProperties,
        StreamInputDataSource: StreamInputDataSource,
        StreamingJob: StreamingJob,
        Sku: Sku,
        JavaScriptFunctionBinding: JavaScriptFunctionBinding,
        AzureMachineLearningWebServiceFunctionBinding: AzureMachineLearningWebServiceFunctionBinding,
        AzureMachineLearningWebServiceInputs: AzureMachineLearningWebServiceInputs,
        AzureMachineLearningWebServiceInputColumn: AzureMachineLearningWebServiceInputColumn,
        AzureMachineLearningWebServiceOutputColumn: AzureMachineLearningWebServiceOutputColumn,
        BlobReferenceInputDataSource: BlobReferenceInputDataSource,
        IoTHubStreamInputDataSource: IoTHubStreamInputDataSource,
        EventHubStreamInputDataSource: EventHubStreamInputDataSource,
        BlobStreamInputDataSource: BlobStreamInputDataSource
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Subscriptions. */
    var Subscriptions = /** @class */ (function () {
        /**
         * Create a Subscriptions.
         * @param {StreamAnalyticsManagementClientContext} client Reference to the service client.
         */
        function Subscriptions(client) {
            this.client = client;
        }
        Subscriptions.prototype.listQuotas = function (location$$1, options, callback) {
            return this.client.sendOperationRequest({
                location: location$$1,
                options: options
            }, listQuotasOperationSpec, callback);
        };
        return Subscriptions;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var listQuotasOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.StreamAnalytics/locations/{location}/quotas",
        urlParameters: [
            location,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SubscriptionQuotasListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-streamanalytics";
    var packageVersion = "1.0.0";
    var StreamAnalyticsManagementClientContext = /** @class */ (function (_super) {
        __extends(StreamAnalyticsManagementClientContext, _super);
        /**
         * Initializes a new instance of the StreamAnalyticsManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The
         * subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function StreamAnalyticsManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2016-03-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return StreamAnalyticsManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var StreamAnalyticsManagementClient = /** @class */ (function (_super) {
        __extends(StreamAnalyticsManagementClient, _super);
        /**
         * Initializes a new instance of the StreamAnalyticsManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The
         * subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function StreamAnalyticsManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.operations = new Operations(_this);
            _this.streamingJobs = new StreamingJobs(_this);
            _this.inputs = new Inputs(_this);
            _this.outputs = new Outputs(_this);
            _this.transformations = new Transformations(_this);
            _this.functions = new Functions(_this);
            _this.subscriptions = new Subscriptions(_this);
            return _this;
        }
        return StreamAnalyticsManagementClient;
    }(StreamAnalyticsManagementClientContext));

    exports.StreamAnalyticsManagementClient = StreamAnalyticsManagementClient;
    exports.StreamAnalyticsManagementClientContext = StreamAnalyticsManagementClientContext;
    exports.StreamAnalyticsManagementModels = index;
    exports.StreamAnalyticsManagementMappers = mappers;
    exports.Operations = Operations;
    exports.StreamingJobs = StreamingJobs;
    exports.Inputs = Inputs;
    exports.Outputs = Outputs;
    exports.Transformations = Transformations;
    exports.Functions = Functions;
    exports.Subscriptions = Subscriptions;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-streamanalytics.js.map
