/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/predictionsMappers";
import * as Parameters from "../models/parameters";
import { CustomerInsightsManagementClientContext } from "../customerInsightsManagementClientContext";

/** Class representing a Predictions. */
export class Predictions {
  private readonly client: CustomerInsightsManagementClientContext;

  /**
   * Create a Predictions.
   * @param {CustomerInsightsManagementClientContext} client Reference to the service client.
   */
  constructor(client: CustomerInsightsManagementClientContext) {
    this.client = client;
  }

  /**
   * Creates a Prediction or updates an existing Prediction in the hub.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param predictionName The name of the Prediction.
   * @param parameters Parameters supplied to the create/update Prediction operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PredictionsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, hubName: string, predictionName: string, parameters: Models.PredictionResourceFormat, options?: msRest.RequestOptionsBase): Promise<Models.PredictionsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,hubName,predictionName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.PredictionsCreateOrUpdateResponse>;
  }

  /**
   * Gets a Prediction in the hub.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param predictionName The name of the Prediction.
   * @param [options] The optional parameters
   * @returns Promise<Models.PredictionsGetResponse>
   */
  get(resourceGroupName: string, hubName: string, predictionName: string, options?: msRest.RequestOptionsBase): Promise<Models.PredictionsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param predictionName The name of the Prediction.
   * @param callback The callback
   */
  get(resourceGroupName: string, hubName: string, predictionName: string, callback: msRest.ServiceCallback<Models.PredictionResourceFormat>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param predictionName The name of the Prediction.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, hubName: string, predictionName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PredictionResourceFormat>): void;
  get(resourceGroupName: string, hubName: string, predictionName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PredictionResourceFormat>, callback?: msRest.ServiceCallback<Models.PredictionResourceFormat>): Promise<Models.PredictionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        hubName,
        predictionName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.PredictionsGetResponse>;
  }

  /**
   * Deletes a Prediction in the hub.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param predictionName The name of the Prediction.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, hubName: string, predictionName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,hubName,predictionName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Gets training results.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param predictionName The name of the Prediction.
   * @param [options] The optional parameters
   * @returns Promise<Models.PredictionsGetTrainingResultsResponse>
   */
  getTrainingResults(resourceGroupName: string, hubName: string, predictionName: string, options?: msRest.RequestOptionsBase): Promise<Models.PredictionsGetTrainingResultsResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param predictionName The name of the Prediction.
   * @param callback The callback
   */
  getTrainingResults(resourceGroupName: string, hubName: string, predictionName: string, callback: msRest.ServiceCallback<Models.PredictionTrainingResults>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param predictionName The name of the Prediction.
   * @param options The optional parameters
   * @param callback The callback
   */
  getTrainingResults(resourceGroupName: string, hubName: string, predictionName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PredictionTrainingResults>): void;
  getTrainingResults(resourceGroupName: string, hubName: string, predictionName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PredictionTrainingResults>, callback?: msRest.ServiceCallback<Models.PredictionTrainingResults>): Promise<Models.PredictionsGetTrainingResultsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        hubName,
        predictionName,
        options
      },
      getTrainingResultsOperationSpec,
      callback) as Promise<Models.PredictionsGetTrainingResultsResponse>;
  }

  /**
   * Gets model status of the prediction.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param predictionName The name of the Prediction.
   * @param [options] The optional parameters
   * @returns Promise<Models.PredictionsGetModelStatusResponse>
   */
  getModelStatus(resourceGroupName: string, hubName: string, predictionName: string, options?: msRest.RequestOptionsBase): Promise<Models.PredictionsGetModelStatusResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param predictionName The name of the Prediction.
   * @param callback The callback
   */
  getModelStatus(resourceGroupName: string, hubName: string, predictionName: string, callback: msRest.ServiceCallback<Models.PredictionModelStatus>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param predictionName The name of the Prediction.
   * @param options The optional parameters
   * @param callback The callback
   */
  getModelStatus(resourceGroupName: string, hubName: string, predictionName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PredictionModelStatus>): void;
  getModelStatus(resourceGroupName: string, hubName: string, predictionName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PredictionModelStatus>, callback?: msRest.ServiceCallback<Models.PredictionModelStatus>): Promise<Models.PredictionsGetModelStatusResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        hubName,
        predictionName,
        options
      },
      getModelStatusOperationSpec,
      callback) as Promise<Models.PredictionsGetModelStatusResponse>;
  }

  /**
   * Creates or updates the model status of prediction.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param predictionName The name of the Prediction.
   * @param parameters Parameters supplied to the create/update prediction model status operation.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  modelStatus(resourceGroupName: string, hubName: string, predictionName: string, parameters: Models.PredictionModelStatus, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param predictionName The name of the Prediction.
   * @param parameters Parameters supplied to the create/update prediction model status operation.
   * @param callback The callback
   */
  modelStatus(resourceGroupName: string, hubName: string, predictionName: string, parameters: Models.PredictionModelStatus, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param predictionName The name of the Prediction.
   * @param parameters Parameters supplied to the create/update prediction model status operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  modelStatus(resourceGroupName: string, hubName: string, predictionName: string, parameters: Models.PredictionModelStatus, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  modelStatus(resourceGroupName: string, hubName: string, predictionName: string, parameters: Models.PredictionModelStatus, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        hubName,
        predictionName,
        parameters,
        options
      },
      modelStatusOperationSpec,
      callback);
  }

  /**
   * Gets all the predictions in the specified hub.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param [options] The optional parameters
   * @returns Promise<Models.PredictionsListByHubResponse>
   */
  listByHub(resourceGroupName: string, hubName: string, options?: msRest.RequestOptionsBase): Promise<Models.PredictionsListByHubResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param callback The callback
   */
  listByHub(resourceGroupName: string, hubName: string, callback: msRest.ServiceCallback<Models.PredictionListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByHub(resourceGroupName: string, hubName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PredictionListResult>): void;
  listByHub(resourceGroupName: string, hubName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PredictionListResult>, callback?: msRest.ServiceCallback<Models.PredictionListResult>): Promise<Models.PredictionsListByHubResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        hubName,
        options
      },
      listByHubOperationSpec,
      callback) as Promise<Models.PredictionsListByHubResponse>;
  }

  /**
   * Creates a Prediction or updates an existing Prediction in the hub.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param predictionName The name of the Prediction.
   * @param parameters Parameters supplied to the create/update Prediction operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, hubName: string, predictionName: string, parameters: Models.PredictionResourceFormat, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        hubName,
        predictionName,
        parameters,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Deletes a Prediction in the hub.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param predictionName The name of the Prediction.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, hubName: string, predictionName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        hubName,
        predictionName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Gets all the predictions in the specified hub.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PredictionsListByHubNextResponse>
   */
  listByHubNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PredictionsListByHubNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByHubNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PredictionListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByHubNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PredictionListResult>): void;
  listByHubNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PredictionListResult>, callback?: msRest.ServiceCallback<Models.PredictionListResult>): Promise<Models.PredictionsListByHubNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByHubNextOperationSpec,
      callback) as Promise<Models.PredictionsListByHubNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/predictions/{predictionName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.hubName1,
    Parameters.predictionName1,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PredictionResourceFormat
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getTrainingResultsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/predictions/{predictionName}/getTrainingResults",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.hubName1,
    Parameters.predictionName1,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PredictionTrainingResults
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getModelStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/predictions/{predictionName}/getModelStatus",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.hubName1,
    Parameters.predictionName1,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PredictionModelStatus
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const modelStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/predictions/{predictionName}/modelStatus",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.hubName1,
    Parameters.predictionName1,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.PredictionModelStatus,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByHubOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/predictions",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.hubName1,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PredictionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/predictions/{predictionName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.hubName1,
    Parameters.predictionName0,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.PredictionResourceFormat,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PredictionResourceFormat
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/predictions/{predictionName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.hubName1,
    Parameters.predictionName1,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByHubNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PredictionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
