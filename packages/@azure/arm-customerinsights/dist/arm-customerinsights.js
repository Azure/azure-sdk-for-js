/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmCustomerinsights = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for EntityTypes.
     * Possible values include: 'None', 'Profile', 'Interaction', 'Relationship'
     * @readonly
     * @enum {string}
     */
    var EntityTypes;
    (function (EntityTypes) {
        EntityTypes["None"] = "None";
        EntityTypes["Profile"] = "Profile";
        EntityTypes["Interaction"] = "Interaction";
        EntityTypes["Relationship"] = "Relationship";
    })(EntityTypes || (EntityTypes = {}));
    /**
     * Defines values for DataSourceType.
     * Possible values include: 'Connector', 'LinkInteraction', 'SystemDefault'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: DataSourceType =
     * <DataSourceType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var DataSourceType;
    (function (DataSourceType) {
        DataSourceType["Connector"] = "Connector";
        DataSourceType["LinkInteraction"] = "LinkInteraction";
        DataSourceType["SystemDefault"] = "SystemDefault";
    })(DataSourceType || (DataSourceType = {}));
    /**
     * Defines values for Status.
     * Possible values include: 'None', 'Active', 'Deleted'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Status = <Status>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Status;
    (function (Status) {
        Status["None"] = "None";
        Status["Active"] = "Active";
        Status["Deleted"] = "Deleted";
    })(Status || (Status = {}));
    /**
     * Defines values for ProvisioningStates.
     * Possible values include: 'Provisioning', 'Succeeded', 'Expiring',
     * 'Deleting', 'HumanIntervention', 'Failed'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ProvisioningStates =
     * <ProvisioningStates>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ProvisioningStates;
    (function (ProvisioningStates) {
        ProvisioningStates["Provisioning"] = "Provisioning";
        ProvisioningStates["Succeeded"] = "Succeeded";
        ProvisioningStates["Expiring"] = "Expiring";
        ProvisioningStates["Deleting"] = "Deleting";
        ProvisioningStates["HumanIntervention"] = "HumanIntervention";
        ProvisioningStates["Failed"] = "Failed";
    })(ProvisioningStates || (ProvisioningStates = {}));
    /**
     * Defines values for PermissionTypes.
     * Possible values include: 'Read', 'Write', 'Manage'
     * @readonly
     * @enum {string}
     */
    var PermissionTypes;
    (function (PermissionTypes) {
        PermissionTypes["Read"] = "Read";
        PermissionTypes["Write"] = "Write";
        PermissionTypes["Manage"] = "Manage";
    })(PermissionTypes || (PermissionTypes = {}));
    /**
     * Defines values for ConnectorTypes.
     * Possible values include: 'None', 'CRM', 'AzureBlob', 'Salesforce',
     * 'ExchangeOnline', 'Outbound'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ConnectorTypes =
     * <ConnectorTypes>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ConnectorTypes;
    (function (ConnectorTypes) {
        ConnectorTypes["None"] = "None";
        ConnectorTypes["CRM"] = "CRM";
        ConnectorTypes["AzureBlob"] = "AzureBlob";
        ConnectorTypes["Salesforce"] = "Salesforce";
        ConnectorTypes["ExchangeOnline"] = "ExchangeOnline";
        ConnectorTypes["Outbound"] = "Outbound";
    })(ConnectorTypes || (ConnectorTypes = {}));
    /**
     * Defines values for ConnectorStates.
     * Possible values include: 'Creating', 'Created', 'Ready', 'Expiring',
     * 'Deleting', 'Failed'
     * @readonly
     * @enum {string}
     */
    var ConnectorStates;
    (function (ConnectorStates) {
        ConnectorStates["Creating"] = "Creating";
        ConnectorStates["Created"] = "Created";
        ConnectorStates["Ready"] = "Ready";
        ConnectorStates["Expiring"] = "Expiring";
        ConnectorStates["Deleting"] = "Deleting";
        ConnectorStates["Failed"] = "Failed";
    })(ConnectorStates || (ConnectorStates = {}));
    /**
     * Defines values for ErrorManagementTypes.
     * Possible values include: 'RejectAndContinue', 'StopImport',
     * 'RejectUntilLimit'
     * @readonly
     * @enum {string}
     */
    var ErrorManagementTypes;
    (function (ErrorManagementTypes) {
        ErrorManagementTypes["RejectAndContinue"] = "RejectAndContinue";
        ErrorManagementTypes["StopImport"] = "StopImport";
        ErrorManagementTypes["RejectUntilLimit"] = "RejectUntilLimit";
    })(ErrorManagementTypes || (ErrorManagementTypes = {}));
    /**
     * Defines values for FrequencyTypes.
     * Possible values include: 'Minute', 'Hour', 'Day', 'Week', 'Month'
     * @readonly
     * @enum {string}
     */
    var FrequencyTypes;
    (function (FrequencyTypes) {
        FrequencyTypes["Minute"] = "Minute";
        FrequencyTypes["Hour"] = "Hour";
        FrequencyTypes["Day"] = "Day";
        FrequencyTypes["Week"] = "Week";
        FrequencyTypes["Month"] = "Month";
    })(FrequencyTypes || (FrequencyTypes = {}));
    /**
     * Defines values for CompletionOperationTypes.
     * Possible values include: 'DoNothing', 'DeleteFile', 'MoveFile'
     * @readonly
     * @enum {string}
     */
    var CompletionOperationTypes;
    (function (CompletionOperationTypes) {
        CompletionOperationTypes["DoNothing"] = "DoNothing";
        CompletionOperationTypes["DeleteFile"] = "DeleteFile";
        CompletionOperationTypes["MoveFile"] = "MoveFile";
    })(CompletionOperationTypes || (CompletionOperationTypes = {}));
    /**
     * Defines values for ConnectorMappingStates.
     * Possible values include: 'Creating', 'Created', 'Failed', 'Ready',
     * 'Running', 'Stopped', 'Expiring'
     * @readonly
     * @enum {string}
     */
    var ConnectorMappingStates;
    (function (ConnectorMappingStates) {
        ConnectorMappingStates["Creating"] = "Creating";
        ConnectorMappingStates["Created"] = "Created";
        ConnectorMappingStates["Failed"] = "Failed";
        ConnectorMappingStates["Ready"] = "Ready";
        ConnectorMappingStates["Running"] = "Running";
        ConnectorMappingStates["Stopped"] = "Stopped";
        ConnectorMappingStates["Expiring"] = "Expiring";
    })(ConnectorMappingStates || (ConnectorMappingStates = {}));
    /**
     * Defines values for CalculationWindowTypes.
     * Possible values include: 'Lifetime', 'Hour', 'Day', 'Week', 'Month'
     * @readonly
     * @enum {string}
     */
    var CalculationWindowTypes;
    (function (CalculationWindowTypes) {
        CalculationWindowTypes["Lifetime"] = "Lifetime";
        CalculationWindowTypes["Hour"] = "Hour";
        CalculationWindowTypes["Day"] = "Day";
        CalculationWindowTypes["Week"] = "Week";
        CalculationWindowTypes["Month"] = "Month";
    })(CalculationWindowTypes || (CalculationWindowTypes = {}));
    /**
     * Defines values for KpiFunctions.
     * Possible values include: 'Sum', 'Avg', 'Min', 'Max', 'Last', 'Count',
     * 'None', 'CountDistinct'
     * @readonly
     * @enum {string}
     */
    var KpiFunctions;
    (function (KpiFunctions) {
        KpiFunctions["Sum"] = "Sum";
        KpiFunctions["Avg"] = "Avg";
        KpiFunctions["Min"] = "Min";
        KpiFunctions["Max"] = "Max";
        KpiFunctions["Last"] = "Last";
        KpiFunctions["Count"] = "Count";
        KpiFunctions["None"] = "None";
        KpiFunctions["CountDistinct"] = "CountDistinct";
    })(KpiFunctions || (KpiFunctions = {}));
    /**
     * Defines values for EntityType.
     * Possible values include: 'None', 'Profile', 'Interaction', 'Relationship'
     * @readonly
     * @enum {string}
     */
    var EntityType;
    (function (EntityType) {
        EntityType["None"] = "None";
        EntityType["Profile"] = "Profile";
        EntityType["Interaction"] = "Interaction";
        EntityType["Relationship"] = "Relationship";
    })(EntityType || (EntityType = {}));
    /**
     * Defines values for LinkTypes.
     * Possible values include: 'UpdateAlways', 'CopyIfNull'
     * @readonly
     * @enum {string}
     */
    var LinkTypes;
    (function (LinkTypes) {
        LinkTypes["UpdateAlways"] = "UpdateAlways";
        LinkTypes["CopyIfNull"] = "CopyIfNull";
    })(LinkTypes || (LinkTypes = {}));
    /**
     * Defines values for InstanceOperationType.
     * Possible values include: 'Upsert', 'Delete'
     * @readonly
     * @enum {string}
     */
    var InstanceOperationType;
    (function (InstanceOperationType) {
        InstanceOperationType["Upsert"] = "Upsert";
        InstanceOperationType["Delete"] = "Delete";
    })(InstanceOperationType || (InstanceOperationType = {}));
    /**
     * Defines values for CardinalityTypes.
     * Possible values include: 'OneToOne', 'OneToMany', 'ManyToMany'
     * @readonly
     * @enum {string}
     */
    var CardinalityTypes;
    (function (CardinalityTypes) {
        CardinalityTypes["OneToOne"] = "OneToOne";
        CardinalityTypes["OneToMany"] = "OneToMany";
        CardinalityTypes["ManyToMany"] = "ManyToMany";
    })(CardinalityTypes || (CardinalityTypes = {}));
    /**
     * Defines values for RoleTypes.
     * Possible values include: 'Admin', 'Reader', 'ManageAdmin', 'ManageReader',
     * 'DataAdmin', 'DataReader'
     * @readonly
     * @enum {string}
     */
    var RoleTypes;
    (function (RoleTypes) {
        RoleTypes["Admin"] = "Admin";
        RoleTypes["Reader"] = "Reader";
        RoleTypes["ManageAdmin"] = "ManageAdmin";
        RoleTypes["ManageReader"] = "ManageReader";
        RoleTypes["DataAdmin"] = "DataAdmin";
        RoleTypes["DataReader"] = "DataReader";
    })(RoleTypes || (RoleTypes = {}));
    /**
     * Defines values for CanonicalPropertyValueType.
     * Possible values include: 'Numeric', 'Categorical', 'DerivedCategorical',
     * 'DerivedNumeric'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: CanonicalPropertyValueType =
     * <CanonicalPropertyValueType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var CanonicalPropertyValueType;
    (function (CanonicalPropertyValueType) {
        CanonicalPropertyValueType["Numeric"] = "Numeric";
        CanonicalPropertyValueType["Categorical"] = "Categorical";
        CanonicalPropertyValueType["DerivedCategorical"] = "DerivedCategorical";
        CanonicalPropertyValueType["DerivedNumeric"] = "DerivedNumeric";
    })(CanonicalPropertyValueType || (CanonicalPropertyValueType = {}));
    /**
     * Defines values for PredictionModelLifeCycle.
     * Possible values include: 'New', 'Provisioning', 'ProvisioningFailed',
     * 'PendingDiscovering', 'Discovering', 'PendingFeaturing', 'Featuring',
     * 'FeaturingFailed', 'PendingTraining', 'Training', 'TrainingFailed',
     * 'Evaluating', 'EvaluatingFailed', 'PendingModelConfirmation', 'Active',
     * 'Deleted', 'HumanIntervention', 'Failed'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: PredictionModelLifeCycle =
     * <PredictionModelLifeCycle>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var PredictionModelLifeCycle;
    (function (PredictionModelLifeCycle) {
        PredictionModelLifeCycle["New"] = "New";
        PredictionModelLifeCycle["Provisioning"] = "Provisioning";
        PredictionModelLifeCycle["ProvisioningFailed"] = "ProvisioningFailed";
        PredictionModelLifeCycle["PendingDiscovering"] = "PendingDiscovering";
        PredictionModelLifeCycle["Discovering"] = "Discovering";
        PredictionModelLifeCycle["PendingFeaturing"] = "PendingFeaturing";
        PredictionModelLifeCycle["Featuring"] = "Featuring";
        PredictionModelLifeCycle["FeaturingFailed"] = "FeaturingFailed";
        PredictionModelLifeCycle["PendingTraining"] = "PendingTraining";
        PredictionModelLifeCycle["Training"] = "Training";
        PredictionModelLifeCycle["TrainingFailed"] = "TrainingFailed";
        PredictionModelLifeCycle["Evaluating"] = "Evaluating";
        PredictionModelLifeCycle["EvaluatingFailed"] = "EvaluatingFailed";
        PredictionModelLifeCycle["PendingModelConfirmation"] = "PendingModelConfirmation";
        PredictionModelLifeCycle["Active"] = "Active";
        PredictionModelLifeCycle["Deleted"] = "Deleted";
        PredictionModelLifeCycle["HumanIntervention"] = "HumanIntervention";
        PredictionModelLifeCycle["Failed"] = "Failed";
    })(PredictionModelLifeCycle || (PredictionModelLifeCycle = {}));

    var index = /*#__PURE__*/Object.freeze({
        get EntityTypes () { return EntityTypes; },
        get DataSourceType () { return DataSourceType; },
        get Status () { return Status; },
        get ProvisioningStates () { return ProvisioningStates; },
        get PermissionTypes () { return PermissionTypes; },
        get ConnectorTypes () { return ConnectorTypes; },
        get ConnectorStates () { return ConnectorStates; },
        get ErrorManagementTypes () { return ErrorManagementTypes; },
        get FrequencyTypes () { return FrequencyTypes; },
        get CompletionOperationTypes () { return CompletionOperationTypes; },
        get ConnectorMappingStates () { return ConnectorMappingStates; },
        get CalculationWindowTypes () { return CalculationWindowTypes; },
        get KpiFunctions () { return KpiFunctions; },
        get EntityType () { return EntityType; },
        get LinkTypes () { return LinkTypes; },
        get InstanceOperationType () { return InstanceOperationType; },
        get CardinalityTypes () { return CardinalityTypes; },
        get RoleTypes () { return RoleTypes; },
        get CanonicalPropertyValueType () { return CanonicalPropertyValueType; },
        get PredictionModelLifeCycle () { return PredictionModelLifeCycle; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var HubBillingInfoFormat = {
        serializedName: "HubBillingInfoFormat",
        type: {
            name: "Composite",
            className: "HubBillingInfoFormat",
            modelProperties: {
                skuName: {
                    serializedName: "skuName",
                    type: {
                        name: "String"
                    }
                },
                minUnits: {
                    serializedName: "minUnits",
                    constraints: {
                        InclusiveMaximum: 10,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                maxUnits: {
                    serializedName: "maxUnits",
                    constraints: {
                        InclusiveMaximum: 10,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var HubPropertiesFormat = {
        serializedName: "HubPropertiesFormat",
        type: {
            name: "Composite",
            className: "HubPropertiesFormat",
            modelProperties: {
                apiEndpoint: {
                    readOnly: true,
                    serializedName: "apiEndpoint",
                    type: {
                        name: "String"
                    }
                },
                webEndpoint: {
                    readOnly: true,
                    serializedName: "webEndpoint",
                    type: {
                        name: "String"
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                tenantFeatures: {
                    serializedName: "tenantFeatures",
                    type: {
                        name: "Number"
                    }
                },
                hubBillingInfo: {
                    serializedName: "hubBillingInfo",
                    type: {
                        name: "Composite",
                        className: "HubBillingInfoFormat"
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var Hub = {
        serializedName: "Hub",
        type: {
            name: "Composite",
            className: "Hub",
            modelProperties: __assign({}, Resource.type.modelProperties, { apiEndpoint: {
                    readOnly: true,
                    serializedName: "properties.apiEndpoint",
                    type: {
                        name: "String"
                    }
                }, webEndpoint: {
                    readOnly: true,
                    serializedName: "properties.webEndpoint",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, tenantFeatures: {
                    serializedName: "properties.tenantFeatures",
                    type: {
                        name: "Number"
                    }
                }, hubBillingInfo: {
                    serializedName: "properties.hubBillingInfo",
                    type: {
                        name: "Composite",
                        className: "HubBillingInfoFormat"
                    }
                } })
        }
    };
    var MetadataDefinitionBase = {
        serializedName: "MetadataDefinitionBase",
        type: {
            name: "Composite",
            className: "MetadataDefinitionBase",
            modelProperties: {
                attributes: {
                    serializedName: "attributes",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Sequence",
                                element: {
                                    type: {
                                        name: "String"
                                    }
                                }
                            }
                        }
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                localizedAttributes: {
                    serializedName: "localizedAttributes",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Dictionary",
                                value: {
                                    type: {
                                        name: "String"
                                    }
                                }
                            }
                        }
                    }
                },
                smallImage: {
                    serializedName: "smallImage",
                    type: {
                        name: "String"
                    }
                },
                mediumImage: {
                    serializedName: "mediumImage",
                    type: {
                        name: "String"
                    }
                },
                largeImage: {
                    serializedName: "largeImage",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProfileEnumValidValuesFormat = {
        serializedName: "ProfileEnumValidValuesFormat",
        type: {
            name: "Composite",
            className: "ProfileEnumValidValuesFormat",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Number"
                    }
                },
                localizedValueNames: {
                    serializedName: "localizedValueNames",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var DataSource = {
        serializedName: "DataSource",
        type: {
            name: "Composite",
            className: "DataSource",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                dataSourceType: {
                    readOnly: true,
                    serializedName: "dataSourceType",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "Number"
                    }
                },
                dataSourceReferenceId: {
                    readOnly: true,
                    serializedName: "dataSourceReferenceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DataSourcePrecedence = {
        serializedName: "DataSourcePrecedence",
        type: {
            name: "Composite",
            className: "DataSourcePrecedence",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "dataSource.name",
                    type: {
                        name: "String"
                    }
                },
                dataSourceType: {
                    readOnly: true,
                    serializedName: "dataSource.dataSourceType",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "dataSource.status",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    readOnly: true,
                    serializedName: "dataSource.id",
                    type: {
                        name: "Number"
                    }
                },
                dataSourceReferenceId: {
                    readOnly: true,
                    serializedName: "dataSource.dataSourceReferenceId",
                    type: {
                        name: "String"
                    }
                },
                precedence: {
                    serializedName: "precedence",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var PropertyDefinition = {
        serializedName: "PropertyDefinition",
        type: {
            name: "Composite",
            className: "PropertyDefinition",
            modelProperties: {
                arrayValueSeparator: {
                    serializedName: "arrayValueSeparator",
                    type: {
                        name: "String"
                    }
                },
                enumValidValues: {
                    serializedName: "enumValidValues",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ProfileEnumValidValuesFormat"
                            }
                        }
                    }
                },
                fieldName: {
                    required: true,
                    serializedName: "fieldName",
                    type: {
                        name: "String"
                    }
                },
                fieldType: {
                    required: true,
                    serializedName: "fieldType",
                    type: {
                        name: "String"
                    }
                },
                isArray: {
                    serializedName: "isArray",
                    type: {
                        name: "Boolean"
                    }
                },
                isEnum: {
                    serializedName: "isEnum",
                    type: {
                        name: "Boolean"
                    }
                },
                isFlagEnum: {
                    serializedName: "isFlagEnum",
                    type: {
                        name: "Boolean"
                    }
                },
                isImage: {
                    serializedName: "isImage",
                    type: {
                        name: "Boolean"
                    }
                },
                isLocalizedString: {
                    serializedName: "isLocalizedString",
                    type: {
                        name: "Boolean"
                    }
                },
                isName: {
                    serializedName: "isName",
                    type: {
                        name: "Boolean"
                    }
                },
                isRequired: {
                    serializedName: "isRequired",
                    type: {
                        name: "Boolean"
                    }
                },
                propertyId: {
                    serializedName: "propertyId",
                    type: {
                        name: "String"
                    }
                },
                schemaItemPropLink: {
                    serializedName: "schemaItemPropLink",
                    type: {
                        name: "String"
                    }
                },
                maxLength: {
                    serializedName: "maxLength",
                    type: {
                        name: "Number"
                    }
                },
                isAvailableInGraph: {
                    serializedName: "isAvailableInGraph",
                    type: {
                        name: "Boolean"
                    }
                },
                dataSourcePrecedenceRules: {
                    readOnly: true,
                    serializedName: "dataSourcePrecedenceRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DataSourcePrecedence"
                            }
                        }
                    }
                }
            }
        }
    };
    var EntityTypeDefinition = {
        serializedName: "EntityTypeDefinition",
        type: {
            name: "Composite",
            className: "EntityTypeDefinition",
            modelProperties: __assign({}, MetadataDefinitionBase.type.modelProperties, { apiEntitySetName: {
                    serializedName: "apiEntitySetName",
                    type: {
                        name: "String"
                    }
                }, entityType: {
                    serializedName: "entityType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "Profile",
                            "Interaction",
                            "Relationship"
                        ]
                    }
                }, fields: {
                    serializedName: "fields",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PropertyDefinition"
                            }
                        }
                    }
                }, instancesCount: {
                    serializedName: "instancesCount",
                    type: {
                        name: "Number"
                    }
                }, lastChangedUtc: {
                    readOnly: true,
                    serializedName: "lastChangedUtc",
                    type: {
                        name: "DateTime"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                }, schemaItemTypeLink: {
                    serializedName: "schemaItemTypeLink",
                    type: {
                        name: "String"
                    }
                }, tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                }, timestampFieldName: {
                    serializedName: "timestampFieldName",
                    type: {
                        name: "String"
                    }
                }, typeName: {
                    serializedName: "typeName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var AuthorizationPolicy = {
        serializedName: "AuthorizationPolicy",
        type: {
            name: "Composite",
            className: "AuthorizationPolicy",
            modelProperties: {
                policyName: {
                    readOnly: true,
                    serializedName: "policyName",
                    type: {
                        name: "String"
                    }
                },
                permissions: {
                    required: true,
                    serializedName: "permissions",
                    constraints: {
                        UniqueItems: true
                    },
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Enum",
                                allowedValues: [
                                    "Read",
                                    "Write",
                                    "Manage"
                                ]
                            }
                        }
                    }
                },
                primaryKey: {
                    serializedName: "primaryKey",
                    type: {
                        name: "String"
                    }
                },
                secondaryKey: {
                    serializedName: "secondaryKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SalesforceDiscoverSetting = {
        serializedName: "SalesforceDiscoverSetting",
        type: {
            name: "Composite",
            className: "SalesforceDiscoverSetting",
            modelProperties: {
                salesforceConnectionStringSecretUrl: {
                    required: true,
                    serializedName: "salesforceConnectionStringSecretUrl",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SalesforceTable = {
        serializedName: "SalesforceTable",
        type: {
            name: "Composite",
            className: "SalesforceTable",
            modelProperties: {
                isProfile: {
                    serializedName: "isProfile",
                    type: {
                        name: "String"
                    }
                },
                tableCategory: {
                    required: true,
                    serializedName: "tableCategory",
                    type: {
                        name: "String"
                    }
                },
                tableName: {
                    required: true,
                    serializedName: "tableName",
                    type: {
                        name: "String"
                    }
                },
                tableRemarks: {
                    serializedName: "tableRemarks",
                    type: {
                        name: "String"
                    }
                },
                tableSchema: {
                    required: true,
                    serializedName: "tableSchema",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SalesforceConnectorProperties = {
        serializedName: "SalesforceConnectorProperties",
        type: {
            name: "Composite",
            className: "SalesforceConnectorProperties",
            modelProperties: {
                usersetting: {
                    required: true,
                    serializedName: "usersetting",
                    type: {
                        name: "Composite",
                        className: "SalesforceDiscoverSetting"
                    }
                },
                salesforcetables: {
                    required: true,
                    serializedName: "salesforcetables",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SalesforceTable"
                            }
                        }
                    }
                }
            }
        }
    };
    var AzureBlobConnectorProperties = {
        serializedName: "AzureBlobConnectorProperties",
        type: {
            name: "Composite",
            className: "AzureBlobConnectorProperties",
            modelProperties: {
                connectionKeyVaultUrl: {
                    required: true,
                    serializedName: "connectionKeyVaultUrl",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CrmConnectorEntities = {
        serializedName: "CrmConnectorEntities",
        type: {
            name: "Composite",
            className: "CrmConnectorEntities",
            modelProperties: {
                logicalName: {
                    required: true,
                    serializedName: "logicalName",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                isProfile: {
                    serializedName: "isProfile",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var CrmConnectorProperties = {
        serializedName: "CrmConnectorProperties",
        type: {
            name: "Composite",
            className: "CrmConnectorProperties",
            modelProperties: {
                connectionString: {
                    serializedName: "connectionString",
                    type: {
                        name: "String"
                    }
                },
                organizationId: {
                    required: true,
                    serializedName: "organizationId",
                    type: {
                        name: "String"
                    }
                },
                organizationUrl: {
                    required: true,
                    serializedName: "organizationUrl",
                    type: {
                        name: "String"
                    }
                },
                entities: {
                    required: true,
                    serializedName: "entities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CrmConnectorEntities"
                            }
                        }
                    }
                },
                accessToken: {
                    serializedName: "accessToken",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Connector = {
        serializedName: "Connector",
        type: {
            name: "Composite",
            className: "Connector",
            modelProperties: {
                connectorId: {
                    readOnly: true,
                    serializedName: "connectorId",
                    type: {
                        name: "Number"
                    }
                },
                connectorName: {
                    serializedName: "connectorName",
                    type: {
                        name: "String"
                    }
                },
                connectorType: {
                    required: true,
                    serializedName: "connectorType",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                connectorProperties: {
                    required: true,
                    serializedName: "connectorProperties",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                },
                created: {
                    readOnly: true,
                    serializedName: "created",
                    type: {
                        name: "DateTime"
                    }
                },
                lastModified: {
                    readOnly: true,
                    serializedName: "lastModified",
                    type: {
                        name: "DateTime"
                    }
                },
                state: {
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Creating",
                            "Created",
                            "Ready",
                            "Expiring",
                            "Deleting",
                            "Failed"
                        ]
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                isInternal: {
                    serializedName: "isInternal",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var ConnectorMappingErrorManagement = {
        serializedName: "ConnectorMappingErrorManagement",
        type: {
            name: "Composite",
            className: "ConnectorMappingErrorManagement",
            modelProperties: {
                errorManagementType: {
                    required: true,
                    serializedName: "errorManagementType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "RejectAndContinue",
                            "StopImport",
                            "RejectUntilLimit"
                        ]
                    }
                },
                errorLimit: {
                    serializedName: "errorLimit",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ConnectorMappingFormat = {
        serializedName: "ConnectorMappingFormat",
        type: {
            name: "Composite",
            className: "ConnectorMappingFormat",
            modelProperties: {
                formatType: {
                    required: true,
                    isConstant: true,
                    serializedName: "formatType",
                    defaultValue: 'TextFormat',
                    type: {
                        name: "String"
                    }
                },
                columnDelimiter: {
                    serializedName: "columnDelimiter",
                    type: {
                        name: "String"
                    }
                },
                acceptLanguage: {
                    serializedName: "acceptLanguage",
                    type: {
                        name: "String"
                    }
                },
                quoteCharacter: {
                    serializedName: "quoteCharacter",
                    type: {
                        name: "String"
                    }
                },
                quoteEscapeCharacter: {
                    serializedName: "quoteEscapeCharacter",
                    type: {
                        name: "String"
                    }
                },
                arraySeparator: {
                    serializedName: "arraySeparator",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ConnectorMappingAvailability = {
        serializedName: "ConnectorMappingAvailability",
        type: {
            name: "Composite",
            className: "ConnectorMappingAvailability",
            modelProperties: {
                frequency: {
                    serializedName: "frequency",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Minute",
                            "Hour",
                            "Day",
                            "Week",
                            "Month"
                        ]
                    }
                },
                interval: {
                    required: true,
                    serializedName: "interval",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ConnectorMappingStructure = {
        serializedName: "ConnectorMappingStructure",
        type: {
            name: "Composite",
            className: "ConnectorMappingStructure",
            modelProperties: {
                propertyName: {
                    required: true,
                    serializedName: "propertyName",
                    type: {
                        name: "String"
                    }
                },
                columnName: {
                    required: true,
                    serializedName: "columnName",
                    type: {
                        name: "String"
                    }
                },
                customFormatSpecifier: {
                    serializedName: "customFormatSpecifier",
                    type: {
                        name: "String"
                    }
                },
                isEncrypted: {
                    serializedName: "isEncrypted",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var ConnectorMappingCompleteOperation = {
        serializedName: "ConnectorMappingCompleteOperation",
        type: {
            name: "Composite",
            className: "ConnectorMappingCompleteOperation",
            modelProperties: {
                completionOperationType: {
                    serializedName: "completionOperationType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "DoNothing",
                            "DeleteFile",
                            "MoveFile"
                        ]
                    }
                },
                destinationFolder: {
                    serializedName: "destinationFolder",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ConnectorMappingProperties = {
        serializedName: "ConnectorMappingProperties",
        type: {
            name: "Composite",
            className: "ConnectorMappingProperties",
            modelProperties: {
                folderPath: {
                    serializedName: "folderPath",
                    type: {
                        name: "String"
                    }
                },
                fileFilter: {
                    serializedName: "fileFilter",
                    type: {
                        name: "String"
                    }
                },
                hasHeader: {
                    serializedName: "hasHeader",
                    type: {
                        name: "Boolean"
                    }
                },
                errorManagement: {
                    required: true,
                    serializedName: "errorManagement",
                    type: {
                        name: "Composite",
                        className: "ConnectorMappingErrorManagement"
                    }
                },
                format: {
                    required: true,
                    serializedName: "format",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "ConnectorMappingFormat"
                    }
                },
                availability: {
                    required: true,
                    serializedName: "availability",
                    type: {
                        name: "Composite",
                        className: "ConnectorMappingAvailability"
                    }
                },
                structure: {
                    required: true,
                    serializedName: "structure",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ConnectorMappingStructure"
                            }
                        }
                    }
                },
                completeOperation: {
                    required: true,
                    serializedName: "completeOperation",
                    type: {
                        name: "Composite",
                        className: "ConnectorMappingCompleteOperation"
                    }
                }
            }
        }
    };
    var ConnectorMapping = {
        serializedName: "ConnectorMapping",
        type: {
            name: "Composite",
            className: "ConnectorMapping",
            modelProperties: {
                connectorName: {
                    readOnly: true,
                    serializedName: "connectorName",
                    type: {
                        name: "String"
                    }
                },
                connectorType: {
                    serializedName: "connectorType",
                    type: {
                        name: "String"
                    }
                },
                created: {
                    readOnly: true,
                    serializedName: "created",
                    type: {
                        name: "DateTime"
                    }
                },
                lastModified: {
                    readOnly: true,
                    serializedName: "lastModified",
                    type: {
                        name: "DateTime"
                    }
                },
                entityType: {
                    required: true,
                    serializedName: "entityType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "Profile",
                            "Interaction",
                            "Relationship"
                        ]
                    }
                },
                entityTypeName: {
                    required: true,
                    serializedName: "entityTypeName",
                    type: {
                        name: "String"
                    }
                },
                connectorMappingName: {
                    readOnly: true,
                    serializedName: "connectorMappingName",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                dataFormatId: {
                    readOnly: true,
                    serializedName: "dataFormatId",
                    type: {
                        name: "String"
                    }
                },
                mappingProperties: {
                    required: true,
                    serializedName: "mappingProperties",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "ConnectorMappingProperties"
                    }
                },
                nextRunTime: {
                    readOnly: true,
                    serializedName: "nextRunTime",
                    type: {
                        name: "DateTime"
                    }
                },
                runId: {
                    readOnly: true,
                    serializedName: "runId",
                    type: {
                        name: "String"
                    }
                },
                state: {
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Creating",
                            "Created",
                            "Failed",
                            "Ready",
                            "Running",
                            "Stopped",
                            "Expiring"
                        ]
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var KpiThresholds = {
        serializedName: "KpiThresholds",
        type: {
            name: "Composite",
            className: "KpiThresholds",
            modelProperties: {
                lowerLimit: {
                    required: true,
                    serializedName: "lowerLimit",
                    type: {
                        name: "Number"
                    }
                },
                upperLimit: {
                    required: true,
                    serializedName: "upperLimit",
                    type: {
                        name: "Number"
                    }
                },
                increasingKpi: {
                    required: true,
                    serializedName: "increasingKpi",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var KpiGroupByMetadata = {
        serializedName: "KpiGroupByMetadata",
        type: {
            name: "Composite",
            className: "KpiGroupByMetadata",
            modelProperties: {
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                fieldName: {
                    serializedName: "fieldName",
                    type: {
                        name: "String"
                    }
                },
                fieldType: {
                    serializedName: "fieldType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var KpiParticipantProfilesMetadata = {
        serializedName: "KpiParticipantProfilesMetadata",
        type: {
            name: "Composite",
            className: "KpiParticipantProfilesMetadata",
            modelProperties: {
                typeName: {
                    required: true,
                    serializedName: "typeName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var KpiAlias = {
        serializedName: "KpiAlias",
        type: {
            name: "Composite",
            className: "KpiAlias",
            modelProperties: {
                aliasName: {
                    required: true,
                    serializedName: "aliasName",
                    type: {
                        name: "String"
                    }
                },
                expression: {
                    required: true,
                    serializedName: "expression",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var KpiExtract = {
        serializedName: "KpiExtract",
        type: {
            name: "Composite",
            className: "KpiExtract",
            modelProperties: {
                extractName: {
                    required: true,
                    serializedName: "extractName",
                    type: {
                        name: "String"
                    }
                },
                expression: {
                    required: true,
                    serializedName: "expression",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var KpiDefinition = {
        serializedName: "KpiDefinition",
        type: {
            name: "Composite",
            className: "KpiDefinition",
            modelProperties: {
                entityType: {
                    required: true,
                    serializedName: "entityType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "Profile",
                            "Interaction",
                            "Relationship"
                        ]
                    }
                },
                entityTypeName: {
                    required: true,
                    serializedName: "entityTypeName",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                kpiName: {
                    readOnly: true,
                    serializedName: "kpiName",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                calculationWindow: {
                    required: true,
                    serializedName: "calculationWindow",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Lifetime",
                            "Hour",
                            "Day",
                            "Week",
                            "Month"
                        ]
                    }
                },
                calculationWindowFieldName: {
                    serializedName: "calculationWindowFieldName",
                    type: {
                        name: "String"
                    }
                },
                functionProperty: {
                    required: true,
                    serializedName: "function",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Sum",
                            "Avg",
                            "Min",
                            "Max",
                            "Last",
                            "Count",
                            "None",
                            "CountDistinct"
                        ]
                    }
                },
                expression: {
                    required: true,
                    serializedName: "expression",
                    type: {
                        name: "String"
                    }
                },
                unit: {
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                filter: {
                    serializedName: "filter",
                    type: {
                        name: "String"
                    }
                },
                groupBy: {
                    serializedName: "groupBy",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                groupByMetadata: {
                    readOnly: true,
                    serializedName: "groupByMetadata",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "KpiGroupByMetadata"
                            }
                        }
                    }
                },
                participantProfilesMetadata: {
                    readOnly: true,
                    serializedName: "participantProfilesMetadata",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "KpiParticipantProfilesMetadata"
                            }
                        }
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                thresHolds: {
                    serializedName: "thresHolds",
                    type: {
                        name: "Composite",
                        className: "KpiThresholds"
                    }
                },
                aliases: {
                    serializedName: "aliases",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "KpiAlias"
                            }
                        }
                    }
                },
                extracts: {
                    serializedName: "extracts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "KpiExtract"
                            }
                        }
                    }
                }
            }
        }
    };
    var ProxyResource = {
        serializedName: "ProxyResource",
        type: {
            name: "Composite",
            className: "ProxyResource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WidgetType = {
        serializedName: "WidgetType",
        type: {
            name: "Composite",
            className: "WidgetType",
            modelProperties: {
                widgetTypeName: {
                    readOnly: true,
                    serializedName: "widgetTypeName",
                    type: {
                        name: "String"
                    }
                },
                definition: {
                    required: true,
                    serializedName: "definition",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                imageUrl: {
                    serializedName: "imageUrl",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                widgetVersion: {
                    serializedName: "widgetVersion",
                    type: {
                        name: "String"
                    }
                },
                changed: {
                    readOnly: true,
                    serializedName: "changed",
                    type: {
                        name: "DateTime"
                    }
                },
                created: {
                    readOnly: true,
                    serializedName: "created",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var View = {
        serializedName: "View",
        type: {
            name: "Composite",
            className: "View",
            modelProperties: {
                viewName: {
                    readOnly: true,
                    serializedName: "viewName",
                    type: {
                        name: "String"
                    }
                },
                userId: {
                    serializedName: "userId",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                definition: {
                    required: true,
                    serializedName: "definition",
                    type: {
                        name: "String"
                    }
                },
                changed: {
                    readOnly: true,
                    serializedName: "changed",
                    type: {
                        name: "DateTime"
                    }
                },
                created: {
                    readOnly: true,
                    serializedName: "created",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var TypePropertiesMapping = {
        serializedName: "TypePropertiesMapping",
        type: {
            name: "Composite",
            className: "TypePropertiesMapping",
            modelProperties: {
                sourcePropertyName: {
                    required: true,
                    serializedName: "sourcePropertyName",
                    type: {
                        name: "String"
                    }
                },
                targetPropertyName: {
                    required: true,
                    serializedName: "targetPropertyName",
                    type: {
                        name: "String"
                    }
                },
                linkType: {
                    serializedName: "linkType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "UpdateAlways",
                            "CopyIfNull"
                        ]
                    }
                }
            }
        }
    };
    var ParticipantPropertyReference = {
        serializedName: "ParticipantPropertyReference",
        type: {
            name: "Composite",
            className: "ParticipantPropertyReference",
            modelProperties: {
                sourcePropertyName: {
                    required: true,
                    serializedName: "sourcePropertyName",
                    type: {
                        name: "String"
                    }
                },
                targetPropertyName: {
                    required: true,
                    serializedName: "targetPropertyName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LinkDefinition = {
        serializedName: "LinkDefinition",
        type: {
            name: "Composite",
            className: "LinkDefinition",
            modelProperties: {
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                linkName: {
                    readOnly: true,
                    serializedName: "linkName",
                    type: {
                        name: "String"
                    }
                },
                sourceEntityType: {
                    required: true,
                    serializedName: "sourceEntityType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "Profile",
                            "Interaction",
                            "Relationship"
                        ]
                    }
                },
                targetEntityType: {
                    required: true,
                    serializedName: "targetEntityType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "Profile",
                            "Interaction",
                            "Relationship"
                        ]
                    }
                },
                sourceEntityTypeName: {
                    required: true,
                    serializedName: "sourceEntityTypeName",
                    type: {
                        name: "String"
                    }
                },
                targetEntityTypeName: {
                    required: true,
                    serializedName: "targetEntityTypeName",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                mappings: {
                    serializedName: "mappings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TypePropertiesMapping"
                            }
                        }
                    }
                },
                participantPropertyReferences: {
                    required: true,
                    serializedName: "participantPropertyReferences",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ParticipantPropertyReference"
                            }
                        }
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                referenceOnly: {
                    serializedName: "referenceOnly",
                    type: {
                        name: "Boolean"
                    }
                },
                operationType: {
                    serializedName: "operationType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Upsert",
                            "Delete"
                        ]
                    }
                }
            }
        }
    };
    var RelationshipTypeFieldMapping = {
        serializedName: "RelationshipTypeFieldMapping",
        type: {
            name: "Composite",
            className: "RelationshipTypeFieldMapping",
            modelProperties: {
                profileFieldName: {
                    required: true,
                    serializedName: "profileFieldName",
                    type: {
                        name: "String"
                    }
                },
                relatedProfileKeyProperty: {
                    required: true,
                    serializedName: "relatedProfileKeyProperty",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RelationshipTypeMapping = {
        serializedName: "RelationshipTypeMapping",
        type: {
            name: "Composite",
            className: "RelationshipTypeMapping",
            modelProperties: {
                fieldMappings: {
                    required: true,
                    serializedName: "fieldMappings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RelationshipTypeFieldMapping"
                            }
                        }
                    }
                }
            }
        }
    };
    var RelationshipDefinition = {
        serializedName: "RelationshipDefinition",
        type: {
            name: "Composite",
            className: "RelationshipDefinition",
            modelProperties: {
                cardinality: {
                    serializedName: "cardinality",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "OneToOne",
                            "OneToMany",
                            "ManyToMany"
                        ]
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                expiryDateTimeUtc: {
                    serializedName: "expiryDateTimeUtc",
                    type: {
                        name: "DateTime"
                    }
                },
                fields: {
                    serializedName: "fields",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PropertyDefinition"
                            }
                        }
                    }
                },
                lookupMappings: {
                    serializedName: "lookupMappings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RelationshipTypeMapping"
                            }
                        }
                    }
                },
                profileType: {
                    required: true,
                    serializedName: "profileType",
                    type: {
                        name: "String"
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                relationshipName: {
                    readOnly: true,
                    serializedName: "relationshipName",
                    type: {
                        name: "String"
                    }
                },
                relatedProfileType: {
                    required: true,
                    serializedName: "relatedProfileType",
                    type: {
                        name: "String"
                    }
                },
                relationshipGuidId: {
                    readOnly: true,
                    serializedName: "relationshipGuidId",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RelationshipLinkFieldMapping = {
        serializedName: "RelationshipLinkFieldMapping",
        type: {
            name: "Composite",
            className: "RelationshipLinkFieldMapping",
            modelProperties: {
                interactionFieldName: {
                    required: true,
                    serializedName: "interactionFieldName",
                    type: {
                        name: "String"
                    }
                },
                linkType: {
                    serializedName: "linkType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "UpdateAlways",
                            "CopyIfNull"
                        ]
                    }
                },
                relationshipFieldName: {
                    required: true,
                    serializedName: "relationshipFieldName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ParticipantProfilePropertyReference = {
        serializedName: "ParticipantProfilePropertyReference",
        type: {
            name: "Composite",
            className: "ParticipantProfilePropertyReference",
            modelProperties: {
                interactionPropertyName: {
                    required: true,
                    serializedName: "interactionPropertyName",
                    type: {
                        name: "String"
                    }
                },
                profilePropertyName: {
                    required: true,
                    serializedName: "profilePropertyName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RelationshipLinkDefinition = {
        serializedName: "RelationshipLinkDefinition",
        type: {
            name: "Composite",
            className: "RelationshipLinkDefinition",
            modelProperties: {
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                interactionType: {
                    required: true,
                    serializedName: "interactionType",
                    type: {
                        name: "String"
                    }
                },
                linkName: {
                    readOnly: true,
                    serializedName: "linkName",
                    type: {
                        name: "String"
                    }
                },
                mappings: {
                    serializedName: "mappings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RelationshipLinkFieldMapping"
                            }
                        }
                    }
                },
                profilePropertyReferences: {
                    required: true,
                    serializedName: "profilePropertyReferences",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ParticipantProfilePropertyReference"
                            }
                        }
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                relatedProfilePropertyReferences: {
                    required: true,
                    serializedName: "relatedProfilePropertyReferences",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ParticipantProfilePropertyReference"
                            }
                        }
                    }
                },
                relationshipName: {
                    required: true,
                    serializedName: "relationshipName",
                    type: {
                        name: "String"
                    }
                },
                relationshipGuidId: {
                    readOnly: true,
                    serializedName: "relationshipGuidId",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Participant = {
        serializedName: "Participant",
        type: {
            name: "Composite",
            className: "Participant",
            modelProperties: {
                profileTypeName: {
                    required: true,
                    serializedName: "profileTypeName",
                    type: {
                        name: "String"
                    }
                },
                participantPropertyReferences: {
                    required: true,
                    serializedName: "participantPropertyReferences",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ParticipantPropertyReference"
                            }
                        }
                    }
                },
                participantName: {
                    required: true,
                    serializedName: "participantName",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                role: {
                    serializedName: "role",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var InteractionTypeDefinition = {
        serializedName: "InteractionTypeDefinition",
        type: {
            name: "Composite",
            className: "InteractionTypeDefinition",
            modelProperties: __assign({}, EntityTypeDefinition.type.modelProperties, { idPropertyNames: {
                    serializedName: "idPropertyNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, participantProfiles: {
                    serializedName: "participantProfiles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Participant"
                            }
                        }
                    }
                }, primaryParticipantProfilePropertyName: {
                    serializedName: "primaryParticipantProfilePropertyName",
                    type: {
                        name: "String"
                    }
                }, dataSourcePrecedenceRules: {
                    readOnly: true,
                    serializedName: "dataSourcePrecedenceRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DataSourcePrecedence"
                            }
                        }
                    }
                }, name: {
                    readOnly: true,
                    serializedName: "defaultDataSource.name",
                    type: {
                        name: "String"
                    }
                }, dataSourceType: {
                    readOnly: true,
                    serializedName: "defaultDataSource.dataSourceType",
                    type: {
                        name: "String"
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "defaultDataSource.status",
                    type: {
                        name: "String"
                    }
                }, id: {
                    readOnly: true,
                    serializedName: "defaultDataSource.id",
                    type: {
                        name: "Number"
                    }
                }, dataSourceReferenceId: {
                    readOnly: true,
                    serializedName: "defaultDataSource.dataSourceReferenceId",
                    type: {
                        name: "String"
                    }
                }, isActivity: {
                    serializedName: "isActivity",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var StrongId = {
        serializedName: "StrongId",
        type: {
            name: "Composite",
            className: "StrongId",
            modelProperties: {
                keyPropertyNames: {
                    required: true,
                    serializedName: "keyPropertyNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                strongIdName: {
                    required: true,
                    serializedName: "strongIdName",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ProfileTypeDefinition = {
        serializedName: "ProfileTypeDefinition",
        type: {
            name: "Composite",
            className: "ProfileTypeDefinition",
            modelProperties: __assign({}, EntityTypeDefinition.type.modelProperties, { strongIds: {
                    serializedName: "strongIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StrongId"
                            }
                        }
                    }
                } })
        }
    };
    var ProfileResourceFormat = {
        serializedName: "ProfileResourceFormat",
        type: {
            name: "Composite",
            className: "ProfileResourceFormat",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { attributes: {
                    serializedName: "properties.attributes",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Sequence",
                                element: {
                                    type: {
                                        name: "String"
                                    }
                                }
                            }
                        }
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, displayName: {
                    serializedName: "properties.displayName",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, localizedAttributes: {
                    serializedName: "properties.localizedAttributes",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Dictionary",
                                value: {
                                    type: {
                                        name: "String"
                                    }
                                }
                            }
                        }
                    }
                }, smallImage: {
                    serializedName: "properties.smallImage",
                    type: {
                        name: "String"
                    }
                }, mediumImage: {
                    serializedName: "properties.mediumImage",
                    type: {
                        name: "String"
                    }
                }, largeImage: {
                    serializedName: "properties.largeImage",
                    type: {
                        name: "String"
                    }
                }, apiEntitySetName: {
                    serializedName: "properties.apiEntitySetName",
                    type: {
                        name: "String"
                    }
                }, entityType: {
                    serializedName: "properties.entityType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "Profile",
                            "Interaction",
                            "Relationship"
                        ]
                    }
                }, fields: {
                    serializedName: "properties.fields",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PropertyDefinition"
                            }
                        }
                    }
                }, instancesCount: {
                    serializedName: "properties.instancesCount",
                    type: {
                        name: "Number"
                    }
                }, lastChangedUtc: {
                    readOnly: true,
                    serializedName: "properties.lastChangedUtc",
                    type: {
                        name: "DateTime"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, schemaItemTypeLink: {
                    serializedName: "properties.schemaItemTypeLink",
                    type: {
                        name: "String"
                    }
                }, tenantId: {
                    readOnly: true,
                    serializedName: "properties.tenantId",
                    type: {
                        name: "String"
                    }
                }, timestampFieldName: {
                    serializedName: "properties.timestampFieldName",
                    type: {
                        name: "String"
                    }
                }, typeName: {
                    serializedName: "properties.typeName",
                    type: {
                        name: "String"
                    }
                }, strongIds: {
                    serializedName: "properties.strongIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StrongId"
                            }
                        }
                    }
                } })
        }
    };
    var InteractionResourceFormat = {
        serializedName: "InteractionResourceFormat",
        type: {
            name: "Composite",
            className: "InteractionResourceFormat",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { attributes: {
                    serializedName: "properties.attributes",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Sequence",
                                element: {
                                    type: {
                                        name: "String"
                                    }
                                }
                            }
                        }
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, displayName: {
                    serializedName: "properties.displayName",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, localizedAttributes: {
                    serializedName: "properties.localizedAttributes",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Dictionary",
                                value: {
                                    type: {
                                        name: "String"
                                    }
                                }
                            }
                        }
                    }
                }, smallImage: {
                    serializedName: "properties.smallImage",
                    type: {
                        name: "String"
                    }
                }, mediumImage: {
                    serializedName: "properties.mediumImage",
                    type: {
                        name: "String"
                    }
                }, largeImage: {
                    serializedName: "properties.largeImage",
                    type: {
                        name: "String"
                    }
                }, apiEntitySetName: {
                    serializedName: "properties.apiEntitySetName",
                    type: {
                        name: "String"
                    }
                }, entityType: {
                    serializedName: "properties.entityType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "Profile",
                            "Interaction",
                            "Relationship"
                        ]
                    }
                }, fields: {
                    serializedName: "properties.fields",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PropertyDefinition"
                            }
                        }
                    }
                }, instancesCount: {
                    serializedName: "properties.instancesCount",
                    type: {
                        name: "Number"
                    }
                }, lastChangedUtc: {
                    readOnly: true,
                    serializedName: "properties.lastChangedUtc",
                    type: {
                        name: "DateTime"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, schemaItemTypeLink: {
                    serializedName: "properties.schemaItemTypeLink",
                    type: {
                        name: "String"
                    }
                }, tenantId: {
                    readOnly: true,
                    serializedName: "properties.tenantId",
                    type: {
                        name: "String"
                    }
                }, timestampFieldName: {
                    serializedName: "properties.timestampFieldName",
                    type: {
                        name: "String"
                    }
                }, typeName: {
                    serializedName: "properties.typeName",
                    type: {
                        name: "String"
                    }
                }, idPropertyNames: {
                    serializedName: "properties.idPropertyNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, participantProfiles: {
                    serializedName: "properties.participantProfiles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Participant"
                            }
                        }
                    }
                }, primaryParticipantProfilePropertyName: {
                    serializedName: "properties.primaryParticipantProfilePropertyName",
                    type: {
                        name: "String"
                    }
                }, dataSourcePrecedenceRules: {
                    readOnly: true,
                    serializedName: "properties.dataSourcePrecedenceRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DataSourcePrecedence"
                            }
                        }
                    }
                }, interactionResourceFormatName: {
                    readOnly: true,
                    serializedName: "properties.defaultDataSource.name",
                    type: {
                        name: "String"
                    }
                }, dataSourceType: {
                    readOnly: true,
                    serializedName: "properties.defaultDataSource.dataSourceType",
                    type: {
                        name: "String"
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "properties.defaultDataSource.status",
                    type: {
                        name: "String"
                    }
                }, interactionResourceFormatId: {
                    readOnly: true,
                    serializedName: "properties.defaultDataSource.id",
                    type: {
                        name: "Number"
                    }
                }, dataSourceReferenceId: {
                    readOnly: true,
                    serializedName: "properties.defaultDataSource.dataSourceReferenceId",
                    type: {
                        name: "String"
                    }
                }, isActivity: {
                    serializedName: "properties.isActivity",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var KpiResourceFormat = {
        serializedName: "KpiResourceFormat",
        type: {
            name: "Composite",
            className: "KpiResourceFormat",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { entityType: {
                    required: true,
                    serializedName: "properties.entityType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "Profile",
                            "Interaction",
                            "Relationship"
                        ]
                    }
                }, entityTypeName: {
                    required: true,
                    serializedName: "properties.entityTypeName",
                    type: {
                        name: "String"
                    }
                }, tenantId: {
                    readOnly: true,
                    serializedName: "properties.tenantId",
                    type: {
                        name: "String"
                    }
                }, kpiName: {
                    readOnly: true,
                    serializedName: "properties.kpiName",
                    type: {
                        name: "String"
                    }
                }, displayName: {
                    serializedName: "properties.displayName",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, calculationWindow: {
                    required: true,
                    serializedName: "properties.calculationWindow",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Lifetime",
                            "Hour",
                            "Day",
                            "Week",
                            "Month"
                        ]
                    }
                }, calculationWindowFieldName: {
                    serializedName: "properties.calculationWindowFieldName",
                    type: {
                        name: "String"
                    }
                }, functionProperty: {
                    required: true,
                    serializedName: "properties.function",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Sum",
                            "Avg",
                            "Min",
                            "Max",
                            "Last",
                            "Count",
                            "None",
                            "CountDistinct"
                        ]
                    }
                }, expression: {
                    required: true,
                    serializedName: "properties.expression",
                    type: {
                        name: "String"
                    }
                }, unit: {
                    serializedName: "properties.unit",
                    type: {
                        name: "String"
                    }
                }, filter: {
                    serializedName: "properties.filter",
                    type: {
                        name: "String"
                    }
                }, groupBy: {
                    serializedName: "properties.groupBy",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, groupByMetadata: {
                    readOnly: true,
                    serializedName: "properties.groupByMetadata",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "KpiGroupByMetadata"
                            }
                        }
                    }
                }, participantProfilesMetadata: {
                    readOnly: true,
                    serializedName: "properties.participantProfilesMetadata",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "KpiParticipantProfilesMetadata"
                            }
                        }
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, thresHolds: {
                    serializedName: "properties.thresHolds",
                    type: {
                        name: "Composite",
                        className: "KpiThresholds"
                    }
                }, aliases: {
                    serializedName: "properties.aliases",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "KpiAlias"
                            }
                        }
                    }
                }, extracts: {
                    serializedName: "properties.extracts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "KpiExtract"
                            }
                        }
                    }
                } })
        }
    };
    var EnrichingKpi = {
        serializedName: "EnrichingKpi",
        type: {
            name: "Composite",
            className: "EnrichingKpi",
            modelProperties: __assign({}, KpiDefinition.type.modelProperties)
        }
    };
    var ConnectorResourceFormat = {
        serializedName: "ConnectorResourceFormat",
        type: {
            name: "Composite",
            className: "ConnectorResourceFormat",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { connectorId: {
                    readOnly: true,
                    serializedName: "properties.connectorId",
                    type: {
                        name: "Number"
                    }
                }, connectorName: {
                    serializedName: "properties.connectorName",
                    type: {
                        name: "String"
                    }
                }, connectorType: {
                    required: true,
                    serializedName: "properties.connectorType",
                    type: {
                        name: "String"
                    }
                }, displayName: {
                    serializedName: "properties.displayName",
                    type: {
                        name: "String"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, connectorProperties: {
                    required: true,
                    serializedName: "properties.connectorProperties",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }, created: {
                    readOnly: true,
                    serializedName: "properties.created",
                    type: {
                        name: "DateTime"
                    }
                }, lastModified: {
                    readOnly: true,
                    serializedName: "properties.lastModified",
                    type: {
                        name: "DateTime"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Creating",
                            "Created",
                            "Ready",
                            "Expiring",
                            "Deleting",
                            "Failed"
                        ]
                    }
                }, tenantId: {
                    readOnly: true,
                    serializedName: "properties.tenantId",
                    type: {
                        name: "String"
                    }
                }, isInternal: {
                    serializedName: "properties.isInternal",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var ConnectorMappingResourceFormat = {
        serializedName: "ConnectorMappingResourceFormat",
        type: {
            name: "Composite",
            className: "ConnectorMappingResourceFormat",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { connectorName: {
                    readOnly: true,
                    serializedName: "properties.connectorName",
                    type: {
                        name: "String"
                    }
                }, connectorType: {
                    serializedName: "properties.connectorType",
                    type: {
                        name: "String"
                    }
                }, created: {
                    readOnly: true,
                    serializedName: "properties.created",
                    type: {
                        name: "DateTime"
                    }
                }, lastModified: {
                    readOnly: true,
                    serializedName: "properties.lastModified",
                    type: {
                        name: "DateTime"
                    }
                }, entityType: {
                    required: true,
                    serializedName: "properties.entityType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "Profile",
                            "Interaction",
                            "Relationship"
                        ]
                    }
                }, entityTypeName: {
                    required: true,
                    serializedName: "properties.entityTypeName",
                    type: {
                        name: "String"
                    }
                }, connectorMappingName: {
                    readOnly: true,
                    serializedName: "properties.connectorMappingName",
                    type: {
                        name: "String"
                    }
                }, displayName: {
                    serializedName: "properties.displayName",
                    type: {
                        name: "String"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, dataFormatId: {
                    readOnly: true,
                    serializedName: "properties.dataFormatId",
                    type: {
                        name: "String"
                    }
                }, mappingProperties: {
                    required: true,
                    serializedName: "properties.mappingProperties",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "ConnectorMappingProperties"
                    }
                }, nextRunTime: {
                    readOnly: true,
                    serializedName: "properties.nextRunTime",
                    type: {
                        name: "DateTime"
                    }
                }, runId: {
                    readOnly: true,
                    serializedName: "properties.runId",
                    type: {
                        name: "String"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Creating",
                            "Created",
                            "Failed",
                            "Ready",
                            "Running",
                            "Stopped",
                            "Expiring"
                        ]
                    }
                }, tenantId: {
                    readOnly: true,
                    serializedName: "properties.tenantId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var AuthorizationPolicyResourceFormat = {
        serializedName: "AuthorizationPolicyResourceFormat",
        type: {
            name: "Composite",
            className: "AuthorizationPolicyResourceFormat",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { policyName: {
                    readOnly: true,
                    serializedName: "properties.policyName",
                    type: {
                        name: "String"
                    }
                }, permissions: {
                    required: true,
                    serializedName: "properties.permissions",
                    constraints: {
                        UniqueItems: true
                    },
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Enum",
                                allowedValues: [
                                    "Read",
                                    "Write",
                                    "Manage"
                                ]
                            }
                        }
                    }
                }, primaryKey: {
                    serializedName: "properties.primaryKey",
                    type: {
                        name: "String"
                    }
                }, secondaryKey: {
                    serializedName: "properties.secondaryKey",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var LinkResourceFormat = {
        serializedName: "LinkResourceFormat",
        type: {
            name: "Composite",
            className: "LinkResourceFormat",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { tenantId: {
                    readOnly: true,
                    serializedName: "properties.tenantId",
                    type: {
                        name: "String"
                    }
                }, linkName: {
                    readOnly: true,
                    serializedName: "properties.linkName",
                    type: {
                        name: "String"
                    }
                }, sourceEntityType: {
                    required: true,
                    serializedName: "properties.sourceEntityType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "Profile",
                            "Interaction",
                            "Relationship"
                        ]
                    }
                }, targetEntityType: {
                    required: true,
                    serializedName: "properties.targetEntityType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "Profile",
                            "Interaction",
                            "Relationship"
                        ]
                    }
                }, sourceEntityTypeName: {
                    required: true,
                    serializedName: "properties.sourceEntityTypeName",
                    type: {
                        name: "String"
                    }
                }, targetEntityTypeName: {
                    required: true,
                    serializedName: "properties.targetEntityTypeName",
                    type: {
                        name: "String"
                    }
                }, displayName: {
                    serializedName: "properties.displayName",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, mappings: {
                    serializedName: "properties.mappings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TypePropertiesMapping"
                            }
                        }
                    }
                }, participantPropertyReferences: {
                    required: true,
                    serializedName: "properties.participantPropertyReferences",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ParticipantPropertyReference"
                            }
                        }
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, referenceOnly: {
                    serializedName: "properties.referenceOnly",
                    type: {
                        name: "Boolean"
                    }
                }, operationType: {
                    serializedName: "properties.operationType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Upsert",
                            "Delete"
                        ]
                    }
                } })
        }
    };
    var RelationshipResourceFormat = {
        serializedName: "RelationshipResourceFormat",
        type: {
            name: "Composite",
            className: "RelationshipResourceFormat",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { cardinality: {
                    serializedName: "properties.cardinality",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "OneToOne",
                            "OneToMany",
                            "ManyToMany"
                        ]
                    }
                }, displayName: {
                    serializedName: "properties.displayName",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, expiryDateTimeUtc: {
                    serializedName: "properties.expiryDateTimeUtc",
                    type: {
                        name: "DateTime"
                    }
                }, fields: {
                    serializedName: "properties.fields",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PropertyDefinition"
                            }
                        }
                    }
                }, lookupMappings: {
                    serializedName: "properties.lookupMappings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RelationshipTypeMapping"
                            }
                        }
                    }
                }, profileType: {
                    required: true,
                    serializedName: "properties.profileType",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, relationshipName: {
                    readOnly: true,
                    serializedName: "properties.relationshipName",
                    type: {
                        name: "String"
                    }
                }, relatedProfileType: {
                    required: true,
                    serializedName: "properties.relatedProfileType",
                    type: {
                        name: "String"
                    }
                }, relationshipGuidId: {
                    readOnly: true,
                    serializedName: "properties.relationshipGuidId",
                    type: {
                        name: "String"
                    }
                }, tenantId: {
                    readOnly: true,
                    serializedName: "properties.tenantId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var RelationshipLinkResourceFormat = {
        serializedName: "RelationshipLinkResourceFormat",
        type: {
            name: "Composite",
            className: "RelationshipLinkResourceFormat",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { displayName: {
                    serializedName: "properties.displayName",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, interactionType: {
                    required: true,
                    serializedName: "properties.interactionType",
                    type: {
                        name: "String"
                    }
                }, linkName: {
                    readOnly: true,
                    serializedName: "properties.linkName",
                    type: {
                        name: "String"
                    }
                }, mappings: {
                    serializedName: "properties.mappings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RelationshipLinkFieldMapping"
                            }
                        }
                    }
                }, profilePropertyReferences: {
                    required: true,
                    serializedName: "properties.profilePropertyReferences",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ParticipantProfilePropertyReference"
                            }
                        }
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, relatedProfilePropertyReferences: {
                    required: true,
                    serializedName: "properties.relatedProfilePropertyReferences",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ParticipantProfilePropertyReference"
                            }
                        }
                    }
                }, relationshipName: {
                    required: true,
                    serializedName: "properties.relationshipName",
                    type: {
                        name: "String"
                    }
                }, relationshipGuidId: {
                    readOnly: true,
                    serializedName: "properties.relationshipGuidId",
                    type: {
                        name: "String"
                    }
                }, tenantId: {
                    readOnly: true,
                    serializedName: "properties.tenantId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ViewResourceFormat = {
        serializedName: "ViewResourceFormat",
        type: {
            name: "Composite",
            className: "ViewResourceFormat",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { viewName: {
                    readOnly: true,
                    serializedName: "properties.viewName",
                    type: {
                        name: "String"
                    }
                }, userId: {
                    serializedName: "properties.userId",
                    type: {
                        name: "String"
                    }
                }, tenantId: {
                    readOnly: true,
                    serializedName: "properties.tenantId",
                    type: {
                        name: "String"
                    }
                }, displayName: {
                    serializedName: "properties.displayName",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, definition: {
                    required: true,
                    serializedName: "properties.definition",
                    type: {
                        name: "String"
                    }
                }, changed: {
                    readOnly: true,
                    serializedName: "properties.changed",
                    type: {
                        name: "DateTime"
                    }
                }, created: {
                    readOnly: true,
                    serializedName: "properties.created",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var WidgetTypeResourceFormat = {
        serializedName: "WidgetTypeResourceFormat",
        type: {
            name: "Composite",
            className: "WidgetTypeResourceFormat",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { widgetTypeName: {
                    readOnly: true,
                    serializedName: "properties.widgetTypeName",
                    type: {
                        name: "String"
                    }
                }, definition: {
                    required: true,
                    serializedName: "properties.definition",
                    type: {
                        name: "String"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, displayName: {
                    serializedName: "properties.displayName",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, imageUrl: {
                    serializedName: "properties.imageUrl",
                    type: {
                        name: "String"
                    }
                }, tenantId: {
                    readOnly: true,
                    serializedName: "properties.tenantId",
                    type: {
                        name: "String"
                    }
                }, widgetVersion: {
                    serializedName: "properties.widgetVersion",
                    type: {
                        name: "String"
                    }
                }, changed: {
                    readOnly: true,
                    serializedName: "properties.changed",
                    type: {
                        name: "DateTime"
                    }
                }, created: {
                    readOnly: true,
                    serializedName: "properties.created",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var AssignmentPrincipal = {
        serializedName: "AssignmentPrincipal",
        type: {
            name: "Composite",
            className: "AssignmentPrincipal",
            modelProperties: {
                principalId: {
                    required: true,
                    serializedName: "principalId",
                    type: {
                        name: "String"
                    }
                },
                principalType: {
                    required: true,
                    serializedName: "principalType",
                    type: {
                        name: "String"
                    }
                },
                principalMetadata: {
                    serializedName: "principalMetadata",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ResourceSetDescription = {
        serializedName: "ResourceSetDescription",
        type: {
            name: "Composite",
            className: "ResourceSetDescription",
            modelProperties: {
                elements: {
                    serializedName: "elements",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                exceptions: {
                    serializedName: "exceptions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var RoleAssignment = {
        serializedName: "RoleAssignment",
        type: {
            name: "Composite",
            className: "RoleAssignment",
            modelProperties: {
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                assignmentName: {
                    readOnly: true,
                    serializedName: "assignmentName",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                role: {
                    required: true,
                    serializedName: "role",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Admin",
                            "Reader",
                            "ManageAdmin",
                            "ManageReader",
                            "DataAdmin",
                            "DataReader"
                        ]
                    }
                },
                principals: {
                    required: true,
                    serializedName: "principals",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AssignmentPrincipal"
                            }
                        }
                    }
                },
                profiles: {
                    serializedName: "profiles",
                    type: {
                        name: "Composite",
                        className: "ResourceSetDescription"
                    }
                },
                interactions: {
                    serializedName: "interactions",
                    type: {
                        name: "Composite",
                        className: "ResourceSetDescription"
                    }
                },
                links: {
                    serializedName: "links",
                    type: {
                        name: "Composite",
                        className: "ResourceSetDescription"
                    }
                },
                kpis: {
                    serializedName: "kpis",
                    type: {
                        name: "Composite",
                        className: "ResourceSetDescription"
                    }
                },
                sasPolicies: {
                    serializedName: "sasPolicies",
                    type: {
                        name: "Composite",
                        className: "ResourceSetDescription"
                    }
                },
                connectors: {
                    serializedName: "connectors",
                    type: {
                        name: "Composite",
                        className: "ResourceSetDescription"
                    }
                },
                views: {
                    serializedName: "views",
                    type: {
                        name: "Composite",
                        className: "ResourceSetDescription"
                    }
                },
                relationshipLinks: {
                    serializedName: "relationshipLinks",
                    type: {
                        name: "Composite",
                        className: "ResourceSetDescription"
                    }
                },
                relationships: {
                    serializedName: "relationships",
                    type: {
                        name: "Composite",
                        className: "ResourceSetDescription"
                    }
                },
                widgetTypes: {
                    serializedName: "widgetTypes",
                    type: {
                        name: "Composite",
                        className: "ResourceSetDescription"
                    }
                },
                roleAssignments: {
                    serializedName: "roleAssignments",
                    type: {
                        name: "Composite",
                        className: "ResourceSetDescription"
                    }
                },
                conflationPolicies: {
                    serializedName: "conflationPolicies",
                    type: {
                        name: "Composite",
                        className: "ResourceSetDescription"
                    }
                },
                segments: {
                    serializedName: "segments",
                    type: {
                        name: "Composite",
                        className: "ResourceSetDescription"
                    }
                }
            }
        }
    };
    var RoleAssignmentResourceFormat = {
        serializedName: "RoleAssignmentResourceFormat",
        type: {
            name: "Composite",
            className: "RoleAssignmentResourceFormat",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { tenantId: {
                    readOnly: true,
                    serializedName: "properties.tenantId",
                    type: {
                        name: "String"
                    }
                }, assignmentName: {
                    readOnly: true,
                    serializedName: "properties.assignmentName",
                    type: {
                        name: "String"
                    }
                }, displayName: {
                    serializedName: "properties.displayName",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, role: {
                    required: true,
                    serializedName: "properties.role",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Admin",
                            "Reader",
                            "ManageAdmin",
                            "ManageReader",
                            "DataAdmin",
                            "DataReader"
                        ]
                    }
                }, principals: {
                    required: true,
                    serializedName: "properties.principals",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AssignmentPrincipal"
                            }
                        }
                    }
                }, profiles: {
                    serializedName: "properties.profiles",
                    type: {
                        name: "Composite",
                        className: "ResourceSetDescription"
                    }
                }, interactions: {
                    serializedName: "properties.interactions",
                    type: {
                        name: "Composite",
                        className: "ResourceSetDescription"
                    }
                }, links: {
                    serializedName: "properties.links",
                    type: {
                        name: "Composite",
                        className: "ResourceSetDescription"
                    }
                }, kpis: {
                    serializedName: "properties.kpis",
                    type: {
                        name: "Composite",
                        className: "ResourceSetDescription"
                    }
                }, sasPolicies: {
                    serializedName: "properties.sasPolicies",
                    type: {
                        name: "Composite",
                        className: "ResourceSetDescription"
                    }
                }, connectors: {
                    serializedName: "properties.connectors",
                    type: {
                        name: "Composite",
                        className: "ResourceSetDescription"
                    }
                }, views: {
                    serializedName: "properties.views",
                    type: {
                        name: "Composite",
                        className: "ResourceSetDescription"
                    }
                }, relationshipLinks: {
                    serializedName: "properties.relationshipLinks",
                    type: {
                        name: "Composite",
                        className: "ResourceSetDescription"
                    }
                }, relationships: {
                    serializedName: "properties.relationships",
                    type: {
                        name: "Composite",
                        className: "ResourceSetDescription"
                    }
                }, widgetTypes: {
                    serializedName: "properties.widgetTypes",
                    type: {
                        name: "Composite",
                        className: "ResourceSetDescription"
                    }
                }, roleAssignments: {
                    serializedName: "properties.roleAssignments",
                    type: {
                        name: "Composite",
                        className: "ResourceSetDescription"
                    }
                }, conflationPolicies: {
                    serializedName: "properties.conflationPolicies",
                    type: {
                        name: "Composite",
                        className: "ResourceSetDescription"
                    }
                }, segments: {
                    serializedName: "properties.segments",
                    type: {
                        name: "Composite",
                        className: "ResourceSetDescription"
                    }
                } })
        }
    };
    var Role = {
        serializedName: "Role",
        type: {
            name: "Composite",
            className: "Role",
            modelProperties: {
                roleName: {
                    serializedName: "roleName",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RoleResourceFormat = {
        serializedName: "RoleResourceFormat",
        type: {
            name: "Composite",
            className: "RoleResourceFormat",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { roleName: {
                    serializedName: "properties.roleName",
                    type: {
                        name: "String"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var GetImageUploadUrlInput = {
        serializedName: "GetImageUploadUrlInput",
        type: {
            name: "Composite",
            className: "GetImageUploadUrlInput",
            modelProperties: {
                entityType: {
                    serializedName: "entityType",
                    type: {
                        name: "String"
                    }
                },
                entityTypeName: {
                    serializedName: "entityTypeName",
                    type: {
                        name: "String"
                    }
                },
                relativePath: {
                    serializedName: "relativePath",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ImageDefinition = {
        serializedName: "ImageDefinition",
        type: {
            name: "Composite",
            className: "ImageDefinition",
            modelProperties: {
                imageExists: {
                    serializedName: "imageExists",
                    type: {
                        name: "Boolean"
                    }
                },
                contentUrl: {
                    serializedName: "contentUrl",
                    type: {
                        name: "String"
                    }
                },
                relativePath: {
                    serializedName: "relativePath",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RelationshipsLookup = {
        serializedName: "RelationshipsLookup",
        type: {
            name: "Composite",
            className: "RelationshipsLookup",
            modelProperties: {
                profileName: {
                    readOnly: true,
                    serializedName: "profileName",
                    type: {
                        name: "String"
                    }
                },
                profilePropertyReferences: {
                    readOnly: true,
                    serializedName: "profilePropertyReferences",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ParticipantProfilePropertyReference"
                            }
                        }
                    }
                },
                relatedProfileName: {
                    readOnly: true,
                    serializedName: "relatedProfileName",
                    type: {
                        name: "String"
                    }
                },
                relatedProfilePropertyReferences: {
                    readOnly: true,
                    serializedName: "relatedProfilePropertyReferences",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ParticipantProfilePropertyReference"
                            }
                        }
                    }
                },
                existingRelationshipName: {
                    readOnly: true,
                    serializedName: "existingRelationshipName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SuggestRelationshipLinksResponse = {
        serializedName: "SuggestRelationshipLinksResponse",
        type: {
            name: "Composite",
            className: "SuggestRelationshipLinksResponse",
            modelProperties: {
                interactionName: {
                    readOnly: true,
                    serializedName: "interactionName",
                    type: {
                        name: "String"
                    }
                },
                suggestedRelationships: {
                    readOnly: true,
                    serializedName: "suggestedRelationships",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RelationshipsLookup"
                            }
                        }
                    }
                }
            }
        }
    };
    var PredictionMappings = {
        serializedName: "Prediction_mappings",
        type: {
            name: "Composite",
            className: "PredictionMappings",
            modelProperties: {
                score: {
                    required: true,
                    serializedName: "score",
                    type: {
                        name: "String"
                    }
                },
                grade: {
                    required: true,
                    serializedName: "grade",
                    type: {
                        name: "String"
                    }
                },
                reason: {
                    required: true,
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PredictionGradesItem = {
        serializedName: "Prediction_gradesItem",
        type: {
            name: "Composite",
            className: "PredictionGradesItem",
            modelProperties: {
                gradeName: {
                    serializedName: "gradeName",
                    type: {
                        name: "String"
                    }
                },
                minScoreThreshold: {
                    serializedName: "minScoreThreshold",
                    type: {
                        name: "Number"
                    }
                },
                maxScoreThreshold: {
                    serializedName: "maxScoreThreshold",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var PredictionSystemGeneratedEntities = {
        serializedName: "Prediction_systemGeneratedEntities",
        type: {
            name: "Composite",
            className: "PredictionSystemGeneratedEntities",
            modelProperties: {
                generatedInteractionTypes: {
                    serializedName: "generatedInteractionTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                generatedLinks: {
                    serializedName: "generatedLinks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                generatedKpis: {
                    serializedName: "generatedKpis",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var Prediction = {
        serializedName: "Prediction",
        type: {
            name: "Composite",
            className: "Prediction",
            modelProperties: {
                description: {
                    serializedName: "description",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                involvedInteractionTypes: {
                    serializedName: "involvedInteractionTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                involvedKpiTypes: {
                    serializedName: "involvedKpiTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                involvedRelationships: {
                    serializedName: "involvedRelationships",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                negativeOutcomeExpression: {
                    required: true,
                    serializedName: "negativeOutcomeExpression",
                    type: {
                        name: "String"
                    }
                },
                positiveOutcomeExpression: {
                    required: true,
                    serializedName: "positiveOutcomeExpression",
                    type: {
                        name: "String"
                    }
                },
                primaryProfileType: {
                    required: true,
                    serializedName: "primaryProfileType",
                    type: {
                        name: "String"
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                predictionName: {
                    serializedName: "predictionName",
                    type: {
                        name: "String"
                    }
                },
                scopeExpression: {
                    required: true,
                    serializedName: "scopeExpression",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                autoAnalyze: {
                    required: true,
                    serializedName: "autoAnalyze",
                    type: {
                        name: "Boolean"
                    }
                },
                mappings: {
                    required: true,
                    serializedName: "mappings",
                    type: {
                        name: "Composite",
                        className: "PredictionMappings"
                    }
                },
                scoreLabel: {
                    required: true,
                    serializedName: "scoreLabel",
                    type: {
                        name: "String"
                    }
                },
                grades: {
                    serializedName: "grades",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PredictionGradesItem"
                            }
                        }
                    }
                },
                systemGeneratedEntities: {
                    readOnly: true,
                    serializedName: "systemGeneratedEntities",
                    type: {
                        name: "Composite",
                        className: "PredictionSystemGeneratedEntities"
                    }
                }
            }
        }
    };
    var PredictionDistributionDefinitionDistributionsItem = {
        serializedName: "PredictionDistributionDefinition_distributionsItem",
        type: {
            name: "Composite",
            className: "PredictionDistributionDefinitionDistributionsItem",
            modelProperties: {
                scoreThreshold: {
                    serializedName: "scoreThreshold",
                    type: {
                        name: "Number"
                    }
                },
                positives: {
                    serializedName: "positives",
                    type: {
                        name: "Number"
                    }
                },
                negatives: {
                    serializedName: "negatives",
                    type: {
                        name: "Number"
                    }
                },
                positivesAboveThreshold: {
                    serializedName: "positivesAboveThreshold",
                    type: {
                        name: "Number"
                    }
                },
                negativesAboveThreshold: {
                    serializedName: "negativesAboveThreshold",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var PredictionDistributionDefinition = {
        serializedName: "PredictionDistributionDefinition",
        type: {
            name: "Composite",
            className: "PredictionDistributionDefinition",
            modelProperties: {
                totalPositives: {
                    serializedName: "totalPositives",
                    type: {
                        name: "Number"
                    }
                },
                totalNegatives: {
                    serializedName: "totalNegatives",
                    type: {
                        name: "Number"
                    }
                },
                distributions: {
                    serializedName: "distributions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PredictionDistributionDefinitionDistributionsItem"
                            }
                        }
                    }
                }
            }
        }
    };
    var CanonicalProfileDefinitionPropertiesItem = {
        serializedName: "CanonicalProfileDefinition_propertiesItem",
        type: {
            name: "Composite",
            className: "CanonicalProfileDefinitionPropertiesItem",
            modelProperties: {
                profileName: {
                    serializedName: "profileName",
                    type: {
                        name: "String"
                    }
                },
                profilePropertyName: {
                    serializedName: "profilePropertyName",
                    type: {
                        name: "String"
                    }
                },
                rank: {
                    serializedName: "rank",
                    type: {
                        name: "Number"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CanonicalProfileDefinition = {
        serializedName: "CanonicalProfileDefinition",
        type: {
            name: "Composite",
            className: "CanonicalProfileDefinition",
            modelProperties: {
                canonicalProfileId: {
                    serializedName: "canonicalProfileId",
                    type: {
                        name: "Number"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CanonicalProfileDefinitionPropertiesItem"
                            }
                        }
                    }
                }
            }
        }
    };
    var PredictionTrainingResults = {
        serializedName: "PredictionTrainingResults",
        type: {
            name: "Composite",
            className: "PredictionTrainingResults",
            modelProperties: {
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                scoreName: {
                    readOnly: true,
                    serializedName: "scoreName",
                    type: {
                        name: "String"
                    }
                },
                predictionDistribution: {
                    readOnly: true,
                    serializedName: "predictionDistribution",
                    type: {
                        name: "Composite",
                        className: "PredictionDistributionDefinition"
                    }
                },
                canonicalProfiles: {
                    readOnly: true,
                    serializedName: "canonicalProfiles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CanonicalProfileDefinition"
                            }
                        }
                    }
                },
                primaryProfileInstanceCount: {
                    readOnly: true,
                    serializedName: "primaryProfileInstanceCount",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var PredictionModelStatus = {
        serializedName: "PredictionModelStatus",
        type: {
            name: "Composite",
            className: "PredictionModelStatus",
            modelProperties: {
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                predictionName: {
                    readOnly: true,
                    serializedName: "predictionName",
                    type: {
                        name: "String"
                    }
                },
                predictionGuidId: {
                    readOnly: true,
                    serializedName: "predictionGuidId",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    required: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                trainingSetCount: {
                    readOnly: true,
                    serializedName: "trainingSetCount",
                    type: {
                        name: "Number"
                    }
                },
                testSetCount: {
                    readOnly: true,
                    serializedName: "testSetCount",
                    type: {
                        name: "Number"
                    }
                },
                validationSetCount: {
                    readOnly: true,
                    serializedName: "validationSetCount",
                    type: {
                        name: "Number"
                    }
                },
                trainingAccuracy: {
                    readOnly: true,
                    serializedName: "trainingAccuracy",
                    type: {
                        name: "Number"
                    }
                },
                signalsUsed: {
                    readOnly: true,
                    serializedName: "signalsUsed",
                    type: {
                        name: "Number"
                    }
                },
                modelVersion: {
                    readOnly: true,
                    serializedName: "modelVersion",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PredictionResourceFormat = {
        serializedName: "PredictionResourceFormat",
        type: {
            name: "Composite",
            className: "PredictionResourceFormat",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { description: {
                    serializedName: "properties.description",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, displayName: {
                    serializedName: "properties.displayName",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, involvedInteractionTypes: {
                    serializedName: "properties.involvedInteractionTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, involvedKpiTypes: {
                    serializedName: "properties.involvedKpiTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, involvedRelationships: {
                    serializedName: "properties.involvedRelationships",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, negativeOutcomeExpression: {
                    required: true,
                    serializedName: "properties.negativeOutcomeExpression",
                    type: {
                        name: "String"
                    }
                }, positiveOutcomeExpression: {
                    required: true,
                    serializedName: "properties.positiveOutcomeExpression",
                    type: {
                        name: "String"
                    }
                }, primaryProfileType: {
                    required: true,
                    serializedName: "properties.primaryProfileType",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, predictionName: {
                    serializedName: "properties.predictionName",
                    type: {
                        name: "String"
                    }
                }, scopeExpression: {
                    required: true,
                    serializedName: "properties.scopeExpression",
                    type: {
                        name: "String"
                    }
                }, tenantId: {
                    readOnly: true,
                    serializedName: "properties.tenantId",
                    type: {
                        name: "String"
                    }
                }, autoAnalyze: {
                    required: true,
                    serializedName: "properties.autoAnalyze",
                    type: {
                        name: "Boolean"
                    }
                }, mappings: {
                    required: true,
                    serializedName: "properties.mappings",
                    type: {
                        name: "Composite",
                        className: "PredictionMappings"
                    }
                }, scoreLabel: {
                    required: true,
                    serializedName: "properties.scoreLabel",
                    type: {
                        name: "String"
                    }
                }, grades: {
                    serializedName: "properties.grades",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PredictionGradesItem"
                            }
                        }
                    }
                }, systemGeneratedEntities: {
                    readOnly: true,
                    serializedName: "properties.systemGeneratedEntities",
                    type: {
                        name: "Composite",
                        className: "PredictionSystemGeneratedEntities"
                    }
                } })
        }
    };
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    readOnly: true,
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    readOnly: true,
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    readOnly: true,
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HubListResult = {
        serializedName: "HubListResult",
        type: {
            name: "Composite",
            className: "HubListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Hub"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProfileListResult = {
        serializedName: "ProfileListResult",
        type: {
            name: "Composite",
            className: "ProfileListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ProfileResourceFormat"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var InteractionListResult = {
        serializedName: "InteractionListResult",
        type: {
            name: "Composite",
            className: "InteractionListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InteractionResourceFormat"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RelationshipListResult = {
        serializedName: "RelationshipListResult",
        type: {
            name: "Composite",
            className: "RelationshipListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RelationshipResourceFormat"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RelationshipLinkListResult = {
        serializedName: "RelationshipLinkListResult",
        type: {
            name: "Composite",
            className: "RelationshipLinkListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RelationshipLinkResourceFormat"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AuthorizationPolicyListResult = {
        serializedName: "AuthorizationPolicyListResult",
        type: {
            name: "Composite",
            className: "AuthorizationPolicyListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AuthorizationPolicyResourceFormat"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ConnectorListResult = {
        serializedName: "ConnectorListResult",
        type: {
            name: "Composite",
            className: "ConnectorListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ConnectorResourceFormat"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ConnectorMappingListResult = {
        serializedName: "ConnectorMappingListResult",
        type: {
            name: "Composite",
            className: "ConnectorMappingListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ConnectorMappingResourceFormat"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var KpiListResult = {
        serializedName: "KpiListResult",
        type: {
            name: "Composite",
            className: "KpiListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "KpiResourceFormat"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WidgetTypeListResult = {
        serializedName: "WidgetTypeListResult",
        type: {
            name: "Composite",
            className: "WidgetTypeListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WidgetTypeResourceFormat"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ViewListResult = {
        serializedName: "ViewListResult",
        type: {
            name: "Composite",
            className: "ViewListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ViewResourceFormat"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LinkListResult = {
        serializedName: "LinkListResult",
        type: {
            name: "Composite",
            className: "LinkListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LinkResourceFormat"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RoleListResult = {
        serializedName: "RoleListResult",
        type: {
            name: "Composite",
            className: "RoleListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RoleResourceFormat"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RoleAssignmentListResult = {
        serializedName: "RoleAssignmentListResult",
        type: {
            name: "Composite",
            className: "RoleAssignmentListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RoleAssignmentResourceFormat"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PredictionListResult = {
        serializedName: "PredictionListResult",
        type: {
            name: "Composite",
            className: "PredictionListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PredictionResourceFormat"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        HubBillingInfoFormat: HubBillingInfoFormat,
        HubPropertiesFormat: HubPropertiesFormat,
        Resource: Resource,
        Hub: Hub,
        MetadataDefinitionBase: MetadataDefinitionBase,
        ProfileEnumValidValuesFormat: ProfileEnumValidValuesFormat,
        DataSource: DataSource,
        DataSourcePrecedence: DataSourcePrecedence,
        PropertyDefinition: PropertyDefinition,
        EntityTypeDefinition: EntityTypeDefinition,
        AuthorizationPolicy: AuthorizationPolicy,
        SalesforceDiscoverSetting: SalesforceDiscoverSetting,
        SalesforceTable: SalesforceTable,
        SalesforceConnectorProperties: SalesforceConnectorProperties,
        AzureBlobConnectorProperties: AzureBlobConnectorProperties,
        CrmConnectorEntities: CrmConnectorEntities,
        CrmConnectorProperties: CrmConnectorProperties,
        Connector: Connector,
        ConnectorMappingErrorManagement: ConnectorMappingErrorManagement,
        ConnectorMappingFormat: ConnectorMappingFormat,
        ConnectorMappingAvailability: ConnectorMappingAvailability,
        ConnectorMappingStructure: ConnectorMappingStructure,
        ConnectorMappingCompleteOperation: ConnectorMappingCompleteOperation,
        ConnectorMappingProperties: ConnectorMappingProperties,
        ConnectorMapping: ConnectorMapping,
        KpiThresholds: KpiThresholds,
        KpiGroupByMetadata: KpiGroupByMetadata,
        KpiParticipantProfilesMetadata: KpiParticipantProfilesMetadata,
        KpiAlias: KpiAlias,
        KpiExtract: KpiExtract,
        KpiDefinition: KpiDefinition,
        ProxyResource: ProxyResource,
        WidgetType: WidgetType,
        View: View,
        TypePropertiesMapping: TypePropertiesMapping,
        ParticipantPropertyReference: ParticipantPropertyReference,
        LinkDefinition: LinkDefinition,
        RelationshipTypeFieldMapping: RelationshipTypeFieldMapping,
        RelationshipTypeMapping: RelationshipTypeMapping,
        RelationshipDefinition: RelationshipDefinition,
        RelationshipLinkFieldMapping: RelationshipLinkFieldMapping,
        ParticipantProfilePropertyReference: ParticipantProfilePropertyReference,
        RelationshipLinkDefinition: RelationshipLinkDefinition,
        Participant: Participant,
        InteractionTypeDefinition: InteractionTypeDefinition,
        StrongId: StrongId,
        ProfileTypeDefinition: ProfileTypeDefinition,
        ProfileResourceFormat: ProfileResourceFormat,
        InteractionResourceFormat: InteractionResourceFormat,
        KpiResourceFormat: KpiResourceFormat,
        EnrichingKpi: EnrichingKpi,
        ConnectorResourceFormat: ConnectorResourceFormat,
        ConnectorMappingResourceFormat: ConnectorMappingResourceFormat,
        AuthorizationPolicyResourceFormat: AuthorizationPolicyResourceFormat,
        LinkResourceFormat: LinkResourceFormat,
        RelationshipResourceFormat: RelationshipResourceFormat,
        RelationshipLinkResourceFormat: RelationshipLinkResourceFormat,
        ViewResourceFormat: ViewResourceFormat,
        WidgetTypeResourceFormat: WidgetTypeResourceFormat,
        AssignmentPrincipal: AssignmentPrincipal,
        ResourceSetDescription: ResourceSetDescription,
        RoleAssignment: RoleAssignment,
        RoleAssignmentResourceFormat: RoleAssignmentResourceFormat,
        Role: Role,
        RoleResourceFormat: RoleResourceFormat,
        GetImageUploadUrlInput: GetImageUploadUrlInput,
        ImageDefinition: ImageDefinition,
        RelationshipsLookup: RelationshipsLookup,
        SuggestRelationshipLinksResponse: SuggestRelationshipLinksResponse,
        PredictionMappings: PredictionMappings,
        PredictionGradesItem: PredictionGradesItem,
        PredictionSystemGeneratedEntities: PredictionSystemGeneratedEntities,
        Prediction: Prediction,
        PredictionDistributionDefinitionDistributionsItem: PredictionDistributionDefinitionDistributionsItem,
        PredictionDistributionDefinition: PredictionDistributionDefinition,
        CanonicalProfileDefinitionPropertiesItem: CanonicalProfileDefinitionPropertiesItem,
        CanonicalProfileDefinition: CanonicalProfileDefinition,
        PredictionTrainingResults: PredictionTrainingResults,
        PredictionModelStatus: PredictionModelStatus,
        PredictionResourceFormat: PredictionResourceFormat,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        OperationListResult: OperationListResult,
        HubListResult: HubListResult,
        ProfileListResult: ProfileListResult,
        InteractionListResult: InteractionListResult,
        RelationshipListResult: RelationshipListResult,
        RelationshipLinkListResult: RelationshipLinkListResult,
        AuthorizationPolicyListResult: AuthorizationPolicyListResult,
        ConnectorListResult: ConnectorListResult,
        ConnectorMappingListResult: ConnectorMappingListResult,
        KpiListResult: KpiListResult,
        WidgetTypeListResult: WidgetTypeListResult,
        ViewListResult: ViewListResult,
        LinkListResult: LinkListResult,
        RoleListResult: RoleListResult,
        RoleAssignmentListResult: RoleAssignmentListResult,
        PredictionListResult: PredictionListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        OperationListResult: OperationListResult,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var assignmentName0 = {
        parameterPath: "assignmentName",
        mapper: {
            required: true,
            serializedName: "assignmentName",
            constraints: {
                MaxLength: 128,
                MinLength: 1,
                Pattern: /^[a-zA-Z][a-zA-Z0-9_]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var assignmentName1 = {
        parameterPath: "assignmentName",
        mapper: {
            required: true,
            serializedName: "assignmentName",
            type: {
                name: "String"
            }
        }
    };
    var authorizationPolicyName0 = {
        parameterPath: "authorizationPolicyName",
        mapper: {
            required: true,
            serializedName: "authorizationPolicyName",
            constraints: {
                MaxLength: 50,
                MinLength: 1,
                Pattern: /^[A-Za-z0-9]$|^[A-Za-z0-9][\w-\.]*[A-Za-z0-9]$/
            },
            type: {
                name: "String"
            }
        }
    };
    var authorizationPolicyName1 = {
        parameterPath: "authorizationPolicyName",
        mapper: {
            required: true,
            serializedName: "authorizationPolicyName",
            type: {
                name: "String"
            }
        }
    };
    var connectorName0 = {
        parameterPath: "connectorName",
        mapper: {
            required: true,
            serializedName: "connectorName",
            constraints: {
                MaxLength: 128,
                MinLength: 1,
                Pattern: /^[a-zA-Z][a-zA-Z0-9_]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var connectorName1 = {
        parameterPath: "connectorName",
        mapper: {
            required: true,
            serializedName: "connectorName",
            type: {
                name: "String"
            }
        }
    };
    var hubName0 = {
        parameterPath: "hubName",
        mapper: {
            required: true,
            serializedName: "hubName",
            constraints: {
                MaxLength: 64,
                MinLength: 1,
                Pattern: /^[a-zA-Z][a-zA-Z0-9]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var hubName1 = {
        parameterPath: "hubName",
        mapper: {
            required: true,
            serializedName: "hubName",
            type: {
                name: "String"
            }
        }
    };
    var interactionName0 = {
        parameterPath: "interactionName",
        mapper: {
            required: true,
            serializedName: "interactionName",
            constraints: {
                MaxLength: 128,
                MinLength: 1,
                Pattern: /^[a-zA-Z][a-zA-Z0-9_]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var interactionName1 = {
        parameterPath: "interactionName",
        mapper: {
            required: true,
            serializedName: "interactionName",
            type: {
                name: "String"
            }
        }
    };
    var kpiName0 = {
        parameterPath: "kpiName",
        mapper: {
            required: true,
            serializedName: "kpiName",
            constraints: {
                MaxLength: 512,
                MinLength: 1,
                Pattern: /^[a-zA-Z][a-zA-Z0-9_]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var kpiName1 = {
        parameterPath: "kpiName",
        mapper: {
            required: true,
            serializedName: "kpiName",
            type: {
                name: "String"
            }
        }
    };
    var linkName0 = {
        parameterPath: "linkName",
        mapper: {
            required: true,
            serializedName: "linkName",
            constraints: {
                MaxLength: 512,
                MinLength: 1,
                Pattern: /^[a-zA-Z][a-zA-Z0-9_]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var linkName1 = {
        parameterPath: "linkName",
        mapper: {
            required: true,
            serializedName: "linkName",
            type: {
                name: "String"
            }
        }
    };
    var localeCode = {
        parameterPath: [
            "options",
            "localeCode"
        ],
        mapper: {
            serializedName: "locale-code",
            defaultValue: 'en-us',
            type: {
                name: "String"
            }
        }
    };
    var mappingName0 = {
        parameterPath: "mappingName",
        mapper: {
            required: true,
            serializedName: "mappingName",
            constraints: {
                MaxLength: 128,
                MinLength: 1,
                Pattern: /^[a-zA-Z][a-zA-Z0-9_]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var mappingName1 = {
        parameterPath: "mappingName",
        mapper: {
            required: true,
            serializedName: "mappingName",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var predictionName0 = {
        parameterPath: "predictionName",
        mapper: {
            required: true,
            serializedName: "predictionName",
            constraints: {
                MaxLength: 512,
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var predictionName1 = {
        parameterPath: "predictionName",
        mapper: {
            required: true,
            serializedName: "predictionName",
            type: {
                name: "String"
            }
        }
    };
    var profileName0 = {
        parameterPath: "profileName",
        mapper: {
            required: true,
            serializedName: "profileName",
            constraints: {
                MaxLength: 128,
                MinLength: 1,
                Pattern: /^[a-zA-Z][a-zA-Z0-9_]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var profileName1 = {
        parameterPath: "profileName",
        mapper: {
            required: true,
            serializedName: "profileName",
            type: {
                name: "String"
            }
        }
    };
    var relationshipLinkName0 = {
        parameterPath: "relationshipLinkName",
        mapper: {
            required: true,
            serializedName: "relationshipLinkName",
            constraints: {
                MaxLength: 512,
                MinLength: 1,
                Pattern: /^[a-zA-Z][a-zA-Z0-9_]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var relationshipLinkName1 = {
        parameterPath: "relationshipLinkName",
        mapper: {
            required: true,
            serializedName: "relationshipLinkName",
            type: {
                name: "String"
            }
        }
    };
    var relationshipName0 = {
        parameterPath: "relationshipName",
        mapper: {
            required: true,
            serializedName: "relationshipName",
            constraints: {
                MaxLength: 512,
                MinLength: 1,
                Pattern: /^[a-zA-Z][a-zA-Z0-9_]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var relationshipName1 = {
        parameterPath: "relationshipName",
        mapper: {
            required: true,
            serializedName: "relationshipName",
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var userId = {
        parameterPath: "userId",
        mapper: {
            required: true,
            serializedName: "userId",
            type: {
                name: "String"
            }
        }
    };
    var viewName0 = {
        parameterPath: "viewName",
        mapper: {
            required: true,
            serializedName: "viewName",
            constraints: {
                MaxLength: 512,
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var viewName1 = {
        parameterPath: "viewName",
        mapper: {
            required: true,
            serializedName: "viewName",
            type: {
                name: "String"
            }
        }
    };
    var widgetTypeName = {
        parameterPath: "widgetTypeName",
        mapper: {
            required: true,
            serializedName: "widgetTypeName",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {CustomerInsightsManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.CustomerInsights/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        Hub: Hub,
        Resource: Resource,
        BaseResource: BaseResource,
        HubBillingInfoFormat: HubBillingInfoFormat,
        CloudError: CloudError,
        HubListResult: HubListResult,
        ProxyResource: ProxyResource,
        ProfileResourceFormat: ProfileResourceFormat,
        PropertyDefinition: PropertyDefinition,
        ProfileEnumValidValuesFormat: ProfileEnumValidValuesFormat,
        DataSourcePrecedence: DataSourcePrecedence,
        StrongId: StrongId,
        InteractionResourceFormat: InteractionResourceFormat,
        Participant: Participant,
        ParticipantPropertyReference: ParticipantPropertyReference,
        KpiResourceFormat: KpiResourceFormat,
        KpiGroupByMetadata: KpiGroupByMetadata,
        KpiParticipantProfilesMetadata: KpiParticipantProfilesMetadata,
        KpiThresholds: KpiThresholds,
        KpiAlias: KpiAlias,
        KpiExtract: KpiExtract,
        ConnectorResourceFormat: ConnectorResourceFormat,
        ConnectorMappingResourceFormat: ConnectorMappingResourceFormat,
        ConnectorMappingProperties: ConnectorMappingProperties,
        ConnectorMappingErrorManagement: ConnectorMappingErrorManagement,
        ConnectorMappingFormat: ConnectorMappingFormat,
        ConnectorMappingAvailability: ConnectorMappingAvailability,
        ConnectorMappingStructure: ConnectorMappingStructure,
        ConnectorMappingCompleteOperation: ConnectorMappingCompleteOperation,
        AuthorizationPolicyResourceFormat: AuthorizationPolicyResourceFormat,
        LinkResourceFormat: LinkResourceFormat,
        TypePropertiesMapping: TypePropertiesMapping,
        RelationshipResourceFormat: RelationshipResourceFormat,
        RelationshipTypeMapping: RelationshipTypeMapping,
        RelationshipTypeFieldMapping: RelationshipTypeFieldMapping,
        RelationshipLinkResourceFormat: RelationshipLinkResourceFormat,
        RelationshipLinkFieldMapping: RelationshipLinkFieldMapping,
        ParticipantProfilePropertyReference: ParticipantProfilePropertyReference,
        ViewResourceFormat: ViewResourceFormat,
        WidgetTypeResourceFormat: WidgetTypeResourceFormat,
        RoleAssignmentResourceFormat: RoleAssignmentResourceFormat,
        AssignmentPrincipal: AssignmentPrincipal,
        ResourceSetDescription: ResourceSetDescription,
        RoleResourceFormat: RoleResourceFormat,
        PredictionResourceFormat: PredictionResourceFormat,
        PredictionMappings: PredictionMappings,
        PredictionGradesItem: PredictionGradesItem,
        PredictionSystemGeneratedEntities: PredictionSystemGeneratedEntities
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Hubs. */
    var Hubs = /** @class */ (function () {
        /**
         * Create a Hubs.
         * @param {CustomerInsightsManagementClientContext} client Reference to the service client.
         */
        function Hubs(client) {
            this.client = client;
        }
        Hubs.prototype.createOrUpdate = function (resourceGroupName$$1, hubName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        Hubs.prototype.update = function (resourceGroupName$$1, hubName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                parameters: parameters,
                options: options
            }, updateOperationSpec, callback);
        };
        /**
         * Deletes the specified hub.
         * @param resourceGroupName The name of the resource group.
         * @param hubName The name of the hub.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Hubs.prototype.deleteMethod = function (resourceGroupName$$1, hubName, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, hubName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Hubs.prototype.get = function (resourceGroupName$$1, hubName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                options: options
            }, getOperationSpec, callback);
        };
        Hubs.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        Hubs.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        /**
         * Deletes the specified hub.
         * @param resourceGroupName The name of the resource group.
         * @param hubName The name of the hub.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Hubs.prototype.beginDeleteMethod = function (resourceGroupName$$1, hubName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        Hubs.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        Hubs.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return Hubs;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}",
        urlParameters: [
            resourceGroupName,
            hubName0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Hub, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Hub
            },
            201: {
                bodyMapper: Hub
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Hub, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Hub
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Hub
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HubListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.CustomerInsights/hubs",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HubListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HubListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HubListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        ProfileResourceFormat: ProfileResourceFormat,
        ProxyResource: ProxyResource,
        BaseResource: BaseResource,
        PropertyDefinition: PropertyDefinition,
        ProfileEnumValidValuesFormat: ProfileEnumValidValuesFormat,
        DataSourcePrecedence: DataSourcePrecedence,
        StrongId: StrongId,
        CloudError: CloudError,
        ProfileListResult: ProfileListResult,
        KpiDefinition: KpiDefinition,
        KpiGroupByMetadata: KpiGroupByMetadata,
        KpiParticipantProfilesMetadata: KpiParticipantProfilesMetadata,
        KpiThresholds: KpiThresholds,
        KpiAlias: KpiAlias,
        KpiExtract: KpiExtract,
        Resource: Resource,
        InteractionResourceFormat: InteractionResourceFormat,
        Participant: Participant,
        ParticipantPropertyReference: ParticipantPropertyReference,
        KpiResourceFormat: KpiResourceFormat,
        EnrichingKpi: EnrichingKpi,
        ConnectorResourceFormat: ConnectorResourceFormat,
        ConnectorMappingResourceFormat: ConnectorMappingResourceFormat,
        ConnectorMappingProperties: ConnectorMappingProperties,
        ConnectorMappingErrorManagement: ConnectorMappingErrorManagement,
        ConnectorMappingFormat: ConnectorMappingFormat,
        ConnectorMappingAvailability: ConnectorMappingAvailability,
        ConnectorMappingStructure: ConnectorMappingStructure,
        ConnectorMappingCompleteOperation: ConnectorMappingCompleteOperation,
        AuthorizationPolicyResourceFormat: AuthorizationPolicyResourceFormat,
        LinkResourceFormat: LinkResourceFormat,
        TypePropertiesMapping: TypePropertiesMapping,
        RelationshipResourceFormat: RelationshipResourceFormat,
        RelationshipTypeMapping: RelationshipTypeMapping,
        RelationshipTypeFieldMapping: RelationshipTypeFieldMapping,
        RelationshipLinkResourceFormat: RelationshipLinkResourceFormat,
        RelationshipLinkFieldMapping: RelationshipLinkFieldMapping,
        ParticipantProfilePropertyReference: ParticipantProfilePropertyReference,
        ViewResourceFormat: ViewResourceFormat,
        WidgetTypeResourceFormat: WidgetTypeResourceFormat,
        RoleAssignmentResourceFormat: RoleAssignmentResourceFormat,
        AssignmentPrincipal: AssignmentPrincipal,
        ResourceSetDescription: ResourceSetDescription,
        RoleResourceFormat: RoleResourceFormat,
        PredictionResourceFormat: PredictionResourceFormat,
        PredictionMappings: PredictionMappings,
        PredictionGradesItem: PredictionGradesItem,
        PredictionSystemGeneratedEntities: PredictionSystemGeneratedEntities,
        Hub: Hub,
        HubBillingInfoFormat: HubBillingInfoFormat
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Profiles. */
    var Profiles = /** @class */ (function () {
        /**
         * Create a Profiles.
         * @param {CustomerInsightsManagementClientContext} client Reference to the service client.
         */
        function Profiles(client) {
            this.client = client;
        }
        /**
         * Creates a profile within a Hub, or updates an existing profile.
         * @param resourceGroupName The name of the resource group.
         * @param hubName The name of the hub.
         * @param profileName The name of the profile.
         * @param parameters Parameters supplied to the create/delete Profile type operation
         * @param [options] The optional parameters
         * @returns Promise<Models.ProfilesCreateOrUpdateResponse>
         */
        Profiles.prototype.createOrUpdate = function (resourceGroupName$$1, hubName, profileName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, hubName, profileName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Profiles.prototype.get = function (resourceGroupName$$1, hubName, profileName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                profileName: profileName,
                options: options
            }, getOperationSpec$1, callback);
        };
        /**
         * Deletes a profile within a hub
         * @param resourceGroupName The name of the resource group.
         * @param hubName The name of the hub.
         * @param profileName The name of the profile.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Profiles.prototype.deleteMethod = function (resourceGroupName$$1, hubName, profileName, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, hubName, profileName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Profiles.prototype.listByHub = function (resourceGroupName$$1, hubName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                options: options
            }, listByHubOperationSpec, callback);
        };
        Profiles.prototype.getEnrichingKpis = function (resourceGroupName$$1, hubName, profileName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                profileName: profileName,
                options: options
            }, getEnrichingKpisOperationSpec, callback);
        };
        /**
         * Creates a profile within a Hub, or updates an existing profile.
         * @param resourceGroupName The name of the resource group.
         * @param hubName The name of the hub.
         * @param profileName The name of the profile.
         * @param parameters Parameters supplied to the create/delete Profile type operation
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Profiles.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, hubName, profileName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                profileName: profileName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        /**
         * Deletes a profile within a hub
         * @param resourceGroupName The name of the resource group.
         * @param hubName The name of the hub.
         * @param profileName The name of the profile.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Profiles.prototype.beginDeleteMethod = function (resourceGroupName$$1, hubName, profileName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                profileName: profileName,
                options: options
            }, beginDeleteMethodOperationSpec$1, options);
        };
        Profiles.prototype.listByHubNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByHubNextOperationSpec, callback);
        };
        return Profiles;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/profiles/{profileName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            profileName1,
            subscriptionId
        ],
        queryParameters: [
            localeCode,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProfileResourceFormat
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listByHubOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/profiles",
        urlParameters: [
            resourceGroupName,
            hubName1,
            subscriptionId
        ],
        queryParameters: [
            localeCode,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProfileListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var getEnrichingKpisOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/profiles/{profileName}/getEnrichingKpis",
        urlParameters: [
            resourceGroupName,
            hubName1,
            profileName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "KpiDefinition"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/profiles/{profileName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            profileName0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ProfileResourceFormat, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ProfileResourceFormat
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var beginDeleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/profiles/{profileName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            profileName1,
            subscriptionId
        ],
        queryParameters: [
            localeCode,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listByHubNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProfileListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        InteractionResourceFormat: InteractionResourceFormat,
        ProxyResource: ProxyResource,
        BaseResource: BaseResource,
        PropertyDefinition: PropertyDefinition,
        ProfileEnumValidValuesFormat: ProfileEnumValidValuesFormat,
        DataSourcePrecedence: DataSourcePrecedence,
        Participant: Participant,
        ParticipantPropertyReference: ParticipantPropertyReference,
        CloudError: CloudError,
        InteractionListResult: InteractionListResult,
        SuggestRelationshipLinksResponse: SuggestRelationshipLinksResponse,
        RelationshipsLookup: RelationshipsLookup,
        ParticipantProfilePropertyReference: ParticipantProfilePropertyReference,
        Resource: Resource,
        ProfileResourceFormat: ProfileResourceFormat,
        StrongId: StrongId,
        KpiResourceFormat: KpiResourceFormat,
        KpiGroupByMetadata: KpiGroupByMetadata,
        KpiParticipantProfilesMetadata: KpiParticipantProfilesMetadata,
        KpiThresholds: KpiThresholds,
        KpiAlias: KpiAlias,
        KpiExtract: KpiExtract,
        ConnectorResourceFormat: ConnectorResourceFormat,
        ConnectorMappingResourceFormat: ConnectorMappingResourceFormat,
        ConnectorMappingProperties: ConnectorMappingProperties,
        ConnectorMappingErrorManagement: ConnectorMappingErrorManagement,
        ConnectorMappingFormat: ConnectorMappingFormat,
        ConnectorMappingAvailability: ConnectorMappingAvailability,
        ConnectorMappingStructure: ConnectorMappingStructure,
        ConnectorMappingCompleteOperation: ConnectorMappingCompleteOperation,
        AuthorizationPolicyResourceFormat: AuthorizationPolicyResourceFormat,
        LinkResourceFormat: LinkResourceFormat,
        TypePropertiesMapping: TypePropertiesMapping,
        RelationshipResourceFormat: RelationshipResourceFormat,
        RelationshipTypeMapping: RelationshipTypeMapping,
        RelationshipTypeFieldMapping: RelationshipTypeFieldMapping,
        RelationshipLinkResourceFormat: RelationshipLinkResourceFormat,
        RelationshipLinkFieldMapping: RelationshipLinkFieldMapping,
        ViewResourceFormat: ViewResourceFormat,
        WidgetTypeResourceFormat: WidgetTypeResourceFormat,
        RoleAssignmentResourceFormat: RoleAssignmentResourceFormat,
        AssignmentPrincipal: AssignmentPrincipal,
        ResourceSetDescription: ResourceSetDescription,
        RoleResourceFormat: RoleResourceFormat,
        PredictionResourceFormat: PredictionResourceFormat,
        PredictionMappings: PredictionMappings,
        PredictionGradesItem: PredictionGradesItem,
        PredictionSystemGeneratedEntities: PredictionSystemGeneratedEntities,
        Hub: Hub,
        HubBillingInfoFormat: HubBillingInfoFormat
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Interactions. */
    var Interactions = /** @class */ (function () {
        /**
         * Create a Interactions.
         * @param {CustomerInsightsManagementClientContext} client Reference to the service client.
         */
        function Interactions(client) {
            this.client = client;
        }
        /**
         * Creates an interaction or updates an existing interaction within a hub.
         * @param resourceGroupName The name of the resource group.
         * @param hubName The name of the hub.
         * @param interactionName The name of the interaction.
         * @param parameters Parameters supplied to the CreateOrUpdate Interaction operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.InteractionsCreateOrUpdateResponse>
         */
        Interactions.prototype.createOrUpdate = function (resourceGroupName$$1, hubName, interactionName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, hubName, interactionName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Interactions.prototype.get = function (resourceGroupName$$1, hubName, interactionName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                interactionName: interactionName,
                options: options
            }, getOperationSpec$2, callback);
        };
        Interactions.prototype.listByHub = function (resourceGroupName$$1, hubName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                options: options
            }, listByHubOperationSpec$1, callback);
        };
        Interactions.prototype.suggestRelationshipLinks = function (resourceGroupName$$1, hubName, interactionName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                interactionName: interactionName,
                options: options
            }, suggestRelationshipLinksOperationSpec, callback);
        };
        /**
         * Creates an interaction or updates an existing interaction within a hub.
         * @param resourceGroupName The name of the resource group.
         * @param hubName The name of the hub.
         * @param interactionName The name of the interaction.
         * @param parameters Parameters supplied to the CreateOrUpdate Interaction operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Interactions.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, hubName, interactionName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                interactionName: interactionName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$1, options);
        };
        Interactions.prototype.listByHubNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByHubNextOperationSpec$1, callback);
        };
        return Interactions;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/interactions/{interactionName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            interactionName1,
            subscriptionId
        ],
        queryParameters: [
            localeCode,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: InteractionResourceFormat
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listByHubOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/interactions",
        urlParameters: [
            resourceGroupName,
            hubName1,
            subscriptionId
        ],
        queryParameters: [
            localeCode,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: InteractionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var suggestRelationshipLinksOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/interactions/{interactionName}/suggestRelationshipLinks",
        urlParameters: [
            resourceGroupName,
            hubName1,
            interactionName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SuggestRelationshipLinksResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginCreateOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/interactions/{interactionName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            interactionName0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, InteractionResourceFormat, { required: true })
        },
        responses: {
            200: {
                bodyMapper: InteractionResourceFormat
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listByHubNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: InteractionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        RelationshipResourceFormat: RelationshipResourceFormat,
        ProxyResource: ProxyResource,
        BaseResource: BaseResource,
        PropertyDefinition: PropertyDefinition,
        ProfileEnumValidValuesFormat: ProfileEnumValidValuesFormat,
        DataSourcePrecedence: DataSourcePrecedence,
        RelationshipTypeMapping: RelationshipTypeMapping,
        RelationshipTypeFieldMapping: RelationshipTypeFieldMapping,
        CloudError: CloudError,
        RelationshipListResult: RelationshipListResult,
        Resource: Resource,
        ProfileResourceFormat: ProfileResourceFormat,
        StrongId: StrongId,
        InteractionResourceFormat: InteractionResourceFormat,
        Participant: Participant,
        ParticipantPropertyReference: ParticipantPropertyReference,
        KpiResourceFormat: KpiResourceFormat,
        KpiGroupByMetadata: KpiGroupByMetadata,
        KpiParticipantProfilesMetadata: KpiParticipantProfilesMetadata,
        KpiThresholds: KpiThresholds,
        KpiAlias: KpiAlias,
        KpiExtract: KpiExtract,
        ConnectorResourceFormat: ConnectorResourceFormat,
        ConnectorMappingResourceFormat: ConnectorMappingResourceFormat,
        ConnectorMappingProperties: ConnectorMappingProperties,
        ConnectorMappingErrorManagement: ConnectorMappingErrorManagement,
        ConnectorMappingFormat: ConnectorMappingFormat,
        ConnectorMappingAvailability: ConnectorMappingAvailability,
        ConnectorMappingStructure: ConnectorMappingStructure,
        ConnectorMappingCompleteOperation: ConnectorMappingCompleteOperation,
        AuthorizationPolicyResourceFormat: AuthorizationPolicyResourceFormat,
        LinkResourceFormat: LinkResourceFormat,
        TypePropertiesMapping: TypePropertiesMapping,
        RelationshipLinkResourceFormat: RelationshipLinkResourceFormat,
        RelationshipLinkFieldMapping: RelationshipLinkFieldMapping,
        ParticipantProfilePropertyReference: ParticipantProfilePropertyReference,
        ViewResourceFormat: ViewResourceFormat,
        WidgetTypeResourceFormat: WidgetTypeResourceFormat,
        RoleAssignmentResourceFormat: RoleAssignmentResourceFormat,
        AssignmentPrincipal: AssignmentPrincipal,
        ResourceSetDescription: ResourceSetDescription,
        RoleResourceFormat: RoleResourceFormat,
        PredictionResourceFormat: PredictionResourceFormat,
        PredictionMappings: PredictionMappings,
        PredictionGradesItem: PredictionGradesItem,
        PredictionSystemGeneratedEntities: PredictionSystemGeneratedEntities,
        Hub: Hub,
        HubBillingInfoFormat: HubBillingInfoFormat
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Relationships. */
    var Relationships = /** @class */ (function () {
        /**
         * Create a Relationships.
         * @param {CustomerInsightsManagementClientContext} client Reference to the service client.
         */
        function Relationships(client) {
            this.client = client;
        }
        /**
         * Creates a relationship or updates an existing relationship within a hub.
         * @param resourceGroupName The name of the resource group.
         * @param hubName The name of the hub.
         * @param relationshipName The name of the Relationship.
         * @param parameters Parameters supplied to the CreateOrUpdate Relationship operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.RelationshipsCreateOrUpdateResponse>
         */
        Relationships.prototype.createOrUpdate = function (resourceGroupName$$1, hubName, relationshipName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, hubName, relationshipName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Relationships.prototype.get = function (resourceGroupName$$1, hubName, relationshipName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                relationshipName: relationshipName,
                options: options
            }, getOperationSpec$3, callback);
        };
        /**
         * Deletes a relationship within a hub.
         * @param resourceGroupName The name of the resource group.
         * @param hubName The name of the hub.
         * @param relationshipName The name of the relationship.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Relationships.prototype.deleteMethod = function (resourceGroupName$$1, hubName, relationshipName, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, hubName, relationshipName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Relationships.prototype.listByHub = function (resourceGroupName$$1, hubName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                options: options
            }, listByHubOperationSpec$2, callback);
        };
        /**
         * Creates a relationship or updates an existing relationship within a hub.
         * @param resourceGroupName The name of the resource group.
         * @param hubName The name of the hub.
         * @param relationshipName The name of the Relationship.
         * @param parameters Parameters supplied to the CreateOrUpdate Relationship operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Relationships.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, hubName, relationshipName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                relationshipName: relationshipName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$2, options);
        };
        /**
         * Deletes a relationship within a hub.
         * @param resourceGroupName The name of the resource group.
         * @param hubName The name of the hub.
         * @param relationshipName The name of the relationship.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Relationships.prototype.beginDeleteMethod = function (resourceGroupName$$1, hubName, relationshipName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                relationshipName: relationshipName,
                options: options
            }, beginDeleteMethodOperationSpec$2, options);
        };
        Relationships.prototype.listByHubNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByHubNextOperationSpec$2, callback);
        };
        return Relationships;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/relationships/{relationshipName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            relationshipName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RelationshipResourceFormat
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listByHubOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/relationships",
        urlParameters: [
            resourceGroupName,
            hubName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RelationshipListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var beginCreateOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/relationships/{relationshipName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            relationshipName0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, RelationshipResourceFormat, { required: true })
        },
        responses: {
            200: {
                bodyMapper: RelationshipResourceFormat
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var beginDeleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/relationships/{relationshipName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            relationshipName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listByHubNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RelationshipListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        RelationshipLinkResourceFormat: RelationshipLinkResourceFormat,
        ProxyResource: ProxyResource,
        BaseResource: BaseResource,
        RelationshipLinkFieldMapping: RelationshipLinkFieldMapping,
        ParticipantProfilePropertyReference: ParticipantProfilePropertyReference,
        CloudError: CloudError,
        RelationshipLinkListResult: RelationshipLinkListResult,
        Resource: Resource,
        ProfileResourceFormat: ProfileResourceFormat,
        PropertyDefinition: PropertyDefinition,
        ProfileEnumValidValuesFormat: ProfileEnumValidValuesFormat,
        DataSourcePrecedence: DataSourcePrecedence,
        StrongId: StrongId,
        InteractionResourceFormat: InteractionResourceFormat,
        Participant: Participant,
        ParticipantPropertyReference: ParticipantPropertyReference,
        KpiResourceFormat: KpiResourceFormat,
        KpiGroupByMetadata: KpiGroupByMetadata,
        KpiParticipantProfilesMetadata: KpiParticipantProfilesMetadata,
        KpiThresholds: KpiThresholds,
        KpiAlias: KpiAlias,
        KpiExtract: KpiExtract,
        ConnectorResourceFormat: ConnectorResourceFormat,
        ConnectorMappingResourceFormat: ConnectorMappingResourceFormat,
        ConnectorMappingProperties: ConnectorMappingProperties,
        ConnectorMappingErrorManagement: ConnectorMappingErrorManagement,
        ConnectorMappingFormat: ConnectorMappingFormat,
        ConnectorMappingAvailability: ConnectorMappingAvailability,
        ConnectorMappingStructure: ConnectorMappingStructure,
        ConnectorMappingCompleteOperation: ConnectorMappingCompleteOperation,
        AuthorizationPolicyResourceFormat: AuthorizationPolicyResourceFormat,
        LinkResourceFormat: LinkResourceFormat,
        TypePropertiesMapping: TypePropertiesMapping,
        RelationshipResourceFormat: RelationshipResourceFormat,
        RelationshipTypeMapping: RelationshipTypeMapping,
        RelationshipTypeFieldMapping: RelationshipTypeFieldMapping,
        ViewResourceFormat: ViewResourceFormat,
        WidgetTypeResourceFormat: WidgetTypeResourceFormat,
        RoleAssignmentResourceFormat: RoleAssignmentResourceFormat,
        AssignmentPrincipal: AssignmentPrincipal,
        ResourceSetDescription: ResourceSetDescription,
        RoleResourceFormat: RoleResourceFormat,
        PredictionResourceFormat: PredictionResourceFormat,
        PredictionMappings: PredictionMappings,
        PredictionGradesItem: PredictionGradesItem,
        PredictionSystemGeneratedEntities: PredictionSystemGeneratedEntities,
        Hub: Hub,
        HubBillingInfoFormat: HubBillingInfoFormat
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a RelationshipLinks. */
    var RelationshipLinks = /** @class */ (function () {
        /**
         * Create a RelationshipLinks.
         * @param {CustomerInsightsManagementClientContext} client Reference to the service client.
         */
        function RelationshipLinks(client) {
            this.client = client;
        }
        /**
         * Creates a relationship link or updates an existing relationship link within a hub.
         * @param resourceGroupName The name of the resource group.
         * @param hubName The name of the hub.
         * @param relationshipLinkName The name of the relationship link.
         * @param parameters Parameters supplied to the CreateOrUpdate relationship link operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.RelationshipLinksCreateOrUpdateResponse>
         */
        RelationshipLinks.prototype.createOrUpdate = function (resourceGroupName$$1, hubName, relationshipLinkName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, hubName, relationshipLinkName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        RelationshipLinks.prototype.get = function (resourceGroupName$$1, hubName, relationshipLinkName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                relationshipLinkName: relationshipLinkName,
                options: options
            }, getOperationSpec$4, callback);
        };
        /**
         * Deletes a relationship link within a hub.
         * @param resourceGroupName The name of the resource group.
         * @param hubName The name of the hub.
         * @param relationshipLinkName The name of the relationship.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        RelationshipLinks.prototype.deleteMethod = function (resourceGroupName$$1, hubName, relationshipLinkName, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, hubName, relationshipLinkName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        RelationshipLinks.prototype.listByHub = function (resourceGroupName$$1, hubName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                options: options
            }, listByHubOperationSpec$3, callback);
        };
        /**
         * Creates a relationship link or updates an existing relationship link within a hub.
         * @param resourceGroupName The name of the resource group.
         * @param hubName The name of the hub.
         * @param relationshipLinkName The name of the relationship link.
         * @param parameters Parameters supplied to the CreateOrUpdate relationship link operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        RelationshipLinks.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, hubName, relationshipLinkName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                relationshipLinkName: relationshipLinkName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$3, options);
        };
        /**
         * Deletes a relationship link within a hub.
         * @param resourceGroupName The name of the resource group.
         * @param hubName The name of the hub.
         * @param relationshipLinkName The name of the relationship.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        RelationshipLinks.prototype.beginDeleteMethod = function (resourceGroupName$$1, hubName, relationshipLinkName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                relationshipLinkName: relationshipLinkName,
                options: options
            }, beginDeleteMethodOperationSpec$3, options);
        };
        RelationshipLinks.prototype.listByHubNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByHubNextOperationSpec$3, callback);
        };
        return RelationshipLinks;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/relationshipLinks/{relationshipLinkName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            relationshipLinkName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RelationshipLinkResourceFormat
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var listByHubOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/relationshipLinks",
        urlParameters: [
            resourceGroupName,
            hubName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RelationshipLinkListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var beginCreateOrUpdateOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/relationshipLinks/{relationshipLinkName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            relationshipLinkName0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, RelationshipLinkResourceFormat, { required: true })
        },
        responses: {
            200: {
                bodyMapper: RelationshipLinkResourceFormat
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var beginDeleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/relationshipLinks/{relationshipLinkName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            relationshipLinkName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var listByHubNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RelationshipLinkListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        AuthorizationPolicyResourceFormat: AuthorizationPolicyResourceFormat,
        ProxyResource: ProxyResource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        AuthorizationPolicyListResult: AuthorizationPolicyListResult,
        AuthorizationPolicy: AuthorizationPolicy,
        Resource: Resource,
        ProfileResourceFormat: ProfileResourceFormat,
        PropertyDefinition: PropertyDefinition,
        ProfileEnumValidValuesFormat: ProfileEnumValidValuesFormat,
        DataSourcePrecedence: DataSourcePrecedence,
        StrongId: StrongId,
        InteractionResourceFormat: InteractionResourceFormat,
        Participant: Participant,
        ParticipantPropertyReference: ParticipantPropertyReference,
        KpiResourceFormat: KpiResourceFormat,
        KpiGroupByMetadata: KpiGroupByMetadata,
        KpiParticipantProfilesMetadata: KpiParticipantProfilesMetadata,
        KpiThresholds: KpiThresholds,
        KpiAlias: KpiAlias,
        KpiExtract: KpiExtract,
        ConnectorResourceFormat: ConnectorResourceFormat,
        ConnectorMappingResourceFormat: ConnectorMappingResourceFormat,
        ConnectorMappingProperties: ConnectorMappingProperties,
        ConnectorMappingErrorManagement: ConnectorMappingErrorManagement,
        ConnectorMappingFormat: ConnectorMappingFormat,
        ConnectorMappingAvailability: ConnectorMappingAvailability,
        ConnectorMappingStructure: ConnectorMappingStructure,
        ConnectorMappingCompleteOperation: ConnectorMappingCompleteOperation,
        LinkResourceFormat: LinkResourceFormat,
        TypePropertiesMapping: TypePropertiesMapping,
        RelationshipResourceFormat: RelationshipResourceFormat,
        RelationshipTypeMapping: RelationshipTypeMapping,
        RelationshipTypeFieldMapping: RelationshipTypeFieldMapping,
        RelationshipLinkResourceFormat: RelationshipLinkResourceFormat,
        RelationshipLinkFieldMapping: RelationshipLinkFieldMapping,
        ParticipantProfilePropertyReference: ParticipantProfilePropertyReference,
        ViewResourceFormat: ViewResourceFormat,
        WidgetTypeResourceFormat: WidgetTypeResourceFormat,
        RoleAssignmentResourceFormat: RoleAssignmentResourceFormat,
        AssignmentPrincipal: AssignmentPrincipal,
        ResourceSetDescription: ResourceSetDescription,
        RoleResourceFormat: RoleResourceFormat,
        PredictionResourceFormat: PredictionResourceFormat,
        PredictionMappings: PredictionMappings,
        PredictionGradesItem: PredictionGradesItem,
        PredictionSystemGeneratedEntities: PredictionSystemGeneratedEntities,
        Hub: Hub,
        HubBillingInfoFormat: HubBillingInfoFormat
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a AuthorizationPolicies. */
    var AuthorizationPolicies = /** @class */ (function () {
        /**
         * Create a AuthorizationPolicies.
         * @param {CustomerInsightsManagementClientContext} client Reference to the service client.
         */
        function AuthorizationPolicies(client) {
            this.client = client;
        }
        AuthorizationPolicies.prototype.createOrUpdate = function (resourceGroupName$$1, hubName, authorizationPolicyName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                authorizationPolicyName: authorizationPolicyName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$1, callback);
        };
        AuthorizationPolicies.prototype.get = function (resourceGroupName$$1, hubName, authorizationPolicyName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                authorizationPolicyName: authorizationPolicyName,
                options: options
            }, getOperationSpec$5, callback);
        };
        AuthorizationPolicies.prototype.listByHub = function (resourceGroupName$$1, hubName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                options: options
            }, listByHubOperationSpec$4, callback);
        };
        AuthorizationPolicies.prototype.regeneratePrimaryKey = function (resourceGroupName$$1, hubName, authorizationPolicyName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                authorizationPolicyName: authorizationPolicyName,
                options: options
            }, regeneratePrimaryKeyOperationSpec, callback);
        };
        AuthorizationPolicies.prototype.regenerateSecondaryKey = function (resourceGroupName$$1, hubName, authorizationPolicyName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                authorizationPolicyName: authorizationPolicyName,
                options: options
            }, regenerateSecondaryKeyOperationSpec, callback);
        };
        AuthorizationPolicies.prototype.listByHubNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByHubNextOperationSpec$4, callback);
        };
        return AuthorizationPolicies;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var createOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/authorizationPolicies/{authorizationPolicyName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            authorizationPolicyName0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, AuthorizationPolicyResourceFormat, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AuthorizationPolicyResourceFormat
            },
            201: {
                bodyMapper: AuthorizationPolicyResourceFormat
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var getOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/authorizationPolicies/{authorizationPolicyName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            authorizationPolicyName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AuthorizationPolicyResourceFormat
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listByHubOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/authorizationPolicies",
        urlParameters: [
            resourceGroupName,
            hubName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AuthorizationPolicyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var regeneratePrimaryKeyOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/authorizationPolicies/{authorizationPolicyName}/regeneratePrimaryKey",
        urlParameters: [
            resourceGroupName,
            hubName1,
            authorizationPolicyName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AuthorizationPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var regenerateSecondaryKeyOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/authorizationPolicies/{authorizationPolicyName}/regenerateSecondaryKey",
        urlParameters: [
            resourceGroupName,
            hubName1,
            authorizationPolicyName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AuthorizationPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listByHubNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AuthorizationPolicyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$7 = /*#__PURE__*/Object.freeze({
        ConnectorResourceFormat: ConnectorResourceFormat,
        ProxyResource: ProxyResource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        ConnectorListResult: ConnectorListResult,
        Resource: Resource,
        ProfileResourceFormat: ProfileResourceFormat,
        PropertyDefinition: PropertyDefinition,
        ProfileEnumValidValuesFormat: ProfileEnumValidValuesFormat,
        DataSourcePrecedence: DataSourcePrecedence,
        StrongId: StrongId,
        InteractionResourceFormat: InteractionResourceFormat,
        Participant: Participant,
        ParticipantPropertyReference: ParticipantPropertyReference,
        KpiResourceFormat: KpiResourceFormat,
        KpiGroupByMetadata: KpiGroupByMetadata,
        KpiParticipantProfilesMetadata: KpiParticipantProfilesMetadata,
        KpiThresholds: KpiThresholds,
        KpiAlias: KpiAlias,
        KpiExtract: KpiExtract,
        ConnectorMappingResourceFormat: ConnectorMappingResourceFormat,
        ConnectorMappingProperties: ConnectorMappingProperties,
        ConnectorMappingErrorManagement: ConnectorMappingErrorManagement,
        ConnectorMappingFormat: ConnectorMappingFormat,
        ConnectorMappingAvailability: ConnectorMappingAvailability,
        ConnectorMappingStructure: ConnectorMappingStructure,
        ConnectorMappingCompleteOperation: ConnectorMappingCompleteOperation,
        AuthorizationPolicyResourceFormat: AuthorizationPolicyResourceFormat,
        LinkResourceFormat: LinkResourceFormat,
        TypePropertiesMapping: TypePropertiesMapping,
        RelationshipResourceFormat: RelationshipResourceFormat,
        RelationshipTypeMapping: RelationshipTypeMapping,
        RelationshipTypeFieldMapping: RelationshipTypeFieldMapping,
        RelationshipLinkResourceFormat: RelationshipLinkResourceFormat,
        RelationshipLinkFieldMapping: RelationshipLinkFieldMapping,
        ParticipantProfilePropertyReference: ParticipantProfilePropertyReference,
        ViewResourceFormat: ViewResourceFormat,
        WidgetTypeResourceFormat: WidgetTypeResourceFormat,
        RoleAssignmentResourceFormat: RoleAssignmentResourceFormat,
        AssignmentPrincipal: AssignmentPrincipal,
        ResourceSetDescription: ResourceSetDescription,
        RoleResourceFormat: RoleResourceFormat,
        PredictionResourceFormat: PredictionResourceFormat,
        PredictionMappings: PredictionMappings,
        PredictionGradesItem: PredictionGradesItem,
        PredictionSystemGeneratedEntities: PredictionSystemGeneratedEntities,
        Hub: Hub,
        HubBillingInfoFormat: HubBillingInfoFormat
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Connectors. */
    var Connectors = /** @class */ (function () {
        /**
         * Create a Connectors.
         * @param {CustomerInsightsManagementClientContext} client Reference to the service client.
         */
        function Connectors(client) {
            this.client = client;
        }
        /**
         * Creates a connector or updates an existing connector in the hub.
         * @param resourceGroupName The name of the resource group.
         * @param hubName The name of the hub.
         * @param connectorName The name of the connector.
         * @param parameters Parameters supplied to the CreateOrUpdate Connector operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.ConnectorsCreateOrUpdateResponse>
         */
        Connectors.prototype.createOrUpdate = function (resourceGroupName$$1, hubName, connectorName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, hubName, connectorName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Connectors.prototype.get = function (resourceGroupName$$1, hubName, connectorName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                connectorName: connectorName,
                options: options
            }, getOperationSpec$6, callback);
        };
        /**
         * Deletes a connector in the hub.
         * @param resourceGroupName The name of the resource group.
         * @param hubName The name of the hub.
         * @param connectorName The name of the connector.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Connectors.prototype.deleteMethod = function (resourceGroupName$$1, hubName, connectorName, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, hubName, connectorName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Connectors.prototype.listByHub = function (resourceGroupName$$1, hubName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                options: options
            }, listByHubOperationSpec$5, callback);
        };
        /**
         * Creates a connector or updates an existing connector in the hub.
         * @param resourceGroupName The name of the resource group.
         * @param hubName The name of the hub.
         * @param connectorName The name of the connector.
         * @param parameters Parameters supplied to the CreateOrUpdate Connector operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Connectors.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, hubName, connectorName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                connectorName: connectorName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$4, options);
        };
        /**
         * Deletes a connector in the hub.
         * @param resourceGroupName The name of the resource group.
         * @param hubName The name of the hub.
         * @param connectorName The name of the connector.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Connectors.prototype.beginDeleteMethod = function (resourceGroupName$$1, hubName, connectorName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                connectorName: connectorName,
                options: options
            }, beginDeleteMethodOperationSpec$4, options);
        };
        Connectors.prototype.listByHubNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByHubNextOperationSpec$5, callback);
        };
        return Connectors;
    }());
    // Operation Specifications
    var serializer$7 = new msRest.Serializer(Mappers$7);
    var getOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            connectorName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ConnectorResourceFormat
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var listByHubOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors",
        urlParameters: [
            resourceGroupName,
            hubName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ConnectorListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var beginCreateOrUpdateOperationSpec$4 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            connectorName0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ConnectorResourceFormat, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ConnectorResourceFormat
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var beginDeleteMethodOperationSpec$4 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            connectorName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var listByHubNextOperationSpec$5 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ConnectorListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$8 = /*#__PURE__*/Object.freeze({
        ConnectorMappingResourceFormat: ConnectorMappingResourceFormat,
        ProxyResource: ProxyResource,
        BaseResource: BaseResource,
        ConnectorMappingProperties: ConnectorMappingProperties,
        ConnectorMappingErrorManagement: ConnectorMappingErrorManagement,
        ConnectorMappingFormat: ConnectorMappingFormat,
        ConnectorMappingAvailability: ConnectorMappingAvailability,
        ConnectorMappingStructure: ConnectorMappingStructure,
        ConnectorMappingCompleteOperation: ConnectorMappingCompleteOperation,
        CloudError: CloudError,
        ConnectorMappingListResult: ConnectorMappingListResult,
        Resource: Resource,
        ProfileResourceFormat: ProfileResourceFormat,
        PropertyDefinition: PropertyDefinition,
        ProfileEnumValidValuesFormat: ProfileEnumValidValuesFormat,
        DataSourcePrecedence: DataSourcePrecedence,
        StrongId: StrongId,
        InteractionResourceFormat: InteractionResourceFormat,
        Participant: Participant,
        ParticipantPropertyReference: ParticipantPropertyReference,
        KpiResourceFormat: KpiResourceFormat,
        KpiGroupByMetadata: KpiGroupByMetadata,
        KpiParticipantProfilesMetadata: KpiParticipantProfilesMetadata,
        KpiThresholds: KpiThresholds,
        KpiAlias: KpiAlias,
        KpiExtract: KpiExtract,
        ConnectorResourceFormat: ConnectorResourceFormat,
        AuthorizationPolicyResourceFormat: AuthorizationPolicyResourceFormat,
        LinkResourceFormat: LinkResourceFormat,
        TypePropertiesMapping: TypePropertiesMapping,
        RelationshipResourceFormat: RelationshipResourceFormat,
        RelationshipTypeMapping: RelationshipTypeMapping,
        RelationshipTypeFieldMapping: RelationshipTypeFieldMapping,
        RelationshipLinkResourceFormat: RelationshipLinkResourceFormat,
        RelationshipLinkFieldMapping: RelationshipLinkFieldMapping,
        ParticipantProfilePropertyReference: ParticipantProfilePropertyReference,
        ViewResourceFormat: ViewResourceFormat,
        WidgetTypeResourceFormat: WidgetTypeResourceFormat,
        RoleAssignmentResourceFormat: RoleAssignmentResourceFormat,
        AssignmentPrincipal: AssignmentPrincipal,
        ResourceSetDescription: ResourceSetDescription,
        RoleResourceFormat: RoleResourceFormat,
        PredictionResourceFormat: PredictionResourceFormat,
        PredictionMappings: PredictionMappings,
        PredictionGradesItem: PredictionGradesItem,
        PredictionSystemGeneratedEntities: PredictionSystemGeneratedEntities,
        Hub: Hub,
        HubBillingInfoFormat: HubBillingInfoFormat
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ConnectorMappings. */
    var ConnectorMappings = /** @class */ (function () {
        /**
         * Create a ConnectorMappings.
         * @param {CustomerInsightsManagementClientContext} client Reference to the service client.
         */
        function ConnectorMappings(client) {
            this.client = client;
        }
        ConnectorMappings.prototype.createOrUpdate = function (resourceGroupName$$1, hubName, connectorName, mappingName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                connectorName: connectorName,
                mappingName: mappingName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$2, callback);
        };
        ConnectorMappings.prototype.get = function (resourceGroupName$$1, hubName, connectorName, mappingName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                connectorName: connectorName,
                mappingName: mappingName,
                options: options
            }, getOperationSpec$7, callback);
        };
        ConnectorMappings.prototype.deleteMethod = function (resourceGroupName$$1, hubName, connectorName, mappingName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                connectorName: connectorName,
                mappingName: mappingName,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        ConnectorMappings.prototype.listByConnector = function (resourceGroupName$$1, hubName, connectorName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                connectorName: connectorName,
                options: options
            }, listByConnectorOperationSpec, callback);
        };
        ConnectorMappings.prototype.listByConnectorNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByConnectorNextOperationSpec, callback);
        };
        return ConnectorMappings;
    }());
    // Operation Specifications
    var serializer$8 = new msRest.Serializer(Mappers$8);
    var createOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}/mappings/{mappingName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            connectorName1,
            mappingName0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ConnectorMappingResourceFormat, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ConnectorMappingResourceFormat
            },
            201: {
                bodyMapper: ConnectorMappingResourceFormat
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var getOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}/mappings/{mappingName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            connectorName1,
            mappingName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ConnectorMappingResourceFormat
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}/mappings/{mappingName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            connectorName1,
            mappingName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var listByConnectorOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}/mappings",
        urlParameters: [
            resourceGroupName,
            hubName1,
            connectorName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ConnectorMappingListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var listByConnectorNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ConnectorMappingListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$9 = /*#__PURE__*/Object.freeze({
        KpiResourceFormat: KpiResourceFormat,
        ProxyResource: ProxyResource,
        BaseResource: BaseResource,
        KpiGroupByMetadata: KpiGroupByMetadata,
        KpiParticipantProfilesMetadata: KpiParticipantProfilesMetadata,
        KpiThresholds: KpiThresholds,
        KpiAlias: KpiAlias,
        KpiExtract: KpiExtract,
        CloudError: CloudError,
        KpiListResult: KpiListResult,
        Resource: Resource,
        ProfileResourceFormat: ProfileResourceFormat,
        PropertyDefinition: PropertyDefinition,
        ProfileEnumValidValuesFormat: ProfileEnumValidValuesFormat,
        DataSourcePrecedence: DataSourcePrecedence,
        StrongId: StrongId,
        InteractionResourceFormat: InteractionResourceFormat,
        Participant: Participant,
        ParticipantPropertyReference: ParticipantPropertyReference,
        ConnectorResourceFormat: ConnectorResourceFormat,
        ConnectorMappingResourceFormat: ConnectorMappingResourceFormat,
        ConnectorMappingProperties: ConnectorMappingProperties,
        ConnectorMappingErrorManagement: ConnectorMappingErrorManagement,
        ConnectorMappingFormat: ConnectorMappingFormat,
        ConnectorMappingAvailability: ConnectorMappingAvailability,
        ConnectorMappingStructure: ConnectorMappingStructure,
        ConnectorMappingCompleteOperation: ConnectorMappingCompleteOperation,
        AuthorizationPolicyResourceFormat: AuthorizationPolicyResourceFormat,
        LinkResourceFormat: LinkResourceFormat,
        TypePropertiesMapping: TypePropertiesMapping,
        RelationshipResourceFormat: RelationshipResourceFormat,
        RelationshipTypeMapping: RelationshipTypeMapping,
        RelationshipTypeFieldMapping: RelationshipTypeFieldMapping,
        RelationshipLinkResourceFormat: RelationshipLinkResourceFormat,
        RelationshipLinkFieldMapping: RelationshipLinkFieldMapping,
        ParticipantProfilePropertyReference: ParticipantProfilePropertyReference,
        ViewResourceFormat: ViewResourceFormat,
        WidgetTypeResourceFormat: WidgetTypeResourceFormat,
        RoleAssignmentResourceFormat: RoleAssignmentResourceFormat,
        AssignmentPrincipal: AssignmentPrincipal,
        ResourceSetDescription: ResourceSetDescription,
        RoleResourceFormat: RoleResourceFormat,
        PredictionResourceFormat: PredictionResourceFormat,
        PredictionMappings: PredictionMappings,
        PredictionGradesItem: PredictionGradesItem,
        PredictionSystemGeneratedEntities: PredictionSystemGeneratedEntities,
        Hub: Hub,
        HubBillingInfoFormat: HubBillingInfoFormat
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Kpi. */
    var Kpi = /** @class */ (function () {
        /**
         * Create a Kpi.
         * @param {CustomerInsightsManagementClientContext} client Reference to the service client.
         */
        function Kpi(client) {
            this.client = client;
        }
        /**
         * Creates a KPI or updates an existing KPI in the hub.
         * @param resourceGroupName The name of the resource group.
         * @param hubName The name of the hub.
         * @param kpiName The name of the KPI.
         * @param parameters Parameters supplied to the create/update KPI operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.KpiCreateOrUpdateResponse>
         */
        Kpi.prototype.createOrUpdate = function (resourceGroupName$$1, hubName, kpiName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, hubName, kpiName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Kpi.prototype.get = function (resourceGroupName$$1, hubName, kpiName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                kpiName: kpiName,
                options: options
            }, getOperationSpec$8, callback);
        };
        /**
         * Deletes a KPI in the hub.
         * @param resourceGroupName The name of the resource group.
         * @param hubName The name of the hub.
         * @param kpiName The name of the KPI.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Kpi.prototype.deleteMethod = function (resourceGroupName$$1, hubName, kpiName, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, hubName, kpiName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Kpi.prototype.reprocess = function (resourceGroupName$$1, hubName, kpiName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                kpiName: kpiName,
                options: options
            }, reprocessOperationSpec, callback);
        };
        Kpi.prototype.listByHub = function (resourceGroupName$$1, hubName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                options: options
            }, listByHubOperationSpec$6, callback);
        };
        /**
         * Creates a KPI or updates an existing KPI in the hub.
         * @param resourceGroupName The name of the resource group.
         * @param hubName The name of the hub.
         * @param kpiName The name of the KPI.
         * @param parameters Parameters supplied to the create/update KPI operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Kpi.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, hubName, kpiName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                kpiName: kpiName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$5, options);
        };
        /**
         * Deletes a KPI in the hub.
         * @param resourceGroupName The name of the resource group.
         * @param hubName The name of the hub.
         * @param kpiName The name of the KPI.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Kpi.prototype.beginDeleteMethod = function (resourceGroupName$$1, hubName, kpiName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                kpiName: kpiName,
                options: options
            }, beginDeleteMethodOperationSpec$5, options);
        };
        Kpi.prototype.listByHubNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByHubNextOperationSpec$6, callback);
        };
        return Kpi;
    }());
    // Operation Specifications
    var serializer$9 = new msRest.Serializer(Mappers$9);
    var getOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/kpi/{kpiName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            kpiName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: KpiResourceFormat
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var reprocessOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/kpi/{kpiName}/reprocess",
        urlParameters: [
            resourceGroupName,
            hubName1,
            kpiName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var listByHubOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/kpi",
        urlParameters: [
            resourceGroupName,
            hubName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: KpiListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginCreateOrUpdateOperationSpec$5 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/kpi/{kpiName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            kpiName0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, KpiResourceFormat, { required: true })
        },
        responses: {
            200: {
                bodyMapper: KpiResourceFormat
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginDeleteMethodOperationSpec$5 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/kpi/{kpiName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            kpiName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var listByHubNextOperationSpec$6 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: KpiListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$a = /*#__PURE__*/Object.freeze({
        WidgetTypeListResult: WidgetTypeListResult,
        WidgetTypeResourceFormat: WidgetTypeResourceFormat,
        ProxyResource: ProxyResource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Resource: Resource,
        ProfileResourceFormat: ProfileResourceFormat,
        PropertyDefinition: PropertyDefinition,
        ProfileEnumValidValuesFormat: ProfileEnumValidValuesFormat,
        DataSourcePrecedence: DataSourcePrecedence,
        StrongId: StrongId,
        InteractionResourceFormat: InteractionResourceFormat,
        Participant: Participant,
        ParticipantPropertyReference: ParticipantPropertyReference,
        KpiResourceFormat: KpiResourceFormat,
        KpiGroupByMetadata: KpiGroupByMetadata,
        KpiParticipantProfilesMetadata: KpiParticipantProfilesMetadata,
        KpiThresholds: KpiThresholds,
        KpiAlias: KpiAlias,
        KpiExtract: KpiExtract,
        ConnectorResourceFormat: ConnectorResourceFormat,
        ConnectorMappingResourceFormat: ConnectorMappingResourceFormat,
        ConnectorMappingProperties: ConnectorMappingProperties,
        ConnectorMappingErrorManagement: ConnectorMappingErrorManagement,
        ConnectorMappingFormat: ConnectorMappingFormat,
        ConnectorMappingAvailability: ConnectorMappingAvailability,
        ConnectorMappingStructure: ConnectorMappingStructure,
        ConnectorMappingCompleteOperation: ConnectorMappingCompleteOperation,
        AuthorizationPolicyResourceFormat: AuthorizationPolicyResourceFormat,
        LinkResourceFormat: LinkResourceFormat,
        TypePropertiesMapping: TypePropertiesMapping,
        RelationshipResourceFormat: RelationshipResourceFormat,
        RelationshipTypeMapping: RelationshipTypeMapping,
        RelationshipTypeFieldMapping: RelationshipTypeFieldMapping,
        RelationshipLinkResourceFormat: RelationshipLinkResourceFormat,
        RelationshipLinkFieldMapping: RelationshipLinkFieldMapping,
        ParticipantProfilePropertyReference: ParticipantProfilePropertyReference,
        ViewResourceFormat: ViewResourceFormat,
        RoleAssignmentResourceFormat: RoleAssignmentResourceFormat,
        AssignmentPrincipal: AssignmentPrincipal,
        ResourceSetDescription: ResourceSetDescription,
        RoleResourceFormat: RoleResourceFormat,
        PredictionResourceFormat: PredictionResourceFormat,
        PredictionMappings: PredictionMappings,
        PredictionGradesItem: PredictionGradesItem,
        PredictionSystemGeneratedEntities: PredictionSystemGeneratedEntities,
        Hub: Hub,
        HubBillingInfoFormat: HubBillingInfoFormat
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a WidgetTypes. */
    var WidgetTypes = /** @class */ (function () {
        /**
         * Create a WidgetTypes.
         * @param {CustomerInsightsManagementClientContext} client Reference to the service client.
         */
        function WidgetTypes(client) {
            this.client = client;
        }
        WidgetTypes.prototype.listByHub = function (resourceGroupName$$1, hubName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                options: options
            }, listByHubOperationSpec$7, callback);
        };
        WidgetTypes.prototype.get = function (resourceGroupName$$1, hubName, widgetTypeName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                widgetTypeName: widgetTypeName$$1,
                options: options
            }, getOperationSpec$9, callback);
        };
        WidgetTypes.prototype.listByHubNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByHubNextOperationSpec$7, callback);
        };
        return WidgetTypes;
    }());
    // Operation Specifications
    var serializer$a = new msRest.Serializer(Mappers$a);
    var listByHubOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/widgetTypes",
        urlParameters: [
            resourceGroupName,
            hubName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WidgetTypeListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var getOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/widgetTypes/{widgetTypeName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            widgetTypeName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WidgetTypeResourceFormat
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var listByHubNextOperationSpec$7 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WidgetTypeListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$b = /*#__PURE__*/Object.freeze({
        ViewListResult: ViewListResult,
        ViewResourceFormat: ViewResourceFormat,
        ProxyResource: ProxyResource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Resource: Resource,
        ProfileResourceFormat: ProfileResourceFormat,
        PropertyDefinition: PropertyDefinition,
        ProfileEnumValidValuesFormat: ProfileEnumValidValuesFormat,
        DataSourcePrecedence: DataSourcePrecedence,
        StrongId: StrongId,
        InteractionResourceFormat: InteractionResourceFormat,
        Participant: Participant,
        ParticipantPropertyReference: ParticipantPropertyReference,
        KpiResourceFormat: KpiResourceFormat,
        KpiGroupByMetadata: KpiGroupByMetadata,
        KpiParticipantProfilesMetadata: KpiParticipantProfilesMetadata,
        KpiThresholds: KpiThresholds,
        KpiAlias: KpiAlias,
        KpiExtract: KpiExtract,
        ConnectorResourceFormat: ConnectorResourceFormat,
        ConnectorMappingResourceFormat: ConnectorMappingResourceFormat,
        ConnectorMappingProperties: ConnectorMappingProperties,
        ConnectorMappingErrorManagement: ConnectorMappingErrorManagement,
        ConnectorMappingFormat: ConnectorMappingFormat,
        ConnectorMappingAvailability: ConnectorMappingAvailability,
        ConnectorMappingStructure: ConnectorMappingStructure,
        ConnectorMappingCompleteOperation: ConnectorMappingCompleteOperation,
        AuthorizationPolicyResourceFormat: AuthorizationPolicyResourceFormat,
        LinkResourceFormat: LinkResourceFormat,
        TypePropertiesMapping: TypePropertiesMapping,
        RelationshipResourceFormat: RelationshipResourceFormat,
        RelationshipTypeMapping: RelationshipTypeMapping,
        RelationshipTypeFieldMapping: RelationshipTypeFieldMapping,
        RelationshipLinkResourceFormat: RelationshipLinkResourceFormat,
        RelationshipLinkFieldMapping: RelationshipLinkFieldMapping,
        ParticipantProfilePropertyReference: ParticipantProfilePropertyReference,
        WidgetTypeResourceFormat: WidgetTypeResourceFormat,
        RoleAssignmentResourceFormat: RoleAssignmentResourceFormat,
        AssignmentPrincipal: AssignmentPrincipal,
        ResourceSetDescription: ResourceSetDescription,
        RoleResourceFormat: RoleResourceFormat,
        PredictionResourceFormat: PredictionResourceFormat,
        PredictionMappings: PredictionMappings,
        PredictionGradesItem: PredictionGradesItem,
        PredictionSystemGeneratedEntities: PredictionSystemGeneratedEntities,
        Hub: Hub,
        HubBillingInfoFormat: HubBillingInfoFormat
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Views. */
    var Views = /** @class */ (function () {
        /**
         * Create a Views.
         * @param {CustomerInsightsManagementClientContext} client Reference to the service client.
         */
        function Views(client) {
            this.client = client;
        }
        Views.prototype.listByHub = function (resourceGroupName$$1, hubName, userId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                userId: userId$$1,
                options: options
            }, listByHubOperationSpec$8, callback);
        };
        Views.prototype.createOrUpdate = function (resourceGroupName$$1, hubName, viewName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                viewName: viewName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$3, callback);
        };
        Views.prototype.get = function (resourceGroupName$$1, hubName, viewName, userId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                viewName: viewName,
                userId: userId$$1,
                options: options
            }, getOperationSpec$a, callback);
        };
        Views.prototype.deleteMethod = function (resourceGroupName$$1, hubName, viewName, userId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                viewName: viewName,
                userId: userId$$1,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        Views.prototype.listByHubNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByHubNextOperationSpec$8, callback);
        };
        return Views;
    }());
    // Operation Specifications
    var serializer$b = new msRest.Serializer(Mappers$b);
    var listByHubOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/views",
        urlParameters: [
            resourceGroupName,
            hubName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion,
            userId
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ViewListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var createOrUpdateOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/views/{viewName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            viewName0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ViewResourceFormat, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ViewResourceFormat
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var getOperationSpec$a = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/views/{viewName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            viewName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion,
            userId
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ViewResourceFormat
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/views/{viewName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            viewName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion,
            userId
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var listByHubNextOperationSpec$8 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ViewListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$c = /*#__PURE__*/Object.freeze({
        LinkResourceFormat: LinkResourceFormat,
        ProxyResource: ProxyResource,
        BaseResource: BaseResource,
        TypePropertiesMapping: TypePropertiesMapping,
        ParticipantPropertyReference: ParticipantPropertyReference,
        CloudError: CloudError,
        LinkListResult: LinkListResult,
        Resource: Resource,
        ProfileResourceFormat: ProfileResourceFormat,
        PropertyDefinition: PropertyDefinition,
        ProfileEnumValidValuesFormat: ProfileEnumValidValuesFormat,
        DataSourcePrecedence: DataSourcePrecedence,
        StrongId: StrongId,
        InteractionResourceFormat: InteractionResourceFormat,
        Participant: Participant,
        KpiResourceFormat: KpiResourceFormat,
        KpiGroupByMetadata: KpiGroupByMetadata,
        KpiParticipantProfilesMetadata: KpiParticipantProfilesMetadata,
        KpiThresholds: KpiThresholds,
        KpiAlias: KpiAlias,
        KpiExtract: KpiExtract,
        ConnectorResourceFormat: ConnectorResourceFormat,
        ConnectorMappingResourceFormat: ConnectorMappingResourceFormat,
        ConnectorMappingProperties: ConnectorMappingProperties,
        ConnectorMappingErrorManagement: ConnectorMappingErrorManagement,
        ConnectorMappingFormat: ConnectorMappingFormat,
        ConnectorMappingAvailability: ConnectorMappingAvailability,
        ConnectorMappingStructure: ConnectorMappingStructure,
        ConnectorMappingCompleteOperation: ConnectorMappingCompleteOperation,
        AuthorizationPolicyResourceFormat: AuthorizationPolicyResourceFormat,
        RelationshipResourceFormat: RelationshipResourceFormat,
        RelationshipTypeMapping: RelationshipTypeMapping,
        RelationshipTypeFieldMapping: RelationshipTypeFieldMapping,
        RelationshipLinkResourceFormat: RelationshipLinkResourceFormat,
        RelationshipLinkFieldMapping: RelationshipLinkFieldMapping,
        ParticipantProfilePropertyReference: ParticipantProfilePropertyReference,
        ViewResourceFormat: ViewResourceFormat,
        WidgetTypeResourceFormat: WidgetTypeResourceFormat,
        RoleAssignmentResourceFormat: RoleAssignmentResourceFormat,
        AssignmentPrincipal: AssignmentPrincipal,
        ResourceSetDescription: ResourceSetDescription,
        RoleResourceFormat: RoleResourceFormat,
        PredictionResourceFormat: PredictionResourceFormat,
        PredictionMappings: PredictionMappings,
        PredictionGradesItem: PredictionGradesItem,
        PredictionSystemGeneratedEntities: PredictionSystemGeneratedEntities,
        Hub: Hub,
        HubBillingInfoFormat: HubBillingInfoFormat
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Links. */
    var Links = /** @class */ (function () {
        /**
         * Create a Links.
         * @param {CustomerInsightsManagementClientContext} client Reference to the service client.
         */
        function Links(client) {
            this.client = client;
        }
        /**
         * Creates a link or updates an existing link in the hub.
         * @param resourceGroupName The name of the resource group.
         * @param hubName The name of the hub.
         * @param linkName The name of the link.
         * @param parameters Parameters supplied to the CreateOrUpdate Link operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.LinksCreateOrUpdateResponse>
         */
        Links.prototype.createOrUpdate = function (resourceGroupName$$1, hubName, linkName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, hubName, linkName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Links.prototype.get = function (resourceGroupName$$1, hubName, linkName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                linkName: linkName,
                options: options
            }, getOperationSpec$b, callback);
        };
        Links.prototype.deleteMethod = function (resourceGroupName$$1, hubName, linkName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                linkName: linkName,
                options: options
            }, deleteMethodOperationSpec$2, callback);
        };
        Links.prototype.listByHub = function (resourceGroupName$$1, hubName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                options: options
            }, listByHubOperationSpec$9, callback);
        };
        /**
         * Creates a link or updates an existing link in the hub.
         * @param resourceGroupName The name of the resource group.
         * @param hubName The name of the hub.
         * @param linkName The name of the link.
         * @param parameters Parameters supplied to the CreateOrUpdate Link operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Links.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, hubName, linkName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                linkName: linkName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$6, options);
        };
        Links.prototype.listByHubNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByHubNextOperationSpec$9, callback);
        };
        return Links;
    }());
    // Operation Specifications
    var serializer$c = new msRest.Serializer(Mappers$c);
    var getOperationSpec$b = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/links/{linkName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            linkName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LinkResourceFormat
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var deleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/links/{linkName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            linkName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var listByHubOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/links",
        urlParameters: [
            resourceGroupName,
            hubName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LinkListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var beginCreateOrUpdateOperationSpec$6 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/links/{linkName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            linkName0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, LinkResourceFormat, { required: true })
        },
        responses: {
            200: {
                bodyMapper: LinkResourceFormat
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var listByHubNextOperationSpec$9 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LinkListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$d = /*#__PURE__*/Object.freeze({
        RoleListResult: RoleListResult,
        RoleResourceFormat: RoleResourceFormat,
        ProxyResource: ProxyResource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Resource: Resource,
        ProfileResourceFormat: ProfileResourceFormat,
        PropertyDefinition: PropertyDefinition,
        ProfileEnumValidValuesFormat: ProfileEnumValidValuesFormat,
        DataSourcePrecedence: DataSourcePrecedence,
        StrongId: StrongId,
        InteractionResourceFormat: InteractionResourceFormat,
        Participant: Participant,
        ParticipantPropertyReference: ParticipantPropertyReference,
        KpiResourceFormat: KpiResourceFormat,
        KpiGroupByMetadata: KpiGroupByMetadata,
        KpiParticipantProfilesMetadata: KpiParticipantProfilesMetadata,
        KpiThresholds: KpiThresholds,
        KpiAlias: KpiAlias,
        KpiExtract: KpiExtract,
        ConnectorResourceFormat: ConnectorResourceFormat,
        ConnectorMappingResourceFormat: ConnectorMappingResourceFormat,
        ConnectorMappingProperties: ConnectorMappingProperties,
        ConnectorMappingErrorManagement: ConnectorMappingErrorManagement,
        ConnectorMappingFormat: ConnectorMappingFormat,
        ConnectorMappingAvailability: ConnectorMappingAvailability,
        ConnectorMappingStructure: ConnectorMappingStructure,
        ConnectorMappingCompleteOperation: ConnectorMappingCompleteOperation,
        AuthorizationPolicyResourceFormat: AuthorizationPolicyResourceFormat,
        LinkResourceFormat: LinkResourceFormat,
        TypePropertiesMapping: TypePropertiesMapping,
        RelationshipResourceFormat: RelationshipResourceFormat,
        RelationshipTypeMapping: RelationshipTypeMapping,
        RelationshipTypeFieldMapping: RelationshipTypeFieldMapping,
        RelationshipLinkResourceFormat: RelationshipLinkResourceFormat,
        RelationshipLinkFieldMapping: RelationshipLinkFieldMapping,
        ParticipantProfilePropertyReference: ParticipantProfilePropertyReference,
        ViewResourceFormat: ViewResourceFormat,
        WidgetTypeResourceFormat: WidgetTypeResourceFormat,
        RoleAssignmentResourceFormat: RoleAssignmentResourceFormat,
        AssignmentPrincipal: AssignmentPrincipal,
        ResourceSetDescription: ResourceSetDescription,
        PredictionResourceFormat: PredictionResourceFormat,
        PredictionMappings: PredictionMappings,
        PredictionGradesItem: PredictionGradesItem,
        PredictionSystemGeneratedEntities: PredictionSystemGeneratedEntities,
        Hub: Hub,
        HubBillingInfoFormat: HubBillingInfoFormat
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Roles. */
    var Roles = /** @class */ (function () {
        /**
         * Create a Roles.
         * @param {CustomerInsightsManagementClientContext} client Reference to the service client.
         */
        function Roles(client) {
            this.client = client;
        }
        Roles.prototype.listByHub = function (resourceGroupName$$1, hubName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                options: options
            }, listByHubOperationSpec$a, callback);
        };
        Roles.prototype.listByHubNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByHubNextOperationSpec$a, callback);
        };
        return Roles;
    }());
    // Operation Specifications
    var serializer$d = new msRest.Serializer(Mappers$d);
    var listByHubOperationSpec$a = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/roles",
        urlParameters: [
            resourceGroupName,
            hubName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RoleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var listByHubNextOperationSpec$a = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RoleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$e = /*#__PURE__*/Object.freeze({
        RoleAssignmentListResult: RoleAssignmentListResult,
        RoleAssignmentResourceFormat: RoleAssignmentResourceFormat,
        ProxyResource: ProxyResource,
        BaseResource: BaseResource,
        AssignmentPrincipal: AssignmentPrincipal,
        ResourceSetDescription: ResourceSetDescription,
        CloudError: CloudError,
        Resource: Resource,
        ProfileResourceFormat: ProfileResourceFormat,
        PropertyDefinition: PropertyDefinition,
        ProfileEnumValidValuesFormat: ProfileEnumValidValuesFormat,
        DataSourcePrecedence: DataSourcePrecedence,
        StrongId: StrongId,
        InteractionResourceFormat: InteractionResourceFormat,
        Participant: Participant,
        ParticipantPropertyReference: ParticipantPropertyReference,
        KpiResourceFormat: KpiResourceFormat,
        KpiGroupByMetadata: KpiGroupByMetadata,
        KpiParticipantProfilesMetadata: KpiParticipantProfilesMetadata,
        KpiThresholds: KpiThresholds,
        KpiAlias: KpiAlias,
        KpiExtract: KpiExtract,
        ConnectorResourceFormat: ConnectorResourceFormat,
        ConnectorMappingResourceFormat: ConnectorMappingResourceFormat,
        ConnectorMappingProperties: ConnectorMappingProperties,
        ConnectorMappingErrorManagement: ConnectorMappingErrorManagement,
        ConnectorMappingFormat: ConnectorMappingFormat,
        ConnectorMappingAvailability: ConnectorMappingAvailability,
        ConnectorMappingStructure: ConnectorMappingStructure,
        ConnectorMappingCompleteOperation: ConnectorMappingCompleteOperation,
        AuthorizationPolicyResourceFormat: AuthorizationPolicyResourceFormat,
        LinkResourceFormat: LinkResourceFormat,
        TypePropertiesMapping: TypePropertiesMapping,
        RelationshipResourceFormat: RelationshipResourceFormat,
        RelationshipTypeMapping: RelationshipTypeMapping,
        RelationshipTypeFieldMapping: RelationshipTypeFieldMapping,
        RelationshipLinkResourceFormat: RelationshipLinkResourceFormat,
        RelationshipLinkFieldMapping: RelationshipLinkFieldMapping,
        ParticipantProfilePropertyReference: ParticipantProfilePropertyReference,
        ViewResourceFormat: ViewResourceFormat,
        WidgetTypeResourceFormat: WidgetTypeResourceFormat,
        RoleResourceFormat: RoleResourceFormat,
        PredictionResourceFormat: PredictionResourceFormat,
        PredictionMappings: PredictionMappings,
        PredictionGradesItem: PredictionGradesItem,
        PredictionSystemGeneratedEntities: PredictionSystemGeneratedEntities,
        Hub: Hub,
        HubBillingInfoFormat: HubBillingInfoFormat
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a RoleAssignments. */
    var RoleAssignments = /** @class */ (function () {
        /**
         * Create a RoleAssignments.
         * @param {CustomerInsightsManagementClientContext} client Reference to the service client.
         */
        function RoleAssignments(client) {
            this.client = client;
        }
        RoleAssignments.prototype.listByHub = function (resourceGroupName$$1, hubName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                options: options
            }, listByHubOperationSpec$b, callback);
        };
        /**
         * Creates or updates a role assignment in the hub.
         * @param resourceGroupName The name of the resource group.
         * @param hubName The name of the hub.
         * @param assignmentName The assignment name
         * @param parameters Parameters supplied to the CreateOrUpdate RoleAssignment operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.RoleAssignmentsCreateOrUpdateResponse>
         */
        RoleAssignments.prototype.createOrUpdate = function (resourceGroupName$$1, hubName, assignmentName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, hubName, assignmentName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        RoleAssignments.prototype.get = function (resourceGroupName$$1, hubName, assignmentName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                assignmentName: assignmentName,
                options: options
            }, getOperationSpec$c, callback);
        };
        RoleAssignments.prototype.deleteMethod = function (resourceGroupName$$1, hubName, assignmentName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                assignmentName: assignmentName,
                options: options
            }, deleteMethodOperationSpec$3, callback);
        };
        /**
         * Creates or updates a role assignment in the hub.
         * @param resourceGroupName The name of the resource group.
         * @param hubName The name of the hub.
         * @param assignmentName The assignment name
         * @param parameters Parameters supplied to the CreateOrUpdate RoleAssignment operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        RoleAssignments.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, hubName, assignmentName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                assignmentName: assignmentName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$7, options);
        };
        RoleAssignments.prototype.listByHubNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByHubNextOperationSpec$b, callback);
        };
        return RoleAssignments;
    }());
    // Operation Specifications
    var serializer$e = new msRest.Serializer(Mappers$e);
    var listByHubOperationSpec$b = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/roleAssignments",
        urlParameters: [
            resourceGroupName,
            hubName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RoleAssignmentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var getOperationSpec$c = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/roleAssignments/{assignmentName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            assignmentName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RoleAssignmentResourceFormat
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var deleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/roleAssignments/{assignmentName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            assignmentName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var beginCreateOrUpdateOperationSpec$7 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/roleAssignments/{assignmentName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            assignmentName0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, RoleAssignmentResourceFormat, { required: true })
        },
        responses: {
            200: {
                bodyMapper: RoleAssignmentResourceFormat
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var listByHubNextOperationSpec$b = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RoleAssignmentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$f = /*#__PURE__*/Object.freeze({
        GetImageUploadUrlInput: GetImageUploadUrlInput,
        ImageDefinition: ImageDefinition,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Images. */
    var Images = /** @class */ (function () {
        /**
         * Create a Images.
         * @param {CustomerInsightsManagementClientContext} client Reference to the service client.
         */
        function Images(client) {
            this.client = client;
        }
        Images.prototype.getUploadUrlForEntityType = function (resourceGroupName$$1, hubName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                parameters: parameters,
                options: options
            }, getUploadUrlForEntityTypeOperationSpec, callback);
        };
        Images.prototype.getUploadUrlForData = function (resourceGroupName$$1, hubName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                parameters: parameters,
                options: options
            }, getUploadUrlForDataOperationSpec, callback);
        };
        return Images;
    }());
    // Operation Specifications
    var serializer$f = new msRest.Serializer(Mappers$f);
    var getUploadUrlForEntityTypeOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/images/getEntityTypeImageUploadUrl",
        urlParameters: [
            resourceGroupName,
            hubName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, GetImageUploadUrlInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ImageDefinition
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };
    var getUploadUrlForDataOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/images/getDataImageUploadUrl",
        urlParameters: [
            resourceGroupName,
            hubName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, GetImageUploadUrlInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ImageDefinition
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$g = /*#__PURE__*/Object.freeze({
        PredictionResourceFormat: PredictionResourceFormat,
        ProxyResource: ProxyResource,
        BaseResource: BaseResource,
        PredictionMappings: PredictionMappings,
        PredictionGradesItem: PredictionGradesItem,
        PredictionSystemGeneratedEntities: PredictionSystemGeneratedEntities,
        CloudError: CloudError,
        PredictionTrainingResults: PredictionTrainingResults,
        PredictionDistributionDefinition: PredictionDistributionDefinition,
        PredictionDistributionDefinitionDistributionsItem: PredictionDistributionDefinitionDistributionsItem,
        CanonicalProfileDefinition: CanonicalProfileDefinition,
        CanonicalProfileDefinitionPropertiesItem: CanonicalProfileDefinitionPropertiesItem,
        PredictionModelStatus: PredictionModelStatus,
        PredictionListResult: PredictionListResult,
        Resource: Resource,
        ProfileResourceFormat: ProfileResourceFormat,
        PropertyDefinition: PropertyDefinition,
        ProfileEnumValidValuesFormat: ProfileEnumValidValuesFormat,
        DataSourcePrecedence: DataSourcePrecedence,
        StrongId: StrongId,
        InteractionResourceFormat: InteractionResourceFormat,
        Participant: Participant,
        ParticipantPropertyReference: ParticipantPropertyReference,
        KpiResourceFormat: KpiResourceFormat,
        KpiGroupByMetadata: KpiGroupByMetadata,
        KpiParticipantProfilesMetadata: KpiParticipantProfilesMetadata,
        KpiThresholds: KpiThresholds,
        KpiAlias: KpiAlias,
        KpiExtract: KpiExtract,
        ConnectorResourceFormat: ConnectorResourceFormat,
        ConnectorMappingResourceFormat: ConnectorMappingResourceFormat,
        ConnectorMappingProperties: ConnectorMappingProperties,
        ConnectorMappingErrorManagement: ConnectorMappingErrorManagement,
        ConnectorMappingFormat: ConnectorMappingFormat,
        ConnectorMappingAvailability: ConnectorMappingAvailability,
        ConnectorMappingStructure: ConnectorMappingStructure,
        ConnectorMappingCompleteOperation: ConnectorMappingCompleteOperation,
        AuthorizationPolicyResourceFormat: AuthorizationPolicyResourceFormat,
        LinkResourceFormat: LinkResourceFormat,
        TypePropertiesMapping: TypePropertiesMapping,
        RelationshipResourceFormat: RelationshipResourceFormat,
        RelationshipTypeMapping: RelationshipTypeMapping,
        RelationshipTypeFieldMapping: RelationshipTypeFieldMapping,
        RelationshipLinkResourceFormat: RelationshipLinkResourceFormat,
        RelationshipLinkFieldMapping: RelationshipLinkFieldMapping,
        ParticipantProfilePropertyReference: ParticipantProfilePropertyReference,
        ViewResourceFormat: ViewResourceFormat,
        WidgetTypeResourceFormat: WidgetTypeResourceFormat,
        RoleAssignmentResourceFormat: RoleAssignmentResourceFormat,
        AssignmentPrincipal: AssignmentPrincipal,
        ResourceSetDescription: ResourceSetDescription,
        RoleResourceFormat: RoleResourceFormat,
        Hub: Hub,
        HubBillingInfoFormat: HubBillingInfoFormat
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Predictions. */
    var Predictions = /** @class */ (function () {
        /**
         * Create a Predictions.
         * @param {CustomerInsightsManagementClientContext} client Reference to the service client.
         */
        function Predictions(client) {
            this.client = client;
        }
        /**
         * Creates a Prediction or updates an existing Prediction in the hub.
         * @param resourceGroupName The name of the resource group.
         * @param hubName The name of the hub.
         * @param predictionName The name of the Prediction.
         * @param parameters Parameters supplied to the create/update Prediction operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.PredictionsCreateOrUpdateResponse>
         */
        Predictions.prototype.createOrUpdate = function (resourceGroupName$$1, hubName, predictionName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, hubName, predictionName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Predictions.prototype.get = function (resourceGroupName$$1, hubName, predictionName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                predictionName: predictionName,
                options: options
            }, getOperationSpec$d, callback);
        };
        /**
         * Deletes a Prediction in the hub.
         * @param resourceGroupName The name of the resource group.
         * @param hubName The name of the hub.
         * @param predictionName The name of the Prediction.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Predictions.prototype.deleteMethod = function (resourceGroupName$$1, hubName, predictionName, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, hubName, predictionName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Predictions.prototype.getTrainingResults = function (resourceGroupName$$1, hubName, predictionName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                predictionName: predictionName,
                options: options
            }, getTrainingResultsOperationSpec, callback);
        };
        Predictions.prototype.getModelStatus = function (resourceGroupName$$1, hubName, predictionName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                predictionName: predictionName,
                options: options
            }, getModelStatusOperationSpec, callback);
        };
        Predictions.prototype.modelStatus = function (resourceGroupName$$1, hubName, predictionName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                predictionName: predictionName,
                parameters: parameters,
                options: options
            }, modelStatusOperationSpec, callback);
        };
        Predictions.prototype.listByHub = function (resourceGroupName$$1, hubName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                options: options
            }, listByHubOperationSpec$c, callback);
        };
        /**
         * Creates a Prediction or updates an existing Prediction in the hub.
         * @param resourceGroupName The name of the resource group.
         * @param hubName The name of the hub.
         * @param predictionName The name of the Prediction.
         * @param parameters Parameters supplied to the create/update Prediction operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Predictions.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, hubName, predictionName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                predictionName: predictionName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$8, options);
        };
        /**
         * Deletes a Prediction in the hub.
         * @param resourceGroupName The name of the resource group.
         * @param hubName The name of the hub.
         * @param predictionName The name of the Prediction.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Predictions.prototype.beginDeleteMethod = function (resourceGroupName$$1, hubName, predictionName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                hubName: hubName,
                predictionName: predictionName,
                options: options
            }, beginDeleteMethodOperationSpec$6, options);
        };
        Predictions.prototype.listByHubNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByHubNextOperationSpec$c, callback);
        };
        return Predictions;
    }());
    // Operation Specifications
    var serializer$g = new msRest.Serializer(Mappers$g);
    var getOperationSpec$d = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/predictions/{predictionName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            predictionName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PredictionResourceFormat
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var getTrainingResultsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/predictions/{predictionName}/getTrainingResults",
        urlParameters: [
            resourceGroupName,
            hubName1,
            predictionName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PredictionTrainingResults
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var getModelStatusOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/predictions/{predictionName}/getModelStatus",
        urlParameters: [
            resourceGroupName,
            hubName1,
            predictionName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PredictionModelStatus
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var modelStatusOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/predictions/{predictionName}/modelStatus",
        urlParameters: [
            resourceGroupName,
            hubName1,
            predictionName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, PredictionModelStatus, { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var listByHubOperationSpec$c = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/predictions",
        urlParameters: [
            resourceGroupName,
            hubName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PredictionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var beginCreateOrUpdateOperationSpec$8 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/predictions/{predictionName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            predictionName0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, PredictionResourceFormat, { required: true })
        },
        responses: {
            200: {
                bodyMapper: PredictionResourceFormat
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var beginDeleteMethodOperationSpec$6 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/predictions/{predictionName}",
        urlParameters: [
            resourceGroupName,
            hubName1,
            predictionName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var listByHubNextOperationSpec$c = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PredictionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-customerinsights";
    var packageVersion = "1.0.0";
    var CustomerInsightsManagementClientContext = /** @class */ (function (_super) {
        __extends(CustomerInsightsManagementClientContext, _super);
        /**
         * Initializes a new instance of the CustomerInsightsManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function CustomerInsightsManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2017-04-26';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return CustomerInsightsManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CustomerInsightsManagementClient = /** @class */ (function (_super) {
        __extends(CustomerInsightsManagementClient, _super);
        /**
         * Initializes a new instance of the CustomerInsightsManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function CustomerInsightsManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.operations = new Operations(_this);
            _this.hubs = new Hubs(_this);
            _this.profiles = new Profiles(_this);
            _this.interactions = new Interactions(_this);
            _this.relationships = new Relationships(_this);
            _this.relationshipLinks = new RelationshipLinks(_this);
            _this.authorizationPolicies = new AuthorizationPolicies(_this);
            _this.connectors = new Connectors(_this);
            _this.connectorMappings = new ConnectorMappings(_this);
            _this.kpi = new Kpi(_this);
            _this.widgetTypes = new WidgetTypes(_this);
            _this.views = new Views(_this);
            _this.links = new Links(_this);
            _this.roles = new Roles(_this);
            _this.roleAssignments = new RoleAssignments(_this);
            _this.images = new Images(_this);
            _this.predictions = new Predictions(_this);
            return _this;
        }
        return CustomerInsightsManagementClient;
    }(CustomerInsightsManagementClientContext));

    exports.CustomerInsightsManagementClient = CustomerInsightsManagementClient;
    exports.CustomerInsightsManagementClientContext = CustomerInsightsManagementClientContext;
    exports.CustomerInsightsManagementModels = index;
    exports.CustomerInsightsManagementMappers = mappers;
    exports.Operations = Operations;
    exports.Hubs = Hubs;
    exports.Profiles = Profiles;
    exports.Interactions = Interactions;
    exports.Relationships = Relationships;
    exports.RelationshipLinks = RelationshipLinks;
    exports.AuthorizationPolicies = AuthorizationPolicies;
    exports.Connectors = Connectors;
    exports.ConnectorMappings = ConnectorMappings;
    exports.Kpi = Kpi;
    exports.WidgetTypes = WidgetTypes;
    exports.Views = Views;
    exports.Links = Links;
    exports.Roles = Roles;
    exports.RoleAssignments = RoleAssignments;
    exports.Images = Images;
    exports.Predictions = Predictions;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-customerinsights.js.map
