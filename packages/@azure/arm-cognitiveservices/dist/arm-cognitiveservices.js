/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmCognitiveservices = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for SkuName.
     * Possible values include: 'F0', 'P0', 'P1', 'P2', 'S0', 'S1', 'S2', 'S3',
     * 'S4', 'S5', 'S6'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SkuName = <SkuName>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SkuName;
    (function (SkuName) {
        SkuName["F0"] = "F0";
        SkuName["P0"] = "P0";
        SkuName["P1"] = "P1";
        SkuName["P2"] = "P2";
        SkuName["S0"] = "S0";
        SkuName["S1"] = "S1";
        SkuName["S2"] = "S2";
        SkuName["S3"] = "S3";
        SkuName["S4"] = "S4";
        SkuName["S5"] = "S5";
        SkuName["S6"] = "S6";
    })(SkuName || (SkuName = {}));
    /**
     * Defines values for SkuTier.
     * Possible values include: 'Free', 'Standard', 'Premium'
     * @readonly
     * @enum {string}
     */
    var SkuTier;
    (function (SkuTier) {
        SkuTier["Free"] = "Free";
        SkuTier["Standard"] = "Standard";
        SkuTier["Premium"] = "Premium";
    })(SkuTier || (SkuTier = {}));
    /**
     * Defines values for Kind.
     * Possible values include: 'Bing.Autosuggest.v7', 'Bing.CustomSearch',
     * 'Bing.Search.v7', 'Bing.Speech', 'Bing.SpellCheck.v7', 'ComputerVision',
     * 'ContentModerator', 'CustomSpeech', 'CustomVision.Prediction',
     * 'CustomVision.Training', 'Emotion', 'Face', 'LUIS', 'QnAMaker',
     * 'SpeakerRecognition', 'SpeechTranslation', 'TextAnalytics',
     * 'TextTranslation', 'WebLM'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Kind = <Kind>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Kind;
    (function (Kind) {
        Kind["BingAutosuggestv7"] = "Bing.Autosuggest.v7";
        Kind["BingCustomSearch"] = "Bing.CustomSearch";
        Kind["BingSearchv7"] = "Bing.Search.v7";
        Kind["BingSpeech"] = "Bing.Speech";
        Kind["BingSpellCheckv7"] = "Bing.SpellCheck.v7";
        Kind["ComputerVision"] = "ComputerVision";
        Kind["ContentModerator"] = "ContentModerator";
        Kind["CustomSpeech"] = "CustomSpeech";
        Kind["CustomVisionPrediction"] = "CustomVision.Prediction";
        Kind["CustomVisionTraining"] = "CustomVision.Training";
        Kind["Emotion"] = "Emotion";
        Kind["Face"] = "Face";
        Kind["LUIS"] = "LUIS";
        Kind["QnAMaker"] = "QnAMaker";
        Kind["SpeakerRecognition"] = "SpeakerRecognition";
        Kind["SpeechTranslation"] = "SpeechTranslation";
        Kind["TextAnalytics"] = "TextAnalytics";
        Kind["TextTranslation"] = "TextTranslation";
        Kind["WebLM"] = "WebLM";
    })(Kind || (Kind = {}));
    /**
     * Defines values for ProvisioningState.
     * Possible values include: 'Creating', 'ResolvingDNS', 'Moving', 'Deleting',
     * 'Succeeded', 'Failed'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ProvisioningState =
     * <ProvisioningState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ProvisioningState;
    (function (ProvisioningState) {
        ProvisioningState["Creating"] = "Creating";
        ProvisioningState["ResolvingDNS"] = "ResolvingDNS";
        ProvisioningState["Moving"] = "Moving";
        ProvisioningState["Deleting"] = "Deleting";
        ProvisioningState["Succeeded"] = "Succeeded";
        ProvisioningState["Failed"] = "Failed";
    })(ProvisioningState || (ProvisioningState = {}));
    /**
     * Defines values for KeyName.
     * Possible values include: 'Key1', 'Key2'
     * @readonly
     * @enum {string}
     */
    var KeyName;
    (function (KeyName) {
        KeyName["Key1"] = "Key1";
        KeyName["Key2"] = "Key2";
    })(KeyName || (KeyName = {}));
    /**
     * Defines values for UnitType.
     * Possible values include: 'Count', 'Bytes', 'Seconds', 'Percent',
     * 'CountPerSecond', 'BytesPerSecond', 'Milliseconds'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: UnitType = <UnitType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var UnitType;
    (function (UnitType) {
        UnitType["Count"] = "Count";
        UnitType["Bytes"] = "Bytes";
        UnitType["Seconds"] = "Seconds";
        UnitType["Percent"] = "Percent";
        UnitType["CountPerSecond"] = "CountPerSecond";
        UnitType["BytesPerSecond"] = "BytesPerSecond";
        UnitType["Milliseconds"] = "Milliseconds";
    })(UnitType || (UnitType = {}));
    /**
     * Defines values for QuotaUsageStatus.
     * Possible values include: 'Included', 'Blocked', 'InOverage', 'Unknown'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: QuotaUsageStatus =
     * <QuotaUsageStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var QuotaUsageStatus;
    (function (QuotaUsageStatus) {
        QuotaUsageStatus["Included"] = "Included";
        QuotaUsageStatus["Blocked"] = "Blocked";
        QuotaUsageStatus["InOverage"] = "InOverage";
        QuotaUsageStatus["Unknown"] = "Unknown";
    })(QuotaUsageStatus || (QuotaUsageStatus = {}));
    /**
     * Defines values for ResourceSkuRestrictionsType.
     * Possible values include: 'Location', 'Zone'
     * @readonly
     * @enum {string}
     */
    var ResourceSkuRestrictionsType;
    (function (ResourceSkuRestrictionsType) {
        ResourceSkuRestrictionsType["Location"] = "Location";
        ResourceSkuRestrictionsType["Zone"] = "Zone";
    })(ResourceSkuRestrictionsType || (ResourceSkuRestrictionsType = {}));
    /**
     * Defines values for ResourceSkuRestrictionsReasonCode.
     * Possible values include: 'QuotaId', 'NotAvailableForSubscription'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ResourceSkuRestrictionsReasonCode =
     * <ResourceSkuRestrictionsReasonCode>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ResourceSkuRestrictionsReasonCode;
    (function (ResourceSkuRestrictionsReasonCode) {
        ResourceSkuRestrictionsReasonCode["QuotaId"] = "QuotaId";
        ResourceSkuRestrictionsReasonCode["NotAvailableForSubscription"] = "NotAvailableForSubscription";
    })(ResourceSkuRestrictionsReasonCode || (ResourceSkuRestrictionsReasonCode = {}));

    var index = /*#__PURE__*/Object.freeze({
        get SkuName () { return SkuName; },
        get SkuTier () { return SkuTier; },
        get Kind () { return Kind; },
        get ProvisioningState () { return ProvisioningState; },
        get KeyName () { return KeyName; },
        get UnitType () { return UnitType; },
        get QuotaUsageStatus () { return QuotaUsageStatus; },
        get ResourceSkuRestrictionsType () { return ResourceSkuRestrictionsType; },
        get ResourceSkuRestrictionsReasonCode () { return ResourceSkuRestrictionsReasonCode; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var Sku = {
        serializedName: "Sku",
        type: {
            name: "Composite",
            className: "Sku",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    readOnly: true,
                    serializedName: "tier",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Free",
                            "Standard",
                            "Premium"
                        ]
                    }
                }
            }
        }
    };
    var CognitiveServicesAccountCreateParameters = {
        serializedName: "CognitiveServicesAccountCreateParameters",
        type: {
            name: "Composite",
            className: "CognitiveServicesAccountCreateParameters",
            modelProperties: {
                sku: {
                    required: true,
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                },
                kind: {
                    required: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                properties: {
                    required: true,
                    serializedName: "properties",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var CognitiveServicesAccountUpdateParameters = {
        serializedName: "CognitiveServicesAccountUpdateParameters",
        type: {
            name: "Composite",
            className: "CognitiveServicesAccountUpdateParameters",
            modelProperties: {
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var CognitiveServicesAccount = {
        serializedName: "CognitiveServicesAccount",
        type: {
            name: "Composite",
            className: "CognitiveServicesAccount",
            modelProperties: {
                etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                kind: {
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                },
                endpoint: {
                    serializedName: "properties.endpoint",
                    type: {
                        name: "String"
                    }
                },
                internalId: {
                    serializedName: "properties.internalId",
                    type: {
                        name: "String"
                    }
                },
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CognitiveServicesAccountKeys = {
        serializedName: "CognitiveServicesAccountKeys",
        type: {
            name: "Composite",
            className: "CognitiveServicesAccountKeys",
            modelProperties: {
                key1: {
                    serializedName: "key1",
                    type: {
                        name: "String"
                    }
                },
                key2: {
                    serializedName: "key2",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RegenerateKeyParameters = {
        serializedName: "RegenerateKeyParameters",
        type: {
            name: "Composite",
            className: "RegenerateKeyParameters",
            modelProperties: {
                keyName: {
                    required: true,
                    serializedName: "keyName",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Key1",
                            "Key2"
                        ]
                    }
                }
            }
        }
    };
    var CognitiveServicesResourceAndSku = {
        serializedName: "CognitiveServicesResourceAndSku",
        type: {
            name: "Composite",
            className: "CognitiveServicesResourceAndSku",
            modelProperties: {
                resourceType: {
                    serializedName: "resourceType",
                    type: {
                        name: "String"
                    }
                },
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }
            }
        }
    };
    var CognitiveServicesAccountEnumerateSkusResult = {
        serializedName: "CognitiveServicesAccountEnumerateSkusResult",
        type: {
            name: "Composite",
            className: "CognitiveServicesAccountEnumerateSkusResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CognitiveServicesResourceAndSku"
                            }
                        }
                    }
                }
            }
        }
    };
    var MetricName = {
        serializedName: "MetricName",
        type: {
            name: "Composite",
            className: "MetricName",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                localizedValue: {
                    readOnly: true,
                    serializedName: "localizedValue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Usage = {
        serializedName: "Usage",
        type: {
            name: "Composite",
            className: "Usage",
            modelProperties: {
                unit: {
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "MetricName"
                    }
                },
                quotaPeriod: {
                    readOnly: true,
                    serializedName: "quotaPeriod",
                    type: {
                        name: "String"
                    }
                },
                limit: {
                    readOnly: true,
                    serializedName: "limit",
                    type: {
                        name: "Number"
                    }
                },
                currentValue: {
                    readOnly: true,
                    serializedName: "currentValue",
                    type: {
                        name: "Number"
                    }
                },
                nextResetTime: {
                    readOnly: true,
                    serializedName: "nextResetTime",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UsagesResult = {
        serializedName: "UsagesResult",
        type: {
            name: "Composite",
            className: "UsagesResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Usage"
                            }
                        }
                    }
                }
            }
        }
    };
    var ErrorBody = {
        serializedName: "ErrorBody",
        type: {
            name: "Composite",
            className: "ErrorBody",
            modelProperties: {
                code: {
                    required: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    required: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorModel = {
        serializedName: "Error",
        type: {
            name: "Composite",
            className: "ErrorModel",
            modelProperties: {
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorBody"
                    }
                }
            }
        }
    };
    var OperationDisplayInfo = {
        serializedName: "OperationDisplayInfo",
        type: {
            name: "Composite",
            className: "OperationDisplayInfo",
            modelProperties: {
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationEntity = {
        serializedName: "OperationEntity",
        type: {
            name: "Composite",
            className: "OperationEntity",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplayInfo"
                    }
                },
                origin: {
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var CheckSkuAvailabilityParameter = {
        serializedName: "CheckSkuAvailabilityParameter",
        type: {
            name: "Composite",
            className: "CheckSkuAvailabilityParameter",
            modelProperties: {
                skus: {
                    required: true,
                    serializedName: "skus",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                kind: {
                    required: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CheckSkuAvailabilityResult = {
        serializedName: "CheckSkuAvailabilityResult",
        type: {
            name: "Composite",
            className: "CheckSkuAvailabilityResult",
            modelProperties: {
                kind: {
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                skuName: {
                    serializedName: "skuName",
                    type: {
                        name: "String"
                    }
                },
                skuAvailable: {
                    serializedName: "skuAvailable",
                    type: {
                        name: "Boolean"
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CheckSkuAvailabilityResultList = {
        serializedName: "CheckSkuAvailabilityResultList",
        type: {
            name: "Composite",
            className: "CheckSkuAvailabilityResultList",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CheckSkuAvailabilityResult"
                            }
                        }
                    }
                }
            }
        }
    };
    var ResourceSkuRestrictionInfo = {
        serializedName: "ResourceSkuRestrictionInfo",
        type: {
            name: "Composite",
            className: "ResourceSkuRestrictionInfo",
            modelProperties: {
                locations: {
                    readOnly: true,
                    serializedName: "locations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                zones: {
                    readOnly: true,
                    serializedName: "zones",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ResourceSkuRestrictions = {
        serializedName: "ResourceSkuRestrictions",
        type: {
            name: "Composite",
            className: "ResourceSkuRestrictions",
            modelProperties: {
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Location",
                            "Zone"
                        ]
                    }
                },
                values: {
                    readOnly: true,
                    serializedName: "values",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                restrictionInfo: {
                    readOnly: true,
                    serializedName: "restrictionInfo",
                    type: {
                        name: "Composite",
                        className: "ResourceSkuRestrictionInfo"
                    }
                },
                reasonCode: {
                    readOnly: true,
                    serializedName: "reasonCode",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceSku = {
        serializedName: "ResourceSku",
        type: {
            name: "Composite",
            className: "ResourceSku",
            modelProperties: {
                resourceType: {
                    readOnly: true,
                    serializedName: "resourceType",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    readOnly: true,
                    serializedName: "tier",
                    type: {
                        name: "String"
                    }
                },
                kind: {
                    readOnly: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                },
                locations: {
                    readOnly: true,
                    serializedName: "locations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                restrictions: {
                    readOnly: true,
                    serializedName: "restrictions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceSkuRestrictions"
                            }
                        }
                    }
                }
            }
        }
    };
    var CognitiveServicesAccountListResult = {
        serializedName: "CognitiveServicesAccountListResult",
        type: {
            name: "Composite",
            className: "CognitiveServicesAccountListResult",
            modelProperties: {
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CognitiveServicesAccount"
                            }
                        }
                    }
                }
            }
        }
    };
    var ResourceSkusResult = {
        serializedName: "ResourceSkusResult",
        type: {
            name: "Composite",
            className: "ResourceSkusResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceSku"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationEntityListResult = {
        serializedName: "OperationEntityListResult",
        type: {
            name: "Composite",
            className: "OperationEntityListResult",
            modelProperties: {
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OperationEntity"
                            }
                        }
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        Sku: Sku,
        CognitiveServicesAccountCreateParameters: CognitiveServicesAccountCreateParameters,
        CognitiveServicesAccountUpdateParameters: CognitiveServicesAccountUpdateParameters,
        CognitiveServicesAccount: CognitiveServicesAccount,
        CognitiveServicesAccountKeys: CognitiveServicesAccountKeys,
        RegenerateKeyParameters: RegenerateKeyParameters,
        CognitiveServicesResourceAndSku: CognitiveServicesResourceAndSku,
        CognitiveServicesAccountEnumerateSkusResult: CognitiveServicesAccountEnumerateSkusResult,
        MetricName: MetricName,
        Usage: Usage,
        UsagesResult: UsagesResult,
        ErrorBody: ErrorBody,
        ErrorModel: ErrorModel,
        OperationDisplayInfo: OperationDisplayInfo,
        OperationEntity: OperationEntity,
        CheckSkuAvailabilityParameter: CheckSkuAvailabilityParameter,
        CheckSkuAvailabilityResult: CheckSkuAvailabilityResult,
        CheckSkuAvailabilityResultList: CheckSkuAvailabilityResultList,
        ResourceSkuRestrictionInfo: ResourceSkuRestrictionInfo,
        ResourceSkuRestrictions: ResourceSkuRestrictions,
        ResourceSku: ResourceSku,
        CognitiveServicesAccountListResult: CognitiveServicesAccountListResult,
        ResourceSkusResult: ResourceSkusResult,
        OperationEntityListResult: OperationEntityListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        CognitiveServicesAccountCreateParameters: CognitiveServicesAccountCreateParameters,
        Sku: Sku,
        CognitiveServicesAccount: CognitiveServicesAccount,
        BaseResource: BaseResource,
        ErrorModel: ErrorModel,
        ErrorBody: ErrorBody,
        CognitiveServicesAccountUpdateParameters: CognitiveServicesAccountUpdateParameters,
        CognitiveServicesAccountListResult: CognitiveServicesAccountListResult,
        CognitiveServicesAccountKeys: CognitiveServicesAccountKeys,
        RegenerateKeyParameters: RegenerateKeyParameters,
        CognitiveServicesAccountEnumerateSkusResult: CognitiveServicesAccountEnumerateSkusResult,
        CognitiveServicesResourceAndSku: CognitiveServicesResourceAndSku,
        UsagesResult: UsagesResult,
        Usage: Usage,
        MetricName: MetricName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var accountName = {
        parameterPath: "accountName",
        mapper: {
            required: true,
            serializedName: "accountName",
            constraints: {
                MaxLength: 64,
                MinLength: 2,
                Pattern: /^[a-zA-Z0-9][a-zA-Z0-9_.-]*$/
            },
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var filter = {
        parameterPath: [
            "options",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var location = {
        parameterPath: "location",
        mapper: {
            required: true,
            serializedName: "location",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Accounts. */
    var Accounts = /** @class */ (function () {
        /**
         * Create a Accounts.
         * @param {CognitiveServicesManagementClientContext} client Reference to the service client.
         */
        function Accounts(client) {
            this.client = client;
        }
        Accounts.prototype.create = function (resourceGroupName$$1, accountName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                parameters: parameters,
                options: options
            }, createOperationSpec, callback);
        };
        Accounts.prototype.update = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, updateOperationSpec, callback);
        };
        Accounts.prototype.deleteMethod = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        Accounts.prototype.getProperties = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, getPropertiesOperationSpec, callback);
        };
        Accounts.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        Accounts.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Accounts.prototype.listKeys = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, listKeysOperationSpec, callback);
        };
        Accounts.prototype.regenerateKey = function (resourceGroupName$$1, accountName$$1, keyName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                keyName: keyName,
                options: options
            }, regenerateKeyOperationSpec, callback);
        };
        Accounts.prototype.listSkus = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, listSkusOperationSpec, callback);
        };
        Accounts.prototype.getUsages = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, getUsagesOperationSpec, callback);
        };
        Accounts.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        Accounts.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Accounts;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var createOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, CognitiveServicesAccountCreateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: CognitiveServicesAccount
            },
            201: {
                bodyMapper: CognitiveServicesAccount
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                sku: [
                    "options",
                    "sku"
                ],
                tags: [
                    "options",
                    "tags"
                ]
            },
            mapper: __assign({}, CognitiveServicesAccountUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: CognitiveServicesAccount
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var getPropertiesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CognitiveServicesAccount
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CognitiveServicesAccountListResult
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var listOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/accounts",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CognitiveServicesAccountListResult
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var listKeysOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/listKeys",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CognitiveServicesAccountKeys
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var regenerateKeyOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/regenerateKey",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                keyName: "keyName"
            },
            mapper: __assign({}, RegenerateKeyParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: CognitiveServicesAccountKeys
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var listSkusOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/skus",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CognitiveServicesAccountEnumerateSkusResult
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var getUsagesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/usages",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsagesResult
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CognitiveServicesAccountListResult
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CognitiveServicesAccountListResult
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        ResourceSkusResult: ResourceSkusResult,
        ResourceSku: ResourceSku,
        ResourceSkuRestrictions: ResourceSkuRestrictions,
        ResourceSkuRestrictionInfo: ResourceSkuRestrictionInfo,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ResourceSkus. */
    var ResourceSkus = /** @class */ (function () {
        /**
         * Create a ResourceSkus.
         * @param {CognitiveServicesManagementClientContext} client Reference to the service client.
         */
        function ResourceSkus(client) {
            this.client = client;
        }
        ResourceSkus.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        ResourceSkus.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return ResourceSkus;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/skus",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceSkusResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceSkusResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        OperationEntityListResult: OperationEntityListResult,
        OperationEntity: OperationEntity,
        OperationDisplayInfo: OperationDisplayInfo,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {CognitiveServicesManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$2, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$2, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "providers/Microsoft.CognitiveServices/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationEntityListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationEntityListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        CheckSkuAvailabilityParameter: CheckSkuAvailabilityParameter,
        CheckSkuAvailabilityResultList: CheckSkuAvailabilityResultList,
        CheckSkuAvailabilityResult: CheckSkuAvailabilityResult,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a CheckSkuAvailability. */
    var CheckSkuAvailability = /** @class */ (function () {
        /**
         * Create a CheckSkuAvailability.
         * @param {CognitiveServicesManagementClientContext} client Reference to the service client.
         */
        function CheckSkuAvailability(client) {
            this.client = client;
        }
        CheckSkuAvailability.prototype.list = function (location$$1, skus, kind, type, options, callback) {
            return this.client.sendOperationRequest({
                location: location$$1,
                skus: skus,
                kind: kind,
                type: type,
                options: options
            }, listOperationSpec$3, callback);
        };
        return CheckSkuAvailability;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listOperationSpec$3 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/locations/{location}/checkSkuAvailability",
        urlParameters: [
            subscriptionId,
            location
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                skus: "skus",
                kind: "kind",
                type: "type"
            },
            mapper: __assign({}, CheckSkuAvailabilityParameter, { required: true })
        },
        responses: {
            200: {
                bodyMapper: CheckSkuAvailabilityResultList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-cognitiveservices";
    var packageVersion = "1.0.0";
    var CognitiveServicesManagementClientContext = /** @class */ (function (_super) {
        __extends(CognitiveServicesManagementClientContext, _super);
        /**
         * Initializes a new instance of the CognitiveServicesManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Azure Subscription ID.
         * @param [options] The parameter options
         */
        function CognitiveServicesManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2017-04-18';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return CognitiveServicesManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CognitiveServicesManagementClient = /** @class */ (function (_super) {
        __extends(CognitiveServicesManagementClient, _super);
        /**
         * Initializes a new instance of the CognitiveServicesManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Azure Subscription ID.
         * @param [options] The parameter options
         */
        function CognitiveServicesManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.accounts = new Accounts(_this);
            _this.resourceSkus = new ResourceSkus(_this);
            _this.operations = new Operations(_this);
            _this.checkSkuAvailability = new CheckSkuAvailability(_this);
            return _this;
        }
        return CognitiveServicesManagementClient;
    }(CognitiveServicesManagementClientContext));

    exports.CognitiveServicesManagementClient = CognitiveServicesManagementClient;
    exports.CognitiveServicesManagementClientContext = CognitiveServicesManagementClientContext;
    exports.CognitiveServicesManagementModels = index;
    exports.CognitiveServicesManagementMappers = mappers;
    exports.Accounts = Accounts;
    exports.ResourceSkus = ResourceSkus;
    exports.Operations = Operations;
    exports.CheckSkuAvailability = CheckSkuAvailability;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-cognitiveservices.js.map
