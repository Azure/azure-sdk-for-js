/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmDatabox = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for ShareDestinationFormatType.
     * Possible values include: 'UnknownType', 'HCS', 'BlockBlob', 'PageBlob',
     * 'AzureFile'
     * @readonly
     * @enum {string}
     */
    var ShareDestinationFormatType;
    (function (ShareDestinationFormatType) {
        /**
         * Unknown format.
         */
        ShareDestinationFormatType["UnknownType"] = "UnknownType";
        /**
         * Storsimple data format.
         */
        ShareDestinationFormatType["HCS"] = "HCS";
        /**
         * Azure storage block blob format.
         */
        ShareDestinationFormatType["BlockBlob"] = "BlockBlob";
        /**
         * Azure storage page blob format.
         */
        ShareDestinationFormatType["PageBlob"] = "PageBlob";
        /**
         * Azure storage file format.
         */
        ShareDestinationFormatType["AzureFile"] = "AzureFile";
    })(ShareDestinationFormatType || (ShareDestinationFormatType = {}));
    /**
     * Defines values for AccessProtocol.
     * Possible values include: 'SMB', 'NFS'
     * @readonly
     * @enum {string}
     */
    var AccessProtocol;
    (function (AccessProtocol) {
        /**
         * Server Message Block protocol(SMB).
         */
        AccessProtocol["SMB"] = "SMB";
        /**
         * Network File System protocol(NFS).
         */
        AccessProtocol["NFS"] = "NFS";
    })(AccessProtocol || (AccessProtocol = {}));
    /**
     * Defines values for AddressValidationStatus.
     * Possible values include: 'Valid', 'Invalid', 'Ambiguous'
     * @readonly
     * @enum {string}
     */
    var AddressValidationStatus;
    (function (AddressValidationStatus) {
        /**
         * Address provided is valid.
         */
        AddressValidationStatus["Valid"] = "Valid";
        /**
         * Address provided is invalid or not supported.
         */
        AddressValidationStatus["Invalid"] = "Invalid";
        /**
         * Address provided is ambiguous, please choose one of the alternate
         * addresses returned.
         */
        AddressValidationStatus["Ambiguous"] = "Ambiguous";
    })(AddressValidationStatus || (AddressValidationStatus = {}));
    /**
     * Defines values for AddressType.
     * Possible values include: 'None', 'Residential', 'Commercial'
     * @readonly
     * @enum {string}
     */
    var AddressType;
    (function (AddressType) {
        /**
         * Address type not known.
         */
        AddressType["None"] = "None";
        /**
         * Residential Address.
         */
        AddressType["Residential"] = "Residential";
        /**
         * Commercial Address.
         */
        AddressType["Commercial"] = "Commercial";
    })(AddressType || (AddressType = {}));
    /**
     * Defines values for SkuName.
     * Possible values include: 'DataBox', 'DataBoxDisk', 'DataBoxHeavy'
     * @readonly
     * @enum {string}
     */
    var SkuName;
    (function (SkuName) {
        /**
         * Databox.
         */
        SkuName["DataBox"] = "DataBox";
        /**
         * DataboxDisk.
         */
        SkuName["DataBoxDisk"] = "DataBoxDisk";
        /**
         * DataboxHeavy.
         */
        SkuName["DataBoxHeavy"] = "DataBoxHeavy";
    })(SkuName || (SkuName = {}));
    /**
     * Defines values for SkuDisabledReason.
     * Possible values include: 'None', 'Country', 'Region', 'Feature', 'OfferType'
     * @readonly
     * @enum {string}
     */
    var SkuDisabledReason;
    (function (SkuDisabledReason) {
        /**
         * SKU is not disabled.
         */
        SkuDisabledReason["None"] = "None";
        /**
         * SKU is not available in the requested country.
         */
        SkuDisabledReason["Country"] = "Country";
        /**
         * SKU is not available to push data to the requested storage account region.
         */
        SkuDisabledReason["Region"] = "Region";
        /**
         * Required features are not enabled for the SKU.
         */
        SkuDisabledReason["Feature"] = "Feature";
        /**
         * Subscription does not have required offer types for the SKU.
         */
        SkuDisabledReason["OfferType"] = "OfferType";
    })(SkuDisabledReason || (SkuDisabledReason = {}));
    /**
     * Defines values for NotificationStageName.
     * Possible values include: 'DevicePrepared', 'Dispatched', 'Delivered',
     * 'PickedUp', 'AtAzureDC', 'DataCopy'
     * @readonly
     * @enum {string}
     */
    var NotificationStageName;
    (function (NotificationStageName) {
        /**
         * Notification at device prepared stage.
         */
        NotificationStageName["DevicePrepared"] = "DevicePrepared";
        /**
         * Notification at device dispatched stage.
         */
        NotificationStageName["Dispatched"] = "Dispatched";
        /**
         * Notification at device delivered stage.
         */
        NotificationStageName["Delivered"] = "Delivered";
        /**
         * Notification at device picked up from user stage.
         */
        NotificationStageName["PickedUp"] = "PickedUp";
        /**
         * Notification at device received at azure datacenter stage.
         */
        NotificationStageName["AtAzureDC"] = "AtAzureDC";
        /**
         * Notification at data copy started stage.
         */
        NotificationStageName["DataCopy"] = "DataCopy";
    })(NotificationStageName || (NotificationStageName = {}));
    /**
     * Defines values for CopyStatus.
     * Possible values include: 'NotStarted', 'InProgress', 'Completed',
     * 'CompletedWithErrors', 'Failed', 'NotReturned'
     * @readonly
     * @enum {string}
     */
    var CopyStatus;
    (function (CopyStatus) {
        /**
         * Data copy hasnt started yet.
         */
        CopyStatus["NotStarted"] = "NotStarted";
        /**
         * Data copy is in progress.
         */
        CopyStatus["InProgress"] = "InProgress";
        /**
         * Data copy completed.
         */
        CopyStatus["Completed"] = "Completed";
        /**
         * Data copy completed with errors.
         */
        CopyStatus["CompletedWithErrors"] = "CompletedWithErrors";
        /**
         * Data copy failed. No data was copied.
         */
        CopyStatus["Failed"] = "Failed";
        /**
         * No copy triggered as device was not returned.
         */
        CopyStatus["NotReturned"] = "NotReturned";
    })(CopyStatus || (CopyStatus = {}));
    /**
     * Defines values for StageName.
     * Possible values include: 'DeviceOrdered', 'DevicePrepared', 'Dispatched',
     * 'Delivered', 'PickedUp', 'AtAzureDC', 'DataCopy', 'Completed',
     * 'CompletedWithErrors', 'Cancelled', 'Failed_IssueReportedAtCustomer',
     * 'Failed_IssueDetectedAtAzureDC', 'Aborted'
     * @readonly
     * @enum {string}
     */
    var StageName;
    (function (StageName) {
        /**
         * An order has been created.
         */
        StageName["DeviceOrdered"] = "DeviceOrdered";
        /**
         * A device has been prepared for the order.
         */
        StageName["DevicePrepared"] = "DevicePrepared";
        /**
         * Device has been dispatched to the user of the order.
         */
        StageName["Dispatched"] = "Dispatched";
        /**
         * Device has been delivered to the user of the order.
         */
        StageName["Delivered"] = "Delivered";
        /**
         * Device has been picked up from user and in transit to azure datacenter.
         */
        StageName["PickedUp"] = "PickedUp";
        /**
         * Device has been received at azure datacenter from the user.
         */
        StageName["AtAzureDC"] = "AtAzureDC";
        /**
         * Data copy from the device at azure datacenter.
         */
        StageName["DataCopy"] = "DataCopy";
        /**
         * Order has completed.
         */
        StageName["Completed"] = "Completed";
        /**
         * Order has completed with errors.
         */
        StageName["CompletedWithErrors"] = "CompletedWithErrors";
        /**
         * Order has been cancelled.
         */
        StageName["Cancelled"] = "Cancelled";
        /**
         * Order has failed due to issue reported by user.
         */
        StageName["FailedIssueReportedAtCustomer"] = "Failed_IssueReportedAtCustomer";
        /**
         * Order has failed due to issue detected at azure datacenter.
         */
        StageName["FailedIssueDetectedAtAzureDC"] = "Failed_IssueDetectedAtAzureDC";
        /**
         * Order has been aborted.
         */
        StageName["Aborted"] = "Aborted";
    })(StageName || (StageName = {}));
    /**
     * Defines values for StageStatus.
     * Possible values include: 'None', 'InProgress', 'Succeeded', 'Failed',
     * 'Cancelled', 'Cancelling', 'SucceededWithErrors'
     * @readonly
     * @enum {string}
     */
    var StageStatus;
    (function (StageStatus) {
        /**
         * No status available yet.
         */
        StageStatus["None"] = "None";
        /**
         * Stage is in progress.
         */
        StageStatus["InProgress"] = "InProgress";
        /**
         * Stage has succeeded.
         */
        StageStatus["Succeeded"] = "Succeeded";
        /**
         * Stage has failed.
         */
        StageStatus["Failed"] = "Failed";
        /**
         * Stage has been cancelled.
         */
        StageStatus["Cancelled"] = "Cancelled";
        /**
         * Stage is cancelling.
         */
        StageStatus["Cancelling"] = "Cancelling";
        /**
         * Stage has succeeded with errors.
         */
        StageStatus["SucceededWithErrors"] = "SucceededWithErrors";
    })(StageStatus || (StageStatus = {}));

    var index = /*#__PURE__*/Object.freeze({
        get ShareDestinationFormatType () { return ShareDestinationFormatType; },
        get AccessProtocol () { return AccessProtocol; },
        get AddressValidationStatus () { return AddressValidationStatus; },
        get AddressType () { return AddressType; },
        get SkuName () { return SkuName; },
        get SkuDisabledReason () { return SkuDisabledReason; },
        get NotificationStageName () { return NotificationStageName; },
        get CopyStatus () { return CopyStatus; },
        get StageName () { return StageName; },
        get StageStatus () { return StageStatus; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var ShareCredentialDetails = {
        serializedName: "ShareCredentialDetails",
        type: {
            name: "Composite",
            className: "ShareCredentialDetails",
            modelProperties: {
                shareName: {
                    readOnly: true,
                    serializedName: "shareName",
                    type: {
                        name: "String"
                    }
                },
                shareType: {
                    readOnly: true,
                    serializedName: "shareType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "UnknownType",
                            "HCS",
                            "BlockBlob",
                            "PageBlob",
                            "AzureFile"
                        ]
                    }
                },
                userName: {
                    readOnly: true,
                    serializedName: "userName",
                    type: {
                        name: "String"
                    }
                },
                password: {
                    readOnly: true,
                    serializedName: "password",
                    type: {
                        name: "String"
                    }
                },
                supportedAccessProtocols: {
                    readOnly: true,
                    serializedName: "supportedAccessProtocols",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Enum",
                                allowedValues: [
                                    "SMB",
                                    "NFS"
                                ]
                            }
                        }
                    }
                }
            }
        }
    };
    var AccountCredentialDetails = {
        serializedName: "AccountCredentialDetails",
        type: {
            name: "Composite",
            className: "AccountCredentialDetails",
            modelProperties: {
                accountName: {
                    readOnly: true,
                    serializedName: "accountName",
                    type: {
                        name: "String"
                    }
                },
                accountConnectionString: {
                    readOnly: true,
                    serializedName: "accountConnectionString",
                    type: {
                        name: "String"
                    }
                },
                shareCredentialDetails: {
                    readOnly: true,
                    serializedName: "shareCredentialDetails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ShareCredentialDetails"
                            }
                        }
                    }
                }
            }
        }
    };
    var ShippingAddress = {
        serializedName: "ShippingAddress",
        type: {
            name: "Composite",
            className: "ShippingAddress",
            modelProperties: {
                streetAddress1: {
                    required: true,
                    serializedName: "streetAddress1",
                    type: {
                        name: "String"
                    }
                },
                streetAddress2: {
                    serializedName: "streetAddress2",
                    type: {
                        name: "String"
                    }
                },
                streetAddress3: {
                    serializedName: "streetAddress3",
                    type: {
                        name: "String"
                    }
                },
                city: {
                    serializedName: "city",
                    type: {
                        name: "String"
                    }
                },
                stateOrProvince: {
                    serializedName: "stateOrProvince",
                    type: {
                        name: "String"
                    }
                },
                country: {
                    required: true,
                    serializedName: "country",
                    type: {
                        name: "String"
                    }
                },
                postalCode: {
                    required: true,
                    serializedName: "postalCode",
                    type: {
                        name: "String"
                    }
                },
                zipExtendedCode: {
                    serializedName: "zipExtendedCode",
                    type: {
                        name: "String"
                    }
                },
                companyName: {
                    serializedName: "companyName",
                    type: {
                        name: "String"
                    }
                },
                addressType: {
                    serializedName: "addressType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "Residential",
                            "Commercial"
                        ]
                    }
                }
            }
        }
    };
    var AddressValidationOutput = {
        serializedName: "AddressValidationOutput",
        type: {
            name: "Composite",
            className: "AddressValidationOutput",
            modelProperties: {
                validationStatus: {
                    readOnly: true,
                    serializedName: "properties.validationStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Valid",
                            "Invalid",
                            "Ambiguous"
                        ]
                    }
                },
                alternateAddresses: {
                    readOnly: true,
                    serializedName: "properties.alternateAddresses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ShippingAddress"
                            }
                        }
                    }
                }
            }
        }
    };
    var ApplianceNetworkConfiguration = {
        serializedName: "ApplianceNetworkConfiguration",
        type: {
            name: "Composite",
            className: "ApplianceNetworkConfiguration",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                macAddress: {
                    readOnly: true,
                    serializedName: "macAddress",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ArmBaseObject = {
        serializedName: "ArmBaseObject",
        type: {
            name: "Composite",
            className: "ArmBaseObject",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AvailableSkuRequest = {
        serializedName: "AvailableSkuRequest",
        type: {
            name: "Composite",
            className: "AvailableSkuRequest",
            modelProperties: {
                transferType: {
                    required: true,
                    isConstant: true,
                    serializedName: "transferType",
                    defaultValue: 'ImportToAzure',
                    type: {
                        name: "String"
                    }
                },
                country: {
                    required: true,
                    serializedName: "country",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                skuNames: {
                    serializedName: "skuNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Enum",
                                allowedValues: [
                                    "DataBox",
                                    "DataBoxDisk",
                                    "DataBoxHeavy"
                                ]
                            }
                        }
                    }
                }
            }
        }
    };
    var Sku = {
        serializedName: "Sku",
        type: {
            name: "Composite",
            className: "Sku",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "DataBox",
                            "DataBoxDisk",
                            "DataBoxHeavy"
                        ]
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                family: {
                    serializedName: "family",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DestinationToServiceLocationMap = {
        serializedName: "DestinationToServiceLocationMap",
        type: {
            name: "Composite",
            className: "DestinationToServiceLocationMap",
            modelProperties: {
                destinationLocation: {
                    readOnly: true,
                    serializedName: "destinationLocation",
                    type: {
                        name: "String"
                    }
                },
                serviceLocation: {
                    readOnly: true,
                    serializedName: "serviceLocation",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SkuCapacity = {
        serializedName: "SkuCapacity",
        type: {
            name: "Composite",
            className: "SkuCapacity",
            modelProperties: {
                usable: {
                    readOnly: true,
                    serializedName: "usable",
                    type: {
                        name: "String"
                    }
                },
                maximum: {
                    readOnly: true,
                    serializedName: "maximum",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SkuCost = {
        serializedName: "SkuCost",
        type: {
            name: "Composite",
            className: "SkuCost",
            modelProperties: {
                meterId: {
                    readOnly: true,
                    serializedName: "meterId",
                    type: {
                        name: "String"
                    }
                },
                meterType: {
                    readOnly: true,
                    serializedName: "meterType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SkuInformation = {
        serializedName: "SkuInformation",
        type: {
            name: "Composite",
            className: "SkuInformation",
            modelProperties: {
                sku: {
                    readOnly: true,
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                },
                enabled: {
                    readOnly: true,
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                destinationToServiceLocationMap: {
                    readOnly: true,
                    serializedName: "properties.destinationToServiceLocationMap",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DestinationToServiceLocationMap"
                            }
                        }
                    }
                },
                capacity: {
                    readOnly: true,
                    serializedName: "properties.capacity",
                    type: {
                        name: "Composite",
                        className: "SkuCapacity"
                    }
                },
                costs: {
                    readOnly: true,
                    serializedName: "properties.costs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SkuCost"
                            }
                        }
                    }
                },
                apiVersions: {
                    readOnly: true,
                    serializedName: "properties.apiVersions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                disabledReason: {
                    readOnly: true,
                    serializedName: "properties.disabledReason",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "Country",
                            "Region",
                            "Feature",
                            "OfferType"
                        ]
                    }
                },
                disabledReasonMessage: {
                    readOnly: true,
                    serializedName: "properties.disabledReasonMessage",
                    type: {
                        name: "String"
                    }
                },
                requiredFeature: {
                    readOnly: true,
                    serializedName: "properties.requiredFeature",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CancellationReason = {
        serializedName: "CancellationReason",
        type: {
            name: "Composite",
            className: "CancellationReason",
            modelProperties: {
                reason: {
                    required: true,
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NotificationPreference = {
        serializedName: "NotificationPreference",
        type: {
            name: "Composite",
            className: "NotificationPreference",
            modelProperties: {
                stageName: {
                    required: true,
                    serializedName: "stageName",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "DevicePrepared",
                            "Dispatched",
                            "Delivered",
                            "PickedUp",
                            "AtAzureDC",
                            "DataCopy"
                        ]
                    }
                },
                sendNotification: {
                    required: true,
                    serializedName: "sendNotification",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var ContactDetails = {
        serializedName: "ContactDetails",
        type: {
            name: "Composite",
            className: "ContactDetails",
            modelProperties: {
                contactName: {
                    required: true,
                    serializedName: "contactName",
                    type: {
                        name: "String"
                    }
                },
                phone: {
                    required: true,
                    serializedName: "phone",
                    type: {
                        name: "String"
                    }
                },
                phoneExtension: {
                    serializedName: "phoneExtension",
                    type: {
                        name: "String"
                    }
                },
                mobile: {
                    serializedName: "mobile",
                    type: {
                        name: "String"
                    }
                },
                emailList: {
                    required: true,
                    serializedName: "emailList",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                notificationPreference: {
                    serializedName: "notificationPreference",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NotificationPreference"
                            }
                        }
                    }
                }
            }
        }
    };
    var CopyLogDetails = {
        serializedName: "CopyLogDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "copyLogDetailsType",
                clientName: "copyLogDetailsType"
            },
            uberParent: "CopyLogDetails",
            className: "CopyLogDetails",
            modelProperties: {
                copyLogDetailsType: {
                    required: true,
                    serializedName: "copyLogDetailsType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CopyProgress = {
        serializedName: "CopyProgress",
        type: {
            name: "Composite",
            className: "CopyProgress",
            modelProperties: {
                storageAccountName: {
                    readOnly: true,
                    serializedName: "storageAccountName",
                    type: {
                        name: "String"
                    }
                },
                accountId: {
                    readOnly: true,
                    serializedName: "accountId",
                    type: {
                        name: "String"
                    }
                },
                bytesSentToCloud: {
                    readOnly: true,
                    serializedName: "bytesSentToCloud",
                    type: {
                        name: "Number"
                    }
                },
                totalBytesToProcess: {
                    readOnly: true,
                    serializedName: "totalBytesToProcess",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var DataBoxAccountCopyLogDetails = {
        serializedName: "DataBox",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopyLogDetails.type.polymorphicDiscriminator,
            uberParent: "CopyLogDetails",
            className: "DataBoxAccountCopyLogDetails",
            modelProperties: __assign({}, CopyLogDetails.type.modelProperties, { accountName: {
                    readOnly: true,
                    serializedName: "accountName",
                    type: {
                        name: "String"
                    }
                }, copyLogLink: {
                    readOnly: true,
                    serializedName: "copyLogLink",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var DataBoxDiskCopyLogDetails = {
        serializedName: "DataBoxDisk",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopyLogDetails.type.polymorphicDiscriminator,
            uberParent: "CopyLogDetails",
            className: "DataBoxDiskCopyLogDetails",
            modelProperties: __assign({}, CopyLogDetails.type.modelProperties, { diskSerialNumber: {
                    readOnly: true,
                    serializedName: "diskSerialNumber",
                    type: {
                        name: "String"
                    }
                }, errorLogLink: {
                    readOnly: true,
                    serializedName: "errorLogLink",
                    type: {
                        name: "String"
                    }
                }, verboseLogLink: {
                    readOnly: true,
                    serializedName: "verboseLogLink",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var DataBoxDiskCopyProgress = {
        serializedName: "DataBoxDiskCopyProgress",
        type: {
            name: "Composite",
            className: "DataBoxDiskCopyProgress",
            modelProperties: {
                serialNumber: {
                    readOnly: true,
                    serializedName: "serialNumber",
                    type: {
                        name: "String"
                    }
                },
                bytesCopied: {
                    readOnly: true,
                    serializedName: "bytesCopied",
                    type: {
                        name: "Number"
                    }
                },
                percentComplete: {
                    readOnly: true,
                    serializedName: "percentComplete",
                    type: {
                        name: "Number"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "NotStarted",
                            "InProgress",
                            "Completed",
                            "CompletedWithErrors",
                            "Failed",
                            "NotReturned"
                        ]
                    }
                }
            }
        }
    };
    var JobDetails = {
        serializedName: "JobDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "jobDetailsType",
                clientName: "jobDetailsType"
            },
            uberParent: "JobDetails",
            className: "JobDetails",
            modelProperties: {
                expectedDataSizeInTeraBytes: {
                    serializedName: "expectedDataSizeInTeraBytes",
                    type: {
                        name: "Number"
                    }
                },
                jobStages: {
                    readOnly: true,
                    serializedName: "jobStages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JobStages"
                            }
                        }
                    }
                },
                contactDetails: {
                    required: true,
                    serializedName: "contactDetails",
                    type: {
                        name: "Composite",
                        className: "ContactDetails"
                    }
                },
                shippingAddress: {
                    required: true,
                    serializedName: "shippingAddress",
                    type: {
                        name: "Composite",
                        className: "ShippingAddress"
                    }
                },
                deliveryPackage: {
                    readOnly: true,
                    serializedName: "deliveryPackage",
                    type: {
                        name: "Composite",
                        className: "PackageShippingDetails"
                    }
                },
                returnPackage: {
                    readOnly: true,
                    serializedName: "returnPackage",
                    type: {
                        name: "Composite",
                        className: "PackageShippingDetails"
                    }
                },
                destinationAccountDetails: {
                    required: true,
                    serializedName: "destinationAccountDetails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DestinationAccountDetails"
                            }
                        }
                    }
                },
                errorDetails: {
                    readOnly: true,
                    serializedName: "errorDetails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JobErrorDetails"
                            }
                        }
                    }
                },
                preferences: {
                    serializedName: "preferences",
                    type: {
                        name: "Composite",
                        className: "Preferences"
                    }
                },
                copyLogDetails: {
                    readOnly: true,
                    serializedName: "copyLogDetails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: {
                                    serializedName: "copyLogDetailsType",
                                    clientName: "copyLogDetailsType"
                                },
                                uberParent: "CopyLogDetails",
                                className: "CopyLogDetails"
                            }
                        }
                    }
                },
                reverseShipmentLabelSasKey: {
                    readOnly: true,
                    serializedName: "reverseShipmentLabelSasKey",
                    type: {
                        name: "String"
                    }
                },
                chainOfCustodySasKey: {
                    readOnly: true,
                    serializedName: "chainOfCustodySasKey",
                    type: {
                        name: "String"
                    }
                },
                jobDetailsType: {
                    required: true,
                    serializedName: "jobDetailsType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DataBoxDiskJobDetails = {
        serializedName: "DataBoxDisk",
        type: {
            name: "Composite",
            polymorphicDiscriminator: JobDetails.type.polymorphicDiscriminator,
            uberParent: "JobDetails",
            className: "DataBoxDiskJobDetails",
            modelProperties: __assign({}, JobDetails.type.modelProperties, { preferredDisks: {
                    serializedName: "preferredDisks",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                }, copyProgress: {
                    readOnly: true,
                    serializedName: "copyProgress",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DataBoxDiskCopyProgress"
                            }
                        }
                    }
                }, disksAndSizeDetails: {
                    readOnly: true,
                    serializedName: "disksAndSizeDetails",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                }, passkey: {
                    serializedName: "passkey",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var DiskSecret = {
        serializedName: "DiskSecret",
        type: {
            name: "Composite",
            className: "DiskSecret",
            modelProperties: {
                diskSerialNumber: {
                    readOnly: true,
                    serializedName: "diskSerialNumber",
                    type: {
                        name: "String"
                    }
                },
                bitLockerKey: {
                    readOnly: true,
                    serializedName: "bitLockerKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobSecrets = {
        serializedName: "JobSecrets",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "jobSecretsType",
                clientName: "jobSecretsType"
            },
            uberParent: "JobSecrets",
            className: "JobSecrets",
            modelProperties: {
                jobSecretsType: {
                    required: true,
                    serializedName: "jobSecretsType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DataBoxDiskJobSecrets = {
        serializedName: "DataBoxDisk",
        type: {
            name: "Composite",
            polymorphicDiscriminator: JobSecrets.type.polymorphicDiscriminator,
            uberParent: "JobSecrets",
            className: "DataBoxDiskJobSecrets",
            modelProperties: __assign({}, JobSecrets.type.modelProperties, { diskSecrets: {
                    readOnly: true,
                    serializedName: "diskSecrets",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DiskSecret"
                            }
                        }
                    }
                }, passKey: {
                    readOnly: true,
                    serializedName: "passKey",
                    type: {
                        name: "String"
                    }
                }, isPasskeyUserDefined: {
                    readOnly: true,
                    serializedName: "isPasskeyUserDefined",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var DataBoxHeavyAccountCopyLogDetails = {
        serializedName: "DataBoxHeavy",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopyLogDetails.type.polymorphicDiscriminator,
            uberParent: "CopyLogDetails",
            className: "DataBoxHeavyAccountCopyLogDetails",
            modelProperties: __assign({}, CopyLogDetails.type.modelProperties, { accountName: {
                    readOnly: true,
                    serializedName: "accountName",
                    type: {
                        name: "String"
                    }
                }, copyLogLink: {
                    readOnly: true,
                    serializedName: "copyLogLink",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var DataBoxHeavyJobDetails = {
        serializedName: "DataBoxHeavy",
        type: {
            name: "Composite",
            polymorphicDiscriminator: JobDetails.type.polymorphicDiscriminator,
            uberParent: "JobDetails",
            className: "DataBoxHeavyJobDetails",
            modelProperties: __assign({}, JobDetails.type.modelProperties, { copyProgress: {
                    readOnly: true,
                    serializedName: "copyProgress",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CopyProgress"
                            }
                        }
                    }
                } })
        }
    };
    var DataBoxHeavySecret = {
        serializedName: "DataBoxHeavySecret",
        type: {
            name: "Composite",
            className: "DataBoxHeavySecret",
            modelProperties: {
                deviceSerialNumber: {
                    readOnly: true,
                    serializedName: "deviceSerialNumber",
                    type: {
                        name: "String"
                    }
                },
                devicePassword: {
                    readOnly: true,
                    serializedName: "devicePassword",
                    type: {
                        name: "String"
                    }
                },
                networkConfigurations: {
                    readOnly: true,
                    serializedName: "networkConfigurations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplianceNetworkConfiguration"
                            }
                        }
                    }
                },
                encodedValidationCertPubKey: {
                    readOnly: true,
                    serializedName: "encodedValidationCertPubKey",
                    type: {
                        name: "String"
                    }
                },
                accountCredentialDetails: {
                    readOnly: true,
                    serializedName: "accountCredentialDetails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AccountCredentialDetails"
                            }
                        }
                    }
                }
            }
        }
    };
    var DataBoxHeavyJobSecrets = {
        serializedName: "DataBoxHeavy",
        type: {
            name: "Composite",
            polymorphicDiscriminator: JobSecrets.type.polymorphicDiscriminator,
            uberParent: "JobSecrets",
            className: "DataBoxHeavyJobSecrets",
            modelProperties: __assign({}, JobSecrets.type.modelProperties, { cabinetPodSecrets: {
                    readOnly: true,
                    serializedName: "cabinetPodSecrets",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DataBoxHeavySecret"
                            }
                        }
                    }
                } })
        }
    };
    var DataBoxJobDetails = {
        serializedName: "DataBox",
        type: {
            name: "Composite",
            polymorphicDiscriminator: JobDetails.type.polymorphicDiscriminator,
            uberParent: "JobDetails",
            className: "DataBoxJobDetails",
            modelProperties: __assign({}, JobDetails.type.modelProperties, { copyProgress: {
                    readOnly: true,
                    serializedName: "copyProgress",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CopyProgress"
                            }
                        }
                    }
                } })
        }
    };
    var DataBoxSecret = {
        serializedName: "DataBoxSecret",
        type: {
            name: "Composite",
            className: "DataBoxSecret",
            modelProperties: {
                deviceSerialNumber: {
                    readOnly: true,
                    serializedName: "deviceSerialNumber",
                    type: {
                        name: "String"
                    }
                },
                devicePassword: {
                    readOnly: true,
                    serializedName: "devicePassword",
                    type: {
                        name: "String"
                    }
                },
                networkConfigurations: {
                    readOnly: true,
                    serializedName: "networkConfigurations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplianceNetworkConfiguration"
                            }
                        }
                    }
                },
                encodedValidationCertPubKey: {
                    readOnly: true,
                    serializedName: "encodedValidationCertPubKey",
                    type: {
                        name: "String"
                    }
                },
                accountCredentialDetails: {
                    readOnly: true,
                    serializedName: "accountCredentialDetails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AccountCredentialDetails"
                            }
                        }
                    }
                }
            }
        }
    };
    var DataboxJobSecrets = {
        serializedName: "DataBox",
        type: {
            name: "Composite",
            polymorphicDiscriminator: JobSecrets.type.polymorphicDiscriminator,
            uberParent: "JobSecrets",
            className: "DataboxJobSecrets",
            modelProperties: __assign({}, JobSecrets.type.modelProperties, { podSecrets: {
                    serializedName: "podSecrets",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DataBoxSecret"
                            }
                        }
                    }
                } })
        }
    };
    var DestinationAccountDetails = {
        serializedName: "DestinationAccountDetails",
        type: {
            name: "Composite",
            className: "DestinationAccountDetails",
            modelProperties: {
                accountId: {
                    required: true,
                    serializedName: "accountId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorModel = {
        serializedName: "Error",
        type: {
            name: "Composite",
            className: "ErrorModel",
            modelProperties: {
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobErrorDetails = {
        serializedName: "JobErrorDetails",
        type: {
            name: "Composite",
            className: "JobErrorDetails",
            modelProperties: {
                errorMessage: {
                    readOnly: true,
                    serializedName: "errorMessage",
                    type: {
                        name: "String"
                    }
                },
                errorCode: {
                    readOnly: true,
                    serializedName: "errorCode",
                    type: {
                        name: "Number"
                    }
                },
                recommendedAction: {
                    readOnly: true,
                    serializedName: "recommendedAction",
                    type: {
                        name: "String"
                    }
                },
                exceptionMessage: {
                    readOnly: true,
                    serializedName: "exceptionMessage",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobStages = {
        serializedName: "JobStages",
        type: {
            name: "Composite",
            className: "JobStages",
            modelProperties: {
                stageName: {
                    readOnly: true,
                    serializedName: "stageName",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "DeviceOrdered",
                            "DevicePrepared",
                            "Dispatched",
                            "Delivered",
                            "PickedUp",
                            "AtAzureDC",
                            "DataCopy",
                            "Completed",
                            "CompletedWithErrors",
                            "Cancelled",
                            "Failed_IssueReportedAtCustomer",
                            "Failed_IssueDetectedAtAzureDC",
                            "Aborted"
                        ]
                    }
                },
                displayName: {
                    readOnly: true,
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                stageStatus: {
                    readOnly: true,
                    serializedName: "stageStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "InProgress",
                            "Succeeded",
                            "Failed",
                            "Cancelled",
                            "Cancelling",
                            "SucceededWithErrors"
                        ]
                    }
                },
                stageTime: {
                    readOnly: true,
                    serializedName: "stageTime",
                    type: {
                        name: "DateTime"
                    }
                },
                jobStageDetails: {
                    readOnly: true,
                    serializedName: "jobStageDetails",
                    type: {
                        name: "Object"
                    }
                },
                errorDetails: {
                    readOnly: true,
                    serializedName: "errorDetails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JobErrorDetails"
                            }
                        }
                    }
                }
            }
        }
    };
    var PackageShippingDetails = {
        serializedName: "PackageShippingDetails",
        type: {
            name: "Composite",
            className: "PackageShippingDetails",
            modelProperties: {
                carrierName: {
                    readOnly: true,
                    serializedName: "carrierName",
                    type: {
                        name: "String"
                    }
                },
                trackingId: {
                    readOnly: true,
                    serializedName: "trackingId",
                    type: {
                        name: "String"
                    }
                },
                trackingUrl: {
                    readOnly: true,
                    serializedName: "trackingUrl",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Preferences = {
        serializedName: "Preferences",
        type: {
            name: "Composite",
            className: "Preferences",
            modelProperties: {
                preferredDataCenterRegion: {
                    serializedName: "preferredDataCenterRegion",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                sku: {
                    required: true,
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }
            }
        }
    };
    var JobResource = {
        serializedName: "JobResource",
        type: {
            name: "Composite",
            className: "JobResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { isCancellable: {
                    readOnly: true,
                    serializedName: "properties.isCancellable",
                    type: {
                        name: "Boolean"
                    }
                }, isDeletable: {
                    readOnly: true,
                    serializedName: "properties.isDeletable",
                    type: {
                        name: "Boolean"
                    }
                }, isShippingAddressEditable: {
                    readOnly: true,
                    serializedName: "properties.isShippingAddressEditable",
                    type: {
                        name: "Boolean"
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "DeviceOrdered",
                            "DevicePrepared",
                            "Dispatched",
                            "Delivered",
                            "PickedUp",
                            "AtAzureDC",
                            "DataCopy",
                            "Completed",
                            "CompletedWithErrors",
                            "Cancelled",
                            "Failed_IssueReportedAtCustomer",
                            "Failed_IssueDetectedAtAzureDC",
                            "Aborted"
                        ]
                    }
                }, startTime: {
                    readOnly: true,
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                }, error: {
                    readOnly: true,
                    serializedName: "properties.error",
                    type: {
                        name: "Composite",
                        className: "ErrorModel"
                    }
                }, details: {
                    serializedName: "properties.details",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "jobDetailsType",
                            clientName: "jobDetailsType"
                        },
                        uberParent: "JobDetails",
                        className: "JobDetails"
                    }
                }, cancellationReason: {
                    readOnly: true,
                    serializedName: "properties.cancellationReason",
                    type: {
                        name: "String"
                    }
                }, name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }, type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var UpdateJobDetails = {
        serializedName: "UpdateJobDetails",
        type: {
            name: "Composite",
            className: "UpdateJobDetails",
            modelProperties: {
                contactDetails: {
                    serializedName: "contactDetails",
                    type: {
                        name: "Composite",
                        className: "ContactDetails"
                    }
                },
                shippingAddress: {
                    serializedName: "shippingAddress",
                    type: {
                        name: "Composite",
                        className: "ShippingAddress"
                    }
                }
            }
        }
    };
    var JobResourceUpdateParameter = {
        serializedName: "JobResourceUpdateParameter",
        type: {
            name: "Composite",
            className: "JobResourceUpdateParameter",
            modelProperties: {
                details: {
                    serializedName: "properties.details",
                    type: {
                        name: "Composite",
                        className: "UpdateJobDetails"
                    }
                },
                destinationAccountDetails: {
                    serializedName: "properties.destinationAccountDetails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DestinationAccountDetails"
                            }
                        }
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var OperationDisplay = {
        serializedName: "OperationDisplay",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    readOnly: true,
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                },
                properties: {
                    readOnly: true,
                    serializedName: "properties",
                    type: {
                        name: "Object"
                    }
                },
                origin: {
                    readOnly: true,
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ShipmentPickUpRequest = {
        serializedName: "ShipmentPickUpRequest",
        type: {
            name: "Composite",
            className: "ShipmentPickUpRequest",
            modelProperties: {
                startTime: {
                    required: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    required: true,
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                shipmentLocation: {
                    required: true,
                    serializedName: "shipmentLocation",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ShipmentPickUpResponse = {
        serializedName: "ShipmentPickUpResponse",
        type: {
            name: "Composite",
            className: "ShipmentPickUpResponse",
            modelProperties: {
                confirmationNumber: {
                    readOnly: true,
                    serializedName: "confirmationNumber",
                    type: {
                        name: "String"
                    }
                },
                readyByTime: {
                    readOnly: true,
                    serializedName: "readyByTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var UnencryptedCredentials = {
        serializedName: "UnencryptedCredentials",
        type: {
            name: "Composite",
            className: "UnencryptedCredentials",
            modelProperties: {
                jobName: {
                    readOnly: true,
                    serializedName: "jobName",
                    type: {
                        name: "String"
                    }
                },
                jobSecrets: {
                    readOnly: true,
                    serializedName: "jobSecrets",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "jobSecretsType",
                            clientName: "jobSecretsType"
                        },
                        uberParent: "JobSecrets",
                        className: "JobSecrets"
                    }
                }
            }
        }
    };
    var ValidateAddress = {
        serializedName: "ValidateAddress",
        type: {
            name: "Composite",
            className: "ValidateAddress",
            modelProperties: {
                shippingAddress: {
                    required: true,
                    serializedName: "shippingAddress",
                    type: {
                        name: "Composite",
                        className: "ShippingAddress"
                    }
                },
                deviceType: {
                    required: true,
                    serializedName: "deviceType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "DataBox",
                            "DataBoxDisk",
                            "DataBoxHeavy"
                        ]
                    }
                }
            }
        }
    };
    var OperationList = {
        serializedName: "OperationList",
        type: {
            name: "Composite",
            className: "OperationList",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobResourceList = {
        serializedName: "JobResourceList",
        type: {
            name: "Composite",
            className: "JobResourceList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JobResource"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UnencryptedCredentialsList = {
        serializedName: "UnencryptedCredentialsList",
        type: {
            name: "Composite",
            className: "UnencryptedCredentialsList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UnencryptedCredentials"
                            }
                        }
                    }
                }
            }
        }
    };
    var AvailableSkusResult = {
        serializedName: "AvailableSkusResult",
        type: {
            name: "Composite",
            className: "AvailableSkusResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SkuInformation"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var discriminators = {
        'CopyLogDetails': CopyLogDetails,
        'CopyLogDetails.DataBox': DataBoxAccountCopyLogDetails,
        'CopyLogDetails.DataBoxDisk': DataBoxDiskCopyLogDetails,
        'JobDetails.DataBoxDisk': DataBoxDiskJobDetails,
        'JobSecrets.DataBoxDisk': DataBoxDiskJobSecrets,
        'CopyLogDetails.DataBoxHeavy': DataBoxHeavyAccountCopyLogDetails,
        'JobDetails.DataBoxHeavy': DataBoxHeavyJobDetails,
        'JobSecrets.DataBoxHeavy': DataBoxHeavyJobSecrets,
        'JobDetails.DataBox': DataBoxJobDetails,
        'JobSecrets.DataBox': DataboxJobSecrets,
        'JobDetails': JobDetails,
        'JobSecrets': JobSecrets
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        ShareCredentialDetails: ShareCredentialDetails,
        AccountCredentialDetails: AccountCredentialDetails,
        ShippingAddress: ShippingAddress,
        AddressValidationOutput: AddressValidationOutput,
        ApplianceNetworkConfiguration: ApplianceNetworkConfiguration,
        ArmBaseObject: ArmBaseObject,
        AvailableSkuRequest: AvailableSkuRequest,
        Sku: Sku,
        DestinationToServiceLocationMap: DestinationToServiceLocationMap,
        SkuCapacity: SkuCapacity,
        SkuCost: SkuCost,
        SkuInformation: SkuInformation,
        CancellationReason: CancellationReason,
        NotificationPreference: NotificationPreference,
        ContactDetails: ContactDetails,
        CopyLogDetails: CopyLogDetails,
        CopyProgress: CopyProgress,
        DataBoxAccountCopyLogDetails: DataBoxAccountCopyLogDetails,
        DataBoxDiskCopyLogDetails: DataBoxDiskCopyLogDetails,
        DataBoxDiskCopyProgress: DataBoxDiskCopyProgress,
        JobDetails: JobDetails,
        DataBoxDiskJobDetails: DataBoxDiskJobDetails,
        DiskSecret: DiskSecret,
        JobSecrets: JobSecrets,
        DataBoxDiskJobSecrets: DataBoxDiskJobSecrets,
        DataBoxHeavyAccountCopyLogDetails: DataBoxHeavyAccountCopyLogDetails,
        DataBoxHeavyJobDetails: DataBoxHeavyJobDetails,
        DataBoxHeavySecret: DataBoxHeavySecret,
        DataBoxHeavyJobSecrets: DataBoxHeavyJobSecrets,
        DataBoxJobDetails: DataBoxJobDetails,
        DataBoxSecret: DataBoxSecret,
        DataboxJobSecrets: DataboxJobSecrets,
        DestinationAccountDetails: DestinationAccountDetails,
        ErrorModel: ErrorModel,
        JobErrorDetails: JobErrorDetails,
        JobStages: JobStages,
        PackageShippingDetails: PackageShippingDetails,
        Preferences: Preferences,
        Resource: Resource,
        JobResource: JobResource,
        UpdateJobDetails: UpdateJobDetails,
        JobResourceUpdateParameter: JobResourceUpdateParameter,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        ShipmentPickUpRequest: ShipmentPickUpRequest,
        ShipmentPickUpResponse: ShipmentPickUpResponse,
        UnencryptedCredentials: UnencryptedCredentials,
        ValidateAddress: ValidateAddress,
        OperationList: OperationList,
        JobResourceList: JobResourceList,
        UnencryptedCredentialsList: UnencryptedCredentialsList,
        AvailableSkusResult: AvailableSkusResult,
        discriminators: discriminators
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        OperationList: OperationList,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var expand = {
        parameterPath: [
            "options",
            "expand"
        ],
        mapper: {
            serializedName: "$expand",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch = {
        parameterPath: [
            "options",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var jobName = {
        parameterPath: "jobName",
        mapper: {
            required: true,
            serializedName: "jobName",
            constraints: {
                MaxLength: 24,
                MinLength: 3,
                Pattern: /^[-\w\.]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var location = {
        parameterPath: "location",
        mapper: {
            required: true,
            serializedName: "location",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var skipToken = {
        parameterPath: [
            "options",
            "skipToken"
        ],
        mapper: {
            serializedName: "$skipToken",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {DataBoxManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.DataBox/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        JobResourceList: JobResourceList,
        JobResource: JobResource,
        Resource: Resource,
        BaseResource: BaseResource,
        Sku: Sku,
        ErrorModel: ErrorModel,
        JobDetails: JobDetails,
        JobStages: JobStages,
        JobErrorDetails: JobErrorDetails,
        ContactDetails: ContactDetails,
        NotificationPreference: NotificationPreference,
        ShippingAddress: ShippingAddress,
        PackageShippingDetails: PackageShippingDetails,
        DestinationAccountDetails: DestinationAccountDetails,
        Preferences: Preferences,
        CopyLogDetails: CopyLogDetails,
        CloudError: CloudError,
        JobResourceUpdateParameter: JobResourceUpdateParameter,
        UpdateJobDetails: UpdateJobDetails,
        ShipmentPickUpRequest: ShipmentPickUpRequest,
        ShipmentPickUpResponse: ShipmentPickUpResponse,
        CancellationReason: CancellationReason,
        UnencryptedCredentialsList: UnencryptedCredentialsList,
        UnencryptedCredentials: UnencryptedCredentials,
        JobSecrets: JobSecrets,
        DataBoxAccountCopyLogDetails: DataBoxAccountCopyLogDetails,
        DataBoxDiskCopyLogDetails: DataBoxDiskCopyLogDetails,
        DataBoxDiskJobDetails: DataBoxDiskJobDetails,
        DataBoxDiskCopyProgress: DataBoxDiskCopyProgress,
        DataBoxDiskJobSecrets: DataBoxDiskJobSecrets,
        DiskSecret: DiskSecret,
        DataBoxHeavyAccountCopyLogDetails: DataBoxHeavyAccountCopyLogDetails,
        DataBoxHeavyJobDetails: DataBoxHeavyJobDetails,
        CopyProgress: CopyProgress,
        DataBoxHeavyJobSecrets: DataBoxHeavyJobSecrets,
        DataBoxHeavySecret: DataBoxHeavySecret,
        ApplianceNetworkConfiguration: ApplianceNetworkConfiguration,
        AccountCredentialDetails: AccountCredentialDetails,
        ShareCredentialDetails: ShareCredentialDetails,
        DataBoxJobDetails: DataBoxJobDetails,
        DataboxJobSecrets: DataboxJobSecrets,
        DataBoxSecret: DataBoxSecret
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Jobs. */
    var Jobs = /** @class */ (function () {
        /**
         * Create a Jobs.
         * @param {DataBoxManagementClientContext} client Reference to the service client.
         */
        function Jobs(client) {
            this.client = client;
        }
        Jobs.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        Jobs.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        Jobs.prototype.get = function (resourceGroupName$$1, jobName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                jobName: jobName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        /**
         * Creates a new job with the specified parameters. Existing job cannot be updated with this API
         * and should instead be updated with the Update job API.
         * @param resourceGroupName The Resource Group Name
         * @param jobName The name of the job Resource within the specified resource group. job names must
         * be between 3 and 24 characters in length and use any alphanumeric and underscore only
         * @param jobResource Job details from request body.
         * @param [options] The optional parameters
         * @returns Promise<Models.JobsCreateResponse>
         */
        Jobs.prototype.create = function (resourceGroupName$$1, jobName$$1, jobResource, options) {
            return this.beginCreate(resourceGroupName$$1, jobName$$1, jobResource, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a job.
         * @param resourceGroupName The Resource Group Name
         * @param jobName The name of the job Resource within the specified resource group. job names must
         * be between 3 and 24 characters in length and use any alphanumeric and underscore only
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Jobs.prototype.deleteMethod = function (resourceGroupName$$1, jobName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, jobName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates the properties of an existing job.
         * @param resourceGroupName The Resource Group Name
         * @param jobName The name of the job Resource within the specified resource group. job names must
         * be between 3 and 24 characters in length and use any alphanumeric and underscore only
         * @param jobResourceUpdateParameter Job update parameters from request body.
         * @param [options] The optional parameters
         * @returns Promise<Models.JobsUpdateResponse>
         */
        Jobs.prototype.update = function (resourceGroupName$$1, jobName$$1, jobResourceUpdateParameter, options) {
            return this.beginUpdate(resourceGroupName$$1, jobName$$1, jobResourceUpdateParameter, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Jobs.prototype.bookShipmentPickUp = function (resourceGroupName$$1, jobName$$1, shipmentPickUpRequest, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                jobName: jobName$$1,
                shipmentPickUpRequest: shipmentPickUpRequest,
                options: options
            }, bookShipmentPickUpOperationSpec, callback);
        };
        Jobs.prototype.cancel = function (resourceGroupName$$1, jobName$$1, reason, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                jobName: jobName$$1,
                reason: reason,
                options: options
            }, cancelOperationSpec, callback);
        };
        Jobs.prototype.listCredentials = function (resourceGroupName$$1, jobName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                jobName: jobName$$1,
                options: options
            }, listCredentialsOperationSpec, callback);
        };
        /**
         * Creates a new job with the specified parameters. Existing job cannot be updated with this API
         * and should instead be updated with the Update job API.
         * @param resourceGroupName The Resource Group Name
         * @param jobName The name of the job Resource within the specified resource group. job names must
         * be between 3 and 24 characters in length and use any alphanumeric and underscore only
         * @param jobResource Job details from request body.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Jobs.prototype.beginCreate = function (resourceGroupName$$1, jobName$$1, jobResource, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                jobName: jobName$$1,
                jobResource: jobResource,
                options: options
            }, beginCreateOperationSpec, options);
        };
        /**
         * Deletes a job.
         * @param resourceGroupName The Resource Group Name
         * @param jobName The name of the job Resource within the specified resource group. job names must
         * be between 3 and 24 characters in length and use any alphanumeric and underscore only
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Jobs.prototype.beginDeleteMethod = function (resourceGroupName$$1, jobName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                jobName: jobName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        /**
         * Updates the properties of an existing job.
         * @param resourceGroupName The Resource Group Name
         * @param jobName The name of the job Resource within the specified resource group. job names must
         * be between 3 and 24 characters in length and use any alphanumeric and underscore only
         * @param jobResourceUpdateParameter Job update parameters from request body.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Jobs.prototype.beginUpdate = function (resourceGroupName$$1, jobName$$1, jobResourceUpdateParameter, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                jobName: jobName$$1,
                jobResourceUpdateParameter: jobResourceUpdateParameter,
                options: options
            }, beginUpdateOperationSpec, options);
        };
        Jobs.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        Jobs.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        return Jobs;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.DataBox/jobs",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion,
            skipToken
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobResourceList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion,
            skipToken
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobResourceList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobName
        ],
        queryParameters: [
            apiVersion,
            expand
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var bookShipmentPickUpOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}/bookShipmentPickUp",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "shipmentPickUpRequest",
            mapper: __assign({}, ShipmentPickUpRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ShipmentPickUpResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var cancelOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}/cancel",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                reason: "reason"
            },
            mapper: __assign({}, CancellationReason, { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listCredentialsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}/listCredentials",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UnencryptedCredentialsList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginCreateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "jobResource",
            mapper: __assign({}, JobResource, { required: true })
        },
        responses: {
            200: {
                bodyMapper: JobResource
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginUpdateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "jobResourceUpdateParameter",
            mapper: __assign({}, JobResourceUpdateParameter, { required: true })
        },
        responses: {
            200: {
                bodyMapper: JobResource
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobResourceList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobResourceList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        AvailableSkuRequest: AvailableSkuRequest,
        AvailableSkusResult: AvailableSkusResult,
        SkuInformation: SkuInformation,
        Sku: Sku,
        DestinationToServiceLocationMap: DestinationToServiceLocationMap,
        SkuCapacity: SkuCapacity,
        SkuCost: SkuCost,
        CloudError: CloudError,
        ValidateAddress: ValidateAddress,
        ShippingAddress: ShippingAddress,
        AddressValidationOutput: AddressValidationOutput
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Service. */
    var Service = /** @class */ (function () {
        /**
         * Create a Service.
         * @param {DataBoxManagementClientContext} client Reference to the service client.
         */
        function Service(client) {
            this.client = client;
        }
        Service.prototype.listAvailableSkus = function (location$$1, availableSkuRequest, options, callback) {
            return this.client.sendOperationRequest({
                location: location$$1,
                availableSkuRequest: availableSkuRequest,
                options: options
            }, listAvailableSkusOperationSpec, callback);
        };
        Service.prototype.validateAddressMethod = function (location$$1, shippingAddress, deviceType, options, callback) {
            return this.client.sendOperationRequest({
                location: location$$1,
                shippingAddress: shippingAddress,
                deviceType: deviceType,
                options: options
            }, validateAddressMethodOperationSpec, callback);
        };
        Service.prototype.listAvailableSkusNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listAvailableSkusNextOperationSpec, callback);
        };
        return Service;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listAvailableSkusOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/availableSkus",
        urlParameters: [
            subscriptionId,
            location
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "availableSkuRequest",
            mapper: __assign({}, AvailableSkuRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AvailableSkusResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var validateAddressMethodOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/validateAddress",
        urlParameters: [
            subscriptionId,
            location
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                shippingAddress: "shippingAddress",
                deviceType: "deviceType"
            },
            mapper: __assign({}, ValidateAddress, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AddressValidationOutput
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listAvailableSkusNextOperationSpec = {
        httpMethod: "POST",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AvailableSkusResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-databox";
    var packageVersion = "0.0.1";
    var DataBoxManagementClientContext = /** @class */ (function (_super) {
        __extends(DataBoxManagementClientContext, _super);
        /**
         * Initializes a new instance of the DataBoxManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The Subscription Id
         * @param [options] The parameter options
         */
        function DataBoxManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2018-01-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return DataBoxManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var DataBoxManagementClient = /** @class */ (function (_super) {
        __extends(DataBoxManagementClient, _super);
        /**
         * Initializes a new instance of the DataBoxManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The Subscription Id
         * @param [options] The parameter options
         */
        function DataBoxManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.operations = new Operations(_this);
            _this.jobs = new Jobs(_this);
            _this.service = new Service(_this);
            return _this;
        }
        return DataBoxManagementClient;
    }(DataBoxManagementClientContext));

    exports.DataBoxManagementClient = DataBoxManagementClient;
    exports.DataBoxManagementClientContext = DataBoxManagementClientContext;
    exports.DataBoxManagementModels = index;
    exports.DataBoxManagementMappers = mappers;
    exports.Operations = Operations;
    exports.Jobs = Jobs;
    exports.Service = Service;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-databox.js.map
