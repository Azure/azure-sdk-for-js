/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/peerAsnsMappers";
import * as Parameters from "../models/parameters";
import { PeeringManagementClientContext } from "../peeringManagementClientContext";

/** Class representing a PeerAsns. */
export class PeerAsns {
  private readonly client: PeeringManagementClientContext;

  /**
   * Create a PeerAsns.
   * @param {PeeringManagementClientContext} client Reference to the service client.
   */
  constructor(client: PeeringManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets the peer ASN with the specified name under the given subscription.
   * @param peerAsnName The peer ASN name.
   * @param [options] The optional parameters
   * @returns Promise<Models.PeerAsnsGetResponse>
   */
  get(peerAsnName: string, options?: msRest.RequestOptionsBase): Promise<Models.PeerAsnsGetResponse>;
  /**
   * @param peerAsnName The peer ASN name.
   * @param callback The callback
   */
  get(peerAsnName: string, callback: msRest.ServiceCallback<Models.PeerAsn>): void;
  /**
   * @param peerAsnName The peer ASN name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(peerAsnName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PeerAsn>): void;
  get(peerAsnName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PeerAsn>, callback?: msRest.ServiceCallback<Models.PeerAsn>): Promise<Models.PeerAsnsGetResponse> {
    return this.client.sendOperationRequest(
      {
        peerAsnName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.PeerAsnsGetResponse>;
  }

  /**
   * Creates a new peer ASN or updates an existing peer ASN with the specified name under the given
   * subscription.
   * @param peerAsnName The peer ASN name.
   * @param peerAsn The peer ASN.
   * @param [options] The optional parameters
   * @returns Promise<Models.PeerAsnsCreateOrUpdateResponse>
   */
  createOrUpdate(peerAsnName: string, peerAsn: Models.PeerAsn, options?: msRest.RequestOptionsBase): Promise<Models.PeerAsnsCreateOrUpdateResponse>;
  /**
   * @param peerAsnName The peer ASN name.
   * @param peerAsn The peer ASN.
   * @param callback The callback
   */
  createOrUpdate(peerAsnName: string, peerAsn: Models.PeerAsn, callback: msRest.ServiceCallback<Models.PeerAsn>): void;
  /**
   * @param peerAsnName The peer ASN name.
   * @param peerAsn The peer ASN.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(peerAsnName: string, peerAsn: Models.PeerAsn, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PeerAsn>): void;
  createOrUpdate(peerAsnName: string, peerAsn: Models.PeerAsn, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PeerAsn>, callback?: msRest.ServiceCallback<Models.PeerAsn>): Promise<Models.PeerAsnsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        peerAsnName,
        peerAsn,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.PeerAsnsCreateOrUpdateResponse>;
  }

  /**
   * Deletes an existing peer ASN with the specified name under the given subscription.
   * @param peerAsnName The peer ASN name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(peerAsnName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param peerAsnName The peer ASN name.
   * @param callback The callback
   */
  deleteMethod(peerAsnName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param peerAsnName The peer ASN name.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(peerAsnName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(peerAsnName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        peerAsnName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Lists all of the peer ASNs under the given subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.PeerAsnsListBySubscriptionResponse>
   */
  listBySubscription(options?: msRest.RequestOptionsBase): Promise<Models.PeerAsnsListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: msRest.ServiceCallback<Models.PeerAsnListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PeerAsnListResult>): void;
  listBySubscription(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PeerAsnListResult>, callback?: msRest.ServiceCallback<Models.PeerAsnListResult>): Promise<Models.PeerAsnsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.PeerAsnsListBySubscriptionResponse>;
  }

  /**
   * Lists all of the peer ASNs under the given subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PeerAsnsListBySubscriptionNextResponse>
   */
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PeerAsnsListBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PeerAsnListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PeerAsnListResult>): void;
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PeerAsnListResult>, callback?: msRest.ServiceCallback<Models.PeerAsnListResult>): Promise<Models.PeerAsnsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBySubscriptionNextOperationSpec,
      callback) as Promise<Models.PeerAsnsListBySubscriptionNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Peering/peerAsns/{peerAsnName}",
  urlParameters: [
    Parameters.peerAsnName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PeerAsn
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Peering/peerAsns/{peerAsnName}",
  urlParameters: [
    Parameters.peerAsnName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "peerAsn",
    mapper: {
      ...Mappers.PeerAsn,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PeerAsn
    },
    201: {
      bodyMapper: Mappers.PeerAsn
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Peering/peerAsns/{peerAsnName}",
  urlParameters: [
    Parameters.peerAsnName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Peering/peerAsns",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PeerAsnListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listBySubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PeerAsnListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
