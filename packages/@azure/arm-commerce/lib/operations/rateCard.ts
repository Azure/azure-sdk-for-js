/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/rateCardMappers";
import * as Parameters from "../models/parameters";
import { UsageManagementClientContext } from "../usageManagementClientContext";

/** Class representing a RateCard. */
export class RateCard {
  private readonly client: UsageManagementClientContext;

  /**
   * Create a RateCard.
   * @param {UsageManagementClientContext} client Reference to the service client.
   */
  constructor(client: UsageManagementClientContext) {
    this.client = client;
  }

  /**
   * Enables you to query for the resource/meter metadata and related prices used in a given
   * subscription by Offer ID, Currency, Locale and Region. The metadata associated with the billing
   * meters, including but not limited to service names, types, resources, units of measure, and
   * regions, is subject to change at any time and without notice. If you intend to use this billing
   * data in an automated fashion, please use the billing meter GUID to uniquely identify each
   * billable item. If the billing meter GUID is scheduled to change due to a new billing model, you
   * will be notified in advance of the change.
   * @param filter The filter to apply on the operation. It ONLY supports the 'eq' and 'and' logical
   * operators at this time. All the 4 query parameters 'OfferDurableId',  'Currency', 'Locale',
   * 'Region' are required to be a part of the $filter.
   * @param [options] The optional parameters
   * @returns Promise<Models.RateCardGetResponse>
   */
  get(filter: string, options?: msRest.RequestOptionsBase): Promise<Models.RateCardGetResponse>;
  /**
   * @param filter The filter to apply on the operation. It ONLY supports the 'eq' and 'and' logical
   * operators at this time. All the 4 query parameters 'OfferDurableId',  'Currency', 'Locale',
   * 'Region' are required to be a part of the $filter.
   * @param callback The callback
   */
  get(filter: string, callback: msRest.ServiceCallback<Models.ResourceRateCardInfo>): void;
  /**
   * @param filter The filter to apply on the operation. It ONLY supports the 'eq' and 'and' logical
   * operators at this time. All the 4 query parameters 'OfferDurableId',  'Currency', 'Locale',
   * 'Region' are required to be a part of the $filter.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(filter: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResourceRateCardInfo>): void;
  get(filter: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ResourceRateCardInfo>, callback?: msRest.ServiceCallback<Models.ResourceRateCardInfo>): Promise<Models.RateCardGetResponse> {
    return this.client.sendOperationRequest(
      {
        filter,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.RateCardGetResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Commerce/RateCard",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.filter,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ResourceRateCardInfo
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
