/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as msRestAzure from "ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/networkWatchersMappers";
import * as Parameters from "../models/parameters";
import { NetworkManagementClientContext } from "../networkManagementClientContext";

/** Class representing a NetworkWatchers. */
export class NetworkWatchers {
  private readonly client: NetworkManagementClientContext;

  /**
   * Create a NetworkWatchers.
   * @param {NetworkManagementClientContext} client Reference to the service client.
   */
  constructor(client: NetworkManagementClientContext) {
    this.client = client;
  }

  /**
   * Creates or updates a network watcher in the specified resource group.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkWatcherName The name of the network watcher.
   *
   * @param {NetworkWatcher} parameters Parameters that define the network watcher resource.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  createOrUpdate(resourceGroupName: string, networkWatcherName: string, parameters: Models.NetworkWatcher): Promise<Models.NetworkWatchersCreateOrUpdateResponse>;
  createOrUpdate(resourceGroupName: string, networkWatcherName: string, parameters: Models.NetworkWatcher, options: msRest.RequestOptionsBase): Promise<Models.NetworkWatchersCreateOrUpdateResponse>;
  createOrUpdate(resourceGroupName: string, networkWatcherName: string, parameters: Models.NetworkWatcher, callback: msRest.ServiceCallback<Models.NetworkWatcher>): void;
  createOrUpdate(resourceGroupName: string, networkWatcherName: string, parameters: Models.NetworkWatcher, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkWatcher>): void;
  createOrUpdate(resourceGroupName: string, networkWatcherName: string, parameters: Models.NetworkWatcher, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.NetworkWatcher>): Promise<Models.NetworkWatchersCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkWatcherName,
        parameters,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.NetworkWatchersCreateOrUpdateResponse>;
  }

  /**
   * Gets the specified network watcher by resource group.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkWatcherName The name of the network watcher.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  get(resourceGroupName: string, networkWatcherName: string): Promise<Models.NetworkWatchersGetResponse>;
  get(resourceGroupName: string, networkWatcherName: string, options: msRest.RequestOptionsBase): Promise<Models.NetworkWatchersGetResponse>;
  get(resourceGroupName: string, networkWatcherName: string, callback: msRest.ServiceCallback<Models.NetworkWatcher>): void;
  get(resourceGroupName: string, networkWatcherName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkWatcher>): void;
  get(resourceGroupName: string, networkWatcherName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.NetworkWatcher>): Promise<Models.NetworkWatchersGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkWatcherName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.NetworkWatchersGetResponse>;
  }


  /**
   * Deletes the specified network watcher resource.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkWatcherName The name of the network watcher.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  deleteMethod(resourceGroupName: string, networkWatcherName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName, networkWatcherName, options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Updates a network watcher tags.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkWatcherName The name of the network watcher.
   *
   * @param {TagsObject} parameters Parameters supplied to update network watcher tags.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  updateTags(resourceGroupName: string, networkWatcherName: string, parameters: Models.TagsObject): Promise<Models.NetworkWatchersUpdateTagsResponse>;
  updateTags(resourceGroupName: string, networkWatcherName: string, parameters: Models.TagsObject, options: msRest.RequestOptionsBase): Promise<Models.NetworkWatchersUpdateTagsResponse>;
  updateTags(resourceGroupName: string, networkWatcherName: string, parameters: Models.TagsObject, callback: msRest.ServiceCallback<Models.NetworkWatcher>): void;
  updateTags(resourceGroupName: string, networkWatcherName: string, parameters: Models.TagsObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkWatcher>): void;
  updateTags(resourceGroupName: string, networkWatcherName: string, parameters: Models.TagsObject, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.NetworkWatcher>): Promise<Models.NetworkWatchersUpdateTagsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkWatcherName,
        parameters,
        options
      },
      updateTagsOperationSpec,
      callback) as Promise<Models.NetworkWatchersUpdateTagsResponse>;
  }

  /**
   * Gets all network watchers by resource group.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  list(resourceGroupName: string): Promise<Models.NetworkWatchersListResponse>;
  list(resourceGroupName: string, options: msRest.RequestOptionsBase): Promise<Models.NetworkWatchersListResponse>;
  list(resourceGroupName: string, callback: msRest.ServiceCallback<Models.NetworkWatcherListResult>): void;
  list(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkWatcherListResult>): void;
  list(resourceGroupName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.NetworkWatcherListResult>): Promise<Models.NetworkWatchersListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.NetworkWatchersListResponse>;
  }

  /**
   * Gets all network watchers by subscription.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  listAll(): Promise<Models.NetworkWatchersListAllResponse>;
  listAll(options: msRest.RequestOptionsBase): Promise<Models.NetworkWatchersListAllResponse>;
  listAll(callback: msRest.ServiceCallback<Models.NetworkWatcherListResult>): void;
  listAll(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkWatcherListResult>): void;
  listAll(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.NetworkWatcherListResult>): Promise<Models.NetworkWatchersListAllResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listAllOperationSpec,
      callback) as Promise<Models.NetworkWatchersListAllResponse>;
  }

  /**
   * Gets the current network topology by resource group.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkWatcherName The name of the network watcher.
   *
   * @param {TopologyParameters} parameters Parameters that define the representation of topology.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getTopology(resourceGroupName: string, networkWatcherName: string, parameters: Models.TopologyParameters): Promise<Models.NetworkWatchersGetTopologyResponse>;
  getTopology(resourceGroupName: string, networkWatcherName: string, parameters: Models.TopologyParameters, options: msRest.RequestOptionsBase): Promise<Models.NetworkWatchersGetTopologyResponse>;
  getTopology(resourceGroupName: string, networkWatcherName: string, parameters: Models.TopologyParameters, callback: msRest.ServiceCallback<Models.Topology>): void;
  getTopology(resourceGroupName: string, networkWatcherName: string, parameters: Models.TopologyParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Topology>): void;
  getTopology(resourceGroupName: string, networkWatcherName: string, parameters: Models.TopologyParameters, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Topology>): Promise<Models.NetworkWatchersGetTopologyResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkWatcherName,
        parameters,
        options
      },
      getTopologyOperationSpec,
      callback) as Promise<Models.NetworkWatchersGetTopologyResponse>;
  }


  /**
   * Verify IP flow from the specified VM to a location given the currently configured NSG rules.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkWatcherName The name of the network watcher.
   *
   * @param {VerificationIPFlowParameters} parameters Parameters that define the IP flow to be
   * verified.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  verifyIPFlow(resourceGroupName: string, networkWatcherName: string, parameters: Models.VerificationIPFlowParameters, options?: msRest.RequestOptionsBase): Promise<Models.NetworkWatchersVerifyIPFlowResponse> {
    return this.beginVerifyIPFlow(resourceGroupName, networkWatcherName, parameters, options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.NetworkWatchersVerifyIPFlowResponse>;
  }


  /**
   * Gets the next hop from the specified VM.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkWatcherName The name of the network watcher.
   *
   * @param {NextHopParameters} parameters Parameters that define the source and destination
   * endpoint.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getNextHop(resourceGroupName: string, networkWatcherName: string, parameters: Models.NextHopParameters, options?: msRest.RequestOptionsBase): Promise<Models.NetworkWatchersGetNextHopResponse> {
    return this.beginGetNextHop(resourceGroupName, networkWatcherName, parameters, options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.NetworkWatchersGetNextHopResponse>;
  }


  /**
   * Gets the configured and effective security group rules on the specified VM.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkWatcherName The name of the network watcher.
   *
   * @param {SecurityGroupViewParameters} parameters Parameters that define the VM to check security
   * groups for.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getVMSecurityRules(resourceGroupName: string, networkWatcherName: string, parameters: Models.SecurityGroupViewParameters, options?: msRest.RequestOptionsBase): Promise<Models.NetworkWatchersGetVMSecurityRulesResponse> {
    return this.beginGetVMSecurityRules(resourceGroupName, networkWatcherName, parameters, options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.NetworkWatchersGetVMSecurityRulesResponse>;
  }


  /**
   * Initiate troubleshooting on a specified resource
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkWatcherName The name of the network watcher resource.
   *
   * @param {TroubleshootingParameters} parameters Parameters that define the resource to
   * troubleshoot.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getTroubleshooting(resourceGroupName: string, networkWatcherName: string, parameters: Models.TroubleshootingParameters, options?: msRest.RequestOptionsBase): Promise<Models.NetworkWatchersGetTroubleshootingResponse> {
    return this.beginGetTroubleshooting(resourceGroupName, networkWatcherName, parameters, options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.NetworkWatchersGetTroubleshootingResponse>;
  }


  /**
   * Get the last completed troubleshooting result on a specified resource
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkWatcherName The name of the network watcher resource.
   *
   * @param {QueryTroubleshootingParameters} parameters Parameters that define the resource to query
   * the troubleshooting result.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getTroubleshootingResult(resourceGroupName: string, networkWatcherName: string, parameters: Models.QueryTroubleshootingParameters, options?: msRest.RequestOptionsBase): Promise<Models.NetworkWatchersGetTroubleshootingResultResponse> {
    return this.beginGetTroubleshootingResult(resourceGroupName, networkWatcherName, parameters, options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.NetworkWatchersGetTroubleshootingResultResponse>;
  }


  /**
   * Configures flow log  and traffic analytics (optional) on a specified resource.
   *
   * @param {string} resourceGroupName The name of the network watcher resource group.
   *
   * @param {string} networkWatcherName The name of the network watcher resource.
   *
   * @param {FlowLogInformation} parameters Parameters that define the configuration of flow log.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  setFlowLogConfiguration(resourceGroupName: string, networkWatcherName: string, parameters: Models.FlowLogInformation, options?: msRest.RequestOptionsBase): Promise<Models.NetworkWatchersSetFlowLogConfigurationResponse> {
    return this.beginSetFlowLogConfiguration(resourceGroupName, networkWatcherName, parameters, options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.NetworkWatchersSetFlowLogConfigurationResponse>;
  }


  /**
   * Queries status of flow log and traffic analytics (optional) on a specified resource.
   *
   * @param {string} resourceGroupName The name of the network watcher resource group.
   *
   * @param {string} networkWatcherName The name of the network watcher resource.
   *
   * @param {FlowLogStatusParameters} parameters Parameters that define a resource to query flow log
   * and traffic analytics (optional)  status.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getFlowLogStatus(resourceGroupName: string, networkWatcherName: string, parameters: Models.FlowLogStatusParameters, options?: msRest.RequestOptionsBase): Promise<Models.NetworkWatchersGetFlowLogStatusResponse> {
    return this.beginGetFlowLogStatus(resourceGroupName, networkWatcherName, parameters, options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.NetworkWatchersGetFlowLogStatusResponse>;
  }


  /**
   * Verifies the possibility of establishing a direct TCP connection from a virtual machine to a
   * given endpoint including another VM or an arbitrary remote server.
   *
   * @param {string} resourceGroupName The name of the network watcher resource group.
   *
   * @param {string} networkWatcherName The name of the network watcher resource.
   *
   * @param {ConnectivityParameters} parameters Parameters that determine how the connectivity check
   * will be performed.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  checkConnectivity(resourceGroupName: string, networkWatcherName: string, parameters: Models.ConnectivityParameters, options?: msRest.RequestOptionsBase): Promise<Models.NetworkWatchersCheckConnectivityResponse> {
    return this.beginCheckConnectivity(resourceGroupName, networkWatcherName, parameters, options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.NetworkWatchersCheckConnectivityResponse>;
  }


  /**
   * Gets the relative latency score for internet service providers from a specified location to
   * Azure regions.
   *
   * @param {string} resourceGroupName The name of the network watcher resource group.
   *
   * @param {string} networkWatcherName The name of the network watcher resource.
   *
   * @param {AzureReachabilityReportParameters} parameters Parameters that determine Azure
   * reachability report configuration.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getAzureReachabilityReport(resourceGroupName: string, networkWatcherName: string, parameters: Models.AzureReachabilityReportParameters, options?: msRest.RequestOptionsBase): Promise<Models.NetworkWatchersGetAzureReachabilityReportResponse> {
    return this.beginGetAzureReachabilityReport(resourceGroupName, networkWatcherName, parameters, options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.NetworkWatchersGetAzureReachabilityReportResponse>;
  }


  /**
   * Lists all available internet service providers for a specified Azure region.
   *
   * @param {string} resourceGroupName The name of the network watcher resource group.
   *
   * @param {string} networkWatcherName The name of the network watcher resource.
   *
   * @param {AvailableProvidersListParameters} parameters Parameters that scope the list of available
   * providers.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  listAvailableProviders(resourceGroupName: string, networkWatcherName: string, parameters: Models.AvailableProvidersListParameters, options?: msRest.RequestOptionsBase): Promise<Models.NetworkWatchersListAvailableProvidersResponse> {
    return this.beginListAvailableProviders(resourceGroupName, networkWatcherName, parameters, options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.NetworkWatchersListAvailableProvidersResponse>;
  }


  /**
   * Get network configuration diagnostic.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkWatcherName The name of the network watcher.
   *
   * @param {NetworkConfigurationDiagnosticParameters} parameters Parameters to get network
   * configuration diagnostic.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getNetworkConfigurationDiagnostic(resourceGroupName: string, networkWatcherName: string, parameters: Models.NetworkConfigurationDiagnosticParameters, options?: msRest.RequestOptionsBase): Promise<Models.NetworkWatchersGetNetworkConfigurationDiagnosticResponse> {
    return this.beginGetNetworkConfigurationDiagnostic(resourceGroupName, networkWatcherName, parameters, options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.NetworkWatchersGetNetworkConfigurationDiagnosticResponse>;
  }

  /**
   * Deletes the specified network watcher resource.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkWatcherName The name of the network watcher.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginDeleteMethod(resourceGroupName: string, networkWatcherName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        networkWatcherName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Verify IP flow from the specified VM to a location given the currently configured NSG rules.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkWatcherName The name of the network watcher.
   *
   * @param {VerificationIPFlowParameters} parameters Parameters that define the IP flow to be
   * verified.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginVerifyIPFlow(resourceGroupName: string, networkWatcherName: string, parameters: Models.VerificationIPFlowParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        networkWatcherName,
        parameters,
        options
      },
      beginVerifyIPFlowOperationSpec,
      options);
  }

  /**
   * Gets the next hop from the specified VM.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkWatcherName The name of the network watcher.
   *
   * @param {NextHopParameters} parameters Parameters that define the source and destination
   * endpoint.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginGetNextHop(resourceGroupName: string, networkWatcherName: string, parameters: Models.NextHopParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        networkWatcherName,
        parameters,
        options
      },
      beginGetNextHopOperationSpec,
      options);
  }

  /**
   * Gets the configured and effective security group rules on the specified VM.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkWatcherName The name of the network watcher.
   *
   * @param {SecurityGroupViewParameters} parameters Parameters that define the VM to check security
   * groups for.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginGetVMSecurityRules(resourceGroupName: string, networkWatcherName: string, parameters: Models.SecurityGroupViewParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        networkWatcherName,
        parameters,
        options
      },
      beginGetVMSecurityRulesOperationSpec,
      options);
  }

  /**
   * Initiate troubleshooting on a specified resource
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkWatcherName The name of the network watcher resource.
   *
   * @param {TroubleshootingParameters} parameters Parameters that define the resource to
   * troubleshoot.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginGetTroubleshooting(resourceGroupName: string, networkWatcherName: string, parameters: Models.TroubleshootingParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        networkWatcherName,
        parameters,
        options
      },
      beginGetTroubleshootingOperationSpec,
      options);
  }

  /**
   * Get the last completed troubleshooting result on a specified resource
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkWatcherName The name of the network watcher resource.
   *
   * @param {QueryTroubleshootingParameters} parameters Parameters that define the resource to query
   * the troubleshooting result.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginGetTroubleshootingResult(resourceGroupName: string, networkWatcherName: string, parameters: Models.QueryTroubleshootingParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        networkWatcherName,
        parameters,
        options
      },
      beginGetTroubleshootingResultOperationSpec,
      options);
  }

  /**
   * Configures flow log  and traffic analytics (optional) on a specified resource.
   *
   * @param {string} resourceGroupName The name of the network watcher resource group.
   *
   * @param {string} networkWatcherName The name of the network watcher resource.
   *
   * @param {FlowLogInformation} parameters Parameters that define the configuration of flow log.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginSetFlowLogConfiguration(resourceGroupName: string, networkWatcherName: string, parameters: Models.FlowLogInformation, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        networkWatcherName,
        parameters,
        options
      },
      beginSetFlowLogConfigurationOperationSpec,
      options);
  }

  /**
   * Queries status of flow log and traffic analytics (optional) on a specified resource.
   *
   * @param {string} resourceGroupName The name of the network watcher resource group.
   *
   * @param {string} networkWatcherName The name of the network watcher resource.
   *
   * @param {FlowLogStatusParameters} parameters Parameters that define a resource to query flow log
   * and traffic analytics (optional)  status.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginGetFlowLogStatus(resourceGroupName: string, networkWatcherName: string, parameters: Models.FlowLogStatusParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        networkWatcherName,
        parameters,
        options
      },
      beginGetFlowLogStatusOperationSpec,
      options);
  }

  /**
   * Verifies the possibility of establishing a direct TCP connection from a virtual machine to a
   * given endpoint including another VM or an arbitrary remote server.
   *
   * @param {string} resourceGroupName The name of the network watcher resource group.
   *
   * @param {string} networkWatcherName The name of the network watcher resource.
   *
   * @param {ConnectivityParameters} parameters Parameters that determine how the connectivity check
   * will be performed.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginCheckConnectivity(resourceGroupName: string, networkWatcherName: string, parameters: Models.ConnectivityParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        networkWatcherName,
        parameters,
        options
      },
      beginCheckConnectivityOperationSpec,
      options);
  }

  /**
   * Gets the relative latency score for internet service providers from a specified location to
   * Azure regions.
   *
   * @param {string} resourceGroupName The name of the network watcher resource group.
   *
   * @param {string} networkWatcherName The name of the network watcher resource.
   *
   * @param {AzureReachabilityReportParameters} parameters Parameters that determine Azure
   * reachability report configuration.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginGetAzureReachabilityReport(resourceGroupName: string, networkWatcherName: string, parameters: Models.AzureReachabilityReportParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        networkWatcherName,
        parameters,
        options
      },
      beginGetAzureReachabilityReportOperationSpec,
      options);
  }

  /**
   * Lists all available internet service providers for a specified Azure region.
   *
   * @param {string} resourceGroupName The name of the network watcher resource group.
   *
   * @param {string} networkWatcherName The name of the network watcher resource.
   *
   * @param {AvailableProvidersListParameters} parameters Parameters that scope the list of available
   * providers.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginListAvailableProviders(resourceGroupName: string, networkWatcherName: string, parameters: Models.AvailableProvidersListParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        networkWatcherName,
        parameters,
        options
      },
      beginListAvailableProvidersOperationSpec,
      options);
  }

  /**
   * Get network configuration diagnostic.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkWatcherName The name of the network watcher.
   *
   * @param {NetworkConfigurationDiagnosticParameters} parameters Parameters to get network
   * configuration diagnostic.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginGetNetworkConfigurationDiagnostic(resourceGroupName: string, networkWatcherName: string, parameters: Models.NetworkConfigurationDiagnosticParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        networkWatcherName,
        parameters,
        options
      },
      beginGetNetworkConfigurationDiagnosticOperationSpec,
      options);
  }

}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.networkWatcherName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.NetworkWatcher,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.NetworkWatcher
    },
    201: {
      bodyMapper: Mappers.NetworkWatcher
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.networkWatcherName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NetworkWatcher
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateTagsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.networkWatcherName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.TagsObject,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.NetworkWatcher
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NetworkWatcherListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listAllOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/networkWatchers",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NetworkWatcherListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getTopologyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/topology",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.networkWatcherName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.TopologyParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Topology
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.networkWatcherName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginVerifyIPFlowOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/ipFlowVerify",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.networkWatcherName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.VerificationIPFlowParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VerificationIPFlowResult
    },
    202: {
      bodyMapper: Mappers.VerificationIPFlowResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginGetNextHopOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/nextHop",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.networkWatcherName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.NextHopParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.NextHopResult
    },
    202: {
      bodyMapper: Mappers.NextHopResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginGetVMSecurityRulesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/securityGroupView",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.networkWatcherName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.SecurityGroupViewParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SecurityGroupViewResult
    },
    202: {
      bodyMapper: Mappers.SecurityGroupViewResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginGetTroubleshootingOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/troubleshoot",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.networkWatcherName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.TroubleshootingParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.TroubleshootingResult
    },
    202: {
      bodyMapper: Mappers.TroubleshootingResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginGetTroubleshootingResultOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/queryTroubleshootResult",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.networkWatcherName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.QueryTroubleshootingParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.TroubleshootingResult
    },
    202: {
      bodyMapper: Mappers.TroubleshootingResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginSetFlowLogConfigurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/configureFlowLog",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.networkWatcherName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.FlowLogInformation,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.FlowLogInformation
    },
    202: {
      bodyMapper: Mappers.FlowLogInformation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginGetFlowLogStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/queryFlowLogStatus",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.networkWatcherName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.FlowLogStatusParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.FlowLogInformation
    },
    202: {
      bodyMapper: Mappers.FlowLogInformation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCheckConnectivityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectivityCheck",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.networkWatcherName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.ConnectivityParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ConnectivityInformation
    },
    202: {
      bodyMapper: Mappers.ConnectivityInformation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginGetAzureReachabilityReportOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/azureReachabilityReport",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.networkWatcherName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.AzureReachabilityReportParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.AzureReachabilityReport
    },
    202: {
      bodyMapper: Mappers.AzureReachabilityReport
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginListAvailableProvidersOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/availableProvidersList",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.networkWatcherName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.AvailableProvidersListParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.AvailableProvidersList
    },
    202: {
      bodyMapper: Mappers.AvailableProvidersList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginGetNetworkConfigurationDiagnosticOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/networkConfigurationDiagnostic",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.networkWatcherName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.NetworkConfigurationDiagnosticParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.NetworkConfigurationDiagnosticResponse
    },
    202: {
      bodyMapper: Mappers.NetworkConfigurationDiagnosticResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
