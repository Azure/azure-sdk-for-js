/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "ms-rest-azure-js";
import * as msRest from "ms-rest-js";

export { BaseResource, CloudError };


/**
 * @interface
 * An interface representing AutoStorageBaseProperties.
 * The properties related to the auto-storage account.
 *
 */
export interface AutoStorageBaseProperties {
  /**
   * @member {string} storageAccountId The resource ID of the storage account
   * to be used for auto-storage account.
   */
  storageAccountId: string;
}

/**
 * @interface
 * An interface representing KeyVaultReference.
 * Identifies the Azure key vault associated with a Batch account.
 *
 */
export interface KeyVaultReference {
  /**
   * @member {string} id The resource ID of the Azure key vault associated with
   * the Batch account.
   */
  id: string;
  /**
   * @member {string} url The URL of the Azure key vault associated with the
   * Batch account.
   */
  url: string;
}

/**
 * @interface
 * An interface representing BatchAccountCreateParameters.
 * Parameters supplied to the Create operation.
 *
 */
export interface BatchAccountCreateParameters {
  /**
   * @member {string} location The region in which to create the account.
   */
  location: string;
  /**
   * @member {{ [propertyName: string]: string }} [tags] The user-specified
   * tags associated with the account.
   */
  tags?: { [propertyName: string]: string };
  /**
   * @member {AutoStorageBaseProperties} [autoStorage] The properties related
   * to the auto-storage account.
   */
  autoStorage?: AutoStorageBaseProperties;
  /**
   * @member {PoolAllocationMode} [poolAllocationMode] The allocation mode to
   * use for creating pools in the Batch account. The pool allocation mode also
   * affects how clients may authenticate to the Batch Service API. If the mode
   * is BatchService, clients may authenticate using access keys or Azure
   * Active Directory. If the mode is UserSubscription, clients must use Azure
   * Active Directory. The default is BatchService. Possible values include:
   * 'BatchService', 'UserSubscription'
   */
  poolAllocationMode?: PoolAllocationMode;
  /**
   * @member {KeyVaultReference} [keyVaultReference] A reference to the Azure
   * key vault associated with the Batch account.
   */
  keyVaultReference?: KeyVaultReference;
}

/**
 * @interface
 * An interface representing AutoStorageProperties.
 * Contains information about the auto-storage account associated with a Batch
 * account.
 *
 * @extends AutoStorageBaseProperties
 */
export interface AutoStorageProperties extends AutoStorageBaseProperties {
  /**
   * @member {Date} lastKeySync The UTC time at which storage keys were last
   * synchronized with the Batch account.
   */
  lastKeySync: Date;
}

/**
 * @interface
 * An interface representing Resource.
 * A definition of an Azure resource.
 *
 * @extends BaseResource
 */
export interface Resource extends BaseResource {
  /**
   * @member {string} [id] The ID of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] The name of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [type] The type of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string} [location] The location of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly location?: string;
  /**
   * @member {{ [propertyName: string]: string }} [tags] The tags of the
   * resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly tags?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing BatchAccount.
 * Contains information about an Azure Batch account.
 *
 * @extends Resource
 */
export interface BatchAccount extends Resource {
  /**
   * @member {string} [accountEndpoint] The account endpoint used to interact
   * with the Batch service.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly accountEndpoint?: string;
  /**
   * @member {ProvisioningState} [provisioningState] The provisioned state of
   * the resource. Possible values include: 'Invalid', 'Creating', 'Deleting',
   * 'Succeeded', 'Failed', 'Cancelled'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * @member {PoolAllocationMode} [poolAllocationMode] The allocation mode to
   * use for creating pools in the Batch account. Possible values include:
   * 'BatchService', 'UserSubscription'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly poolAllocationMode?: PoolAllocationMode;
  /**
   * @member {KeyVaultReference} [keyVaultReference] A reference to the Azure
   * key vault associated with the Batch account. **NOTE: This property will
   * not be serialized. It can only be populated by the server.**
   */
  readonly keyVaultReference?: KeyVaultReference;
  /**
   * @member {AutoStorageProperties} [autoStorage] The properties and status of
   * any auto-storage account associated with the Batch account. **NOTE: This
   * property will not be serialized. It can only be populated by the server.**
   */
  readonly autoStorage?: AutoStorageProperties;
  /**
   * @member {number} [dedicatedCoreQuota] The dedicated core quota for this
   * Batch account. **NOTE: This property will not be serialized. It can only
   * be populated by the server.**
   */
  readonly dedicatedCoreQuota?: number;
  /**
   * @member {number} [lowPriorityCoreQuota] The low-priority core quota for
   * this Batch account. **NOTE: This property will not be serialized. It can
   * only be populated by the server.**
   */
  readonly lowPriorityCoreQuota?: number;
  /**
   * @member {number} [poolQuota] The pool quota for this Batch account.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly poolQuota?: number;
  /**
   * @member {number} [activeJobAndJobScheduleQuota] The active job and job
   * schedule quota for this Batch account. **NOTE: This property will not be
   * serialized. It can only be populated by the server.**
   */
  readonly activeJobAndJobScheduleQuota?: number;
}

/**
 * @interface
 * An interface representing BatchAccountUpdateParameters.
 * Parameters for updating an Azure Batch account.
 *
 */
export interface BatchAccountUpdateParameters {
  /**
   * @member {{ [propertyName: string]: string }} [tags] The user-specified
   * tags associated with the account.
   */
  tags?: { [propertyName: string]: string };
  /**
   * @member {AutoStorageBaseProperties} [autoStorage] The properties related
   * to the auto-storage account.
   */
  autoStorage?: AutoStorageBaseProperties;
}

/**
 * @interface
 * An interface representing BatchAccountRegenerateKeyParameters.
 * Parameters supplied to the RegenerateKey operation.
 *
 */
export interface BatchAccountRegenerateKeyParameters {
  /**
   * @member {AccountKeyType} keyName The type of account key to regenerate.
   * Possible values include: 'Primary', 'Secondary'
   */
  keyName: AccountKeyType;
}

/**
 * @interface
 * An interface representing BatchAccountKeys.
 * A set of Azure Batch account keys.
 *
 */
export interface BatchAccountKeys {
  /**
   * @member {string} [accountName] The Batch account name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly accountName?: string;
  /**
   * @member {string} [primary] The primary key associated with the account.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly primary?: string;
  /**
   * @member {string} [secondary] The secondary key associated with the
   * account.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly secondary?: string;
}

/**
 * @interface
 * An interface representing ActivateApplicationPackageParameters.
 * Parameters for an activating an application package.
 *
 */
export interface ActivateApplicationPackageParameters {
  /**
   * @member {string} format The format of the application package binary file.
   */
  format: string;
}

/**
 * @interface
 * An interface representing ApplicationCreateParameters.
 * Parameters for adding an Application.
 *
 */
export interface ApplicationCreateParameters {
  /**
   * @member {boolean} [allowUpdates] A value indicating whether packages
   * within the application may be overwritten using the same version string.
   */
  allowUpdates?: boolean;
  /**
   * @member {string} [displayName] The display name for the application.
   */
  displayName?: string;
}

/**
 * @interface
 * An interface representing ApplicationPackage.
 * An application package which represents a particular version of an
 * application.
 *
 */
export interface ApplicationPackage {
  /**
   * @member {string} [id] The ID of the application.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [version] The version of the application package.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly version?: string;
  /**
   * @member {PackageState} [state] The current state of the application
   * package. Possible values include: 'Pending', 'Active', 'Unmapped'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: PackageState;
  /**
   * @member {string} [format] The format of the application package, if the
   * package is active.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly format?: string;
  /**
   * @member {string} [storageUrl] The URL for the application package in Azure
   * Storage.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly storageUrl?: string;
  /**
   * @member {Date} [storageUrlExpiry] The UTC time at which the Azure Storage
   * URL will expire.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly storageUrlExpiry?: Date;
  /**
   * @member {Date} [lastActivationTime] The time at which the package was last
   * activated, if the package is active.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly lastActivationTime?: Date;
}

/**
 * @interface
 * An interface representing Application.
 * Contains information about an application in a Batch account.
 *
 */
export interface Application {
  /**
   * @member {string} [id] A string that uniquely identifies the application
   * within the account.
   */
  id?: string;
  /**
   * @member {string} [displayName] The display name for the application.
   */
  displayName?: string;
  /**
   * @member {ApplicationPackage[]} [packages] The list of packages under this
   * application.
   */
  packages?: ApplicationPackage[];
  /**
   * @member {boolean} [allowUpdates] A value indicating whether packages
   * within the application may be overwritten using the same version string.
   */
  allowUpdates?: boolean;
  /**
   * @member {string} [defaultVersion] The package to use if a client requests
   * the application but does not specify a version.
   */
  defaultVersion?: string;
}

/**
 * @interface
 * An interface representing ApplicationUpdateParameters.
 * Parameters for an update application request.
 *
 */
export interface ApplicationUpdateParameters {
  /**
   * @member {boolean} [allowUpdates] A value indicating whether packages
   * within the application may be overwritten using the same version string.
   */
  allowUpdates?: boolean;
  /**
   * @member {string} [defaultVersion] The package to use if a client requests
   * the application but does not specify a version.
   */
  defaultVersion?: string;
  /**
   * @member {string} [displayName] The display name for the application.
   */
  displayName?: string;
}

/**
 * @interface
 * An interface representing BatchLocationQuota.
 * Quotas associated with a Batch region for a particular subscription.
 *
 */
export interface BatchLocationQuota {
  /**
   * @member {number} [accountQuota] The number of Batch accounts that may be
   * created under the subscription in the specified region.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly accountQuota?: number;
}

/**
 * @interface
 * An interface representing ProxyResource.
 * A definition of an Azure resource.
 *
 * @extends BaseResource
 */
export interface ProxyResource extends BaseResource {
  /**
   * @member {string} [id] The ID of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] The name of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [type] The type of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string} [etag] The ETag of the resource, used for concurrency
   * statements.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly etag?: string;
}

/**
 * @interface
 * An interface representing CertificateBaseProperties.
 */
export interface CertificateBaseProperties {
  /**
   * @member {string} [thumbprintAlgorithm] The algorithm of the certificate
   * thumbprint. This must match the first portion of the certificate name.
   * Currently required to be 'SHA1'.
   */
  thumbprintAlgorithm?: string;
  /**
   * @member {string} [thumbprint] The thumbprint of the certificate. This must
   * match the thumbprint from the name.
   */
  thumbprint?: string;
  /**
   * @member {CertificateFormat} [format] The format of the certificate -
   * either Pfx or Cer. If omitted, the default is Pfx. Possible values
   * include: 'Pfx', 'Cer'
   */
  format?: CertificateFormat;
}

/**
 * @interface
 * An interface representing DeleteCertificateError.
 * An error response from the Batch service.
 *
 */
export interface DeleteCertificateError {
  /**
   * @member {string} code An identifier for the error. Codes are invariant and
   * are intended to be consumed programmatically.
   */
  code: string;
  /**
   * @member {string} message A message describing the error, intended to be
   * suitable for display in a user interface.
   */
  message: string;
  /**
   * @member {string} [target] The target of the particular error. For example,
   * the name of the property in error.
   */
  target?: string;
  /**
   * @member {DeleteCertificateError[]} [details] A list of additional details
   * about the error.
   */
  details?: DeleteCertificateError[];
}

/**
 * @interface
 * An interface representing Certificate.
 * Contains information about a certificate.
 *
 * @extends ProxyResource
 */
export interface Certificate extends ProxyResource {
  /**
   * @member {string} [thumbprintAlgorithm] The algorithm of the certificate
   * thumbprint. This must match the first portion of the certificate name.
   * Currently required to be 'SHA1'.
   */
  thumbprintAlgorithm?: string;
  /**
   * @member {string} [thumbprint] The thumbprint of the certificate. This must
   * match the thumbprint from the name.
   */
  thumbprint?: string;
  /**
   * @member {CertificateFormat} [format] The format of the certificate -
   * either Pfx or Cer. If omitted, the default is Pfx. Possible values
   * include: 'Pfx', 'Cer'
   */
  format?: CertificateFormat;
  /**
   * @member {CertificateProvisioningState} [provisioningState] The provisioned
   * state of the resource. Values are:
   *
   * Succeeded - The certificate is available for use in pools.
   * Deleting - The user has requested that the certificate be deleted, but the
   * delete operation has not yet completed. You may not reference the
   * certificate when creating or updating pools.
   * Failed - The user requested that the certificate be deleted, but there are
   * pools that still have references to the certificate, or it is still
   * installed on one or more compute nodes. (The latter can occur if the
   * certificate has been removed from the pool, but the node has not yet
   * restarted. Nodes refresh their certificates only when they restart.) You
   * may use the cancel certificate delete operation to cancel the delete, or
   * the delete certificate operation to retry the delete. Possible values
   * include: 'Succeeded', 'Deleting', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: CertificateProvisioningState;
  /**
   * @member {Date} [provisioningStateTransitionTime] The time at which the
   * certificate entered its current state. **NOTE: This property will not be
   * serialized. It can only be populated by the server.**
   */
  readonly provisioningStateTransitionTime?: Date;
  /**
   * @member {CertificateProvisioningState} [previousProvisioningState] The
   * previous provisioned state of the resource. Possible values include:
   * 'Succeeded', 'Deleting', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly previousProvisioningState?: CertificateProvisioningState;
  /**
   * @member {Date} [previousProvisioningStateTransitionTime] The time at which
   * the certificate entered its previous state. **NOTE: This property will not
   * be serialized. It can only be populated by the server.**
   */
  readonly previousProvisioningStateTransitionTime?: Date;
  /**
   * @member {string} [publicData] The public key of the certificate.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly publicData?: string;
  /**
   * @member {DeleteCertificateError} [deleteCertificateError] The error which
   * occurred while deleting the certificate. This is only returned when the
   * certificate provisioningState is 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly deleteCertificateError?: DeleteCertificateError;
}

/**
 * @interface
 * An interface representing CertificateCreateOrUpdateParameters.
 * Contains information about a certificate.
 *
 * @extends ProxyResource
 */
export interface CertificateCreateOrUpdateParameters extends ProxyResource {
  /**
   * @member {string} [thumbprintAlgorithm] The algorithm of the certificate
   * thumbprint. This must match the first portion of the certificate name.
   * Currently required to be 'SHA1'.
   */
  thumbprintAlgorithm?: string;
  /**
   * @member {string} [thumbprint] The thumbprint of the certificate. This must
   * match the thumbprint from the name.
   */
  thumbprint?: string;
  /**
   * @member {CertificateFormat} [format] The format of the certificate -
   * either Pfx or Cer. If omitted, the default is Pfx. Possible values
   * include: 'Pfx', 'Cer'
   */
  format?: CertificateFormat;
  /**
   * @member {string} data The base64-encoded contents of the certificate. The
   * maximum size is 10KB.
   */
  data: string;
  /**
   * @member {string} [password] The password to access the certificate's
   * private key. This is required if the certificate format is pfx and must be
   * omitted if the certificate format is cer.
   */
  password?: string;
}

/**
 * @interface
 * An interface representing CloudServiceConfiguration.
 * @summary The configuration for nodes in a pool based on the Azure Cloud
 * Services platform.
 *
 */
export interface CloudServiceConfiguration {
  /**
   * @member {string} osFamily The Azure Guest OS family to be installed on the
   * virtual machines in the pool. Possible values are: 2 - OS Family 2,
   * equivalent to Windows Server 2008 R2 SP1. 3 - OS Family 3, equivalent to
   * Windows Server 2012. 4 - OS Family 4, equivalent to Windows Server 2012
   * R2. 5 - OS Family 5, equivalent to Windows Server 2016. For more
   * information, see Azure Guest OS Releases
   * (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
   */
  osFamily: string;
  /**
   * @member {string} [targetOSVersion] The Azure Guest OS version to be
   * installed on the virtual machines in the pool. The default value is *
   * which specifies the latest operating system version for the specified OS
   * family.
   */
  targetOSVersion?: string;
  /**
   * @member {string} [currentOSVersion] The Azure Guest OS Version currently
   * installed on the virtual machines in the pool. This may differ from
   * targetOSVersion if the pool state is Upgrading. In this case some virtual
   * machines may be on the targetOSVersion and some may be on the
   * currentOSVersion during the upgrade process. Once all virtual machines
   * have upgraded, currentOSVersion is updated to be the same as
   * targetOSVersion.
   */
  currentOSVersion?: string;
}

/**
 * @interface
 * An interface representing ImageReference.
 * @summary A reference to an Azure Virtual Machines Marketplace image or the
 * Azure Image resource of a custom Virtual Machine. To get the list of all
 * imageReferences verified by Azure Batch, see the 'List supported node agent
 * SKUs' operation.
 *
 */
export interface ImageReference {
  /**
   * @member {string} [publisher] The publisher of the Azure Virtual Machines
   * Marketplace image. For example, Canonical or MicrosoftWindowsServer.
   */
  publisher?: string;
  /**
   * @member {string} [offer] The offer type of the Azure Virtual Machines
   * Marketplace image. For example, UbuntuServer or WindowsServer.
   */
  offer?: string;
  /**
   * @member {string} [sku] The SKU of the Azure Virtual Machines Marketplace
   * image. For example, 14.04.0-LTS or 2012-R2-Datacenter.
   */
  sku?: string;
  /**
   * @member {string} [version] The version of the Azure Virtual Machines
   * Marketplace image. A value of 'latest' can be specified to select the
   * latest version of an image. If omitted, the default is 'latest'.
   */
  version?: string;
  /**
   * @member {string} [id] The ARM resource identifier of the virtual machine
   * image. Computes nodes of the pool will be created using this custom image.
   * This is of the form
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}.
   * This property is mutually exclusive with other properties. The virtual
   * machine image must be in the same region and subscription as the Azure
   * Batch account. For information about the firewall settings for Batch node
   * agent to communicate with Batch service see
   * https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
   * .
   */
  id?: string;
}

/**
 * @interface
 * An interface representing OSDisk.
 * @summary Settings for the operating system disk of the virtual machine.
 *
 */
export interface OSDisk {
  /**
   * @member {CachingType} [caching] The type of caching to be enabled for the
   * data disks. none - The caching mode for the disk is not enabled. readOnly
   * - The caching mode for the disk is read only. readWrite - The caching mode
   * for the disk is read and write. Default value is none. Possible values
   * include: 'None', 'ReadOnly', 'ReadWrite'
   */
  caching?: CachingType;
}

/**
 * @interface
 * An interface representing WindowsConfiguration.
 * @summary Windows operating system settings to apply to the virtual machine.
 *
 */
export interface WindowsConfiguration {
  /**
   * @member {boolean} [enableAutomaticUpdates] Whether automatic updates are
   * enabled on the virtual machine. If omitted, the default value is true.
   */
  enableAutomaticUpdates?: boolean;
}

/**
 * @interface
 * An interface representing DataDisk.
 * Data Disk settings which will be used by the data disks associated to
 * Compute Nodes in the pool.
 *
 */
export interface DataDisk {
  /**
   * @member {number} lun The logical unit number. The lun is used to uniquely
   * identify each data disk. If attaching multiple disks, each should have a
   * distinct lun.
   */
  lun: number;
  /**
   * @member {CachingType} [caching] The type of caching to be enabled for the
   * data disks. Values are:
   *
   * none - The caching mode for the disk is not enabled.
   * readOnly - The caching mode for the disk is read only.
   * readWrite - The caching mode for the disk is read and write.
   *
   * The default value for caching is none. For information about the caching
   * options see:
   * https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
   * Possible values include: 'None', 'ReadOnly', 'ReadWrite'
   */
  caching?: CachingType;
  /**
   * @member {number} diskSizeGB The initial disk size in GB when creating new
   * data disk.
   */
  diskSizeGB: number;
  /**
   * @member {StorageAccountType} [storageAccountType] The storage account type
   * to be used for the data disk. If omitted, the default is "Standard_LRS".
   * Values are:
   *
   * Standard_LRS - The data disk should use standard locally redundant
   * storage.
   * Premium_LRS - The data disk should use premium locally redundant storage.
   * Possible values include: 'Standard_LRS', 'Premium_LRS'
   */
  storageAccountType?: StorageAccountType;
}

/**
 * @interface
 * An interface representing VirtualMachineConfiguration.
 * @summary The configuration for compute nodes in a pool based on the Azure
 * Virtual Machines infrastructure.
 *
 */
export interface VirtualMachineConfiguration {
  /**
   * @member {ImageReference} imageReference A reference to the Azure Virtual
   * Machines Marketplace Image or the custom Virtual Machine Image to use.
   */
  imageReference: ImageReference;
  /**
   * @member {OSDisk} [osDisk] Settings for the operating system disk of the
   * Virtual Machine.
   */
  osDisk?: OSDisk;
  /**
   * @member {string} nodeAgentSkuId The SKU of the Batch node agent to be
   * provisioned on compute nodes in the pool. The Batch node agent is a
   * program that runs on each node in the pool, and provides the
   * command-and-control interface between the node and the Batch service.
   * There are different implementations of the node agent, known as SKUs, for
   * different operating systems. You must specify a node agent SKU which
   * matches the selected image reference. To get the list of supported node
   * agent SKUs along with their list of verified image references, see the
   * 'List supported node agent SKUs' operation.
   */
  nodeAgentSkuId: string;
  /**
   * @member {WindowsConfiguration} [windowsConfiguration] Windows operating
   * system settings on the virtual machine. This property must not be
   * specified if the imageReference specifies a Linux OS image.
   */
  windowsConfiguration?: WindowsConfiguration;
  /**
   * @member {DataDisk[]} [dataDisks] The configuration for data disks attached
   * to the compute nodes in the pool. This property must be specified if the
   * compute nodes in the pool need to have empty data disks attached to them.
   */
  dataDisks?: DataDisk[];
  /**
   * @member {string} [licenseType] The type of on-premises license to be used
   * when deploying the operating system. This only applies to images that
   * contain the Windows operating system, and should only be used when you
   * hold valid on-premises licenses for the nodes which will be deployed. If
   * omitted, no on-premises licensing discount is applied. Values are:
   *
   * Windows_Server - The on-premises license is for Windows Server.
   * Windows_Client - The on-premises license is for Windows Client.
   */
  licenseType?: string;
}

/**
 * @interface
 * An interface representing DeploymentConfiguration.
 * @summary Deployment configuration properties.
 *
 */
export interface DeploymentConfiguration {
  /**
   * @member {CloudServiceConfiguration} [cloudServiceConfiguration] The cloud
   * service configuration for the pool. This property and
   * virtualMachineConfiguration are mutually exclusive and one of the
   * properties must be specified. This property cannot be specified if the
   * Batch account was created with its poolAllocationMode property set to
   * 'UserSubscription'.
   */
  cloudServiceConfiguration?: CloudServiceConfiguration;
  /**
   * @member {VirtualMachineConfiguration} [virtualMachineConfiguration] The
   * virtual machine configuration for the pool. This property and
   * cloudServiceConfiguration are mutually exclusive and one of the properties
   * must be specified.
   */
  virtualMachineConfiguration?: VirtualMachineConfiguration;
}

/**
 * @interface
 * An interface representing FixedScaleSettings.
 * @summary Fixed scale settings for the pool.
 *
 */
export interface FixedScaleSettings {
  /**
   * @member {string} [resizeTimeout] The timeout for allocation of compute
   * nodes to the pool. The default value is 15 minutes. Timeout values use ISO
   * 8601 format. For example, use PT10M for 10 minutes. The minimum value is 5
   * minutes. If you specify a value less than 5 minutes, the Batch service
   * rejects the request with an error; if you are calling the REST API
   * directly, the HTTP status code is 400 (Bad Request).
   */
  resizeTimeout?: string;
  /**
   * @member {number} [targetDedicatedNodes] The desired number of dedicated
   * compute nodes in the pool. At least one of targetDedicatedNodes,
   * targetLowPriority nodes must be set.
   */
  targetDedicatedNodes?: number;
  /**
   * @member {number} [targetLowPriorityNodes] The desired number of
   * low-priority compute nodes in the pool. At least one of
   * targetDedicatedNodes, targetLowPriority nodes must be set.
   */
  targetLowPriorityNodes?: number;
  /**
   * @member {ComputeNodeDeallocationOption} [nodeDeallocationOption]
   * Determines what to do with a node and its running task(s) if the pool size
   * is decreasing. If omitted, the default value is Requeue. Possible values
   * include: 'Requeue', 'Terminate', 'TaskCompletion', 'RetainedData'
   */
  nodeDeallocationOption?: ComputeNodeDeallocationOption;
}

/**
 * @interface
 * An interface representing AutoScaleSettings.
 * @summary AutoScale settings for the pool.
 *
 */
export interface AutoScaleSettings {
  /**
   * @member {string} formula A formula for the desired number of compute nodes
   * in the pool.
   */
  formula: string;
  /**
   * @member {string} [evaluationInterval] The time interval at which to
   * automatically adjust the pool size according to the autoscale formula. If
   * omitted, the default value is 15 minutes (PT15M).
   */
  evaluationInterval?: string;
}

/**
 * @interface
 * An interface representing ScaleSettings.
 * @summary Scale settings for the pool
 *
 * Defines the desired size of the pool. This can either be 'fixedScale' where
 * the requested targetDedicatedNodes is specified, or 'autoScale' which
 * defines a formula which is periodically reevaluated. If this property is not
 * specified, the pool will have a fixed scale with 0 targetDedicatedNodes.
 *
 */
export interface ScaleSettings {
  /**
   * @member {FixedScaleSettings} [fixedScale] Fixed scale settings for the
   * pool. This property and autoScale are mutually exclusive and one of the
   * properties must be specified.
   */
  fixedScale?: FixedScaleSettings;
  /**
   * @member {AutoScaleSettings} [autoScale] AutoScale settings for the pool.
   * This property and fixedScale are mutually exclusive and one of the
   * properties must be specified.
   */
  autoScale?: AutoScaleSettings;
}

/**
 * @interface
 * An interface representing AutoScaleRunError.
 * @summary An error that occurred when autoscaling a pool.
 *
 */
export interface AutoScaleRunError {
  /**
   * @member {string} code An identifier for the error. Codes are invariant and
   * are intended to be consumed programmatically.
   */
  code: string;
  /**
   * @member {string} message A message describing the error, intended to be
   * suitable for display in a user interface.
   */
  message: string;
  /**
   * @member {AutoScaleRunError[]} [details] Additional details about the
   * error.
   */
  details?: AutoScaleRunError[];
}

/**
 * @interface
 * An interface representing AutoScaleRun.
 * @summary The results and errors from an execution of a pool autoscale
 * formula.
 *
 */
export interface AutoScaleRun {
  /**
   * @member {Date} evaluationTime The time at which the autoscale formula was
   * last evaluated.
   */
  evaluationTime: Date;
  /**
   * @member {string} [results] The final values of all variables used in the
   * evaluation of the autoscale formula. Each variable value is returned in
   * the form $variable=value, and variables are separated by semicolons.
   */
  results?: string;
  /**
   * @member {AutoScaleRunError} [error] Details of the error encountered
   * evaluating the autoscale formula on the pool, if the evaluation was
   * unsuccessful.
   */
  error?: AutoScaleRunError;
}

/**
 * @interface
 * An interface representing NetworkSecurityGroupRule.
 * @summary A network security group rule to apply to an inbound endpoint.
 *
 */
export interface NetworkSecurityGroupRule {
  /**
   * @member {number} priority The priority for this rule. Priorities within a
   * pool must be unique and are evaluated in order of priority. The lower the
   * number the higher the priority. For example, rules could be specified with
   * order numbers of 150, 250, and 350. The rule with the order number of 150
   * takes precedence over the rule that has an order of 250. Allowed
   * priorities are 150 to 3500. If any reserved or duplicate values are
   * provided the request fails with HTTP status code 400.
   */
  priority: number;
  /**
   * @member {NetworkSecurityGroupRuleAccess} access The action that should be
   * taken for a specified IP address, subnet range or tag. Possible values
   * include: 'Allow', 'Deny'
   */
  access: NetworkSecurityGroupRuleAccess;
  /**
   * @member {string} sourceAddressPrefix The source address prefix or tag to
   * match for the rule. Valid values are a single IP address (i.e.
   * 10.10.10.10), IP subnet (i.e. 192.168.1.0/24), default tag, or * (for all
   * addresses).  If any other values are provided the request fails with HTTP
   * status code 400.
   */
  sourceAddressPrefix: string;
}

/**
 * @interface
 * An interface representing InboundNatPool.
 * @summary A inbound NAT pool that can be used to address specific ports on
 * compute nodes in a Batch pool externally.
 *
 */
export interface InboundNatPool {
  /**
   * @member {string} name The name of the endpoint. The name must be unique
   * within a Batch pool, can contain letters, numbers, underscores, periods,
   * and hyphens. Names must start with a letter or number, must end with a
   * letter, number, or underscore, and cannot exceed 77 characters.  If any
   * invalid values are provided the request fails with HTTP status code 400.
   */
  name: string;
  /**
   * @member {InboundEndpointProtocol} protocol The protocol of the endpoint.
   * Possible values include: 'TCP', 'UDP'
   */
  protocol: InboundEndpointProtocol;
  /**
   * @member {number} backendPort The port number on the compute node. This
   * must be unique within a Batch pool. Acceptable values are between 1 and
   * 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any
   * reserved values are provided the request fails with HTTP status code 400.
   */
  backendPort: number;
  /**
   * @member {number} frontendPortRangeStart The first port number in the range
   * of external ports that will be used to provide inbound access to the
   * backendPort on individual compute nodes. Acceptable values range between 1
   * and 65534 except ports from 50000 to 55000 which are reserved. All ranges
   * within a pool must be distinct and cannot overlap. If any reserved or
   * overlapping values are provided the request fails with HTTP status code
   * 400.
   */
  frontendPortRangeStart: number;
  /**
   * @member {number} frontendPortRangeEnd The last port number in the range of
   * external ports that will be used to provide inbound access to the
   * backendPort on individual compute nodes. Acceptable values range between 1
   * and 65534 except ports from 50000 to 55000 which are reserved by the Batch
   * service. All ranges within a pool must be distinct and cannot overlap. If
   * any reserved or overlapping values are provided the request fails with
   * HTTP status code 400.
   */
  frontendPortRangeEnd: number;
  /**
   * @member {NetworkSecurityGroupRule[]} [networkSecurityGroupRules] A list of
   * network security group rules that will be applied to the endpoint. The
   * maximum number of rules that can be specified across all the endpoints on
   * a Batch pool is 25. If no network security group rules are specified, a
   * default rule will be created to allow inbound access to the specified
   * backendPort. If the maximum number of network security group rules is
   * exceeded the request fails with HTTP status code 400.
   */
  networkSecurityGroupRules?: NetworkSecurityGroupRule[];
}

/**
 * @interface
 * An interface representing PoolEndpointConfiguration.
 * @summary The endpoint configuration for a pool.
 *
 */
export interface PoolEndpointConfiguration {
  /**
   * @member {InboundNatPool[]} inboundNatPools A list of inbound NAT pools
   * that can be used to address specific ports on an individual compute node
   * externally. The maximum number of inbound NAT pools per Batch pool is 5.
   * If the maximum number of inbound NAT pools is exceeded the request fails
   * with HTTP status code 400.
   */
  inboundNatPools: InboundNatPool[];
}

/**
 * @interface
 * An interface representing NetworkConfiguration.
 * The network configuration for a pool.
 *
 */
export interface NetworkConfiguration {
  /**
   * @member {string} [subnetId] The ARM resource identifier of the virtual
   * network subnet which the compute nodes of the pool will join. This is of
   * the form
   * /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}.
   * The virtual network must be in the same region and subscription as the
   * Azure Batch account. The specified subnet should have enough free IP
   * addresses to accommodate the number of nodes in the pool. If the subnet
   * doesn't have enough free IP addresses, the pool will partially allocate
   * compute nodes, and a resize error will occur. The 'MicrosoftAzureBatch'
   * service principal must have the 'Classic Virtual Machine Contributor'
   * Role-Based Access Control (RBAC) role for the specified VNet. The
   * specified subnet must allow communication from the Azure Batch service to
   * be able to schedule tasks on the compute nodes. This can be verified by
   * checking if the specified VNet has any associated Network Security Groups
   * (NSG). If communication to the compute nodes in the specified subnet is
   * denied by an NSG, then the Batch service will set the state of the compute
   * nodes to unusable. For pools created via virtualMachineConfiguration the
   * Batch account must have poolAllocationMode userSubscription in order to
   * use a VNet. If the specified VNet has any associated Network Security
   * Groups (NSG), then a few reserved system ports must be enabled for inbound
   * communication. For pools created with a virtual machine configuration,
   * enable ports 29876 and 29877, as well as port 22 for Linux and port 3389
   * for Windows. For pools created with a cloud service configuration, enable
   * ports 10100, 20100, and 30100. Also enable outbound connections to Azure
   * Storage on port 443. For more details see:
   * https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
   */
  subnetId?: string;
  /**
   * @member {PoolEndpointConfiguration} [endpointConfiguration] The
   * configuration for endpoints on compute nodes in the Batch pool. Pool
   * endpoint configuration is only supported on pools with the
   * virtualMachineConfiguration property.
   */
  endpointConfiguration?: PoolEndpointConfiguration;
}

/**
 * @interface
 * An interface representing TaskSchedulingPolicy.
 * @summary Specifies how tasks should be distributed across compute nodes.
 *
 */
export interface TaskSchedulingPolicy {
  /**
   * @member {ComputeNodeFillType} nodeFillType How tasks should be distributed
   * across compute nodes. Possible values include: 'Spread', 'Pack'
   */
  nodeFillType: ComputeNodeFillType;
}

/**
 * @interface
 * An interface representing LinuxUserConfiguration.
 * @summary Properties used to create a user account on a Linux node.
 *
 */
export interface LinuxUserConfiguration {
  /**
   * @member {number} [uid] The user ID of the user account. The uid and gid
   * properties must be specified together or not at all. If not specified the
   * underlying operating system picks the uid.
   */
  uid?: number;
  /**
   * @member {number} [gid] The group ID for the user account. The uid and gid
   * properties must be specified together or not at all. If not specified the
   * underlying operating system picks the gid.
   */
  gid?: number;
  /**
   * @member {string} [sshPrivateKey] The SSH private key for the user account.
   * The private key must not be password protected. The private key is used to
   * automatically configure asymmetric-key based authentication for SSH
   * between nodes in a Linux pool when the pool's enableInterNodeCommunication
   * property is true (it is ignored if enableInterNodeCommunication is false).
   * It does this by placing the key pair into the user's .ssh directory. If
   * not specified, password-less SSH is not configured between nodes (no
   * modification of the user's .ssh directory is done).
   */
  sshPrivateKey?: string;
}

/**
 * @interface
 * An interface representing UserAccount.
 * @summary Properties used to create a user on an Azure Batch node.
 *
 */
export interface UserAccount {
  /**
   * @member {string} name The name of the user account.
   */
  name: string;
  /**
   * @member {string} password The password for the user account.
   */
  password: string;
  /**
   * @member {ElevationLevel} [elevationLevel] The elevation level of the user
   * account. nonAdmin - The auto user is a standard user without elevated
   * access. admin - The auto user is a user with elevated access and operates
   * with full Administrator permissions. The default value is nonAdmin.
   * Possible values include: 'NonAdmin', 'Admin'
   */
  elevationLevel?: ElevationLevel;
  /**
   * @member {LinuxUserConfiguration} [linuxUserConfiguration] The
   * Linux-specific user configuration for the user account. This property is
   * ignored if specified on a Windows pool. If not specified, the user is
   * created with the default options.
   */
  linuxUserConfiguration?: LinuxUserConfiguration;
}

/**
 * @interface
 * An interface representing MetadataItem.
 * @summary A name-value pair associated with a Batch service resource.
 *
 * The Batch service does not assign any meaning to this metadata; it is solely
 * for the use of user code.
 *
 */
export interface MetadataItem {
  /**
   * @member {string} name The name of the metadata item.
   */
  name: string;
  /**
   * @member {string} value The value of the metadata item.
   */
  value: string;
}

/**
 * @interface
 * An interface representing ResourceFile.
 * @summary A file to be downloaded from Azure blob storage to a compute node.
 *
 */
export interface ResourceFile {
  /**
   * @member {string} blobSource The URL of the file within Azure Blob Storage.
   * This URL must be readable using anonymous access; that is, the Batch
   * service does not present any credentials when downloading the blob. There
   * are two ways to get such a URL for a blob in Azure storage: include a
   * Shared Access Signature (SAS) granting read permissions on the blob, or
   * set the ACL for the blob or its container to allow public access.
   */
  blobSource: string;
  /**
   * @member {string} filePath The location on the compute node to which to
   * download the file, relative to the task's working directory.
   */
  filePath: string;
  /**
   * @member {string} [fileMode] The file permission mode attribute in octal
   * format. This property applies only to files being downloaded to Linux
   * compute nodes. It will be ignored if it is specified for a resourceFile
   * which will be downloaded to a Windows node. If this property is not
   * specified for a Linux node, then a default value of 0770 is applied to the
   * file.
   */
  fileMode?: string;
}

/**
 * @interface
 * An interface representing EnvironmentSetting.
 * @summary An environment variable to be set on a task process.
 *
 */
export interface EnvironmentSetting {
  /**
   * @member {string} name The name of the environment variable.
   */
  name: string;
  /**
   * @member {string} [value] The value of the environment variable.
   */
  value?: string;
}

/**
 * @interface
 * An interface representing AutoUserSpecification.
 * @summary Specifies the parameters for the auto user that runs a task on the
 * Batch service.
 *
 */
export interface AutoUserSpecification {
  /**
   * @member {AutoUserScope} [scope] The scope for the auto user. pool -
   * specifies that the task runs as the common auto user account which is
   * created on every node in a pool. task - specifies that the service should
   * create a new user for the task. The default value is task. Possible values
   * include: 'Task', 'Pool'
   */
  scope?: AutoUserScope;
  /**
   * @member {ElevationLevel} [elevationLevel] The elevation level of the auto
   * user. nonAdmin - The auto user is a standard user without elevated access.
   * admin - The auto user is a user with elevated access and operates with
   * full Administrator permissions. The default value is nonAdmin. Possible
   * values include: 'NonAdmin', 'Admin'
   */
  elevationLevel?: ElevationLevel;
}

/**
 * @interface
 * An interface representing UserIdentity.
 * @summary The definition of the user identity under which the task is run.
 *
 * Specify either the userName or autoUser property, but not both.
 *
 */
export interface UserIdentity {
  /**
   * @member {string} [userName] The name of the user identity under which the
   * task is run. The userName and autoUser properties are mutually exclusive;
   * you must specify one but not both.
   */
  userName?: string;
  /**
   * @member {AutoUserSpecification} [autoUser] The auto user under which the
   * task is run. The userName and autoUser properties are mutually exclusive;
   * you must specify one but not both.
   */
  autoUser?: AutoUserSpecification;
}

/**
 * @interface
 * An interface representing StartTask.
 * @summary A task which is run when a compute node joins a pool in the Azure
 * Batch service, or when the compute node is rebooted or reimaged.
 *
 */
export interface StartTask {
  /**
   * @member {string} [commandLine] The command line of the start task. The
   * command line does not run under a shell, and therefore cannot take
   * advantage of shell features such as environment variable expansion. If you
   * want to take advantage of such features, you should invoke the shell in
   * the command line, for example using "cmd /c MyCommand" in Windows or
   * "/bin/sh -c MyCommand" in Linux. Required if any other properties of the
   * startTask are specified.
   */
  commandLine?: string;
  /**
   * @member {ResourceFile[]} [resourceFiles] A list of files that the Batch
   * service will download to the compute node before running the command line.
   */
  resourceFiles?: ResourceFile[];
  /**
   * @member {EnvironmentSetting[]} [environmentSettings] A list of environment
   * variable settings for the start task.
   */
  environmentSettings?: EnvironmentSetting[];
  /**
   * @member {UserIdentity} [userIdentity] The user identity under which the
   * start task runs. If omitted, the task runs as a non-administrative user
   * unique to the task.
   */
  userIdentity?: UserIdentity;
  /**
   * @member {number} [maxTaskRetryCount] The maximum number of times the task
   * may be retried. The Batch service retries a task if its exit code is
   * nonzero. Note that this value specifically controls the number of retries.
   * The Batch service will try the task once, and may then retry up to this
   * limit. For example, if the maximum retry count is 3, Batch tries the task
   * up to 4 times (one initial try and 3 retries). If the maximum retry count
   * is 0, the Batch service does not retry the task. If the maximum retry
   * count is -1, the Batch service retries the task without limit.
   */
  maxTaskRetryCount?: number;
  /**
   * @member {boolean} [waitForSuccess] Whether the Batch service should wait
   * for the start task to complete successfully (that is, to exit with exit
   * code 0) before scheduling any tasks on the compute node. If true and the
   * start task fails on a compute node, the Batch service retries the start
   * task up to its maximum retry count (maxTaskRetryCount). If the task has
   * still not completed successfully after all retries, then the Batch service
   * marks the compute node unusable, and will not schedule tasks to it. This
   * condition can be detected via the node state and scheduling error detail.
   * If false, the Batch service will not wait for the start task to complete.
   * In this case, other tasks can start executing on the compute node while
   * the start task is still running; and even if the start task fails, new
   * tasks will continue to be scheduled on the node. The default is false.
   */
  waitForSuccess?: boolean;
}

/**
 * @interface
 * An interface representing CertificateReference.
 * @summary A reference to a certificate to be installed on compute nodes in a
 * pool. This must exist inside the same account as the pool.
 *
 */
export interface CertificateReference {
  /**
   * @member {string} id The fully qualified ID of the certificate to install
   * on the pool. This must be inside the same batch account as the pool.
   */
  id: string;
  /**
   * @member {CertificateStoreLocation} [storeLocation] The location of the
   * certificate store on the compute node into which to install the
   * certificate. The default value is currentUser. This property is applicable
   * only for pools configured with Windows nodes (that is, created with
   * cloudServiceConfiguration, or with virtualMachineConfiguration using a
   * Windows image reference). For Linux compute nodes, the certificates are
   * stored in a directory inside the task working directory and an environment
   * variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for
   * this location. For certificates with visibility of 'remoteUser', a 'certs'
   * directory is created in the user's home directory (e.g.,
   * /home/{user-name}/certs) and certificates are placed in that directory.
   * Possible values include: 'CurrentUser', 'LocalMachine'
   */
  storeLocation?: CertificateStoreLocation;
  /**
   * @member {string} [storeName] The name of the certificate store on the
   * compute node into which to install the certificate. This property is
   * applicable only for pools configured with Windows nodes (that is, created
   * with cloudServiceConfiguration, or with virtualMachineConfiguration using
   * a Windows image reference). Common store names include: My, Root, CA,
   * Trust, Disallowed, TrustedPeople, TrustedPublisher, AuthRoot, AddressBook,
   * but any custom store name can also be used. The default value is My.
   */
  storeName?: string;
  /**
   * @member {CertificateVisibility[]} [visibility] Which user accounts on the
   * compute node should have access to the private data of the certificate.
   * Values are:
   *
   * starttask - The user account under which the start task is run.
   * task - The accounts under which job tasks are run.
   * remoteuser - The accounts under which users remotely access the node.
   *
   * You can specify more than one visibility in this collection. The default
   * is all accounts.
   */
  visibility?: CertificateVisibility[];
}

/**
 * @interface
 * An interface representing ApplicationPackageReference.
 * @summary Link to an application package inside the batch account
 *
 */
export interface ApplicationPackageReference {
  /**
   * @member {string} id The ID of the application package to install. This
   * must be inside the same batch account as the pool. This can either be a
   * reference to a specific version or the default version if one exists.
   */
  id: string;
  /**
   * @member {string} [version] The version of the application to deploy. If
   * omitted, the default version is deployed. If this is omitted, and no
   * default version is specified for this application, the request fails with
   * the error code InvalidApplicationPackageReferences. If you are calling the
   * REST API directly, the HTTP status code is 409.
   */
  version?: string;
}

/**
 * @interface
 * An interface representing ResizeError.
 * @summary An error that occurred when resizing a pool.
 *
 */
export interface ResizeError {
  /**
   * @member {string} code An identifier for the error. Codes are invariant and
   * are intended to be consumed programmatically.
   */
  code: string;
  /**
   * @member {string} message A message describing the error, intended to be
   * suitable for display in a user interface.
   */
  message: string;
  /**
   * @member {ResizeError[]} [details] Additional details about the error.
   */
  details?: ResizeError[];
}

/**
 * @interface
 * An interface representing ResizeOperationStatus.
 * @summary Details about the current or last completed resize operation.
 *
 * Describes either the current operation (if the pool AllocationState is
 * Resizing) or the previously completed operation (if the AllocationState is
 * Steady).
 *
 */
export interface ResizeOperationStatus {
  /**
   * @member {number} [targetDedicatedNodes] The desired number of dedicated
   * compute nodes in the pool.
   */
  targetDedicatedNodes?: number;
  /**
   * @member {number} [targetLowPriorityNodes] The desired number of
   * low-priority compute nodes in the pool.
   */
  targetLowPriorityNodes?: number;
  /**
   * @member {string} [resizeTimeout] The timeout for allocation of compute
   * nodes to the pool or removal of compute nodes from the pool. The default
   * value is 15 minutes. The minimum value is 5 minutes. If you specify a
   * value less than 5 minutes, the Batch service returns an error; if you are
   * calling the REST API directly, the HTTP status code is 400 (Bad Request).
   */
  resizeTimeout?: string;
  /**
   * @member {ComputeNodeDeallocationOption} [nodeDeallocationOption]
   * Determines what to do with a node and its running task(s) if the pool size
   * is decreasing. The default value is requeue. Possible values include:
   * 'Requeue', 'Terminate', 'TaskCompletion', 'RetainedData'
   */
  nodeDeallocationOption?: ComputeNodeDeallocationOption;
  /**
   * @member {Date} [startTime] The time when this resize operation was
   * started.
   */
  startTime?: Date;
  /**
   * @member {ResizeError[]} [errors] Details of any errors encountered while
   * performing the last resize on the pool. This property is set only if an
   * error occurred during the last pool resize, and only when the pool
   * allocationState is Steady.
   */
  errors?: ResizeError[];
}

/**
 * @interface
 * An interface representing Pool.
 * Contains information about a pool.
 *
 * @extends ProxyResource
 */
export interface Pool extends ProxyResource {
  /**
   * @member {string} [displayName] The display name for the pool. The display
   * name need not be unique and can contain any Unicode characters up to a
   * maximum length of 1024.
   */
  displayName?: string;
  /**
   * @member {Date} [lastModified] The last modified time of the pool. This is
   * the last time at which the pool level data, such as the
   * targetDedicatedNodes or autoScaleSettings, changed. It does not factor in
   * node-level changes such as a compute node changing state.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly lastModified?: Date;
  /**
   * @member {Date} [creationTime] The creation time of the pool. **NOTE: This
   * property will not be serialized. It can only be populated by the server.**
   */
  readonly creationTime?: Date;
  /**
   * @member {PoolProvisioningState} [provisioningState] The current state of
   * the pool. Values are:
   *
   * Succeeded - The pool is available to run tasks subject to the availability
   * of compute nodes.
   * Deleting - The user has requested that the pool be deleted, but the delete
   * operation has not yet completed. Possible values include: 'Succeeded',
   * 'Deleting'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: PoolProvisioningState;
  /**
   * @member {Date} [provisioningStateTransitionTime] The time at which the
   * pool entered its current state. **NOTE: This property will not be
   * serialized. It can only be populated by the server.**
   */
  readonly provisioningStateTransitionTime?: Date;
  /**
   * @member {AllocationState} [allocationState] Whether the pool is resizing.
   * Values are:
   *
   * Steady - The pool is not resizing. There are no changes to the number of
   * nodes in the pool in progress. A pool enters this state when it is created
   * and when no operations are being performed on the pool to change the
   * number of dedicated nodes.
   * Resizing - The pool is resizing; that is, compute nodes are being added to
   * or removed from the pool.
   * Stopping - The pool was resizing, but the user has requested that the
   * resize be stopped, but the stop request has not yet been completed.
   * Possible values include: 'Steady', 'Resizing', 'Stopping'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly allocationState?: AllocationState;
  /**
   * @member {Date} [allocationStateTransitionTime] The time at which the pool
   * entered its current allocation state. **NOTE: This property will not be
   * serialized. It can only be populated by the server.**
   */
  readonly allocationStateTransitionTime?: Date;
  /**
   * @member {string} [vmSize] The size of virtual machines in the pool. All
   * VMs in a pool are the same size. For information about available sizes of
   * virtual machines for Cloud Services pools (pools created with
   * cloudServiceConfiguration), see Sizes for Cloud Services
   * (http://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/).
   * Batch supports all Cloud Services VM sizes except ExtraSmall. For
   * information about available VM sizes for pools using images from the
   * Virtual Machines Marketplace (pools created with
   * virtualMachineConfiguration) see Sizes for Virtual Machines (Linux)
   * (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/)
   * or Sizes for Virtual Machines (Windows)
   * (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/).
   * Batch supports all Azure VM sizes except STANDARD_A0 and those with
   * premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
   */
  vmSize?: string;
  /**
   * @member {DeploymentConfiguration} [deploymentConfiguration] This property
   * describes how the pool nodes will be deployed - using Cloud Services or
   * Virtual Machines. Using CloudServiceConfiguration specifies that the nodes
   * should be creating using Azure Cloud Services (PaaS), while
   * VirtualMachineConfiguration uses Azure Virtual Machines (IaaS).
   */
  deploymentConfiguration?: DeploymentConfiguration;
  /**
   * @member {number} [currentDedicatedNodes] The number of compute nodes
   * currently in the pool. **NOTE: This property will not be serialized. It
   * can only be populated by the server.**
   */
  readonly currentDedicatedNodes?: number;
  /**
   * @member {number} [currentLowPriorityNodes] The number of low priority
   * compute nodes currently in the pool. **NOTE: This property will not be
   * serialized. It can only be populated by the server.**
   */
  readonly currentLowPriorityNodes?: number;
  /**
   * @member {ScaleSettings} [scaleSettings] Settings which configure the
   * number of nodes in the pool.
   */
  scaleSettings?: ScaleSettings;
  /**
   * @member {AutoScaleRun} [autoScaleRun] The results and errors from the last
   * execution of the autoscale formula. This property is set only if the pool
   * automatically scales, i.e. autoScaleSettings are used.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly autoScaleRun?: AutoScaleRun;
  /**
   * @member {InterNodeCommunicationState} [interNodeCommunication] Whether the
   * pool permits direct communication between nodes. This imposes restrictions
   * on which nodes can be assigned to the pool. Enabling this value can reduce
   * the chance of the requested number of nodes to be allocated in the pool.
   * If not specified, this value defaults to 'Disabled'. Possible values
   * include: 'Enabled', 'Disabled'
   */
  interNodeCommunication?: InterNodeCommunicationState;
  /**
   * @member {NetworkConfiguration} [networkConfiguration] The network
   * configuration for the pool.
   */
  networkConfiguration?: NetworkConfiguration;
  /**
   * @member {number} [maxTasksPerNode] The maximum number of tasks that can
   * run concurrently on a single compute node in the pool.
   */
  maxTasksPerNode?: number;
  /**
   * @member {TaskSchedulingPolicy} [taskSchedulingPolicy] How tasks are
   * distributed across compute nodes in a pool.
   */
  taskSchedulingPolicy?: TaskSchedulingPolicy;
  /**
   * @member {UserAccount[]} [userAccounts] The list of user accounts to be
   * created on each node in the pool.
   */
  userAccounts?: UserAccount[];
  /**
   * @member {MetadataItem[]} [metadata] A list of name-value pairs associated
   * with the pool as metadata. The Batch service does not assign any meaning
   * to metadata; it is solely for the use of user code.
   */
  metadata?: MetadataItem[];
  /**
   * @member {StartTask} [startTask] A task specified to run on each compute
   * node as it joins the pool. In an PATCH (update) operation, this property
   * can be set to an empty object to remove the start task from the pool.
   */
  startTask?: StartTask;
  /**
   * @member {CertificateReference[]} [certificates] The list of certificates
   * to be installed on each compute node in the pool. For Windows compute
   * nodes, the Batch service installs the certificates to the specified
   * certificate store and location. For Linux compute nodes, the certificates
   * are stored in a directory inside the task working directory and an
   * environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to
   * query for this location. For certificates with visibility of 'remoteUser',
   * a 'certs' directory is created in the user's home directory (e.g.,
   * /home/{user-name}/certs) and certificates are placed in that directory.
   */
  certificates?: CertificateReference[];
  /**
   * @member {ApplicationPackageReference[]} [applicationPackages] The list of
   * application packages to be installed on each compute node in the pool.
   * Changes to application packages affect all new compute nodes joining the
   * pool, but do not affect compute nodes that are already in the pool until
   * they are rebooted or reimaged.
   */
  applicationPackages?: ApplicationPackageReference[];
  /**
   * @member {string[]} [applicationLicenses] The list of application licenses
   * the Batch service will make available on each compute node in the pool.
   * The list of application licenses must be a subset of available Batch
   * service application licenses. If a license is requested which is not
   * supported, pool creation will fail.
   */
  applicationLicenses?: string[];
  /**
   * @member {ResizeOperationStatus} [resizeOperationStatus] Contains details
   * about the current or last completed resize operation. **NOTE: This
   * property will not be serialized. It can only be populated by the server.**
   */
  readonly resizeOperationStatus?: ResizeOperationStatus;
}

/**
 * @interface
 * An interface representing OperationDisplay.
 * @summary The object that describes the operation.
 *
 */
export interface OperationDisplay {
  /**
   * @member {string} [provider] Friendly name of the resource provider.
   */
  provider?: string;
  /**
   * @member {string} [operation] The operation type. For example: read, write,
   * delete, or listKeys/action
   */
  operation?: string;
  /**
   * @member {string} [resource] The resource type on which the operation is
   * performed.
   */
  resource?: string;
  /**
   * @member {string} [description] The friendly name of the operation.
   */
  description?: string;
}

/**
 * @interface
 * An interface representing Operation.
 * @summary A REST API operation
 *
 */
export interface Operation {
  /**
   * @member {string} [name] The operation name. This is of the format
   * {provider}/{resource}/{operation}
   */
  name?: string;
  /**
   * @member {OperationDisplay} [display] The object that describes the
   * operation.
   */
  display?: OperationDisplay;
  /**
   * @member {string} [origin] The intended executor of the operation.
   */
  origin?: string;
  /**
   * @member {any} [properties] Properties of the operation.
   */
  properties?: any;
}

/**
 * @interface
 * An interface representing CheckNameAvailabilityParameters.
 * Parameters for a check name availability request.
 *
 */
export interface CheckNameAvailabilityParameters {
  /**
   * @member {string} name The name to check for availability
   */
  name: string;
}

/**
 * @interface
 * An interface representing CheckNameAvailabilityResult.
 * The CheckNameAvailability operation response.
 *
 */
export interface CheckNameAvailabilityResult {
  /**
   * @member {boolean} [nameAvailable] Gets a boolean value that indicates
   * whether the name is available for you to use. If true, the name is
   * available. If false, the name has already been taken or invalid and cannot
   * be used.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nameAvailable?: boolean;
  /**
   * @member {NameAvailabilityReason} [reason] Gets the reason that a Batch
   * account name could not be used. The Reason element is only returned if
   * NameAvailable is false. Possible values include: 'Invalid',
   * 'AlreadyExists'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly reason?: NameAvailabilityReason;
  /**
   * @member {string} [message] Gets an error message explaining the Reason
   * value in more detail.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly message?: string;
}

/**
 * @interface
 * An interface representing ApplicationCreateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ApplicationCreateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {ApplicationCreateParameters} [parameters] The parameters for the
   * request.
   */
  parameters?: ApplicationCreateParameters;
}

/**
 * @interface
 * An interface representing ApplicationListOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ApplicationListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {number} [maxresults] The maximum number of items to return in the
   * response.
   */
  maxresults?: number;
}

/**
 * @interface
 * An interface representing CertificateListByBatchAccountOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface CertificateListByBatchAccountOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {number} [maxresults] The maximum number of items to return in the
   * response.
   */
  maxresults?: number;
  /**
   * @member {string} [select] Comma separated list of properties that should
   * be returned. e.g. "properties/provisioningState". Only top level
   * properties under properties/ are valid for selection.
   */
  select?: string;
  /**
   * @member {string} [filter] OData filter expression. Valid properties for
   * filtering are "properties/provisioningState",
   * "properties/provisioningStateTransitionTime", "name".
   */
  filter?: string;
}

/**
 * @interface
 * An interface representing CertificateCreateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface CertificateCreateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [ifMatch] The entity state (ETag) version of the
   * certificate to update. A value of "*" can be used to apply the operation
   * only if the certificate already exists. If omitted, this operation will
   * always be applied.
   */
  ifMatch?: string;
  /**
   * @member {string} [ifNoneMatch] Set to '*' to allow a new certificate to be
   * created, but to prevent updating an existing certificate. Other values
   * will be ignored.
   */
  ifNoneMatch?: string;
}

/**
 * @interface
 * An interface representing CertificateUpdateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface CertificateUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [ifMatch] The entity state (ETag) version of the
   * certificate to update. This value can be omitted or set to "*" to apply
   * the operation unconditionally.
   */
  ifMatch?: string;
}

/**
 * @interface
 * An interface representing CertificateBeginCreateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface CertificateBeginCreateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [ifMatch] The entity state (ETag) version of the
   * certificate to update. A value of "*" can be used to apply the operation
   * only if the certificate already exists. If omitted, this operation will
   * always be applied.
   */
  ifMatch?: string;
  /**
   * @member {string} [ifNoneMatch] Set to '*' to allow a new certificate to be
   * created, but to prevent updating an existing certificate. Other values
   * will be ignored.
   */
  ifNoneMatch?: string;
}

/**
 * @interface
 * An interface representing PoolListByBatchAccountOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface PoolListByBatchAccountOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {number} [maxresults] The maximum number of items to return in the
   * response.
   */
  maxresults?: number;
  /**
   * @member {string} [select] Comma separated list of properties that should
   * be returned. e.g. "properties/provisioningState". Only top level
   * properties under properties/ are valid for selection.
   */
  select?: string;
  /**
   * @member {string} [filter] OData filter expression. Valid properties for
   * filtering are:
   *
   * name
   * properties/allocationState
   * properties/allocationStateTransitionTime
   * properties/creationTime
   * properties/provisioningState
   * properties/provisioningStateTransitionTime
   * properties/lastModified
   * properties/vmSize
   * properties/interNodeCommunication
   * properties/scaleSettings/autoScale
   * properties/scaleSettings/fixedScale
   */
  filter?: string;
}

/**
 * @interface
 * An interface representing PoolCreateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface PoolCreateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [ifMatch] The entity state (ETag) version of the pool to
   * update. A value of "*" can be used to apply the operation only if the pool
   * already exists. If omitted, this operation will always be applied.
   */
  ifMatch?: string;
  /**
   * @member {string} [ifNoneMatch] Set to '*' to allow a new pool to be
   * created, but to prevent updating an existing pool. Other values will be
   * ignored.
   */
  ifNoneMatch?: string;
}

/**
 * @interface
 * An interface representing PoolUpdateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface PoolUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [ifMatch] The entity state (ETag) version of the pool to
   * update. This value can be omitted or set to "*" to apply the operation
   * unconditionally.
   */
  ifMatch?: string;
}

/**
 * @interface
 * An interface representing PoolBeginCreateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface PoolBeginCreateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [ifMatch] The entity state (ETag) version of the pool to
   * update. A value of "*" can be used to apply the operation only if the pool
   * already exists. If omitted, this operation will always be applied.
   */
  ifMatch?: string;
  /**
   * @member {string} [ifNoneMatch] Set to '*' to allow a new pool to be
   * created, but to prevent updating an existing pool. Other values will be
   * ignored.
   */
  ifNoneMatch?: string;
}

/**
 * @interface
 * An interface representing BatchManagementClientOptions.
 * @extends AzureServiceClientOptions
 */
export interface BatchManagementClientOptions extends AzureServiceClientOptions {
  /**
   * @member {string} [baseUri]
   */
  baseUri?: string;
}

/**
 * @interface
 * An interface representing BatchAccountCreateHeaders.
 * Defines headers for Create operation.
 *
 */
export interface BatchAccountCreateHeaders {
  /**
   * @member {string} [locationHeader] The URL of the resource used to check
   * the status of the asynchronous operation.
   */
  locationHeader: string;
  /**
   * @member {number} [retryAfter] Suggested delay to check the status of the
   * asynchronous operation. The value is an integer that specifies the delay
   * in seconds.
   */
  retryAfter: number;
}

/**
 * @interface
 * An interface representing BatchAccountDeleteHeaders.
 * Defines headers for Delete operation.
 *
 */
export interface BatchAccountDeleteHeaders {
  /**
   * @member {string} [location] The URL of the resource used to check the
   * status of the asynchronous operation.
   */
  location: string;
  /**
   * @member {number} [retryAfter] Suggested delay to check the status of the
   * asynchronous operation. The value is an integer that specifies the delay
   * in seconds.
   */
  retryAfter: number;
}

/**
 * @interface
 * An interface representing CertificateCreateHeaders.
 * Defines headers for Create operation.
 *
 */
export interface CertificateCreateHeaders {
  /**
   * @member {string} [eTag] The ETag HTTP response header. This is an opaque
   * string. You can use it to detect whether the resource has changed between
   * requests. In particular, you can pass the ETag to one of the If-Match or
   * If-None-Match headers.
   */
  eTag: string;
}

/**
 * @interface
 * An interface representing CertificateUpdateHeaders.
 * Defines headers for Update operation.
 *
 */
export interface CertificateUpdateHeaders {
  /**
   * @member {string} [eTag] The ETag HTTP response header. This is an opaque
   * string. You can use it to detect whether the resource has changed between
   * requests. In particular, you can pass the ETag to one of the If-Match or
   * If-None-Match headers.
   */
  eTag: string;
}

/**
 * @interface
 * An interface representing CertificateDeleteHeaders.
 * Defines headers for Delete operation.
 *
 */
export interface CertificateDeleteHeaders {
  /**
   * @member {string} [location] The URL of the resource used to check the
   * status of the asynchronous operation.
   */
  location: string;
  /**
   * @member {number} [retryAfter] Suggested delay to check the status of the
   * asynchronous operation. The value is an integer that represents the
   * seconds.
   */
  retryAfter: number;
}

/**
 * @interface
 * An interface representing CertificateGetHeaders.
 * Defines headers for Get operation.
 *
 */
export interface CertificateGetHeaders {
  /**
   * @member {string} [eTag] The ETag HTTP response header. This is an opaque
   * string. You can use it to detect whether the resource has changed between
   * requests. In particular, you can pass the ETag to one of the If-Match or
   * If-None-Match headers.
   */
  eTag: string;
}

/**
 * @interface
 * An interface representing CertificateCancelDeletionHeaders.
 * Defines headers for CancelDeletion operation.
 *
 */
export interface CertificateCancelDeletionHeaders {
  /**
   * @member {string} [eTag] The ETag HTTP response header. This is an opaque
   * string. You can use it to detect whether the resource has changed between
   * requests. In particular, you can pass the ETag to one of the If-Match or
   * If-None-Match headers.
   */
  eTag: string;
}

/**
 * @interface
 * An interface representing PoolCreateHeaders.
 * Defines headers for Create operation.
 *
 */
export interface PoolCreateHeaders {
  /**
   * @member {string} [eTag] The ETag HTTP response header. This is an opaque
   * string. You can use it to detect whether the resource has changed between
   * requests. In particular, you can pass the ETag to one of the If-Match or
   * If-None-Match headers.
   */
  eTag: string;
}

/**
 * @interface
 * An interface representing PoolUpdateHeaders.
 * Defines headers for Update operation.
 *
 */
export interface PoolUpdateHeaders {
  /**
   * @member {string} [eTag] The ETag HTTP response header. This is an opaque
   * string. You can use it to detect whether the resource has changed between
   * requests. In particular, you can pass the ETag to one of the If-Match or
   * If-None-Match headers.
   */
  eTag: string;
}

/**
 * @interface
 * An interface representing PoolDeleteHeaders.
 * Defines headers for Delete operation.
 *
 */
export interface PoolDeleteHeaders {
  /**
   * @member {string} [location] The URL of the resource used to check the
   * status of the asynchronous operation.
   */
  location: string;
  /**
   * @member {number} [retryAfter] Suggested delay to check the status of the
   * asynchronous operation. The value is an integer that represents the
   * seconds.
   */
  retryAfter: number;
}

/**
 * @interface
 * An interface representing PoolGetHeaders.
 * Defines headers for Get operation.
 *
 */
export interface PoolGetHeaders {
  /**
   * @member {string} [eTag] The ETag HTTP response header. This is an opaque
   * string. You can use it to detect whether the resource has changed between
   * requests. In particular, you can pass the ETag to one of the If-Match or
   * If-None-Match headers.
   */
  eTag: string;
}

/**
 * @interface
 * An interface representing PoolDisableAutoScaleHeaders.
 * Defines headers for DisableAutoScale operation.
 *
 */
export interface PoolDisableAutoScaleHeaders {
  /**
   * @member {string} [eTag] The ETag HTTP response header. This is an opaque
   * string. You can use it to detect whether the resource has changed between
   * requests. In particular, you can pass the ETag to one of the If-Match or
   * If-None-Match headers.
   */
  eTag: string;
}

/**
 * @interface
 * An interface representing PoolStopResizeHeaders.
 * Defines headers for StopResize operation.
 *
 */
export interface PoolStopResizeHeaders {
  /**
   * @member {string} [eTag] The ETag HTTP response header. This is an opaque
   * string. You can use it to detect whether the resource has changed between
   * requests. In particular, you can pass the ETag to one of the If-Match or
   * If-None-Match headers.
   */
  eTag: string;
}


/**
 * @interface
 * An interface representing the BatchAccountListResult.
 * Values returned by the List operation.
 *
 * @extends Array<BatchAccount>
 */
export interface BatchAccountListResult extends Array<BatchAccount> {
  /**
   * @member {string} [nextLink] The continuation token.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ListApplicationsResult.
 * The result of performing list applications.
 *
 * @extends Array<Application>
 */
export interface ListApplicationsResult extends Array<Application> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the OperationListResult.
 * @summary Result of the request to list REST API operations. It contains a
 * list of operations and a URL nextLink to get the next set of results.
 *
 * @extends Array<Operation>
 */
export interface OperationListResult extends Array<Operation> {
  /**
   * @member {string} [nextLink]
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ListCertificatesResult.
 * Values returned by the List operation.
 *
 * @extends Array<Certificate>
 */
export interface ListCertificatesResult extends Array<Certificate> {
  /**
   * @member {string} [nextLink] The continuation token.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ListPoolsResult.
 * Values returned by the List operation.
 *
 * @extends Array<Pool>
 */
export interface ListPoolsResult extends Array<Pool> {
  /**
   * @member {string} [nextLink] The continuation token.
   */
  nextLink?: string;
}

/**
 * Defines values for PoolAllocationMode.
 * Possible values include: 'BatchService', 'UserSubscription'
 * @readonly
 * @enum {string}
 */
export enum PoolAllocationMode {
  BatchService = 'BatchService',
  UserSubscription = 'UserSubscription',
}

/**
 * Defines values for ProvisioningState.
 * Possible values include: 'Invalid', 'Creating', 'Deleting', 'Succeeded',
 * 'Failed', 'Cancelled'
 * @readonly
 * @enum {string}
 */
export enum ProvisioningState {
  Invalid = 'Invalid',
  Creating = 'Creating',
  Deleting = 'Deleting',
  Succeeded = 'Succeeded',
  Failed = 'Failed',
  Cancelled = 'Cancelled',
}

/**
 * Defines values for AccountKeyType.
 * Possible values include: 'Primary', 'Secondary'
 * @readonly
 * @enum {string}
 */
export enum AccountKeyType {
  Primary = 'Primary',
  Secondary = 'Secondary',
}

/**
 * Defines values for PackageState.
 * Possible values include: 'Pending', 'Active', 'Unmapped'
 * @readonly
 * @enum {string}
 */
export enum PackageState {
  Pending = 'Pending',
  Active = 'Active',
  Unmapped = 'Unmapped',
}

/**
 * Defines values for CertificateFormat.
 * Possible values include: 'Pfx', 'Cer'
 * @readonly
 * @enum {string}
 */
export enum CertificateFormat {
  Pfx = 'Pfx',
  Cer = 'Cer',
}

/**
 * Defines values for CertificateProvisioningState.
 * Possible values include: 'Succeeded', 'Deleting', 'Failed'
 * @readonly
 * @enum {string}
 */
export enum CertificateProvisioningState {
  Succeeded = 'Succeeded',
  Deleting = 'Deleting',
  Failed = 'Failed',
}

/**
 * Defines values for PoolProvisioningState.
 * Possible values include: 'Succeeded', 'Deleting'
 * @readonly
 * @enum {string}
 */
export enum PoolProvisioningState {
  Succeeded = 'Succeeded',
  Deleting = 'Deleting',
}

/**
 * Defines values for AllocationState.
 * Possible values include: 'Steady', 'Resizing', 'Stopping'
 * @readonly
 * @enum {string}
 */
export enum AllocationState {
  Steady = 'Steady',
  Resizing = 'Resizing',
  Stopping = 'Stopping',
}

/**
 * Defines values for CachingType.
 * Possible values include: 'None', 'ReadOnly', 'ReadWrite'
 * @readonly
 * @enum {string}
 */
export enum CachingType {
  None = 'None',
  ReadOnly = 'ReadOnly',
  ReadWrite = 'ReadWrite',
}

/**
 * Defines values for StorageAccountType.
 * Possible values include: 'Standard_LRS', 'Premium_LRS'
 * @readonly
 * @enum {string}
 */
export enum StorageAccountType {
  StandardLRS = 'Standard_LRS',
  PremiumLRS = 'Premium_LRS',
}

/**
 * Defines values for ComputeNodeDeallocationOption.
 * Possible values include: 'Requeue', 'Terminate', 'TaskCompletion',
 * 'RetainedData'
 * @readonly
 * @enum {string}
 */
export enum ComputeNodeDeallocationOption {
  Requeue = 'Requeue',
  Terminate = 'Terminate',
  TaskCompletion = 'TaskCompletion',
  RetainedData = 'RetainedData',
}

/**
 * Defines values for InterNodeCommunicationState.
 * Possible values include: 'Enabled', 'Disabled'
 * @readonly
 * @enum {string}
 */
export enum InterNodeCommunicationState {
  Enabled = 'Enabled',
  Disabled = 'Disabled',
}

/**
 * Defines values for InboundEndpointProtocol.
 * Possible values include: 'TCP', 'UDP'
 * @readonly
 * @enum {string}
 */
export enum InboundEndpointProtocol {
  TCP = 'TCP',
  UDP = 'UDP',
}

/**
 * Defines values for NetworkSecurityGroupRuleAccess.
 * Possible values include: 'Allow', 'Deny'
 * @readonly
 * @enum {string}
 */
export enum NetworkSecurityGroupRuleAccess {
  Allow = 'Allow',
  Deny = 'Deny',
}

/**
 * Defines values for ComputeNodeFillType.
 * Possible values include: 'Spread', 'Pack'
 * @readonly
 * @enum {string}
 */
export enum ComputeNodeFillType {
  Spread = 'Spread',
  Pack = 'Pack',
}

/**
 * Defines values for ElevationLevel.
 * Possible values include: 'NonAdmin', 'Admin'
 * @readonly
 * @enum {string}
 */
export enum ElevationLevel {
  NonAdmin = 'NonAdmin',
  Admin = 'Admin',
}

/**
 * Defines values for AutoUserScope.
 * Possible values include: 'Task', 'Pool'
 * @readonly
 * @enum {string}
 */
export enum AutoUserScope {
  Task = 'Task',
  Pool = 'Pool',
}

/**
 * Defines values for CertificateStoreLocation.
 * Possible values include: 'CurrentUser', 'LocalMachine'
 * @readonly
 * @enum {string}
 */
export enum CertificateStoreLocation {
  CurrentUser = 'CurrentUser',
  LocalMachine = 'LocalMachine',
}

/**
 * Defines values for CertificateVisibility.
 * Possible values include: 'StartTask', 'Task', 'RemoteUser'
 * @readonly
 * @enum {string}
 */
export enum CertificateVisibility {
  StartTask = 'StartTask',
  Task = 'Task',
  RemoteUser = 'RemoteUser',
}

/**
 * Defines values for NameAvailabilityReason.
 * Possible values include: 'Invalid', 'AlreadyExists'
 * @readonly
 * @enum {string}
 */
export enum NameAvailabilityReason {
  Invalid = 'Invalid',
  AlreadyExists = 'AlreadyExists',
}

/**
 * Contains response data for the create operation.
 */
export type BatchAccountCreateResponse = BatchAccount & BatchAccountCreateHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: BatchAccountCreateHeaders;
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BatchAccount;
    };
};

/**
 * Contains response data for the update operation.
 */
export type BatchAccountUpdateResponse = BatchAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BatchAccount;
    };
};

/**
 * Contains response data for the deleteMethod operation.
 */
export type BatchAccountDeleteResponse = BatchAccountDeleteHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: BatchAccountDeleteHeaders;
    };
};

/**
 * Contains response data for the get operation.
 */
export type BatchAccountGetResponse = BatchAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BatchAccount;
    };
};

/**
 * Contains response data for the list operation.
 */
export type BatchAccountListResponse = BatchAccountListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BatchAccountListResult;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type BatchAccountListByResourceGroupResponse = BatchAccountListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BatchAccountListResult;
    };
};

/**
 * Contains response data for the regenerateKey operation.
 */
export type BatchAccountRegenerateKeyResponse = BatchAccountKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BatchAccountKeys;
    };
};

/**
 * Contains response data for the getKeys operation.
 */
export type BatchAccountGetKeysResponse = BatchAccountKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BatchAccountKeys;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type BatchAccountListNextResponse = BatchAccountListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BatchAccountListResult;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type BatchAccountListByResourceGroupNextResponse = BatchAccountListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BatchAccountListResult;
    };
};

/**
 * Contains response data for the create operation.
 */
export type ApplicationPackageCreateResponse = ApplicationPackage & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationPackage;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ApplicationPackageGetResponse = ApplicationPackage & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationPackage;
    };
};

/**
 * Contains response data for the create operation.
 */
export type ApplicationCreateResponse = Application & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Application;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ApplicationGetResponse = Application & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Application;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ApplicationListResponse = ListApplicationsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListApplicationsResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ApplicationListNextResponse = ListApplicationsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListApplicationsResult;
    };
};

/**
 * Contains response data for the getQuotas operation.
 */
export type LocationGetQuotasResponse = BatchLocationQuota & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BatchLocationQuota;
    };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type LocationCheckNameAvailabilityResponse = CheckNameAvailabilityResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CheckNameAvailabilityResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the listByBatchAccount operation.
 */
export type CertificateListByBatchAccountResponse = ListCertificatesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListCertificatesResult;
    };
};

/**
 * Contains response data for the create operation.
 */
export type CertificateCreateResponse = Certificate & CertificateCreateHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: CertificateCreateHeaders;
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Certificate;
    };
};

/**
 * Contains response data for the update operation.
 */
export type CertificateUpdateResponse = Certificate & CertificateUpdateHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: CertificateUpdateHeaders;
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Certificate;
    };
};

/**
 * Contains response data for the deleteMethod operation.
 */
export type CertificateDeleteResponse = CertificateDeleteHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: CertificateDeleteHeaders;
    };
};

/**
 * Contains response data for the get operation.
 */
export type CertificateGetResponse = Certificate & CertificateGetHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: CertificateGetHeaders;
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Certificate;
    };
};

/**
 * Contains response data for the cancelDeletion operation.
 */
export type CertificateCancelDeletionResponse = Certificate & CertificateCancelDeletionHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: CertificateCancelDeletionHeaders;
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Certificate;
    };
};

/**
 * Contains response data for the listByBatchAccountNext operation.
 */
export type CertificateListByBatchAccountNextResponse = ListCertificatesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListCertificatesResult;
    };
};

/**
 * Contains response data for the listByBatchAccount operation.
 */
export type PoolListByBatchAccountResponse = ListPoolsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListPoolsResult;
    };
};

/**
 * Contains response data for the create operation.
 */
export type PoolCreateResponse = Pool & PoolCreateHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PoolCreateHeaders;
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Pool;
    };
};

/**
 * Contains response data for the update operation.
 */
export type PoolUpdateResponse = Pool & PoolUpdateHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PoolUpdateHeaders;
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Pool;
    };
};

/**
 * Contains response data for the deleteMethod operation.
 */
export type PoolDeleteResponse = PoolDeleteHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PoolDeleteHeaders;
    };
};

/**
 * Contains response data for the get operation.
 */
export type PoolGetResponse = Pool & PoolGetHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PoolGetHeaders;
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Pool;
    };
};

/**
 * Contains response data for the disableAutoScale operation.
 */
export type PoolDisableAutoScaleResponse = Pool & PoolDisableAutoScaleHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PoolDisableAutoScaleHeaders;
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Pool;
    };
};

/**
 * Contains response data for the stopResize operation.
 */
export type PoolStopResizeResponse = Pool & PoolStopResizeHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PoolStopResizeHeaders;
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Pool;
    };
};

/**
 * Contains response data for the listByBatchAccountNext operation.
 */
export type PoolListByBatchAccountNextResponse = ListPoolsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListPoolsResult;
    };
};
