/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as msRestAzure from "ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/jobCollectionsMappers";
import * as Parameters from "../models/parameters";
import { SchedulerManagementClientContext } from "../schedulerManagementClientContext";

/** Class representing a JobCollections. */
export class JobCollections {
  private readonly client: SchedulerManagementClientContext;

  /**
   * Create a JobCollections.
   * @param {SchedulerManagementClientContext} client Reference to the service client.
   */
  constructor(client: SchedulerManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets all job collections under specified subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobCollectionsListBySubscriptionResponse>
   */
  listBySubscription(options?: msRest.RequestOptionsBase): Promise<Models.JobCollectionsListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: msRest.ServiceCallback<Models.JobCollectionListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.JobCollectionListResult>): void;
  listBySubscription(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.JobCollectionListResult>): Promise<Models.JobCollectionsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.JobCollectionsListBySubscriptionResponse>;
  }

  /**
   * Gets all job collections under specified resource group.
   * @param resourceGroupName The resource group name.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobCollectionsListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobCollectionsListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.JobCollectionListResult>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.JobCollectionListResult>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.JobCollectionListResult>): Promise<Models.JobCollectionsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.JobCollectionsListByResourceGroupResponse>;
  }

  /**
   * Gets a job collection.
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobCollectionsGetResponse>
   */
  get(resourceGroupName: string, jobCollectionName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobCollectionsGetResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param callback The callback
   */
  get(resourceGroupName: string, jobCollectionName: string, callback: msRest.ServiceCallback<Models.JobCollectionDefinition>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, jobCollectionName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.JobCollectionDefinition>): void;
  get(resourceGroupName: string, jobCollectionName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.JobCollectionDefinition>): Promise<Models.JobCollectionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        jobCollectionName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.JobCollectionsGetResponse>;
  }

  /**
   * Provisions a new job collection or updates an existing job collection.
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param jobCollection The job collection definition.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobCollectionsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, jobCollectionName: string, jobCollection: Models.JobCollectionDefinition, options?: msRest.RequestOptionsBase): Promise<Models.JobCollectionsCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param jobCollection The job collection definition.
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, jobCollectionName: string, jobCollection: Models.JobCollectionDefinition, callback: msRest.ServiceCallback<Models.JobCollectionDefinition>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param jobCollection The job collection definition.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, jobCollectionName: string, jobCollection: Models.JobCollectionDefinition, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.JobCollectionDefinition>): void;
  createOrUpdate(resourceGroupName: string, jobCollectionName: string, jobCollection: Models.JobCollectionDefinition, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.JobCollectionDefinition>): Promise<Models.JobCollectionsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        jobCollectionName,
        jobCollection,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.JobCollectionsCreateOrUpdateResponse>;
  }

  /**
   * Patches an existing job collection.
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param jobCollection The job collection definition.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobCollectionsPatchResponse>
   */
  patch(resourceGroupName: string, jobCollectionName: string, jobCollection: Models.JobCollectionDefinition, options?: msRest.RequestOptionsBase): Promise<Models.JobCollectionsPatchResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param jobCollection The job collection definition.
   * @param callback The callback
   */
  patch(resourceGroupName: string, jobCollectionName: string, jobCollection: Models.JobCollectionDefinition, callback: msRest.ServiceCallback<Models.JobCollectionDefinition>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param jobCollection The job collection definition.
   * @param options The optional parameters
   * @param callback The callback
   */
  patch(resourceGroupName: string, jobCollectionName: string, jobCollection: Models.JobCollectionDefinition, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.JobCollectionDefinition>): void;
  patch(resourceGroupName: string, jobCollectionName: string, jobCollection: Models.JobCollectionDefinition, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.JobCollectionDefinition>): Promise<Models.JobCollectionsPatchResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        jobCollectionName,
        jobCollection,
        options
      },
      patchOperationSpec,
      callback) as Promise<Models.JobCollectionsPatchResponse>;
  }

  /**
   * Deletes a job collection.
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, jobCollectionName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,jobCollectionName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Enables all of the jobs in the job collection.
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  enable(resourceGroupName: string, jobCollectionName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginEnable(resourceGroupName,jobCollectionName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Disables all of the jobs in the job collection.
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  disable(resourceGroupName: string, jobCollectionName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDisable(resourceGroupName,jobCollectionName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Deletes a job collection.
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, jobCollectionName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        jobCollectionName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Enables all of the jobs in the job collection.
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginEnable(resourceGroupName: string, jobCollectionName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        jobCollectionName,
        options
      },
      beginEnableOperationSpec,
      options);
  }

  /**
   * Disables all of the jobs in the job collection.
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDisable(resourceGroupName: string, jobCollectionName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        jobCollectionName,
        options
      },
      beginDisableOperationSpec,
      options);
  }

  /**
   * Gets all job collections under specified subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobCollectionsListBySubscriptionNextResponse>
   */
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.JobCollectionsListBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.JobCollectionListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.JobCollectionListResult>): void;
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.JobCollectionListResult>): Promise<Models.JobCollectionsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBySubscriptionNextOperationSpec,
      callback) as Promise<Models.JobCollectionsListBySubscriptionNextResponse>;
  }

  /**
   * Gets all job collections under specified resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobCollectionsListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.JobCollectionsListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.JobCollectionListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.JobCollectionListResult>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.JobCollectionListResult>): Promise<Models.JobCollectionsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.JobCollectionsListByResourceGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Scheduler/jobCollections",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.JobCollectionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.JobCollectionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobCollectionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.JobCollectionDefinition
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobCollectionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "jobCollection",
    mapper: {
      ...Mappers.JobCollectionDefinition,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.JobCollectionDefinition
    },
    201: {
      bodyMapper: Mappers.JobCollectionDefinition
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobCollectionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "jobCollection",
    mapper: {
      ...Mappers.JobCollectionDefinition,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.JobCollectionDefinition
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobCollectionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginEnableOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/enable",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobCollectionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDisableOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/disable",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobCollectionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listBySubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.JobCollectionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.JobCollectionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
