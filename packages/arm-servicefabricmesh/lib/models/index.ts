/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "ms-rest-azure-js";
import * as msRest from "ms-rest-js";

export { BaseResource, CloudError };


/**
 * @interface
 * An interface representing Resource.
 * The resource model definition for Azure Resource Manager resource.
 *
 * @extends BaseResource
 */
export interface Resource extends BaseResource {
  /**
   * @member {string} [id] Fully qualified identifier for the resource. Ex -
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] The name of the resource
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [type] The type of the resource. Ex-
   * Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string} [location] The geo-location where the resource lives
   */
  location?: string;
}

/**
 * @interface
 * An interface representing ProxyResource.
 * The resource model definition for Azure Resource Manager proxy resource. It
 * will have everything other than required location and tags.
 *
 * @extends Resource
 */
export interface ProxyResource extends Resource {
}

/**
 * @interface
 * An interface representing ManagedProxyResource.
 * The resource model definition for Azure Resource Manager proxy resource. It
 * will have everything other than required location and tags. This proxy
 * resource is explicitly created or updated by including it in the parent
 * resource.
 *
 * @extends BaseResource
 */
export interface ManagedProxyResource extends BaseResource {
  /**
   * @member {string} [id] Fully qualified identifier for the resource. Ex -
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] The name of the resource
   */
  name?: string;
  /**
   * @member {string} [type] The type of the resource. Ex-
   * Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
}

/**
 * @interface
 * An interface representing TrackedResource.
 * The resource model definition for Azure Resource Manager tracked top-level
 * resource.
 *
 * @extends Resource
 */
export interface TrackedResource extends Resource {
  /**
   * @member {{ [propertyName: string]: string }} [tags] Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing ProvisionedResourceProperties.
 * Describes common properties of a provisioned resource.
 *
 */
export interface ProvisionedResourceProperties {
  /**
   * @member {string} [provisioningState] State of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
}

/**
 * @interface
 * An interface representing Layer4IngressConfig.
 * Describes the layer4 configuration for public connectivity for this network.
 *
 */
export interface Layer4IngressConfig {
  /**
   * @member {string} [name] Layer4 ingress config name.
   */
  name?: string;
  /**
   * @member {number} [publicPort] Specifies the public port at which the
   * service endpoint below needs to be exposed.
   */
  publicPort?: number;
  /**
   * @member {string} [applicationName] The application name which contains the
   * service to be exposed.
   */
  applicationName?: string;
  /**
   * @member {string} [serviceName] The service whose endpoint needs to be
   * exposed at the public port.
   */
  serviceName?: string;
  /**
   * @member {string} [endpointName] The service endpoint that needs to be
   * exposed.
   */
  endpointName?: string;
}

/**
 * @interface
 * An interface representing IngressConfig.
 * Describes public connectivity configuration for the network.
 *
 */
export interface IngressConfig {
  /**
   * @member {IngressQoSLevel} [qosLevel] The QoS tier for ingress. Possible
   * values include: 'Bronze'
   */
  qosLevel?: IngressQoSLevel;
  /**
   * @member {Layer4IngressConfig[]} [layer4] Configuration for layer4 public
   * connectivity for this network.
   */
  layer4?: Layer4IngressConfig[];
  /**
   * @member {string} [publicIPAddress] The public IP address for reaching this
   * network.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly publicIPAddress?: string;
}

/**
 * @interface
 * An interface representing NetworkResourceDescription.
 * This type describes a network resource.
 *
 * @extends TrackedResource
 */
export interface NetworkResourceDescription extends TrackedResource {
  /**
   * @member {string} [provisioningState] State of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [description] User readable description of the network.
   */
  description?: string;
  /**
   * @member {string} addressPrefix the address prefix for this network.
   */
  addressPrefix: string;
  /**
   * @member {IngressConfig} [ingressConfig] Configuration for public
   * connectivity for this network.
   */
  ingressConfig?: IngressConfig;
}

/**
 * @interface
 * An interface representing NetworkProperties.
 * Describes a network.
 *
 */
export interface NetworkProperties {
  /**
   * @member {string} [description] User readable description of the network.
   */
  description?: string;
  /**
   * @member {string} addressPrefix the address prefix for this network.
   */
  addressPrefix: string;
  /**
   * @member {IngressConfig} [ingressConfig] Configuration for public
   * connectivity for this network.
   */
  ingressConfig?: IngressConfig;
}

/**
 * @interface
 * An interface representing VolumeProviderParametersAzureFile.
 * This type describes a volume provided by an Azure Files file share.
 *
 */
export interface VolumeProviderParametersAzureFile {
  /**
   * @member {string} accountName Name of the Azure storage account for the
   * File Share.
   */
  accountName: string;
  /**
   * @member {string} [accountKey] Access key of the Azure storage account for
   * the File Share.
   */
  accountKey?: string;
  /**
   * @member {string} shareName Name of the Azure Files file share that
   * provides storage for the volume.
   */
  shareName: string;
}

/**
 * @interface
 * An interface representing VolumeResourceDescription.
 * This type describes a volume resource.
 *
 * @extends TrackedResource
 */
export interface VolumeResourceDescription extends TrackedResource {
  /**
   * @member {string} [provisioningState] State of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [description] User readable description of the volume.
   */
  description?: string;
  /**
   * @member {VolumeProviderParametersAzureFile} [azureFileParameters] This
   * type describes a volume provided by an Azure Files file share.
   */
  azureFileParameters?: VolumeProviderParametersAzureFile;
}

/**
 * @interface
 * An interface representing VolumeProperties.
 * This type describes properties of a volume resource.
 *
 */
export interface VolumeProperties {
  /**
   * @member {string} [description] User readable description of the volume.
   */
  description?: string;
  /**
   * @member {VolumeProviderParametersAzureFile} [azureFileParameters] This
   * type describes a volume provided by an Azure Files file share.
   */
  azureFileParameters?: VolumeProviderParametersAzureFile;
}

/**
 * @interface
 * An interface representing ServiceResourceDescription.
 * This type describes a service resource.
 *
 * @extends ManagedProxyResource
 */
export interface ServiceResourceDescription extends ManagedProxyResource {
  /**
   * @member {OperatingSystemTypes} osType The Operating system type required
   * by the code in service.
   * . Possible values include: 'Linux', 'Windows'
   */
  osType: OperatingSystemTypes;
  /**
   * @member {ContainerCodePackageProperties[]} codePackages Describes the set
   * of code packages that forms the service. A code package describes the
   * container and the properties for running it. All the code packages are
   * started together on the same host and share the same context (network,
   * process etc.).
   */
  codePackages: ContainerCodePackageProperties[];
  /**
   * @member {NetworkRef[]} [networkRefs] The names of the private networks
   * that this service needs to be part of.
   */
  networkRefs?: NetworkRef[];
  /**
   * @member {DiagnosticsRef} [diagnostics] Reference to sinks in
   * DiagnosticsDescription.
   */
  diagnostics?: DiagnosticsRef;
  /**
   * @member {string} [description] User readable description of the service.
   */
  description?: string;
  /**
   * @member {number} [replicaCount] The number of replicas of the service to
   * create. Defaults to 1 if not specified.
   */
  replicaCount?: number;
  /**
   * @member {HealthState} [healthState] The health state of a resource such as
   * Application, Service, or Network. Possible values include: 'Invalid',
   * 'Ok', 'Warning', 'Error', 'Unknown'
   */
  healthState?: HealthState;
  /**
   * @member {ServiceResourceStatus} [status] Represents the status of the
   * service. Possible values include: 'Unknown', 'Active', 'Upgrading',
   * 'Deleting', 'Creating', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly status?: ServiceResourceStatus;
}

/**
 * Contains the possible cases for DiagnosticsSinkProperties.
 */
export type DiagnosticsSinkPropertiesUnion = DiagnosticsSinkProperties | AzureInternalMonitoringPipelineSinkDescription;

/**
 * @interface
 * An interface representing DiagnosticsSinkProperties.
 * Properties of a DiagnosticsSink.
 *
 */
export interface DiagnosticsSinkProperties {
  /**
   * @member {string} kind Polymorphic Discriminator
   */
  kind: "DiagnosticsSinkProperties";
  /**
   * @member {string} [name] Name of the sink. This value is referenced by
   * DiagnosticsReferenceDescription
   */
  name?: string;
  /**
   * @member {string} [description] A description of the sink.
   */
  description?: string;
}

/**
 * @interface
 * An interface representing DiagnosticsDescription.
 * Describes the diagnostics options available
 *
 */
export interface DiagnosticsDescription {
  /**
   * @member {DiagnosticsSinkPropertiesUnion[]} [sinks] List of supported sinks
   * that can be referenced.
   */
  sinks?: DiagnosticsSinkPropertiesUnion[];
  /**
   * @member {boolean} [enabled] Status of whether or not sinks are enabled.
   */
  enabled?: boolean;
  /**
   * @member {string[]} [defaultSinkRefs] The sinks to be used if diagnostics
   * is enabled. Sink choices can be overridden at the service and code package
   * level.
   */
  defaultSinkRefs?: string[];
}

/**
 * @interface
 * An interface representing ApplicationResourceDescription.
 * This type describes an application resource.
 *
 * @extends TrackedResource
 */
export interface ApplicationResourceDescription extends TrackedResource {
  /**
   * @member {string} [provisioningState] State of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [description] User readable description of the
   * application.
   */
  description?: string;
  /**
   * @member {string} [debugParams] Internal use.
   */
  debugParams?: string;
  /**
   * @member {ServiceResourceDescription[]} [services] describes the services
   * in the application.
   */
  services?: ServiceResourceDescription[];
  /**
   * @member {HealthState} [healthState] Describes the health state of an
   * application resource. Possible values include: 'Invalid', 'Ok', 'Warning',
   * 'Error', 'Unknown'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly healthState?: HealthState;
  /**
   * @member {string} [unhealthyEvaluation] When the application's health state
   * is not 'Ok', this additional details from service fabric Health Manager
   * for the user to know why the application is marked unhealthy.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly unhealthyEvaluation?: string;
  /**
   * @member {ApplicationResourceStatus} [status] Status of the application
   * resource. Possible values include: 'Invalid', 'Ready', 'Upgrading',
   * 'Creating', 'Deleting', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly status?: ApplicationResourceStatus;
  /**
   * @member {string} [statusDetails] Gives additional information about the
   * current status of the application deployment.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly statusDetails?: string;
  /**
   * @member {string[]} [serviceNames] Names of the services in the
   * application.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly serviceNames?: string[];
  /**
   * @member {DiagnosticsDescription} [diagnostics] Describes the diagnostics
   * definition and usage for an application resource.
   */
  diagnostics?: DiagnosticsDescription;
}

/**
 * @interface
 * An interface representing ApplicationProperties.
 * This type describes properties of an application resource.
 *
 */
export interface ApplicationProperties {
  /**
   * @member {string} [description] User readable description of the
   * application.
   */
  description?: string;
  /**
   * @member {string} [debugParams] Internal use.
   */
  debugParams?: string;
  /**
   * @member {ServiceResourceDescription[]} [services] describes the services
   * in the application.
   */
  services?: ServiceResourceDescription[];
  /**
   * @member {HealthState} [healthState] Describes the health state of an
   * application resource. Possible values include: 'Invalid', 'Ok', 'Warning',
   * 'Error', 'Unknown'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly healthState?: HealthState;
  /**
   * @member {string} [unhealthyEvaluation] When the application's health state
   * is not 'Ok', this additional details from service fabric Health Manager
   * for the user to know why the application is marked unhealthy.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly unhealthyEvaluation?: string;
  /**
   * @member {ApplicationResourceStatus} [status] Status of the application
   * resource. Possible values include: 'Invalid', 'Ready', 'Upgrading',
   * 'Creating', 'Deleting', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly status?: ApplicationResourceStatus;
  /**
   * @member {string} [statusDetails] Gives additional information about the
   * current status of the application deployment.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly statusDetails?: string;
  /**
   * @member {string[]} [serviceNames] Names of the services in the
   * application.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly serviceNames?: string[];
  /**
   * @member {DiagnosticsDescription} [diagnostics] Describes the diagnostics
   * definition and usage for an application resource.
   */
  diagnostics?: DiagnosticsDescription;
}

/**
 * @interface
 * An interface representing ContainerState.
 * The container state.
 *
 */
export interface ContainerState {
  /**
   * @member {string} [state] The state of this container
   */
  state?: string;
  /**
   * @member {Date} [startTime] Date/time when the container state started.
   */
  startTime?: Date;
  /**
   * @member {string} [exitCode] The container exit code.
   */
  exitCode?: string;
  /**
   * @member {Date} [finishTime] Date/time when the container state finished.
   */
  finishTime?: Date;
  /**
   * @member {string} [detailStatus] Human-readable status of this state.
   */
  detailStatus?: string;
}

/**
 * @interface
 * An interface representing ContainerEvent.
 * A container event.
 *
 */
export interface ContainerEvent {
  /**
   * @member {string} [name] The name of the container event.
   */
  name?: string;
  /**
   * @member {number} [count] The count of the event.
   */
  count?: number;
  /**
   * @member {string} [firstTimestamp] Date/time of the first event.
   */
  firstTimestamp?: string;
  /**
   * @member {string} [lastTimestamp] Date/time of the last event.
   */
  lastTimestamp?: string;
  /**
   * @member {string} [message] The event message
   */
  message?: string;
  /**
   * @member {string} [type] The event type.
   */
  type?: string;
}

/**
 * @interface
 * An interface representing ContainerInstanceView.
 * Runtime information of a container instance.
 *
 */
export interface ContainerInstanceView {
  /**
   * @member {number} [restartCount] The number of times the container has been
   * restarted.
   */
  restartCount?: number;
  /**
   * @member {ContainerState} [currentState] Current container instance state.
   */
  currentState?: ContainerState;
  /**
   * @member {ContainerState} [previousState] Previous container instance
   * state.
   */
  previousState?: ContainerState;
  /**
   * @member {ContainerEvent[]} [events] The events of this container instance.
   */
  events?: ContainerEvent[];
}

/**
 * @interface
 * An interface representing ContainerLabel.
 * Describes a container label.
 *
 */
export interface ContainerLabel {
  /**
   * @member {string} name The name of the container label.
   */
  name: string;
  /**
   * @member {string} value The value of the container label.
   */
  value: string;
}

/**
 * @interface
 * An interface representing ContainerLogs.
 * The logs of the container.
 *
 */
export interface ContainerLogs {
  /**
   * @member {string} [content] content of the log.
   */
  content?: string;
}

/**
 * @interface
 * An interface representing ImageRegistryCredential.
 * Image registry credential.
 *
 */
export interface ImageRegistryCredential {
  /**
   * @member {string} server Docker image registry server, without protocol
   * such as `http` and `https`.
   */
  server: string;
  /**
   * @member {string} username The username for the private registry.
   */
  username: string;
  /**
   * @member {string} [password] The password for the private registry.
   */
  password?: string;
}

/**
 * @interface
 * An interface representing ResourceLimits.
 * This type describes the resource limits for a given container. It describes
 * the most amount of resources a container is allowed to use before being
 * restarted.
 *
 */
export interface ResourceLimits {
  /**
   * @member {number} [memoryInGB] The memory limit in GB.
   */
  memoryInGB?: number;
  /**
   * @member {number} [cpu] CPU limits in cores. At present, only full cores
   * are supported.
   */
  cpu?: number;
}

/**
 * @interface
 * An interface representing ResourceRequests.
 * This type describes the requested resources for a given container. It
 * describes the least amount of resources required for the container. A
 * container can consume more than requested resources up to the specified
 * limits before being restarted. Currently, the requested resources are
 * treated as limits.
 *
 *
 */
export interface ResourceRequests {
  /**
   * @member {number} memoryInGB The memory request in GB for this container.
   */
  memoryInGB: number;
  /**
   * @member {number} cpu Requested number of CPU cores. At present, only full
   * cores are supported.
   */
  cpu: number;
}

/**
 * @interface
 * An interface representing ResourceRequirements.
 * This type describes the resource requirements for a container or a service.
 *
 */
export interface ResourceRequirements {
  /**
   * @member {ResourceRequests} requests Describes the requested resources for
   * a given container.
   */
  requests: ResourceRequests;
  /**
   * @member {ResourceLimits} [limits] Describes the maximum limits on the
   * resources for a given container.
   */
  limits?: ResourceLimits;
}

/**
 * @interface
 * An interface representing AvailableOperationDisplay.
 * An operation available at the listed Azure resource provider.
 *
 */
export interface AvailableOperationDisplay {
  /**
   * @member {string} [provider] Name of the operation provider.
   */
  provider?: string;
  /**
   * @member {string} [resource] Name of the resource on which the operation is
   * available.
   */
  resource?: string;
  /**
   * @member {string} [operation] Name of the available operation.
   */
  operation?: string;
  /**
   * @member {string} [description] Description of the available operation.
   */
  description?: string;
}

/**
 * @interface
 * An interface representing OperationResult.
 * List of operations available at the listed Azure resource provider.
 *
 */
export interface OperationResult {
  /**
   * @member {string} [name] The name of the operation.
   */
  name?: string;
  /**
   * @member {AvailableOperationDisplay} [display] The object that represents
   * the operation.
   */
  display?: AvailableOperationDisplay;
  /**
   * @member {string} [origin] Origin result
   */
  origin?: string;
  /**
   * @member {string} [nextLink] The URL to use for getting the next set of
   * results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing ErrorModel.
 * The error details.
 *
 */
export interface ErrorModel {
  /**
   * @member {string} [code] The error code.
   */
  code?: string;
  /**
   * @member {string} [message] The error message.
   */
  message?: string;
}

/**
 * @interface
 * An interface representing EnvironmentVariable.
 * Describes an environment variable for the container.
 *
 */
export interface EnvironmentVariable {
  /**
   * @member {string} [name] The name of the environment variable.
   */
  name?: string;
  /**
   * @member {string} [value] The value of the environment variable.
   */
  value?: string;
}

/**
 * @interface
 * An interface representing Setting.
 * Describes a setting for the container.
 *
 */
export interface Setting {
  /**
   * @member {string} [name] The name of the setting.
   */
  name?: string;
  /**
   * @member {string} [value] The value of the setting.
   */
  value?: string;
}

/**
 * @interface
 * An interface representing EndpointProperties.
 * Describes a container endpoint.
 *
 */
export interface EndpointProperties {
  /**
   * @member {string} name The name of the endpoint.
   */
  name: string;
  /**
   * @member {number} [port] Port used by the container.
   */
  port?: number;
}

/**
 * @interface
 * An interface representing ContainerVolume.
 * Describes how a volume is attached to a container.
 *
 */
export interface ContainerVolume {
  /**
   * @member {string} name Name of the volume.
   */
  name: string;
  /**
   * @member {boolean} [readOnly] The flag indicating whether the volume is
   * read only. Default is 'false'.
   */
  readOnly?: boolean;
  /**
   * @member {string} destinationPath The path within the container at which
   * the volume should be mounted. Only valid path characters are allowed.
   */
  destinationPath: string;
}

/**
 * @interface
 * An interface representing DiagnosticsRef.
 * Reference to sinks in DiagnosticsDescription.
 *
 */
export interface DiagnosticsRef {
  /**
   * @member {boolean} [enabled] Status of whether or not sinks are enabled.
   */
  enabled?: boolean;
  /**
   * @member {string[]} [sinkRefs] List of sinks to be used if enabled.
   * References the list of sinks in DiagnosticsDescription.
   */
  sinkRefs?: string[];
}

/**
 * @interface
 * An interface representing ContainerCodePackageProperties.
 * Describes a container and its runtime properties.
 *
 */
export interface ContainerCodePackageProperties {
  /**
   * @member {string} name The name of the code package.
   */
  name: string;
  /**
   * @member {string} image The Container image to use.
   */
  image: string;
  /**
   * @member {ImageRegistryCredential} [imageRegistryCredential] Image registry
   * credential.
   */
  imageRegistryCredential?: ImageRegistryCredential;
  /**
   * @member {string} [entrypoint] Override for the default entry point in the
   * container.
   */
  entrypoint?: string;
  /**
   * @member {string[]} [commands] Command array to execute within the
   * container in exec form.
   */
  commands?: string[];
  /**
   * @member {EnvironmentVariable[]} [environmentVariables] The environment
   * variables to set in this container
   */
  environmentVariables?: EnvironmentVariable[];
  /**
   * @member {Setting[]} [settings] The settings to set in this container. The
   * setting file path can be fetched from environment variable
   * "Fabric_SettingPath". The path for Windows container is "C:\\secrets". The
   * path for Linux container is "/var/secrets".
   */
  settings?: Setting[];
  /**
   * @member {ContainerLabel[]} [labels] The labels to set in this container.
   */
  labels?: ContainerLabel[];
  /**
   * @member {EndpointProperties[]} [endpoints] The endpoints exposed by this
   * container.
   */
  endpoints?: EndpointProperties[];
  /**
   * @member {ResourceRequirements} resources This type describes the resource
   * requirements for a container or a service.
   */
  resources: ResourceRequirements;
  /**
   * @member {ContainerVolume[]} [volumeRefs] The volumes to be attached to the
   * container.
   */
  volumeRefs?: ContainerVolume[];
  /**
   * @member {ContainerInstanceView} [instanceView] Runtime information of a
   * container instance.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly instanceView?: ContainerInstanceView;
  /**
   * @member {DiagnosticsRef} [diagnostics] Reference to sinks in
   * DiagnosticsDescription.
   */
  diagnostics?: DiagnosticsRef;
}

/**
 * @interface
 * An interface representing ServiceReplicaProperties.
 * Describes the properties of a service replica.
 *
 */
export interface ServiceReplicaProperties {
  /**
   * @member {OperatingSystemTypes} osType The Operating system type required
   * by the code in service.
   * . Possible values include: 'Linux', 'Windows'
   */
  osType: OperatingSystemTypes;
  /**
   * @member {ContainerCodePackageProperties[]} codePackages Describes the set
   * of code packages that forms the service. A code package describes the
   * container and the properties for running it. All the code packages are
   * started together on the same host and share the same context (network,
   * process etc.).
   */
  codePackages: ContainerCodePackageProperties[];
  /**
   * @member {NetworkRef[]} [networkRefs] The names of the private networks
   * that this service needs to be part of.
   */
  networkRefs?: NetworkRef[];
  /**
   * @member {DiagnosticsRef} [diagnostics] Reference to sinks in
   * DiagnosticsDescription.
   */
  diagnostics?: DiagnosticsRef;
}

/**
 * @interface
 * An interface representing ServiceReplicaDescription.
 * This type describes a replica of a service resource.
 *
 * @extends ServiceReplicaProperties
 */
export interface ServiceReplicaDescription extends ServiceReplicaProperties {
  /**
   * @member {string} [replicaName] Name of the replica.
   */
  replicaName?: string;
}

/**
 * @interface
 * An interface representing NetworkRef.
 * Describes a network reference in a service.
 *
 */
export interface NetworkRef {
  /**
   * @member {string} [name] Name of the network.
   */
  name?: string;
}

/**
 * @interface
 * An interface representing AzureInternalMonitoringPipelineSinkDescription.
 * Diagnostics settings for Geneva.
 *
 */
export interface AzureInternalMonitoringPipelineSinkDescription {
  /**
   * @member {string} kind Polymorphic Discriminator
   */
  kind: "AzureInternalMonitoringPipeline";
  /**
   * @member {string} [name] Name of the sink. This value is referenced by
   * DiagnosticsReferenceDescription
   */
  name?: string;
  /**
   * @member {string} [description] A description of the sink.
   */
  description?: string;
  /**
   * @member {string} [accountName] Azure Internal monitoring pipeline account.
   */
  accountName?: string;
  /**
   * @member {string} [namespace] Azure Internal monitoring pipeline account
   * namespace.
   */
  namespace?: string;
  /**
   * @member {string} [maConfigUrl] Azure Internal monitoring agent
   * configuration.
   */
  maConfigUrl?: string;
  /**
   * @member {any} [fluentdConfigUrl] Azure Internal monitoring agent fluentd
   * configuration.
   */
  fluentdConfigUrl?: any;
  /**
   * @member {string} [autoKeyConfigUrl] Azure Internal monitoring pipeline
   * autokey associated with the certificate.
   */
  autoKeyConfigUrl?: string;
}

/**
 * @interface
 * An interface representing CodePackageGetContainerLogOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface CodePackageGetContainerLogOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {number} [tail] Number of lines to show from the end of the logs.
   * Default is 100.
   */
  tail?: number;
}

/**
 * @interface
 * An interface representing ServiceFabricMeshManagementClientOptions.
 * @extends AzureServiceClientOptions
 */
export interface ServiceFabricMeshManagementClientOptions extends AzureServiceClientOptions {
  /**
   * @member {string} [baseUri]
   */
  baseUri?: string;
}


/**
 * @interface
 * An interface representing the ApplicationResourceDescriptionList.
 * A pageable list of application resources.
 *
 * @extends Array<ApplicationResourceDescription>
 */
export interface ApplicationResourceDescriptionList extends Array<ApplicationResourceDescription> {
  /**
   * @member {string} [nextLink] URI to fetch the next page of the list.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ServiceList.
 * A pageable list of all services in an application.
 *
 *
 * @extends Array<ServiceResourceDescription>
 */
export interface ServiceList extends Array<ServiceResourceDescription> {
  /**
   * @member {string} [nextLink] URI to fetch the next page of the list.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ServiceReplicaList.
 * A pageable list of replicas of a service resource.
 *
 *
 * @extends Array<ServiceReplicaDescription>
 */
export interface ServiceReplicaList extends Array<ServiceReplicaDescription> {
  /**
   * @member {string} [nextLink] URI to fetch the next page of the list.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the OperationListResult.
 * Describes the result of the request to list Service Fabric operations.
 *
 * @extends Array<OperationResult>
 */
export interface OperationListResult extends Array<OperationResult> {
  /**
   * @member {string} [nextLink] URL to get the next set of operation list
   * results if there are any.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the NetworkResourceDescriptionList.
 * A pageable list of network resources.
 *
 * @extends Array<NetworkResourceDescription>
 */
export interface NetworkResourceDescriptionList extends Array<NetworkResourceDescription> {
  /**
   * @member {string} [nextLink] URI to fetch the next page of the list.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the VolumeResourceDescriptionList.
 * A pageable list of volume resources.
 *
 * @extends Array<VolumeResourceDescription>
 */
export interface VolumeResourceDescriptionList extends Array<VolumeResourceDescription> {
  /**
   * @member {string} [nextLink] URI to fetch the next page of the list.
   */
  nextLink?: string;
}

/**
 * Defines values for IngressQoSLevel.
 * Possible values include: 'Bronze'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: IngressQoSLevel =
 * <IngressQoSLevel>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum IngressQoSLevel {
  Bronze = 'Bronze',
}

/**
 * Defines values for HealthState.
 * Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: HealthState =
 * <HealthState>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum HealthState {
  /**
   * Indicates an invalid health state. All Service Fabric enumerations have
   * the invalid type. The value is zero.
   */
  Invalid = 'Invalid',
  /**
   * Indicates the health state is okay. The value is 1.
   */
  Ok = 'Ok',
  /**
   * Indicates the health state is at a warning level. The value is 2.
   */
  Warning = 'Warning',
  /**
   * Indicates the health state is at an error level. Error health state should
   * be investigated, as they can impact the correct functionality of the
   * cluster. The value is 3.
   */
  Error = 'Error',
  /**
   * Indicates an unknown health status. The value is 65535.
   */
  Unknown = 'Unknown',
}

/**
 * Defines values for ServiceResourceStatus.
 * Possible values include: 'Unknown', 'Active', 'Upgrading', 'Deleting',
 * 'Creating', 'Failed'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ServiceResourceStatus =
 * <ServiceResourceStatus>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum ServiceResourceStatus {
  Unknown = 'Unknown',
  Active = 'Active',
  Upgrading = 'Upgrading',
  Deleting = 'Deleting',
  Creating = 'Creating',
  Failed = 'Failed',
}

/**
 * Defines values for ApplicationResourceStatus.
 * Possible values include: 'Invalid', 'Ready', 'Upgrading', 'Creating',
 * 'Deleting', 'Failed'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ApplicationResourceStatus =
 * <ApplicationResourceStatus>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum ApplicationResourceStatus {
  Invalid = 'Invalid',
  Ready = 'Ready',
  Upgrading = 'Upgrading',
  Creating = 'Creating',
  Deleting = 'Deleting',
  Failed = 'Failed',
}

/**
 * Defines values for OperatingSystemTypes.
 * Possible values include: 'Linux', 'Windows'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: OperatingSystemTypes =
 * <OperatingSystemTypes>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum OperatingSystemTypes {
  Linux = 'Linux',
  Windows = 'Windows',
}

/**
 * Defines values for DiagnosticsSinkKind.
 * Possible values include: 'Invalid', 'AzureInternalMonitoringPipeline'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: DiagnosticsSinkKind =
 * <DiagnosticsSinkKind>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum DiagnosticsSinkKind {
  /**
   * Indicates an invalid sink kind. All Service Fabric enumerations have the
   * invalid type.
   */
  Invalid = 'Invalid',
  /**
   * Diagnostics settings for Geneva.
   */
  AzureInternalMonitoringPipeline = 'AzureInternalMonitoringPipeline',
}

/**
 * Contains response data for the create operation.
 */
export type ApplicationCreateResponse = ApplicationResourceDescription & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationResourceDescription;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ApplicationGetResponse = ApplicationResourceDescription & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationResourceDescription;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type ApplicationListByResourceGroupResponse = ApplicationResourceDescriptionList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationResourceDescriptionList;
    };
};

/**
 * Contains response data for the listBySubscription operation.
 */
export type ApplicationListBySubscriptionResponse = ApplicationResourceDescriptionList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationResourceDescriptionList;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type ApplicationListByResourceGroupNextResponse = ApplicationResourceDescriptionList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationResourceDescriptionList;
    };
};

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type ApplicationListBySubscriptionNextResponse = ApplicationResourceDescriptionList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationResourceDescriptionList;
    };
};

/**
 * Contains response data for the listByApplicationName operation.
 */
export type ServiceListByApplicationNameResponse = ServiceList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ServiceGetResponse = ServiceResourceDescription & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceResourceDescription;
    };
};

/**
 * Contains response data for the listByApplicationNameNext operation.
 */
export type ServiceListByApplicationNameNextResponse = ServiceList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceList;
    };
};

/**
 * Contains response data for the listByServiceName operation.
 */
export type ReplicaListByServiceNameResponse = ServiceReplicaList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceReplicaList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ReplicaGetResponse = ServiceReplicaDescription & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceReplicaDescription;
    };
};

/**
 * Contains response data for the listByServiceNameNext operation.
 */
export type ReplicaListByServiceNameNextResponse = ServiceReplicaList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceReplicaList;
    };
};

/**
 * Contains response data for the getContainerLog operation.
 */
export type CodePackageGetContainerLogResponse = ContainerLogs & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ContainerLogs;
    };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the create operation.
 */
export type NetworkCreateResponse = NetworkResourceDescription & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkResourceDescription;
    };
};

/**
 * Contains response data for the get operation.
 */
export type NetworkGetResponse = NetworkResourceDescription & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkResourceDescription;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type NetworkListByResourceGroupResponse = NetworkResourceDescriptionList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkResourceDescriptionList;
    };
};

/**
 * Contains response data for the listBySubscription operation.
 */
export type NetworkListBySubscriptionResponse = NetworkResourceDescriptionList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkResourceDescriptionList;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type NetworkListByResourceGroupNextResponse = NetworkResourceDescriptionList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkResourceDescriptionList;
    };
};

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type NetworkListBySubscriptionNextResponse = NetworkResourceDescriptionList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkResourceDescriptionList;
    };
};

/**
 * Contains response data for the create operation.
 */
export type VolumeCreateResponse = VolumeResourceDescription & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VolumeResourceDescription;
    };
};

/**
 * Contains response data for the get operation.
 */
export type VolumeGetResponse = VolumeResourceDescription & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VolumeResourceDescription;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type VolumeListByResourceGroupResponse = VolumeResourceDescriptionList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VolumeResourceDescriptionList;
    };
};

/**
 * Contains response data for the listBySubscription operation.
 */
export type VolumeListBySubscriptionResponse = VolumeResourceDescriptionList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VolumeResourceDescriptionList;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type VolumeListByResourceGroupNextResponse = VolumeResourceDescriptionList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VolumeResourceDescriptionList;
    };
};

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type VolumeListBySubscriptionNextResponse = VolumeResourceDescriptionList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VolumeResourceDescriptionList;
    };
};
