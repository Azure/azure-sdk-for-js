/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const CustomRPRouteDefinition: msRest.CompositeMapper = {
  serializedName: "CustomRPRouteDefinition",
  type: {
    name: "Composite",
    className: "CustomRPRouteDefinition",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      endpoint: {
        required: true,
        serializedName: "endpoint",
        constraints: {
          Pattern: /^https:\/\/.+/
        },
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomRPActionRouteDefinition: msRest.CompositeMapper = {
  serializedName: "CustomRPActionRouteDefinition",
  type: {
    name: "Composite",
    className: "CustomRPActionRouteDefinition",
    modelProperties: {
      ...CustomRPRouteDefinition.type.modelProperties,
      routingType: {
        serializedName: "routingType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomRPResourceTypeRouteDefinition: msRest.CompositeMapper = {
  serializedName: "CustomRPResourceTypeRouteDefinition",
  type: {
    name: "Composite",
    className: "CustomRPResourceTypeRouteDefinition",
    modelProperties: {
      ...CustomRPRouteDefinition.type.modelProperties,
      routingType: {
        serializedName: "routingType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomRPValidations: msRest.CompositeMapper = {
  serializedName: "CustomRPValidations",
  type: {
    name: "Composite",
    className: "CustomRPValidations",
    modelProperties: {
      validationType: {
        serializedName: "validationType",
        type: {
          name: "String"
        }
      },
      specification: {
        required: true,
        serializedName: "specification",
        constraints: {
          Pattern: /^https:\/\/raw.githubusercontent.com\/.+/
        },
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: msRest.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const CustomRPManifest: msRest.CompositeMapper = {
  serializedName: "CustomRPManifest",
  type: {
    name: "Composite",
    className: "CustomRPManifest",
    modelProperties: {
      ...Resource.type.modelProperties,
      actions: {
        serializedName: "properties.actions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CustomRPActionRouteDefinition"
            }
          }
        }
      },
      resourceTypes: {
        serializedName: "properties.resourceTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CustomRPResourceTypeRouteDefinition"
            }
          }
        }
      },
      validations: {
        serializedName: "properties.validations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CustomRPValidations"
            }
          }
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceProviderOperationDisplay: msRest.CompositeMapper = {
  serializedName: "ResourceProviderOperation_display",
  type: {
    name: "Composite",
    className: "ResourceProviderOperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceProviderOperation: msRest.CompositeMapper = {
  serializedName: "ResourceProviderOperation",
  type: {
    name: "Composite",
    className: "ResourceProviderOperation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "ResourceProviderOperationDisplay"
        }
      }
    }
  }
};

export const ResourceProvidersUpdate: msRest.CompositeMapper = {
  serializedName: "ResourceProvidersUpdate",
  type: {
    name: "Composite",
    className: "ResourceProvidersUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ErrorDefinition: msRest.CompositeMapper = {
  serializedName: "ErrorDefinition",
  type: {
    name: "Composite",
    className: "ErrorDefinition",
    modelProperties: {
      code: {
        readOnly: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      details: {
        readOnly: true,
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDefinition"
            }
          }
        }
      }
    }
  }
};

export const ErrorResponse: msRest.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDefinition"
        }
      }
    }
  }
};

export const ResourceProviderOperationList: msRest.CompositeMapper = {
  serializedName: "ResourceProviderOperationList",
  type: {
    name: "Composite",
    className: "ResourceProviderOperationList",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceProviderOperation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListByCustomRPManifest: msRest.CompositeMapper = {
  serializedName: "ListByCustomRPManifest",
  type: {
    name: "Composite",
    className: "ListByCustomRPManifest",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CustomRPManifest"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};
