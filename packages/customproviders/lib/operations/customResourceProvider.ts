/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/customResourceProviderMappers";
import * as Parameters from "../models/parameters";
import { customprovidersClientContext } from "../customprovidersClientContext";

/** Class representing a CustomResourceProvider. */
export class CustomResourceProvider {
  private readonly client: customprovidersClientContext;

  /**
   * Create a CustomResourceProvider.
   * @param {customprovidersClientContext} client Reference to the service client.
   */
  constructor(client: customprovidersClientContext) {
    this.client = client;
  }

  /**
   * Creates or updates the custom resource provider.
   * @param resourceGroupName The name of the resource group.
   * @param resourceProviderName The name of the resource provider.
   * @param resourceProvider The parameters required to create or update a custom resource provider
   * definition.
   * @param [options] The optional parameters
   * @returns Promise<Models.CustomResourceProviderCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, resourceProviderName: string, resourceProvider: Models.CustomRPManifest, options?: msRest.RequestOptionsBase): Promise<Models.CustomResourceProviderCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,resourceProviderName,resourceProvider,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.CustomResourceProviderCreateOrUpdateResponse>;
  }

  /**
   * Deletes the custom resource provider.
   * @param resourceGroupName The name of the resource group.
   * @param resourceProviderName The name of the resource provider.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, resourceProviderName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,resourceProviderName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Gets the custom resource provider manifest.
   * @param resourceGroupName The name of the resource group.
   * @param resourceProviderName The name of the resource provider.
   * @param [options] The optional parameters
   * @returns Promise<Models.CustomResourceProviderGetResponse>
   */
  get(resourceGroupName: string, resourceProviderName: string, options?: msRest.RequestOptionsBase): Promise<Models.CustomResourceProviderGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param resourceProviderName The name of the resource provider.
   * @param callback The callback
   */
  get(resourceGroupName: string, resourceProviderName: string, callback: msRest.ServiceCallback<Models.CustomRPManifest>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param resourceProviderName The name of the resource provider.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, resourceProviderName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CustomRPManifest>): void;
  get(resourceGroupName: string, resourceProviderName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CustomRPManifest>, callback?: msRest.ServiceCallback<Models.CustomRPManifest>): Promise<Models.CustomResourceProviderGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceProviderName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.CustomResourceProviderGetResponse>;
  }

  /**
   * Updates an existing custom resource provider. The only value that can be updated via PATCH
   * currently is the tags.
   * @param resourceGroupName The name of the resource group.
   * @param resourceProviderName The name of the resource provider.
   * @param [options] The optional parameters
   * @returns Promise<Models.CustomResourceProviderUpdateResponse>
   */
  update(resourceGroupName: string, resourceProviderName: string, options?: Models.CustomResourceProviderUpdateOptionalParams): Promise<Models.CustomResourceProviderUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param resourceProviderName The name of the resource provider.
   * @param callback The callback
   */
  update(resourceGroupName: string, resourceProviderName: string, callback: msRest.ServiceCallback<Models.CustomRPManifest>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param resourceProviderName The name of the resource provider.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, resourceProviderName: string, options: Models.CustomResourceProviderUpdateOptionalParams, callback: msRest.ServiceCallback<Models.CustomRPManifest>): void;
  update(resourceGroupName: string, resourceProviderName: string, options?: Models.CustomResourceProviderUpdateOptionalParams | msRest.ServiceCallback<Models.CustomRPManifest>, callback?: msRest.ServiceCallback<Models.CustomRPManifest>): Promise<Models.CustomResourceProviderUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceProviderName,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.CustomResourceProviderUpdateResponse>;
  }

  /**
   * Gets all the custom resource providers within a resource group.
   * @param resourceGroupName The name of the resource group.
   * @param [options] The optional parameters
   * @returns Promise<Models.CustomResourceProviderListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.CustomResourceProviderListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.ListByCustomRPManifest>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ListByCustomRPManifest>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ListByCustomRPManifest>, callback?: msRest.ServiceCallback<Models.ListByCustomRPManifest>): Promise<Models.CustomResourceProviderListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.CustomResourceProviderListByResourceGroupResponse>;
  }

  /**
   * Gets all the custom resource providers within a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.CustomResourceProviderListBySubscriptionResponse>
   */
  listBySubscription(options?: msRest.RequestOptionsBase): Promise<Models.CustomResourceProviderListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: msRest.ServiceCallback<Models.ListByCustomRPManifest>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ListByCustomRPManifest>): void;
  listBySubscription(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ListByCustomRPManifest>, callback?: msRest.ServiceCallback<Models.ListByCustomRPManifest>): Promise<Models.CustomResourceProviderListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.CustomResourceProviderListBySubscriptionResponse>;
  }

  /**
   * Creates or updates the custom resource provider.
   * @param resourceGroupName The name of the resource group.
   * @param resourceProviderName The name of the resource provider.
   * @param resourceProvider The parameters required to create or update a custom resource provider
   * definition.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, resourceProviderName: string, resourceProvider: Models.CustomRPManifest, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        resourceProviderName,
        resourceProvider,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Deletes the custom resource provider.
   * @param resourceGroupName The name of the resource group.
   * @param resourceProviderName The name of the resource provider.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, resourceProviderName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        resourceProviderName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Gets all the custom resource providers within a resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.CustomResourceProviderListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.CustomResourceProviderListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ListByCustomRPManifest>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ListByCustomRPManifest>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ListByCustomRPManifest>, callback?: msRest.ServiceCallback<Models.ListByCustomRPManifest>): Promise<Models.CustomResourceProviderListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.CustomResourceProviderListByResourceGroupNextResponse>;
  }

  /**
   * Gets all the custom resource providers within a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.CustomResourceProviderListBySubscriptionNextResponse>
   */
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.CustomResourceProviderListBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ListByCustomRPManifest>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ListByCustomRPManifest>): void;
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ListByCustomRPManifest>, callback?: msRest.ServiceCallback<Models.ListByCustomRPManifest>): Promise<Models.CustomResourceProviderListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBySubscriptionNextOperationSpec,
      callback) as Promise<Models.CustomResourceProviderListBySubscriptionNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/{resourceProviderName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceProviderName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CustomRPManifest
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/{resourceProviderName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceProviderName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      tags: [
        "options",
        "tags"
      ]
    },
    mapper: {
      ...Mappers.ResourceProvidersUpdate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CustomRPManifest
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListByCustomRPManifest
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.CustomProviders/resourceProviders",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListByCustomRPManifest
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/{resourceProviderName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceProviderName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "resourceProvider",
    mapper: {
      ...Mappers.CustomRPManifest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CustomRPManifest
    },
    201: {
      bodyMapper: Mappers.CustomRPManifest
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/{resourceProviderName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceProviderName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListByCustomRPManifest
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listBySubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListByCustomRPManifest
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
