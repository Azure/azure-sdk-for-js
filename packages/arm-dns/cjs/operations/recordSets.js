"use strict";
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const msRest = __importStar(require("ms-rest-js"));
const Mappers = __importStar(require("../models/recordSetsMappers"));
const Parameters = __importStar(require("../models/parameters"));
/** Class representing a RecordSets. */
class RecordSets {
    /**
     * Create a RecordSets.
     * @param {DnsManagementClientContext} client Reference to the service client.
     */
    constructor(client) {
        this.client = client;
    }
    update(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            zoneName,
            relativeRecordSetName,
            recordType,
            parameters,
            options
        }, updateOperationSpec, callback);
    }
    createOrUpdate(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            zoneName,
            relativeRecordSetName,
            recordType,
            parameters,
            options
        }, createOrUpdateOperationSpec, callback);
    }
    deleteMethod(resourceGroupName, zoneName, relativeRecordSetName, recordType, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            zoneName,
            relativeRecordSetName,
            recordType,
            options
        }, deleteMethodOperationSpec, callback);
    }
    get(resourceGroupName, zoneName, relativeRecordSetName, recordType, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            zoneName,
            relativeRecordSetName,
            recordType,
            options
        }, getOperationSpec, callback);
    }
    listByType(resourceGroupName, zoneName, recordType, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            zoneName,
            recordType,
            options
        }, listByTypeOperationSpec, callback);
    }
    listByDnsZone(resourceGroupName, zoneName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            zoneName,
            options
        }, listByDnsZoneOperationSpec, callback);
    }
    listAllByDnsZone(resourceGroupName, zoneName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            zoneName,
            options
        }, listAllByDnsZoneOperationSpec, callback);
    }
    listByTypeNext(nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink,
            options
        }, listByTypeNextOperationSpec, callback);
    }
    listByDnsZoneNext(nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink,
            options
        }, listByDnsZoneNextOperationSpec, callback);
    }
    listAllByDnsZoneNext(nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink,
            options
        }, listAllByDnsZoneNextOperationSpec, callback);
    }
}
exports.RecordSets = RecordSets;
// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const updateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.zoneName,
        Parameters.relativeRecordSetName,
        Parameters.recordType,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifMatch,
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: Object.assign({}, Mappers.RecordSet, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.RecordSet
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const createOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.zoneName,
        Parameters.relativeRecordSetName,
        Parameters.recordType,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifMatch,
        Parameters.ifNoneMatch,
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: Object.assign({}, Mappers.RecordSet, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.RecordSet
        },
        201: {
            bodyMapper: Mappers.RecordSet
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.zoneName,
        Parameters.relativeRecordSetName,
        Parameters.recordType,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifMatch,
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.zoneName,
        Parameters.relativeRecordSetName,
        Parameters.recordType,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RecordSet
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const listByTypeOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.zoneName,
        Parameters.recordType,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.top,
        Parameters.recordsetnamesuffix,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RecordSetListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const listByDnsZoneOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/recordsets",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.zoneName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.top,
        Parameters.recordsetnamesuffix,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RecordSetListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const listAllByDnsZoneOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/all",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.zoneName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.top,
        Parameters.recordSetNameSuffix,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RecordSetListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const listByTypeNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RecordSetListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const listByDnsZoneNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RecordSetListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const listAllByDnsZoneNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RecordSetListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
//# sourceMappingURL=recordSets.js.map