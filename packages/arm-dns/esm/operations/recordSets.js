/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as msRest from "ms-rest-js";
import * as Mappers from "../models/recordSetsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a RecordSets. */
var RecordSets = /** @class */ (function () {
    /**
     * Create a RecordSets.
     * @param {DnsManagementClientContext} client Reference to the service client.
     */
    function RecordSets(client) {
        this.client = client;
    }
    RecordSets.prototype.update = function (resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            zoneName: zoneName,
            relativeRecordSetName: relativeRecordSetName,
            recordType: recordType,
            parameters: parameters,
            options: options
        }, updateOperationSpec, callback);
    };
    RecordSets.prototype.createOrUpdate = function (resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            zoneName: zoneName,
            relativeRecordSetName: relativeRecordSetName,
            recordType: recordType,
            parameters: parameters,
            options: options
        }, createOrUpdateOperationSpec, callback);
    };
    RecordSets.prototype.deleteMethod = function (resourceGroupName, zoneName, relativeRecordSetName, recordType, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            zoneName: zoneName,
            relativeRecordSetName: relativeRecordSetName,
            recordType: recordType,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    RecordSets.prototype.get = function (resourceGroupName, zoneName, relativeRecordSetName, recordType, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            zoneName: zoneName,
            relativeRecordSetName: relativeRecordSetName,
            recordType: recordType,
            options: options
        }, getOperationSpec, callback);
    };
    RecordSets.prototype.listByType = function (resourceGroupName, zoneName, recordType, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            zoneName: zoneName,
            recordType: recordType,
            options: options
        }, listByTypeOperationSpec, callback);
    };
    RecordSets.prototype.listByDnsZone = function (resourceGroupName, zoneName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            zoneName: zoneName,
            options: options
        }, listByDnsZoneOperationSpec, callback);
    };
    RecordSets.prototype.listAllByDnsZone = function (resourceGroupName, zoneName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            zoneName: zoneName,
            options: options
        }, listAllByDnsZoneOperationSpec, callback);
    };
    RecordSets.prototype.listByTypeNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByTypeNextOperationSpec, callback);
    };
    RecordSets.prototype.listByDnsZoneNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByDnsZoneNextOperationSpec, callback);
    };
    RecordSets.prototype.listAllByDnsZoneNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listAllByDnsZoneNextOperationSpec, callback);
    };
    return RecordSets;
}());
export { RecordSets };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var updateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.zoneName,
        Parameters.relativeRecordSetName,
        Parameters.recordType,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifMatch,
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign({}, Mappers.RecordSet, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.RecordSet
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var createOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.zoneName,
        Parameters.relativeRecordSetName,
        Parameters.recordType,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifMatch,
        Parameters.ifNoneMatch,
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign({}, Mappers.RecordSet, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.RecordSet
        },
        201: {
            bodyMapper: Mappers.RecordSet
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.zoneName,
        Parameters.relativeRecordSetName,
        Parameters.recordType,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifMatch,
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.zoneName,
        Parameters.relativeRecordSetName,
        Parameters.recordType,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RecordSet
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByTypeOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.zoneName,
        Parameters.recordType,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.top,
        Parameters.recordsetnamesuffix,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RecordSetListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByDnsZoneOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/recordsets",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.zoneName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.top,
        Parameters.recordsetnamesuffix,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RecordSetListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listAllByDnsZoneOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/all",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.zoneName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.top,
        Parameters.recordSetNameSuffix,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RecordSetListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByTypeNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RecordSetListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByDnsZoneNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RecordSetListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listAllByDnsZoneNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RecordSetListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=recordSets.js.map