/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as msRest from "ms-rest-js";
import * as Mappers from "../models/dnsResourceReferenceOperationsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a DnsResourceReferenceOperations. */
var DnsResourceReferenceOperations = /** @class */ (function () {
    /**
     * Create a DnsResourceReferenceOperations.
     * @param {DnsManagementClientContext} client Reference to the service client.
     */
    function DnsResourceReferenceOperations(client) {
        this.client = client;
    }
    DnsResourceReferenceOperations.prototype.getByTargetResources = function (parameters, options, callback) {
        return this.client.sendOperationRequest({
            parameters: parameters,
            options: options
        }, getByTargetResourcesOperationSpec, callback);
    };
    return DnsResourceReferenceOperations;
}());
export { DnsResourceReferenceOperations };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getByTargetResourcesOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/getDnsResourceReference",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign({}, Mappers.DnsResourceReferenceRequest, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.DnsResourceReferenceResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=dnsResourceReferenceOperations.js.map