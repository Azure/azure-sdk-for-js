/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as msRestAzure from "ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/virtualMachinesMappers";
import * as Parameters from "../models/parameters";
import { ComputeManagementClientContext } from "../computeManagementClientContext";

/** Class representing a VirtualMachines. */
export class VirtualMachines {
  private readonly client: ComputeManagementClientContext;

  /**
   * Create a VirtualMachines.
   * @param {ComputeManagementClientContext} client Reference to the service client.
   */
  constructor(client: ComputeManagementClientContext) {
    this.client = client;
  }


  /**
   * Captures the VM by copying virtual hard disks of the VM and outputs a template that can be used
   * to create similar VMs.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {VirtualMachineCaptureParameters} parameters Parameters supplied to the Capture Virtual
   * Machine operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  capture(resourceGroupName: string, vmName: string, parameters: Models.VirtualMachineCaptureParameters, options?: msRest.RequestOptionsBase): Promise<Models.VirtualMachinesCaptureResponse> {
    return this.beginCapture(resourceGroupName, vmName, parameters, options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VirtualMachinesCaptureResponse>;
  }


  /**
   * The operation to create or update a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {VirtualMachine} parameters Parameters supplied to the Create Virtual Machine operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  createOrUpdate(resourceGroupName: string, vmName: string, parameters: Models.VirtualMachine, options?: msRest.RequestOptionsBase): Promise<Models.VirtualMachinesCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName, vmName, parameters, options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VirtualMachinesCreateOrUpdateResponse>;
  }


  /**
   * The operation to update a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {VirtualMachineUpdate} parameters Parameters supplied to the Update Virtual Machine
   * operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  update(resourceGroupName: string, vmName: string, parameters: Models.VirtualMachineUpdate, options?: msRest.RequestOptionsBase): Promise<Models.VirtualMachinesUpdateResponse> {
    return this.beginUpdate(resourceGroupName, vmName, parameters, options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VirtualMachinesUpdateResponse>;
  }


  /**
   * The operation to delete a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  deleteMethod(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName, vmName, options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Retrieves information about the model view or the instance view of a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {VirtualMachinesGetOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  get(resourceGroupName: string, vmName: string): Promise<Models.VirtualMachinesGetResponse>;
  get(resourceGroupName: string, vmName: string, options: Models.VirtualMachinesGetOptionalParams): Promise<Models.VirtualMachinesGetResponse>;
  get(resourceGroupName: string, vmName: string, callback: msRest.ServiceCallback<Models.VirtualMachine>): void;
  get(resourceGroupName: string, vmName: string, options: Models.VirtualMachinesGetOptionalParams, callback: msRest.ServiceCallback<Models.VirtualMachine>): void;
  get(resourceGroupName: string, vmName: string, options?: Models.VirtualMachinesGetOptionalParams, callback?: msRest.ServiceCallback<Models.VirtualMachine>): Promise<Models.VirtualMachinesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        vmName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.VirtualMachinesGetResponse>;
  }

  /**
   * Retrieves information about the run-time state of a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  instanceView(resourceGroupName: string, vmName: string): Promise<Models.VirtualMachinesInstanceViewResponse>;
  instanceView(resourceGroupName: string, vmName: string, options: msRest.RequestOptionsBase): Promise<Models.VirtualMachinesInstanceViewResponse>;
  instanceView(resourceGroupName: string, vmName: string, callback: msRest.ServiceCallback<Models.VirtualMachineInstanceView>): void;
  instanceView(resourceGroupName: string, vmName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VirtualMachineInstanceView>): void;
  instanceView(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.VirtualMachineInstanceView>): Promise<Models.VirtualMachinesInstanceViewResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        vmName,
        options
      },
      instanceViewOperationSpec,
      callback) as Promise<Models.VirtualMachinesInstanceViewResponse>;
  }


  /**
   * Converts virtual machine disks from blob-based to managed disks. Virtual machine must be
   * stop-deallocated before invoking this operation.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  convertToManagedDisks(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginConvertToManagedDisks(resourceGroupName, vmName, options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }


  /**
   * Shuts down the virtual machine and releases the compute resources. You are not billed for the
   * compute resources that this virtual machine uses.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  deallocate(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeallocate(resourceGroupName, vmName, options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Sets the state of the virtual machine to generalized.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  generalize(resourceGroupName: string, vmName: string): Promise<msRest.RestResponse>;
  generalize(resourceGroupName: string, vmName: string, options: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  generalize(resourceGroupName: string, vmName: string, callback: msRest.ServiceCallback<void>): void;
  generalize(resourceGroupName: string, vmName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  generalize(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        vmName,
        options
      },
      generalizeOperationSpec,
      callback);
  }

  /**
   * Lists all of the virtual machines in the specified resource group. Use the nextLink property in
   * the response to get the next page of virtual machines.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  list(resourceGroupName: string): Promise<Models.VirtualMachinesListResponse>;
  list(resourceGroupName: string, options: msRest.RequestOptionsBase): Promise<Models.VirtualMachinesListResponse>;
  list(resourceGroupName: string, callback: msRest.ServiceCallback<Models.VirtualMachineListResult>): void;
  list(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VirtualMachineListResult>): void;
  list(resourceGroupName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.VirtualMachineListResult>): Promise<Models.VirtualMachinesListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.VirtualMachinesListResponse>;
  }

  /**
   * Lists all of the virtual machines in the specified subscription. Use the nextLink property in
   * the response to get the next page of virtual machines.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  listAll(): Promise<Models.VirtualMachinesListAllResponse>;
  listAll(options: msRest.RequestOptionsBase): Promise<Models.VirtualMachinesListAllResponse>;
  listAll(callback: msRest.ServiceCallback<Models.VirtualMachineListResult>): void;
  listAll(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VirtualMachineListResult>): void;
  listAll(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.VirtualMachineListResult>): Promise<Models.VirtualMachinesListAllResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listAllOperationSpec,
      callback) as Promise<Models.VirtualMachinesListAllResponse>;
  }

  /**
   * Lists all available virtual machine sizes to which the specified virtual machine can be resized.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  listAvailableSizes(resourceGroupName: string, vmName: string): Promise<Models.VirtualMachinesListAvailableSizesResponse>;
  listAvailableSizes(resourceGroupName: string, vmName: string, options: msRest.RequestOptionsBase): Promise<Models.VirtualMachinesListAvailableSizesResponse>;
  listAvailableSizes(resourceGroupName: string, vmName: string, callback: msRest.ServiceCallback<Models.VirtualMachineSizeListResult>): void;
  listAvailableSizes(resourceGroupName: string, vmName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VirtualMachineSizeListResult>): void;
  listAvailableSizes(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.VirtualMachineSizeListResult>): Promise<Models.VirtualMachinesListAvailableSizesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        vmName,
        options
      },
      listAvailableSizesOperationSpec,
      callback) as Promise<Models.VirtualMachinesListAvailableSizesResponse>;
  }


  /**
   * The operation to power off (stop) a virtual machine. The virtual machine can be restarted with
   * the same provisioned resources. You are still charged for this virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  powerOff(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginPowerOff(resourceGroupName, vmName, options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }


  /**
   * The operation to restart a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  restart(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginRestart(resourceGroupName, vmName, options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }


  /**
   * The operation to start a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  start(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginStart(resourceGroupName, vmName, options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }


  /**
   * The operation to redeploy a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  redeploy(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginRedeploy(resourceGroupName, vmName, options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }


  /**
   * The operation to perform maintenance on a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  performMaintenance(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginPerformMaintenance(resourceGroupName, vmName, options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }


  /**
   * Run command on the VM.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {RunCommandInput} parameters Parameters supplied to the Run command operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  runCommand(resourceGroupName: string, vmName: string, parameters: Models.RunCommandInput, options?: msRest.RequestOptionsBase): Promise<Models.VirtualMachinesRunCommandResponse> {
    return this.beginRunCommand(resourceGroupName, vmName, parameters, options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VirtualMachinesRunCommandResponse>;
  }

  /**
   * Captures the VM by copying virtual hard disks of the VM and outputs a template that can be used
   * to create similar VMs.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {VirtualMachineCaptureParameters} parameters Parameters supplied to the Capture Virtual
   * Machine operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginCapture(resourceGroupName: string, vmName: string, parameters: Models.VirtualMachineCaptureParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        vmName,
        parameters,
        options
      },
      beginCaptureOperationSpec,
      options);
  }

  /**
   * The operation to create or update a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {VirtualMachine} parameters Parameters supplied to the Create Virtual Machine operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginCreateOrUpdate(resourceGroupName: string, vmName: string, parameters: Models.VirtualMachine, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        vmName,
        parameters,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * The operation to update a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {VirtualMachineUpdate} parameters Parameters supplied to the Update Virtual Machine
   * operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginUpdate(resourceGroupName: string, vmName: string, parameters: Models.VirtualMachineUpdate, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        vmName,
        parameters,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * The operation to delete a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginDeleteMethod(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        vmName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Converts virtual machine disks from blob-based to managed disks. Virtual machine must be
   * stop-deallocated before invoking this operation.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginConvertToManagedDisks(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        vmName,
        options
      },
      beginConvertToManagedDisksOperationSpec,
      options);
  }

  /**
   * Shuts down the virtual machine and releases the compute resources. You are not billed for the
   * compute resources that this virtual machine uses.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginDeallocate(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        vmName,
        options
      },
      beginDeallocateOperationSpec,
      options);
  }

  /**
   * The operation to power off (stop) a virtual machine. The virtual machine can be restarted with
   * the same provisioned resources. You are still charged for this virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginPowerOff(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        vmName,
        options
      },
      beginPowerOffOperationSpec,
      options);
  }

  /**
   * The operation to restart a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginRestart(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        vmName,
        options
      },
      beginRestartOperationSpec,
      options);
  }

  /**
   * The operation to start a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginStart(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        vmName,
        options
      },
      beginStartOperationSpec,
      options);
  }

  /**
   * The operation to redeploy a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginRedeploy(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        vmName,
        options
      },
      beginRedeployOperationSpec,
      options);
  }

  /**
   * The operation to perform maintenance on a virtual machine.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginPerformMaintenance(resourceGroupName: string, vmName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        vmName,
        options
      },
      beginPerformMaintenanceOperationSpec,
      options);
  }

  /**
   * Run command on the VM.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} vmName The name of the virtual machine.
   *
   * @param {RunCommandInput} parameters Parameters supplied to the Run command operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginRunCommand(resourceGroupName: string, vmName: string, parameters: Models.RunCommandInput, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        vmName,
        parameters,
        options
      },
      beginRunCommandOperationSpec,
      options);
  }

  /**
   * Lists all of the virtual machines in the specified resource group. Use the nextLink property in
   * the response to get the next page of virtual machines.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  listNext(nextPageLink: string): Promise<Models.VirtualMachinesListNextResponse>;
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase): Promise<Models.VirtualMachinesListNextResponse>;
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.VirtualMachineListResult>): void;
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VirtualMachineListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.VirtualMachineListResult>): Promise<Models.VirtualMachinesListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.VirtualMachinesListNextResponse>;
  }

  /**
   * Lists all of the virtual machines in the specified subscription. Use the nextLink property in
   * the response to get the next page of virtual machines.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  listAllNext(nextPageLink: string): Promise<Models.VirtualMachinesListAllNextResponse>;
  listAllNext(nextPageLink: string, options: msRest.RequestOptionsBase): Promise<Models.VirtualMachinesListAllNextResponse>;
  listAllNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.VirtualMachineListResult>): void;
  listAllNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VirtualMachineListResult>): void;
  listAllNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.VirtualMachineListResult>): Promise<Models.VirtualMachinesListAllNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listAllNextOperationSpec,
      callback) as Promise<Models.VirtualMachinesListAllNextResponse>;
  }

}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.vmName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.expand1,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const instanceViewOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/instanceView",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.vmName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachineInstanceView
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const generalizeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/generalize",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.vmName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachineListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listAllOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/virtualMachines",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachineListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listAvailableSizesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/vmSizes",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.vmName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachineSizeListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCaptureOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/capture",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.vmName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.VirtualMachineCaptureParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachineCaptureResult
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.vmName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.VirtualMachine,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachine
    },
    201: {
      bodyMapper: Mappers.VirtualMachine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.vmName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.VirtualMachineUpdate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachine
    },
    201: {
      bodyMapper: Mappers.VirtualMachine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.vmName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginConvertToManagedDisksOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/convertToManagedDisks",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.vmName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeallocateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/deallocate",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.vmName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginPowerOffOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/powerOff",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.vmName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginRestartOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/restart",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.vmName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginStartOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/start",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.vmName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginRedeployOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/redeploy",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.vmName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginPerformMaintenanceOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/performMaintenance",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.vmName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginRunCommandOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/runCommand",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.vmName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.RunCommandInput,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.RunCommandResult
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachineListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listAllNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachineListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
