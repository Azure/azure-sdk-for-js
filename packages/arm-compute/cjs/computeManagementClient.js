"use strict";
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Models = __importStar(require("./models"));
exports.ComputeManagementModels = Models;
const Mappers = __importStar(require("./models/mappers"));
exports.ComputeManagementMappers = Mappers;
const operations = __importStar(require("./operations"));
const computeManagementClientContext_1 = require("./computeManagementClientContext");
exports.ComputeManagementClientContext = computeManagementClientContext_1.ComputeManagementClientContext;
class ComputeManagementClient extends computeManagementClientContext_1.ComputeManagementClientContext {
    /**
     * @class
     * Initializes a new instance of the ComputeManagementClient class.
     * @constructor
     *
     * @param {msRest.ServiceClientCredentials} credentials - Credentials needed for the client to connect to Azure.
     *
     * @param {string} subscriptionId - Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     *
     * @param {string} [baseUri] - The base URI of the service.
     *
     * @param {object} [options] - The parameter options
     *
     * @param {Array} [options.filters] - Filters to be added to the request pipeline
     *
     * @param {object} [options.requestOptions] - The request options. Detailed info can be found at
     * {@link https://github.github.io/fetch/#Request Options doc}
     *
     * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
     *
     * @param {string} [options.acceptLanguage] - The preferred language for the response.
     *
     * @param {number} [options.longRunningOperationRetryTimeout] - The retry timeout in seconds for Long Running Operations. Default value is 30.
     *
     * @param {boolean} [options.generateClientRequestId] - Whether a unique x-ms-client-request-id should be generated. When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.
     *
     */
    constructor(credentials, subscriptionId, baseUri, options) {
        super(credentials, subscriptionId, baseUri, options);
        this.operations = new operations.Operations(this);
        this.availabilitySets = new operations.AvailabilitySets(this);
        this.virtualMachineExtensionImages = new operations.VirtualMachineExtensionImages(this);
        this.virtualMachineExtensions = new operations.VirtualMachineExtensions(this);
        this.virtualMachineImages = new operations.VirtualMachineImages(this);
        this.usage = new operations.UsageOperations(this);
        this.virtualMachineSizes = new operations.VirtualMachineSizes(this);
        this.images = new operations.Images(this);
        this.virtualMachines = new operations.VirtualMachines(this);
        this.virtualMachineScaleSets = new operations.VirtualMachineScaleSets(this);
        this.virtualMachineScaleSetExtensions = new operations.VirtualMachineScaleSetExtensions(this);
        this.virtualMachineScaleSetRollingUpgrades = new operations.VirtualMachineScaleSetRollingUpgrades(this);
        this.virtualMachineScaleSetVMs = new operations.VirtualMachineScaleSetVMs(this);
        this.logAnalytics = new operations.LogAnalytics(this);
        this.virtualMachineRunCommands = new operations.VirtualMachineRunCommands(this);
        this.resourceSkus = new operations.ResourceSkus(this);
        this.disks = new operations.Disks(this);
        this.snapshots = new operations.Snapshots(this);
        this.containerServices = new operations.ContainerServices(this);
    }
}
exports.ComputeManagementClient = ComputeManagementClient;
__export(require("./operations"));
//# sourceMappingURL=computeManagementClient.js.map