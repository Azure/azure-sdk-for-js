"use strict";
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const msRest = __importStar(require("ms-rest-js"));
const Mappers = __importStar(require("../models/virtualMachineScaleSetsMappers"));
const Parameters = __importStar(require("../models/parameters"));
/** Class representing a VirtualMachineScaleSets. */
class VirtualMachineScaleSets {
    /**
     * Create a VirtualMachineScaleSets.
     * @param {ComputeManagementClientContext} client Reference to the service client.
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Create or update a VM scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmScaleSetName The name of the VM scale set to create or update.
     *
     * @param {VirtualMachineScaleSet} parameters The scale set object.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    createOrUpdate(resourceGroupName, vmScaleSetName, parameters, options) {
        return this.beginCreateOrUpdate(resourceGroupName, vmScaleSetName, parameters, options)
            .then(lroPoller => lroPoller.pollUntilFinished());
    }
    /**
     * Update a VM scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmScaleSetName The name of the VM scale set to create or update.
     *
     * @param {VirtualMachineScaleSetUpdate} parameters The scale set object.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    update(resourceGroupName, vmScaleSetName, parameters, options) {
        return this.beginUpdate(resourceGroupName, vmScaleSetName, parameters, options)
            .then(lroPoller => lroPoller.pollUntilFinished());
    }
    /**
     * Deletes a VM scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmScaleSetName The name of the VM scale set.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    deleteMethod(resourceGroupName, vmScaleSetName, options) {
        return this.beginDeleteMethod(resourceGroupName, vmScaleSetName, options)
            .then(lroPoller => lroPoller.pollUntilFinished());
    }
    get(resourceGroupName, vmScaleSetName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            vmScaleSetName,
            options
        }, getOperationSpec, callback);
    }
    /**
     * Deallocates specific virtual machines in a VM scale set. Shuts down the virtual machines and
     * releases the compute resources. You are not billed for the compute resources that this virtual
     * machine scale set deallocates.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmScaleSetName The name of the VM scale set.
     *
     * @param {VirtualMachineScaleSetsDeallocateOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    deallocate(resourceGroupName, vmScaleSetName, options) {
        return this.beginDeallocate(resourceGroupName, vmScaleSetName, options)
            .then(lroPoller => lroPoller.pollUntilFinished());
    }
    /**
     * Deletes virtual machines in a VM scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmScaleSetName The name of the VM scale set.
     *
     * @param {VirtualMachineScaleSetVMInstanceRequiredIDs} vmInstanceIDs A list of virtual machine
     * instance IDs from the VM scale set.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    deleteInstances(resourceGroupName, vmScaleSetName, vmInstanceIDs, options) {
        return this.beginDeleteInstances(resourceGroupName, vmScaleSetName, vmInstanceIDs, options)
            .then(lroPoller => lroPoller.pollUntilFinished());
    }
    getInstanceView(resourceGroupName, vmScaleSetName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            vmScaleSetName,
            options
        }, getInstanceViewOperationSpec, callback);
    }
    list(resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            options
        }, listOperationSpec, callback);
    }
    listAll(options, callback) {
        return this.client.sendOperationRequest({
            options
        }, listAllOperationSpec, callback);
    }
    listSkus(resourceGroupName, vmScaleSetName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            vmScaleSetName,
            options
        }, listSkusOperationSpec, callback);
    }
    getOSUpgradeHistory(resourceGroupName, vmScaleSetName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            vmScaleSetName,
            options
        }, getOSUpgradeHistoryOperationSpec, callback);
    }
    /**
     * Power off (stop) one or more virtual machines in a VM scale set. Note that resources are still
     * attached and you are getting charged for the resources. Instead, use deallocate to release
     * resources and avoid charges.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmScaleSetName The name of the VM scale set.
     *
     * @param {VirtualMachineScaleSetsPowerOffOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    powerOff(resourceGroupName, vmScaleSetName, options) {
        return this.beginPowerOff(resourceGroupName, vmScaleSetName, options)
            .then(lroPoller => lroPoller.pollUntilFinished());
    }
    /**
     * Restarts one or more virtual machines in a VM scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmScaleSetName The name of the VM scale set.
     *
     * @param {VirtualMachineScaleSetsRestartOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    restart(resourceGroupName, vmScaleSetName, options) {
        return this.beginRestart(resourceGroupName, vmScaleSetName, options)
            .then(lroPoller => lroPoller.pollUntilFinished());
    }
    /**
     * Starts one or more virtual machines in a VM scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmScaleSetName The name of the VM scale set.
     *
     * @param {VirtualMachineScaleSetsStartOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    start(resourceGroupName, vmScaleSetName, options) {
        return this.beginStart(resourceGroupName, vmScaleSetName, options)
            .then(lroPoller => lroPoller.pollUntilFinished());
    }
    /**
     * Redeploy one or more virtual machines in a VM scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmScaleSetName The name of the VM scale set.
     *
     * @param {VirtualMachineScaleSetsRedeployOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    redeploy(resourceGroupName, vmScaleSetName, options) {
        return this.beginRedeploy(resourceGroupName, vmScaleSetName, options)
            .then(lroPoller => lroPoller.pollUntilFinished());
    }
    /**
     * Perform maintenance on one or more virtual machines in a VM scale set. Operation on instances
     * which are not eligible for perform maintenance will be failed. Please refer to best practices
     * for more details:
     * https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-maintenance-notifications
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmScaleSetName The name of the VM scale set.
     *
     * @param {VirtualMachineScaleSetsPerformMaintenanceOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    performMaintenance(resourceGroupName, vmScaleSetName, options) {
        return this.beginPerformMaintenance(resourceGroupName, vmScaleSetName, options)
            .then(lroPoller => lroPoller.pollUntilFinished());
    }
    /**
     * Upgrades one or more virtual machines to the latest SKU set in the VM scale set model.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmScaleSetName The name of the VM scale set.
     *
     * @param {VirtualMachineScaleSetVMInstanceRequiredIDs} vmInstanceIDs A list of virtual machine
     * instance IDs from the VM scale set.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    updateInstances(resourceGroupName, vmScaleSetName, vmInstanceIDs, options) {
        return this.beginUpdateInstances(resourceGroupName, vmScaleSetName, vmInstanceIDs, options)
            .then(lroPoller => lroPoller.pollUntilFinished());
    }
    /**
     * Reimages (upgrade the operating system) one or more virtual machines in a VM scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmScaleSetName The name of the VM scale set.
     *
     * @param {VirtualMachineScaleSetsReimageOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    reimage(resourceGroupName, vmScaleSetName, options) {
        return this.beginReimage(resourceGroupName, vmScaleSetName, options)
            .then(lroPoller => lroPoller.pollUntilFinished());
    }
    /**
     * Reimages all the disks ( including data disks ) in the virtual machines in a VM scale set. This
     * operation is only supported for managed disks.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmScaleSetName The name of the VM scale set.
     *
     * @param {VirtualMachineScaleSetsReimageAllOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    reimageAll(resourceGroupName, vmScaleSetName, options) {
        return this.beginReimageAll(resourceGroupName, vmScaleSetName, options)
            .then(lroPoller => lroPoller.pollUntilFinished());
    }
    forceRecoveryServiceFabricPlatformUpdateDomainWalk(resourceGroupName, vmScaleSetName, platformUpdateDomain, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            vmScaleSetName,
            platformUpdateDomain,
            options
        }, forceRecoveryServiceFabricPlatformUpdateDomainWalkOperationSpec, callback);
    }
    /**
     * Create or update a VM scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmScaleSetName The name of the VM scale set to create or update.
     *
     * @param {VirtualMachineScaleSet} parameters The scale set object.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    beginCreateOrUpdate(resourceGroupName, vmScaleSetName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName,
            vmScaleSetName,
            parameters,
            options
        }, beginCreateOrUpdateOperationSpec, options);
    }
    /**
     * Update a VM scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmScaleSetName The name of the VM scale set to create or update.
     *
     * @param {VirtualMachineScaleSetUpdate} parameters The scale set object.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    beginUpdate(resourceGroupName, vmScaleSetName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName,
            vmScaleSetName,
            parameters,
            options
        }, beginUpdateOperationSpec, options);
    }
    /**
     * Deletes a VM scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmScaleSetName The name of the VM scale set.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    beginDeleteMethod(resourceGroupName, vmScaleSetName, options) {
        return this.client.sendLRORequest({
            resourceGroupName,
            vmScaleSetName,
            options
        }, beginDeleteMethodOperationSpec, options);
    }
    /**
     * Deallocates specific virtual machines in a VM scale set. Shuts down the virtual machines and
     * releases the compute resources. You are not billed for the compute resources that this virtual
     * machine scale set deallocates.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmScaleSetName The name of the VM scale set.
     *
     * @param {VirtualMachineScaleSetsBeginDeallocateOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    beginDeallocate(resourceGroupName, vmScaleSetName, options) {
        return this.client.sendLRORequest({
            resourceGroupName,
            vmScaleSetName,
            options
        }, beginDeallocateOperationSpec, options);
    }
    /**
     * Deletes virtual machines in a VM scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmScaleSetName The name of the VM scale set.
     *
     * @param {VirtualMachineScaleSetVMInstanceRequiredIDs} vmInstanceIDs A list of virtual machine
     * instance IDs from the VM scale set.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    beginDeleteInstances(resourceGroupName, vmScaleSetName, vmInstanceIDs, options) {
        return this.client.sendLRORequest({
            resourceGroupName,
            vmScaleSetName,
            vmInstanceIDs,
            options
        }, beginDeleteInstancesOperationSpec, options);
    }
    /**
     * Power off (stop) one or more virtual machines in a VM scale set. Note that resources are still
     * attached and you are getting charged for the resources. Instead, use deallocate to release
     * resources and avoid charges.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmScaleSetName The name of the VM scale set.
     *
     * @param {VirtualMachineScaleSetsBeginPowerOffOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    beginPowerOff(resourceGroupName, vmScaleSetName, options) {
        return this.client.sendLRORequest({
            resourceGroupName,
            vmScaleSetName,
            options
        }, beginPowerOffOperationSpec, options);
    }
    /**
     * Restarts one or more virtual machines in a VM scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmScaleSetName The name of the VM scale set.
     *
     * @param {VirtualMachineScaleSetsBeginRestartOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    beginRestart(resourceGroupName, vmScaleSetName, options) {
        return this.client.sendLRORequest({
            resourceGroupName,
            vmScaleSetName,
            options
        }, beginRestartOperationSpec, options);
    }
    /**
     * Starts one or more virtual machines in a VM scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmScaleSetName The name of the VM scale set.
     *
     * @param {VirtualMachineScaleSetsBeginStartOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    beginStart(resourceGroupName, vmScaleSetName, options) {
        return this.client.sendLRORequest({
            resourceGroupName,
            vmScaleSetName,
            options
        }, beginStartOperationSpec, options);
    }
    /**
     * Redeploy one or more virtual machines in a VM scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmScaleSetName The name of the VM scale set.
     *
     * @param {VirtualMachineScaleSetsBeginRedeployOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    beginRedeploy(resourceGroupName, vmScaleSetName, options) {
        return this.client.sendLRORequest({
            resourceGroupName,
            vmScaleSetName,
            options
        }, beginRedeployOperationSpec, options);
    }
    /**
     * Perform maintenance on one or more virtual machines in a VM scale set. Operation on instances
     * which are not eligible for perform maintenance will be failed. Please refer to best practices
     * for more details:
     * https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-maintenance-notifications
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmScaleSetName The name of the VM scale set.
     *
     * @param {VirtualMachineScaleSetsBeginPerformMaintenanceOptionalParams} [options] Optional
     * Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    beginPerformMaintenance(resourceGroupName, vmScaleSetName, options) {
        return this.client.sendLRORequest({
            resourceGroupName,
            vmScaleSetName,
            options
        }, beginPerformMaintenanceOperationSpec, options);
    }
    /**
     * Upgrades one or more virtual machines to the latest SKU set in the VM scale set model.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmScaleSetName The name of the VM scale set.
     *
     * @param {VirtualMachineScaleSetVMInstanceRequiredIDs} vmInstanceIDs A list of virtual machine
     * instance IDs from the VM scale set.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    beginUpdateInstances(resourceGroupName, vmScaleSetName, vmInstanceIDs, options) {
        return this.client.sendLRORequest({
            resourceGroupName,
            vmScaleSetName,
            vmInstanceIDs,
            options
        }, beginUpdateInstancesOperationSpec, options);
    }
    /**
     * Reimages (upgrade the operating system) one or more virtual machines in a VM scale set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmScaleSetName The name of the VM scale set.
     *
     * @param {VirtualMachineScaleSetsBeginReimageOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    beginReimage(resourceGroupName, vmScaleSetName, options) {
        return this.client.sendLRORequest({
            resourceGroupName,
            vmScaleSetName,
            options
        }, beginReimageOperationSpec, options);
    }
    /**
     * Reimages all the disks ( including data disks ) in the virtual machines in a VM scale set. This
     * operation is only supported for managed disks.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmScaleSetName The name of the VM scale set.
     *
     * @param {VirtualMachineScaleSetsBeginReimageAllOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    beginReimageAll(resourceGroupName, vmScaleSetName, options) {
        return this.client.sendLRORequest({
            resourceGroupName,
            vmScaleSetName,
            options
        }, beginReimageAllOperationSpec, options);
    }
    listNext(nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink,
            options
        }, listNextOperationSpec, callback);
    }
    listAllNext(nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink,
            options
        }, listAllNextOperationSpec, callback);
    }
    listSkusNext(nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink,
            options
        }, listSkusNextOperationSpec, callback);
    }
    getOSUpgradeHistoryNext(nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink,
            options
        }, getOSUpgradeHistoryNextOperationSpec, callback);
    }
}
exports.VirtualMachineScaleSets = VirtualMachineScaleSets;
// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineScaleSet
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const getInstanceViewOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/instanceView",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineScaleSetInstanceView
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineScaleSetListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const listAllOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/virtualMachineScaleSets",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineScaleSetListWithLinkResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const listSkusOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/skus",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineScaleSetListSkusResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const getOSUpgradeHistoryOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/osUpgradeHistory",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineScaleSetListOSUpgradeHistory
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const forceRecoveryServiceFabricPlatformUpdateDomainWalkOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/forceRecoveryServiceFabricPlatformUpdateDomainWalk",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0,
        Parameters.platformUpdateDomain
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RecoveryWalkResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: Object.assign({}, Mappers.VirtualMachineScaleSet, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineScaleSet
        },
        201: {
            bodyMapper: Mappers.VirtualMachineScaleSet
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const beginUpdateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: Object.assign({}, Mappers.VirtualMachineScaleSetUpdate, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineScaleSet
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const beginDeallocateOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/deallocate",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: [
            "options",
            "vmInstanceIDs"
        ],
        mapper: Mappers.VirtualMachineScaleSetVMInstanceIDs
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const beginDeleteInstancesOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/delete",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "vmInstanceIDs",
        mapper: Object.assign({}, Mappers.VirtualMachineScaleSetVMInstanceRequiredIDs, { required: true })
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const beginPowerOffOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/poweroff",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: [
            "options",
            "vmInstanceIDs"
        ],
        mapper: Mappers.VirtualMachineScaleSetVMInstanceIDs
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const beginRestartOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/restart",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: [
            "options",
            "vmInstanceIDs"
        ],
        mapper: Mappers.VirtualMachineScaleSetVMInstanceIDs
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const beginStartOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/start",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: [
            "options",
            "vmInstanceIDs"
        ],
        mapper: Mappers.VirtualMachineScaleSetVMInstanceIDs
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const beginRedeployOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/redeploy",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: [
            "options",
            "vmInstanceIDs"
        ],
        mapper: Mappers.VirtualMachineScaleSetVMInstanceIDs
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const beginPerformMaintenanceOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/performMaintenance",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: [
            "options",
            "vmInstanceIDs"
        ],
        mapper: Mappers.VirtualMachineScaleSetVMInstanceIDs
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const beginUpdateInstancesOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/manualupgrade",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "vmInstanceIDs",
        mapper: Object.assign({}, Mappers.VirtualMachineScaleSetVMInstanceRequiredIDs, { required: true })
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const beginReimageOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/reimage",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: [
            "options",
            "vmInstanceIDs"
        ],
        mapper: Mappers.VirtualMachineScaleSetVMInstanceIDs
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const beginReimageAllOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/reimageall",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmScaleSetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: [
            "options",
            "vmInstanceIDs"
        ],
        mapper: Mappers.VirtualMachineScaleSetVMInstanceIDs
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineScaleSetListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const listAllNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineScaleSetListWithLinkResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const listSkusNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineScaleSetListSkusResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const getOSUpgradeHistoryNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineScaleSetListOSUpgradeHistory
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
//# sourceMappingURL=virtualMachineScaleSets.js.map