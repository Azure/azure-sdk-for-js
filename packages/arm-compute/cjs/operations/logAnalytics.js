"use strict";
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const msRest = __importStar(require("ms-rest-js"));
const Mappers = __importStar(require("../models/logAnalyticsMappers"));
const Parameters = __importStar(require("../models/parameters"));
/** Class representing a LogAnalytics. */
class LogAnalytics {
    /**
     * Create a LogAnalytics.
     * @param {ComputeManagementClientContext} client Reference to the service client.
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Export logs that show Api requests made by this subscription in the given time window to show
     * throttling activities.
     *
     * @param {RequestRateByIntervalInput} parameters Parameters supplied to the LogAnalytics
     * getRequestRateByInterval Api.
     *
     * @param {string} location The location upon which virtual-machine-sizes is queried.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    exportRequestRateByInterval(parameters, location, options) {
        return this.beginExportRequestRateByInterval(parameters, location, options)
            .then(lroPoller => lroPoller.pollUntilFinished());
    }
    /**
     * Export logs that show total throttled Api requests for this subscription in the given time
     * window.
     *
     * @param {ThrottledRequestsInput} parameters Parameters supplied to the LogAnalytics
     * getThrottledRequests Api.
     *
     * @param {string} location The location upon which virtual-machine-sizes is queried.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    exportThrottledRequests(parameters, location, options) {
        return this.beginExportThrottledRequests(parameters, location, options)
            .then(lroPoller => lroPoller.pollUntilFinished());
    }
    /**
     * Export logs that show Api requests made by this subscription in the given time window to show
     * throttling activities.
     *
     * @param {RequestRateByIntervalInput} parameters Parameters supplied to the LogAnalytics
     * getRequestRateByInterval Api.
     *
     * @param {string} location The location upon which virtual-machine-sizes is queried.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    beginExportRequestRateByInterval(parameters, location, options) {
        return this.client.sendLRORequest({
            parameters,
            location,
            options
        }, beginExportRequestRateByIntervalOperationSpec, options);
    }
    /**
     * Export logs that show total throttled Api requests for this subscription in the given time
     * window.
     *
     * @param {ThrottledRequestsInput} parameters Parameters supplied to the LogAnalytics
     * getThrottledRequests Api.
     *
     * @param {string} location The location upon which virtual-machine-sizes is queried.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    beginExportThrottledRequests(parameters, location, options) {
        return this.client.sendLRORequest({
            parameters,
            location,
            options
        }, beginExportThrottledRequestsOperationSpec, options);
    }
}
exports.LogAnalytics = LogAnalytics;
// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const beginExportRequestRateByIntervalOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/logAnalytics/apiAccess/getRequestRateByInterval",
    urlParameters: [
        Parameters.location1,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: Object.assign({}, Mappers.RequestRateByIntervalInput, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.LogAnalyticsOperationResult
        },
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const beginExportThrottledRequestsOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/logAnalytics/apiAccess/getThrottledRequests",
    urlParameters: [
        Parameters.location1,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: Object.assign({}, Mappers.ThrottledRequestsInput, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.LogAnalyticsOperationResult
        },
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
//# sourceMappingURL=logAnalytics.js.map