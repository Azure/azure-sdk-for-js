"use strict";
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const msRest = __importStar(require("ms-rest-js"));
const Mappers = __importStar(require("../models/virtualMachinesMappers"));
const Parameters = __importStar(require("../models/parameters"));
/** Class representing a VirtualMachines. */
class VirtualMachines {
    /**
     * Create a VirtualMachines.
     * @param {ComputeManagementClientContext} client Reference to the service client.
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Captures the VM by copying virtual hard disks of the VM and outputs a template that can be used
     * to create similar VMs.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {VirtualMachineCaptureParameters} parameters Parameters supplied to the Capture Virtual
     * Machine operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    capture(resourceGroupName, vmName, parameters, options) {
        return this.beginCapture(resourceGroupName, vmName, parameters, options)
            .then(lroPoller => lroPoller.pollUntilFinished());
    }
    /**
     * The operation to create or update a virtual machine.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {VirtualMachine} parameters Parameters supplied to the Create Virtual Machine operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    createOrUpdate(resourceGroupName, vmName, parameters, options) {
        return this.beginCreateOrUpdate(resourceGroupName, vmName, parameters, options)
            .then(lroPoller => lroPoller.pollUntilFinished());
    }
    /**
     * The operation to update a virtual machine.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {VirtualMachineUpdate} parameters Parameters supplied to the Update Virtual Machine
     * operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    update(resourceGroupName, vmName, parameters, options) {
        return this.beginUpdate(resourceGroupName, vmName, parameters, options)
            .then(lroPoller => lroPoller.pollUntilFinished());
    }
    /**
     * The operation to delete a virtual machine.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    deleteMethod(resourceGroupName, vmName, options) {
        return this.beginDeleteMethod(resourceGroupName, vmName, options)
            .then(lroPoller => lroPoller.pollUntilFinished());
    }
    get(resourceGroupName, vmName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            vmName,
            options
        }, getOperationSpec, callback);
    }
    instanceView(resourceGroupName, vmName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            vmName,
            options
        }, instanceViewOperationSpec, callback);
    }
    /**
     * Converts virtual machine disks from blob-based to managed disks. Virtual machine must be
     * stop-deallocated before invoking this operation.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    convertToManagedDisks(resourceGroupName, vmName, options) {
        return this.beginConvertToManagedDisks(resourceGroupName, vmName, options)
            .then(lroPoller => lroPoller.pollUntilFinished());
    }
    /**
     * Shuts down the virtual machine and releases the compute resources. You are not billed for the
     * compute resources that this virtual machine uses.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    deallocate(resourceGroupName, vmName, options) {
        return this.beginDeallocate(resourceGroupName, vmName, options)
            .then(lroPoller => lroPoller.pollUntilFinished());
    }
    generalize(resourceGroupName, vmName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            vmName,
            options
        }, generalizeOperationSpec, callback);
    }
    list(resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            options
        }, listOperationSpec, callback);
    }
    listAll(options, callback) {
        return this.client.sendOperationRequest({
            options
        }, listAllOperationSpec, callback);
    }
    listAvailableSizes(resourceGroupName, vmName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            vmName,
            options
        }, listAvailableSizesOperationSpec, callback);
    }
    /**
     * The operation to power off (stop) a virtual machine. The virtual machine can be restarted with
     * the same provisioned resources. You are still charged for this virtual machine.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    powerOff(resourceGroupName, vmName, options) {
        return this.beginPowerOff(resourceGroupName, vmName, options)
            .then(lroPoller => lroPoller.pollUntilFinished());
    }
    /**
     * The operation to restart a virtual machine.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    restart(resourceGroupName, vmName, options) {
        return this.beginRestart(resourceGroupName, vmName, options)
            .then(lroPoller => lroPoller.pollUntilFinished());
    }
    /**
     * The operation to start a virtual machine.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    start(resourceGroupName, vmName, options) {
        return this.beginStart(resourceGroupName, vmName, options)
            .then(lroPoller => lroPoller.pollUntilFinished());
    }
    /**
     * The operation to redeploy a virtual machine.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    redeploy(resourceGroupName, vmName, options) {
        return this.beginRedeploy(resourceGroupName, vmName, options)
            .then(lroPoller => lroPoller.pollUntilFinished());
    }
    /**
     * The operation to perform maintenance on a virtual machine.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    performMaintenance(resourceGroupName, vmName, options) {
        return this.beginPerformMaintenance(resourceGroupName, vmName, options)
            .then(lroPoller => lroPoller.pollUntilFinished());
    }
    /**
     * Run command on the VM.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {RunCommandInput} parameters Parameters supplied to the Run command operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    runCommand(resourceGroupName, vmName, parameters, options) {
        return this.beginRunCommand(resourceGroupName, vmName, parameters, options)
            .then(lroPoller => lroPoller.pollUntilFinished());
    }
    /**
     * Captures the VM by copying virtual hard disks of the VM and outputs a template that can be used
     * to create similar VMs.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {VirtualMachineCaptureParameters} parameters Parameters supplied to the Capture Virtual
     * Machine operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    beginCapture(resourceGroupName, vmName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName,
            vmName,
            parameters,
            options
        }, beginCaptureOperationSpec, options);
    }
    /**
     * The operation to create or update a virtual machine.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {VirtualMachine} parameters Parameters supplied to the Create Virtual Machine operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    beginCreateOrUpdate(resourceGroupName, vmName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName,
            vmName,
            parameters,
            options
        }, beginCreateOrUpdateOperationSpec, options);
    }
    /**
     * The operation to update a virtual machine.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {VirtualMachineUpdate} parameters Parameters supplied to the Update Virtual Machine
     * operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    beginUpdate(resourceGroupName, vmName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName,
            vmName,
            parameters,
            options
        }, beginUpdateOperationSpec, options);
    }
    /**
     * The operation to delete a virtual machine.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    beginDeleteMethod(resourceGroupName, vmName, options) {
        return this.client.sendLRORequest({
            resourceGroupName,
            vmName,
            options
        }, beginDeleteMethodOperationSpec, options);
    }
    /**
     * Converts virtual machine disks from blob-based to managed disks. Virtual machine must be
     * stop-deallocated before invoking this operation.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    beginConvertToManagedDisks(resourceGroupName, vmName, options) {
        return this.client.sendLRORequest({
            resourceGroupName,
            vmName,
            options
        }, beginConvertToManagedDisksOperationSpec, options);
    }
    /**
     * Shuts down the virtual machine and releases the compute resources. You are not billed for the
     * compute resources that this virtual machine uses.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    beginDeallocate(resourceGroupName, vmName, options) {
        return this.client.sendLRORequest({
            resourceGroupName,
            vmName,
            options
        }, beginDeallocateOperationSpec, options);
    }
    /**
     * The operation to power off (stop) a virtual machine. The virtual machine can be restarted with
     * the same provisioned resources. You are still charged for this virtual machine.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    beginPowerOff(resourceGroupName, vmName, options) {
        return this.client.sendLRORequest({
            resourceGroupName,
            vmName,
            options
        }, beginPowerOffOperationSpec, options);
    }
    /**
     * The operation to restart a virtual machine.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    beginRestart(resourceGroupName, vmName, options) {
        return this.client.sendLRORequest({
            resourceGroupName,
            vmName,
            options
        }, beginRestartOperationSpec, options);
    }
    /**
     * The operation to start a virtual machine.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    beginStart(resourceGroupName, vmName, options) {
        return this.client.sendLRORequest({
            resourceGroupName,
            vmName,
            options
        }, beginStartOperationSpec, options);
    }
    /**
     * The operation to redeploy a virtual machine.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    beginRedeploy(resourceGroupName, vmName, options) {
        return this.client.sendLRORequest({
            resourceGroupName,
            vmName,
            options
        }, beginRedeployOperationSpec, options);
    }
    /**
     * The operation to perform maintenance on a virtual machine.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    beginPerformMaintenance(resourceGroupName, vmName, options) {
        return this.client.sendLRORequest({
            resourceGroupName,
            vmName,
            options
        }, beginPerformMaintenanceOperationSpec, options);
    }
    /**
     * Run command on the VM.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {RunCommandInput} parameters Parameters supplied to the Run command operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    beginRunCommand(resourceGroupName, vmName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName,
            vmName,
            parameters,
            options
        }, beginRunCommandOperationSpec, options);
    }
    listNext(nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink,
            options
        }, listNextOperationSpec, callback);
    }
    listAllNext(nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink,
            options
        }, listAllNextOperationSpec, callback);
    }
}
exports.VirtualMachines = VirtualMachines;
// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.expand1,
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachine
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const instanceViewOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/instanceView",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineInstanceView
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const generalizeOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/generalize",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const listAllOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/virtualMachines",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const listAvailableSizesOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/vmSizes",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineSizeListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const beginCaptureOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/capture",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: Object.assign({}, Mappers.VirtualMachineCaptureParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineCaptureResult
        },
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: Object.assign({}, Mappers.VirtualMachine, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachine
        },
        201: {
            bodyMapper: Mappers.VirtualMachine
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const beginUpdateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: Object.assign({}, Mappers.VirtualMachineUpdate, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachine
        },
        201: {
            bodyMapper: Mappers.VirtualMachine
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const beginConvertToManagedDisksOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/convertToManagedDisks",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const beginDeallocateOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/deallocate",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const beginPowerOffOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/powerOff",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const beginRestartOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/restart",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const beginStartOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/start",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const beginRedeployOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/redeploy",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const beginPerformMaintenanceOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/performMaintenance",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const beginRunCommandOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/runCommand",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: Object.assign({}, Mappers.RunCommandInput, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.RunCommandResult
        },
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
const listAllNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer
};
//# sourceMappingURL=virtualMachines.js.map