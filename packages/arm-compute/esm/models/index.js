/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
/**
 * Defines values for StatusLevelTypes.
 * Possible values include: 'Info', 'Warning', 'Error'
 * @readonly
 * @enum {string}
 */
export var StatusLevelTypes;
(function (StatusLevelTypes) {
    StatusLevelTypes["Info"] = "Info";
    StatusLevelTypes["Warning"] = "Warning";
    StatusLevelTypes["Error"] = "Error";
})(StatusLevelTypes || (StatusLevelTypes = {}));
/**
 * Defines values for OperatingSystemTypes.
 * Possible values include: 'Windows', 'Linux'
 * @readonly
 * @enum {string}
 */
export var OperatingSystemTypes;
(function (OperatingSystemTypes) {
    OperatingSystemTypes["Windows"] = "Windows";
    OperatingSystemTypes["Linux"] = "Linux";
})(OperatingSystemTypes || (OperatingSystemTypes = {}));
/**
 * Defines values for VirtualMachineSizeTypes.
 * Possible values include: 'Basic_A0', 'Basic_A1', 'Basic_A2', 'Basic_A3',
 * 'Basic_A4', 'Standard_A0', 'Standard_A1', 'Standard_A2', 'Standard_A3',
 * 'Standard_A4', 'Standard_A5', 'Standard_A6', 'Standard_A7', 'Standard_A8',
 * 'Standard_A9', 'Standard_A10', 'Standard_A11', 'Standard_A1_v2',
 * 'Standard_A2_v2', 'Standard_A4_v2', 'Standard_A8_v2', 'Standard_A2m_v2',
 * 'Standard_A4m_v2', 'Standard_A8m_v2', 'Standard_B1s', 'Standard_B1ms',
 * 'Standard_B2s', 'Standard_B2ms', 'Standard_B4ms', 'Standard_B8ms',
 * 'Standard_D1', 'Standard_D2', 'Standard_D3', 'Standard_D4', 'Standard_D11',
 * 'Standard_D12', 'Standard_D13', 'Standard_D14', 'Standard_D1_v2',
 * 'Standard_D2_v2', 'Standard_D3_v2', 'Standard_D4_v2', 'Standard_D5_v2',
 * 'Standard_D2_v3', 'Standard_D4_v3', 'Standard_D8_v3', 'Standard_D16_v3',
 * 'Standard_D32_v3', 'Standard_D64_v3', 'Standard_D2s_v3', 'Standard_D4s_v3',
 * 'Standard_D8s_v3', 'Standard_D16s_v3', 'Standard_D32s_v3',
 * 'Standard_D64s_v3', 'Standard_D11_v2', 'Standard_D12_v2', 'Standard_D13_v2',
 * 'Standard_D14_v2', 'Standard_D15_v2', 'Standard_DS1', 'Standard_DS2',
 * 'Standard_DS3', 'Standard_DS4', 'Standard_DS11', 'Standard_DS12',
 * 'Standard_DS13', 'Standard_DS14', 'Standard_DS1_v2', 'Standard_DS2_v2',
 * 'Standard_DS3_v2', 'Standard_DS4_v2', 'Standard_DS5_v2', 'Standard_DS11_v2',
 * 'Standard_DS12_v2', 'Standard_DS13_v2', 'Standard_DS14_v2',
 * 'Standard_DS15_v2', 'Standard_DS13-4_v2', 'Standard_DS13-2_v2',
 * 'Standard_DS14-8_v2', 'Standard_DS14-4_v2', 'Standard_E2_v3',
 * 'Standard_E4_v3', 'Standard_E8_v3', 'Standard_E16_v3', 'Standard_E32_v3',
 * 'Standard_E64_v3', 'Standard_E2s_v3', 'Standard_E4s_v3', 'Standard_E8s_v3',
 * 'Standard_E16s_v3', 'Standard_E32s_v3', 'Standard_E64s_v3',
 * 'Standard_E32-16_v3', 'Standard_E32-8s_v3', 'Standard_E64-32s_v3',
 * 'Standard_E64-16s_v3', 'Standard_F1', 'Standard_F2', 'Standard_F4',
 * 'Standard_F8', 'Standard_F16', 'Standard_F1s', 'Standard_F2s',
 * 'Standard_F4s', 'Standard_F8s', 'Standard_F16s', 'Standard_F2s_v2',
 * 'Standard_F4s_v2', 'Standard_F8s_v2', 'Standard_F16s_v2',
 * 'Standard_F32s_v2', 'Standard_F64s_v2', 'Standard_F72s_v2', 'Standard_G1',
 * 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5', 'Standard_GS1',
 * 'Standard_GS2', 'Standard_GS3', 'Standard_GS4', 'Standard_GS5',
 * 'Standard_GS4-8', 'Standard_GS4-4', 'Standard_GS5-16', 'Standard_GS5-8',
 * 'Standard_H8', 'Standard_H16', 'Standard_H8m', 'Standard_H16m',
 * 'Standard_H16r', 'Standard_H16mr', 'Standard_L4s', 'Standard_L8s',
 * 'Standard_L16s', 'Standard_L32s', 'Standard_M64s', 'Standard_M64ms',
 * 'Standard_M128s', 'Standard_M128ms', 'Standard_M64-32ms',
 * 'Standard_M64-16ms', 'Standard_M128-64ms', 'Standard_M128-32ms',
 * 'Standard_NC6', 'Standard_NC12', 'Standard_NC24', 'Standard_NC24r',
 * 'Standard_NC6s_v2', 'Standard_NC12s_v2', 'Standard_NC24s_v2',
 * 'Standard_NC24rs_v2', 'Standard_NC6s_v3', 'Standard_NC12s_v3',
 * 'Standard_NC24s_v3', 'Standard_NC24rs_v3', 'Standard_ND6s',
 * 'Standard_ND12s', 'Standard_ND24s', 'Standard_ND24rs', 'Standard_NV6',
 * 'Standard_NV12', 'Standard_NV24'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: VirtualMachineSizeTypes =
 * <VirtualMachineSizeTypes>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export var VirtualMachineSizeTypes;
(function (VirtualMachineSizeTypes) {
    VirtualMachineSizeTypes["BasicA0"] = "Basic_A0";
    VirtualMachineSizeTypes["BasicA1"] = "Basic_A1";
    VirtualMachineSizeTypes["BasicA2"] = "Basic_A2";
    VirtualMachineSizeTypes["BasicA3"] = "Basic_A3";
    VirtualMachineSizeTypes["BasicA4"] = "Basic_A4";
    VirtualMachineSizeTypes["StandardA0"] = "Standard_A0";
    VirtualMachineSizeTypes["StandardA1"] = "Standard_A1";
    VirtualMachineSizeTypes["StandardA2"] = "Standard_A2";
    VirtualMachineSizeTypes["StandardA3"] = "Standard_A3";
    VirtualMachineSizeTypes["StandardA4"] = "Standard_A4";
    VirtualMachineSizeTypes["StandardA5"] = "Standard_A5";
    VirtualMachineSizeTypes["StandardA6"] = "Standard_A6";
    VirtualMachineSizeTypes["StandardA7"] = "Standard_A7";
    VirtualMachineSizeTypes["StandardA8"] = "Standard_A8";
    VirtualMachineSizeTypes["StandardA9"] = "Standard_A9";
    VirtualMachineSizeTypes["StandardA10"] = "Standard_A10";
    VirtualMachineSizeTypes["StandardA11"] = "Standard_A11";
    VirtualMachineSizeTypes["StandardA1V2"] = "Standard_A1_v2";
    VirtualMachineSizeTypes["StandardA2V2"] = "Standard_A2_v2";
    VirtualMachineSizeTypes["StandardA4V2"] = "Standard_A4_v2";
    VirtualMachineSizeTypes["StandardA8V2"] = "Standard_A8_v2";
    VirtualMachineSizeTypes["StandardA2mV2"] = "Standard_A2m_v2";
    VirtualMachineSizeTypes["StandardA4mV2"] = "Standard_A4m_v2";
    VirtualMachineSizeTypes["StandardA8mV2"] = "Standard_A8m_v2";
    VirtualMachineSizeTypes["StandardB1s"] = "Standard_B1s";
    VirtualMachineSizeTypes["StandardB1ms"] = "Standard_B1ms";
    VirtualMachineSizeTypes["StandardB2s"] = "Standard_B2s";
    VirtualMachineSizeTypes["StandardB2ms"] = "Standard_B2ms";
    VirtualMachineSizeTypes["StandardB4ms"] = "Standard_B4ms";
    VirtualMachineSizeTypes["StandardB8ms"] = "Standard_B8ms";
    VirtualMachineSizeTypes["StandardD1"] = "Standard_D1";
    VirtualMachineSizeTypes["StandardD2"] = "Standard_D2";
    VirtualMachineSizeTypes["StandardD3"] = "Standard_D3";
    VirtualMachineSizeTypes["StandardD4"] = "Standard_D4";
    VirtualMachineSizeTypes["StandardD11"] = "Standard_D11";
    VirtualMachineSizeTypes["StandardD12"] = "Standard_D12";
    VirtualMachineSizeTypes["StandardD13"] = "Standard_D13";
    VirtualMachineSizeTypes["StandardD14"] = "Standard_D14";
    VirtualMachineSizeTypes["StandardD1V2"] = "Standard_D1_v2";
    VirtualMachineSizeTypes["StandardD2V2"] = "Standard_D2_v2";
    VirtualMachineSizeTypes["StandardD3V2"] = "Standard_D3_v2";
    VirtualMachineSizeTypes["StandardD4V2"] = "Standard_D4_v2";
    VirtualMachineSizeTypes["StandardD5V2"] = "Standard_D5_v2";
    VirtualMachineSizeTypes["StandardD2V3"] = "Standard_D2_v3";
    VirtualMachineSizeTypes["StandardD4V3"] = "Standard_D4_v3";
    VirtualMachineSizeTypes["StandardD8V3"] = "Standard_D8_v3";
    VirtualMachineSizeTypes["StandardD16V3"] = "Standard_D16_v3";
    VirtualMachineSizeTypes["StandardD32V3"] = "Standard_D32_v3";
    VirtualMachineSizeTypes["StandardD64V3"] = "Standard_D64_v3";
    VirtualMachineSizeTypes["StandardD2sV3"] = "Standard_D2s_v3";
    VirtualMachineSizeTypes["StandardD4sV3"] = "Standard_D4s_v3";
    VirtualMachineSizeTypes["StandardD8sV3"] = "Standard_D8s_v3";
    VirtualMachineSizeTypes["StandardD16sV3"] = "Standard_D16s_v3";
    VirtualMachineSizeTypes["StandardD32sV3"] = "Standard_D32s_v3";
    VirtualMachineSizeTypes["StandardD64sV3"] = "Standard_D64s_v3";
    VirtualMachineSizeTypes["StandardD11V2"] = "Standard_D11_v2";
    VirtualMachineSizeTypes["StandardD12V2"] = "Standard_D12_v2";
    VirtualMachineSizeTypes["StandardD13V2"] = "Standard_D13_v2";
    VirtualMachineSizeTypes["StandardD14V2"] = "Standard_D14_v2";
    VirtualMachineSizeTypes["StandardD15V2"] = "Standard_D15_v2";
    VirtualMachineSizeTypes["StandardDS1"] = "Standard_DS1";
    VirtualMachineSizeTypes["StandardDS2"] = "Standard_DS2";
    VirtualMachineSizeTypes["StandardDS3"] = "Standard_DS3";
    VirtualMachineSizeTypes["StandardDS4"] = "Standard_DS4";
    VirtualMachineSizeTypes["StandardDS11"] = "Standard_DS11";
    VirtualMachineSizeTypes["StandardDS12"] = "Standard_DS12";
    VirtualMachineSizeTypes["StandardDS13"] = "Standard_DS13";
    VirtualMachineSizeTypes["StandardDS14"] = "Standard_DS14";
    VirtualMachineSizeTypes["StandardDS1V2"] = "Standard_DS1_v2";
    VirtualMachineSizeTypes["StandardDS2V2"] = "Standard_DS2_v2";
    VirtualMachineSizeTypes["StandardDS3V2"] = "Standard_DS3_v2";
    VirtualMachineSizeTypes["StandardDS4V2"] = "Standard_DS4_v2";
    VirtualMachineSizeTypes["StandardDS5V2"] = "Standard_DS5_v2";
    VirtualMachineSizeTypes["StandardDS11V2"] = "Standard_DS11_v2";
    VirtualMachineSizeTypes["StandardDS12V2"] = "Standard_DS12_v2";
    VirtualMachineSizeTypes["StandardDS13V2"] = "Standard_DS13_v2";
    VirtualMachineSizeTypes["StandardDS14V2"] = "Standard_DS14_v2";
    VirtualMachineSizeTypes["StandardDS15V2"] = "Standard_DS15_v2";
    VirtualMachineSizeTypes["StandardDS134V2"] = "Standard_DS13-4_v2";
    VirtualMachineSizeTypes["StandardDS132V2"] = "Standard_DS13-2_v2";
    VirtualMachineSizeTypes["StandardDS148V2"] = "Standard_DS14-8_v2";
    VirtualMachineSizeTypes["StandardDS144V2"] = "Standard_DS14-4_v2";
    VirtualMachineSizeTypes["StandardE2V3"] = "Standard_E2_v3";
    VirtualMachineSizeTypes["StandardE4V3"] = "Standard_E4_v3";
    VirtualMachineSizeTypes["StandardE8V3"] = "Standard_E8_v3";
    VirtualMachineSizeTypes["StandardE16V3"] = "Standard_E16_v3";
    VirtualMachineSizeTypes["StandardE32V3"] = "Standard_E32_v3";
    VirtualMachineSizeTypes["StandardE64V3"] = "Standard_E64_v3";
    VirtualMachineSizeTypes["StandardE2sV3"] = "Standard_E2s_v3";
    VirtualMachineSizeTypes["StandardE4sV3"] = "Standard_E4s_v3";
    VirtualMachineSizeTypes["StandardE8sV3"] = "Standard_E8s_v3";
    VirtualMachineSizeTypes["StandardE16sV3"] = "Standard_E16s_v3";
    VirtualMachineSizeTypes["StandardE32sV3"] = "Standard_E32s_v3";
    VirtualMachineSizeTypes["StandardE64sV3"] = "Standard_E64s_v3";
    VirtualMachineSizeTypes["StandardE3216V3"] = "Standard_E32-16_v3";
    VirtualMachineSizeTypes["StandardE328sV3"] = "Standard_E32-8s_v3";
    VirtualMachineSizeTypes["StandardE6432sV3"] = "Standard_E64-32s_v3";
    VirtualMachineSizeTypes["StandardE6416sV3"] = "Standard_E64-16s_v3";
    VirtualMachineSizeTypes["StandardF1"] = "Standard_F1";
    VirtualMachineSizeTypes["StandardF2"] = "Standard_F2";
    VirtualMachineSizeTypes["StandardF4"] = "Standard_F4";
    VirtualMachineSizeTypes["StandardF8"] = "Standard_F8";
    VirtualMachineSizeTypes["StandardF16"] = "Standard_F16";
    VirtualMachineSizeTypes["StandardF1s"] = "Standard_F1s";
    VirtualMachineSizeTypes["StandardF2s"] = "Standard_F2s";
    VirtualMachineSizeTypes["StandardF4s"] = "Standard_F4s";
    VirtualMachineSizeTypes["StandardF8s"] = "Standard_F8s";
    VirtualMachineSizeTypes["StandardF16s"] = "Standard_F16s";
    VirtualMachineSizeTypes["StandardF2sV2"] = "Standard_F2s_v2";
    VirtualMachineSizeTypes["StandardF4sV2"] = "Standard_F4s_v2";
    VirtualMachineSizeTypes["StandardF8sV2"] = "Standard_F8s_v2";
    VirtualMachineSizeTypes["StandardF16sV2"] = "Standard_F16s_v2";
    VirtualMachineSizeTypes["StandardF32sV2"] = "Standard_F32s_v2";
    VirtualMachineSizeTypes["StandardF64sV2"] = "Standard_F64s_v2";
    VirtualMachineSizeTypes["StandardF72sV2"] = "Standard_F72s_v2";
    VirtualMachineSizeTypes["StandardG1"] = "Standard_G1";
    VirtualMachineSizeTypes["StandardG2"] = "Standard_G2";
    VirtualMachineSizeTypes["StandardG3"] = "Standard_G3";
    VirtualMachineSizeTypes["StandardG4"] = "Standard_G4";
    VirtualMachineSizeTypes["StandardG5"] = "Standard_G5";
    VirtualMachineSizeTypes["StandardGS1"] = "Standard_GS1";
    VirtualMachineSizeTypes["StandardGS2"] = "Standard_GS2";
    VirtualMachineSizeTypes["StandardGS3"] = "Standard_GS3";
    VirtualMachineSizeTypes["StandardGS4"] = "Standard_GS4";
    VirtualMachineSizeTypes["StandardGS5"] = "Standard_GS5";
    VirtualMachineSizeTypes["StandardGS48"] = "Standard_GS4-8";
    VirtualMachineSizeTypes["StandardGS44"] = "Standard_GS4-4";
    VirtualMachineSizeTypes["StandardGS516"] = "Standard_GS5-16";
    VirtualMachineSizeTypes["StandardGS58"] = "Standard_GS5-8";
    VirtualMachineSizeTypes["StandardH8"] = "Standard_H8";
    VirtualMachineSizeTypes["StandardH16"] = "Standard_H16";
    VirtualMachineSizeTypes["StandardH8m"] = "Standard_H8m";
    VirtualMachineSizeTypes["StandardH16m"] = "Standard_H16m";
    VirtualMachineSizeTypes["StandardH16r"] = "Standard_H16r";
    VirtualMachineSizeTypes["StandardH16mr"] = "Standard_H16mr";
    VirtualMachineSizeTypes["StandardL4s"] = "Standard_L4s";
    VirtualMachineSizeTypes["StandardL8s"] = "Standard_L8s";
    VirtualMachineSizeTypes["StandardL16s"] = "Standard_L16s";
    VirtualMachineSizeTypes["StandardL32s"] = "Standard_L32s";
    VirtualMachineSizeTypes["StandardM64s"] = "Standard_M64s";
    VirtualMachineSizeTypes["StandardM64ms"] = "Standard_M64ms";
    VirtualMachineSizeTypes["StandardM128s"] = "Standard_M128s";
    VirtualMachineSizeTypes["StandardM128ms"] = "Standard_M128ms";
    VirtualMachineSizeTypes["StandardM6432ms"] = "Standard_M64-32ms";
    VirtualMachineSizeTypes["StandardM6416ms"] = "Standard_M64-16ms";
    VirtualMachineSizeTypes["StandardM12864ms"] = "Standard_M128-64ms";
    VirtualMachineSizeTypes["StandardM12832ms"] = "Standard_M128-32ms";
    VirtualMachineSizeTypes["StandardNC6"] = "Standard_NC6";
    VirtualMachineSizeTypes["StandardNC12"] = "Standard_NC12";
    VirtualMachineSizeTypes["StandardNC24"] = "Standard_NC24";
    VirtualMachineSizeTypes["StandardNC24r"] = "Standard_NC24r";
    VirtualMachineSizeTypes["StandardNC6sV2"] = "Standard_NC6s_v2";
    VirtualMachineSizeTypes["StandardNC12sV2"] = "Standard_NC12s_v2";
    VirtualMachineSizeTypes["StandardNC24sV2"] = "Standard_NC24s_v2";
    VirtualMachineSizeTypes["StandardNC24rsV2"] = "Standard_NC24rs_v2";
    VirtualMachineSizeTypes["StandardNC6sV3"] = "Standard_NC6s_v3";
    VirtualMachineSizeTypes["StandardNC12sV3"] = "Standard_NC12s_v3";
    VirtualMachineSizeTypes["StandardNC24sV3"] = "Standard_NC24s_v3";
    VirtualMachineSizeTypes["StandardNC24rsV3"] = "Standard_NC24rs_v3";
    VirtualMachineSizeTypes["StandardND6s"] = "Standard_ND6s";
    VirtualMachineSizeTypes["StandardND12s"] = "Standard_ND12s";
    VirtualMachineSizeTypes["StandardND24s"] = "Standard_ND24s";
    VirtualMachineSizeTypes["StandardND24rs"] = "Standard_ND24rs";
    VirtualMachineSizeTypes["StandardNV6"] = "Standard_NV6";
    VirtualMachineSizeTypes["StandardNV12"] = "Standard_NV12";
    VirtualMachineSizeTypes["StandardNV24"] = "Standard_NV24";
})(VirtualMachineSizeTypes || (VirtualMachineSizeTypes = {}));
/**
 * Defines values for CachingTypes.
 * Possible values include: 'None', 'ReadOnly', 'ReadWrite'
 * @readonly
 * @enum {string}
 */
export var CachingTypes;
(function (CachingTypes) {
    CachingTypes["None"] = "None";
    CachingTypes["ReadOnly"] = "ReadOnly";
    CachingTypes["ReadWrite"] = "ReadWrite";
})(CachingTypes || (CachingTypes = {}));
/**
 * Defines values for DiskCreateOptionTypes.
 * Possible values include: 'FromImage', 'Empty', 'Attach'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: DiskCreateOptionTypes =
 * <DiskCreateOptionTypes>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export var DiskCreateOptionTypes;
(function (DiskCreateOptionTypes) {
    DiskCreateOptionTypes["FromImage"] = "FromImage";
    DiskCreateOptionTypes["Empty"] = "Empty";
    DiskCreateOptionTypes["Attach"] = "Attach";
})(DiskCreateOptionTypes || (DiskCreateOptionTypes = {}));
/**
 * Defines values for StorageAccountTypes.
 * Possible values include: 'Standard_LRS', 'Premium_LRS', 'StandardSSD_LRS',
 * 'UltraSSD_LRS'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: StorageAccountTypes =
 * <StorageAccountTypes>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export var StorageAccountTypes;
(function (StorageAccountTypes) {
    StorageAccountTypes["StandardLRS"] = "Standard_LRS";
    StorageAccountTypes["PremiumLRS"] = "Premium_LRS";
    StorageAccountTypes["StandardSSDLRS"] = "StandardSSD_LRS";
    StorageAccountTypes["UltraSSDLRS"] = "UltraSSD_LRS";
})(StorageAccountTypes || (StorageAccountTypes = {}));
/**
 * Defines values for PassNames.
 * Possible values include: 'OobeSystem'
 * @readonly
 * @enum {string}
 */
export var PassNames;
(function (PassNames) {
    PassNames["OobeSystem"] = "OobeSystem";
})(PassNames || (PassNames = {}));
/**
 * Defines values for ComponentNames.
 * Possible values include: 'Microsoft-Windows-Shell-Setup'
 * @readonly
 * @enum {string}
 */
export var ComponentNames;
(function (ComponentNames) {
    ComponentNames["MicrosoftWindowsShellSetup"] = "Microsoft-Windows-Shell-Setup";
})(ComponentNames || (ComponentNames = {}));
/**
 * Defines values for SettingNames.
 * Possible values include: 'AutoLogon', 'FirstLogonCommands'
 * @readonly
 * @enum {string}
 */
export var SettingNames;
(function (SettingNames) {
    SettingNames["AutoLogon"] = "AutoLogon";
    SettingNames["FirstLogonCommands"] = "FirstLogonCommands";
})(SettingNames || (SettingNames = {}));
/**
 * Defines values for ProtocolTypes.
 * Possible values include: 'Http', 'Https'
 * @readonly
 * @enum {string}
 */
export var ProtocolTypes;
(function (ProtocolTypes) {
    ProtocolTypes["Http"] = "Http";
    ProtocolTypes["Https"] = "Https";
})(ProtocolTypes || (ProtocolTypes = {}));
/**
 * Defines values for ResourceIdentityType.
 * Possible values include: 'SystemAssigned', 'UserAssigned', 'SystemAssigned,
 * UserAssigned', 'None'
 * @readonly
 * @enum {string}
 */
export var ResourceIdentityType;
(function (ResourceIdentityType) {
    ResourceIdentityType["SystemAssigned"] = "SystemAssigned";
    ResourceIdentityType["UserAssigned"] = "UserAssigned";
    ResourceIdentityType["SystemAssignedUserAssigned"] = "SystemAssigned, UserAssigned";
    ResourceIdentityType["None"] = "None";
})(ResourceIdentityType || (ResourceIdentityType = {}));
/**
 * Defines values for MaintenanceOperationResultCodeTypes.
 * Possible values include: 'None', 'RetryLater', 'MaintenanceAborted',
 * 'MaintenanceCompleted'
 * @readonly
 * @enum {string}
 */
export var MaintenanceOperationResultCodeTypes;
(function (MaintenanceOperationResultCodeTypes) {
    MaintenanceOperationResultCodeTypes["None"] = "None";
    MaintenanceOperationResultCodeTypes["RetryLater"] = "RetryLater";
    MaintenanceOperationResultCodeTypes["MaintenanceAborted"] = "MaintenanceAborted";
    MaintenanceOperationResultCodeTypes["MaintenanceCompleted"] = "MaintenanceCompleted";
})(MaintenanceOperationResultCodeTypes || (MaintenanceOperationResultCodeTypes = {}));
/**
 * Defines values for UpgradeMode.
 * Possible values include: 'Automatic', 'Manual', 'Rolling'
 * @readonly
 * @enum {string}
 */
export var UpgradeMode;
(function (UpgradeMode) {
    UpgradeMode["Automatic"] = "Automatic";
    UpgradeMode["Manual"] = "Manual";
    UpgradeMode["Rolling"] = "Rolling";
})(UpgradeMode || (UpgradeMode = {}));
/**
 * Defines values for OperatingSystemStateTypes.
 * Possible values include: 'Generalized', 'Specialized'
 * @readonly
 * @enum {string}
 */
export var OperatingSystemStateTypes;
(function (OperatingSystemStateTypes) {
    OperatingSystemStateTypes["Generalized"] = "Generalized";
    OperatingSystemStateTypes["Specialized"] = "Specialized";
})(OperatingSystemStateTypes || (OperatingSystemStateTypes = {}));
/**
 * Defines values for IPVersion.
 * Possible values include: 'IPv4', 'IPv6'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: IPVersion = <IPVersion>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export var IPVersion;
(function (IPVersion) {
    IPVersion["IPv4"] = "IPv4";
    IPVersion["IPv6"] = "IPv6";
})(IPVersion || (IPVersion = {}));
/**
 * Defines values for VirtualMachinePriorityTypes.
 * Possible values include: 'Regular', 'Low'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: VirtualMachinePriorityTypes =
 * <VirtualMachinePriorityTypes>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export var VirtualMachinePriorityTypes;
(function (VirtualMachinePriorityTypes) {
    VirtualMachinePriorityTypes["Regular"] = "Regular";
    VirtualMachinePriorityTypes["Low"] = "Low";
})(VirtualMachinePriorityTypes || (VirtualMachinePriorityTypes = {}));
/**
 * Defines values for VirtualMachineEvictionPolicyTypes.
 * Possible values include: 'Deallocate', 'Delete'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: VirtualMachineEvictionPolicyTypes =
 * <VirtualMachineEvictionPolicyTypes>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export var VirtualMachineEvictionPolicyTypes;
(function (VirtualMachineEvictionPolicyTypes) {
    VirtualMachineEvictionPolicyTypes["Deallocate"] = "Deallocate";
    VirtualMachineEvictionPolicyTypes["Delete"] = "Delete";
})(VirtualMachineEvictionPolicyTypes || (VirtualMachineEvictionPolicyTypes = {}));
/**
 * Defines values for VirtualMachineScaleSetSkuScaleType.
 * Possible values include: 'Automatic', 'None'
 * @readonly
 * @enum {string}
 */
export var VirtualMachineScaleSetSkuScaleType;
(function (VirtualMachineScaleSetSkuScaleType) {
    VirtualMachineScaleSetSkuScaleType["Automatic"] = "Automatic";
    VirtualMachineScaleSetSkuScaleType["None"] = "None";
})(VirtualMachineScaleSetSkuScaleType || (VirtualMachineScaleSetSkuScaleType = {}));
/**
 * Defines values for UpgradeState.
 * Possible values include: 'RollingForward', 'Cancelled', 'Completed',
 * 'Faulted'
 * @readonly
 * @enum {string}
 */
export var UpgradeState;
(function (UpgradeState) {
    UpgradeState["RollingForward"] = "RollingForward";
    UpgradeState["Cancelled"] = "Cancelled";
    UpgradeState["Completed"] = "Completed";
    UpgradeState["Faulted"] = "Faulted";
})(UpgradeState || (UpgradeState = {}));
/**
 * Defines values for UpgradeOperationInvoker.
 * Possible values include: 'Unknown', 'User', 'Platform'
 * @readonly
 * @enum {string}
 */
export var UpgradeOperationInvoker;
(function (UpgradeOperationInvoker) {
    UpgradeOperationInvoker["Unknown"] = "Unknown";
    UpgradeOperationInvoker["User"] = "User";
    UpgradeOperationInvoker["Platform"] = "Platform";
})(UpgradeOperationInvoker || (UpgradeOperationInvoker = {}));
/**
 * Defines values for RollingUpgradeStatusCode.
 * Possible values include: 'RollingForward', 'Cancelled', 'Completed',
 * 'Faulted'
 * @readonly
 * @enum {string}
 */
export var RollingUpgradeStatusCode;
(function (RollingUpgradeStatusCode) {
    RollingUpgradeStatusCode["RollingForward"] = "RollingForward";
    RollingUpgradeStatusCode["Cancelled"] = "Cancelled";
    RollingUpgradeStatusCode["Completed"] = "Completed";
    RollingUpgradeStatusCode["Faulted"] = "Faulted";
})(RollingUpgradeStatusCode || (RollingUpgradeStatusCode = {}));
/**
 * Defines values for RollingUpgradeActionType.
 * Possible values include: 'Start', 'Cancel'
 * @readonly
 * @enum {string}
 */
export var RollingUpgradeActionType;
(function (RollingUpgradeActionType) {
    RollingUpgradeActionType["Start"] = "Start";
    RollingUpgradeActionType["Cancel"] = "Cancel";
})(RollingUpgradeActionType || (RollingUpgradeActionType = {}));
/**
 * Defines values for IntervalInMins.
 * Possible values include: 'ThreeMins', 'FiveMins', 'ThirtyMins', 'SixtyMins'
 * @readonly
 * @enum {string}
 */
export var IntervalInMins;
(function (IntervalInMins) {
    IntervalInMins["ThreeMins"] = "ThreeMins";
    IntervalInMins["FiveMins"] = "FiveMins";
    IntervalInMins["ThirtyMins"] = "ThirtyMins";
    IntervalInMins["SixtyMins"] = "SixtyMins";
})(IntervalInMins || (IntervalInMins = {}));
/**
 * Defines values for ResourceSkuCapacityScaleType.
 * Possible values include: 'Automatic', 'Manual', 'None'
 * @readonly
 * @enum {string}
 */
export var ResourceSkuCapacityScaleType;
(function (ResourceSkuCapacityScaleType) {
    ResourceSkuCapacityScaleType["Automatic"] = "Automatic";
    ResourceSkuCapacityScaleType["Manual"] = "Manual";
    ResourceSkuCapacityScaleType["None"] = "None";
})(ResourceSkuCapacityScaleType || (ResourceSkuCapacityScaleType = {}));
/**
 * Defines values for ResourceSkuRestrictionsType.
 * Possible values include: 'Location', 'Zone'
 * @readonly
 * @enum {string}
 */
export var ResourceSkuRestrictionsType;
(function (ResourceSkuRestrictionsType) {
    ResourceSkuRestrictionsType["Location"] = "Location";
    ResourceSkuRestrictionsType["Zone"] = "Zone";
})(ResourceSkuRestrictionsType || (ResourceSkuRestrictionsType = {}));
/**
 * Defines values for ResourceSkuRestrictionsReasonCode.
 * Possible values include: 'QuotaId', 'NotAvailableForSubscription'
 * @readonly
 * @enum {string}
 */
export var ResourceSkuRestrictionsReasonCode;
(function (ResourceSkuRestrictionsReasonCode) {
    ResourceSkuRestrictionsReasonCode["QuotaId"] = "QuotaId";
    ResourceSkuRestrictionsReasonCode["NotAvailableForSubscription"] = "NotAvailableForSubscription";
})(ResourceSkuRestrictionsReasonCode || (ResourceSkuRestrictionsReasonCode = {}));
/**
 * Defines values for DiskStorageAccountTypes.
 * Possible values include: 'Standard_LRS', 'Premium_LRS', 'StandardSSD_LRS',
 * 'UltraSSD_LRS'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: DiskStorageAccountTypes =
 * <DiskStorageAccountTypes>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export var DiskStorageAccountTypes;
(function (DiskStorageAccountTypes) {
    DiskStorageAccountTypes["StandardLRS"] = "Standard_LRS";
    DiskStorageAccountTypes["PremiumLRS"] = "Premium_LRS";
    DiskStorageAccountTypes["StandardSSDLRS"] = "StandardSSD_LRS";
    DiskStorageAccountTypes["UltraSSDLRS"] = "UltraSSD_LRS";
})(DiskStorageAccountTypes || (DiskStorageAccountTypes = {}));
/**
 * Defines values for DiskCreateOption.
 * Possible values include: 'Empty', 'Attach', 'FromImage', 'Import', 'Copy',
 * 'Restore'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: DiskCreateOption =
 * <DiskCreateOption>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export var DiskCreateOption;
(function (DiskCreateOption) {
    DiskCreateOption["Empty"] = "Empty";
    DiskCreateOption["Attach"] = "Attach";
    DiskCreateOption["FromImage"] = "FromImage";
    DiskCreateOption["Import"] = "Import";
    DiskCreateOption["Copy"] = "Copy";
    DiskCreateOption["Restore"] = "Restore";
})(DiskCreateOption || (DiskCreateOption = {}));
/**
 * Defines values for SnapshotStorageAccountTypes.
 * Possible values include: 'Standard_LRS', 'Premium_LRS', 'Standard_ZRS'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SnapshotStorageAccountTypes =
 * <SnapshotStorageAccountTypes>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export var SnapshotStorageAccountTypes;
(function (SnapshotStorageAccountTypes) {
    SnapshotStorageAccountTypes["StandardLRS"] = "Standard_LRS";
    SnapshotStorageAccountTypes["PremiumLRS"] = "Premium_LRS";
    SnapshotStorageAccountTypes["StandardZRS"] = "Standard_ZRS";
})(SnapshotStorageAccountTypes || (SnapshotStorageAccountTypes = {}));
/**
 * Defines values for AccessLevel.
 * Possible values include: 'None', 'Read'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: AccessLevel =
 * <AccessLevel>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export var AccessLevel;
(function (AccessLevel) {
    AccessLevel["None"] = "None";
    AccessLevel["Read"] = "Read";
})(AccessLevel || (AccessLevel = {}));
/**
 * Defines values for ContainerServiceOrchestratorTypes.
 * Possible values include: 'Swarm', 'DCOS', 'Custom', 'Kubernetes'
 * @readonly
 * @enum {string}
 */
export var ContainerServiceOrchestratorTypes;
(function (ContainerServiceOrchestratorTypes) {
    ContainerServiceOrchestratorTypes["Swarm"] = "Swarm";
    ContainerServiceOrchestratorTypes["DCOS"] = "DCOS";
    ContainerServiceOrchestratorTypes["Custom"] = "Custom";
    ContainerServiceOrchestratorTypes["Kubernetes"] = "Kubernetes";
})(ContainerServiceOrchestratorTypes || (ContainerServiceOrchestratorTypes = {}));
/**
 * Defines values for ContainerServiceVMSizeTypes.
 * Possible values include: 'Standard_A0', 'Standard_A1', 'Standard_A2',
 * 'Standard_A3', 'Standard_A4', 'Standard_A5', 'Standard_A6', 'Standard_A7',
 * 'Standard_A8', 'Standard_A9', 'Standard_A10', 'Standard_A11', 'Standard_D1',
 * 'Standard_D2', 'Standard_D3', 'Standard_D4', 'Standard_D11', 'Standard_D12',
 * 'Standard_D13', 'Standard_D14', 'Standard_D1_v2', 'Standard_D2_v2',
 * 'Standard_D3_v2', 'Standard_D4_v2', 'Standard_D5_v2', 'Standard_D11_v2',
 * 'Standard_D12_v2', 'Standard_D13_v2', 'Standard_D14_v2', 'Standard_G1',
 * 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5', 'Standard_DS1',
 * 'Standard_DS2', 'Standard_DS3', 'Standard_DS4', 'Standard_DS11',
 * 'Standard_DS12', 'Standard_DS13', 'Standard_DS14', 'Standard_GS1',
 * 'Standard_GS2', 'Standard_GS3', 'Standard_GS4', 'Standard_GS5'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ContainerServiceVMSizeTypes =
 * <ContainerServiceVMSizeTypes>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export var ContainerServiceVMSizeTypes;
(function (ContainerServiceVMSizeTypes) {
    ContainerServiceVMSizeTypes["StandardA0"] = "Standard_A0";
    ContainerServiceVMSizeTypes["StandardA1"] = "Standard_A1";
    ContainerServiceVMSizeTypes["StandardA2"] = "Standard_A2";
    ContainerServiceVMSizeTypes["StandardA3"] = "Standard_A3";
    ContainerServiceVMSizeTypes["StandardA4"] = "Standard_A4";
    ContainerServiceVMSizeTypes["StandardA5"] = "Standard_A5";
    ContainerServiceVMSizeTypes["StandardA6"] = "Standard_A6";
    ContainerServiceVMSizeTypes["StandardA7"] = "Standard_A7";
    ContainerServiceVMSizeTypes["StandardA8"] = "Standard_A8";
    ContainerServiceVMSizeTypes["StandardA9"] = "Standard_A9";
    ContainerServiceVMSizeTypes["StandardA10"] = "Standard_A10";
    ContainerServiceVMSizeTypes["StandardA11"] = "Standard_A11";
    ContainerServiceVMSizeTypes["StandardD1"] = "Standard_D1";
    ContainerServiceVMSizeTypes["StandardD2"] = "Standard_D2";
    ContainerServiceVMSizeTypes["StandardD3"] = "Standard_D3";
    ContainerServiceVMSizeTypes["StandardD4"] = "Standard_D4";
    ContainerServiceVMSizeTypes["StandardD11"] = "Standard_D11";
    ContainerServiceVMSizeTypes["StandardD12"] = "Standard_D12";
    ContainerServiceVMSizeTypes["StandardD13"] = "Standard_D13";
    ContainerServiceVMSizeTypes["StandardD14"] = "Standard_D14";
    ContainerServiceVMSizeTypes["StandardD1V2"] = "Standard_D1_v2";
    ContainerServiceVMSizeTypes["StandardD2V2"] = "Standard_D2_v2";
    ContainerServiceVMSizeTypes["StandardD3V2"] = "Standard_D3_v2";
    ContainerServiceVMSizeTypes["StandardD4V2"] = "Standard_D4_v2";
    ContainerServiceVMSizeTypes["StandardD5V2"] = "Standard_D5_v2";
    ContainerServiceVMSizeTypes["StandardD11V2"] = "Standard_D11_v2";
    ContainerServiceVMSizeTypes["StandardD12V2"] = "Standard_D12_v2";
    ContainerServiceVMSizeTypes["StandardD13V2"] = "Standard_D13_v2";
    ContainerServiceVMSizeTypes["StandardD14V2"] = "Standard_D14_v2";
    ContainerServiceVMSizeTypes["StandardG1"] = "Standard_G1";
    ContainerServiceVMSizeTypes["StandardG2"] = "Standard_G2";
    ContainerServiceVMSizeTypes["StandardG3"] = "Standard_G3";
    ContainerServiceVMSizeTypes["StandardG4"] = "Standard_G4";
    ContainerServiceVMSizeTypes["StandardG5"] = "Standard_G5";
    ContainerServiceVMSizeTypes["StandardDS1"] = "Standard_DS1";
    ContainerServiceVMSizeTypes["StandardDS2"] = "Standard_DS2";
    ContainerServiceVMSizeTypes["StandardDS3"] = "Standard_DS3";
    ContainerServiceVMSizeTypes["StandardDS4"] = "Standard_DS4";
    ContainerServiceVMSizeTypes["StandardDS11"] = "Standard_DS11";
    ContainerServiceVMSizeTypes["StandardDS12"] = "Standard_DS12";
    ContainerServiceVMSizeTypes["StandardDS13"] = "Standard_DS13";
    ContainerServiceVMSizeTypes["StandardDS14"] = "Standard_DS14";
    ContainerServiceVMSizeTypes["StandardGS1"] = "Standard_GS1";
    ContainerServiceVMSizeTypes["StandardGS2"] = "Standard_GS2";
    ContainerServiceVMSizeTypes["StandardGS3"] = "Standard_GS3";
    ContainerServiceVMSizeTypes["StandardGS4"] = "Standard_GS4";
    ContainerServiceVMSizeTypes["StandardGS5"] = "Standard_GS5";
})(ContainerServiceVMSizeTypes || (ContainerServiceVMSizeTypes = {}));
/**
 * Defines values for InstanceViewTypes.
 * Possible values include: 'instanceView'
 * @readonly
 * @enum {string}
 */
export var InstanceViewTypes;
(function (InstanceViewTypes) {
    InstanceViewTypes["InstanceView"] = "instanceView";
})(InstanceViewTypes || (InstanceViewTypes = {}));
//# sourceMappingURL=index.js.map