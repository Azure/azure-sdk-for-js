/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as msRest from "ms-rest-js";
import * as Mappers from "../models/logAnalyticsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a LogAnalytics. */
var LogAnalytics = /** @class */ (function () {
    /**
     * Create a LogAnalytics.
     * @param {ComputeManagementClientContext} client Reference to the service client.
     */
    function LogAnalytics(client) {
        this.client = client;
    }
    /**
     * Export logs that show Api requests made by this subscription in the given time window to show
     * throttling activities.
     *
     * @param {RequestRateByIntervalInput} parameters Parameters supplied to the LogAnalytics
     * getRequestRateByInterval Api.
     *
     * @param {string} location The location upon which virtual-machine-sizes is queried.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    LogAnalytics.prototype.exportRequestRateByInterval = function (parameters, location, options) {
        return this.beginExportRequestRateByInterval(parameters, location, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Export logs that show total throttled Api requests for this subscription in the given time
     * window.
     *
     * @param {ThrottledRequestsInput} parameters Parameters supplied to the LogAnalytics
     * getThrottledRequests Api.
     *
     * @param {string} location The location upon which virtual-machine-sizes is queried.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    LogAnalytics.prototype.exportThrottledRequests = function (parameters, location, options) {
        return this.beginExportThrottledRequests(parameters, location, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Export logs that show Api requests made by this subscription in the given time window to show
     * throttling activities.
     *
     * @param {RequestRateByIntervalInput} parameters Parameters supplied to the LogAnalytics
     * getRequestRateByInterval Api.
     *
     * @param {string} location The location upon which virtual-machine-sizes is queried.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    LogAnalytics.prototype.beginExportRequestRateByInterval = function (parameters, location, options) {
        return this.client.sendLRORequest({
            parameters: parameters,
            location: location,
            options: options
        }, beginExportRequestRateByIntervalOperationSpec, options);
    };
    /**
     * Export logs that show total throttled Api requests for this subscription in the given time
     * window.
     *
     * @param {ThrottledRequestsInput} parameters Parameters supplied to the LogAnalytics
     * getThrottledRequests Api.
     *
     * @param {string} location The location upon which virtual-machine-sizes is queried.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    LogAnalytics.prototype.beginExportThrottledRequests = function (parameters, location, options) {
        return this.client.sendLRORequest({
            parameters: parameters,
            location: location,
            options: options
        }, beginExportThrottledRequestsOperationSpec, options);
    };
    return LogAnalytics;
}());
export { LogAnalytics };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var beginExportRequestRateByIntervalOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/logAnalytics/apiAccess/getRequestRateByInterval",
    urlParameters: [
        Parameters.location1,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign({}, Mappers.RequestRateByIntervalInput, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.LogAnalyticsOperationResult
        },
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginExportThrottledRequestsOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/logAnalytics/apiAccess/getThrottledRequests",
    urlParameters: [
        Parameters.location1,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign({}, Mappers.ThrottledRequestsInput, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.LogAnalyticsOperationResult
        },
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=logAnalytics.js.map