/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as msRest from "ms-rest-js";
import * as Mappers from "../models/virtualMachinesMappers";
import * as Parameters from "../models/parameters";
/** Class representing a VirtualMachines. */
var VirtualMachines = /** @class */ (function () {
    /**
     * Create a VirtualMachines.
     * @param {ComputeManagementClientContext} client Reference to the service client.
     */
    function VirtualMachines(client) {
        this.client = client;
    }
    /**
     * Captures the VM by copying virtual hard disks of the VM and outputs a template that can be used
     * to create similar VMs.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {VirtualMachineCaptureParameters} parameters Parameters supplied to the Capture Virtual
     * Machine operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualMachines.prototype.capture = function (resourceGroupName, vmName, parameters, options) {
        return this.beginCapture(resourceGroupName, vmName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * The operation to create or update a virtual machine.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {VirtualMachine} parameters Parameters supplied to the Create Virtual Machine operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualMachines.prototype.createOrUpdate = function (resourceGroupName, vmName, parameters, options) {
        return this.beginCreateOrUpdate(resourceGroupName, vmName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * The operation to update a virtual machine.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {VirtualMachineUpdate} parameters Parameters supplied to the Update Virtual Machine
     * operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualMachines.prototype.update = function (resourceGroupName, vmName, parameters, options) {
        return this.beginUpdate(resourceGroupName, vmName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * The operation to delete a virtual machine.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualMachines.prototype.deleteMethod = function (resourceGroupName, vmName, options) {
        return this.beginDeleteMethod(resourceGroupName, vmName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    VirtualMachines.prototype.get = function (resourceGroupName, vmName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            vmName: vmName,
            options: options
        }, getOperationSpec, callback);
    };
    VirtualMachines.prototype.instanceView = function (resourceGroupName, vmName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            vmName: vmName,
            options: options
        }, instanceViewOperationSpec, callback);
    };
    /**
     * Converts virtual machine disks from blob-based to managed disks. Virtual machine must be
     * stop-deallocated before invoking this operation.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualMachines.prototype.convertToManagedDisks = function (resourceGroupName, vmName, options) {
        return this.beginConvertToManagedDisks(resourceGroupName, vmName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Shuts down the virtual machine and releases the compute resources. You are not billed for the
     * compute resources that this virtual machine uses.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualMachines.prototype.deallocate = function (resourceGroupName, vmName, options) {
        return this.beginDeallocate(resourceGroupName, vmName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    VirtualMachines.prototype.generalize = function (resourceGroupName, vmName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            vmName: vmName,
            options: options
        }, generalizeOperationSpec, callback);
    };
    VirtualMachines.prototype.list = function (resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            options: options
        }, listOperationSpec, callback);
    };
    VirtualMachines.prototype.listAll = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listAllOperationSpec, callback);
    };
    VirtualMachines.prototype.listAvailableSizes = function (resourceGroupName, vmName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            vmName: vmName,
            options: options
        }, listAvailableSizesOperationSpec, callback);
    };
    /**
     * The operation to power off (stop) a virtual machine. The virtual machine can be restarted with
     * the same provisioned resources. You are still charged for this virtual machine.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualMachines.prototype.powerOff = function (resourceGroupName, vmName, options) {
        return this.beginPowerOff(resourceGroupName, vmName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * The operation to restart a virtual machine.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualMachines.prototype.restart = function (resourceGroupName, vmName, options) {
        return this.beginRestart(resourceGroupName, vmName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * The operation to start a virtual machine.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualMachines.prototype.start = function (resourceGroupName, vmName, options) {
        return this.beginStart(resourceGroupName, vmName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * The operation to redeploy a virtual machine.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualMachines.prototype.redeploy = function (resourceGroupName, vmName, options) {
        return this.beginRedeploy(resourceGroupName, vmName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * The operation to perform maintenance on a virtual machine.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualMachines.prototype.performMaintenance = function (resourceGroupName, vmName, options) {
        return this.beginPerformMaintenance(resourceGroupName, vmName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Run command on the VM.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {RunCommandInput} parameters Parameters supplied to the Run command operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualMachines.prototype.runCommand = function (resourceGroupName, vmName, parameters, options) {
        return this.beginRunCommand(resourceGroupName, vmName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Captures the VM by copying virtual hard disks of the VM and outputs a template that can be used
     * to create similar VMs.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {VirtualMachineCaptureParameters} parameters Parameters supplied to the Capture Virtual
     * Machine operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualMachines.prototype.beginCapture = function (resourceGroupName, vmName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmName: vmName,
            parameters: parameters,
            options: options
        }, beginCaptureOperationSpec, options);
    };
    /**
     * The operation to create or update a virtual machine.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {VirtualMachine} parameters Parameters supplied to the Create Virtual Machine operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualMachines.prototype.beginCreateOrUpdate = function (resourceGroupName, vmName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmName: vmName,
            parameters: parameters,
            options: options
        }, beginCreateOrUpdateOperationSpec, options);
    };
    /**
     * The operation to update a virtual machine.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {VirtualMachineUpdate} parameters Parameters supplied to the Update Virtual Machine
     * operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualMachines.prototype.beginUpdate = function (resourceGroupName, vmName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmName: vmName,
            parameters: parameters,
            options: options
        }, beginUpdateOperationSpec, options);
    };
    /**
     * The operation to delete a virtual machine.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualMachines.prototype.beginDeleteMethod = function (resourceGroupName, vmName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmName: vmName,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    /**
     * Converts virtual machine disks from blob-based to managed disks. Virtual machine must be
     * stop-deallocated before invoking this operation.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualMachines.prototype.beginConvertToManagedDisks = function (resourceGroupName, vmName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmName: vmName,
            options: options
        }, beginConvertToManagedDisksOperationSpec, options);
    };
    /**
     * Shuts down the virtual machine and releases the compute resources. You are not billed for the
     * compute resources that this virtual machine uses.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualMachines.prototype.beginDeallocate = function (resourceGroupName, vmName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmName: vmName,
            options: options
        }, beginDeallocateOperationSpec, options);
    };
    /**
     * The operation to power off (stop) a virtual machine. The virtual machine can be restarted with
     * the same provisioned resources. You are still charged for this virtual machine.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualMachines.prototype.beginPowerOff = function (resourceGroupName, vmName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmName: vmName,
            options: options
        }, beginPowerOffOperationSpec, options);
    };
    /**
     * The operation to restart a virtual machine.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualMachines.prototype.beginRestart = function (resourceGroupName, vmName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmName: vmName,
            options: options
        }, beginRestartOperationSpec, options);
    };
    /**
     * The operation to start a virtual machine.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualMachines.prototype.beginStart = function (resourceGroupName, vmName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmName: vmName,
            options: options
        }, beginStartOperationSpec, options);
    };
    /**
     * The operation to redeploy a virtual machine.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualMachines.prototype.beginRedeploy = function (resourceGroupName, vmName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmName: vmName,
            options: options
        }, beginRedeployOperationSpec, options);
    };
    /**
     * The operation to perform maintenance on a virtual machine.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualMachines.prototype.beginPerformMaintenance = function (resourceGroupName, vmName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmName: vmName,
            options: options
        }, beginPerformMaintenanceOperationSpec, options);
    };
    /**
     * Run command on the VM.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine.
     *
     * @param {RunCommandInput} parameters Parameters supplied to the Run command operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualMachines.prototype.beginRunCommand = function (resourceGroupName, vmName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmName: vmName,
            parameters: parameters,
            options: options
        }, beginRunCommandOperationSpec, options);
    };
    VirtualMachines.prototype.listNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    VirtualMachines.prototype.listAllNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listAllNextOperationSpec, callback);
    };
    return VirtualMachines;
}());
export { VirtualMachines };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.expand1,
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachine
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var instanceViewOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/instanceView",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineInstanceView
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var generalizeOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/generalize",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listAllOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/virtualMachines",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listAvailableSizesOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/vmSizes",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineSizeListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCaptureOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/capture",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign({}, Mappers.VirtualMachineCaptureParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineCaptureResult
        },
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign({}, Mappers.VirtualMachine, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachine
        },
        201: {
            bodyMapper: Mappers.VirtualMachine
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginUpdateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign({}, Mappers.VirtualMachineUpdate, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachine
        },
        201: {
            bodyMapper: Mappers.VirtualMachine
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginConvertToManagedDisksOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/convertToManagedDisks",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeallocateOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/deallocate",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginPowerOffOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/powerOff",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginRestartOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/restart",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginStartOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/start",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginRedeployOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/redeploy",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginPerformMaintenanceOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/performMaintenance",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginRunCommandOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/runCommand",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign({}, Mappers.RunCommandInput, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.RunCommandResult
        },
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listAllNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=virtualMachines.js.map