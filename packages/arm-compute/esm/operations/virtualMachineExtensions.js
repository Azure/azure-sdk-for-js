/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as msRest from "ms-rest-js";
import * as Mappers from "../models/virtualMachineExtensionsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a VirtualMachineExtensions. */
var VirtualMachineExtensions = /** @class */ (function () {
    /**
     * Create a VirtualMachineExtensions.
     * @param {ComputeManagementClientContext} client Reference to the service client.
     */
    function VirtualMachineExtensions(client) {
        this.client = client;
    }
    /**
     * The operation to create or update the extension.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine where the extension should be created or
     * updated.
     *
     * @param {string} vmExtensionName The name of the virtual machine extension.
     *
     * @param {VirtualMachineExtension} extensionParameters Parameters supplied to the Create Virtual
     * Machine Extension operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualMachineExtensions.prototype.createOrUpdate = function (resourceGroupName, vmName, vmExtensionName, extensionParameters, options) {
        return this.beginCreateOrUpdate(resourceGroupName, vmName, vmExtensionName, extensionParameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * The operation to update the extension.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine where the extension should be updated.
     *
     * @param {string} vmExtensionName The name of the virtual machine extension.
     *
     * @param {VirtualMachineExtensionUpdate} extensionParameters Parameters supplied to the Update
     * Virtual Machine Extension operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualMachineExtensions.prototype.update = function (resourceGroupName, vmName, vmExtensionName, extensionParameters, options) {
        return this.beginUpdate(resourceGroupName, vmName, vmExtensionName, extensionParameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * The operation to delete the extension.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine where the extension should be deleted.
     *
     * @param {string} vmExtensionName The name of the virtual machine extension.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualMachineExtensions.prototype.deleteMethod = function (resourceGroupName, vmName, vmExtensionName, options) {
        return this.beginDeleteMethod(resourceGroupName, vmName, vmExtensionName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    VirtualMachineExtensions.prototype.get = function (resourceGroupName, vmName, vmExtensionName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            vmName: vmName,
            vmExtensionName: vmExtensionName,
            options: options
        }, getOperationSpec, callback);
    };
    VirtualMachineExtensions.prototype.list = function (resourceGroupName, vmName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            vmName: vmName,
            options: options
        }, listOperationSpec, callback);
    };
    /**
     * The operation to create or update the extension.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine where the extension should be created or
     * updated.
     *
     * @param {string} vmExtensionName The name of the virtual machine extension.
     *
     * @param {VirtualMachineExtension} extensionParameters Parameters supplied to the Create Virtual
     * Machine Extension operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualMachineExtensions.prototype.beginCreateOrUpdate = function (resourceGroupName, vmName, vmExtensionName, extensionParameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmName: vmName,
            vmExtensionName: vmExtensionName,
            extensionParameters: extensionParameters,
            options: options
        }, beginCreateOrUpdateOperationSpec, options);
    };
    /**
     * The operation to update the extension.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine where the extension should be updated.
     *
     * @param {string} vmExtensionName The name of the virtual machine extension.
     *
     * @param {VirtualMachineExtensionUpdate} extensionParameters Parameters supplied to the Update
     * Virtual Machine Extension operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualMachineExtensions.prototype.beginUpdate = function (resourceGroupName, vmName, vmExtensionName, extensionParameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmName: vmName,
            vmExtensionName: vmExtensionName,
            extensionParameters: extensionParameters,
            options: options
        }, beginUpdateOperationSpec, options);
    };
    /**
     * The operation to delete the extension.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} vmName The name of the virtual machine where the extension should be deleted.
     *
     * @param {string} vmExtensionName The name of the virtual machine extension.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    VirtualMachineExtensions.prototype.beginDeleteMethod = function (resourceGroupName, vmName, vmExtensionName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            vmName: vmName,
            vmExtensionName: vmExtensionName,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    return VirtualMachineExtensions;
}());
export { VirtualMachineExtensions };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/extensions/{vmExtensionName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmName,
        Parameters.vmExtensionName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.expand0,
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineExtension
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/extensions",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.expand0,
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineExtensionsListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/extensions/{vmExtensionName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmName,
        Parameters.vmExtensionName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "extensionParameters",
        mapper: __assign({}, Mappers.VirtualMachineExtension, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineExtension
        },
        201: {
            bodyMapper: Mappers.VirtualMachineExtension
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginUpdateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/extensions/{vmExtensionName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmName,
        Parameters.vmExtensionName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "extensionParameters",
        mapper: __assign({}, Mappers.VirtualMachineExtensionUpdate, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.VirtualMachineExtension
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/extensions/{vmExtensionName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.vmName,
        Parameters.vmExtensionName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=virtualMachineExtensions.js.map