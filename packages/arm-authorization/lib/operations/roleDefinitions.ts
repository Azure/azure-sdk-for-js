/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/roleDefinitionsMappers";
import * as Parameters from "../models/parameters";
import { AuthorizationManagementClientContext } from "../authorizationManagementClientContext";

/** Class representing a RoleDefinitions. */
export class RoleDefinitions {
  private readonly client: AuthorizationManagementClientContext;

  /**
   * Create a RoleDefinitions.
   * @param {AuthorizationManagementClientContext} client Reference to the service client.
   */
  constructor(client: AuthorizationManagementClientContext) {
    this.client = client;
  }

  /**
   * Deletes a role definition.
   *
   * @param {string} scope The scope of the role definition.
   *
   * @param {string} roleDefinitionId The ID of the role definition to delete.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  deleteMethod(scope: string, roleDefinitionId: string): Promise<Models.RoleDefinitionsDeleteMethodResponse>;
  deleteMethod(scope: string, roleDefinitionId: string, options: msRest.RequestOptionsBase): Promise<Models.RoleDefinitionsDeleteMethodResponse>;
  deleteMethod(scope: string, roleDefinitionId: string, callback: msRest.ServiceCallback<Models.RoleDefinition>): void;
  deleteMethod(scope: string, roleDefinitionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RoleDefinition>): void;
  deleteMethod(scope: string, roleDefinitionId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.RoleDefinition>): Promise<Models.RoleDefinitionsDeleteMethodResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        roleDefinitionId,
        options
      },
      deleteMethodOperationSpec,
      callback) as Promise<Models.RoleDefinitionsDeleteMethodResponse>;
  }

  /**
   * Get role definition by name (GUID).
   *
   * @param {string} scope The scope of the role definition.
   *
   * @param {string} roleDefinitionId The ID of the role definition.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  get(scope: string, roleDefinitionId: string): Promise<Models.RoleDefinitionsGetResponse>;
  get(scope: string, roleDefinitionId: string, options: msRest.RequestOptionsBase): Promise<Models.RoleDefinitionsGetResponse>;
  get(scope: string, roleDefinitionId: string, callback: msRest.ServiceCallback<Models.RoleDefinition>): void;
  get(scope: string, roleDefinitionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RoleDefinition>): void;
  get(scope: string, roleDefinitionId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.RoleDefinition>): Promise<Models.RoleDefinitionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        roleDefinitionId,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.RoleDefinitionsGetResponse>;
  }

  /**
   * Creates or updates a role definition.
   *
   * @param {string} scope The scope of the role definition.
   *
   * @param {string} roleDefinitionId The ID of the role definition.
   *
   * @param {RoleDefinition} roleDefinition The values for the role definition.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  createOrUpdate(scope: string, roleDefinitionId: string, roleDefinition: Models.RoleDefinition): Promise<Models.RoleDefinitionsCreateOrUpdateResponse>;
  createOrUpdate(scope: string, roleDefinitionId: string, roleDefinition: Models.RoleDefinition, options: msRest.RequestOptionsBase): Promise<Models.RoleDefinitionsCreateOrUpdateResponse>;
  createOrUpdate(scope: string, roleDefinitionId: string, roleDefinition: Models.RoleDefinition, callback: msRest.ServiceCallback<Models.RoleDefinition>): void;
  createOrUpdate(scope: string, roleDefinitionId: string, roleDefinition: Models.RoleDefinition, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RoleDefinition>): void;
  createOrUpdate(scope: string, roleDefinitionId: string, roleDefinition: Models.RoleDefinition, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.RoleDefinition>): Promise<Models.RoleDefinitionsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        roleDefinitionId,
        roleDefinition,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.RoleDefinitionsCreateOrUpdateResponse>;
  }

  /**
   * Get all role definitions that are applicable at scope and above.
   *
   * @param {string} scope The scope of the role definition.
   *
   * @param {RoleDefinitionsListOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  list(scope: string): Promise<Models.RoleDefinitionsListResponse>;
  list(scope: string, options: Models.RoleDefinitionsListOptionalParams): Promise<Models.RoleDefinitionsListResponse>;
  list(scope: string, callback: msRest.ServiceCallback<Models.RoleDefinitionListResult>): void;
  list(scope: string, options: Models.RoleDefinitionsListOptionalParams, callback: msRest.ServiceCallback<Models.RoleDefinitionListResult>): void;
  list(scope: string, options?: Models.RoleDefinitionsListOptionalParams, callback?: msRest.ServiceCallback<Models.RoleDefinitionListResult>): Promise<Models.RoleDefinitionsListResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.RoleDefinitionsListResponse>;
  }

  /**
   * Gets a role definition by ID.
   *
   * @param {string} roleId The fully qualified role definition ID. Use the format,
   * /subscriptions/{guid}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId} for
   * subscription level role definitions, or
   * /providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId} for tenant level role
   * definitions.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getById(roleId: string): Promise<Models.RoleDefinitionsGetByIdResponse>;
  getById(roleId: string, options: msRest.RequestOptionsBase): Promise<Models.RoleDefinitionsGetByIdResponse>;
  getById(roleId: string, callback: msRest.ServiceCallback<Models.RoleDefinition>): void;
  getById(roleId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RoleDefinition>): void;
  getById(roleId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.RoleDefinition>): Promise<Models.RoleDefinitionsGetByIdResponse> {
    return this.client.sendOperationRequest(
      {
        roleId,
        options
      },
      getByIdOperationSpec,
      callback) as Promise<Models.RoleDefinitionsGetByIdResponse>;
  }

  /**
   * Get all role definitions that are applicable at scope and above.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  listNext(nextPageLink: string): Promise<Models.RoleDefinitionsListNextResponse>;
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase): Promise<Models.RoleDefinitionsListNextResponse>;
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.RoleDefinitionListResult>): void;
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RoleDefinitionListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.RoleDefinitionListResult>): Promise<Models.RoleDefinitionsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.RoleDefinitionsListNextResponse>;
  }

}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "{scope}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId}",
  urlParameters: [
    Parameters.scope,
    Parameters.roleDefinitionId
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RoleDefinition
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{scope}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId}",
  urlParameters: [
    Parameters.scope,
    Parameters.roleDefinitionId
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RoleDefinition
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{scope}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId}",
  urlParameters: [
    Parameters.scope,
    Parameters.roleDefinitionId
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "roleDefinition",
    mapper: {
      ...Mappers.RoleDefinition,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.RoleDefinition
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{scope}/providers/Microsoft.Authorization/roleDefinitions",
  urlParameters: [
    Parameters.scope
  ],
  queryParameters: [
    Parameters.filter,
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RoleDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{roleId}",
  urlParameters: [
    Parameters.roleId
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RoleDefinition
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RoleDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
