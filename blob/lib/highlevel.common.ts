import { HttpResponse, TransferProgressEvent } from "ms-rest-js";

import * as Models from "./generated/models";
import { IBlobAccessConditions } from "./models";

/**
 * Option interface for UploadFileToBlockBlob and UploadSeekableStreamToBlockBlob.
 *
 * @export
 * @interface IUploadToBlockBlobOptions
 */
export interface IUploadToBlockBlobOptions {
  /**
   * Destination block blob size.
   *
   * @type {number}
   * @memberof IUploadToBlockBlobOptions
   */
  blockSize?: number;

  /**
   * Progress updater.
   *
   * @memberof IUploadToBlockBlobOptions
   */
  progress?: (progress: TransferProgressEvent) => void;

  /**
   * Blob HTTP Headers.
   *
   * @type {IBlobHTTPHeaders}
   * @memberof IUploadToBlockBlobOptions
   */
  blobHTTPHeaders?: Models.BlobHTTPHeaders;

  /**
   * Metadata of block blob.
   *
   * @type {{ [propertyName: string]: string }}
   * @memberof IUploadToBlockBlobOptions
   */
  metadata?: { [propertyName: string]: string };

  /**
   * Access conditions headers.
   *
   * @type {IBlobAccessConditions}
   * @memberof IUploadToBlockBlobOptions
   */
  blobAccessConditions?: IBlobAccessConditions;

  /**
   * Concurrency of parallel uploading. Must be >= 0.
   *
   * @type {number}
   * @memberof IUploadToBlockBlobOptions
   */
  parallelism?: number;
}

/**
 * Interface for UploadFileToBlockBlob and UploadBrowserDateToBlockBlob.
 *
 * @export
 * @interface IBlobUploadCommonResponse
 */
export interface IBlobUploadCommonResponse {
  /**
   * The ETag contains a value that you can use to perform operations conditionally. If the request
   * version is 2011-08-18 or newer, the ETag value will be in quotes.
   *
   * @type {string}
   * @memberof IBlobUploadCommonResponse
   */
  eTag: string;

  /**
   * Returns the date and time the container was last modified. Any operation that modifies the
   * blob, including an update of the blob's metadata or properties, changes the last-modified time
   * of the blob.
   *
   * @type {Date}
   * @memberof IBlobUploadCommonResponse
   */
  lastModified: Date;

  /**
   * If the blob has an MD5 hash and this operation is to read the full blob, this response header
   * is returned so that the client can check for message content integrity.
   *
   * @type {Uint8Array}
   * @memberof IBlobUploadCommonResponse
   */
  contentMD5: Uint8Array;

  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   *
   * @type {string}
   * @memberof IBlobUploadCommonResponse
   */
  requestId: string;

  /**
   * Indicates the version of the Blob service used to execute the request. This header is returned
   * for requests made against version 2009-09-19 and above.
   *
   * @type {string}
   * @memberof IBlobUploadCommonResponse
   */
  version: string;

  /**
   * UTC date/time value generated by the service that indicates the time at which the response was
   * initiated.
   *
   * @type {Date}
   * @memberof IBlobUploadCommonResponse
   */
  date: Date;

  /**
   * The value of this header is set to true if the contents of the request are successfully
   * encrypted using the specified algorithm, and false otherwise.
   *
   * @type {boolean}
   * @memberof IBlobUploadCommonResponse
   */
  isServerEncrypted: boolean;

  /**
   * Error code.
   *
   * @type {string}
   * @memberof IBlobUploadCommonResponse
   */
  errorCode: string;

  /**
   * The underlying HTTP response.
   *
   * @type {HttpResponse}
   * @memberof IBlobUploadCommonResponse
   */
  _response: HttpResponse;
}

/**
 * Option interface for DownloadBlockBlobToBuffer.
 *
 * @export
 * @interface IDownloadFromBlobOptions
 */
export interface IDownloadFromBlobOptions {
  /**
   * blockSize is the data every request trying to download.
   * Must be >= 0, if set to 0 or undefined, blockSize will automatically calculated according
   * to the blob size.
   *
   * @type {number}
   * @memberof IDownloadFromBlobOptions
   */
  blockSize?: number;

  /**
   * Progress updater.
   *
   * @memberof IDownloadFromBlobOptions
   */
  progress?: (progress: TransferProgressEvent) => void;

  /**
   * Access conditions headers.
   *
   * @type {IBlobAccessConditions}
   * @memberof IDownloadFromBlobOptions
   */
  blobAccessConditions?: IBlobAccessConditions;

  /**
   * Concurrency of parallel download.
   *
   * @type {number}
   * @memberof IDownloadFromBlobOptions
   */
  parallelism?: number;
}
