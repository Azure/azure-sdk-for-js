<#
.SYNOPSIS
Spell checks JS public API surface as expored to review/**/*.md

.DESCRIPTION
Attempts to find packages for which some of the API surface not generated by 
automation. In the case of those handwritten APIs, run spell check and exit 1 if
spelling errors are detected.

.PARAMETER ServiceDirectory
Scopes scanning to a particular service directory (e.g. `storage`). Otherwise
scan everything under the `sdk/` folder. Default is empty string (scan 
everything).

.EXAMPLE
./spell-check-public-api.ps1

Spell check all public API specs for all services under `/sdk`

.EXAMPLE
./spell-check-public-api.ps1 -ServiceDirectory storage

Spell check all public API specs for `sdk/storage`

#>
param (
  [Parameter(mandatory = $false)]
  $ServiceDirectory = ''
)

$REPO_ROOT = "$PSScriptRoot/../../"

$directoresToScan = @((Resolve-Path "$REPO_ROOT/sdk/$ServiceDirectory"))
if (!$ServiceDirectory) {
  $directoresToScan = Get-ChildItem -Path "$REPO_ROOT/sdk" -Directory
}

$packageDirectories = @()
foreach ($serviceDirectory in $directoresToScan) {
  $packageDirectories += Get-ChildItem -Path $serviceDirectory  -Directory
}

$packageFoldersToScan = $packageDirectories.Where({ 
    $packageJsonLocation = "$_/package.json"
    if (!(Test-Path $packageJsonLocation)) {
      Write-Host "Excluding $_. Package JSON not found ($packageJsonLocation)"
      return $false
    }

    $packageJsonContent = Get-Content $packageJsonLocation -Raw
    $packageJson = ConvertFrom-Json $packageJsonContent

    if ($packageJson.name.StartsWith('@azure/arm-')) { 
      Write-Host "Excluding $_. Package name starts with '@azure/arm-'"
      return $false
    }

    if ($packageJson.name.StartsWith('@azure-rest/')) { 
      Write-Host "Excluding $_. Package name starts with '@azure-rest/'"
      return $false
    }

    if ($packageJson.name.EndsWith('-rest')) { 
      Write-Host "Excluding $_. Package name ends with '-rest'"
      return $false
    }

    $swaggerReadmeLocation = "$_/swagger/README.md"
    if (Test-Path $swaggerReadmeLocation) { 
      $swaggerReadmeContent = Get-Content $swaggerReadmeLocation -Raw
      if ($swaggerReadmeContent -match 'source-code-folder-path: ./src/generated') {
        Write-Host "Including $_"
        return $true
      }
    }
    elseif (!(Test-Path "$_/src/generated")) { 
      Write-Host "Including $_"
      return $true
    }

    Write-Host "Excluding $_. It is likely machine generated."
    return $false
  })

$failed = $false
foreach ($directory in $packageFoldersToScan) { 
  Write-Host "cspell lint --config '.vscode/cspell.json' --no-must-find-files `"$directory/review/**/*.md`""
  npx cspell lint `
    --config "$REPO_ROOT/.vscode/cspell.json" `
    --no-must-find-files `
    --root $REPO_ROOT/ `
    --relative `
    "$directory/review/**/*.md"

  if ($LASTEXITCODE) { 
    $failed = $true
  }
}

if ($failed) { 
  exit 1
}
