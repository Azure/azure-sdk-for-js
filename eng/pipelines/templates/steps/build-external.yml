parameters:
  Artifacts: []
  TestPipeline: false
  ServiceDirectory: not-specified

steps:
  - ${{if eq(parameters.TestPipeline, 'true')}}:
    - task: PowerShell@2
      displayName: Prep template pipeline for release
      condition: succeeded()
      inputs:
        pwsh: true
        workingDirectory: $(Build.SourcesDirectory)
        filePath: eng/scripts/SetTestPipelineVersion.ps1
        arguments: '-BuildID $(Build.BuildId)'

  - pwsh: |
      $folder = "${{parameters.ServiceDirectory}}"
      if ($folder -eq "*") { $folder = "" }
      echo "##vso[task.setvariable variable=folder]$folder"
    displayName: "Set folder variable for readme links"

  - template: /eng/common/pipelines/templates/steps/daily-dev-build-variable.yml

  - script: |
      npm install ./eng/tools/versioning
      node eng/tools/versioning/set-dev.js --build-id "$(Build.BuildNumber)" --repo-root "$(Build.SourcesDirectory)" --service "$(folder)"
      node common/scripts/install-run-rush.js update
    condition: and(succeeded(),eq(variables['SetDevVersion'],'true'))
    displayName: "Update package versions for dev build"

  - task: Npm@1
    inputs:
      command: 'install'
    displayName: "Install dependencies [external]"

  - task: Npm@1
    inputs:
      command: 'build'
    displayName: "Build libraries"

  - task: Npm@1
    inputs:
      command: 'pack'
    displayName: "Pack project"

  # Unlink node_modules folders to significantly improve performance of subsequent tasks
  # which need to walk the directory tree (and are hardcoded to follow symlinks).
  #- script: |
  #    node eng/tools/rush-runner.js unlink
  #  displayName: "Unlink dependencies"

  # It's important for performance to pass "sdk" as "sourceFolder" rather than as a prefix in "contents".
  # The task first enumerates all files under "sourceFolder", then matches them against the "contents" pattern.
  # - task: CopyFiles@2
  #   inputs:
  #     sourceFolder: sdk
  #     contents: |
  #       **/$(coalesceResultFilter)/*.tgz
  #       **/$(coalesceResultFilter)/browser/*.zip
  #     targetFolder: $(Build.ArtifactStagingDirectory)
  #     flattenFolders: true
  #   displayName: "Copy packages"

  # - task: PublishPipelineArtifact@1
  #   condition: succeededOrFailed()
  #   displayName: "Publish artifacts"
  #   inputs:
  #     artifactName: packages
  #     path: $(Build.ArtifactStagingDirectory)

  # - template: ../steps/generate-doc.yml
  #   parameters:
  #     ServiceDirectory: ${{parameters.ServiceDirectory}}

  # - task: PublishPipelineArtifact@1
  #   condition: succeededOrFailed()
  #   displayName: "Publish artifacts"
  #   inputs:
  #     artifactName: documentation
  #     path: $(Build.ArtifactStagingDirectory)/Documentation
