parameters:
  Artifact: {}
  Registry: ''
  PathToArtifacts: ''
  Tag: ''
  AdditionalTag: ''
  DependsOn: []
  VarDependencies: {}

jobs:
- deployment: PublishPackage
  environment: 'npm'
  dependsOn: ${{ parameters.DependsOn }}
  variables: ${{ parameters.VarDependencies }}
  condition: succeeded()
  templateContext:
    type: releaseJob
    isProduction: ${{ eq(parameters.Registry, 'https://registry.npmjs.org/') }}
    inputs:
    - input: pipelineArtifact
      artifactName: packages
      targetPath: $(Pipeline.Workspace)/packages
  pool:
    name: azsdk-pool-mms-ubuntu-2004-general
    image: azsdk-pool-mms-ubuntu-2004-1espt
    os: linux
  displayName: 'Publish ${{parameters.Artifact.name}} to ${{parameters.Registry}}'
  strategy:
    runOnce:
      deploy:
        steps:
        - template: /eng/common/pipelines/templates/steps/set-default-branch.yml

        - ${{ if eq(parameters.Registry, 'https://registry.npmjs.org/') }}:
          - pwsh: |
              $tarFile = (Get-ChildItem -Path "${{parameters.PathToArtifacts}}/*.tgz").FullName
              write-host "Tar file: $tarFile"

              $tempDir = "$(System.DefaultWorkingDirectory)/temp_decompress"
              New-Item -ItemType Directory -Force -Path $tempDir
              tar -xzf $tarFile -C $tempDir
              $packageJsonDir = "$tempDir/package/package.json"
              $pkg = Get-Content -Raw "$packageJsonDir" | ConvertFrom-Json

              write-host $pkg

              $packageName = $pkg.Name
              $packageVersion = $pkg.Version
              $packageProps = npm view $packageName -json -silent | ConvertFrom-Json
              $originalTags = "{}"
              if ($packageProps.error) {
                $LASTEXITCODE = 0
                if ($packageProps.error.code -ne "E404") {
                  Write-Error $packageProps.error
                  exit 1
                }
              }
              else {
                $originalTags = $packageProps.'dist-tags' | ConvertTo-Json -Compress
              }

              write-host "Package name: $packageName"
              write-host "Package version: $packageVersion"
              write-host "Original tags: $originalTags"

              echo "##vso[task.setvariable variable=PackageName;isOutput=true]$packageName"
              echo "##vso[task.setvariable variable=OriginalTags;isOutput=true]$originalTags"
              echo "##vso[task.setvariable variable=IntendedTagVersion;isOutput=true]$packageVersion"
            name: SetPackageVar
            displayName: Get original tags

          - task: EsrpRelease@9
            displayName: 'Publish ${{parameters.Artifact.name}} to ESRP'
            inputs:
              ConnectedServiceName: 'Azure SDK PME Managed Identity'
              ClientId: '5f81938c-2544-4f1f-9251-dd9de5b8a81b'
              DomainTenantId: '975f013f-7f24-47e8-a7d3-abc4752bf346'
              Usemanagedidentity: true
              KeyVaultName: 'kv-azuresdk-codesign'
              SignCertName: 'azure-sdk-esrp-release-certificate'
              Intent: 'PackageDistribution'
              ContentType: 'npm'
              FolderLocation: ${{parameters.PathToArtifacts}}
              Owners: ${{ coalesce(variables['Build.RequestedForEmail'], 'azuresdk@microsoft.com') }}
              Approvers: ${{ coalesce(variables['Build.RequestedForEmail'], 'azuresdk@microsoft.com') }}
              ServiceEndpointUrl: 'https://api.esrp.microsoft.com'
              MainPublisher: 'ESRPRELPACMANTEST'
              productstate: ${{parameters.Tag}}

        - ${{ else }}:
          - task: PowerShell@2
            displayName: Publish to Dev Feed
            inputs:
              targetType: filePath
              filePath: eng/tools/publish-to-npm.ps1
              arguments: -pathToArtifacts ${{parameters.PathToArtifacts}} -accessLevel "public" -tag "${{parameters.Tag}}" -additionalTag "${{parameters.AdditionalTag}}" -registry ${{parameters.Registry}} -npmToken $(azure-sdk-npm-token)
              pwsh: true
            condition: succeeded()

- ${{ if eq(parameters.Registry, 'https://registry.npmjs.org/') }}:
  - job: VerifyPackageTags
    dependsOn: PublishPackage
    condition: succeeded()
    variables:
      PackageName: $[dependencies.PublishPackage.outputs['SetPackageVar.PackageName']]
      OriginalTags: $[dependencies.PublishPackage.outputs['SetPackageVar.OriginalTags']]
      IntendedTagVersion: $[dependencies.PublishPackage.outputs['SetPackageVar.IntendedTagVersion']]
    displayName: 'Verify package tags'
    pool:
      name: azsdk-pool-mms-ubuntu-2004-general
      image: azsdk-pool-mms-ubuntu-2004-1espt
      os: linux
    steps:
    - checkout: self
    - task: Powershell@2
      displayName: Verify package tags
      inputs:
        targetType: filePath
        filePath: eng/scripts/verify-npm-tags.ps1
        arguments: -originalDistTags '$(OriginalTags)' -intendedTag '${{parameters.Tag}}' -intendedTagVersion '$(IntendedTagVersion)' -packageName '$(PackageName)' -npmToken '$(azure-sdk-npm-token)'
        pwsh: true

    - ${{ if ne(parameters.AdditionalTag, '') }}:
      - task: PowerShell@2
        displayName: Add Additional Tag
        inputs:
          targetType: filePath
          filePath: eng/tools/publish-to-npm.ps1
          arguments: -addTag $true -pathToArtifacts ${{parameters.PathToArtifacts}} -accessLevel "public" -tag "${{parameters.AdditionalTag}}" -registry ${{parameters.Registry}} -npmToken $(azure-sdk-npm-token)
          pwsh: true
        condition: succeeded()
