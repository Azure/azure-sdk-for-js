parameters:
  Artifacts: []
  ServiceDirectory: not-specified
  TestPipeline: false

steps:
  - template: /eng/common/pipelines/templates/steps/save-package-properties.yml
    parameters:
      ServiceDirectory: ${{parameters.ServiceDirectory}}

  - template: /eng/pipelines/templates/steps/set-artifact-packages.yml
    parameters:
      PackageInfo: $(Build.ArtifactStagingDirectory)/PackageInfo
      Artifacts: ${{ parameters.Artifacts }}

  - template: /eng/common/pipelines/templates/steps/check-spelling.yml

  - task: PowerShell@2
    inputs:
      targetType: 'filePath'
      filePath: eng/scripts/spell-check-public-apis.ps1
      arguments: -ChangedServices "$(ChangedServices)"
      pwsh: true
    displayName: Spell check public API

  - task: UsePythonVersion@0
    displayName: 'Use Python 3.11'
    inputs:
      versionSpec: '3.11'

  - template: /eng/common/pipelines/templates/steps/verify-readmes.yml
    parameters:
      PackagePropertiesFolder: $(Build.ArtifactStagingDirectory)/PackageInfo

  - template: /eng/common/pipelines/templates/steps/verify-path-length.yml
    parameters:
      SourceDirectory: $(Build.SourcesDirectory)

  - template: /eng/common/pipelines/templates/steps/verify-links.yml
    parameters:
      ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
        Directory: ""
        Urls: (eng/common/scripts/get-markdown-files-from-changed-files.ps1)
      ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
        Directory: sdk/${{ parameters.ServiceDirectory }}
      CheckLinkGuidance: $true

  - template: /eng/common/pipelines/templates/steps/verify-samples.yml
    parameters:
      ServiceDirectories: $(ChangedServicesCsv)

  - script: |
      npm ci
    workingDirectory: $(System.DefaultWorkingDirectory)/eng/tools/analyze-deps
    displayName: "Install tool dependencies"

  - script: |
      node index.js --verbose --dump "$(Build.ArtifactStagingDirectory)/data.js" --out "$(Build.ArtifactStagingDirectory)/dependencies.html"
    workingDirectory: $(System.DefaultWorkingDirectory)/eng/tools/analyze-deps
    displayName: "Analyze library dependencies"

  - script: |
      node common/scripts/install-run-rush.js install
    displayName: "Install dependencies"

  - pwsh: |
      node common/scripts/install-run-rush.js build -t @azure/eslint-plugin-azure-sdk -t @azure/monitor-opentelemetry-exporter
      $env:FORCE_COLOR = "1"
      node eng/tools/rush-runner/index.js lint "$(ChangedServices)" -p max --verbose
    displayName: "Build ESLint Plugin and Lint Libraries"

  - pwsh: |
      node eng/tools/rush-runner/index.js check-format $(ChangedServices) -packages "$(ArtifactPackageNames)" --verbose
    displayName: "Check Format in Libraries"

  - pwsh: |
      node eng/tools/rush-runner/index.js update-snippets $(ChangedServices) -packages "$(ArtifactPackageNames)" --verbose
    displayName: "Update snippets"

  - pwsh: |
      eng/tools/check-snippet-changes.ps1
    displayName: "Check snippet changes"

  - template: /eng/common/pipelines/templates/steps/verify-changelogs.yml
    parameters:
      PackagePropertiesFolder: $(Build.ArtifactStagingDirectory)/PackageInfo

  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    # ComponentGovernance is currently unable to run on pull requests of public projects. Running on non-PR
    # builds should be sufficient.
    condition: and(succeededOrFailed(), ne(variables['Build.Reason'], 'PullRequest'))
    displayName: "Component Detection"

  - template: /eng/common/pipelines/templates/steps/eng-common-workflow-enforcer.yml
