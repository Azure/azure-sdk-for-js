parameters:
  PackageName: ""
  PreIntegrationSteps: ""
  PostIntegrationSteps: ""
  ResourceServiceDirectory: ""
  EnvVars: {}
  MaxParallel: 0
  TimeoutInMinutes: 60
  PublishCodeCoverage: false
  Matrix:
    Linux_Node10 (Public):
      OSVmImage: "ubuntu-16.04"
      TestType: "node"
      CloudType: public
      PublishCodeCoverage: true
    Windows_Node10 (Public):
      OSVmImage: "windows-2019"
      TestType: "node"
      CloudType: public
    macOS_Node10 (Public):
      OSVmImage: "macOS-10.15"
      TestType: "node"
      CloudType: public
    Browser_Linux_Node10 (Public):
      OSVmImage: "ubuntu-16.04"
      TestType: "browser"
      CloudType: public
      PublishCodeCoverage: true
    Browser_Windows_Node10 (Public):
      OSVmImage: "windows-2019"
      TestType: "browser"
      CloudType: public
    Browser_macOS_Node10 (Public):
      OSVmImage: "macOS-10.15"
      TestType: "browser"
      CloudType: public

jobs:
  - job: "IntegrationTest"

    variables:
      - template: ../variables/globals.yml

    strategy:
      maxParallel: ${{ parameters.MaxParallel }}
      matrix:
        ${{ each matrixEntry in parameters.Matrix }}:
          ${{ matrixEntry.key }}:
            # TestResultsFiles
            ${{ if eq(matrixEntry.value.TestType, 'browser' )}}:
              TestResultsFiles: "**/test-results.browser.xml"
            ${{ if eq(matrixEntry.value.TestType, 'node') }}:
              TestResultsFiles: "**/test-results.xml"

            # Remaining entries from the matrix object
            ${{ insert }}: ${{ matrixEntry.value }}

    pool:
      vmImage: "$(OSVmImage)"

    timeoutInMinutes: ${{ parameters.TimeoutInMinutes }}

    steps:
      - template: ../steps/common.yml

      - ${{ if ne(parameters.ResourceServiceDirectory, '') }}:
          - pwsh: |
              Install-Module -Name Az -AllowClobber -Scope CurrentUser -Force
            displayName: Install Az Module

          - pwsh: |
              $baseName = "t" + [guid]::NewGuid().ToString('n').Substring(0,16)
              Write-Host "##vso[task.setvariable variable=BaseName;]$baseName"
            displayName: Generate $(BaseName)

          - pwsh: >-
              eng/New-TestResources.ps1
              -BaseName $(BaseName)
              -ServiceDirectory ${{ parameters.ResourceServiceDirectory }}
              -TestApplicationId $(aad-azure-sdk-test-client-id)
              -TestApplicationSecret $(aad-azure-sdk-test-client-secret)
              -TestApplicationOid $(aad-azure-sdk-test-client-oid)
              -TenantId $(aad-azure-sdk-test-tenant-id)
              -ProvisionerApplicationId $(provisioner-aad-id)
              -ProvisionerApplicationSecret $(provisioner-aad-secret)
              -DeleteAfterHours 24
              -CI
              -Force
              -Verbose
            displayName: Provision Test Resources

      - script: |
          node common/scripts/install-run-rush.js install
        displayName: "Install dependencies"

      # Option "-p max" ensures parallelism is set to the number of cores on all platforms, which improves build times.
      # The default on Windows is "cores - 1" (microsoft/rushstack#436).
      - script: |
          node common/scripts/install-run-rush.js build -t "${{parameters.PackageName}}" --verbose -p max
        displayName: "Build libraries"

      # Option "-p max" ensures parallelism is set to the number of cores on all platforms, which improves build times.
      # The default on Windows is "cores - 1" (microsoft/rushstack#436).
      - script: |
          node common/scripts/install-run-rush.js build:test -t "${{parameters.PackageName}}" --verbose -p max
        displayName: "Build test assets"

      - ${{if ne(parameters.PreIntegrationSteps, '')}}:
          - template: ../steps/${{parameters.PreIntegrationSteps}}.yml

      # Option "-p max" ensures parallelism is set to the number of cores on all platforms, which improves build times.
      # The default on Windows is "cores - 1" (microsoft/rushstack#436).
      - script: |
          node common/scripts/install-run-rush.js integration-test:$(TestType) -t "${{parameters.PackageName}}" --verbose -p max
        displayName: "Integration test libraries"
        env:
          TEST_MODE: "live"
          ${{ insert }}: ${{ parameters.EnvVars }}
        condition: ne(variables['TestType'],'sample')

      - ${{if ne(parameters.PostIntegrationSteps, '')}}:
          - template: ../steps/${{parameters.PostIntegrationSteps}}.yml

      - script: |
          node common/scripts/npm-run-project.js "${{parameters.PackageName}}" execute:samples
        displayName: "Execute Samples"
        env:
          TEST_MODE: "live"
          ${{ insert }}: ${{ parameters.EnvVars }}
        condition: eq(variables['TestType'],'sample')

      - ${{ if ne(parameters.ResourceServiceDirectory, '') }}:
          - pwsh: >
              eng/Remove-TestResources.ps1
              -ResourceGroupName "${env:AZURE_RESOURCEGROUP_NAME}"
              -TenantId $(aad-azure-sdk-test-tenant-id)
              -ProvisionerApplicationId $(provisioner-aad-id)
              -ProvisionerApplicationSecret $(provisioner-aad-secret)
              -Force
              -Verbose
            displayName: Remove Test Resources
            condition: ne(variables['AZURE_RESOURCEGROUP_NAME'], '')
            continueOnError: true

      - script: |
          npm install
        workingDirectory: $(Build.SourcesDirectory)/eng/tools/versioning
        displayName: "Install script dependencies"

      - script: |
          node getPackagePath.js --repo-root "$(Build.SourcesDirectory)" --package-name "${{parameters.PackageName}}"
        workingDirectory: $(Build.SourcesDirectory)/eng/tools/versioning
        displayName: "Get package path"

      - task: PublishCodeCoverageResults@1
        displayName: "Publish NodeJs Code Coverage to DevOps"
        continueOnError: true
        condition: and(succeededOrFailed(),eq(variables['TestType'], 'node'),eq(variables['PublishCodeCoverage'], true))
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: "$(PackagePath)/coverage/cobertura-coverage.xml"

      - task: PublishPipelineArtifact@1
        displayName: "Publish Browser Code Coverage Report Artifact"
        continueOnError: true
        condition: and(succeededOrFailed(),eq(variables['TestType'], 'browser'),eq(variables['PublishCodeCoverage'], true))
        inputs:
          path: "$(PackagePath)/coverage-browser"
          artifact: BrowserCodeCoverageReport

      # Unlink node_modules folders to significantly improve performance of subsequent tasks
      # which need to walk the directory tree (and are hardcoded to follow symlinks).
      - script: |
          node eng/tools/rush-runner.js unlink
        condition: succeededOrFailed()
        displayName: "Unlink dependencies"

      # It's important for performance to pass "sdk" as "searchFolder" to avoid looking under root "node_modules".
      # PublishTestResults.searchFolder only supports absolute paths, not relative.
      - task: PublishTestResults@2
        inputs:
          searchFolder: "$(System.DefaultWorkingDirectory)/sdk"
          testResultsFiles: "**/test-results.xml"
          testRunTitle: "$(OSName) - NodeJS - Integration Tests - [Node $(NodeVersion)]"
        condition: and(always(), eq(variables['TestType'], 'node'))
        displayName: "Publish NodeJS integration test results"

      # It's important for performance to pass "sdk" as "searchFolder" to avoid looking under root "node_modules".
      # PublishTestResults.searchFolder only supports absolute paths, not relative.
      - task: PublishTestResults@2
        inputs:
          searchFolder: "$(System.DefaultWorkingDirectory)/sdk"
          testResultsFiles: "**/test-results.browser.xml"
          testRunTitle: "$(OSName) - Browser - Integration Tests - [Node $(NodeVersion)]"
        condition: and(always(), eq(variables['TestType'], 'browser'))
        displayName: "Publish browser integration test results"
