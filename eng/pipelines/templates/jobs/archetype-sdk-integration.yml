parameters:
  PackageName: ""
  PreIntegrationSteps: ""
  PostIntegrationSteps: ""
  ResourceFileLocation: ""
  EnvVars: []
  MaxParallel: 0
  Matrix:
    Linux_Node10:
      OSVmImage: "ubuntu-16.04"
      TestType: "node"
    Windows_Node10:
      OSVmImage: "windows-2019"
      TestType: "node"
    macOS_Node10:
      OSVmImage: "macOS-10.13"
      TestType: "node"
    Browser_Linux_Node10:
      OSVmImage: "ubuntu-16.04"
      TestType: "browser"
    Browser_Windows_Node10:
      OSVmImage: "windows-2019"
      TestType: "browser"
    Browser_macOS_Node10:
      OSVmImage: "macOS-10.13"
      TestType: "browser"

jobs:
  - job: "IntegrationTest"

    variables:
      - template: ../variables/globals.yml

    strategy:
      maxParallel: ${{ parameters.MaxParallel }}
      matrix:
        ${{ each matrixEntry in parameters.Matrix }}:
          ${{ matrixEntry.key }}:
            # TestResultsFiles
            ${{ if eq(matrixEntry.value.TestType, 'browser' )}}:
              TestResultsFiles: "**/test-results.browser.xml"
            ${{ if eq(matrixEntry.value.TestType, 'node') }}:
              TestResultsFiles: "**/test-results.xml"

            # Remaining entries from the matrix object
            ${{ insert }}: ${{ matrixEntry.value }}

    pool:
      vmImage: "$(OSVmImage)"

    timeoutInMinutes: 240

    steps:
      - template: ../steps/common.yml

      - ${{ if ne(parameters.ResourceFileLocation, '') }}:
          - pwsh: |
              # $uniqueIdentifier generates a pseudorandom value that represents a unique name that can be used with all resources
              $uniqueIdentifier =  "t" + [guid]::NewGuid().ToString().Replace("-", "").Substring(0,16)
              $jobName = "$(Agent.JobName)".Replace(" ", "_")
              $resourceGroupName = "Tests-$(Build.BuildId)-" + $jobName + "-" + $uniqueIdentifier
              echo "##vso[task.setvariable variable=ResourceGroupName]$resourceGroupName"
              echo "##vso[task.setvariable variable=ScopedIdentifier]$uniqueIdentifier"
              $resourceGroupExpiration = (Get-Date).ToUniversalTime().AddHours(24).ToString("o")

              az login --service-principal -u $env:PROVISIONER_AAD_ID -p $env:PROVISIONER_AAD_SECRET --tenant $env:PROVISIONER_AAD_TENANT
              az account set --subscription $env:PROVISIONER_SUBSCRIPTION

              az group create --name $resourceGroupName --location $env:PROVISIONER_RG_LOCATION --tags DeleteAfter=$resourceGroupExpiration
              az group wait --created --resource-group $resourceGroupName

              az group deployment create --resource-group $resourceGroupName --template-file ${{ parameters.ResourceFileLocation }} --parameters unique_id=$uniqueIdentifier tenant_id="$env:PROVISIONER_AAD_TENANT" test_app_id="$env:TEST_APP_ID"

            env:
              PROVISIONER_AAD_ID: $(provisioner-aad-id)
              PROVISIONER_AAD_SECRET: $(provisioner-aad-secret)
              PROVISIONER_AAD_TENANT: $(provisioner-aad-tenant)
              PROVISIONER_SUBSCRIPTION: $(provisioner-subscription)
              PROVISIONER_RG_LOCATION: westus2
              TEST_APP_ID: $(provisioner-test-app-id)
            displayName: Provision Test-Specific Azure Resources

      - script: |
          node common/scripts/install-run-rush.js install
        displayName: "Install dependencies"

      # Option "-p max" ensures parallelism is set to the number of cores on all platforms, which improves build times.
      # The default on Windows is "cores - 1" (microsoft/rushstack#436).
      - script: |
          node common/scripts/install-run-rush.js build -t "${{parameters.PackageName}}" --verbose -p max
        displayName: "Build libraries"

      # Option "-p max" ensures parallelism is set to the number of cores on all platforms, which improves build times.
      # The default on Windows is "cores - 1" (microsoft/rushstack#436).
      - script: |
          node common/scripts/install-run-rush.js build:test -t "${{parameters.PackageName}}" --verbose -p max
        displayName: "Build test assets"

      - ${{if ne(parameters.PreIntegrationSteps, '')}}:
          - template: ../steps/${{parameters.PreIntegrationSteps}}.yml

      # Option "-p max" ensures parallelism is set to the number of cores on all platforms, which improves build times.
      # The default on Windows is "cores - 1" (microsoft/rushstack#436).
      - script: |
          node common/scripts/install-run-rush.js integration-test:$(TestType) -t "${{parameters.PackageName}}" --verbose -p max
        displayName: "Integration test libraries"
        env: ${{parameters.EnvVars}}
        condition: ne(variables['TestType'],'sample')

      - ${{if ne(parameters.PostIntegrationSteps, '')}}:
          - template: ../steps/${{parameters.PostIntegrationSteps}}.yml

      - script: |
          node common/scripts/npm-run-project.js "${{parameters.PackageName}}" execute:samples
        displayName: "Execute Samples"
        env: ${{parameters.EnvVars}}
        condition: eq(variables['TestType'],'sample')

      - ${{ if ne(parameters.ResourceFileLocation, '') }}:
          - pwsh: |
              az login --service-principal -u $env:PROVISIONER_AAD_ID -p $env:PROVISIONER_AAD_SECRET --tenant $env:PROVISIONER_AAD_TENANT
              az account set --subscription $env:PROVISIONER_SUBSCRIPTION

              az group delete --resource-group $(ResourceGroupName) -y --no-wait
            env:
              PROVISIONER_AAD_ID: $(provisioner-aad-id)
              PROVISIONER_AAD_SECRET: $(provisioner-aad-secret)
              PROVISIONER_AAD_TENANT: $(provisioner-aad-tenant)
              PROVISIONER_SUBSCRIPTION: $(provisioner-subscription)
            displayName: Delete Test-Specific Azure Resources
            condition: succeededOrFailed()

      # Unlink node_modules folders to significantly improve performance of subsequent tasks
      # which need to walk the directory tree (and are hardcoded to follow symlinks).
      - script: |
          node eng/tools/rush-runner.js unlink
        condition: succeededOrFailed()
        displayName: "Unlink dependencies"

      # It's important for performance to pass "sdk" as "searchFolder" to avoid looking under root "node_modules".
      # PublishTestResults.searchFolder only supports absolute paths, not relative.
      - task: PublishTestResults@2
        inputs:
          searchFolder: '$(System.DefaultWorkingDirectory)/sdk'
          testResultsFiles: "**/test-results.xml"
          testRunTitle: "$(OSName) - NodeJS - Integration Tests - [Node $(NodeVersion)]"
        condition: and(always(), eq(variables['TestType'], 'node'))
        displayName: "Publish NodeJS integration test results"

      # It's important for performance to pass "sdk" as "searchFolder" to avoid looking under root "node_modules".
      # PublishTestResults.searchFolder only supports absolute paths, not relative.
      - task: PublishTestResults@2
        inputs:
          searchFolder: '$(System.DefaultWorkingDirectory)/sdk'
          testResultsFiles: "**/test-results.browser.xml"
          testRunTitle: "$(OSName) - Browser - Integration Tests - [Node $(NodeVersion)]"
        condition: and(always(), eq(variables['TestType'], 'browser'))
        displayName: "Publish browser integration test results"
