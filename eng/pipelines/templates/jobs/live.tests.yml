parameters:
- name: PackageName
  type: string
  default: ""
- name: ServiceDirectory
  type: string
  default: ""
- name: TestResourceDirectories
  type: object
  default:
- name: EnvVars
  type: object
  default: {}
- name: MaxParallel
  type: number
  default: 0
- name: TimeoutInMinutes
  type: number
  default: 60
- name: PublishCodeCoverage
  type: boolean
  default: false
- name: PreSteps
  type: object
  default: []
- name: PostSteps
  type: object
  default: []
- name: Location
  type: string
  default: ''
- name: CloudConfig
  type: object
  default: {}
- name: Matrix
  type: string
- name: DependsOn
  type: string
  default: ''
- name: UsePlatformContainer
  type: boolean
  default: false
- name: OSName
  type: string
- name: UseFederatedAuth
  type: boolean
  default: false

jobs:
  - job:
    dependsOn: ${{ parameters.DependsOn }}
    condition: ne(${{ parameters.Matrix }}, '{}')
    strategy:
      maxParallel: ${{ parameters.MaxParallel }}
      matrix: $[ ${{ parameters.Matrix }} ]

    variables:
      - template: ../variables/globals.yml
      - name: ArmTemplateParameters
        value: '@{}'

    pool:
      name: $(Pool)
      # 1es pipeline templates converts `image` to demands: ImageOverride under the hood
      # which is incompatible with image selection in the default non-1es hosted pools
      ${{ if eq(parameters.OSName, 'macOS') }}:
        vmImage: $(OSVmImage)
      ${{ else }}:
        image: $(OSVmImage)
      os: ${{ parameters.OSName }}

    timeoutInMinutes: ${{ parameters.TimeoutInMinutes }}

    ${{ if eq(parameters.UsePlatformContainer, 'true') }}:
      container: $[ variables['Container'] ]

    steps:
      - template: ../steps/common.yml

      - ${{ parameters.PreSteps }}

      - ${{ if ne(parameters.ServiceDirectory, '') }}:
        - template: /eng/common/TestResources/build-test-resource-config.yml
          parameters:
            SubscriptionConfiguration: ${{ parameters.CloudConfig.SubscriptionConfiguration }}
            SubscriptionConfigurations: ${{ parameters.CloudConfig.SubscriptionConfigurations }}
            EnvVars:
              Pool: $(Pool)
              ${{ insert }}: ${{ parameters.EnvVars }}
            ${{ if parameters.UseFederatedAuth }}:
              SubscriptionConfigurationFilePaths: ${{ parameters.CloudConfig.SubscriptionConfigurationFilePaths }}

        - ${{ each directory in coalesce(parameters.TestResourceDirectories, split(parameters.ServiceDirectory, '|')) }}:
          - template: /eng/common/TestResources/deploy-test-resources.yml
            parameters:
              ${{ if or(parameters.Location, parameters.CloudConfig.Location) }}:
                Location: ${{ coalesce(parameters.Location, parameters.CloudConfig.Location) }}
              ServiceDirectory: '${{ directory }}'
              SubscriptionConfiguration: $(SubscriptionConfiguration)
              ArmTemplateParameters: $(ArmTemplateParameters)
              UseFederatedAuth: ${{ parameters.UseFederatedAuth }}
              ServiceConnection: ${{ parameters.CloudConfig.ServiceConnection }}
              SubscriptionConfigurationFilePaths: ${{ parameters.CloudConfig.SubscriptionConfigurationFilePaths }}
              EnvVars:
                Pool: $(Pool)
                ${{ insert }}: ${{ parameters.EnvVars }}

      - script: |
          node common/scripts/install-run-rush.js install
        displayName: "Install dependencies"

      # Option "-p max" ensures parallelism is set to the number of cores on all platforms, which improves build times.
      # The default on Windows is "cores - 1" (microsoft/rushstack#436).
      - script: |
          node common/scripts/install-run-rush.js build -t "${{parameters.PackageName}}" --verbose -p max
        displayName: "Build libraries"

      # Option "-p max" ensures parallelism is set to the number of cores on all platforms, which improves build times.
      # The default on Windows is "cores - 1" (microsoft/rushstack#436).
      - script: |
          node common/scripts/install-run-rush.js build:test -t "${{parameters.PackageName}}" --verbose -p max
        displayName: "Build test assets"
        condition: and(succeededOrFailed(),eq(variables['DependencyVersion'],''))

      - script: |
          npm install
          node index.js --artifact-name "${{parameters.PackageName}}" --version-type $(DependencyVersion) --source-dir "$(Build.SourcesDirectory)" --test-folder "test/public"
        displayName: "Convert tests to run against package references"
        workingDirectory: $(Build.SourcesDirectory)/eng/tools/dependency-testing
        condition: and(succeededOrFailed(),ne(variables['DependencyVersion'],''))

      - script: |
          node common/scripts/install-run-rush.js update
        displayName: "Rush update"
        workingDirectory: $(Build.SourcesDirectory)
        condition: and(succeededOrFailed(),ne(variables['DependencyVersion'],''))

      - script: |
          node $(Build.SourcesDirectory)/common/scripts/install-run-rushx.js build
        displayName: "Build test package"
        workingDirectory: $(PackageTestPath)
        condition: and(succeededOrFailed(),ne(variables['DependencyVersion'],''))

      - pwsh: |
          npm install
          node getPackagePath.js --repo-root "$(Build.SourcesDirectory)" --package-name "${{parameters.PackageName}}"
        workingDirectory: $(Build.SourcesDirectory)/eng/tools/eng-package-utils
        displayName: "Get package path"

      - ${{ if eq('true', parameters.UseFederatedAuth) }}:
        - task: AzurePowerShell@5
          inputs:
            azureSubscription: ${{ parameters.CloudConfig.ServiceConnection }}
            azurePowerShellVersion: LatestVersion
            pwsh: true
            ScriptType: InlineScript
            Inline: |
              Start-Process "node" -ArgumentList "launch.js run start-browser-relay" -NoNewWindow -WorkingDirectory "$(Build.SourcesDirectory)/common/tools/dev-tool"
              for ($i = 0; $i -lt 10; $i++) {
                  try {
                      Invoke-WebRequest -Uri "http://localhost:4895/health" | Out-Null
                      exit 0
                  } catch {
                      Write-Warning "Failed to successfully connect to browser credential relay. Retrying..."
                      Start-Sleep 6
                  }
              }
              Write-Error "Could not connect to browser credential relay."
              exit 1
          displayName: "Start browser credential relay"
          condition: and(succeeded(), eq(variables['TestType'], 'browser'))
          env:
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)
            TEST_MODE: "live"
            ${{ insert }}: ${{ parameters.EnvVars }}

      - ${{ else }}:
        - pwsh: |
            Start-Process "node" -ArgumentList "launch.js run start-browser-relay" -NoNewWindow -WorkingDirectory "$(Build.SourcesDirectory)/common/tools/dev-tool"
            for ($i = 0; $i -lt 10; $i++) {
                try {
                    Invoke-WebRequest -Uri "http://localhost:4895/health" | Out-Null
                    exit 0
                } catch {
                    Write-Warning "Failed to successfully connect to browser credential relay. Retrying..."
                    Start-Sleep 6
                }
            }
            Write-Error "Could not connect to browser credential relay."
            exit 1
          displayName: "Start browser credential relay"
          condition: and(succeeded(), eq(variables['TestType'], 'browser'))
          env:
            TEST_MODE: "live"
            ${{ insert }}: ${{ parameters.EnvVars }}

      - template: ../steps/use-node-test-version.yml

      # ===== BEGIN LIVE TEST RUNS =====

      - ${{ if eq('true', parameters.UseFederatedAuth) }}:
        - task: AzurePowerShell@5
          inputs:
            azureSubscription: ${{ parameters.CloudConfig.ServiceConnection }}
            azurePowerShellVersion: LatestVersion
            workingDirectory: $(PackagePath)
            pwsh: true
            ScriptType: InlineScript
            Inline: |
              $account = (Get-AzContext).Account
              $env:AZURESUBSCRIPTION_CLIENT_ID = $account.Id
              $env:AZURESUBSCRIPTION_TENANT_ID = $account.Tenants

              node ../../../common/scripts/install-run-rushx.js integration-test:$(TestType)
              exit $LASTEXITCODE
          displayName: "Integration test libraries"
          condition: and(succeededOrFailed(),ne(variables['TestType'],'sample'),eq(variables['DependencyVersion'],''))
          env:
            TEST_MODE: "live"
            SERVICE_VERSION: $(ServiceVersion)
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)
            ${{ insert }}: ${{ parameters.EnvVars }}

        - task: AzurePowerShell@5
          inputs:
            azureSubscription: ${{ parameters.CloudConfig.ServiceConnection }}
            azurePowerShellVersion: LatestVersion
            workingDirectory: $(PackageTestPath)
            ScriptType: InlineScript
            Inline: |
              $account = (Get-AzContext).Account
              $env:AZURESUBSCRIPTION_CLIENT_ID = $account.Id
              $env:AZURESUBSCRIPTION_TENANT_ID = $account.Tenants

              node $(Build.SourcesDirectory)/common/scripts/install-run-rushx.js integration-test:$(TestType)
              exit $LASTEXITCODE
          displayName: "Integration test libraries"
          condition: and(succeeded(),ne(variables['TestType'],'sample'),ne(variables['DependencyVersion'],''))
          env:
            TEST_MODE: "live"
            SERVICE_VERSION: $(ServiceVersion)
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)
            ${{ insert }}: ${{ parameters.EnvVars }}

        - ${{ parameters.PostSteps }}

        - task: AzurePowerShell@5
          inputs:
            azureSubscription: ${{ parameters.CloudConfig.ServiceConnection }}
            azurePowerShellVersion: LatestVersion
            workingDirectory: $(PackagePath)
            ScriptType: InlineScript
            Inline: |
              $account = (Get-AzContext).Account
              $env:AZURESUBSCRIPTION_CLIENT_ID = $account.Id
              $env:AZURESUBSCRIPTION_TENANT_ID = $account.Tenants

              node ../../../common/scripts/install-run-rushx.js execute:samples
              exit $LASTEXITCODE
          displayName: "Execute Samples"
          env:
            TEST_MODE: "live"
            # Set fake authority host to ensure Managed Identity fail for Default Azure Credential
            # so "execute samples" step correctly picks up Powershell credential.
            AZURE_POD_IDENTITY_AUTHORITY_HOST: "FakeAuthorityHost"
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)
            ${{ insert }}: ${{ parameters.EnvVars }}
          condition: and(succeeded(),eq(variables['TestType'],'sample'))

      - ${{ else }}:
        - script: |
            node ../../../common/scripts/install-run-rushx.js integration-test:$(TestType)
          displayName: "Integration test libraries"
          workingDirectory: $(PackagePath)
          condition: and(succeededOrFailed(),ne(variables['TestType'],'sample'),eq(variables['DependencyVersion'],''))
          env:
            TEST_MODE: "live"
            SERVICE_VERSION: $(ServiceVersion)
            ${{ insert }}: ${{ parameters.EnvVars }}

        - script: |
            node $(Build.SourcesDirectory)/common/scripts/install-run-rushx.js integration-test:$(TestType)
          displayName: "Integration test libraries"
          workingDirectory: $(PackageTestPath)
          condition: and(succeeded(),ne(variables['TestType'],'sample'),ne(variables['DependencyVersion'],''))
          env:
            TEST_MODE: "live"
            SERVICE_VERSION: $(ServiceVersion)
            ${{ insert }}: ${{ parameters.EnvVars }}

        - ${{ parameters.PostSteps }}

        - script: |
            node ../../../common/scripts/install-run-rushx.js execute:samples
          displayName: "Execute Samples"
          workingDirectory: $(PackagePath)
          env:
            TEST_MODE: "live"
            # Set fake authority host to ensure Managed Identity fail for Default Azure Credential
            # so "execute samples" step correctly picks up Powershell credential.
            AZURE_POD_IDENTITY_AUTHORITY_HOST: "FakeAuthorityHost"
            ${{ insert }}: ${{ parameters.EnvVars }}
          condition: and(succeeded(),eq(variables['TestType'],'sample'))

      # ===== END LIVE TEST RUNS =====

      - ${{ if ne(parameters.ServiceDirectory, '') }}:
        - ${{ each directory in coalesce(parameters.TestResourceDirectories, split(parameters.ServiceDirectory, '|')) }}:
          - template: /eng/common/TestResources/remove-test-resources.yml
            parameters:
              ServiceDirectory: "${{ directory }}"
              SubscriptionConfiguration: $(SubscriptionConfiguration)
              UseFederatedAuth: ${{ parameters.UseFederatedAuth }}
              ServiceConnection: ${{ parameters.CloudConfig.ServiceConnection }}

      - task: PublishCodeCoverageResults@2
        displayName: "Publish NodeJs Code Coverage to DevOps"
        continueOnError: true
        condition: and(succeededOrFailed(),eq(variables['TestType'], 'node'),eq(variables['PublishCodeCoverage'], true))
        inputs:
          summaryFileLocation: "$(PackagePath)/coverage/cobertura-coverage.xml"

      - template: /eng/common/pipelines/templates/steps/publish-1es-artifact.yml
        parameters:
          ArtifactPath: "$(PackagePath)/coverage-browser"
          ArtifactName: BrowserCodeCoverageReport
          CustomCondition: and(succeededOrFailed(),eq(variables['TestType'], 'browser'),eq(variables['PublishCodeCoverage'], true))
          SbomEnabled: false

      # Unlink node_modules folders to significantly improve performance of subsequent tasks
      # which need to walk the directory tree (and are hardcoded to follow symlinks).
      # Retry for 30 seconds, since this command may fail with error "Another rush command is already
      # running in this repository" if the previous rush command was killed.
      - pwsh: |
          for ($i=0; $i -lt 30; $i++) {
            node eng/tools/rush-runner.js unlink
            if ($lastexitcode -eq 0) {
              break
            }
            else {
              start-sleep 1
            }
          }
        condition: always()
        displayName: "Unlink dependencies"

      # It's important for performance to pass "sdk" as "searchFolder" to avoid looking under root "node_modules".
      # PublishTestResults.searchFolder only supports absolute paths, not relative.
      - task: PublishTestResults@2
        inputs:
          searchFolder: "$(System.DefaultWorkingDirectory)/sdk"
          testResultsFiles: "$(TestResultsFiles)"
          testRunTitle: "${{ parameters.ServiceDirectory }} ${{ parameters.CloudConfig.Cloud }} $(Agent.JobName)"
        condition: >
          and(
            always(),
            ne(variables['TestResultsFiles'], ''),
            or(eq(variables['TestType'], 'node'), eq(variables['TestType'], 'browser'))
          )
        displayName: "Publish $(TestType) integration test results"
