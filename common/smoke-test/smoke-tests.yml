jobs:
  - job: SmokeTest
    strategy:
      matrix:
        Linux (Public):
          OSVmImage: "ubuntu-18.04"
          CloudType: public
        Windows (Public):
          OSVmImage: "windows-2019"
          CloudType: public
        Mac (Public):
          OSVmImage: "macOS-10.14"
          CloudType: public
        Linux (Gov):
          OSVmImage: "ubuntu-18.04"
          CloudType: gov
        Windows (Gov):
          OSVmImage: "windows-2019"
          CloudType: gov

    pool:
      vmImage: $(OSVmImage)

    variables:
      - template: ../../eng/pipelines/templates/variables/globals.yml

    steps:
      - task: NodeTool@0
        displayName: Use Node $(NodeVersion)
        inputs:
          versionSpec: $(NodeVersion)

      - task: Npm@1
        inputs:
          command: install
          workingDir: common/smoke-test/
        displayName: Install packages

      - task: Npm@1
        inputs:
          command: custom
          customCommand: "list --depth=0"
          workingDir: common/smoke-test/
        displayName: List packages installed from the feed

      # The MacOS image does not have TypeScript installed by default
      - task: Npm@1
        inputs:
          command: custom
          customCommand: "install -g typescript"
        displayName: Install TypeScript
        condition: and(succeeded(), contains(variables['OSVmImage'], 'macos'))

      - script: tsc -p ./common/smoke-test/
        displayName: "Compile TS"

      # Set secret environment variables for different clouds
      - pwsh: |
          $variables = @{
            AZURE_PROJECT_URL='$(smoke-tests-key-vault-project-url)'
            EVENT_HUBS_CONNECTION_STRING='$(smoke-tests-event-hubs-connection-string)'
            AZURE_STORAGE_CONNECTION_STRING='$(smoke-tests-storage-connection-string)'
            AZURE_CLIENT_SECRET='$(aad-azure-sdk-test-client-secret)'
            AZURE_TENANT_ID='$(aad-azure-sdk-test-tenant-id)'
            AZURE_CLIENT_ID='$(aad-azure-sdk-test-client-id)'
            AZURE_AUTHORITY_HOST='$(aad-azure-sdk-test-authority-uri)'
            COSMOS_KEY='$(smoke-tests-cosmos-key)'
            COSMOS_ENDPOINT='$(smoke-tests-cosmos-endpoint)'
          };
          foreach ($key in $variables.Keys) {
            Write-Host "Setting variable '$key'"
            Write-Host "##vso[task.setvariable variable=_$key;issecret=true;]$($variables[$key])"
            Write-Host "##vso[task.setvariable variable=$key;]$($variables[$key])"
          }
        displayName: Set secrets for public cloud
        condition: and(succeeded(), eq(variables['CloudType'], 'public'))

      - pwsh: |
          $variables = @{
            AZURE_PROJECT_URL='$(smoke-tests-key-vault-project-url-gov)'
            EVENT_HUBS_CONNECTION_STRING='$(smoke-tests-event-hubs-connection-string-gov)'
            AZURE_STORAGE_CONNECTION_STRING='$(smoke-tests-storage-connection-string-gov)'
            AZURE_CLIENT_SECRET='$(aad-azure-sdk-test-client-secret-gov)'
            AZURE_TENANT_ID='$(aad-azure-sdk-test-tenant-id-gov)'
            AZURE_CLIENT_ID='$(aad-azure-sdk-test-client-id-gov)'
            AZURE_AUTHORITY_HOST='$(aad-azure-sdk-test-authority-uri-gov)'
            COSMOS_KEY='$(smoke-tests-cosmos-key-gov)'
            COSMOS_ENDPOINT='$(smoke-tests-cosmos-endpoint-gov)'
          };
          foreach ($key in $variables.Keys) {
            Write-Host "Setting variable '$key'"
            Write-Host "##vso[task.setvariable variable=_$key;issecret=true;]$($variables[$key])"
            Write-Host "##vso[task.setvariable variable=$key;]$($variables[$key])"
          }
        displayName: Set secrets for gov cloud
        condition: and(succeeded(), eq(variables['CloudType'], 'gov'))

      - script: node ./common/smoke-test/app.js
        displayName: Run Smoke Test
