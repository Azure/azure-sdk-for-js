/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Represents the SKU name and Azure pricing tier for Analysis Services resource. */
export interface ResourceSku {
  /** Name of the SKU level. */
  name: string;
  /** The name of the Azure pricing tier to which the SKU applies. */
  tier?: SkuTier;
  /** The number of instances in the read only query pool. */
  capacity?: number;
}

/** An object that represents a set of mutable Analysis Services resource properties. */
export interface AnalysisServicesServerMutableProperties {
  /** A collection of AS server administrators */
  asAdministrators?: ServerAdministrators;
  /** The SAS container URI to the backup container. */
  backupBlobContainerUri?: string;
  /** The gateway details configured for the AS server. */
  gatewayDetails?: GatewayDetails;
  /** The firewall settings for the AS server. */
  ipV4FirewallSettings?: IPv4FirewallSettings;
  /** How the read-write server's participation in the query pool is controlled.<br/>It can have the following values: <ul><li>readOnly - indicates that the read-write server is intended not to participate in query operations</li><li>all - indicates that the read-write server can participate in query operations</li></ul>Specifying readOnly when capacity is 1 results in error. */
  querypoolConnectionMode?: ConnectionMode;
  /** The managed mode of the server (0 = not managed, 1 = managed). */
  managedMode?: ManagedMode;
  /** The server monitor mode for AS server */
  serverMonitorMode?: ServerMonitorMode;
}

/** An array of administrator user identities. */
export interface ServerAdministrators {
  /** An array of administrator user identities. */
  members?: string[];
}

/** The gateway details. */
export interface GatewayDetails {
  /** Gateway resource to be associated with the server. */
  gatewayResourceId?: string;
  /**
   * Gateway object id from in the DMTS cluster for the gateway resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly gatewayObjectId?: string;
  /**
   * Uri of the DMTS cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dmtsClusterUri?: string;
}

/** An array of firewall rules. */
export interface IPv4FirewallSettings {
  /** An array of firewall rules. */
  firewallRules?: IPv4FirewallRule[];
  /** The indicator of enabling PBI service. */
  enablePowerBIService?: boolean;
}

/** The detail of firewall rule. */
export interface IPv4FirewallRule {
  /** The rule name. */
  firewallRuleName?: string;
  /** The start range of IPv4. */
  rangeStart?: string;
  /** The end range of IPv4. */
  rangeEnd?: string;
}

/** Represents an instance of an Analysis Services resource. */
export interface Resource {
  /**
   * An identifier that represents the Analysis Services resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the Analysis Services resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the Analysis Services resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Location of the Analysis Services resource. */
  location: string;
  /** The SKU of the Analysis Services resource. */
  sku: ResourceSku;
  /** Key-value pairs of additional resource provisioning properties. */
  tags?: { [propertyName: string]: string };
}

/** Describes the format of Error response. */
export interface ErrorResponse {
  /** The error object */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error sub code
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly subCode?: number;
  /**
   * The http status code
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly httpStatusCode?: number;
  /**
   * the timestamp for the error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly timeStamp?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** Provision request specification */
export interface AnalysisServicesServerUpdateParameters {
  /** The SKU of the Analysis Services resource. */
  sku?: ResourceSku;
  /** Key-value pairs of additional provisioning properties. */
  tags?: { [propertyName: string]: string };
  /** A collection of AS server administrators */
  asAdministrators?: ServerAdministrators;
  /** The SAS container URI to the backup container. */
  backupBlobContainerUri?: string;
  /** The gateway details configured for the AS server. */
  gatewayDetails?: GatewayDetails;
  /** The firewall settings for the AS server. */
  ipV4FirewallSettings?: IPv4FirewallSettings;
  /** How the read-write server's participation in the query pool is controlled.<br/>It can have the following values: <ul><li>readOnly - indicates that the read-write server is intended not to participate in query operations</li><li>all - indicates that the read-write server can participate in query operations</li></ul>Specifying readOnly when capacity is 1 results in error. */
  querypoolConnectionMode?: ConnectionMode;
  /** The managed mode of the server (0 = not managed, 1 = managed). */
  managedMode?: ManagedMode;
  /** The server monitor mode for AS server */
  serverMonitorMode?: ServerMonitorMode;
}

/** An array of Analysis Services resources. */
export interface AnalysisServicesServers {
  /** An array of Analysis Services resources. */
  value: AnalysisServicesServer[];
}

/** An object that represents enumerating SKUs for new resources. */
export interface SkuEnumerationForNewResourceResult {
  /** The collection of available SKUs for new resources. */
  value?: ResourceSku[];
}

/** An object that represents enumerating SKUs for existing resources. */
export interface SkuEnumerationForExistingResourceResult {
  /** The collection of available SKUs for existing resources. */
  value?: SkuDetailsForExistingResource[];
}

/** An object that represents SKU details for existing resources. */
export interface SkuDetailsForExistingResource {
  /** The SKU in SKU details for existing resources. */
  sku?: ResourceSku;
  /** The resource type. */
  resourceType?: string;
}

/** Status of gateway is live. */
export interface GatewayListStatusLive {
  /** Live message of list gateway. Status: 0 - Live */
  status?: 0;
}

/** Status of gateway is error. */
export interface GatewayListStatusError {
  /** Error of the list gateway status. */
  error?: ErrorDetail;
}

/** Details of server name request body. */
export interface CheckServerNameAvailabilityParameters {
  /** Name for checking availability. */
  name?: string;
  /** The resource type of azure analysis services. */
  type?: string;
}

/** The checking result of server name availability. */
export interface CheckServerNameAvailabilityResult {
  /** Indicator of available of the server name. */
  nameAvailable?: boolean;
  /** The reason of unavailability. */
  reason?: string;
  /** The detailed message of the request unavailability. */
  message?: string;
}

/** The status of operation. */
export interface OperationStatus {
  /** The operation Id. */
  id?: string;
  /** The operation name. */
  name?: string;
  /** The start time of the operation. */
  startTime?: string;
  /** The end time of the operation. */
  endTime?: string;
  /** The status of the operation. */
  status?: string;
  /** The error detail of the operation if any. */
  error?: ErrorDetail;
}

/** Result of listing consumption operations. It contains a list of operations and a URL link to get the next set of results. */
export interface OperationListResult {
  /**
   * List of analysis services operations supported by the Microsoft.AnalysisServices resource provider.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** A Consumption REST API operation. */
export interface Operation {
  /**
   * Operation name: {provider}/{resource}/{operation}.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /** The object that represents the operation. */
  display?: OperationDisplay;
  /**
   * The origin
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: string;
  /** Additional properties to expose performance metrics to shoebox. */
  properties?: OperationProperties;
}

/** The object that represents the operation. */
export interface OperationDisplay {
  /**
   * Service provider: Microsoft.Consumption.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * Resource on which the operation is performed: UsageDetail, etc.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * Operation type: Read, write, delete, etc.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * Description of the operation object.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** Additional properties to expose performance metrics to shoebox. */
export interface OperationProperties {
  /** Performance metrics to shoebox. */
  serviceSpecification?: OperationPropertiesServiceSpecification;
}

/** Performance metrics to shoebox. */
export interface OperationPropertiesServiceSpecification {
  /**
   * The metric specifications.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly metricSpecifications?: MetricSpecifications[];
  /**
   * The log specifications.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly logSpecifications?: LogSpecifications[];
}

/** Available operation metric specification for exposing performance metrics to shoebox. */
export interface MetricSpecifications {
  /**
   * The name of metric.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The displayed name of metric.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly displayName?: string;
  /**
   * The displayed description of metric.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly displayDescription?: string;
  /**
   * The unit of the metric.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly unit?: string;
  /**
   * The aggregation type of metric.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly aggregationType?: string;
  /**
   * The dimensions of metric.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dimensions?: MetricDimensions[];
}

/** Metric dimension. */
export interface MetricDimensions {
  /**
   * Dimension name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Dimension display name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly displayName?: string;
}

/** The log metric specification for exposing performance metrics to shoebox. */
export interface LogSpecifications {
  /**
   * The name of metric.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The displayed name of log.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly displayName?: string;
  /**
   * The blob duration for the log.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly blobDuration?: string;
}

/** Properties of Analysis Services resource. */
export interface AnalysisServicesServerProperties
  extends AnalysisServicesServerMutableProperties {
  /**
   * The current state of Analysis Services resource. The state is to indicate more states outside of resource provisioning.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: State;
  /**
   * The current deployment state of Analysis Services resource. The provisioningState is to indicate states for resource provisioning.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The full name of the Analysis Services resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly serverFullName?: string;
  /** The SKU of the Analysis Services resource. */
  sku?: ResourceSku;
}

/** Represents an instance of an Analysis Services resource. */
export interface AnalysisServicesServer extends Resource {
  /** A collection of AS server administrators */
  asAdministrators?: ServerAdministrators;
  /** The SAS container URI to the backup container. */
  backupBlobContainerUri?: string;
  /** The gateway details configured for the AS server. */
  gatewayDetails?: GatewayDetails;
  /** The firewall settings for the AS server. */
  ipV4FirewallSettings?: IPv4FirewallSettings;
  /** How the read-write server's participation in the query pool is controlled.<br/>It can have the following values: <ul><li>readOnly - indicates that the read-write server is intended not to participate in query operations</li><li>all - indicates that the read-write server can participate in query operations</li></ul>Specifying readOnly when capacity is 1 results in error. */
  querypoolConnectionMode?: ConnectionMode;
  /** The managed mode of the server (0 = not managed, 1 = managed). */
  managedMode?: ManagedMode;
  /** The server monitor mode for AS server */
  serverMonitorMode?: ServerMonitorMode;
  /**
   * The current state of Analysis Services resource. The state is to indicate more states outside of resource provisioning.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: State;
  /**
   * The current deployment state of Analysis Services resource. The provisioningState is to indicate states for resource provisioning.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The full name of the Analysis Services resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly serverFullName?: string;
  /** The SKU of the Analysis Services resource. */
  skuPropertiesSku?: ResourceSku;
}

/** Known values of {@link State} that the service accepts. */
export enum KnownState {
  /** Deleting */
  Deleting = "Deleting",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Paused */
  Paused = "Paused",
  /** Suspended */
  Suspended = "Suspended",
  /** Provisioning */
  Provisioning = "Provisioning",
  /** Updating */
  Updating = "Updating",
  /** Suspending */
  Suspending = "Suspending",
  /** Pausing */
  Pausing = "Pausing",
  /** Resuming */
  Resuming = "Resuming",
  /** Preparing */
  Preparing = "Preparing",
  /** Scaling */
  Scaling = "Scaling"
}

/**
 * Defines values for State. \
 * {@link KnownState} can be used interchangeably with State,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Deleting** \
 * **Succeeded** \
 * **Failed** \
 * **Paused** \
 * **Suspended** \
 * **Provisioning** \
 * **Updating** \
 * **Suspending** \
 * **Pausing** \
 * **Resuming** \
 * **Preparing** \
 * **Scaling**
 */
export type State = string;

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  /** Deleting */
  Deleting = "Deleting",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Paused */
  Paused = "Paused",
  /** Suspended */
  Suspended = "Suspended",
  /** Provisioning */
  Provisioning = "Provisioning",
  /** Updating */
  Updating = "Updating",
  /** Suspending */
  Suspending = "Suspending",
  /** Pausing */
  Pausing = "Pausing",
  /** Resuming */
  Resuming = "Resuming",
  /** Preparing */
  Preparing = "Preparing",
  /** Scaling */
  Scaling = "Scaling"
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Deleting** \
 * **Succeeded** \
 * **Failed** \
 * **Paused** \
 * **Suspended** \
 * **Provisioning** \
 * **Updating** \
 * **Suspending** \
 * **Pausing** \
 * **Resuming** \
 * **Preparing** \
 * **Scaling**
 */
export type ProvisioningState = string;

/** Known values of {@link SkuTier} that the service accepts. */
export enum KnownSkuTier {
  /** Development */
  Development = "Development",
  /** Basic */
  Basic = "Basic",
  /** Standard */
  Standard = "Standard"
}

/**
 * Defines values for SkuTier. \
 * {@link KnownSkuTier} can be used interchangeably with SkuTier,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Development** \
 * **Basic** \
 * **Standard**
 */
export type SkuTier = string;
/** Defines values for ConnectionMode. */
export type ConnectionMode = "All" | "ReadOnly";
/** Defines values for ManagedMode. */
export type ManagedMode = 0 | 1;
/** Defines values for ServerMonitorMode. */
export type ServerMonitorMode = 0 | 1;

/** Optional parameters. */
export interface ServersGetDetailsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getDetails operation. */
export type ServersGetDetailsResponse = AnalysisServicesServer;

/** Optional parameters. */
export interface ServersCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type ServersCreateResponse = AnalysisServicesServer;

/** Optional parameters. */
export interface ServersDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ServersUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type ServersUpdateResponse = AnalysisServicesServer;

/** Optional parameters. */
export interface ServersSuspendOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ServersResumeOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ServersListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type ServersListByResourceGroupResponse = AnalysisServicesServers;

/** Optional parameters. */
export interface ServersListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ServersListResponse = AnalysisServicesServers;

/** Optional parameters. */
export interface ServersListSkusForNewOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listSkusForNew operation. */
export type ServersListSkusForNewResponse = SkuEnumerationForNewResourceResult;

/** Optional parameters. */
export interface ServersListSkusForExistingOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listSkusForExisting operation. */
export type ServersListSkusForExistingResponse = SkuEnumerationForExistingResourceResult;

/** Optional parameters. */
export interface ServersListGatewayStatusOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listGatewayStatus operation. */
export type ServersListGatewayStatusResponse = GatewayListStatusLive;

/** Optional parameters. */
export interface ServersDissociateGatewayOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ServersCheckNameAvailabilityOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the checkNameAvailability operation. */
export type ServersCheckNameAvailabilityResponse = CheckServerNameAvailabilityResult;

/** Optional parameters. */
export interface ServersListOperationResultsOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ServersListOperationStatusesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listOperationStatuses operation. */
export type ServersListOperationStatusesResponse = OperationStatus;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface AzureAnalysisServicesOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
