/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  Solution,
  SolutionsCreateOrUpdateOptionalParams,
  SolutionsCreateOrUpdateResponse,
  SolutionPatch,
  SolutionsUpdateOptionalParams,
  SolutionsUpdateResponse,
  SolutionsDeleteOptionalParams,
  SolutionsGetOptionalParams,
  SolutionsGetResponse,
  SolutionsListByResourceGroupOptionalParams,
  SolutionsListByResourceGroupResponse,
  SolutionsListBySubscriptionOptionalParams,
  SolutionsListBySubscriptionResponse
} from "../models";

/** Interface representing a Solutions. */
export interface Solutions {
  /**
   * Creates or updates the Solution.
   * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
   * @param solutionName User Solution Name.
   * @param parameters The parameters required to create OMS Solution.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    solutionName: string,
    parameters: Solution,
    options?: SolutionsCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<SolutionsCreateOrUpdateResponse>,
      SolutionsCreateOrUpdateResponse
    >
  >;
  /**
   * Creates or updates the Solution.
   * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
   * @param solutionName User Solution Name.
   * @param parameters The parameters required to create OMS Solution.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    solutionName: string,
    parameters: Solution,
    options?: SolutionsCreateOrUpdateOptionalParams
  ): Promise<SolutionsCreateOrUpdateResponse>;
  /**
   * Patch a Solution. Only updating tags supported.
   * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
   * @param solutionName User Solution Name.
   * @param parameters The parameters required to patch a Solution.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    solutionName: string,
    parameters: SolutionPatch,
    options?: SolutionsUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<SolutionsUpdateResponse>,
      SolutionsUpdateResponse
    >
  >;
  /**
   * Patch a Solution. Only updating tags supported.
   * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
   * @param solutionName User Solution Name.
   * @param parameters The parameters required to patch a Solution.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    solutionName: string,
    parameters: SolutionPatch,
    options?: SolutionsUpdateOptionalParams
  ): Promise<SolutionsUpdateResponse>;
  /**
   * Deletes the solution in the subscription.
   * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
   * @param solutionName User Solution Name.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    solutionName: string,
    options?: SolutionsDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes the solution in the subscription.
   * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
   * @param solutionName User Solution Name.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    solutionName: string,
    options?: SolutionsDeleteOptionalParams
  ): Promise<void>;
  /**
   * Retrieves the user solution.
   * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
   * @param solutionName User Solution Name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    solutionName: string,
    options?: SolutionsGetOptionalParams
  ): Promise<SolutionsGetResponse>;
  /**
   * Retrieves the solution list. It will retrieve both first party and third party solutions
   * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: SolutionsListByResourceGroupOptionalParams
  ): Promise<SolutionsListByResourceGroupResponse>;
  /**
   * Retrieves the solution list. It will retrieve both first party and third party solutions
   * @param options The options parameters.
   */
  listBySubscription(
    options?: SolutionsListBySubscriptionOptionalParams
  ): Promise<SolutionsListBySubscriptionResponse>;
}
