/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/managementAssociationsMappers";
import * as Parameters from "../models/parameters";
import { OperationsManagementClientContext } from "../operationsManagementClientContext";

/** Class representing a ManagementAssociations. */
export class ManagementAssociations {
  private readonly client: OperationsManagementClientContext;

  /**
   * Create a ManagementAssociations.
   * @param {OperationsManagementClientContext} client Reference to the service client.
   */
  constructor(client: OperationsManagementClientContext) {
    this.client = client;
  }

  /**
   * Retrieves the ManagementAssociatons list.
   * @summary Retrieves the ManagementAssociatons list for the subscription
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagementAssociationsListBySubscriptionResponse>
   */
  listBySubscription(options?: msRest.RequestOptionsBase): Promise<Models.ManagementAssociationsListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: msRest.ServiceCallback<Models.ManagementAssociationPropertiesList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagementAssociationPropertiesList>): void;
  listBySubscription(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ManagementAssociationPropertiesList>, callback?: msRest.ServiceCallback<Models.ManagementAssociationPropertiesList>): Promise<Models.ManagementAssociationsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.ManagementAssociationsListBySubscriptionResponse>;
  }

  /**
   * Creates or updates the ManagementAssociation.
   * @summary Create/Update ManagementAssociation.
   * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
   * @param managementAssociationName User ManagementAssociation Name.
   * @param parameters The parameters required to create ManagementAssociation extension.
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagementAssociationsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, managementAssociationName: string, parameters: Models.ManagementAssociation, options?: msRest.RequestOptionsBase): Promise<Models.ManagementAssociationsCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
   * @param managementAssociationName User ManagementAssociation Name.
   * @param parameters The parameters required to create ManagementAssociation extension.
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, managementAssociationName: string, parameters: Models.ManagementAssociation, callback: msRest.ServiceCallback<Models.ManagementAssociation>): void;
  /**
   * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
   * @param managementAssociationName User ManagementAssociation Name.
   * @param parameters The parameters required to create ManagementAssociation extension.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, managementAssociationName: string, parameters: Models.ManagementAssociation, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagementAssociation>): void;
  createOrUpdate(resourceGroupName: string, managementAssociationName: string, parameters: Models.ManagementAssociation, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ManagementAssociation>, callback?: msRest.ServiceCallback<Models.ManagementAssociation>): Promise<Models.ManagementAssociationsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        managementAssociationName,
        parameters,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.ManagementAssociationsCreateOrUpdateResponse>;
  }

  /**
   * Deletes the ManagementAssociation in the subscription.
   * @summary Deletes the ManagementAssociation
   * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
   * @param managementAssociationName User ManagementAssociation Name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, managementAssociationName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
   * @param managementAssociationName User ManagementAssociation Name.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, managementAssociationName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
   * @param managementAssociationName User ManagementAssociation Name.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, managementAssociationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, managementAssociationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        managementAssociationName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Retrieves the user ManagementAssociation.
   * @summary Retrieve ManagementAssociation.
   * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
   * @param managementAssociationName User ManagementAssociation Name.
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagementAssociationsGetResponse>
   */
  get(resourceGroupName: string, managementAssociationName: string, options?: msRest.RequestOptionsBase): Promise<Models.ManagementAssociationsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
   * @param managementAssociationName User ManagementAssociation Name.
   * @param callback The callback
   */
  get(resourceGroupName: string, managementAssociationName: string, callback: msRest.ServiceCallback<Models.ManagementAssociation>): void;
  /**
   * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
   * @param managementAssociationName User ManagementAssociation Name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, managementAssociationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagementAssociation>): void;
  get(resourceGroupName: string, managementAssociationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ManagementAssociation>, callback?: msRest.ServiceCallback<Models.ManagementAssociation>): Promise<Models.ManagementAssociationsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        managementAssociationName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ManagementAssociationsGetResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.OperationsManagement/ManagementAssociations",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagementAssociationPropertiesList
    },
    default: {
      bodyMapper: Mappers.CodeMessageError
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceType}/{resourceName}/providers/Microsoft.OperationsManagement/ManagementAssociations/{managementAssociationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.providerName,
    Parameters.resourceType,
    Parameters.resourceName,
    Parameters.managementAssociationName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.ManagementAssociation,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ManagementAssociation
    },
    default: {
      bodyMapper: Mappers.CodeMessageError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceType}/{resourceName}/providers/Microsoft.OperationsManagement/ManagementAssociations/{managementAssociationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.providerName,
    Parameters.resourceType,
    Parameters.resourceName,
    Parameters.managementAssociationName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CodeMessageError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceType}/{resourceName}/providers/Microsoft.OperationsManagement/ManagementAssociations/{managementAssociationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.providerName,
    Parameters.resourceType,
    Parameters.resourceName,
    Parameters.managementAssociationName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagementAssociation
    },
    default: {
      bodyMapper: Mappers.CodeMessageError
    }
  },
  serializer
};
