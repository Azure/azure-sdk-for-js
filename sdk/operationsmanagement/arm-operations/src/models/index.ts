/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** The container for solution. */
export interface Solution {
  /**
   * Resource ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Resource name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Resource type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Resource location */
  location?: string;
  /** Resource tags */
  tags?: { [propertyName: string]: string };
  /** Plan for solution object supported by the OperationsManagement resource provider. */
  plan?: SolutionPlan;
  /** Properties for solution object supported by the OperationsManagement resource provider. */
  properties?: SolutionProperties;
}

/** Plan for solution object supported by the OperationsManagement resource provider. */
export interface SolutionPlan {
  /** name of the solution to be created. For Microsoft published solution it should be in the format of solutionType(workspaceName). SolutionType part is case sensitive. For third party solution, it can be anything. */
  name?: string;
  /** Publisher name. For gallery solution, it is Microsoft. */
  publisher?: string;
  /** promotionCode, Not really used now, can you left as empty */
  promotionCode?: string;
  /** name of the solution to enabled/add. For Microsoft published gallery solution it should be in the format of OMSGallery/<solutionType>. This is case sensitive */
  product?: string;
}

/** Solution properties supported by the OperationsManagement resource provider. */
export interface SolutionProperties {
  /** The azure resourceId for the workspace where the solution will be deployed/enabled. */
  workspaceResourceId: string;
  /**
   * The provisioning state for the solution.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** The azure resources that will be contained within the solutions. They will be locked and gets deleted automatically when the solution is deleted. */
  containedResources?: string[];
  /** The resources that will be referenced from this solution. Deleting any of those solution out of band will break the solution. */
  referencedResources?: string[];
}

/** The error body contract. */
export interface CodeMessageError {
  /** The error details for a failed request. */
  error?: CodeMessageErrorError;
}

/** The error details for a failed request. */
export interface CodeMessageErrorError {
  /** The error type. */
  code?: string;
  /** The error message. */
  message?: string;
}

/** The properties of a Solution that can be patched. */
export interface SolutionPatch {
  /** Resource tags */
  tags?: { [propertyName: string]: string };
}

/** the list of solution response */
export interface SolutionPropertiesList {
  /** List of solution properties within the subscription. */
  value?: Solution[];
}

/** the list of ManagementAssociation response */
export interface ManagementAssociationPropertiesList {
  /** List of Management Association properties within the subscription. */
  value?: ManagementAssociation[];
}

/** The container for solution. */
export interface ManagementAssociation {
  /**
   * Resource ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Resource name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Resource type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Resource location */
  location?: string;
  /** Properties for ManagementAssociation object supported by the OperationsManagement resource provider. */
  properties?: ManagementAssociationProperties;
}

/** ManagementAssociation properties supported by the OperationsManagement resource provider. */
export interface ManagementAssociationProperties {
  /** The applicationId of the appliance for this association. */
  applicationId: string;
}

/** the list of ManagementConfiguration response */
export interface ManagementConfigurationPropertiesList {
  /** List of Management Configuration properties within the subscription. */
  value?: ManagementConfiguration[];
}

/** The container for solution. */
export interface ManagementConfiguration {
  /**
   * Resource ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Resource name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Resource type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Resource location */
  location?: string;
  /** Properties for ManagementConfiguration object supported by the OperationsManagement resource provider. */
  properties?: ManagementConfigurationProperties;
}

/** ManagementConfiguration properties supported by the OperationsManagement resource provider. */
export interface ManagementConfigurationProperties {
  /** The applicationId of the appliance for this Management. */
  applicationId?: string;
  /** The type of the parent resource. */
  parentResourceType: string;
  /** Parameters to run the ARM template */
  parameters: ArmTemplateParameter[];
  /**
   * The provisioning state for the ManagementConfiguration.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** The Json object containing the ARM template to deploy */
  template: Record<string, unknown>;
}

/** Parameter to pass to ARM template */
export interface ArmTemplateParameter {
  /** name of the parameter. */
  name?: string;
  /** value for the parameter. In Jtoken */
  value?: string;
}

/** Result of the request to list solution operations. */
export interface OperationListResult {
  /** List of solution operations supported by the OperationsManagement resource provider. */
  value?: Operation[];
}

/** Supported operation of OperationsManagement resource provider. */
export interface Operation {
  /** Operation name: {provider}/{resource}/{operation} */
  name?: string;
  /** Display metadata associated with the operation. */
  display?: OperationDisplay;
}

/** Display metadata associated with the operation. */
export interface OperationDisplay {
  /** Service provider: Microsoft OperationsManagement. */
  provider?: string;
  /** Resource on which the operation is performed etc. */
  resource?: string;
  /** Type of operation: get, read, delete, etc. */
  operation?: string;
}

/** Optional parameters. */
export interface SolutionsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type SolutionsCreateOrUpdateResponse = Solution;

/** Optional parameters. */
export interface SolutionsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type SolutionsUpdateResponse = Solution;

/** Optional parameters. */
export interface SolutionsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface SolutionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SolutionsGetResponse = Solution;

/** Optional parameters. */
export interface SolutionsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type SolutionsListByResourceGroupResponse = SolutionPropertiesList;

/** Optional parameters. */
export interface SolutionsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type SolutionsListBySubscriptionResponse = SolutionPropertiesList;

/** Optional parameters. */
export interface ManagementAssociationsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type ManagementAssociationsListBySubscriptionResponse = ManagementAssociationPropertiesList;

/** Optional parameters. */
export interface ManagementAssociationsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type ManagementAssociationsCreateOrUpdateResponse = ManagementAssociation;

/** Optional parameters. */
export interface ManagementAssociationsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ManagementAssociationsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ManagementAssociationsGetResponse = ManagementAssociation;

/** Optional parameters. */
export interface ManagementConfigurationsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type ManagementConfigurationsListBySubscriptionResponse = ManagementConfigurationPropertiesList;

/** Optional parameters. */
export interface ManagementConfigurationsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type ManagementConfigurationsCreateOrUpdateResponse = ManagementConfiguration;

/** Optional parameters. */
export interface ManagementConfigurationsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ManagementConfigurationsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ManagementConfigurationsGetResponse = ManagementConfiguration;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
