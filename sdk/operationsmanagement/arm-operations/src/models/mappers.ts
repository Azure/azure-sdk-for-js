/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const Solution: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Solution",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      plan: {
        serializedName: "plan",
        type: {
          name: "Composite",
          className: "SolutionPlan"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SolutionProperties"
        }
      }
    }
  }
};

export const SolutionPlan: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SolutionPlan",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      publisher: {
        serializedName: "publisher",
        type: {
          name: "String"
        }
      },
      promotionCode: {
        serializedName: "promotionCode",
        type: {
          name: "String"
        }
      },
      product: {
        serializedName: "product",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SolutionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SolutionProperties",
    modelProperties: {
      workspaceResourceId: {
        serializedName: "workspaceResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      containedResources: {
        serializedName: "containedResources",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      referencedResources: {
        serializedName: "referencedResources",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const CodeMessageError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CodeMessageError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CodeMessageErrorError"
        }
      }
    }
  }
};

export const CodeMessageErrorError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CodeMessageErrorError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SolutionPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SolutionPatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const SolutionPropertiesList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SolutionPropertiesList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Solution"
            }
          }
        }
      }
    }
  }
};

export const ManagementAssociationPropertiesList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementAssociationPropertiesList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagementAssociation"
            }
          }
        }
      }
    }
  }
};

export const ManagementAssociation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementAssociation",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ManagementAssociationProperties"
        }
      }
    }
  }
};

export const ManagementAssociationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementAssociationProperties",
    modelProperties: {
      applicationId: {
        serializedName: "applicationId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagementConfigurationPropertiesList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementConfigurationPropertiesList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagementConfiguration"
            }
          }
        }
      }
    }
  }
};

export const ManagementConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementConfiguration",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ManagementConfigurationProperties"
        }
      }
    }
  }
};

export const ManagementConfigurationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementConfigurationProperties",
    modelProperties: {
      applicationId: {
        serializedName: "applicationId",
        type: {
          name: "String"
        }
      },
      parentResourceType: {
        serializedName: "parentResourceType",
        required: true,
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ArmTemplateParameter"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      template: {
        serializedName: "template",
        required: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const ArmTemplateParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArmTemplateParameter",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      }
    }
  }
};
