{"version":3,"file":"notification.js","sourceRoot":"","sources":["../../../src/models/notification.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport * as Constants from \"../utils/constants.js\";\nimport type {\n  AdmNativeMessage,\n  AppleNativeMessage,\n  FirebaseLegacyNativeMessage,\n  FirebaseV1NativeMessage,\n} from \"./notificationBodyBuilder.js\";\nimport type { AppleHeaders, WindowsHeaders } from \"./notificationHeaderBuilder.js\";\n\nfunction isString(value: unknown): value is string {\n  return typeof value === \"string\" || value instanceof String;\n}\n\n/**\n * Represents a notification that can be sent to a device.\n */\nexport interface NotificationCommon {\n  /**\n   * The body for the push notification.\n   */\n  body: string;\n\n  /**\n   * The headers to include for the push notification.\n   */\n  headers?: Record<string, unknown>;\n}\n\n/**\n * The common notification parameters to accept a string body or JSON body.\n */\nexport interface NotificationCommonParams {\n  /**\n   * The body for the push notification.\n   */\n  body: string | unknown;\n\n  /**\n   * The headers to include for the push notification.\n   */\n  headers?: Record<string, unknown>;\n}\n\n/**\n * Represents a JSON notification hub.\n */\nexport interface JsonNotification extends NotificationCommon {\n  /**\n   * The content type for the push notification.\n   */\n  contentType: \"application/json;charset=utf-8\";\n}\n\n/**\n * Represents an Apple APNs push notification.\n */\nexport interface AppleNotification extends JsonNotification {\n  /**\n   * The platform for the push notification.\n   */\n  platform: \"apple\";\n}\n\n/**\n * Represents an Apple notification that can be sent to a device.\n */\nexport interface AppleNotificationParams {\n  /**\n   * The body for the push notification.\n   */\n  body: string | AppleNativeMessage;\n\n  /**\n   * The headers to include for the push notification.\n   */\n  headers?: AppleHeaders;\n}\n\n/**\n * Creates a notification to send to an Apple device.\n * @param notification - A partial message used to create a message for Apple.\n * @returns A newly created Apple.\n */\nexport function createAppleNotification(notification: AppleNotificationParams): AppleNotification {\n  const body = isString(notification.body) ? notification.body : JSON.stringify(notification.body);\n\n  return {\n    ...notification,\n    body,\n    platform: \"apple\",\n    contentType: Constants.JSON_CONTENT_TYPE,\n  };\n}\n\n/**\n * Represents an Amazon Device Messaging (ADM) push notification.\n */\nexport interface AdmNotification extends JsonNotification {\n  /**\n   * The platform for the push notification.\n   */\n  platform: \"adm\";\n}\n\n/**\n * Represents an ADM notification that can be sent to a device.\n */\nexport interface AdmNotificationParams {\n  /**\n   * The body for the push notification.\n   */\n  body: string | AdmNativeMessage;\n\n  /**\n   * The headers to include for the push notification.\n   */\n  headers?: Record<string, string>;\n}\n\n/**\n * Creates a notification to send to an Amazon Device Messaging device.\n * @param notification - A partial message used to create a message for Amazon Device Messaging.\n * @returns A newly created Amazon Device Messaging.\n */\nexport function createAdmNotification(notification: AdmNotificationParams): AdmNotification {\n  const body = isString(notification.body) ? notification.body : JSON.stringify(notification.body);\n\n  return {\n    ...notification,\n    body,\n    platform: \"adm\",\n    contentType: Constants.JSON_CONTENT_TYPE,\n  };\n}\n\n/**\n * Represents a Baidu push notification.\n */\nexport interface BaiduNotification extends JsonNotification {\n  /**\n   * The platform for the push notification.\n   */\n  platform: \"baidu\";\n}\n\n/**\n * Creates a notification to send to a Baidu registered device.\n * @param notification - A partial message used to create a message for Baidu.\n * @returns A newly created Baidu.\n */\nexport function createBaiduNotification(notification: NotificationCommonParams): BaiduNotification {\n  const body = isString(notification.body) ? notification.body : JSON.stringify(notification.body);\n\n  return {\n    ...notification,\n    body,\n    platform: \"baidu\",\n    contentType: Constants.JSON_CONTENT_TYPE,\n  };\n}\n\n/**\n * Represents a Browser push notification.\n */\nexport interface BrowserNotification extends JsonNotification {\n  /**\n   * The platform for the push notification.\n   */\n  platform: \"browser\";\n}\n\n/**\n * Creates a notification to send to a browser.\n * @param notification - A partial message used to create a message for a browser.\n * @returns A newly created Web Push browser.\n */\nexport function createBrowserNotification(\n  notification: NotificationCommonParams,\n): BrowserNotification {\n  const body = isString(notification.body) ? notification.body : JSON.stringify(notification.body);\n\n  return {\n    ...notification,\n    body,\n    platform: \"browser\",\n    contentType: Constants.JSON_CONTENT_TYPE,\n  };\n}\n\n/**\n * Represents a Firebase legacy HTTP push notification.\n */\nexport interface FcmLegacyNotification extends JsonNotification {\n  /**\n   * The platform for the push notification.\n   */\n  platform: \"gcm\";\n}\n\n/**\n * Represents an Firebase Legacy notification that can be sent to a device.\n */\nexport interface FcmLegacyNotificationParams {\n  /**\n   * The body for the push notification.\n   */\n  body: string | FirebaseLegacyNativeMessage;\n\n  /**\n   * The headers to include for the push notification.\n   */\n  headers?: Record<string, string>;\n}\n\n/**\n * Creates a notification to send to Firebase.\n * @param notification - A partial message used to create a message for Firebase.\n * @returns A newly created Firebase notification.\n */\nexport function createFcmLegacyNotification(\n  notification: FcmLegacyNotificationParams,\n): FcmLegacyNotification {\n  const body = isString(notification.body) ? notification.body : JSON.stringify(notification.body);\n\n  return {\n    ...notification,\n    body,\n    platform: \"gcm\",\n    contentType: Constants.JSON_CONTENT_TYPE,\n  };\n}\n\n/**\n * Represents an Firebase V1 API notification that can be sent to a device.\n */\nexport interface FcmV1Notification extends JsonNotification {\n  /**\n   * The platform for the push notification.\n   */\n  platform: \"fcmv1\";\n}\n\n/**\n * Represents an Firebase V1 notification that can be sent to a device.\n */\nexport interface FcmV1NotificationParams {\n  /**\n   * The body for the push notification.\n   */\n  body: string | FirebaseV1NativeMessage;\n\n  /**\n   * The headers to include for the push notification.\n   */\n  headers?: Record<string, string>;\n}\n\n/**\n * Creates a notification to send to Firebase.\n * @param notification - A partial message used to create a message for Firebase.\n * @returns A newly created Firebase notification.\n */\nexport function createFcmV1Notification(notification: FcmV1NotificationParams): FcmV1Notification {\n  const body = isString(notification.body) ? notification.body : JSON.stringify(notification.body);\n\n  return {\n    ...notification,\n    body,\n    platform: \"fcmv1\",\n    contentType: Constants.JSON_CONTENT_TYPE,\n  };\n}\n\n/**\n * Represents a Xiaomi push notification.\n */\nexport interface XiaomiNotification extends JsonNotification {\n  /**\n   * The platform for the push notification.\n   */\n  platform: \"xiaomi\";\n}\n\n/**\n * Creates a notification to send to Xiaomi.\n * @param notification - A partial message used to create a message for Xiaomi.\n * @returns A newly created Xiaomi notification.\n */\nexport function createXiaomiNotification(\n  notification: NotificationCommonParams,\n): XiaomiNotification {\n  const body = isString(notification.body) ? notification.body : JSON.stringify(notification.body);\n\n  return {\n    ...notification,\n    body,\n    platform: \"xiaomi\",\n    contentType: Constants.JSON_CONTENT_TYPE,\n  };\n}\n\n/**\n * Represents a template based push notification.\n */\nexport interface TemplateNotification extends JsonNotification {\n  /**\n   * The platform for the push notification.\n   */\n  platform: \"template\";\n}\n\n/**\n * Creates a template notification.\n * @param notification - A partial message used to be used for a template notification.\n * @returns A newly created Firebase.\n */\nexport function createTemplateNotification(\n  notification: NotificationCommonParams,\n): TemplateNotification {\n  const body = isString(notification.body) ? notification.body : JSON.stringify(notification.body);\n\n  return {\n    ...notification,\n    body,\n    platform: \"template\",\n    contentType: Constants.JSON_CONTENT_TYPE,\n  };\n}\n\n/**\n * Represents the possible WNS content-types.\n */\nexport type WindowsContentType = \"application/xml\" | \"application/octet-stream\";\n\n/**\n * Represents a Windows Notification Services (WNS) push notification.\n */\nexport interface WindowsNotification extends NotificationCommon {\n  /**\n   * The platform for the push notification.\n   */\n  platform: \"windows\";\n\n  /**\n   * The content type for the push notification.\n   */\n  contentType: WindowsContentType;\n}\n\n/**\n * Represents a WNS notification that can be sent to a device.\n */\nexport interface WnsNotificationParams {\n  /**\n   * The body for the push notification.\n   */\n  body: string;\n\n  /**\n   * The headers to include for the push notification.\n   */\n  headers?: WindowsHeaders;\n}\n\n/**\n * Creates a notification to send to WNS.\n * @param notification - The WNS notification to send.\n * @returns A newly created WNS message.\n */\nexport function createWindowsNotification(\n  notification: WnsNotificationParams,\n): WindowsNotification {\n  if (notification?.headers && notification.headers[\"X-WNS-Type\"]) {\n    const wnsType = notification.headers[\"X-WNS-Type\"];\n    switch (wnsType) {\n      case Constants.WNS_TOAST:\n        return createWindowsToastNotification(notification);\n      case Constants.WNS_TITLE:\n        return createWindowsTileNotification(notification);\n      case Constants.WNS_BADGE:\n        return createWindowsBadgeNotification(notification);\n      case Constants.WNS_RAW:\n        return createWindowsRawNotification(notification);\n      default:\n        throw new Error(`Invalid WNS type: ${wnsType}`);\n    }\n  } else {\n    throw new Error(`Missing WNS type in headers`);\n  }\n}\n\n/**\n * Creates a badge message to send to WNS.\n * @param notification - A partial message used to create a badge message for WNS.\n * @returns A newly created WNS badge.\n */\nexport function createWindowsBadgeNotification(\n  notification: WnsNotificationParams,\n): WindowsNotification {\n  const result: WindowsNotification = {\n    ...notification,\n    platform: \"windows\",\n    contentType: Constants.XML_CONTENT_TYPE,\n  };\n\n  if (!result.headers) {\n    result.headers = {};\n  }\n\n  if (!result.headers[Constants.WNS_TYPE_NAME]) {\n    result.headers[Constants.WNS_TYPE_NAME] = Constants.WNS_BADGE;\n  }\n\n  return result;\n}\n\n/**\n * Creates a tile message to send to WNS.\n * @param notification - A partial message used to create a tile message for WNS.\n * @returns A newly created WNS tile.\n */\nexport function createWindowsTileNotification(\n  notification: WnsNotificationParams,\n): WindowsNotification {\n  const result: WindowsNotification = {\n    ...notification,\n    platform: \"windows\",\n    contentType: Constants.XML_CONTENT_TYPE,\n  };\n\n  if (!result.headers) {\n    result.headers = {};\n  }\n\n  if (!result.headers[Constants.WNS_TYPE_NAME]) {\n    result.headers[Constants.WNS_TYPE_NAME] = Constants.WNS_TITLE;\n  }\n\n  return result;\n}\n\n/**\n * Creates a toast message to send to WNS.\n * @param notification - A partial message used to create a toast message for WNS.\n * @returns A newly created WNS toast.\n */\nexport function createWindowsToastNotification(\n  notification: WnsNotificationParams,\n): WindowsNotification {\n  const result: WindowsNotification = {\n    ...notification,\n    platform: \"windows\",\n    contentType: Constants.XML_CONTENT_TYPE,\n  };\n\n  if (!result.headers) {\n    result.headers = {};\n  }\n\n  if (!result.headers[Constants.WNS_TYPE_NAME]) {\n    result.headers[Constants.WNS_TYPE_NAME] = Constants.WNS_TOAST;\n  }\n\n  return result;\n}\n\n/**\n * Creates a notification to send to WNS in wns/raw format..\n * @param notification - A partial message used to create a message for WNS in XML format.\n * @returns A newly created WNS message using XML.\n */\nexport function createWindowsRawNotification(\n  notification: WnsNotificationParams,\n): WindowsNotification {\n  const result: WindowsNotification = {\n    ...notification,\n    platform: \"windows\",\n    contentType: Constants.STREAM_CONTENT_TYPE,\n  };\n\n  if (!result.headers) {\n    result.headers = {};\n  }\n\n  if (!result.headers[Constants.WNS_TYPE_NAME]) {\n    result.headers[Constants.WNS_TYPE_NAME] = Constants.WNS_RAW;\n  }\n\n  return result;\n}\n\n/**\n * Represents the possible push notification messages types.\n */\nexport type Notification =\n  | AppleNotification\n  | AdmNotification\n  | BaiduNotification\n  | BrowserNotification\n  | FcmLegacyNotification\n  | FcmV1Notification\n  | XiaomiNotification\n  | WindowsNotification\n  | TemplateNotification;\n"]}