{"version":3,"file":"_listRegistrations.js","sourceRoot":"","sources":["../../../../src/api/internal/_listRegistrations.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AASlC,oDAOC;AAED,gEAYC;;AA5BD,6CAA0D;AAK1D,2FAA4F;AAE5F,SAAuB,oBAAoB,CACzC,OAAsC,EACtC,OAAiC;;;;YAEjC,KAAyB,eAAA,KAAA,sBAAA,0BAA0B,CAAC,OAAO,EAAE,OAAO,CAAC,CAAA,IAAA,uEAAE,CAAC;gBAA/C,cAA4C;gBAA5C,WAA4C;gBAA1D,MAAM,IAAI,KAAA,CAAA;gBACnB,sBAAA,KAAK,CAAC,CAAC,yBAAA,sBAAA,IAAI,CAAA,CAAA,CAAA,CAAC;YACd,CAAC;;;;;;;;;IACH,CAAC;CAAA;AAED,SAAuB,0BAA0B,CAC/C,OAAsC,EACtC,OAAiC;;QAEjC,IAAI,MAAM,GAAG,sBAAM,kBAAkB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAA,CAAC;QACxD,4BAAM,MAAM,CAAC,aAAa,IAAI,EAAE,CAAA,CAAC;QACjC,IAAI,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;QACjD,OAAO,iBAAiB,EAAE,CAAC;YACzB,MAAM,GAAG,sBAAM,kBAAkB,CAAC,OAAO,EAAE,OAAO,EAAE,iBAAiB,CAAC,CAAA,CAAC;YACvE,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;YAC7C,4BAAM,MAAM,CAAC,aAAa,IAAI,EAAE,CAAA,CAAC;QACnC,CAAC;IACH,CAAC;CAAA;AAED,KAAK,UAAU,kBAAkB,CAC/B,OAAsC,EACtC,OAAiC,EACjC,iBAA0B;IAE1B,MAAM,QAAQ,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC;IACtC,QAAQ,CAAC,QAAQ,IAAI,gBAAgB,CAAC;IACtC,IAAI,OAAO,CAAC,GAAG,KAAK,SAAS,EAAE,CAAC;QAC9B,QAAQ,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;IACtD,CAAC;IAED,IAAI,OAAO,CAAC,MAAM,KAAK,SAAS,EAAE,CAAC;QACjC,QAAQ,CAAC,YAAY,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;IACvD,CAAC;IAED,IAAI,iBAAiB,KAAK,SAAS,EAAE,CAAC;QACpC,QAAQ,CAAC,YAAY,CAAC,GAAG,CAAC,mBAAmB,EAAE,iBAAiB,CAAC,CAAC;IACpE,CAAC;IAED,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;IACjE,MAAM,OAAO,GAAG,IAAA,0BAAa,EAAC,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IACjE,MAAM,QAAQ,GAAG,MAAM,IAAA,wBAAW,EAAC,OAAO,EAAE,OAAO,EAAE,GAAG,CAAC,CAAC;IAE1D,MAAM,aAAa,GAAG,MAAM,yDAA6B,CAAC,qBAAqB,CAC7E,QAAQ,CAAC,UAAW,CACrB,CAAC;IACF,MAAM,SAAS,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;IACjE,OAAO;QACL,aAAa;QACb,iBAAiB,EAAE,SAAS;KAC7B,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { createRequest, sendRequest } from \"./_client.js\";\nimport type { NotificationHubsClientContext } from \"../index.js\";\nimport type { RegistrationDescription } from \"../../models/registration.js\";\nimport type { RegistrationQueryOptions } from \"../../models/options.js\";\nimport type { RegistrationQueryResponse } from \"../../models/response.js\";\nimport { registrationDescriptionParser } from \"../../serializers/registrationSerializer.js\";\n\nexport async function* listRegistrationsAll(\n  context: NotificationHubsClientContext,\n  options: RegistrationQueryOptions,\n): AsyncIterableIterator<RegistrationDescription> {\n  for await (const page of listRegistrationPagingPage(context, options)) {\n    yield* page;\n  }\n}\n\nexport async function* listRegistrationPagingPage(\n  context: NotificationHubsClientContext,\n  options: RegistrationQueryOptions,\n): AsyncIterableIterator<RegistrationDescription[]> {\n  let result = await _listRegistrations(context, options);\n  yield result.registrations || [];\n  let continuationToken = result.continuationToken;\n  while (continuationToken) {\n    result = await _listRegistrations(context, options, continuationToken);\n    continuationToken = result.continuationToken;\n    yield result.registrations || [];\n  }\n}\n\nasync function _listRegistrations(\n  context: NotificationHubsClientContext,\n  options: RegistrationQueryOptions,\n  continuationToken?: string,\n): Promise<RegistrationQueryResponse> {\n  const endpoint = context.requestUrl();\n  endpoint.pathname += \"/registrations\";\n  if (options.top !== undefined) {\n    endpoint.searchParams.set(\"$top\", `${options.top}`);\n  }\n\n  if (options.filter !== undefined) {\n    endpoint.searchParams.set(\"$filter\", options.filter);\n  }\n\n  if (continuationToken !== undefined) {\n    endpoint.searchParams.set(\"continuationtoken\", continuationToken);\n  }\n\n  const headers = await context.createHeaders(\"listRegistrations\");\n  const request = createRequest(endpoint, \"GET\", headers, options);\n  const response = await sendRequest(context, request, 200);\n\n  const registrations = await registrationDescriptionParser.parseRegistrationFeed(\n    response.bodyAsText!,\n  );\n  const nextToken = response.headers.get(\"x-ms-continuationtoken\");\n  return {\n    registrations,\n    continuationToken: nextToken,\n  };\n}\n"]}