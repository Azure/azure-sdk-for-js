{"version":3,"file":"notificationDetailsSerializer.js","sourceRoot":"","sources":["../../../src/serializers/notificationDetailsSerializer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  NotificationDetails,\n  NotificationOutcome,\n  NotificationOutcomeState,\n} from \"../models/notificationDetails.js\";\nimport { getDateOrUndefined, getInteger, getStringOrUndefined, isDefined } from \"../utils/utils.js\";\nimport { parseXML } from \"@azure/core-xml\";\n\n/**\n * @internal\n * Parses a NotificationDetails from incoming XML.\n */\nexport async function parseNotificationDetails(bodyText: string): Promise<NotificationDetails> {\n  const xml = await parseXML(bodyText, {\n    includeRoot: true,\n  });\n  const notificationDetails = xml[\"NotificationDetails\"];\n\n  let apnsOutcomeCounts: NotificationOutcome[] | undefined;\n  if (isDefined(notificationDetails[\"ApnsOutcomeCounts\"])) {\n    apnsOutcomeCounts = parseOutcomeCounts(notificationDetails[\"ApnsOutcomeCounts\"][\"Outcome\"]);\n  }\n\n  let admOutcomeCounts: NotificationOutcome[] | undefined;\n  if (isDefined(notificationDetails[\"AdmOutcomeCounts\"])) {\n    admOutcomeCounts = parseOutcomeCounts(notificationDetails[\"AdmOutcomeCounts\"][\"Outcome\"]);\n  }\n\n  let baiduOutcomeCounts: NotificationOutcome[] | undefined;\n  if (isDefined(notificationDetails[\"BaiduOutcomeCounts\"])) {\n    baiduOutcomeCounts = parseOutcomeCounts(notificationDetails[\"BaiduOutcomeCounts\"][\"Outcome\"]);\n  }\n\n  let browserOutcomeCounts: NotificationOutcome[] | undefined;\n  if (isDefined(notificationDetails[\"BrowserOutcomeCounts\"])) {\n    browserOutcomeCounts = parseOutcomeCounts(\n      notificationDetails[\"BrowserOutcomeCounts\"][\"Outcome\"],\n    );\n  }\n\n  let fcmOutcomeCounts: NotificationOutcome[] | undefined;\n  if (isDefined(notificationDetails[\"GcmOutcomeCounts\"])) {\n    fcmOutcomeCounts = parseOutcomeCounts(notificationDetails[\"GcmOutcomeCounts\"][\"Outcome\"]);\n  }\n\n  let fcmV1OutcomeCounts: NotificationOutcome[] | undefined;\n  if (isDefined(notificationDetails[\"FcmV1OutcomeCounts\"])) {\n    fcmV1OutcomeCounts = parseOutcomeCounts(notificationDetails[\"FcmV1OutcomeCounts\"][\"Outcome\"]);\n  }\n\n  let xiaomiOutcomeCounts: NotificationOutcome[] | undefined;\n  if (isDefined(notificationDetails[\"XiaomiOutcomeCounts\"])) {\n    xiaomiOutcomeCounts = parseOutcomeCounts(notificationDetails[\"XiaomiOutcomeCounts\"][\"Outcome\"]);\n  }\n\n  let wnsOutcomeCounts: NotificationOutcome[] | undefined;\n  if (isDefined(notificationDetails[\"WnsOutcomeCounts\"])) {\n    wnsOutcomeCounts = parseOutcomeCounts(notificationDetails[\"WnsOutcomeCounts\"][\"Outcome\"]);\n  }\n\n  return {\n    notificationId: getStringOrUndefined(notificationDetails[\"NotificationId\"])?.trim(),\n    location: getStringOrUndefined(notificationDetails[\"Location\"])?.trim(),\n    state: getStringOrUndefined(notificationDetails[\"State\"])?.trim() as NotificationOutcomeState,\n    enqueueTime: getDateOrUndefined(notificationDetails[\"EnqueueTime\"]),\n    startTime: getDateOrUndefined(notificationDetails[\"StartTime\"]),\n    endTime: getDateOrUndefined(notificationDetails[\"EndTime\"]),\n    pnsErrorDetailsUrl: getStringOrUndefined(notificationDetails[\"PnsErrorDetailsUri\"])?.trim(),\n    targetPlatforms: getStringOrUndefined(notificationDetails[\"TargetPlatforms\"])?.trim(),\n    notificationBody: getStringOrUndefined(notificationDetails[\"NotificationBody\"])?.trim(),\n    apnsOutcomeCounts,\n    admOutcomeCounts,\n    baiduOutcomeCounts,\n    browserOutcomeCounts,\n    fcmOutcomeCounts,\n    fcmV1OutcomeCounts,\n    xiaomiOutcomeCounts,\n    wnsOutcomeCounts,\n  };\n}\n\nfunction parseOutcomeCounts(\n  counts: Record<string, any>[] | Record<string, any>,\n): NotificationOutcome[] {\n  const items = Array.isArray(counts) ? counts : [counts];\n  const results: NotificationOutcome[] = [];\n  for (const item of items) {\n    results.push({ state: item[\"Name\"], count: getInteger(item[\"Count\"], \"Count\") });\n  }\n\n  return results;\n}\n"]}