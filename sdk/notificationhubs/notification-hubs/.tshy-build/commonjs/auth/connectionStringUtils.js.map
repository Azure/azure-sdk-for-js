{"version":3,"file":"connectionStringUtils.js","sourceRoot":"","sources":["../../../src/auth/connectionStringUtils.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AAmFlC,kFAKC;AAQD,sFA2BC;AAzHD,mEAA6D;AAO7D;;;;;;;;;;;;;GAaG;AACH,SAAS,qBAAqB,CAAI,gBAAwB;IACxD,MAAM,MAAM,GAA4B,EAAE,CAAC;IAC3C,MAAM,KAAK,GAAG,gBAAgB,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAEjD,KAAK,IAAI,IAAI,IAAI,KAAK,EAAE,CAAC;QACvB,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;QAEnB,IAAI,IAAI,KAAK,EAAE,EAAE,CAAC;YAChB,qBAAqB;YACrB,SAAS;QACX,CAAC;QAED,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACrC,IAAI,UAAU,KAAK,CAAC,CAAC,EAAE,CAAC;YACtB,MAAM,IAAI,KAAK,CACb,8FAA8F,CAC/F,CAAC;QACJ,CAAC;QAED,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,IAAI,EAAE,CAAC;QACjD,IAAI,GAAG,KAAK,EAAE,EAAE,CAAC;YACf,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;QAC7E,CAAC;QAED,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;QAEpD,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;IACtB,CAAC;IAED,OAAO,MAAa,CAAC;AACvB,CAAC;AAwBD;;;;;GAKG;AACH,SAAgB,mCAAmC,CACjD,eAAuB,EACvB,mBAA2B;IAE3B,OAAO,IAAI,0CAAkB,CAAC,EAAE,eAAe,EAAE,mBAAmB,EAAE,CAAC,CAAC;AAC1E,CAAC;AAED;;;;;GAKG;AACH,SAAgB,qCAAqC,CACnD,gBAAwB;IAExB,MAAM,YAAY,GAAG,qBAAqB,CAIvC,gBAAgB,CAAC,CAAC;IACrB,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;QAC3B,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;IACpE,CAAC;IAED,IAAI,YAAY,CAAC,eAAe,IAAI,CAAC,YAAY,CAAC,mBAAmB,EAAE,CAAC;QACtE,MAAM,IAAI,KAAK,CAAC,yEAAyE,CAAC,CAAC;IAC7F,CAAC;SAAM,IAAI,CAAC,YAAY,CAAC,eAAe,IAAI,YAAY,CAAC,mBAAmB,EAAE,CAAC;QAC7E,MAAM,IAAI,KAAK,CACb,iFAAiF,CAClF,CAAC;IACJ,CAAC;IAED,MAAM,MAAM,GAA+C;QACzD,QAAQ,EAAE,YAAY,CAAC,QAAQ;QAC/B,eAAe,EAAE,YAAY,CAAC,eAAgB;QAC9C,mBAAmB,EAAE,YAAY,CAAC,mBAAoB;KACvD,CAAC;IAEF,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { SasTokenCredential } from \"./sasTokenCredential.js\";\n\n/**\n * Defines an object with possible properties defined in T.\n */\nexport type ParsedOutput<T> = { [P in keyof T]: T[P] };\n\n/**\n * Parses the connection string and returns an object of type T.\n *\n * Connection strings have the following syntax:\n *\n * ConnectionString ::= `Part { \";\" Part } [ \";\" ] [ WhiteSpace ]`\n * Part             ::= [ PartLiteral [ \"=\" PartLiteral ] ]\n * PartLiteral      ::= [ WhiteSpace ] Literal [ WhiteSpace ]\n * Literal          ::= ? any sequence of characters except ; or = or WhiteSpace ?\n * WhiteSpace       ::= ? all whitespace characters including `\\r` and `\\n` ?\n *\n * @param connectionString - The connection string to be parsed.\n * @returns ParsedOutput<T>.\n */\nfunction parseConnectionString<T>(connectionString: string): ParsedOutput<T> {\n  const output: { [k: string]: string } = {};\n  const parts = connectionString.trim().split(\";\");\n\n  for (let part of parts) {\n    part = part.trim();\n\n    if (part === \"\") {\n      // parts can be empty\n      continue;\n    }\n\n    const splitIndex = part.indexOf(\"=\");\n    if (splitIndex === -1) {\n      throw new Error(\n        \"Connection string malformed: each part of the connection string must have an `=` assignment.\",\n      );\n    }\n\n    const key = part.substring(0, splitIndex).trim();\n    if (key === \"\") {\n      throw new Error(\"Connection string malformed: missing key for assignment\");\n    }\n\n    const value = part.substring(splitIndex + 1).trim();\n\n    output[key] = value;\n  }\n\n  return output as any;\n}\n\n/**\n * The set of properties that comprise a Notification Hubs connection string.\n */\nexport interface NotificationHubsConnectionStringProperties {\n  /**\n   * The value for \"Endpoint\" in the connection string.\n   */\n  endpoint: string;\n  /**\n   * The value for \"SharedAccessKey\" in the connection string. This along with the \"SharedAccessKeyName\"\n   * in the connection string is used to generate a SharedAccessSignature which can be used authorize\n   * the connection to the service.\n   */\n  sharedAccessKey: string;\n  /**\n   * The value for \"SharedAccessKeyName\" in the connection string. This along with the \"SharedAccessKey\"\n   * in the connection string is used to generate a SharedAccessSignature which can be used authorize\n   * the connection to the service.\n   */\n  sharedAccessKeyName: string;\n}\n\n/**\n * Creates a SasTokenCredential from a shared access key and shared access key name.\n * @param sharedAccessKey - The shared access key value.\n * @param sharedAccessKeyName - The shared access key name.\n * @returns A SasTokenCredential with the given shared access token information.\n */\nexport function createTokenCredentialFromConnection(\n  sharedAccessKey: string,\n  sharedAccessKeyName: string,\n): SasTokenCredential {\n  return new SasTokenCredential({ sharedAccessKey, sharedAccessKeyName });\n}\n\n/**\n * Parses given connection string into the different properties applicable to Azure Service Bus.\n * The properties are useful to then construct a ServiceBusClient.\n * @param connectionString - The connection string associated with the Shared Access Policy created\n * for the Service Bus namespace, queue or topic.\n */\nexport function parseNotificationHubsConnectionString(\n  connectionString: string,\n): NotificationHubsConnectionStringProperties {\n  const parsedResult = parseConnectionString<{\n    Endpoint: string;\n    SharedAccessKey?: string;\n    SharedAccessKeyName?: string;\n  }>(connectionString);\n  if (!parsedResult.Endpoint) {\n    throw new Error(\"Connection string should have an Endpoint key.\");\n  }\n\n  if (parsedResult.SharedAccessKey && !parsedResult.SharedAccessKeyName) {\n    throw new Error(\"Connection string with SharedAccessKey should have SharedAccessKeyName.\");\n  } else if (!parsedResult.SharedAccessKey && parsedResult.SharedAccessKeyName) {\n    throw new Error(\n      \"Connection string with SharedAccessKeyName should have SharedAccessKey as well.\",\n    );\n  }\n\n  const output: NotificationHubsConnectionStringProperties = {\n    endpoint: parsedResult.Endpoint,\n    sharedAccessKey: parsedResult.SharedAccessKey!,\n    sharedAccessKeyName: parsedResult.SharedAccessKeyName!,\n  };\n\n  return output;\n}\n"]}