{"version":3,"file":"sasTokenCredential.js","sourceRoot":"","sources":["../../../src/auth/sasTokenCredential.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAGlC,mDAA6C;AAiB7C;;;;;GAKG;AACH,MAAa,kBAAkB;IAM7B;;;OAGG;IACH,YAAY,UAA8B;QACxC,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAChC,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,QAAQ,CAAC,MAAyB;QACtC,MAAM,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;QAC5D,OAAO,WAAW,CAChB,IAAI,CAAC,WAAW,CAAC,mBAAmB,EACpC,IAAI,CAAC,WAAW,CAAC,eAAe,EAChC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,IAAI,EACpC,QAAQ,CACT,CAAC;IACJ,CAAC;CACF;AA3BD,gDA2BC;AAED;;;;;;;GAOG;AACH,KAAK,UAAU,WAAW,CACxB,OAAe,EACf,GAAW,EACX,MAAc,EACd,QAAgB;IAEhB,QAAQ,GAAG,kBAAkB,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC;IACtD,OAAO,GAAG,kBAAkB,CAAC,OAAO,CAAC,CAAC;IACtC,MAAM,YAAY,GAAG,QAAQ,GAAG,IAAI,GAAG,MAAM,CAAC;IAC9C,MAAM,GAAG,GAAG,MAAM,IAAA,0BAAU,EAAC,GAAG,EAAE,YAAY,CAAC,CAAC;IAEhD,OAAO;QACL,KAAK,EAAE,4BAA4B,QAAQ,QAAQ,GAAG,OAAO,MAAM,QAAQ,OAAO,EAAE;QACpF,kBAAkB,EAAE,MAAM;KAC3B,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { AccessToken, TokenCredential } from \"@azure/core-auth\";\nimport { signString } from \"./hmacSha256.js\";\n\n/**\n * Represents a named key credential.\n */\nexport interface NamedKeyCredential {\n  /**\n   * The Shared Access Signature key name.\n   */\n  sharedAccessKeyName: string;\n\n  /**\n   * The Shared Access Signature key value.\n   */\n  sharedAccessKey: string;\n}\n\n/**\n * A TokenProvider that generates a Sas token:\n * `SharedAccessSignature sr=<resource>&sig=<signature>&se=<expiry>&skn=<keyname>`\n *\n * @internal\n */\nexport class SasTokenCredential implements TokenCredential {\n  /**\n   * The SASCredential containing the key name and secret key value.\n   */\n  private _credential: NamedKeyCredential;\n\n  /**\n   * Initializes a new instance of SasTokenProvider\n   * @param credential - The source `NamedKeyCredential` or `SASCredential`.\n   */\n  constructor(credential: NamedKeyCredential) {\n    this._credential = credential;\n  }\n\n  /**\n   * Gets the sas token for the specified audience\n   * @param scopes - The scope for which the token is desired.\n   */\n  async getToken(scopes: string | string[]): Promise<AccessToken | null> {\n    const audience = Array.isArray(scopes) ? scopes[0] : scopes;\n    return createToken(\n      this._credential.sharedAccessKeyName,\n      this._credential.sharedAccessKey,\n      Math.floor(Date.now() / 1000) + 3600,\n      audience,\n    );\n  }\n}\n\n/**\n * Creates the sas token based on the provided information.\n * @param keyName - The shared access key name.\n * @param key - The shared access key.\n * @param expiry - The time period in unix time after which the token will expire.\n * @param audience - The audience for which the token is desired.\n * @internal\n */\nasync function createToken(\n  keyName: string,\n  key: string,\n  expiry: number,\n  audience: string,\n): Promise<AccessToken> {\n  audience = encodeURIComponent(audience.toLowerCase());\n  keyName = encodeURIComponent(keyName);\n  const stringToSign = audience + \"\\n\" + expiry;\n  const sig = await signString(key, stringToSign);\n\n  return {\n    token: `SharedAccessSignature sr=${audience}&sig=${sig}&se=${expiry}&skn=${keyName}`,\n    expiresOnTimestamp: expiry,\n  };\n}\n"]}