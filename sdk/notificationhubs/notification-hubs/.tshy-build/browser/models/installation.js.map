{"version":3,"file":"installation.js","sourceRoot":"","sources":["../../../src/models/installation.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAmElC;;;;GAIG;AACH,MAAM,UAAU,uBAAuB,CAAC,YAAqC;IAC3E,uCACK,YAAY,KACf,QAAQ,EAAE,MAAM,IAChB;AACJ,CAAC;AAYD;;;;GAIG;AACH,MAAM,UAAU,qBAAqB,CAAC,YAAqC;IACzE,uCACK,YAAY,KACf,QAAQ,EAAE,KAAK,IACf;AACJ,CAAC;AAYD;;;;GAIG;AACH,MAAM,UAAU,uBAAuB,CAAC,YAAqC;IAC3E,uCACK,YAAY,KACf,QAAQ,EAAE,OAAO,IACjB;AACJ,CAAC;AAYD;;;;GAIG;AACH,MAAM,UAAU,2BAA2B,CACzC,YAAqC;IAErC,uCACK,YAAY,KACf,QAAQ,EAAE,KAAK,IACf;AACJ,CAAC;AAYD;;;;GAIG;AACH,MAAM,UAAU,uBAAuB,CAAC,YAAqC;IAC3E,uCACK,YAAY,KACf,QAAQ,EAAE,OAAO,IACjB;AACJ,CAAC;AAYD;;;;GAIG;AACH,MAAM,UAAU,wBAAwB,CACtC,YAAqC;IAErC,uCACK,YAAY,KACf,QAAQ,EAAE,QAAQ,IAClB;AACJ,CAAC;AAYD;;;;GAIG;AACH,MAAM,UAAU,yBAAyB,CACvC,YAAqC;IAErC,uCACK,YAAY,KACf,QAAQ,EAAE,KAAK,IACf;AACJ,CAAC;AA0CD;;;;GAIG;AACH,MAAM,UAAU,yBAAyB,CACvC,YAAuC;IAEvC,uCACK,YAAY,KACf,QAAQ,EAAE,SAAS,IACnB;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Represents an installation for a device for Notification Hubs.\n */\nexport interface InstallationCommon {\n  /**\n   * The ID for the installation.\n   */\n  installationId: string;\n\n  /**\n   * The User ID for the installation used for targeting.\n   */\n  userId?: string;\n\n  /**\n   * The installation expiration time.\n   */\n  readonly expirationTime?: string;\n\n  /**\n   * The last update date of the installation.\n   */\n  readonly lastUpdate?: string;\n\n  /**\n   * The tags used for targeting this installation.\n   */\n  tags?: string[];\n\n  /**\n   * The templates for the installation.\n   */\n  templates?: Record<string, InstallationTemplate>;\n\n  /**\n   * This parameter is true if the PNS expired the channel.\n   */\n  readonly pushChannelExpired?: boolean;\n\n  /**\n   * The push variables for the installation.\n   */\n  pushVariables?: Record<string, string>;\n}\n\n/**\n * Represents an installation with a string based device token.\n */\nexport interface DeviceTokenInstallation extends InstallationCommon {\n  /**\n   * The push channel for a device.\n   */\n  pushChannel: string;\n}\n\n/**\n * Represents an Apple APNs based installation.\n */\nexport interface AppleInstallation extends DeviceTokenInstallation {\n  /**\n   * The platform for the installation.\n   */\n  platform: \"apns\";\n}\n\n/**\n * Creates an Apple based installation.\n * @param installation - A partial installation used to create the Apple installation.\n * @returns The newly created Apple installation.\n */\nexport function createAppleInstallation(installation: DeviceTokenInstallation): AppleInstallation {\n  return {\n    ...installation,\n    platform: \"apns\",\n  };\n}\n\n/**\n * Represents an Amazon Device Messaging (ADM) based installation.\n */\nexport interface AdmInstallation extends DeviceTokenInstallation {\n  /**\n   * The platform for the installation.\n   */\n  platform: \"adm\";\n}\n\n/**\n * Creates an Amazon Device Messaging (ADM) based installation.\n * @param installation - A partial installation used to create the ADM installation.\n * @returns The newly created ADM installation.\n */\nexport function createAdmInstallation(installation: DeviceTokenInstallation): AdmInstallation {\n  return {\n    ...installation,\n    platform: \"adm\",\n  };\n}\n\n/**\n * Represents a Baidu based installation.\n */\nexport interface BaiduInstallation extends DeviceTokenInstallation {\n  /**\n   * The platform for the installation.\n   */\n  platform: \"baidu\";\n}\n\n/**\n * Creates a Baidu based installation.\n * @param installation - A partial installation used to create the Baidu installation.\n * @returns The newly created Baidu installation.\n */\nexport function createBaiduInstallation(installation: DeviceTokenInstallation): BaiduInstallation {\n  return {\n    ...installation,\n    platform: \"baidu\",\n  };\n}\n\n/**\n * Represents a Firebase Legacy HTTP installation.\n */\nexport interface FcmLegacyInstallation extends DeviceTokenInstallation {\n  /**\n   * The platform for the installation.\n   */\n  platform: \"gcm\";\n}\n\n/**\n * Creates a Firebase legacy HTTP based installation.\n * @param installation - A partial installation used to create the Firebase Legacy HTTP installation.\n * @returns The newly created Baidu installation.\n */\nexport function createFcmLegacyInstallation(\n  installation: DeviceTokenInstallation,\n): FcmLegacyInstallation {\n  return {\n    ...installation,\n    platform: \"gcm\",\n  };\n}\n\n/**\n * Represents an Firebase V1 Cloud Messaging based installation.\n */\nexport interface FcmV1Installation extends DeviceTokenInstallation {\n  /**\n   * The platform for the installation.\n   */\n  platform: \"fcmv1\";\n}\n\n/**\n * Creates an Firebase V1 Cloud Messaging based installation.\n * @param installation - A partial installation used to create the Firebase V1 Cloud Messaging installation.\n * @returns The newly created Firebase V1 Cloud Messaging installation.\n */\nexport function createFcmV1Installation(installation: DeviceTokenInstallation): FcmV1Installation {\n  return {\n    ...installation,\n    platform: \"fcmv1\",\n  };\n}\n\n/**\n * Represents a Xiaomi based installation.\n */\nexport interface XiaomiInstallation extends DeviceTokenInstallation {\n  /**\n   * The platform for the installation.\n   */\n  platform: \"xiaomi\";\n}\n\n/**\n * Creates a Xiaomi based installation.\n * @param installation - A partial installation used to create the Xiaomi installation.\n * @returns The newly created Xiaomi installation.\n */\nexport function createXiaomiInstallation(\n  installation: DeviceTokenInstallation,\n): XiaomiInstallation {\n  return {\n    ...installation,\n    platform: \"xiaomi\",\n  };\n}\n\n/**\n * Represents a Windows Notification Services (WNS) based installation.\n */\nexport interface WindowsInstallation extends DeviceTokenInstallation {\n  /**\n   * The platform for the installation.\n   */\n  platform: \"wns\";\n}\n\n/**\n * Creates a Windows Notification Services (WNS) based installation.\n * @param installation - A partial installation used to create the WNS installation.\n * @returns The newly created WNS installation.\n */\nexport function createWindowsInstallation(\n  installation: DeviceTokenInstallation,\n): WindowsInstallation {\n  return {\n    ...installation,\n    platform: \"wns\",\n  };\n}\n\n/**\n * Represents the push channel for a Browser Push installation.\n */\nexport interface BrowserPushChannel {\n  /**\n   * The P256DH for the browser push installation.\n   */\n  p256dh: string;\n\n  /**\n   * The auth secret for the browser push installation.\n   */\n  auth: string;\n\n  /**\n   * The endpoint URL for the browser push installation.\n   */\n  endpoint: string;\n}\n\n/**\n * Represents a Browser/Web Push based installation.\n */\nexport interface BrowserInstallationCommon extends InstallationCommon {\n  /**\n   * The push channel for the Web Push API.\n   */\n  pushChannel: BrowserPushChannel;\n}\n\n/**\n * Represents a Browser/Web Push based installation.\n */\nexport interface BrowserInstallation extends BrowserInstallationCommon {\n  /**\n   * The platform for the installation.\n   */\n  platform: \"browser\";\n}\n\n/**\n * Creates a Web Push based installation.\n * @param installation - A partial installation used to create the Web Push installation.\n * @returns The newly created Web Push installation.\n */\nexport function createBrowserInstallation(\n  installation: BrowserInstallationCommon,\n): BrowserInstallation {\n  return {\n    ...installation,\n    platform: \"browser\",\n  };\n}\n\n/**\n * Represents the types of installations available in Notification Hubs.\n */\nexport type Installation =\n  | AppleInstallation\n  | AdmInstallation\n  | BaiduInstallation\n  | BrowserInstallation\n  | FcmLegacyInstallation\n  | FcmV1Installation\n  | XiaomiInstallation\n  | WindowsInstallation;\n\n/**\n * Represents an installation template.\n */\nexport interface InstallationTemplate {\n  /**\n   * The body for the installation template.\n   */\n  body: string;\n\n  /**\n   * Headers to include for the template send.\n   */\n  headers: Record<string, string>;\n\n  /**\n   * The tags to include for the template.\n   */\n  tags?: string[];\n}\n\n/**\n * Represents the JSON Patch types of add, remove and replace.\n */\nexport type JsonPatchOperation = \"add\" | \"remove\" | \"replace\";\n\n/**\n * Represents a patch operation.\n */\nexport interface JsonPatch {\n  /**\n   * The patch operation.\n   */\n  op: JsonPatchOperation;\n\n  /**\n   * The path for the patch operation.\n   */\n  path: string;\n\n  /**\n   * The value to add or replace for the operation.\n   */\n  value?: string;\n}\n\n/**\n * Represents the types of push channels available for Notification Hubs.\n */\nexport type PushHandle = BrowserPushChannel | string;\n"]}