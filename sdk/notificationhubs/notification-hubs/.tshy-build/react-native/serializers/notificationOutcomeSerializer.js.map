{"version":3,"file":"notificationOutcomeSerializer.js","sourceRoot":"","sources":["../../../src/serializers/notificationOutcomeSerializer.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAMlC,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,mBAAmB,CAAC;AACrE,OAAO,EAAE,QAAQ,EAAE,MAAM,iBAAiB,CAAC;AAE3C,MAAM,CAAC,KAAK,UAAU,wBAAwB,CAC5C,QAAgB;IAEhB,MAAM,GAAG,GAAG,MAAM,QAAQ,CAAC,QAAQ,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC;IAC5D,MAAM,OAAO,GAAG,GAAG,CAAC,mBAAmB,CAAC;IAExC,OAAO;QACL,YAAY,EAAE,UAAU,CAAC,OAAO,CAAC,OAAO,EAAE,SAAS,CAAC;QACpD,YAAY,EAAE,UAAU,CAAC,OAAO,CAAC,OAAO,EAAE,SAAS,CAAC;QACpD,OAAO,EAAE,wBAAwB,CAAC,OAAO,CAAC,OAAO,CAAC,kBAAkB,CAAC;QACrE,KAAK,EAAE,wBAAwB;KAChC,CAAC;AACJ,CAAC;AAED,SAAS,wBAAwB,CAAC,OAA6B;IAC7D,MAAM,mBAAmB,GAAyB,EAAE,CAAC;IAErD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC;QACxB,OAAO,mBAAmB,CAAC;IAC7B,CAAC;IAED,MAAM,YAAY,GAAG,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;IAElE,KAAK,MAAM,MAAM,IAAI,YAAY,EAAE,CAAC;QAClC,mBAAmB,CAAC,IAAI,CAAC;YACvB,mBAAmB,EAAE,SAAS,CAAC,MAAM,CAAC,mBAAmB,EAAE,qBAAqB,CAAC,CAAC,IAAI,EAAE;YACxF,cAAc,EAAE,SAAS,CAAC,MAAM,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC,IAAI,EAAE;YACzE,OAAO,EAAE,SAAS,CAAC,MAAM,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,IAAI,EAAE;YACpD,SAAS,EAAE,SAAS,CAAC,MAAM,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC,IAAI,EAAE;SAC3D,CAAC,CAAC;IACL,CAAC;IAED,OAAO,mBAAmB,CAAC;AAC7B,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  NotificationHubsMessageResponse,\n  RegistrationResult,\n} from \"../models/notificationDetails.js\";\nimport { getInteger, getString, isDefined } from \"../utils/utils.js\";\nimport { parseXML } from \"@azure/core-xml\";\n\nexport async function parseNotificationOutcome(\n  bodyText: string,\n): Promise<NotificationHubsMessageResponse> {\n  const xml = await parseXML(bodyText, { includeRoot: true });\n  const outcome = xml.NotificationOutcome;\n\n  return {\n    successCount: getInteger(outcome.Success, \"Success\"),\n    failureCount: getInteger(outcome.Failure, \"Failure\"),\n    results: parseRegistrationResults(outcome.Results.RegistrationResult),\n    state: \"DetailedStateAvailable\",\n  };\n}\n\nfunction parseRegistrationResults(results?: Record<string, any>): RegistrationResult[] {\n  const registrationResults: RegistrationResult[] = [];\n\n  if (!isDefined(results)) {\n    return registrationResults;\n  }\n\n  const resultsArray = Array.isArray(results) ? results : [results];\n\n  for (const result of resultsArray) {\n    registrationResults.push({\n      applicationPlatform: getString(result.ApplicationPlatform, \"ApplicationPlatform\").trim(),\n      registrationId: getString(result.RegistrationId, \"RegistrationId\").trim(),\n      outcome: getString(result.Outcome, \"Outcome\").trim(),\n      pnsHandle: getString(result.PnsHandle, \"PnsHandle\").trim(),\n    });\n  }\n\n  return registrationResults;\n}\n"]}