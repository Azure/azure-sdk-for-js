{"version":3,"file":"notificationHubJobSerializer.js","sourceRoot":"","sources":["../../../src/serializers/notificationHubJobSerializer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  NotificationHubJob,\n  NotificationHubJobStatus,\n  NotificationHubJobType,\n} from \"../models/notificationHubJob.js\";\nimport {\n  getDateOrUndefined,\n  getFloatOrUndefined,\n  getString,\n  getStringOrUndefined,\n  isDefined,\n} from \"../utils/utils.js\";\nimport { parseXML, stringifyXML } from \"@azure/core-xml\";\nimport { serializeToAtomXmlRequest } from \"../utils/xmlUtils.js\";\n\n/**\n * @internal\n * Serializes a NotificationHubJob into an Atom XML entry.\n * @param entry - The NotificationHubJob to turn into an Atom XML entry.\n * @returns An Atom XML entry containing the notification hub job.\n */\nexport function serializeNotificationHubJobEntry(entry: NotificationHubJob): string {\n  const job: Record<string, any> = {\n    Type: entry.type,\n    OutputContainerUri: { __cdata: entry.outputContainerUrl },\n    ImportFileUri: isDefined(entry.importFileUrl) ? { __cdata: entry.importFileUrl } : undefined,\n  };\n\n  const requestObject = serializeToAtomXmlRequest(\"NotificationHubJob\", job);\n\n  return stringifyXML(requestObject, { rootName: \"entry\", cdataPropName: \"__cdata\" });\n}\n\n/**\n * Parses an Atom XML of an notification hub job entry.\n * @param bodyText - The incoming Atom XML entry to parse into a notification hub job.\n * @returns A parsed NotificationHubJob.\n */\nexport async function parseNotificationHubJobEntry(bodyText: string): Promise<NotificationHubJob> {\n  const xml = await parseXML(bodyText, { includeRoot: true });\n  const content = xml.entry.content.NotificationHubJob;\n  return createNotificationHubJob(content);\n}\n\n/**\n * Parses an Atom XML feed of notification hub jobs.\n * @param bodyText - The incoming Atom XML feed to parse into notification hub jobs.\n * @returns A list of notification hub jobs.\n */\nexport async function parseNotificationHubJobFeed(bodyText: string): Promise<NotificationHubJob[]> {\n  const xml = await parseXML(bodyText, { includeRoot: true });\n  const results: NotificationHubJob[] = [];\n\n  if (!isDefined(xml.feed.entry)) {\n    return results;\n  }\n\n  const entries = Array.isArray(xml.feed.entry) ? xml.feed.entry : [xml.feed.entry];\n\n  for (const item of entries) {\n    results.push(createNotificationHubJob(item.content.NotificationHubJob));\n  }\n\n  return results;\n}\n\nfunction createInputOutputProperties(content: Record<string, any>): Record<string, string> {\n  const props: Record<string, string> = {};\n\n  const keyValues = content[\"d3p1:KeyValueOfstringstring\"];\n  const keyValueArray = Array.isArray(keyValues) ? keyValues : [keyValues];\n  for (const item of keyValueArray) {\n    props[item[\"d3p1:Key\"]] = item[\"d3p1:Value\"];\n  }\n\n  return props;\n}\n\nfunction createNotificationHubJob(content: Record<string, any>): NotificationHubJob {\n  let outputProperties: Record<string, string> | undefined;\n  if (isDefined(content[\"OutputProperties\"])) {\n    outputProperties = createInputOutputProperties(content[\"OutputProperties\"]);\n  }\n\n  let inputProperties: Record<string, string> | undefined;\n  if (isDefined(content[\"InputProperties\"])) {\n    inputProperties = createInputOutputProperties(content[\"InputProperties\"]);\n  }\n\n  return {\n    jobId: getStringOrUndefined(content[\"JobId\"])?.trim(),\n    type: getString(content[\"Type\"], \"type\").trim() as NotificationHubJobType,\n    status: getStringOrUndefined(content[\"Status\"])?.trim() as NotificationHubJobStatus,\n    progress: getFloatOrUndefined(content[\"Progress\"]),\n    outputContainerUrl: getString(content[\"OutputContainerUri\"], \"outputContainerUrl\").trim(),\n    importFileUrl: getStringOrUndefined(content[\"ImportFileUri\"])?.trim(),\n    failure: getStringOrUndefined(content[\"Failure\"])?.trim(),\n    createdAt: getDateOrUndefined(content[\"CreatedAt\"]),\n    updatedAt: getDateOrUndefined(content[\"UpdatedAt\"]),\n    inputProperties,\n    outputProperties,\n  };\n}\n"]}