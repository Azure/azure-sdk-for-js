{"version":3,"file":"listRegistrationsByTag.js","sourceRoot":"","sources":["../../../src/api/listRegistrationsByTag.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { createRequest, sendRequest } from \"./internal/_client.js\";\nimport type { NotificationHubsClientContext } from \"./index.js\";\nimport type { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport type { RegistrationDescription } from \"../models/registration.js\";\nimport type { RegistrationQueryLimitOptions } from \"../models/options.js\";\nimport type { RegistrationQueryResponse } from \"../models/response.js\";\nimport { registrationDescriptionParser } from \"../serializers/registrationSerializer.js\";\nimport { tracingClient } from \"../utils/tracing.js\";\n\nconst OPERATION_NAME = \"listRegistrationsByTag\";\n\n/**\n * Lists all registrations with the matching tag.\n * @param context - The Notification Hubs client.\n * @param tag - The tag to query for matching registrations.\n * @param options - The query options such as $top.\n * @returns A paged async iterable containing the matching registrations for the notification hub.\n */\nexport function listRegistrationsByTag(\n  context: NotificationHubsClientContext,\n  tag: string,\n  options: RegistrationQueryLimitOptions = {},\n): PagedAsyncIterableIterator<RegistrationDescription> {\n  const { span, updatedOptions } = tracingClient.startSpan(\n    `NotificationHubsClientContext.${OPERATION_NAME}`,\n    options,\n  );\n  try {\n    const iter = listRegistrationsByTagAll(context, tag, updatedOptions);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: () => {\n        return listRegistrationsByTagPagingPage(context, tag, options);\n      },\n    };\n  } catch (e: any) {\n    span.setStatus({ status: \"error\", error: e });\n    throw e;\n  } finally {\n    span.end();\n  }\n}\n\nasync function* listRegistrationsByTagAll(\n  context: NotificationHubsClientContext,\n  tag: string,\n  options: RegistrationQueryLimitOptions,\n): AsyncIterableIterator<RegistrationDescription> {\n  for await (const page of listRegistrationsByTagPagingPage(context, tag, options)) {\n    yield* page;\n  }\n}\n\nasync function* listRegistrationsByTagPagingPage(\n  context: NotificationHubsClientContext,\n  tag: string,\n  options: RegistrationQueryLimitOptions,\n): AsyncIterableIterator<RegistrationDescription[]> {\n  let result = await _listRegistrationsByTag(context, tag, options);\n  yield result.registrations || [];\n  let continuationToken = result.continuationToken;\n  while (continuationToken) {\n    result = await _listRegistrationsByTag(context, tag, options, continuationToken);\n    continuationToken = result.continuationToken;\n    yield result.registrations || [];\n  }\n}\n\nasync function _listRegistrationsByTag(\n  context: NotificationHubsClientContext,\n  tag: string,\n  options: RegistrationQueryLimitOptions,\n  continuationToken?: string,\n): Promise<RegistrationQueryResponse> {\n  const endpoint = context.requestUrl();\n  endpoint.pathname += `/tags/${tag}/registrations`;\n  if (options.top !== undefined) {\n    endpoint.searchParams.set(\"$top\", `${options.top}`);\n  }\n\n  if (continuationToken !== undefined) {\n    endpoint.searchParams.set(\"continuationtoken\", continuationToken);\n  }\n\n  const headers = await context.createHeaders(OPERATION_NAME);\n  const request = createRequest(endpoint, \"GET\", headers, options);\n  const response = await sendRequest(context, request, 200);\n\n  const registrations = await registrationDescriptionParser.parseRegistrationFeed(\n    response.bodyAsText!,\n  );\n  const nextToken = response.headers.get(\"x-ms-continuationtoken\");\n  return {\n    registrations,\n    continuationToken: nextToken,\n  };\n}\n"]}