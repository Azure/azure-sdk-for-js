{"version":3,"file":"_createOrUpdateRegistrationDescription.js","sourceRoot":"","sources":["../../../../src/api/internal/_createOrUpdateRegistrationDescription.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,aAAa,EAAE,WAAW,EAAE,MAAM,cAAc,CAAC;AAC1D,OAAO,EACL,6BAA6B,EAC7B,iCAAiC,GAClC,MAAM,6CAA6C,CAAC;AAKrD,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAC;AAEjD;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,qCAAqC,CACzD,OAAsC,EACtC,YAAqC,EACrC,aAAqD,EACrD,OAAyB;IAEzB,MAAM,QAAQ,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC;IACtC,QAAQ,CAAC,QAAQ,IAAI,gBAAgB,CAAC;IACtC,IAAI,UAAU,GAAgB,MAAM,CAAC;IAErC,IAAI,aAAa,KAAK,gBAAgB,IAAI,aAAa,KAAK,QAAQ,EAAE,CAAC;QACrE,QAAQ,CAAC,QAAQ,IAAI,IAAI,YAAY,CAAC,cAAc,EAAE,CAAC;QACvD,UAAU,GAAG,KAAK,CAAC;IACrB,CAAC;IAED,MAAM,IAAI,GAAG,YAAY,CAAC,IAAI,CAAC;IAE/B,gCAAgC;IAChC,YAAY,CAAC,cAAc,GAAG,SAAS,CAAC;IACxC,YAAY,CAAC,IAAI,GAAG,SAAS,CAAC;IAE9B,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,aAAa,CAAC,GAAG,aAAa,cAAc,CAAC,CAAC;IAC5E,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,+CAA+C,CAAC,CAAC;IAE7E,IAAI,aAAa,KAAK,QAAQ,EAAE,CAAC;QAC/B,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC/D,CAAC;IAED,MAAM,OAAO,GAAG,aAAa,CAAC,QAAQ,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IACtE,OAAO,CAAC,IAAI,GAAG,iCAAiC,CAAC,gCAAgC,CAAC,YAAY,CAAC,CAAC;IAChG,MAAM,QAAQ,GAAG,MAAM,WAAW,CAAC,OAAO,EAAE,OAAO,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;IAEjE,OAAO,6BAA6B,CAAC,sBAAsB,CAAC,QAAQ,CAAC,UAAW,CAAC,CAAC;AACpF,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { createRequest, sendRequest } from \"./_client.js\";\nimport {\n  registrationDescriptionParser,\n  registrationDescriptionSerializer,\n} from \"../../serializers/registrationSerializer.js\";\nimport type { HttpMethods } from \"@azure/core-rest-pipeline\";\nimport type { NotificationHubsClientContext } from \"../index.js\";\nimport type { OperationOptions } from \"@azure-rest/core-client\";\nimport type { RegistrationDescription } from \"../../models/registration.js\";\nimport { isDefined } from \"../../utils/utils.js\";\n\n/**\n * @internal\n */\nexport async function createOrUpdateRegistrationDescription(\n  context: NotificationHubsClientContext,\n  registration: RegistrationDescription,\n  operationName: \"create\" | \"createOrUpdate\" | \"update\",\n  options: OperationOptions,\n): Promise<RegistrationDescription> {\n  const endpoint = context.requestUrl();\n  endpoint.pathname += \"/registrations\";\n  let httpMethod: HttpMethods = \"POST\";\n\n  if (operationName === \"createOrUpdate\" || operationName === \"update\") {\n    endpoint.pathname += `/${registration.registrationId}`;\n    httpMethod = \"PUT\";\n  }\n\n  const etag = registration.etag;\n\n  // Clear out readonly properties\n  registration.registrationId = undefined;\n  registration.etag = undefined;\n\n  const headers = await context.createHeaders(`${operationName}Registration`);\n  headers.set(\"Content-Type\", \"application/atom+xml;type=entry;charset=utf-8\");\n\n  if (operationName === \"update\") {\n    headers.set(\"If-Match\", isDefined(etag) ? `\"${etag}\"` : \"*\");\n  }\n\n  const request = createRequest(endpoint, httpMethod, headers, options);\n  request.body = registrationDescriptionSerializer.serializeRegistrationDescription(registration);\n  const response = await sendRequest(context, request, [200, 201]);\n\n  return registrationDescriptionParser.parseRegistrationEntry(response.bodyAsText!);\n}\n"]}