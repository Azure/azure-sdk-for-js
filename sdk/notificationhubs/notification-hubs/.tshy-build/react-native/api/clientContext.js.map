{"version":3,"file":"clientContext.js","sourceRoot":"","sources":["../../../src/api/clientContext.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport * as constants from \"../utils/constants.js\";\nimport type {\n  HttpClient,\n  HttpHeaders,\n  PipelineRequest,\n  PipelineResponse,\n} from \"@azure/core-rest-pipeline\";\nimport { RestError, createDefaultHttpClient, createHttpHeaders } from \"@azure/core-rest-pipeline\";\nimport {\n  createTokenCredentialFromConnection,\n  parseNotificationHubsConnectionString,\n} from \"../auth/connectionStringUtils.js\";\nimport type { NotificationHubsClientOptions } from \"../models/options.js\";\nimport type { SasTokenCredential } from \"../auth/sasTokenCredential.js\";\nimport type { Client } from \"@azure-rest/core-client\";\nimport { getClient } from \"@azure-rest/core-client\";\n\nconst API_VERSION = \"2020-06\";\n\n/**\n * Represents the Notification Hubs SDK client context.\n */\nexport interface NotificationHubsClientContext {\n  /**\n   * @internal\n   */\n  sendRequest(request: PipelineRequest): Promise<PipelineResponse>;\n\n  /**\n   * @internal\n   */\n  createHeaders(operationName: string, rawHeaders?: Record<string, string>): Promise<HttpHeaders>;\n\n  /**\n   * @internal\n   */\n  requestUrl(): URL;\n}\n\n/**\n * Creates a NotificationHubClient from the Access Policy connection string and hub name.\n * @param connectionString - The Access Policy connection string for the notification hub.\n * @param hubName - The notification hub name.\n * @returns A NotificationHubsClientContext initialized from the connection string and hub name.\n */\nexport function createClientContext(\n  connectionString: string,\n  hubName: string,\n  options: NotificationHubsClientOptions = {},\n): NotificationHubsClientContext {\n  return new NotificationHubsServiceClient(connectionString, hubName, options);\n}\n\nclass NotificationHubsServiceClient implements NotificationHubsClientContext {\n  sasTokenCredential: SasTokenCredential;\n  baseUrl: string;\n  hubName: string;\n  client: Client;\n  httpClient: HttpClient;\n\n  constructor(\n    connectionString: string,\n    hubName: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options: NotificationHubsClientOptions = {},\n  ) {\n    this.hubName = hubName;\n\n    const parsedConnection = parseNotificationHubsConnectionString(connectionString);\n    // Node doesn't allow change in protocol but browsers do, so doing a string replace\n    this.baseUrl = parsedConnection.endpoint.replace(\"sb://\", \"https://\");\n    this.sasTokenCredential = createTokenCredentialFromConnection(\n      parsedConnection.sharedAccessKey,\n      parsedConnection.sharedAccessKeyName,\n    );\n\n    const packageDetails = `azsdk-js-notificationhubs/${constants.SDK_VERSION}`;\n    const userAgentPrefix = options.userAgentOptions?.userAgentPrefix\n      ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n      : `${packageDetails}`;\n\n    this.httpClient = options?.httpClient ?? createDefaultHttpClient();\n    this.client = getClient(this.baseUrl, {\n      userAgentOptions: {\n        userAgentPrefix,\n      },\n      ...options,\n    });\n  }\n\n  async createHeaders(\n    operationName: string,\n    rawHeaders?: Record<string, string>,\n  ): Promise<HttpHeaders> {\n    const authorization = await this.sasTokenCredential.getToken(this.baseUrl);\n    if (!authorization) {\n      throw new RestError(\"Failed to get the authorization header\", { statusCode: 401 });\n    }\n\n    const headers = createHttpHeaders(rawHeaders);\n    headers.set(\"Authorization\", authorization.token);\n    headers.set(\"x-ms-version\", API_VERSION);\n    headers.set(\n      \"x-ms-azsdk-telemetry\",\n      `class=NotificationHubsServiceClient;method=${operationName}`,\n    );\n\n    return headers;\n  }\n\n  sendRequest(request: PipelineRequest): Promise<PipelineResponse> {\n    return this.client.pipeline.sendRequest(this.httpClient, request);\n  }\n\n  requestUrl(): URL {\n    const url = new URL(this.baseUrl);\n    url.pathname = this.hubName;\n    url.searchParams.set(\"api-version\", API_VERSION);\n\n    return url;\n  }\n}\n"]}