/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  CheckAvailabilityParameters as CheckAvailabilityParametersMapper,
  NamespaceCreateOrUpdateParameters as NamespaceCreateOrUpdateParametersMapper,
  NamespacePatchParameters as NamespacePatchParametersMapper,
  SharedAccessAuthorizationRuleCreateOrUpdateParameters as SharedAccessAuthorizationRuleCreateOrUpdateParametersMapper,
  PolicykeyResource as PolicykeyResourceMapper,
  NotificationHubCreateOrUpdateParameters as NotificationHubCreateOrUpdateParametersMapper,
  NotificationHubPatchParameters as NotificationHubPatchParametersMapper
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2017-04-01",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const parameters: OperationParameter = {
  parameterPath: "parameters",
  mapper: CheckAvailabilityParametersMapper
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters1: OperationParameter = {
  parameterPath: "parameters",
  mapper: NamespaceCreateOrUpdateParametersMapper
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const namespaceName: OperationURLParameter = {
  parameterPath: "namespaceName",
  mapper: {
    serializedName: "namespaceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters2: OperationParameter = {
  parameterPath: "parameters",
  mapper: NamespacePatchParametersMapper
};

export const parameters3: OperationParameter = {
  parameterPath: "parameters",
  mapper: SharedAccessAuthorizationRuleCreateOrUpdateParametersMapper
};

export const authorizationRuleName: OperationURLParameter = {
  parameterPath: "authorizationRuleName",
  mapper: {
    serializedName: "authorizationRuleName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters4: OperationParameter = {
  parameterPath: "parameters",
  mapper: PolicykeyResourceMapper
};

export const parameters5: OperationParameter = {
  parameterPath: "parameters",
  mapper: NotificationHubCreateOrUpdateParametersMapper
};

export const notificationHubName: OperationURLParameter = {
  parameterPath: "notificationHubName",
  mapper: {
    serializedName: "notificationHubName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters6: OperationParameter = {
  parameterPath: ["options", "parameters"],
  mapper: NotificationHubPatchParametersMapper
};

export const parameters7: OperationParameter = {
  parameterPath: ["options", "parameters"],
  mapper: {
    serializedName: "parameters",
    type: {
      name: "Dictionary",
      value: { type: { name: "any" } }
    }
  }
};
