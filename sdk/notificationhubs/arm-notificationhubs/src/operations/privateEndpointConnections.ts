/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { PrivateEndpointConnections } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { NotificationHubsManagementClient } from "../notificationHubsManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  PrivateEndpointConnectionResource,
  PrivateEndpointConnectionsListOptionalParams,
  PrivateEndpointConnectionsListResponse,
  PrivateLinkResource,
  PrivateEndpointConnectionsListGroupIdsOptionalParams,
  PrivateEndpointConnectionsListGroupIdsResponse,
  PrivateEndpointConnectionsUpdateOptionalParams,
  PrivateEndpointConnectionsUpdateResponse,
  PrivateEndpointConnectionsDeleteOptionalParams,
  PrivateEndpointConnectionsDeleteResponse,
  PrivateEndpointConnectionsGetOptionalParams,
  PrivateEndpointConnectionsGetResponse,
  PrivateEndpointConnectionsGetGroupIdOptionalParams,
  PrivateEndpointConnectionsGetGroupIdResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing PrivateEndpointConnections operations. */
export class PrivateEndpointConnectionsImpl
  implements PrivateEndpointConnections
{
  private readonly client: NotificationHubsManagementClient;

  /**
   * Initialize a new instance of the class PrivateEndpointConnections class.
   * @param client Reference to the service client
   */
  constructor(client: NotificationHubsManagementClient) {
    this.client = client;
  }

  /**
   * Returns all Private Endpoint Connections that belong to the given Notification Hubs namespace.
   * This is a public API that can be called directly by Notification Hubs users.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param namespaceName Namespace name
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    namespaceName: string,
    options?: PrivateEndpointConnectionsListOptionalParams,
  ): PagedAsyncIterableIterator<PrivateEndpointConnectionResource> {
    const iter = this.listPagingAll(resourceGroupName, namespaceName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          namespaceName,
          options,
          settings,
        );
      },
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    namespaceName: string,
    options?: PrivateEndpointConnectionsListOptionalParams,
    _settings?: PageSettings,
  ): AsyncIterableIterator<PrivateEndpointConnectionResource[]> {
    let result: PrivateEndpointConnectionsListResponse;
    result = await this._list(resourceGroupName, namespaceName, options);
    yield result.value || [];
  }

  private async *listPagingAll(
    resourceGroupName: string,
    namespaceName: string,
    options?: PrivateEndpointConnectionsListOptionalParams,
  ): AsyncIterableIterator<PrivateEndpointConnectionResource> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      namespaceName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Even though this namespace requires subscription id, resource group and namespace name, it returns a
   * constant payload (for a given namespacE) every time it's called.
   * That's why we don't send it to the sibling RP, but process it directly in the scale unit that
   * received the request.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param namespaceName Namespace name
   * @param options The options parameters.
   */
  public listGroupIds(
    resourceGroupName: string,
    namespaceName: string,
    options?: PrivateEndpointConnectionsListGroupIdsOptionalParams,
  ): PagedAsyncIterableIterator<PrivateLinkResource> {
    const iter = this.listGroupIdsPagingAll(
      resourceGroupName,
      namespaceName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listGroupIdsPagingPage(
          resourceGroupName,
          namespaceName,
          options,
          settings,
        );
      },
    };
  }

  private async *listGroupIdsPagingPage(
    resourceGroupName: string,
    namespaceName: string,
    options?: PrivateEndpointConnectionsListGroupIdsOptionalParams,
    _settings?: PageSettings,
  ): AsyncIterableIterator<PrivateLinkResource[]> {
    let result: PrivateEndpointConnectionsListGroupIdsResponse;
    result = await this._listGroupIds(
      resourceGroupName,
      namespaceName,
      options,
    );
    yield result.value || [];
  }

  private async *listGroupIdsPagingAll(
    resourceGroupName: string,
    namespaceName: string,
    options?: PrivateEndpointConnectionsListGroupIdsOptionalParams,
  ): AsyncIterableIterator<PrivateLinkResource> {
    for await (const page of this.listGroupIdsPagingPage(
      resourceGroupName,
      namespaceName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Approves or rejects Private Endpoint Connection.
   * This is a public API that can be called directly by Notification Hubs users.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param namespaceName Namespace name
   * @param privateEndpointConnectionName Private Endpoint Connection Name
   * @param parameters Description of the Private Endpoint Connection resource.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    namespaceName: string,
    privateEndpointConnectionName: string,
    parameters: PrivateEndpointConnectionResource,
    options?: PrivateEndpointConnectionsUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<PrivateEndpointConnectionsUpdateResponse>,
      PrivateEndpointConnectionsUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<PrivateEndpointConnectionsUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        namespaceName,
        privateEndpointConnectionName,
        parameters,
        options,
      },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      PrivateEndpointConnectionsUpdateResponse,
      OperationState<PrivateEndpointConnectionsUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Approves or rejects Private Endpoint Connection.
   * This is a public API that can be called directly by Notification Hubs users.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param namespaceName Namespace name
   * @param privateEndpointConnectionName Private Endpoint Connection Name
   * @param parameters Description of the Private Endpoint Connection resource.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    namespaceName: string,
    privateEndpointConnectionName: string,
    parameters: PrivateEndpointConnectionResource,
    options?: PrivateEndpointConnectionsUpdateOptionalParams,
  ): Promise<PrivateEndpointConnectionsUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      namespaceName,
      privateEndpointConnectionName,
      parameters,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes the Private Endpoint Connection.
   * This is a public API that can be called directly by Notification Hubs users.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param namespaceName Namespace name
   * @param privateEndpointConnectionName Private Endpoint Connection Name
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    namespaceName: string,
    privateEndpointConnectionName: string,
    options?: PrivateEndpointConnectionsDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<PrivateEndpointConnectionsDeleteResponse>,
      PrivateEndpointConnectionsDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<PrivateEndpointConnectionsDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        namespaceName,
        privateEndpointConnectionName,
        options,
      },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      PrivateEndpointConnectionsDeleteResponse,
      OperationState<PrivateEndpointConnectionsDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes the Private Endpoint Connection.
   * This is a public API that can be called directly by Notification Hubs users.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param namespaceName Namespace name
   * @param privateEndpointConnectionName Private Endpoint Connection Name
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    namespaceName: string,
    privateEndpointConnectionName: string,
    options?: PrivateEndpointConnectionsDeleteOptionalParams,
  ): Promise<PrivateEndpointConnectionsDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      namespaceName,
      privateEndpointConnectionName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Returns a Private Endpoint Connection with a given name.
   * This is a public API that can be called directly by Notification Hubs users.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param namespaceName Namespace name
   * @param privateEndpointConnectionName Private Endpoint Connection Name
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    namespaceName: string,
    privateEndpointConnectionName: string,
    options?: PrivateEndpointConnectionsGetOptionalParams,
  ): Promise<PrivateEndpointConnectionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        privateEndpointConnectionName,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * Returns all Private Endpoint Connections that belong to the given Notification Hubs namespace.
   * This is a public API that can be called directly by Notification Hubs users.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param namespaceName Namespace name
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    namespaceName: string,
    options?: PrivateEndpointConnectionsListOptionalParams,
  ): Promise<PrivateEndpointConnectionsListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, namespaceName, options },
      listOperationSpec,
    );
  }

  /**
   * Even though this namespace requires subscription id, resource group and namespace name, it returns a
   * constant payload (for a given namespacE) every time it's called.
   * That's why we don't send it to the sibling RP, but process it directly in the scale unit that
   * received the request.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param namespaceName Namespace name
   * @param subResourceName Name of the Private Link sub-resource. The only supported sub-resource is
   *                        "namespace"
   * @param options The options parameters.
   */
  getGroupId(
    resourceGroupName: string,
    namespaceName: string,
    subResourceName: string,
    options?: PrivateEndpointConnectionsGetGroupIdOptionalParams,
  ): Promise<PrivateEndpointConnectionsGetGroupIdResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, namespaceName, subResourceName, options },
      getGroupIdOperationSpec,
    );
  }

  /**
   * Even though this namespace requires subscription id, resource group and namespace name, it returns a
   * constant payload (for a given namespacE) every time it's called.
   * That's why we don't send it to the sibling RP, but process it directly in the scale unit that
   * received the request.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param namespaceName Namespace name
   * @param options The options parameters.
   */
  private _listGroupIds(
    resourceGroupName: string,
    namespaceName: string,
    options?: PrivateEndpointConnectionsListGroupIdsOptionalParams,
  ): Promise<PrivateEndpointConnectionsListGroupIdsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, namespaceName, options },
      listGroupIdsOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/privateEndpointConnections/{privateEndpointConnectionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateEndpointConnectionResource,
    },
    201: {
      bodyMapper: Mappers.PrivateEndpointConnectionResource,
    },
    202: {
      bodyMapper: Mappers.PrivateEndpointConnectionResource,
    },
    204: {
      bodyMapper: Mappers.PrivateEndpointConnectionResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters7,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.privateEndpointConnectionName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/privateEndpointConnections/{privateEndpointConnectionName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.PrivateEndpointConnectionsDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.PrivateEndpointConnectionsDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.PrivateEndpointConnectionsDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.PrivateEndpointConnectionsDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.privateEndpointConnectionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/privateEndpointConnections/{privateEndpointConnectionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateEndpointConnectionResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.privateEndpointConnectionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/privateEndpointConnections",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateEndpointConnectionResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getGroupIdOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/privateLinkResources/{subResourceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateLinkResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.subResourceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listGroupIdsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/privateLinkResources",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateLinkResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
