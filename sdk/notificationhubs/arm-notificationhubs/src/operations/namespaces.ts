/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/namespacesMappers";
import * as Parameters from "../models/parameters";
import { NotificationHubsManagementClientContext } from "../notificationHubsManagementClientContext";

/** Class representing a Namespaces. */
export class Namespaces {
  private readonly client: NotificationHubsManagementClientContext;

  /**
   * Create a Namespaces.
   * @param {NotificationHubsManagementClientContext} client Reference to the service client.
   */
  constructor(client: NotificationHubsManagementClientContext) {
    this.client = client;
  }

  /**
   * Checks the availability of the given service namespace across all Azure subscriptions. This is
   * useful because the domain name is created based on the service namespace name.
   * @param parameters The namespace name.
   * @param [options] The optional parameters
   * @returns Promise<Models.NamespacesCheckAvailabilityResponse>
   */
  checkAvailability(parameters: Models.CheckAvailabilityParameters, options?: msRest.RequestOptionsBase): Promise<Models.NamespacesCheckAvailabilityResponse>;
  /**
   * @param parameters The namespace name.
   * @param callback The callback
   */
  checkAvailability(parameters: Models.CheckAvailabilityParameters, callback: msRest.ServiceCallback<Models.CheckAvailabilityResult>): void;
  /**
   * @param parameters The namespace name.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkAvailability(parameters: Models.CheckAvailabilityParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CheckAvailabilityResult>): void;
  checkAvailability(parameters: Models.CheckAvailabilityParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CheckAvailabilityResult>, callback?: msRest.ServiceCallback<Models.CheckAvailabilityResult>): Promise<Models.NamespacesCheckAvailabilityResponse> {
    return this.client.sendOperationRequest(
      {
        parameters,
        options
      },
      checkAvailabilityOperationSpec,
      callback) as Promise<Models.NamespacesCheckAvailabilityResponse>;
  }

  /**
   * Creates/Updates a service namespace. Once created, this namespace's resource manifest is
   * immutable. This operation is idempotent.
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param parameters Parameters supplied to create a Namespace Resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.NamespacesCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, namespaceName: string, parameters: Models.NamespaceCreateOrUpdateParameters, options?: msRest.RequestOptionsBase): Promise<Models.NamespacesCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param parameters Parameters supplied to create a Namespace Resource.
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, namespaceName: string, parameters: Models.NamespaceCreateOrUpdateParameters, callback: msRest.ServiceCallback<Models.NamespaceResource>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param parameters Parameters supplied to create a Namespace Resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, namespaceName: string, parameters: Models.NamespaceCreateOrUpdateParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NamespaceResource>): void;
  createOrUpdate(resourceGroupName: string, namespaceName: string, parameters: Models.NamespaceCreateOrUpdateParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NamespaceResource>, callback?: msRest.ServiceCallback<Models.NamespaceResource>): Promise<Models.NamespacesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        parameters,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.NamespacesCreateOrUpdateResponse>;
  }

  /**
   * Patches the existing namespace
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param parameters Parameters supplied to patch a Namespace Resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.NamespacesPatchResponse>
   */
  patch(resourceGroupName: string, namespaceName: string, parameters: Models.NamespacePatchParameters, options?: msRest.RequestOptionsBase): Promise<Models.NamespacesPatchResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param parameters Parameters supplied to patch a Namespace Resource.
   * @param callback The callback
   */
  patch(resourceGroupName: string, namespaceName: string, parameters: Models.NamespacePatchParameters, callback: msRest.ServiceCallback<Models.NamespaceResource>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param parameters Parameters supplied to patch a Namespace Resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  patch(resourceGroupName: string, namespaceName: string, parameters: Models.NamespacePatchParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NamespaceResource>): void;
  patch(resourceGroupName: string, namespaceName: string, parameters: Models.NamespacePatchParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NamespaceResource>, callback?: msRest.ServiceCallback<Models.NamespaceResource>): Promise<Models.NamespacesPatchResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        parameters,
        options
      },
      patchOperationSpec,
      callback) as Promise<Models.NamespacesPatchResponse>;
  }

  /**
   * Deletes an existing namespace. This operation also removes all associated notificationHubs under
   * the namespace.
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, namespaceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,namespaceName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Returns the description for the specified namespace.
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param [options] The optional parameters
   * @returns Promise<Models.NamespacesGetResponse>
   */
  get(resourceGroupName: string, namespaceName: string, options?: msRest.RequestOptionsBase): Promise<Models.NamespacesGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param callback The callback
   */
  get(resourceGroupName: string, namespaceName: string, callback: msRest.ServiceCallback<Models.NamespaceResource>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, namespaceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NamespaceResource>): void;
  get(resourceGroupName: string, namespaceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NamespaceResource>, callback?: msRest.ServiceCallback<Models.NamespaceResource>): Promise<Models.NamespacesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.NamespacesGetResponse>;
  }

  /**
   * Creates an authorization rule for a namespace
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param authorizationRuleName Aauthorization Rule Name.
   * @param parameters The shared access authorization rule.
   * @param [options] The optional parameters
   * @returns Promise<Models.NamespacesCreateOrUpdateAuthorizationRuleResponse>
   */
  createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: Models.SharedAccessAuthorizationRuleCreateOrUpdateParameters, options?: msRest.RequestOptionsBase): Promise<Models.NamespacesCreateOrUpdateAuthorizationRuleResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param authorizationRuleName Aauthorization Rule Name.
   * @param parameters The shared access authorization rule.
   * @param callback The callback
   */
  createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: Models.SharedAccessAuthorizationRuleCreateOrUpdateParameters, callback: msRest.ServiceCallback<Models.SharedAccessAuthorizationRuleResource>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param authorizationRuleName Aauthorization Rule Name.
   * @param parameters The shared access authorization rule.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: Models.SharedAccessAuthorizationRuleCreateOrUpdateParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SharedAccessAuthorizationRuleResource>): void;
  createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: Models.SharedAccessAuthorizationRuleCreateOrUpdateParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SharedAccessAuthorizationRuleResource>, callback?: msRest.ServiceCallback<Models.SharedAccessAuthorizationRuleResource>): Promise<Models.NamespacesCreateOrUpdateAuthorizationRuleResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        authorizationRuleName,
        parameters,
        options
      },
      createOrUpdateAuthorizationRuleOperationSpec,
      callback) as Promise<Models.NamespacesCreateOrUpdateAuthorizationRuleResponse>;
  }

  /**
   * Deletes a namespace authorization rule
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param authorizationRuleName Authorization Rule Name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param authorizationRuleName Authorization Rule Name.
   * @param callback The callback
   */
  deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param authorizationRuleName Authorization Rule Name.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        authorizationRuleName,
        options
      },
      deleteAuthorizationRuleOperationSpec,
      callback);
  }

  /**
   * Gets an authorization rule for a namespace by name.
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name
   * @param authorizationRuleName Authorization rule name.
   * @param [options] The optional parameters
   * @returns Promise<Models.NamespacesGetAuthorizationRuleResponse>
   */
  getAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options?: msRest.RequestOptionsBase): Promise<Models.NamespacesGetAuthorizationRuleResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name
   * @param authorizationRuleName Authorization rule name.
   * @param callback The callback
   */
  getAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, callback: msRest.ServiceCallback<Models.SharedAccessAuthorizationRuleResource>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name
   * @param authorizationRuleName Authorization rule name.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SharedAccessAuthorizationRuleResource>): void;
  getAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SharedAccessAuthorizationRuleResource>, callback?: msRest.ServiceCallback<Models.SharedAccessAuthorizationRuleResource>): Promise<Models.NamespacesGetAuthorizationRuleResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        authorizationRuleName,
        options
      },
      getAuthorizationRuleOperationSpec,
      callback) as Promise<Models.NamespacesGetAuthorizationRuleResponse>;
  }

  /**
   * Lists the available namespaces within a resourceGroup.
   * @param resourceGroupName The name of the resource group. If resourceGroupName value is null the
   * method lists all the namespaces within subscription
   * @param [options] The optional parameters
   * @returns Promise<Models.NamespacesListResponse>
   */
  list(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.NamespacesListResponse>;
  /**
   * @param resourceGroupName The name of the resource group. If resourceGroupName value is null the
   * method lists all the namespaces within subscription
   * @param callback The callback
   */
  list(resourceGroupName: string, callback: msRest.ServiceCallback<Models.NamespaceListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group. If resourceGroupName value is null the
   * method lists all the namespaces within subscription
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NamespaceListResult>): void;
  list(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NamespaceListResult>, callback?: msRest.ServiceCallback<Models.NamespaceListResult>): Promise<Models.NamespacesListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.NamespacesListResponse>;
  }

  /**
   * Lists all the available namespaces within the subscription irrespective of the resourceGroups.
   * @param [options] The optional parameters
   * @returns Promise<Models.NamespacesListAllResponse>
   */
  listAll(options?: msRest.RequestOptionsBase): Promise<Models.NamespacesListAllResponse>;
  /**
   * @param callback The callback
   */
  listAll(callback: msRest.ServiceCallback<Models.NamespaceListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listAll(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NamespaceListResult>): void;
  listAll(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NamespaceListResult>, callback?: msRest.ServiceCallback<Models.NamespaceListResult>): Promise<Models.NamespacesListAllResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listAllOperationSpec,
      callback) as Promise<Models.NamespacesListAllResponse>;
  }

  /**
   * Gets the authorization rules for a namespace.
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name
   * @param [options] The optional parameters
   * @returns Promise<Models.NamespacesListAuthorizationRulesResponse>
   */
  listAuthorizationRules(resourceGroupName: string, namespaceName: string, options?: msRest.RequestOptionsBase): Promise<Models.NamespacesListAuthorizationRulesResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name
   * @param callback The callback
   */
  listAuthorizationRules(resourceGroupName: string, namespaceName: string, callback: msRest.ServiceCallback<Models.SharedAccessAuthorizationRuleListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name
   * @param options The optional parameters
   * @param callback The callback
   */
  listAuthorizationRules(resourceGroupName: string, namespaceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SharedAccessAuthorizationRuleListResult>): void;
  listAuthorizationRules(resourceGroupName: string, namespaceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SharedAccessAuthorizationRuleListResult>, callback?: msRest.ServiceCallback<Models.SharedAccessAuthorizationRuleListResult>): Promise<Models.NamespacesListAuthorizationRulesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        options
      },
      listAuthorizationRulesOperationSpec,
      callback) as Promise<Models.NamespacesListAuthorizationRulesResponse>;
  }

  /**
   * Gets the Primary and Secondary ConnectionStrings to the namespace
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param authorizationRuleName The connection string of the namespace for the specified
   * authorizationRule.
   * @param [options] The optional parameters
   * @returns Promise<Models.NamespacesListKeysResponse>
   */
  listKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options?: msRest.RequestOptionsBase): Promise<Models.NamespacesListKeysResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param authorizationRuleName The connection string of the namespace for the specified
   * authorizationRule.
   * @param callback The callback
   */
  listKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, callback: msRest.ServiceCallback<Models.SharedAccessAuthorizationRuleListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param authorizationRuleName The connection string of the namespace for the specified
   * authorizationRule.
   * @param options The optional parameters
   * @param callback The callback
   */
  listKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SharedAccessAuthorizationRuleListResult>): void;
  listKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SharedAccessAuthorizationRuleListResult>, callback?: msRest.ServiceCallback<Models.SharedAccessAuthorizationRuleListResult>): Promise<Models.NamespacesListKeysResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        authorizationRuleName,
        options
      },
      listKeysOperationSpec,
      callback) as Promise<Models.NamespacesListKeysResponse>;
  }

  /**
   * Regenerates the Primary/Secondary Keys to the Namespace Authorization Rule
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param authorizationRuleName The connection string of the namespace for the specified
   * authorizationRule.
   * @param parameters Parameters supplied to regenerate the Namespace Authorization Rule Key.
   * @param [options] The optional parameters
   * @returns Promise<Models.NamespacesRegenerateKeysResponse>
   */
  regenerateKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: Models.PolicykeyResource, options?: msRest.RequestOptionsBase): Promise<Models.NamespacesRegenerateKeysResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param authorizationRuleName The connection string of the namespace for the specified
   * authorizationRule.
   * @param parameters Parameters supplied to regenerate the Namespace Authorization Rule Key.
   * @param callback The callback
   */
  regenerateKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: Models.PolicykeyResource, callback: msRest.ServiceCallback<Models.ResourceListKeys>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param authorizationRuleName The connection string of the namespace for the specified
   * authorizationRule.
   * @param parameters Parameters supplied to regenerate the Namespace Authorization Rule Key.
   * @param options The optional parameters
   * @param callback The callback
   */
  regenerateKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: Models.PolicykeyResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResourceListKeys>): void;
  regenerateKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: Models.PolicykeyResource, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ResourceListKeys>, callback?: msRest.ServiceCallback<Models.ResourceListKeys>): Promise<Models.NamespacesRegenerateKeysResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        authorizationRuleName,
        parameters,
        options
      },
      regenerateKeysOperationSpec,
      callback) as Promise<Models.NamespacesRegenerateKeysResponse>;
  }

  /**
   * Deletes an existing namespace. This operation also removes all associated notificationHubs under
   * the namespace.
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, namespaceName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        namespaceName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Lists the available namespaces within a resourceGroup.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.NamespacesListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.NamespacesListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.NamespaceListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NamespaceListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NamespaceListResult>, callback?: msRest.ServiceCallback<Models.NamespaceListResult>): Promise<Models.NamespacesListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.NamespacesListNextResponse>;
  }

  /**
   * Lists all the available namespaces within the subscription irrespective of the resourceGroups.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.NamespacesListAllNextResponse>
   */
  listAllNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.NamespacesListAllNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listAllNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.NamespaceListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listAllNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NamespaceListResult>): void;
  listAllNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NamespaceListResult>, callback?: msRest.ServiceCallback<Models.NamespaceListResult>): Promise<Models.NamespacesListAllNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listAllNextOperationSpec,
      callback) as Promise<Models.NamespacesListAllNextResponse>;
  }

  /**
   * Gets the authorization rules for a namespace.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.NamespacesListAuthorizationRulesNextResponse>
   */
  listAuthorizationRulesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.NamespacesListAuthorizationRulesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listAuthorizationRulesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SharedAccessAuthorizationRuleListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listAuthorizationRulesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SharedAccessAuthorizationRuleListResult>): void;
  listAuthorizationRulesNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SharedAccessAuthorizationRuleListResult>, callback?: msRest.ServiceCallback<Models.SharedAccessAuthorizationRuleListResult>): Promise<Models.NamespacesListAuthorizationRulesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listAuthorizationRulesNextOperationSpec,
      callback) as Promise<Models.NamespacesListAuthorizationRulesNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const checkAvailabilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.NotificationHubs/checkNamespaceAvailability",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.CheckAvailabilityParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CheckAvailabilityResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.NamespaceCreateOrUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.NamespaceResource
    },
    201: {
      bodyMapper: Mappers.NamespaceResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.NamespacePatchParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.NamespaceResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NamespaceResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateAuthorizationRuleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.authorizationRuleName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.SharedAccessAuthorizationRuleCreateOrUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SharedAccessAuthorizationRuleResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteAuthorizationRuleOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.authorizationRuleName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAuthorizationRuleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.authorizationRuleName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SharedAccessAuthorizationRuleResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NamespaceListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listAllOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.NotificationHubs/namespaces",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NamespaceListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listAuthorizationRulesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/AuthorizationRules",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SharedAccessAuthorizationRuleListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listKeysOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}/listKeys",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.authorizationRuleName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SharedAccessAuthorizationRuleListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const regenerateKeysOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}/regenerateKeys",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.authorizationRuleName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.PolicykeyResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ResourceListKeys
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NamespaceListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listAllNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NamespaceListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listAuthorizationRulesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SharedAccessAuthorizationRuleListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
