/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/notificationHubsMappers";
import * as Parameters from "../models/parameters";
import { NotificationHubsManagementClientContext } from "../notificationHubsManagementClientContext";

/** Class representing a NotificationHubs. */
export class NotificationHubs {
  private readonly client: NotificationHubsManagementClientContext;

  /**
   * Create a NotificationHubs.
   * @param {NotificationHubsManagementClientContext} client Reference to the service client.
   */
  constructor(client: NotificationHubsManagementClientContext) {
    this.client = client;
  }

  /**
   * Checks the availability of the given notificationHub in a namespace.
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param parameters The notificationHub name.
   * @param [options] The optional parameters
   * @returns Promise<Models.NotificationHubsCheckNotificationHubAvailabilityResponse>
   */
  checkNotificationHubAvailability(resourceGroupName: string, namespaceName: string, parameters: Models.CheckAvailabilityParameters, options?: msRest.RequestOptionsBase): Promise<Models.NotificationHubsCheckNotificationHubAvailabilityResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param parameters The notificationHub name.
   * @param callback The callback
   */
  checkNotificationHubAvailability(resourceGroupName: string, namespaceName: string, parameters: Models.CheckAvailabilityParameters, callback: msRest.ServiceCallback<Models.CheckAvailabilityResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param parameters The notificationHub name.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkNotificationHubAvailability(resourceGroupName: string, namespaceName: string, parameters: Models.CheckAvailabilityParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CheckAvailabilityResult>): void;
  checkNotificationHubAvailability(resourceGroupName: string, namespaceName: string, parameters: Models.CheckAvailabilityParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CheckAvailabilityResult>, callback?: msRest.ServiceCallback<Models.CheckAvailabilityResult>): Promise<Models.NotificationHubsCheckNotificationHubAvailabilityResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        parameters,
        options
      },
      checkNotificationHubAvailabilityOperationSpec,
      callback) as Promise<Models.NotificationHubsCheckNotificationHubAvailabilityResponse>;
  }

  /**
   * Creates/Update a NotificationHub in a namespace.
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param notificationHubName The notification hub name.
   * @param parameters Parameters supplied to the create/update a NotificationHub Resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.NotificationHubsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, namespaceName: string, notificationHubName: string, parameters: Models.NotificationHubCreateOrUpdateParameters, options?: msRest.RequestOptionsBase): Promise<Models.NotificationHubsCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param notificationHubName The notification hub name.
   * @param parameters Parameters supplied to the create/update a NotificationHub Resource.
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, namespaceName: string, notificationHubName: string, parameters: Models.NotificationHubCreateOrUpdateParameters, callback: msRest.ServiceCallback<Models.NotificationHubResource>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param notificationHubName The notification hub name.
   * @param parameters Parameters supplied to the create/update a NotificationHub Resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, namespaceName: string, notificationHubName: string, parameters: Models.NotificationHubCreateOrUpdateParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NotificationHubResource>): void;
  createOrUpdate(resourceGroupName: string, namespaceName: string, notificationHubName: string, parameters: Models.NotificationHubCreateOrUpdateParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NotificationHubResource>, callback?: msRest.ServiceCallback<Models.NotificationHubResource>): Promise<Models.NotificationHubsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        notificationHubName,
        parameters,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.NotificationHubsCreateOrUpdateResponse>;
  }

  /**
   * Patch a NotificationHub in a namespace.
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param notificationHubName The notification hub name.
   * @param [options] The optional parameters
   * @returns Promise<Models.NotificationHubsPatchResponse>
   */
  patch(resourceGroupName: string, namespaceName: string, notificationHubName: string, options?: Models.NotificationHubsPatchOptionalParams): Promise<Models.NotificationHubsPatchResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param notificationHubName The notification hub name.
   * @param callback The callback
   */
  patch(resourceGroupName: string, namespaceName: string, notificationHubName: string, callback: msRest.ServiceCallback<Models.NotificationHubResource>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param notificationHubName The notification hub name.
   * @param options The optional parameters
   * @param callback The callback
   */
  patch(resourceGroupName: string, namespaceName: string, notificationHubName: string, options: Models.NotificationHubsPatchOptionalParams, callback: msRest.ServiceCallback<Models.NotificationHubResource>): void;
  patch(resourceGroupName: string, namespaceName: string, notificationHubName: string, options?: Models.NotificationHubsPatchOptionalParams | msRest.ServiceCallback<Models.NotificationHubResource>, callback?: msRest.ServiceCallback<Models.NotificationHubResource>): Promise<Models.NotificationHubsPatchResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        notificationHubName,
        options
      },
      patchOperationSpec,
      callback) as Promise<Models.NotificationHubsPatchResponse>;
  }

  /**
   * Deletes a notification hub associated with a namespace.
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param notificationHubName The notification hub name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, namespaceName: string, notificationHubName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param notificationHubName The notification hub name.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, namespaceName: string, notificationHubName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param notificationHubName The notification hub name.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, namespaceName: string, notificationHubName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, namespaceName: string, notificationHubName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        notificationHubName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Lists the notification hubs associated with a namespace.
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param notificationHubName The notification hub name.
   * @param [options] The optional parameters
   * @returns Promise<Models.NotificationHubsGetResponse>
   */
  get(resourceGroupName: string, namespaceName: string, notificationHubName: string, options?: msRest.RequestOptionsBase): Promise<Models.NotificationHubsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param notificationHubName The notification hub name.
   * @param callback The callback
   */
  get(resourceGroupName: string, namespaceName: string, notificationHubName: string, callback: msRest.ServiceCallback<Models.NotificationHubResource>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param notificationHubName The notification hub name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, namespaceName: string, notificationHubName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NotificationHubResource>): void;
  get(resourceGroupName: string, namespaceName: string, notificationHubName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NotificationHubResource>, callback?: msRest.ServiceCallback<Models.NotificationHubResource>): Promise<Models.NotificationHubsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        notificationHubName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.NotificationHubsGetResponse>;
  }

  /**
   * test send a push notification
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param notificationHubName The notification hub name.
   * @param [options] The optional parameters
   * @returns Promise<Models.NotificationHubsDebugSendResponse>
   */
  debugSend(resourceGroupName: string, namespaceName: string, notificationHubName: string, options?: Models.NotificationHubsDebugSendOptionalParams): Promise<Models.NotificationHubsDebugSendResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param notificationHubName The notification hub name.
   * @param callback The callback
   */
  debugSend(resourceGroupName: string, namespaceName: string, notificationHubName: string, callback: msRest.ServiceCallback<Models.DebugSendResponse>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param notificationHubName The notification hub name.
   * @param options The optional parameters
   * @param callback The callback
   */
  debugSend(resourceGroupName: string, namespaceName: string, notificationHubName: string, options: Models.NotificationHubsDebugSendOptionalParams, callback: msRest.ServiceCallback<Models.DebugSendResponse>): void;
  debugSend(resourceGroupName: string, namespaceName: string, notificationHubName: string, options?: Models.NotificationHubsDebugSendOptionalParams | msRest.ServiceCallback<Models.DebugSendResponse>, callback?: msRest.ServiceCallback<Models.DebugSendResponse>): Promise<Models.NotificationHubsDebugSendResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        notificationHubName,
        options
      },
      debugSendOperationSpec,
      callback) as Promise<Models.NotificationHubsDebugSendResponse>;
  }

  /**
   * Creates/Updates an authorization rule for a NotificationHub
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param notificationHubName The notification hub name.
   * @param authorizationRuleName Authorization Rule Name.
   * @param parameters The shared access authorization rule.
   * @param [options] The optional parameters
   * @returns Promise<Models.NotificationHubsCreateOrUpdateAuthorizationRuleResponse>
   */
  createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, parameters: Models.SharedAccessAuthorizationRuleCreateOrUpdateParameters, options?: msRest.RequestOptionsBase): Promise<Models.NotificationHubsCreateOrUpdateAuthorizationRuleResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param notificationHubName The notification hub name.
   * @param authorizationRuleName Authorization Rule Name.
   * @param parameters The shared access authorization rule.
   * @param callback The callback
   */
  createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, parameters: Models.SharedAccessAuthorizationRuleCreateOrUpdateParameters, callback: msRest.ServiceCallback<Models.SharedAccessAuthorizationRuleResource>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param notificationHubName The notification hub name.
   * @param authorizationRuleName Authorization Rule Name.
   * @param parameters The shared access authorization rule.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, parameters: Models.SharedAccessAuthorizationRuleCreateOrUpdateParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SharedAccessAuthorizationRuleResource>): void;
  createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, parameters: Models.SharedAccessAuthorizationRuleCreateOrUpdateParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SharedAccessAuthorizationRuleResource>, callback?: msRest.ServiceCallback<Models.SharedAccessAuthorizationRuleResource>): Promise<Models.NotificationHubsCreateOrUpdateAuthorizationRuleResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        notificationHubName,
        authorizationRuleName,
        parameters,
        options
      },
      createOrUpdateAuthorizationRuleOperationSpec,
      callback) as Promise<Models.NotificationHubsCreateOrUpdateAuthorizationRuleResponse>;
  }

  /**
   * Deletes a notificationHub authorization rule
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param notificationHubName The notification hub name.
   * @param authorizationRuleName Authorization Rule Name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param notificationHubName The notification hub name.
   * @param authorizationRuleName Authorization Rule Name.
   * @param callback The callback
   */
  deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param notificationHubName The notification hub name.
   * @param authorizationRuleName Authorization Rule Name.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        notificationHubName,
        authorizationRuleName,
        options
      },
      deleteAuthorizationRuleOperationSpec,
      callback);
  }

  /**
   * Gets an authorization rule for a NotificationHub by name.
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name
   * @param notificationHubName The notification hub name.
   * @param authorizationRuleName authorization rule name.
   * @param [options] The optional parameters
   * @returns Promise<Models.NotificationHubsGetAuthorizationRuleResponse>
   */
  getAuthorizationRule(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, options?: msRest.RequestOptionsBase): Promise<Models.NotificationHubsGetAuthorizationRuleResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name
   * @param notificationHubName The notification hub name.
   * @param authorizationRuleName authorization rule name.
   * @param callback The callback
   */
  getAuthorizationRule(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, callback: msRest.ServiceCallback<Models.SharedAccessAuthorizationRuleResource>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name
   * @param notificationHubName The notification hub name.
   * @param authorizationRuleName authorization rule name.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAuthorizationRule(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SharedAccessAuthorizationRuleResource>): void;
  getAuthorizationRule(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SharedAccessAuthorizationRuleResource>, callback?: msRest.ServiceCallback<Models.SharedAccessAuthorizationRuleResource>): Promise<Models.NotificationHubsGetAuthorizationRuleResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        notificationHubName,
        authorizationRuleName,
        options
      },
      getAuthorizationRuleOperationSpec,
      callback) as Promise<Models.NotificationHubsGetAuthorizationRuleResponse>;
  }

  /**
   * Lists the notification hubs associated with a namespace.
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param [options] The optional parameters
   * @returns Promise<Models.NotificationHubsListResponse>
   */
  list(resourceGroupName: string, namespaceName: string, options?: msRest.RequestOptionsBase): Promise<Models.NotificationHubsListResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param callback The callback
   */
  list(resourceGroupName: string, namespaceName: string, callback: msRest.ServiceCallback<Models.NotificationHubListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, namespaceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NotificationHubListResult>): void;
  list(resourceGroupName: string, namespaceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NotificationHubListResult>, callback?: msRest.ServiceCallback<Models.NotificationHubListResult>): Promise<Models.NotificationHubsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.NotificationHubsListResponse>;
  }

  /**
   * Gets the authorization rules for a NotificationHub.
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name
   * @param notificationHubName The notification hub name.
   * @param [options] The optional parameters
   * @returns Promise<Models.NotificationHubsListAuthorizationRulesResponse>
   */
  listAuthorizationRules(resourceGroupName: string, namespaceName: string, notificationHubName: string, options?: msRest.RequestOptionsBase): Promise<Models.NotificationHubsListAuthorizationRulesResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name
   * @param notificationHubName The notification hub name.
   * @param callback The callback
   */
  listAuthorizationRules(resourceGroupName: string, namespaceName: string, notificationHubName: string, callback: msRest.ServiceCallback<Models.SharedAccessAuthorizationRuleListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name
   * @param notificationHubName The notification hub name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listAuthorizationRules(resourceGroupName: string, namespaceName: string, notificationHubName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SharedAccessAuthorizationRuleListResult>): void;
  listAuthorizationRules(resourceGroupName: string, namespaceName: string, notificationHubName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SharedAccessAuthorizationRuleListResult>, callback?: msRest.ServiceCallback<Models.SharedAccessAuthorizationRuleListResult>): Promise<Models.NotificationHubsListAuthorizationRulesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        notificationHubName,
        options
      },
      listAuthorizationRulesOperationSpec,
      callback) as Promise<Models.NotificationHubsListAuthorizationRulesResponse>;
  }

  /**
   * Gets the Primary and Secondary ConnectionStrings to the NotificationHub
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param notificationHubName The notification hub name.
   * @param authorizationRuleName The connection string of the NotificationHub for the specified
   * authorizationRule.
   * @param [options] The optional parameters
   * @returns Promise<Models.NotificationHubsListKeysResponse>
   */
  listKeys(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, options?: msRest.RequestOptionsBase): Promise<Models.NotificationHubsListKeysResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param notificationHubName The notification hub name.
   * @param authorizationRuleName The connection string of the NotificationHub for the specified
   * authorizationRule.
   * @param callback The callback
   */
  listKeys(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, callback: msRest.ServiceCallback<Models.ResourceListKeys>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param notificationHubName The notification hub name.
   * @param authorizationRuleName The connection string of the NotificationHub for the specified
   * authorizationRule.
   * @param options The optional parameters
   * @param callback The callback
   */
  listKeys(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResourceListKeys>): void;
  listKeys(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ResourceListKeys>, callback?: msRest.ServiceCallback<Models.ResourceListKeys>): Promise<Models.NotificationHubsListKeysResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        notificationHubName,
        authorizationRuleName,
        options
      },
      listKeysOperationSpec,
      callback) as Promise<Models.NotificationHubsListKeysResponse>;
  }

  /**
   * Regenerates the Primary/Secondary Keys to the NotificationHub Authorization Rule
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param notificationHubName The notification hub name.
   * @param authorizationRuleName The connection string of the NotificationHub for the specified
   * authorizationRule.
   * @param parameters Parameters supplied to regenerate the NotificationHub Authorization Rule Key.
   * @param [options] The optional parameters
   * @returns Promise<Models.NotificationHubsRegenerateKeysResponse>
   */
  regenerateKeys(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, parameters: Models.PolicykeyResource, options?: msRest.RequestOptionsBase): Promise<Models.NotificationHubsRegenerateKeysResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param notificationHubName The notification hub name.
   * @param authorizationRuleName The connection string of the NotificationHub for the specified
   * authorizationRule.
   * @param parameters Parameters supplied to regenerate the NotificationHub Authorization Rule Key.
   * @param callback The callback
   */
  regenerateKeys(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, parameters: Models.PolicykeyResource, callback: msRest.ServiceCallback<Models.ResourceListKeys>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param notificationHubName The notification hub name.
   * @param authorizationRuleName The connection string of the NotificationHub for the specified
   * authorizationRule.
   * @param parameters Parameters supplied to regenerate the NotificationHub Authorization Rule Key.
   * @param options The optional parameters
   * @param callback The callback
   */
  regenerateKeys(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, parameters: Models.PolicykeyResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResourceListKeys>): void;
  regenerateKeys(resourceGroupName: string, namespaceName: string, notificationHubName: string, authorizationRuleName: string, parameters: Models.PolicykeyResource, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ResourceListKeys>, callback?: msRest.ServiceCallback<Models.ResourceListKeys>): Promise<Models.NotificationHubsRegenerateKeysResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        notificationHubName,
        authorizationRuleName,
        parameters,
        options
      },
      regenerateKeysOperationSpec,
      callback) as Promise<Models.NotificationHubsRegenerateKeysResponse>;
  }

  /**
   * Lists the PNS Credentials associated with a notification hub .
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param notificationHubName The notification hub name.
   * @param [options] The optional parameters
   * @returns Promise<Models.NotificationHubsGetPnsCredentialsResponse>
   */
  getPnsCredentials(resourceGroupName: string, namespaceName: string, notificationHubName: string, options?: msRest.RequestOptionsBase): Promise<Models.NotificationHubsGetPnsCredentialsResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param notificationHubName The notification hub name.
   * @param callback The callback
   */
  getPnsCredentials(resourceGroupName: string, namespaceName: string, notificationHubName: string, callback: msRest.ServiceCallback<Models.PnsCredentialsResource>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param notificationHubName The notification hub name.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPnsCredentials(resourceGroupName: string, namespaceName: string, notificationHubName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PnsCredentialsResource>): void;
  getPnsCredentials(resourceGroupName: string, namespaceName: string, notificationHubName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PnsCredentialsResource>, callback?: msRest.ServiceCallback<Models.PnsCredentialsResource>): Promise<Models.NotificationHubsGetPnsCredentialsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        notificationHubName,
        options
      },
      getPnsCredentialsOperationSpec,
      callback) as Promise<Models.NotificationHubsGetPnsCredentialsResponse>;
  }

  /**
   * Lists the notification hubs associated with a namespace.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.NotificationHubsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.NotificationHubsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.NotificationHubListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NotificationHubListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NotificationHubListResult>, callback?: msRest.ServiceCallback<Models.NotificationHubListResult>): Promise<Models.NotificationHubsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.NotificationHubsListNextResponse>;
  }

  /**
   * Gets the authorization rules for a NotificationHub.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.NotificationHubsListAuthorizationRulesNextResponse>
   */
  listAuthorizationRulesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.NotificationHubsListAuthorizationRulesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listAuthorizationRulesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SharedAccessAuthorizationRuleListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listAuthorizationRulesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SharedAccessAuthorizationRuleListResult>): void;
  listAuthorizationRulesNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SharedAccessAuthorizationRuleListResult>, callback?: msRest.ServiceCallback<Models.SharedAccessAuthorizationRuleListResult>): Promise<Models.NotificationHubsListAuthorizationRulesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listAuthorizationRulesNextOperationSpec,
      callback) as Promise<Models.NotificationHubsListAuthorizationRulesNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const checkNotificationHubAvailabilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/checkNotificationHubAvailability",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.CheckAvailabilityParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CheckAvailabilityResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.notificationHubName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.NotificationHubCreateOrUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.NotificationHubResource
    },
    201: {
      bodyMapper: Mappers.NotificationHubResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.notificationHubName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "parameters"
    ],
    mapper: Mappers.NotificationHubPatchParameters
  },
  responses: {
    200: {
      bodyMapper: Mappers.NotificationHubResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.notificationHubName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.notificationHubName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NotificationHubResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const debugSendOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/debugsend",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.notificationHubName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "parameters"
    ],
    mapper: {
      serializedName: "parameters",
      type: {
        name: "Object"
      }
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.DebugSendResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateAuthorizationRuleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/AuthorizationRules/{authorizationRuleName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.notificationHubName,
    Parameters.authorizationRuleName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.SharedAccessAuthorizationRuleCreateOrUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SharedAccessAuthorizationRuleResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteAuthorizationRuleOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/AuthorizationRules/{authorizationRuleName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.notificationHubName,
    Parameters.authorizationRuleName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAuthorizationRuleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/AuthorizationRules/{authorizationRuleName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.notificationHubName,
    Parameters.authorizationRuleName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SharedAccessAuthorizationRuleResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NotificationHubListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listAuthorizationRulesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/AuthorizationRules",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.notificationHubName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SharedAccessAuthorizationRuleListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listKeysOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/AuthorizationRules/{authorizationRuleName}/listKeys",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.notificationHubName,
    Parameters.authorizationRuleName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ResourceListKeys
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const regenerateKeysOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/AuthorizationRules/{authorizationRuleName}/regenerateKeys",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.notificationHubName,
    Parameters.authorizationRuleName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.PolicykeyResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ResourceListKeys
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getPnsCredentialsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/pnsCredentials",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.notificationHubName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PnsCredentialsResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NotificationHubListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listAuthorizationRulesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SharedAccessAuthorizationRuleListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
