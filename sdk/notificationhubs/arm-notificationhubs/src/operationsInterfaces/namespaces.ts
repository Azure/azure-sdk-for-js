/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  NamespaceResource,
  NamespacesListOptionalParams,
  NamespacesListAllOptionalParams,
  SharedAccessAuthorizationRuleResource,
  NamespacesListAuthorizationRulesOptionalParams,
  CheckAvailabilityParameters,
  NamespacesCheckAvailabilityOptionalParams,
  NamespacesCheckAvailabilityResponse,
  NamespaceCreateOrUpdateParameters,
  NamespacesCreateOrUpdateOptionalParams,
  NamespacesCreateOrUpdateResponse,
  NamespacePatchParameters,
  NamespacesPatchOptionalParams,
  NamespacesPatchResponse,
  NamespacesDeleteOptionalParams,
  NamespacesGetOptionalParams,
  NamespacesGetResponse,
  SharedAccessAuthorizationRuleCreateOrUpdateParameters,
  NamespacesCreateOrUpdateAuthorizationRuleOptionalParams,
  NamespacesCreateOrUpdateAuthorizationRuleResponse,
  NamespacesDeleteAuthorizationRuleOptionalParams,
  NamespacesGetAuthorizationRuleOptionalParams,
  NamespacesGetAuthorizationRuleResponse,
  NamespacesListKeysOptionalParams,
  NamespacesListKeysResponse,
  PolicykeyResource,
  NamespacesRegenerateKeysOptionalParams,
  NamespacesRegenerateKeysResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Namespaces. */
export interface Namespaces {
  /**
   * Lists the available namespaces within a resourceGroup.
   * @param resourceGroupName The name of the resource group. If resourceGroupName value is null the
   *                          method lists all the namespaces within subscription
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    options?: NamespacesListOptionalParams
  ): PagedAsyncIterableIterator<NamespaceResource>;
  /**
   * Lists all the available namespaces within the subscription irrespective of the resourceGroups.
   * @param options The options parameters.
   */
  listAll(
    options?: NamespacesListAllOptionalParams
  ): PagedAsyncIterableIterator<NamespaceResource>;
  /**
   * Gets the authorization rules for a namespace.
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name
   * @param options The options parameters.
   */
  listAuthorizationRules(
    resourceGroupName: string,
    namespaceName: string,
    options?: NamespacesListAuthorizationRulesOptionalParams
  ): PagedAsyncIterableIterator<SharedAccessAuthorizationRuleResource>;
  /**
   * Checks the availability of the given service namespace across all Azure subscriptions. This is
   * useful because the domain name is created based on the service namespace name.
   * @param parameters The namespace name.
   * @param options The options parameters.
   */
  checkAvailability(
    parameters: CheckAvailabilityParameters,
    options?: NamespacesCheckAvailabilityOptionalParams
  ): Promise<NamespacesCheckAvailabilityResponse>;
  /**
   * Creates/Updates a service namespace. Once created, this namespace's resource manifest is immutable.
   * This operation is idempotent.
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param parameters Parameters supplied to create a Namespace Resource.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    namespaceName: string,
    parameters: NamespaceCreateOrUpdateParameters,
    options?: NamespacesCreateOrUpdateOptionalParams
  ): Promise<NamespacesCreateOrUpdateResponse>;
  /**
   * Patches the existing namespace
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param parameters Parameters supplied to patch a Namespace Resource.
   * @param options The options parameters.
   */
  patch(
    resourceGroupName: string,
    namespaceName: string,
    parameters: NamespacePatchParameters,
    options?: NamespacesPatchOptionalParams
  ): Promise<NamespacesPatchResponse>;
  /**
   * Deletes an existing namespace. This operation also removes all associated notificationHubs under the
   * namespace.
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    namespaceName: string,
    options?: NamespacesDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes an existing namespace. This operation also removes all associated notificationHubs under the
   * namespace.
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    namespaceName: string,
    options?: NamespacesDeleteOptionalParams
  ): Promise<void>;
  /**
   * Returns the description for the specified namespace.
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    namespaceName: string,
    options?: NamespacesGetOptionalParams
  ): Promise<NamespacesGetResponse>;
  /**
   * Creates an authorization rule for a namespace
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param authorizationRuleName Authorization Rule Name.
   * @param parameters The shared access authorization rule.
   * @param options The options parameters.
   */
  createOrUpdateAuthorizationRule(
    resourceGroupName: string,
    namespaceName: string,
    authorizationRuleName: string,
    parameters: SharedAccessAuthorizationRuleCreateOrUpdateParameters,
    options?: NamespacesCreateOrUpdateAuthorizationRuleOptionalParams
  ): Promise<NamespacesCreateOrUpdateAuthorizationRuleResponse>;
  /**
   * Deletes a namespace authorization rule
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param authorizationRuleName Authorization Rule Name.
   * @param options The options parameters.
   */
  deleteAuthorizationRule(
    resourceGroupName: string,
    namespaceName: string,
    authorizationRuleName: string,
    options?: NamespacesDeleteAuthorizationRuleOptionalParams
  ): Promise<void>;
  /**
   * Gets an authorization rule for a namespace by name.
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name
   * @param authorizationRuleName Authorization rule name.
   * @param options The options parameters.
   */
  getAuthorizationRule(
    resourceGroupName: string,
    namespaceName: string,
    authorizationRuleName: string,
    options?: NamespacesGetAuthorizationRuleOptionalParams
  ): Promise<NamespacesGetAuthorizationRuleResponse>;
  /**
   * Gets the Primary and Secondary ConnectionStrings to the namespace
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param authorizationRuleName The connection string of the namespace for the specified
   *                              authorizationRule.
   * @param options The options parameters.
   */
  listKeys(
    resourceGroupName: string,
    namespaceName: string,
    authorizationRuleName: string,
    options?: NamespacesListKeysOptionalParams
  ): Promise<NamespacesListKeysResponse>;
  /**
   * Regenerates the Primary/Secondary Keys to the Namespace Authorization Rule
   * @param resourceGroupName The name of the resource group.
   * @param namespaceName The namespace name.
   * @param authorizationRuleName The connection string of the namespace for the specified
   *                              authorizationRule.
   * @param parameters Parameters supplied to regenerate the Namespace Authorization Rule Key.
   * @param options The options parameters.
   */
  regenerateKeys(
    resourceGroupName: string,
    namespaceName: string,
    authorizationRuleName: string,
    parameters: PolicykeyResource,
    options?: NamespacesRegenerateKeysOptionalParams
  ): Promise<NamespacesRegenerateKeysResponse>;
}
