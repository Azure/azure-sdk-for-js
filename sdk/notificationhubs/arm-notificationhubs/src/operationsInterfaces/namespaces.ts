/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  NamespaceResource,
  NamespacesListAllOptionalParams,
  NamespacesListOptionalParams,
  SharedAccessAuthorizationRuleResource,
  NamespacesListAuthorizationRulesOptionalParams,
  CheckAvailabilityParameters,
  NamespacesCheckAvailabilityOptionalParams,
  NamespacesCheckAvailabilityResponse,
  NamespacesGetOptionalParams,
  NamespacesGetResponse,
  NamespacesCreateOrUpdateOptionalParams,
  NamespacesCreateOrUpdateResponse,
  NamespacePatchParameters,
  NamespacesUpdateOptionalParams,
  NamespacesUpdateResponse,
  NamespacesDeleteOptionalParams,
  NamespacesCreateOrUpdateAuthorizationRuleOptionalParams,
  NamespacesCreateOrUpdateAuthorizationRuleResponse,
  NamespacesDeleteAuthorizationRuleOptionalParams,
  NamespacesGetAuthorizationRuleOptionalParams,
  NamespacesGetAuthorizationRuleResponse,
  NamespacesListKeysOptionalParams,
  NamespacesListKeysResponse,
  PolicyKeyResource,
  NamespacesRegenerateKeysOptionalParams,
  NamespacesRegenerateKeysResponse,
  NamespacesGetPnsCredentialsOptionalParams,
  NamespacesGetPnsCredentialsResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Namespaces. */
export interface Namespaces {
  /**
   * Lists all the available namespaces within the subscription.
   * @param options The options parameters.
   */
  listAll(
    options?: NamespacesListAllOptionalParams,
  ): PagedAsyncIterableIterator<NamespaceResource>;
  /**
   * Lists the available namespaces within a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    options?: NamespacesListOptionalParams,
  ): PagedAsyncIterableIterator<NamespaceResource>;
  /**
   * Gets the authorization rules for a namespace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param namespaceName Namespace name
   * @param options The options parameters.
   */
  listAuthorizationRules(
    resourceGroupName: string,
    namespaceName: string,
    options?: NamespacesListAuthorizationRulesOptionalParams,
  ): PagedAsyncIterableIterator<SharedAccessAuthorizationRuleResource>;
  /**
   * Checks the availability of the given service namespace across all Azure subscriptions. This is
   * useful because the domain name is created based on the service namespace name.
   * @param parameters Request content.
   * @param options The options parameters.
   */
  checkAvailability(
    parameters: CheckAvailabilityParameters,
    options?: NamespacesCheckAvailabilityOptionalParams,
  ): Promise<NamespacesCheckAvailabilityResponse>;
  /**
   * Returns the given namespace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param namespaceName Namespace name
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    namespaceName: string,
    options?: NamespacesGetOptionalParams,
  ): Promise<NamespacesGetResponse>;
  /**
   * Creates / Updates a Notification Hub namespace. This operation is idempotent.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param namespaceName Namespace name
   * @param parameters Request content.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    namespaceName: string,
    parameters: NamespaceResource,
    options?: NamespacesCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<NamespacesCreateOrUpdateResponse>,
      NamespacesCreateOrUpdateResponse
    >
  >;
  /**
   * Creates / Updates a Notification Hub namespace. This operation is idempotent.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param namespaceName Namespace name
   * @param parameters Request content.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    namespaceName: string,
    parameters: NamespaceResource,
    options?: NamespacesCreateOrUpdateOptionalParams,
  ): Promise<NamespacesCreateOrUpdateResponse>;
  /**
   * Patches the existing namespace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param namespaceName Namespace name
   * @param parameters Request content.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    namespaceName: string,
    parameters: NamespacePatchParameters,
    options?: NamespacesUpdateOptionalParams,
  ): Promise<NamespacesUpdateResponse>;
  /**
   * Deletes an existing namespace. This operation also removes all associated notificationHubs under the
   * namespace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param namespaceName Namespace name
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    namespaceName: string,
    options?: NamespacesDeleteOptionalParams,
  ): Promise<void>;
  /**
   * Creates an authorization rule for a namespace
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param namespaceName Namespace name
   * @param authorizationRuleName Authorization Rule Name
   * @param parameters Request content.
   * @param options The options parameters.
   */
  createOrUpdateAuthorizationRule(
    resourceGroupName: string,
    namespaceName: string,
    authorizationRuleName: string,
    parameters: SharedAccessAuthorizationRuleResource,
    options?: NamespacesCreateOrUpdateAuthorizationRuleOptionalParams,
  ): Promise<NamespacesCreateOrUpdateAuthorizationRuleResponse>;
  /**
   * Deletes a namespace authorization rule
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param namespaceName Namespace name
   * @param authorizationRuleName Authorization Rule Name
   * @param options The options parameters.
   */
  deleteAuthorizationRule(
    resourceGroupName: string,
    namespaceName: string,
    authorizationRuleName: string,
    options?: NamespacesDeleteAuthorizationRuleOptionalParams,
  ): Promise<void>;
  /**
   * Gets an authorization rule for a namespace by name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param namespaceName Namespace name
   * @param authorizationRuleName Authorization Rule Name
   * @param options The options parameters.
   */
  getAuthorizationRule(
    resourceGroupName: string,
    namespaceName: string,
    authorizationRuleName: string,
    options?: NamespacesGetAuthorizationRuleOptionalParams,
  ): Promise<NamespacesGetAuthorizationRuleResponse>;
  /**
   * Gets the Primary and Secondary ConnectionStrings to the namespace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param namespaceName Namespace name
   * @param authorizationRuleName Authorization Rule Name
   * @param options The options parameters.
   */
  listKeys(
    resourceGroupName: string,
    namespaceName: string,
    authorizationRuleName: string,
    options?: NamespacesListKeysOptionalParams,
  ): Promise<NamespacesListKeysResponse>;
  /**
   * Regenerates the Primary/Secondary Keys to the Namespace Authorization Rule
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param namespaceName Namespace name
   * @param authorizationRuleName Authorization Rule Name
   * @param parameters Request content.
   * @param options The options parameters.
   */
  regenerateKeys(
    resourceGroupName: string,
    namespaceName: string,
    authorizationRuleName: string,
    parameters: PolicyKeyResource,
    options?: NamespacesRegenerateKeysOptionalParams,
  ): Promise<NamespacesRegenerateKeysResponse>;
  /**
   * Lists the PNS credentials associated with a namespace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param namespaceName Namespace name
   * @param options The options parameters.
   */
  getPnsCredentials(
    resourceGroupName: string,
    namespaceName: string,
    options?: NamespacesGetPnsCredentialsOptionalParams,
  ): Promise<NamespacesGetPnsCredentialsResponse>;
}
