/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import type { RecorderStartOptions } from "@azure-tools/test-recorder";
import { env, Recorder, delay, isPlaybackMode } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { NotificationHubsManagementClient } from "../src/notificationHubsManagementClient.js";
import type { NotificationHubResource } from "../src/models/index.js";
import { describe, it, assert, beforeEach, afterEach } from "vitest";

const replaceableVariables: Record<string, string> = {
  SUBSCRIPTION_ID: "88888888-8888-8888-8888-888888888888",
};

const recorderOptions: RecorderStartOptions = {
  envSetupForPlayback: replaceableVariables,
  removeCentralSanitizers: [
    "AZSDK3493", // .name in the body is not a secret and is listed below in the beforeEach section
    "AZSDK3430", // .id in the body is not a secret and is listed below in the beforeEach section
  ],
};

export const testPollingOptions = {
  updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};

describe("NotificationHubs test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: NotificationHubsManagementClient;
  let location: string;
  let resourceGroup: string;
  let nameSpaceName: string;
  let notificationhubsName: string;

  beforeEach(async (ctx) => {
    recorder = new Recorder(ctx);
    await recorder.start(recorderOptions);
    subscriptionId = env.SUBSCRIPTION_ID || "";
    // This is an example of how the environment variables are used
    const credential = createTestCredential();
    client = new NotificationHubsManagementClient(
      credential,
      subscriptionId,
      recorder.configureClientOptions({}),
    );
    location = "eastus";
    resourceGroup = "myjstest";
    nameSpaceName = "mynamespacexxx";
    notificationhubsName = "mynotificationhubsxxx";
  });

  afterEach(async () => {
    await recorder.stop();
  });

  it("namespaces create test", async () => {
    const res = await client.namespaces.beginCreateOrUpdateAndWait(
      resourceGroup,
      nameSpaceName,
      {
        networkAcls: {
          ipRules: [{ ipMask: "185.48.100.00/24", rights: ["Manage", "Send", "Listen"] }],
          publicNetworkRule: { rights: ["Listen"] },
        },
        zoneRedundancy: "Enabled",
        sku: { name: "Standard", tier: "Standard" },
        tags: { tag1: "value1", tag2: "value2" },
        location: location,
      },
      testPollingOptions,
    );
    assert.equal(res.name, nameSpaceName);
  });

  it("namespaces get test", async () => {
    const res = await client.namespaces.get(resourceGroup, nameSpaceName);
    assert.equal(res.name, nameSpaceName);
  });

  it("notificationHubs create test", async () => {
    const res = await client.notificationHubs.createOrUpdate(
      resourceGroup,
      nameSpaceName,
      notificationhubsName,
      { location: location },
    );
    await delay(isPlaybackMode() ? 1000 : 100000);
    assert.equal(res.name, notificationhubsName);
  });

  it("notificationHubs get test", async () => {
    const res = await client.notificationHubs.get(
      resourceGroup,
      nameSpaceName,
      notificationhubsName,
    );
    assert.equal(res.name, notificationhubsName);
  });

  it("notificationHubs list test", async () => {
    const resArray: NotificationHubResource[] = [];
    for await (const item of client.notificationHubs.list(resourceGroup, nameSpaceName)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 1);
  });

  it("notificationHubs delete test", async () => {
    await client.notificationHubs.delete(resourceGroup, nameSpaceName, notificationhubsName);
    const resArray: NotificationHubResource[] = [];
    for await (const item of client.notificationHubs.list(resourceGroup, nameSpaceName)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });

  it("namespaces delete test", async () => {
    await client.namespaces.delete(resourceGroup, nameSpaceName);
  });
});
