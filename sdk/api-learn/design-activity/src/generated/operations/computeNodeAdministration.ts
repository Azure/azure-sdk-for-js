/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { GeneratedClient } from "../generatedClient";
import {
  ComputeNodeAdministrationListResponse,
  ComputeNodeAdministrationCreateOptionalParams,
  ComputeNodeAdministrationCreateResponse,
  ComputeNodeAdministrationGetResponse
} from "../models";

/**
 * Class representing a ComputeNodeAdministration.
 */
export class ComputeNodeAdministration {
  private readonly client: GeneratedClient;

  /**
   * Initialize a new instance of the class ComputeNodeAdministration class.
   * @param client Reference to the service client
   */
  constructor(client: GeneratedClient) {
    this.client = client;
  }

  /**
   * @param options The options parameters.
   */
  list(
    options?: coreHttp.OperationOptions
  ): Promise<ComputeNodeAdministrationListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<ComputeNodeAdministrationListResponse>;
  }

  /**
   * @param nodeName
   * @param options The options parameters.
   */
  create(
    nodeName: string,
    options?: ComputeNodeAdministrationCreateOptionalParams
  ): Promise<ComputeNodeAdministrationCreateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nodeName, options: operationOptions },
      createOperationSpec
    ) as Promise<ComputeNodeAdministrationCreateResponse>;
  }

  /**
   * @param nodeName
   * @param options The options parameters.
   */
  get(
    nodeName: string,
    options?: coreHttp.OperationOptions
  ): Promise<ComputeNodeAdministrationGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nodeName, options: operationOptions },
      getOperationSpec
    ) as Promise<ComputeNodeAdministrationGetResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path: "/ComputeNodes",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PageOfComputeNodes
    },
    default: {
      bodyMapper: { type: { name: "any" } }
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path: "/ComputeNodes/{nodeName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ComputeNode
    },
    201: {
      bodyMapper: Mappers.ComputeNode
    },
    default: {
      bodyMapper: { type: { name: "any" } }
    }
  },
  requestBody: Parameters.computeNode,
  urlParameters: [Parameters.$host, Parameters.nodeName],
  headerParameters: [
    Parameters.xMsClientRequestId,
    Parameters.contentType,
    Parameters.accept1,
    Parameters.ifMatch
  ],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path: "/ComputeNodes/{nodeName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ComputeNode
    }
  },
  urlParameters: [Parameters.$host, Parameters.nodeName],
  headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],
  serializer
};
