/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { RemoteRenderingRestClient } from "../remoteRenderingRestClient";
import {
  CreateConversionSettings,
  RemoteRenderingCreateConversionResponse,
  RemoteRenderingGetConversionResponse,
  RemoteRenderingListConversionsResponse,
  RenderingSessionOptions,
  RemoteRenderingCreateSessionResponse,
  RemoteRenderingGetSessionResponse,
  UpdateSessionOptions,
  RemoteRenderingUpdateSessionResponse,
  RemoteRenderingStopSessionResponse,
  RemoteRenderingListSessionsResponse,
  RemoteRenderingListConversionsNextResponse,
  RemoteRenderingListSessionsNextResponse
} from "../models";

/** Class representing a RemoteRendering. */
export class RemoteRendering {
  private readonly client: RemoteRenderingRestClient;

  /**
   * Initialize a new instance of the class RemoteRendering class.
   * @param client Reference to the service client
   */
  constructor(client: RemoteRenderingRestClient) {
    this.client = client;
  }

  /**
   * Creates a conversion using an asset stored in an Azure Blob Storage account.
   * @param accountId The Azure Remote Rendering account ID.
   * @param conversionId An ID uniquely identifying the conversion for the given account. The ID is case
   *                     sensitive, can contain any combination of alphanumeric characters including hyphens and underscores,
   *                     and cannot contain more than 256 characters.
   * @param body Request body configuring the settings for an asset conversion.
   * @param options The options parameters.
   */
  createConversion(
    accountId: string,
    conversionId: string,
    body: CreateConversionSettings,
    options?: coreHttp.OperationOptions
  ): Promise<RemoteRenderingCreateConversionResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      accountId,
      conversionId,
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      createConversionOperationSpec
    ) as Promise<RemoteRenderingCreateConversionResponse>;
  }

  /**
   * Gets the status of a particular conversion.
   * @param accountId The Azure Remote Rendering account ID.
   * @param conversionId An ID uniquely identifying the conversion for the given account. The ID is case
   *                     sensitive, can contain any combination of alphanumeric characters including hyphens and underscores,
   *                     and cannot contain more than 256 characters.
   * @param options The options parameters.
   */
  getConversion(
    accountId: string,
    conversionId: string,
    options?: coreHttp.OperationOptions
  ): Promise<RemoteRenderingGetConversionResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      accountId,
      conversionId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getConversionOperationSpec
    ) as Promise<RemoteRenderingGetConversionResponse>;
  }

  /**
   * Gets a list of all conversions.
   * @param accountId The Azure Remote Rendering account ID.
   * @param options The options parameters.
   */
  listConversions(
    accountId: string,
    options?: coreHttp.OperationOptions
  ): Promise<RemoteRenderingListConversionsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      accountId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listConversionsOperationSpec
    ) as Promise<RemoteRenderingListConversionsResponse>;
  }

  /**
   * Creates a new rendering session.
   * @param accountId The Azure Remote Rendering account ID.
   * @param sessionId An ID uniquely identifying the rendering session for the given account. The ID is
   *                  case sensitive, can contain any combination of alphanumeric characters including hyphens and
   *                  underscores, and cannot contain more than 256 characters.
   * @param body Settings of the session to be created.
   * @param options The options parameters.
   */
  createSession(
    accountId: string,
    sessionId: string,
    body: RenderingSessionOptions,
    options?: coreHttp.OperationOptions
  ): Promise<RemoteRenderingCreateSessionResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      accountId,
      sessionId,
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      createSessionOperationSpec
    ) as Promise<RemoteRenderingCreateSessionResponse>;
  }

  /**
   * Gets the properties of a particular rendering session.
   * @param accountId The Azure Remote Rendering account ID.
   * @param sessionId An ID uniquely identifying the rendering session for the given account. The ID is
   *                  case sensitive, can contain any combination of alphanumeric characters including hyphens and
   *                  underscores, and cannot contain more than 256 characters.
   * @param options The options parameters.
   */
  getSession(
    accountId: string,
    sessionId: string,
    options?: coreHttp.OperationOptions
  ): Promise<RemoteRenderingGetSessionResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      accountId,
      sessionId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getSessionOperationSpec
    ) as Promise<RemoteRenderingGetSessionResponse>;
  }

  /**
   * Updates the max lease time of a particular rendering session.
   * @param accountId The Azure Remote Rendering account ID.
   * @param sessionId An ID uniquely identifying the rendering session for the given account. The ID is
   *                  case sensitive, can contain any combination of alphanumeric characters including hyphens and
   *                  underscores, and cannot contain more than 256 characters.
   * @param body Settings used to update the session.
   * @param options The options parameters.
   */
  updateSession(
    accountId: string,
    sessionId: string,
    body: UpdateSessionOptions,
    options?: coreHttp.OperationOptions
  ): Promise<RemoteRenderingUpdateSessionResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      accountId,
      sessionId,
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      updateSessionOperationSpec
    ) as Promise<RemoteRenderingUpdateSessionResponse>;
  }

  /**
   * Stops a particular rendering session.
   * @param accountId The Azure Remote Rendering account ID.
   * @param sessionId An ID uniquely identifying the rendering session for the given account. The ID is
   *                  case sensitive, can contain any combination of alphanumeric characters including hyphens and
   *                  underscores, and cannot contain more than 256 characters.
   * @param options The options parameters.
   */
  stopSession(
    accountId: string,
    sessionId: string,
    options?: coreHttp.OperationOptions
  ): Promise<RemoteRenderingStopSessionResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      accountId,
      sessionId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      stopSessionOperationSpec
    ) as Promise<RemoteRenderingStopSessionResponse>;
  }

  /**
   * Gets a list of all rendering sessions.
   * @param accountId The Azure Remote Rendering account ID.
   * @param options The options parameters.
   */
  listSessions(
    accountId: string,
    options?: coreHttp.OperationOptions
  ): Promise<RemoteRenderingListSessionsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      accountId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listSessionsOperationSpec
    ) as Promise<RemoteRenderingListSessionsResponse>;
  }

  /**
   * ListConversionsNext
   * @param accountId The Azure Remote Rendering account ID.
   * @param nextLink The nextLink from the previous successful call to the ListConversions method.
   * @param options The options parameters.
   */
  listConversionsNext(
    accountId: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<RemoteRenderingListConversionsNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      accountId,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listConversionsNextOperationSpec
    ) as Promise<RemoteRenderingListConversionsNextResponse>;
  }

  /**
   * ListSessionsNext
   * @param accountId The Azure Remote Rendering account ID.
   * @param nextLink The nextLink from the previous successful call to the ListSessions method.
   * @param options The options parameters.
   */
  listSessionsNext(
    accountId: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<RemoteRenderingListSessionsNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      accountId,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listSessionsNextOperationSpec
    ) as Promise<RemoteRenderingListSessionsNextResponse>;
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const createConversionOperationSpec: coreHttp.OperationSpec = {
  path: "/accounts/{account_id}/conversions/{conversion_id}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.AssetConversion,
      headersMapper: Mappers.RemoteRenderingCreateConversionHeaders
    },
    201: {
      bodyMapper: Mappers.AssetConversion,
      headersMapper: Mappers.RemoteRenderingCreateConversionHeaders
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.RemoteRenderingCreateConversionExceptionHeaders,
      isError: true
    },
    401: {
      headersMapper: Mappers.RemoteRenderingCreateConversionExceptionHeaders,
      isError: true
    },
    403: {
      headersMapper: Mappers.RemoteRenderingCreateConversionExceptionHeaders,
      isError: true
    },
    409: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.RemoteRenderingCreateConversionExceptionHeaders,
      isError: true
    },
    429: {
      headersMapper: Mappers.RemoteRenderingCreateConversionExceptionHeaders,
      isError: true
    },
    500: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.endpoint,
    Parameters.accountId,
    Parameters.conversionId
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const getConversionOperationSpec: coreHttp.OperationSpec = {
  path: "/accounts/{account_id}/conversions/{conversion_id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AssetConversion,
      headersMapper: Mappers.RemoteRenderingGetConversionHeaders
    },
    401: {
      headersMapper: Mappers.RemoteRenderingGetConversionExceptionHeaders,
      isError: true
    },
    403: {
      headersMapper: Mappers.RemoteRenderingGetConversionExceptionHeaders,
      isError: true
    },
    404: {
      headersMapper: Mappers.RemoteRenderingGetConversionExceptionHeaders,
      isError: true
    },
    429: {
      headersMapper: Mappers.RemoteRenderingGetConversionExceptionHeaders,
      isError: true
    },
    500: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.RemoteRenderingGetConversionExceptionHeaders,
      isError: true
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.endpoint,
    Parameters.accountId,
    Parameters.conversionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listConversionsOperationSpec: coreHttp.OperationSpec = {
  path: "/accounts/{account_id}/conversions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConversionList,
      headersMapper: Mappers.RemoteRenderingListConversionsHeaders
    },
    401: {
      headersMapper: Mappers.RemoteRenderingListConversionsExceptionHeaders,
      isError: true
    },
    403: {
      headersMapper: Mappers.RemoteRenderingListConversionsExceptionHeaders,
      isError: true
    },
    429: {
      headersMapper: Mappers.RemoteRenderingListConversionsExceptionHeaders,
      isError: true
    },
    500: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.RemoteRenderingListConversionsExceptionHeaders,
      isError: true
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.accountId],
  headerParameters: [Parameters.accept],
  serializer
};
const createSessionOperationSpec: coreHttp.OperationSpec = {
  path: "/accounts/{account_id}/sessions/{session_id}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.RenderingSession
    },
    201: {
      bodyMapper: Mappers.RenderingSession,
      headersMapper: Mappers.RemoteRenderingCreateSessionHeaders
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.RemoteRenderingCreateSessionExceptionHeaders,
      isError: true
    },
    401: {
      headersMapper: Mappers.RemoteRenderingCreateSessionExceptionHeaders,
      isError: true
    },
    403: {
      headersMapper: Mappers.RemoteRenderingCreateSessionExceptionHeaders,
      isError: true
    },
    409: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    },
    429: {
      headersMapper: Mappers.RemoteRenderingCreateSessionExceptionHeaders,
      isError: true
    },
    500: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.RemoteRenderingCreateSessionExceptionHeaders,
      isError: true
    }
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.endpoint,
    Parameters.accountId,
    Parameters.sessionId
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const getSessionOperationSpec: coreHttp.OperationSpec = {
  path: "/accounts/{account_id}/sessions/{session_id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RenderingSession
    },
    401: {
      headersMapper: Mappers.RemoteRenderingGetSessionExceptionHeaders,
      isError: true
    },
    403: {
      headersMapper: Mappers.RemoteRenderingGetSessionExceptionHeaders,
      isError: true
    },
    404: {
      headersMapper: Mappers.RemoteRenderingGetSessionExceptionHeaders,
      isError: true
    },
    429: {
      headersMapper: Mappers.RemoteRenderingGetSessionExceptionHeaders,
      isError: true
    },
    500: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.RemoteRenderingGetSessionExceptionHeaders,
      isError: true
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.endpoint,
    Parameters.accountId,
    Parameters.sessionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateSessionOperationSpec: coreHttp.OperationSpec = {
  path: "/accounts/{account_id}/sessions/{session_id}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.RenderingSession
    },
    401: {
      headersMapper: Mappers.RemoteRenderingUpdateSessionExceptionHeaders,
      isError: true
    },
    403: {
      headersMapper: Mappers.RemoteRenderingUpdateSessionExceptionHeaders,
      isError: true
    },
    404: {
      headersMapper: Mappers.RemoteRenderingUpdateSessionExceptionHeaders,
      isError: true
    },
    422: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.RemoteRenderingUpdateSessionExceptionHeaders,
      isError: true
    },
    429: {
      headersMapper: Mappers.RemoteRenderingUpdateSessionExceptionHeaders,
      isError: true
    },
    500: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.RemoteRenderingUpdateSessionExceptionHeaders,
      isError: true
    }
  },
  requestBody: Parameters.body2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.endpoint,
    Parameters.accountId,
    Parameters.sessionId
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const stopSessionOperationSpec: coreHttp.OperationSpec = {
  path: "/accounts/{account_id}/sessions/{session_id}/:stop",
  httpMethod: "POST",
  responses: {
    204: {
      headersMapper: Mappers.RemoteRenderingStopSessionHeaders
    },
    401: {
      headersMapper: Mappers.RemoteRenderingStopSessionExceptionHeaders,
      isError: true
    },
    403: {
      headersMapper: Mappers.RemoteRenderingStopSessionExceptionHeaders,
      isError: true
    },
    404: {
      headersMapper: Mappers.RemoteRenderingStopSessionExceptionHeaders,
      isError: true
    },
    429: {
      headersMapper: Mappers.RemoteRenderingStopSessionExceptionHeaders,
      isError: true
    },
    500: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.RemoteRenderingStopSessionExceptionHeaders,
      isError: true
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.endpoint,
    Parameters.accountId,
    Parameters.sessionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listSessionsOperationSpec: coreHttp.OperationSpec = {
  path: "/accounts/{account_id}/sessions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SessionsList
    },
    401: {
      headersMapper: Mappers.RemoteRenderingListSessionsExceptionHeaders,
      isError: true
    },
    403: {
      headersMapper: Mappers.RemoteRenderingListSessionsExceptionHeaders,
      isError: true
    },
    429: {
      headersMapper: Mappers.RemoteRenderingListSessionsExceptionHeaders,
      isError: true
    },
    500: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.RemoteRenderingListSessionsExceptionHeaders,
      isError: true
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.accountId],
  headerParameters: [Parameters.accept],
  serializer
};
const listConversionsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConversionList,
      headersMapper: Mappers.RemoteRenderingListConversionsNextHeaders
    },
    401: {
      headersMapper: Mappers.RemoteRenderingListConversionsNextExceptionHeaders,
      isError: true
    },
    403: {
      headersMapper: Mappers.RemoteRenderingListConversionsNextExceptionHeaders,
      isError: true
    },
    429: {
      headersMapper: Mappers.RemoteRenderingListConversionsNextExceptionHeaders,
      isError: true
    },
    500: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.RemoteRenderingListConversionsNextExceptionHeaders,
      isError: true
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.endpoint,
    Parameters.accountId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listSessionsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SessionsList
    },
    401: {
      headersMapper: Mappers.RemoteRenderingListSessionsNextExceptionHeaders,
      isError: true
    },
    403: {
      headersMapper: Mappers.RemoteRenderingListSessionsNextExceptionHeaders,
      isError: true
    },
    429: {
      headersMapper: Mappers.RemoteRenderingListSessionsNextExceptionHeaders,
      isError: true
    },
    500: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.RemoteRenderingListSessionsNextExceptionHeaders,
      isError: true
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.endpoint,
    Parameters.accountId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
