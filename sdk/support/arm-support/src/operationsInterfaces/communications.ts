/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  CommunicationDetails,
  CommunicationsListOptionalParams,
  CheckNameAvailabilityInput,
  CommunicationsCheckNameAvailabilityOptionalParams,
  CommunicationsCheckNameAvailabilityResponse,
  CommunicationsGetOptionalParams,
  CommunicationsGetResponse,
  CommunicationsCreateOptionalParams,
  CommunicationsCreateResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Communications. */
export interface Communications {
  /**
   * Lists all communications (attachments not included) for a support ticket. <br/></br> You can also
   * filter support ticket communications by _CreatedDate_ or _CommunicationType_ using the $filter
   * parameter. The only type of communication supported today is _Web_. Output will be a paged result
   * with _nextLink_, using which you can retrieve the next set of Communication results.
   * <br/><br/>Support ticket data is available for 18 months after ticket creation. If a ticket was
   * created more than 18 months ago, a request for data might cause an error.
   * @param supportTicketName Support ticket name.
   * @param options The options parameters.
   */
  list(
    supportTicketName: string,
    options?: CommunicationsListOptionalParams
  ): PagedAsyncIterableIterator<CommunicationDetails>;
  /**
   * Check the availability of a resource name. This API should be used to check the uniqueness of the
   * name for adding a new communication to the support ticket.
   * @param supportTicketName Support ticket name.
   * @param checkNameAvailabilityInput Input to check.
   * @param options The options parameters.
   */
  checkNameAvailability(
    supportTicketName: string,
    checkNameAvailabilityInput: CheckNameAvailabilityInput,
    options?: CommunicationsCheckNameAvailabilityOptionalParams
  ): Promise<CommunicationsCheckNameAvailabilityResponse>;
  /**
   * Returns communication details for a support ticket.
   * @param supportTicketName Support ticket name.
   * @param communicationName Communication name.
   * @param options The options parameters.
   */
  get(
    supportTicketName: string,
    communicationName: string,
    options?: CommunicationsGetOptionalParams
  ): Promise<CommunicationsGetResponse>;
  /**
   * Adds a new customer communication to an Azure support ticket.
   * @param supportTicketName Support ticket name.
   * @param communicationName Communication name.
   * @param createCommunicationParameters Communication object.
   * @param options The options parameters.
   */
  beginCreate(
    supportTicketName: string,
    communicationName: string,
    createCommunicationParameters: CommunicationDetails,
    options?: CommunicationsCreateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<CommunicationsCreateResponse>,
      CommunicationsCreateResponse
    >
  >;
  /**
   * Adds a new customer communication to an Azure support ticket.
   * @param supportTicketName Support ticket name.
   * @param communicationName Communication name.
   * @param createCommunicationParameters Communication object.
   * @param options The options parameters.
   */
  beginCreateAndWait(
    supportTicketName: string,
    communicationName: string,
    createCommunicationParameters: CommunicationDetails,
    options?: CommunicationsCreateOptionalParams
  ): Promise<CommunicationsCreateResponse>;
}
