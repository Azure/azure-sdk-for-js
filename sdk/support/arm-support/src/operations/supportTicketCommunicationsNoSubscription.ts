/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { SupportTicketCommunicationsNoSubscription } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftSupport } from "../microsoftSupport";
import {
  CommunicationDetails,
  SupportTicketCommunicationsNoSubscriptionListNextOptionalParams,
  SupportTicketCommunicationsNoSubscriptionListOptionalParams,
  SupportTicketCommunicationsNoSubscriptionListResponse,
  SupportTicketCommunicationsNoSubscriptionListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing SupportTicketCommunicationsNoSubscription operations. */
export class SupportTicketCommunicationsNoSubscriptionImpl
  implements SupportTicketCommunicationsNoSubscription {
  private readonly client: MicrosoftSupport;

  /**
   * Initialize a new instance of the class SupportTicketCommunicationsNoSubscription class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftSupport) {
    this.client = client;
  }

  /**
   * Lists all communications (attachments not included) for a support ticket. <br/></br> You can also
   * filter support ticket communications by _CreatedDate_ or _CommunicationType_ using the $filter
   * parameter. The only type of communication supported today is _Web_. Output will be a paged result
   * with _nextLink_, using which you can retrieve the next set of Communication results.
   * <br/><br/>Support ticket data is available for 18 months after ticket creation. If a ticket was
   * created more than 18 months ago, a request for data might cause an error.
   * @param supportTicketName Support ticket name
   * @param options The options parameters.
   */
  public list(
    supportTicketName: string,
    options?: SupportTicketCommunicationsNoSubscriptionListOptionalParams
  ): PagedAsyncIterableIterator<CommunicationDetails> {
    const iter = this.listPagingAll(supportTicketName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(supportTicketName, options, settings);
      }
    };
  }

  private async *listPagingPage(
    supportTicketName: string,
    options?: SupportTicketCommunicationsNoSubscriptionListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<CommunicationDetails[]> {
    let result: SupportTicketCommunicationsNoSubscriptionListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(supportTicketName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        supportTicketName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    supportTicketName: string,
    options?: SupportTicketCommunicationsNoSubscriptionListOptionalParams
  ): AsyncIterableIterator<CommunicationDetails> {
    for await (const page of this.listPagingPage(supportTicketName, options)) {
      yield* page;
    }
  }

  /**
   * Lists all communications (attachments not included) for a support ticket. <br/></br> You can also
   * filter support ticket communications by _CreatedDate_ or _CommunicationType_ using the $filter
   * parameter. The only type of communication supported today is _Web_. Output will be a paged result
   * with _nextLink_, using which you can retrieve the next set of Communication results.
   * <br/><br/>Support ticket data is available for 18 months after ticket creation. If a ticket was
   * created more than 18 months ago, a request for data might cause an error.
   * @param supportTicketName Support ticket name
   * @param options The options parameters.
   */
  private _list(
    supportTicketName: string,
    options?: SupportTicketCommunicationsNoSubscriptionListOptionalParams
  ): Promise<SupportTicketCommunicationsNoSubscriptionListResponse> {
    return this.client.sendOperationRequest(
      { supportTicketName, options },
      listOperationSpec
    );
  }

  /**
   * ListNext
   * @param supportTicketName Support ticket name
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    supportTicketName: string,
    nextLink: string,
    options?: SupportTicketCommunicationsNoSubscriptionListNextOptionalParams
  ): Promise<SupportTicketCommunicationsNoSubscriptionListNextResponse> {
    return this.client.sendOperationRequest(
      { supportTicketName, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Support/supportTickets/{supportTicketName}/communications",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CommunicationsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top, Parameters.filter],
  urlParameters: [Parameters.$host, Parameters.supportTicketName],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CommunicationsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.supportTicketName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
