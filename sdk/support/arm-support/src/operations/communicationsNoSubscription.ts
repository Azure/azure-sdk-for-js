/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CommunicationsNoSubscription } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftSupport } from "../microsoftSupport";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  CheckNameAvailabilityInput,
  CommunicationsNoSubscriptionCheckNameAvailabilityOptionalParams,
  CommunicationsNoSubscriptionCheckNameAvailabilityResponse,
  CommunicationsNoSubscriptionGetOptionalParams,
  CommunicationsNoSubscriptionGetResponse,
  CommunicationDetails,
  CommunicationsNoSubscriptionCreateOptionalParams,
  CommunicationsNoSubscriptionCreateResponse
} from "../models";

/** Class containing CommunicationsNoSubscription operations. */
export class CommunicationsNoSubscriptionImpl
  implements CommunicationsNoSubscription {
  private readonly client: MicrosoftSupport;

  /**
   * Initialize a new instance of the class CommunicationsNoSubscription class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftSupport) {
    this.client = client;
  }

  /**
   * Check the availability of a resource name. This API should be used to check the uniqueness of the
   * name for adding a new communication to the support ticket.
   * @param supportTicketName Support ticket name.
   * @param checkNameAvailabilityInput Input to check.
   * @param options The options parameters.
   */
  checkNameAvailability(
    supportTicketName: string,
    checkNameAvailabilityInput: CheckNameAvailabilityInput,
    options?: CommunicationsNoSubscriptionCheckNameAvailabilityOptionalParams
  ): Promise<CommunicationsNoSubscriptionCheckNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      { supportTicketName, checkNameAvailabilityInput, options },
      checkNameAvailabilityOperationSpec
    );
  }

  /**
   * Returns communication details for a support ticket.
   * @param supportTicketName Support ticket name.
   * @param communicationName Communication name.
   * @param options The options parameters.
   */
  get(
    supportTicketName: string,
    communicationName: string,
    options?: CommunicationsNoSubscriptionGetOptionalParams
  ): Promise<CommunicationsNoSubscriptionGetResponse> {
    return this.client.sendOperationRequest(
      { supportTicketName, communicationName, options },
      getOperationSpec
    );
  }

  /**
   * Adds a new customer communication to an Azure support ticket.
   * @param supportTicketName Support ticket name.
   * @param communicationName Communication name.
   * @param createCommunicationParameters Communication object.
   * @param options The options parameters.
   */
  async beginCreate(
    supportTicketName: string,
    communicationName: string,
    createCommunicationParameters: CommunicationDetails,
    options?: CommunicationsNoSubscriptionCreateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<CommunicationsNoSubscriptionCreateResponse>,
      CommunicationsNoSubscriptionCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<CommunicationsNoSubscriptionCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        supportTicketName,
        communicationName,
        createCommunicationParameters,
        options
      },
      spec: createOperationSpec
    });
    const poller = await createHttpPoller<
      CommunicationsNoSubscriptionCreateResponse,
      OperationState<CommunicationsNoSubscriptionCreateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Adds a new customer communication to an Azure support ticket.
   * @param supportTicketName Support ticket name.
   * @param communicationName Communication name.
   * @param createCommunicationParameters Communication object.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    supportTicketName: string,
    communicationName: string,
    createCommunicationParameters: CommunicationDetails,
    options?: CommunicationsNoSubscriptionCreateOptionalParams
  ): Promise<CommunicationsNoSubscriptionCreateResponse> {
    const poller = await this.beginCreate(
      supportTicketName,
      communicationName,
      createCommunicationParameters,
      options
    );
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const checkNameAvailabilityOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Support/supportTickets/{supportTicketName}/checkNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameAvailabilityOutput
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.checkNameAvailabilityInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.supportTicketName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Support/supportTickets/{supportTicketName}/communications/{communicationName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CommunicationDetails
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.supportTicketName,
    Parameters.communicationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Support/supportTickets/{supportTicketName}/communications/{communicationName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.CommunicationDetails
    },
    201: {
      bodyMapper: Mappers.CommunicationDetails
    },
    202: {
      bodyMapper: Mappers.CommunicationDetails
    },
    204: {
      bodyMapper: Mappers.CommunicationDetails
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.createCommunicationParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.supportTicketName,
    Parameters.communicationName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
