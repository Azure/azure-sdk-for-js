/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/supportTicketsMappers";
import * as Parameters from "../models/parameters";
import { MicrosoftSupportContext } from "../microsoftSupportContext";

/** Class representing a SupportTickets. */
export class SupportTickets {
  private readonly client: MicrosoftSupportContext;

  /**
   * Create a SupportTickets.
   * @param {MicrosoftSupportContext} client Reference to the service client.
   */
  constructor(client: MicrosoftSupportContext) {
    this.client = client;
  }

  /**
   * Check the availability of a resource name. This API should be used to check the uniqueness of
   * the name for support ticket creation for the selected subscription.
   * @param checkNameAvailabilityInput Input to check.
   * @param [options] The optional parameters
   * @returns Promise<Models.SupportTicketsCheckNameAvailabilityResponse>
   */
  checkNameAvailability(checkNameAvailabilityInput: Models.CheckNameAvailabilityInput, options?: msRest.RequestOptionsBase): Promise<Models.SupportTicketsCheckNameAvailabilityResponse>;
  /**
   * @param checkNameAvailabilityInput Input to check.
   * @param callback The callback
   */
  checkNameAvailability(checkNameAvailabilityInput: Models.CheckNameAvailabilityInput, callback: msRest.ServiceCallback<Models.CheckNameAvailabilityOutput>): void;
  /**
   * @param checkNameAvailabilityInput Input to check.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkNameAvailability(checkNameAvailabilityInput: Models.CheckNameAvailabilityInput, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CheckNameAvailabilityOutput>): void;
  checkNameAvailability(checkNameAvailabilityInput: Models.CheckNameAvailabilityInput, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CheckNameAvailabilityOutput>, callback?: msRest.ServiceCallback<Models.CheckNameAvailabilityOutput>): Promise<Models.SupportTicketsCheckNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      {
        checkNameAvailabilityInput,
        options
      },
      checkNameAvailabilityOperationSpec,
      callback) as Promise<Models.SupportTicketsCheckNameAvailabilityResponse>;
  }

  /**
   * Lists all the support tickets for an Azure subscription. You can also filter the support tickets
   * by _Status_ or _CreatedDate_ using the $filter parameter. Output will be a paged result with
   * _nextLink_, using which you can retrieve the next set of support tickets. <br/><br/>Support
   * ticket data is available for 12 months after ticket creation. If a ticket was created more than
   * 12 months ago, a request for data might cause an error.
   * @param [options] The optional parameters
   * @returns Promise<Models.SupportTicketsListResponse>
   */
  list(options?: Models.SupportTicketsListOptionalParams): Promise<Models.SupportTicketsListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.SupportTicketsListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: Models.SupportTicketsListOptionalParams, callback: msRest.ServiceCallback<Models.SupportTicketsListResult>): void;
  list(options?: Models.SupportTicketsListOptionalParams | msRest.ServiceCallback<Models.SupportTicketsListResult>, callback?: msRest.ServiceCallback<Models.SupportTicketsListResult>): Promise<Models.SupportTicketsListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.SupportTicketsListResponse>;
  }

  /**
   * Get ticket details for an Azure subscription. Support ticket data is available for 12 months
   * after ticket creation. If a ticket was created more than 12 months ago, a request for data might
   * cause an error.
   * @param supportTicketName Support ticket name.
   * @param [options] The optional parameters
   * @returns Promise<Models.SupportTicketsGetResponse>
   */
  get(supportTicketName: string, options?: msRest.RequestOptionsBase): Promise<Models.SupportTicketsGetResponse>;
  /**
   * @param supportTicketName Support ticket name.
   * @param callback The callback
   */
  get(supportTicketName: string, callback: msRest.ServiceCallback<Models.SupportTicketDetails>): void;
  /**
   * @param supportTicketName Support ticket name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(supportTicketName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SupportTicketDetails>): void;
  get(supportTicketName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SupportTicketDetails>, callback?: msRest.ServiceCallback<Models.SupportTicketDetails>): Promise<Models.SupportTicketsGetResponse> {
    return this.client.sendOperationRequest(
      {
        supportTicketName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.SupportTicketsGetResponse>;
  }

  /**
   * This API allows you to update the severity level, ticket status, and your contact information in
   * the support ticket.<br/><br/>Note: The severity levels cannot be changed if a support ticket is
   * actively being worked upon by an Azure support engineer. In such a case, contact your support
   * engineer to request severity update by adding a new communication using the Communications
   * API.<br/><br/>Changing the ticket status to _closed_ is allowed only on an unassigned case. When
   * an engineer is actively working on the ticket, send your ticket closure request by sending a
   * note to your engineer.
   * @param supportTicketName Support ticket name.
   * @param updateSupportTicket UpdateSupportTicket object.
   * @param [options] The optional parameters
   * @returns Promise<Models.SupportTicketsUpdateResponse>
   */
  update(supportTicketName: string, updateSupportTicket: Models.UpdateSupportTicket, options?: msRest.RequestOptionsBase): Promise<Models.SupportTicketsUpdateResponse>;
  /**
   * @param supportTicketName Support ticket name.
   * @param updateSupportTicket UpdateSupportTicket object.
   * @param callback The callback
   */
  update(supportTicketName: string, updateSupportTicket: Models.UpdateSupportTicket, callback: msRest.ServiceCallback<Models.SupportTicketDetails>): void;
  /**
   * @param supportTicketName Support ticket name.
   * @param updateSupportTicket UpdateSupportTicket object.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(supportTicketName: string, updateSupportTicket: Models.UpdateSupportTicket, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SupportTicketDetails>): void;
  update(supportTicketName: string, updateSupportTicket: Models.UpdateSupportTicket, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SupportTicketDetails>, callback?: msRest.ServiceCallback<Models.SupportTicketDetails>): Promise<Models.SupportTicketsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        supportTicketName,
        updateSupportTicket,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.SupportTicketsUpdateResponse>;
  }

  /**
   * Creates a new support ticket for Subscription and Service limits (Quota), Technical, Billing,
   * and Subscription Management issues for the specified subscription. Learn the
   * [prerequisites](https://aka.ms/supportAPI) required to create a support ticket.<br/><br/>Always
   * call the Services and ProblemClassifications API to get the most recent set of services and
   * problem categories required for support ticket creation.<br/><br/>Adding attachments is not
   * currently supported via the API. To add a file to an existing support ticket, visit the [Manage
   * support
   * ticket](https://portal.azure.com/#blade/Microsoft_Azure_Support/HelpAndSupportBlade/managesupportrequest)
   * page in the Azure portal, select the support ticket, and use the file upload control to add a
   * new file.<br/><br/>Providing consent to share diagnostic information with Azure support is
   * currently not supported via the API. The Azure support engineer working on your ticket will
   * reach out to you for consent if your issue requires gathering diagnostic information from your
   * Azure resources.<br/><br/>**Creating a support ticket for on-behalf-of**: Include
   * _x-ms-authorization-auxiliary_ header to provide an auxiliary token as per
   * [documentation](https://docs.microsoft.com/azure/azure-resource-manager/management/authenticate-multi-tenant).
   * The primary token will be from the tenant for whom a support ticket is being raised against the
   * subscription, i.e. Cloud solution provider (CSP) customer tenant. The auxiliary token will be
   * from the Cloud solution provider (CSP) partner tenant.
   * @param supportTicketName Support ticket name.
   * @param createSupportTicketParameters Support ticket request payload.
   * @param [options] The optional parameters
   * @returns Promise<Models.SupportTicketsCreateResponse>
   */
  create(supportTicketName: string, createSupportTicketParameters: Models.SupportTicketDetails, options?: msRest.RequestOptionsBase): Promise<Models.SupportTicketsCreateResponse> {
    return this.beginCreate(supportTicketName,createSupportTicketParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.SupportTicketsCreateResponse>;
  }

  /**
   * Creates a new support ticket for Subscription and Service limits (Quota), Technical, Billing,
   * and Subscription Management issues for the specified subscription. Learn the
   * [prerequisites](https://aka.ms/supportAPI) required to create a support ticket.<br/><br/>Always
   * call the Services and ProblemClassifications API to get the most recent set of services and
   * problem categories required for support ticket creation.<br/><br/>Adding attachments is not
   * currently supported via the API. To add a file to an existing support ticket, visit the [Manage
   * support
   * ticket](https://portal.azure.com/#blade/Microsoft_Azure_Support/HelpAndSupportBlade/managesupportrequest)
   * page in the Azure portal, select the support ticket, and use the file upload control to add a
   * new file.<br/><br/>Providing consent to share diagnostic information with Azure support is
   * currently not supported via the API. The Azure support engineer working on your ticket will
   * reach out to you for consent if your issue requires gathering diagnostic information from your
   * Azure resources.<br/><br/>**Creating a support ticket for on-behalf-of**: Include
   * _x-ms-authorization-auxiliary_ header to provide an auxiliary token as per
   * [documentation](https://docs.microsoft.com/azure/azure-resource-manager/management/authenticate-multi-tenant).
   * The primary token will be from the tenant for whom a support ticket is being raised against the
   * subscription, i.e. Cloud solution provider (CSP) customer tenant. The auxiliary token will be
   * from the Cloud solution provider (CSP) partner tenant.
   * @param supportTicketName Support ticket name.
   * @param createSupportTicketParameters Support ticket request payload.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreate(supportTicketName: string, createSupportTicketParameters: Models.SupportTicketDetails, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        supportTicketName,
        createSupportTicketParameters,
        options
      },
      beginCreateOperationSpec,
      options);
  }

  /**
   * Lists all the support tickets for an Azure subscription. You can also filter the support tickets
   * by _Status_ or _CreatedDate_ using the $filter parameter. Output will be a paged result with
   * _nextLink_, using which you can retrieve the next set of support tickets. <br/><br/>Support
   * ticket data is available for 12 months after ticket creation. If a ticket was created more than
   * 12 months ago, a request for data might cause an error.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SupportTicketsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SupportTicketsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SupportTicketsListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SupportTicketsListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SupportTicketsListResult>, callback?: msRest.ServiceCallback<Models.SupportTicketsListResult>): Promise<Models.SupportTicketsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.SupportTicketsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const checkNameAvailabilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Support/checkNameAvailability",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "checkNameAvailabilityInput",
    mapper: {
      ...Mappers.CheckNameAvailabilityInput,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameAvailabilityOutput
    },
    default: {
      bodyMapper: Mappers.ExceptionResponse
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.filter,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SupportTicketsListResult
    },
    default: {
      bodyMapper: Mappers.ExceptionResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}",
  urlParameters: [
    Parameters.supportTicketName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SupportTicketDetails
    },
    default: {
      bodyMapper: Mappers.ExceptionResponse
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}",
  urlParameters: [
    Parameters.supportTicketName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "updateSupportTicket",
    mapper: {
      ...Mappers.UpdateSupportTicket,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SupportTicketDetails
    },
    default: {
      bodyMapper: Mappers.ExceptionResponse
    }
  },
  serializer
};

const beginCreateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}",
  urlParameters: [
    Parameters.supportTicketName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "createSupportTicketParameters",
    mapper: {
      ...Mappers.SupportTicketDetails,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SupportTicketDetails
    },
    202: {},
    default: {
      bodyMapper: Mappers.ExceptionResponse
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SupportTicketsListResult
    },
    default: {
      bodyMapper: Mappers.ExceptionResponse
    }
  },
  serializer
};
