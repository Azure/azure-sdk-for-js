/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { ProblemClassifications } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftSupport } from "../microsoftSupport";
import {
  ProblemClassification,
  ProblemClassificationsListOptionalParams,
  ProblemClassificationsListResponse,
  ProblemClassificationsGetOptionalParams,
  ProblemClassificationsGetResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ProblemClassifications operations. */
export class ProblemClassificationsImpl implements ProblemClassifications {
  private readonly client: MicrosoftSupport;

  /**
   * Initialize a new instance of the class ProblemClassifications class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftSupport) {
    this.client = client;
  }

  /**
   * Lists all the problem classifications (categories) available for a specific Azure service. Always
   * use the service and problem classifications obtained programmatically. This practice ensures that
   * you always have the most recent set of service and problem classification Ids.
   * @param serviceName Name of the Azure service for which the problem classifications need to be
   *                    retrieved.
   * @param options The options parameters.
   */
  public list(
    serviceName: string,
    options?: ProblemClassificationsListOptionalParams
  ): PagedAsyncIterableIterator<ProblemClassification> {
    const iter = this.listPagingAll(serviceName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(serviceName, options, settings);
      }
    };
  }

  private async *listPagingPage(
    serviceName: string,
    options?: ProblemClassificationsListOptionalParams,
    _settings?: PageSettings
  ): AsyncIterableIterator<ProblemClassification[]> {
    let result: ProblemClassificationsListResponse;
    result = await this._list(serviceName, options);
    yield result.value || [];
  }

  private async *listPagingAll(
    serviceName: string,
    options?: ProblemClassificationsListOptionalParams
  ): AsyncIterableIterator<ProblemClassification> {
    for await (const page of this.listPagingPage(serviceName, options)) {
      yield* page;
    }
  }

  /**
   * Lists all the problem classifications (categories) available for a specific Azure service. Always
   * use the service and problem classifications obtained programmatically. This practice ensures that
   * you always have the most recent set of service and problem classification Ids.
   * @param serviceName Name of the Azure service for which the problem classifications need to be
   *                    retrieved.
   * @param options The options parameters.
   */
  private _list(
    serviceName: string,
    options?: ProblemClassificationsListOptionalParams
  ): Promise<ProblemClassificationsListResponse> {
    return this.client.sendOperationRequest(
      { serviceName, options },
      listOperationSpec
    );
  }

  /**
   * Get problem classification details for a specific Azure service.
   * @param serviceName Name of the Azure service available for support.
   * @param problemClassificationName Name of problem classification.
   * @param options The options parameters.
   */
  get(
    serviceName: string,
    problemClassificationName: string,
    options?: ProblemClassificationsGetOptionalParams
  ): Promise<ProblemClassificationsGetResponse> {
    return this.client.sendOperationRequest(
      { serviceName, problemClassificationName, options },
      getOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Support/services/{serviceName}/problemClassifications",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProblemClassificationsListResult
    },
    default: {
      bodyMapper: Mappers.ExceptionResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.serviceName],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Support/services/{serviceName}/problemClassifications/{problemClassificationName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProblemClassification
    },
    default: {
      bodyMapper: Mappers.ExceptionResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.serviceName,
    Parameters.problemClassificationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
