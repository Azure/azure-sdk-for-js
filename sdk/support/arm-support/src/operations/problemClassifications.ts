/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/problemClassificationsMappers";
import * as Parameters from "../models/parameters";
import { MicrosoftSupportContext } from "../microsoftSupportContext";

/** Class representing a ProblemClassifications. */
export class ProblemClassifications {
  private readonly client: MicrosoftSupportContext;

  /**
   * Create a ProblemClassifications.
   * @param {MicrosoftSupportContext} client Reference to the service client.
   */
  constructor(client: MicrosoftSupportContext) {
    this.client = client;
  }

  /**
   * Lists all the problem classifications (categories) available for a specific Azure service.
   * Always use the service and problem classifications obtained programmatically. This practice
   * ensures that you always have the most recent set of service and problem classification Ids.
   * @param serviceName Name of the Azure service for which the problem classifications need to be
   * retrieved.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProblemClassificationsListResponse>
   */
  list(serviceName: string, options?: msRest.RequestOptionsBase): Promise<Models.ProblemClassificationsListResponse>;
  /**
   * @param serviceName Name of the Azure service for which the problem classifications need to be
   * retrieved.
   * @param callback The callback
   */
  list(serviceName: string, callback: msRest.ServiceCallback<Models.ProblemClassificationsListResult>): void;
  /**
   * @param serviceName Name of the Azure service for which the problem classifications need to be
   * retrieved.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(serviceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProblemClassificationsListResult>): void;
  list(serviceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProblemClassificationsListResult>, callback?: msRest.ServiceCallback<Models.ProblemClassificationsListResult>): Promise<Models.ProblemClassificationsListResponse> {
    return this.client.sendOperationRequest(
      {
        serviceName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.ProblemClassificationsListResponse>;
  }

  /**
   * Get problem classification details for a specific Azure service.
   * @param serviceName Name of the Azure service available for support.
   * @param problemClassificationName Name of problem classification.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProblemClassificationsGetResponse>
   */
  get(serviceName: string, problemClassificationName: string, options?: msRest.RequestOptionsBase): Promise<Models.ProblemClassificationsGetResponse>;
  /**
   * @param serviceName Name of the Azure service available for support.
   * @param problemClassificationName Name of problem classification.
   * @param callback The callback
   */
  get(serviceName: string, problemClassificationName: string, callback: msRest.ServiceCallback<Models.ProblemClassification>): void;
  /**
   * @param serviceName Name of the Azure service available for support.
   * @param problemClassificationName Name of problem classification.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(serviceName: string, problemClassificationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProblemClassification>): void;
  get(serviceName: string, problemClassificationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProblemClassification>, callback?: msRest.ServiceCallback<Models.ProblemClassification>): Promise<Models.ProblemClassificationsGetResponse> {
    return this.client.sendOperationRequest(
      {
        serviceName,
        problemClassificationName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ProblemClassificationsGetResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Support/services/{serviceName}/problemClassifications",
  urlParameters: [
    Parameters.serviceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProblemClassificationsListResult
    },
    default: {
      bodyMapper: Mappers.ExceptionResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Support/services/{serviceName}/problemClassifications/{problemClassificationName}",
  urlParameters: [
    Parameters.serviceName,
    Parameters.problemClassificationName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProblemClassification
    },
    default: {
      bodyMapper: Mappers.ExceptionResponse
    }
  },
  serializer
};
