/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const ReportResourceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReportResourceList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReportResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReportProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReportProperties",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reportName: {
        serializedName: "reportName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      offerGuid: {
        serializedName: "offerGuid",
        type: {
          name: "String"
        }
      },
      timeZone: {
        serializedName: "timeZone",
        required: true,
        type: {
          name: "String"
        }
      },
      triggerTime: {
        serializedName: "triggerTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      nextTriggerTime: {
        serializedName: "nextTriggerTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastTriggerTime: {
        serializedName: "lastTriggerTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      subscriptions: {
        serializedName: "subscriptions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      resources: {
        serializedName: "resources",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceMetadata"
            }
          }
        }
      },
      complianceStatus: {
        serializedName: "complianceStatus",
        type: {
          name: "Composite",
          className: "ReportComplianceStatus"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceMetadata: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceMetadata",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      resourceType: {
        serializedName: "resourceType",
        type: {
          name: "String"
        }
      },
      resourceKind: {
        serializedName: "resourceKind",
        type: {
          name: "String"
        }
      },
      resourceName: {
        serializedName: "resourceName",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const ReportComplianceStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReportComplianceStatus",
    modelProperties: {
      m365: {
        serializedName: "m365",
        type: {
          name: "Composite",
          className: "OverviewStatus"
        }
      }
    }
  }
};

export const OverviewStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OverviewStatus",
    modelProperties: {
      passedCount: {
        serializedName: "passedCount",
        type: {
          name: "Number"
        }
      },
      failedCount: {
        serializedName: "failedCount",
        type: {
          name: "Number"
        }
      },
      manualCount: {
        serializedName: "manualCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ReportResourcePatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReportResourcePatch",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ReportProperties"
        }
      }
    }
  }
};

export const SnapshotResourceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SnapshotResourceList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SnapshotResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SnapshotProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SnapshotProperties",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      snapshotName: {
        serializedName: "snapshotName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reportProperties: {
        serializedName: "reportProperties",
        type: {
          name: "Composite",
          className: "ReportProperties"
        }
      },
      reportSystemData: {
        serializedName: "reportSystemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      complianceResults: {
        serializedName: "complianceResults",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ComplianceResult"
            }
          }
        }
      }
    }
  }
};

export const ComplianceResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComplianceResult",
    modelProperties: {
      complianceName: {
        serializedName: "complianceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      categories: {
        serializedName: "categories",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Category"
            }
          }
        }
      }
    }
  }
};

export const Category: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Category",
    modelProperties: {
      categoryName: {
        serializedName: "categoryName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      categoryType: {
        serializedName: "categoryType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      categoryStatus: {
        serializedName: "categoryStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      controlFamilies: {
        serializedName: "controlFamilies",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ControlFamily"
            }
          }
        }
      }
    }
  }
};

export const ControlFamily: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ControlFamily",
    modelProperties: {
      familyName: {
        serializedName: "familyName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      familyType: {
        serializedName: "familyType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      familyStatus: {
        serializedName: "familyStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      controls: {
        serializedName: "controls",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Control"
            }
          }
        }
      }
    }
  }
};

export const Control: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Control",
    modelProperties: {
      controlId: {
        serializedName: "controlId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      controlShortName: {
        serializedName: "controlShortName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      controlFullName: {
        serializedName: "controlFullName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      controlType: {
        serializedName: "controlType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      controlDescription: {
        serializedName: "controlDescription",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      controlDescriptionHyperLink: {
        serializedName: "controlDescriptionHyperLink",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      controlStatus: {
        serializedName: "controlStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      assessments: {
        serializedName: "assessments",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Assessment"
            }
          }
        }
      }
    }
  }
};

export const Assessment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Assessment",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      severity: {
        serializedName: "severity",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      remediation: {
        serializedName: "remediation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isPass: {
        serializedName: "isPass",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      policyId: {
        serializedName: "policyId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceList: {
        serializedName: "resourceList",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AssessmentResource"
            }
          }
        }
      }
    }
  }
};

export const AssessmentResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AssessmentResource",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceStatus: {
        serializedName: "resourceStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reason: {
        serializedName: "reason",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      statusChangeDate: {
        serializedName: "statusChangeDate",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SnapshotDownloadRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SnapshotDownloadRequest",
    modelProperties: {
      reportCreatorTenantId: {
        serializedName: "reportCreatorTenantId",
        type: {
          name: "String"
        }
      },
      downloadType: {
        serializedName: "downloadType",
        required: true,
        type: {
          name: "String"
        }
      },
      offerGuid: {
        constraints: {
          MinLength: 1
        },
        serializedName: "offerGuid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DownloadResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DownloadResponse",
    modelProperties: {
      resourceList: {
        serializedName: "resourceList",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceItem"
            }
          }
        }
      },
      complianceReport: {
        serializedName: "complianceReport",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ComplianceReportItem"
            }
          }
        }
      },
      compliancePdfReport: {
        serializedName: "compliancePdfReport",
        type: {
          name: "Composite",
          className: "DownloadResponseCompliancePdfReport"
        }
      },
      complianceDetailedPdfReport: {
        serializedName: "complianceDetailedPdfReport",
        type: {
          name: "Composite",
          className: "DownloadResponseComplianceDetailedPdfReport"
        }
      }
    }
  }
};

export const ResourceItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceItem",
    modelProperties: {
      subscriptionId: {
        serializedName: "subscriptionId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        serializedName: "resourceGroup",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceType: {
        serializedName: "resourceType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComplianceReportItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComplianceReportItem",
    modelProperties: {
      categoryName: {
        serializedName: "categoryName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      controlId: {
        serializedName: "controlId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      controlName: {
        serializedName: "controlName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      controlType: {
        serializedName: "controlType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      complianceState: {
        serializedName: "complianceState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      policyId: {
        serializedName: "policyId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      policyDisplayName: {
        serializedName: "policyDisplayName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      policyDescription: {
        serializedName: "policyDescription",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        serializedName: "subscriptionId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        serializedName: "resourceGroup",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceType: {
        serializedName: "resourceType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      statusChangeDate: {
        serializedName: "statusChangeDate",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DownloadResponseCompliancePdfReport: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DownloadResponseCompliancePdfReport",
    modelProperties: {
      sasUri: {
        serializedName: "sasUri",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DownloadResponseComplianceDetailedPdfReport: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DownloadResponseComplianceDetailedPdfReport",
    modelProperties: {
      sasUri: {
        serializedName: "sasUri",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const ReportResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReportResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ReportProperties"
        }
      }
    }
  }
};

export const SnapshotResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SnapshotResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SnapshotProperties"
        }
      }
    }
  }
};
