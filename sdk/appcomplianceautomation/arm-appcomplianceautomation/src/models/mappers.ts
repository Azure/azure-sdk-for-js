/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const CheckNameAvailabilityRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CheckNameAvailabilityResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityResponse",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        type: {
          name: "Boolean",
        },
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
    },
  },
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo",
            },
          },
        },
      },
    },
  },
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const GetCollectionCountRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GetCollectionCountRequest",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const GetCollectionCountResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GetCollectionCountResponse",
    modelProperties: {
      count: {
        serializedName: "count",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const GetOverviewStatusRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GetOverviewStatusRequest",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const GetOverviewStatusResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GetOverviewStatusResponse",
    modelProperties: {
      statusList: {
        serializedName: "statusList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StatusItem",
            },
          },
        },
      },
    },
  },
};

export const StatusItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StatusItem",
    modelProperties: {
      statusName: {
        serializedName: "statusName",
        type: {
          name: "String",
        },
      },
      statusValue: {
        serializedName: "statusValue",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ListInUseStorageAccountsRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListInUseStorageAccountsRequest",
    modelProperties: {
      subscriptionIds: {
        serializedName: "subscriptionIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const ListInUseStorageAccountsResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListInUseStorageAccountsResponse",
    modelProperties: {
      storageAccountList: {
        serializedName: "storageAccountList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageInfo",
            },
          },
        },
      },
    },
  },
};

export const StorageInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageInfo",
    modelProperties: {
      subscriptionId: {
        serializedName: "subscriptionId",
        type: {
          name: "String",
        },
      },
      resourceGroup: {
        serializedName: "resourceGroup",
        type: {
          name: "String",
        },
      },
      accountName: {
        serializedName: "accountName",
        type: {
          name: "String",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OnboardRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OnboardRequest",
    modelProperties: {
      subscriptionIds: {
        serializedName: "subscriptionIds",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const OnboardResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OnboardResponse",
    modelProperties: {
      subscriptionIds: {
        serializedName: "subscriptionIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay",
        },
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ReportResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReportResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReportResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ReportProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReportProperties",
    modelProperties: {
      triggerTime: {
        serializedName: "triggerTime",
        required: true,
        type: {
          name: "DateTime",
        },
      },
      timeZone: {
        serializedName: "timeZone",
        required: true,
        type: {
          name: "String",
        },
      },
      resources: {
        serializedName: "resources",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceMetadata",
            },
          },
        },
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      errors: {
        serializedName: "errors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      offerGuid: {
        serializedName: "offerGuid",
        type: {
          name: "String",
        },
      },
      nextTriggerTime: {
        serializedName: "nextTriggerTime",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      lastTriggerTime: {
        serializedName: "lastTriggerTime",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      subscriptions: {
        serializedName: "subscriptions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      complianceStatus: {
        serializedName: "complianceStatus",
        type: {
          name: "Composite",
          className: "ReportComplianceStatus",
        },
      },
      storageInfo: {
        serializedName: "storageInfo",
        type: {
          name: "Composite",
          className: "StorageInfo",
        },
      },
      certRecords: {
        serializedName: "certRecords",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CertSyncRecord",
            },
          },
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ResourceMetadata: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceMetadata",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        required: true,
        type: {
          name: "String",
        },
      },
      resourceType: {
        serializedName: "resourceType",
        type: {
          name: "String",
        },
      },
      resourceKind: {
        serializedName: "resourceKind",
        type: {
          name: "String",
        },
      },
      resourceOrigin: {
        serializedName: "resourceOrigin",
        type: {
          name: "String",
        },
      },
      accountId: {
        serializedName: "accountId",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ReportComplianceStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReportComplianceStatus",
    modelProperties: {
      m365: {
        serializedName: "m365",
        type: {
          name: "Composite",
          className: "OverviewStatus",
        },
      },
    },
  },
};

export const OverviewStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OverviewStatus",
    modelProperties: {
      passedCount: {
        serializedName: "passedCount",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      failedCount: {
        serializedName: "failedCount",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      manualCount: {
        serializedName: "manualCount",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      notApplicableCount: {
        serializedName: "notApplicableCount",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      pendingCount: {
        serializedName: "pendingCount",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const CertSyncRecord: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CertSyncRecord",
    modelProperties: {
      offerGuid: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "offerGuid",
        type: {
          name: "String",
        },
      },
      certificationStatus: {
        serializedName: "certificationStatus",
        type: {
          name: "String",
        },
      },
      ingestionStatus: {
        serializedName: "ingestionStatus",
        type: {
          name: "String",
        },
      },
      controls: {
        serializedName: "controls",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ControlSyncRecord",
            },
          },
        },
      },
    },
  },
};

export const ControlSyncRecord: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ControlSyncRecord",
    modelProperties: {
      controlId: {
        serializedName: "controlId",
        type: {
          name: "String",
        },
      },
      controlStatus: {
        serializedName: "controlStatus",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
    },
  },
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String",
        },
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String",
        },
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime",
        },
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String",
        },
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String",
        },
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const ReportResourcePatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReportResourcePatch",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ReportPatchProperties",
        },
      },
    },
  },
};

export const ReportPatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReportPatchProperties",
    modelProperties: {
      triggerTime: {
        serializedName: "triggerTime",
        type: {
          name: "DateTime",
        },
      },
      timeZone: {
        serializedName: "timeZone",
        type: {
          name: "String",
        },
      },
      resources: {
        serializedName: "resources",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceMetadata",
            },
          },
        },
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      errors: {
        serializedName: "errors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      offerGuid: {
        serializedName: "offerGuid",
        type: {
          name: "String",
        },
      },
      nextTriggerTime: {
        serializedName: "nextTriggerTime",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      lastTriggerTime: {
        serializedName: "lastTriggerTime",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      subscriptions: {
        serializedName: "subscriptions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      complianceStatus: {
        serializedName: "complianceStatus",
        type: {
          name: "Composite",
          className: "ReportComplianceStatus",
        },
      },
      storageInfo: {
        serializedName: "storageInfo",
        type: {
          name: "Composite",
          className: "StorageInfo",
        },
      },
      certRecords: {
        serializedName: "certRecords",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CertSyncRecord",
            },
          },
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const EvidenceResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EvidenceResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EvidenceResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const EvidenceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EvidenceProperties",
    modelProperties: {
      evidenceType: {
        serializedName: "evidenceType",
        type: {
          name: "String",
        },
      },
      filePath: {
        serializedName: "filePath",
        required: true,
        type: {
          name: "String",
        },
      },
      extraData: {
        serializedName: "extraData",
        type: {
          name: "String",
        },
      },
      controlId: {
        serializedName: "controlId",
        type: {
          name: "String",
        },
      },
      responsibilityId: {
        serializedName: "responsibilityId",
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const EvidenceFileDownloadRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EvidenceFileDownloadRequest",
    modelProperties: {
      reportCreatorTenantId: {
        serializedName: "reportCreatorTenantId",
        type: {
          name: "String",
        },
      },
      offerGuid: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "offerGuid",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const EvidenceFileDownloadResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EvidenceFileDownloadResponse",
    modelProperties: {
      evidenceFile: {
        serializedName: "evidenceFile",
        type: {
          name: "Composite",
          className: "EvidenceFileDownloadResponseEvidenceFile",
        },
      },
    },
  },
};

export const EvidenceFileDownloadResponseEvidenceFile: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "EvidenceFileDownloadResponseEvidenceFile",
      modelProperties: {
        url: {
          serializedName: "url",
          readOnly: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const ReportFixResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReportFixResult",
    modelProperties: {
      result: {
        serializedName: "result",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      reason: {
        serializedName: "reason",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ScopingQuestions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScopingQuestions",
    modelProperties: {
      questions: {
        serializedName: "questions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScopingQuestion",
            },
          },
        },
      },
    },
  },
};

export const ScopingQuestion: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScopingQuestion",
    modelProperties: {
      questionId: {
        serializedName: "questionId",
        required: true,
        readOnly: true,
        type: {
          name: "String",
        },
      },
      superiorQuestionId: {
        serializedName: "superiorQuestionId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      inputType: {
        serializedName: "inputType",
        required: true,
        readOnly: true,
        type: {
          name: "String",
        },
      },
      optionIds: {
        serializedName: "optionIds",
        required: true,
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      rules: {
        serializedName: "rules",
        required: true,
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      showSubQuestionsValue: {
        serializedName: "showSubQuestionsValue",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ScopingConfigurationResourceListResult: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ScopingConfigurationResourceListResult",
      modelProperties: {
        value: {
          serializedName: "value",
          required: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "ScopingConfigurationResource",
              },
            },
          },
        },
        nextLink: {
          serializedName: "nextLink",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const ScopingConfigurationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScopingConfigurationProperties",
    modelProperties: {
      answers: {
        serializedName: "answers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScopingAnswer",
            },
          },
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ScopingAnswer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScopingAnswer",
    modelProperties: {
      questionId: {
        constraints: {
          Pattern: new RegExp("^[-a-zA-Z0-9_]{1,50}$"),
        },
        serializedName: "questionId",
        required: true,
        type: {
          name: "String",
        },
      },
      answers: {
        serializedName: "answers",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const SnapshotResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SnapshotResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SnapshotResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SnapshotProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SnapshotProperties",
    modelProperties: {
      snapshotName: {
        serializedName: "snapshotName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      createdAt: {
        serializedName: "createdAt",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      reportProperties: {
        serializedName: "reportProperties",
        type: {
          name: "Composite",
          className: "ReportProperties",
        },
      },
      reportSystemData: {
        serializedName: "reportSystemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
      complianceResults: {
        serializedName: "complianceResults",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ComplianceResult",
            },
          },
        },
      },
    },
  },
};

export const ComplianceResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComplianceResult",
    modelProperties: {
      complianceName: {
        serializedName: "complianceName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      categories: {
        serializedName: "categories",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Category",
            },
          },
        },
      },
    },
  },
};

export const Category: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Category",
    modelProperties: {
      categoryName: {
        serializedName: "categoryName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      categoryStatus: {
        serializedName: "categoryStatus",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      controlFamilies: {
        serializedName: "controlFamilies",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ControlFamily",
            },
          },
        },
      },
    },
  },
};

export const ControlFamily: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ControlFamily",
    modelProperties: {
      controlFamilyName: {
        serializedName: "controlFamilyName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      controlFamilyStatus: {
        serializedName: "controlFamilyStatus",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      controls: {
        serializedName: "controls",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Control",
            },
          },
        },
      },
    },
  },
};

export const Control: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Control",
    modelProperties: {
      controlId: {
        serializedName: "controlId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      controlName: {
        serializedName: "controlName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      controlFullName: {
        serializedName: "controlFullName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      controlDescription: {
        serializedName: "controlDescription",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      controlDescriptionHyperLink: {
        serializedName: "controlDescriptionHyperLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      controlStatus: {
        serializedName: "controlStatus",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      responsibilities: {
        serializedName: "responsibilities",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Responsibility",
            },
          },
        },
      },
    },
  },
};

export const Responsibility: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Responsibility",
    modelProperties: {
      responsibilityId: {
        serializedName: "responsibilityId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      responsibilityTitle: {
        serializedName: "responsibilityTitle",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      responsibilityDescription: {
        serializedName: "responsibilityDescription",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      responsibilityType: {
        serializedName: "responsibilityType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      responsibilitySeverity: {
        serializedName: "responsibilitySeverity",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      responsibilityStatus: {
        serializedName: "responsibilityStatus",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      responsibilityEnvironment: {
        serializedName: "responsibilityEnvironment",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      failedResourceCount: {
        serializedName: "failedResourceCount",
        type: {
          name: "Number",
        },
      },
      totalResourceCount: {
        serializedName: "totalResourceCount",
        type: {
          name: "Number",
        },
      },
      resourceList: {
        serializedName: "resourceList",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResponsibilityResource",
            },
          },
        },
      },
      recommendationList: {
        serializedName: "recommendationList",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Recommendation",
            },
          },
        },
      },
      guidance: {
        serializedName: "guidance",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      justification: {
        serializedName: "justification",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      evidenceFiles: {
        serializedName: "evidenceFiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const ResponsibilityResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResponsibilityResource",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      accountId: {
        serializedName: "accountId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resourceType: {
        serializedName: "resourceType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resourceOrigin: {
        serializedName: "resourceOrigin",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resourceStatus: {
        serializedName: "resourceStatus",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resourceStatusChangeDate: {
        serializedName: "resourceStatusChangeDate",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      recommendationIds: {
        serializedName: "recommendationIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const Recommendation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Recommendation",
    modelProperties: {
      recommendationId: {
        serializedName: "recommendationId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      recommendationShortName: {
        serializedName: "recommendationShortName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      recommendationSolutions: {
        serializedName: "recommendationSolutions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecommendationSolution",
            },
          },
        },
      },
    },
  },
};

export const RecommendationSolution: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecommendationSolution",
    modelProperties: {
      recommendationSolutionIndex: {
        serializedName: "recommendationSolutionIndex",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      recommendationSolutionContent: {
        serializedName: "recommendationSolutionContent",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      isRecommendSolution: {
        serializedName: "isRecommendSolution",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SnapshotDownloadRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SnapshotDownloadRequest",
    modelProperties: {
      reportCreatorTenantId: {
        serializedName: "reportCreatorTenantId",
        type: {
          name: "String",
        },
      },
      downloadType: {
        serializedName: "downloadType",
        required: true,
        type: {
          name: "String",
        },
      },
      offerGuid: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "offerGuid",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DownloadResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DownloadResponse",
    modelProperties: {
      resourceList: {
        serializedName: "resourceList",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceItem",
            },
          },
        },
      },
      complianceReport: {
        serializedName: "complianceReport",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ComplianceReportItem",
            },
          },
        },
      },
      compliancePdfReport: {
        serializedName: "compliancePdfReport",
        type: {
          name: "Composite",
          className: "DownloadResponseCompliancePdfReport",
        },
      },
      complianceDetailedPdfReport: {
        serializedName: "complianceDetailedPdfReport",
        type: {
          name: "Composite",
          className: "DownloadResponseComplianceDetailedPdfReport",
        },
      },
    },
  },
};

export const ResourceItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceItem",
    modelProperties: {
      subscriptionId: {
        serializedName: "subscriptionId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resourceGroup: {
        serializedName: "resourceGroup",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resourceType: {
        serializedName: "resourceType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resourceId: {
        serializedName: "resourceId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ComplianceReportItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComplianceReportItem",
    modelProperties: {
      categoryName: {
        serializedName: "categoryName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      controlFamilyName: {
        serializedName: "controlFamilyName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      controlId: {
        serializedName: "controlId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      controlName: {
        serializedName: "controlName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      controlStatus: {
        serializedName: "controlStatus",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      responsibilityTitle: {
        serializedName: "responsibilityTitle",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      responsibilityDescription: {
        serializedName: "responsibilityDescription",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resourceId: {
        serializedName: "resourceId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resourceType: {
        serializedName: "resourceType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resourceOrigin: {
        serializedName: "resourceOrigin",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resourceStatus: {
        serializedName: "resourceStatus",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resourceStatusChangeDate: {
        serializedName: "resourceStatusChangeDate",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const DownloadResponseCompliancePdfReport: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DownloadResponseCompliancePdfReport",
    modelProperties: {
      sasUri: {
        serializedName: "sasUri",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DownloadResponseComplianceDetailedPdfReport: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "DownloadResponseComplianceDetailedPdfReport",
      modelProperties: {
        sasUri: {
          serializedName: "sasUri",
          readOnly: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const SyncCertRecordRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SyncCertRecordRequest",
    modelProperties: {
      certRecord: {
        serializedName: "certRecord",
        type: {
          name: "Composite",
          className: "CertSyncRecord",
        },
      },
    },
  },
};

export const SyncCertRecordResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SyncCertRecordResponse",
    modelProperties: {
      certRecord: {
        serializedName: "certRecord",
        type: {
          name: "Composite",
          className: "CertSyncRecord",
        },
      },
    },
  },
};

export const ReportVerificationResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReportVerificationResult",
    modelProperties: {
      result: {
        serializedName: "result",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      reason: {
        serializedName: "reason",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const WebhookResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WebhookResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WebhookResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const WebhookProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WebhookProperties",
    modelProperties: {
      webhookId: {
        serializedName: "webhookId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      status: {
        serializedName: "status",
        type: {
          name: "String",
        },
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      sendAllEvents: {
        serializedName: "sendAllEvents",
        type: {
          name: "String",
        },
      },
      events: {
        serializedName: "events",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      payloadUrl: {
        constraints: {
          Pattern: new RegExp("^(http(s)?:\\/\\/)[\\S]{0,64994}$"),
        },
        serializedName: "payloadUrl",
        type: {
          name: "String",
        },
      },
      contentType: {
        serializedName: "contentType",
        type: {
          name: "String",
        },
      },
      webhookKey: {
        constraints: {
          Pattern: new RegExp("^.{0,2048}$"),
        },
        serializedName: "webhookKey",
        type: {
          name: "String",
        },
      },
      updateWebhookKey: {
        serializedName: "updateWebhookKey",
        type: {
          name: "String",
        },
      },
      webhookKeyEnabled: {
        serializedName: "webhookKeyEnabled",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      enableSslVerification: {
        serializedName: "enableSslVerification",
        type: {
          name: "String",
        },
      },
      deliveryStatus: {
        serializedName: "deliveryStatus",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const WebhookResourcePatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WebhookResourcePatch",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "WebhookProperties",
        },
      },
    },
  },
};

export const TriggerEvaluationRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TriggerEvaluationRequest",
    modelProperties: {
      resourceIds: {
        serializedName: "resourceIds",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const TriggerEvaluationResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TriggerEvaluationResponse",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "TriggerEvaluationProperty",
        },
      },
    },
  },
};

export const TriggerEvaluationProperty: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TriggerEvaluationProperty",
    modelProperties: {
      triggerTime: {
        serializedName: "triggerTime",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      evaluationEndTime: {
        serializedName: "evaluationEndTime",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      resourceIds: {
        serializedName: "resourceIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      quickAssessments: {
        serializedName: "quickAssessments",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QuickAssessment",
            },
          },
        },
      },
    },
  },
};

export const QuickAssessment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QuickAssessment",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      responsibilityId: {
        serializedName: "responsibilityId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      timestamp: {
        serializedName: "timestamp",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      resourceStatus: {
        serializedName: "resourceStatus",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      remediationLink: {
        serializedName: "remediationLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties,
    },
  },
};

export const ReportResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReportResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ReportProperties",
        },
      },
    },
  },
};

export const EvidenceResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EvidenceResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "EvidenceProperties",
        },
      },
    },
  },
};

export const ScopingConfigurationResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScopingConfigurationResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ScopingConfigurationProperties",
        },
      },
    },
  },
};

export const SnapshotResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SnapshotResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SnapshotProperties",
        },
      },
    },
  },
};

export const WebhookResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WebhookResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "WebhookProperties",
        },
      },
    },
  },
};

export const ProviderActionsOnboardHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProviderActionsOnboardHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const ProviderActionsTriggerEvaluationHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ProviderActionsTriggerEvaluationHeaders",
      modelProperties: {
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const ReportCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReportCreateOrUpdateHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const ReportUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReportUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const ReportDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReportDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const ReportFixHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReportFixHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const ReportSyncCertRecordHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReportSyncCertRecordHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const ReportVerifyHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReportVerifyHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const SnapshotDownloadHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SnapshotDownloadHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};
