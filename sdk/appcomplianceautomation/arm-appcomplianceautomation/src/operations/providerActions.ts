/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { ProviderActions } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AppComplianceAutomationToolForMicrosoft365 } from "../appComplianceAutomationToolForMicrosoft365";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  CheckNameAvailabilityRequest,
  ProviderActionsCheckNameAvailabilityOptionalParams,
  ProviderActionsCheckNameAvailabilityResponse,
  GetCollectionCountRequest,
  ProviderActionsGetCollectionCountOptionalParams,
  ProviderActionsGetCollectionCountResponse,
  GetOverviewStatusRequest,
  ProviderActionsGetOverviewStatusOptionalParams,
  ProviderActionsGetOverviewStatusResponse,
  ListInUseStorageAccountsRequest,
  ProviderActionsListInUseStorageAccountsOptionalParams,
  ProviderActionsListInUseStorageAccountsResponse,
  OnboardRequest,
  ProviderActionsOnboardOptionalParams,
  ProviderActionsOnboardResponse,
  TriggerEvaluationRequest,
  ProviderActionsTriggerEvaluationOptionalParams,
  ProviderActionsTriggerEvaluationResponse,
} from "../models";

/** Class containing ProviderActions operations. */
export class ProviderActionsImpl implements ProviderActions {
  private readonly client: AppComplianceAutomationToolForMicrosoft365;

  /**
   * Initialize a new instance of the class ProviderActions class.
   * @param client Reference to the service client
   */
  constructor(client: AppComplianceAutomationToolForMicrosoft365) {
    this.client = client;
  }

  /**
   * Check if the given name is available for a report.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  checkNameAvailability(
    body: CheckNameAvailabilityRequest,
    options?: ProviderActionsCheckNameAvailabilityOptionalParams,
  ): Promise<ProviderActionsCheckNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      { body, options },
      checkNameAvailabilityOperationSpec,
    );
  }

  /**
   * Get the count of reports.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  getCollectionCount(
    body: GetCollectionCountRequest,
    options?: ProviderActionsGetCollectionCountOptionalParams,
  ): Promise<ProviderActionsGetCollectionCountResponse> {
    return this.client.sendOperationRequest(
      { body, options },
      getCollectionCountOperationSpec,
    );
  }

  /**
   * Get the resource overview status.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  getOverviewStatus(
    body: GetOverviewStatusRequest,
    options?: ProviderActionsGetOverviewStatusOptionalParams,
  ): Promise<ProviderActionsGetOverviewStatusResponse> {
    return this.client.sendOperationRequest(
      { body, options },
      getOverviewStatusOperationSpec,
    );
  }

  /**
   * List the storage accounts which are in use by related reports
   * @param body The content of the action request
   * @param options The options parameters.
   */
  listInUseStorageAccounts(
    body: ListInUseStorageAccountsRequest,
    options?: ProviderActionsListInUseStorageAccountsOptionalParams,
  ): Promise<ProviderActionsListInUseStorageAccountsResponse> {
    return this.client.sendOperationRequest(
      { body, options },
      listInUseStorageAccountsOperationSpec,
    );
  }

  /**
   * Onboard given subscriptions to Microsoft.AppComplianceAutomation provider.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginOnboard(
    body: OnboardRequest,
    options?: ProviderActionsOnboardOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ProviderActionsOnboardResponse>,
      ProviderActionsOnboardResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ProviderActionsOnboardResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { body, options },
      spec: onboardOperationSpec,
    });
    const poller = await createHttpPoller<
      ProviderActionsOnboardResponse,
      OperationState<ProviderActionsOnboardResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Onboard given subscriptions to Microsoft.AppComplianceAutomation provider.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginOnboardAndWait(
    body: OnboardRequest,
    options?: ProviderActionsOnboardOptionalParams,
  ): Promise<ProviderActionsOnboardResponse> {
    const poller = await this.beginOnboard(body, options);
    return poller.pollUntilDone();
  }

  /**
   * Trigger quick evaluation for the given subscriptions.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginTriggerEvaluation(
    body: TriggerEvaluationRequest,
    options?: ProviderActionsTriggerEvaluationOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ProviderActionsTriggerEvaluationResponse>,
      ProviderActionsTriggerEvaluationResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ProviderActionsTriggerEvaluationResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { body, options },
      spec: triggerEvaluationOperationSpec,
    });
    const poller = await createHttpPoller<
      ProviderActionsTriggerEvaluationResponse,
      OperationState<ProviderActionsTriggerEvaluationResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Trigger quick evaluation for the given subscriptions.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginTriggerEvaluationAndWait(
    body: TriggerEvaluationRequest,
    options?: ProviderActionsTriggerEvaluationOptionalParams,
  ): Promise<ProviderActionsTriggerEvaluationResponse> {
    const poller = await this.beginTriggerEvaluation(body, options);
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const checkNameAvailabilityOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.AppComplianceAutomation/checkNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameAvailabilityResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const getCollectionCountOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.AppComplianceAutomation/getCollectionCount",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.GetCollectionCountResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const getOverviewStatusOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.AppComplianceAutomation/getOverviewStatus",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.GetOverviewStatusResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const listInUseStorageAccountsOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.AppComplianceAutomation/listInUseStorageAccounts",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ListInUseStorageAccountsResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const onboardOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.AppComplianceAutomation/onboard",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.OnboardResponse,
    },
    201: {
      bodyMapper: Mappers.OnboardResponse,
    },
    202: {
      bodyMapper: Mappers.OnboardResponse,
    },
    204: {
      bodyMapper: Mappers.OnboardResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const triggerEvaluationOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.AppComplianceAutomation/triggerEvaluation",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.TriggerEvaluationResponse,
    },
    201: {
      bodyMapper: Mappers.TriggerEvaluationResponse,
    },
    202: {
      bodyMapper: Mappers.TriggerEvaluationResponse,
    },
    204: {
      bodyMapper: Mappers.TriggerEvaluationResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
