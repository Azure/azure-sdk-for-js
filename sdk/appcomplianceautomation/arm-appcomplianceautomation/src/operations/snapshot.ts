/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Snapshot } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AppComplianceAutomationToolForMicrosoft365 } from "../appComplianceAutomationToolForMicrosoft365";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  SnapshotResource,
  SnapshotListNextOptionalParams,
  SnapshotListOptionalParams,
  SnapshotListResponse,
  SnapshotGetOptionalParams,
  SnapshotGetResponse,
  SnapshotDownloadRequest,
  SnapshotDownloadOptionalParams,
  SnapshotDownloadResponse,
  SnapshotListNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Snapshot operations. */
export class SnapshotImpl implements Snapshot {
  private readonly client: AppComplianceAutomationToolForMicrosoft365;

  /**
   * Initialize a new instance of the class Snapshot class.
   * @param client Reference to the service client
   */
  constructor(client: AppComplianceAutomationToolForMicrosoft365) {
    this.client = client;
  }

  /**
   * Get the AppComplianceAutomation snapshot list.
   * @param reportName Report Name.
   * @param options The options parameters.
   */
  public list(
    reportName: string,
    options?: SnapshotListOptionalParams,
  ): PagedAsyncIterableIterator<SnapshotResource> {
    const iter = this.listPagingAll(reportName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(reportName, options, settings);
      },
    };
  }

  private async *listPagingPage(
    reportName: string,
    options?: SnapshotListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<SnapshotResource[]> {
    let result: SnapshotListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(reportName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(reportName, continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    reportName: string,
    options?: SnapshotListOptionalParams,
  ): AsyncIterableIterator<SnapshotResource> {
    for await (const page of this.listPagingPage(reportName, options)) {
      yield* page;
    }
  }

  /**
   * Get the AppComplianceAutomation snapshot list.
   * @param reportName Report Name.
   * @param options The options parameters.
   */
  private _list(
    reportName: string,
    options?: SnapshotListOptionalParams,
  ): Promise<SnapshotListResponse> {
    return this.client.sendOperationRequest(
      { reportName, options },
      listOperationSpec,
    );
  }

  /**
   * Get the AppComplianceAutomation snapshot and its properties.
   * @param reportName Report Name.
   * @param snapshotName Snapshot Name.
   * @param options The options parameters.
   */
  get(
    reportName: string,
    snapshotName: string,
    options?: SnapshotGetOptionalParams,
  ): Promise<SnapshotGetResponse> {
    return this.client.sendOperationRequest(
      { reportName, snapshotName, options },
      getOperationSpec,
    );
  }

  /**
   * Download compliance needs from snapshot, like: Compliance Report, Resource List.
   * @param reportName Report Name.
   * @param snapshotName Snapshot Name.
   * @param body Parameters for the query operation
   * @param options The options parameters.
   */
  async beginDownload(
    reportName: string,
    snapshotName: string,
    body: SnapshotDownloadRequest,
    options?: SnapshotDownloadOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SnapshotDownloadResponse>,
      SnapshotDownloadResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<SnapshotDownloadResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { reportName, snapshotName, body, options },
      spec: downloadOperationSpec,
    });
    const poller = await createHttpPoller<
      SnapshotDownloadResponse,
      OperationState<SnapshotDownloadResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Download compliance needs from snapshot, like: Compliance Report, Resource List.
   * @param reportName Report Name.
   * @param snapshotName Snapshot Name.
   * @param body Parameters for the query operation
   * @param options The options parameters.
   */
  async beginDownloadAndWait(
    reportName: string,
    snapshotName: string,
    body: SnapshotDownloadRequest,
    options?: SnapshotDownloadOptionalParams,
  ): Promise<SnapshotDownloadResponse> {
    const poller = await this.beginDownload(
      reportName,
      snapshotName,
      body,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * ListNext
   * @param reportName Report Name.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    reportName: string,
    nextLink: string,
    options?: SnapshotListNextOptionalParams,
  ): Promise<SnapshotListNextResponse> {
    return this.client.sendOperationRequest(
      { reportName, nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/snapshots",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SnapshotResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skipToken,
    Parameters.top,
    Parameters.select,
    Parameters.filter,
    Parameters.orderby,
    Parameters.offerGuid,
    Parameters.reportCreatorTenantId,
  ],
  urlParameters: [Parameters.$host, Parameters.reportName],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/snapshots/{snapshotName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SnapshotResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.reportName,
    Parameters.snapshotName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const downloadOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.AppComplianceAutomation/reports/{reportName}/snapshots/{snapshotName}/download",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DownloadResponse,
    },
    201: {
      bodyMapper: Mappers.DownloadResponse,
    },
    202: {
      bodyMapper: Mappers.DownloadResponse,
    },
    204: {
      bodyMapper: Mappers.DownloadResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body8,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.reportName,
    Parameters.snapshotName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SnapshotResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.reportName],
  headerParameters: [Parameters.accept],
  serializer,
};
