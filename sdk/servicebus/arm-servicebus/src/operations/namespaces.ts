/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import "@azure/core-paging";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Namespaces } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ServiceBusManagementClientContext } from "../serviceBusManagementClientContext";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  IpFilterRule,
  NamespacesListIpFilterRulesNextOptionalParams,
  NamespacesListIpFilterRulesOptionalParams,
  SBNamespace,
  NamespacesListNextOptionalParams,
  NamespacesListOptionalParams,
  NamespacesListByResourceGroupNextOptionalParams,
  NamespacesListByResourceGroupOptionalParams,
  VirtualNetworkRule,
  NamespacesListVirtualNetworkRulesNextOptionalParams,
  NamespacesListVirtualNetworkRulesOptionalParams,
  SBAuthorizationRule,
  NamespacesListAuthorizationRulesNextOptionalParams,
  NamespacesListAuthorizationRulesOptionalParams,
  NetworkRuleSet,
  NamespacesListNetworkRuleSetsNextOptionalParams,
  NamespacesListNetworkRuleSetsOptionalParams,
  NamespacesListIpFilterRulesResponse,
  NamespacesCreateOrUpdateIpFilterRuleOptionalParams,
  NamespacesCreateOrUpdateIpFilterRuleResponse,
  NamespacesDeleteIpFilterRuleOptionalParams,
  NamespacesGetIpFilterRuleOptionalParams,
  NamespacesGetIpFilterRuleResponse,
  NamespacesListResponse,
  NamespacesListByResourceGroupResponse,
  NamespacesCreateOrUpdateOptionalParams,
  NamespacesCreateOrUpdateResponse,
  NamespacesDeleteOptionalParams,
  NamespacesGetOptionalParams,
  NamespacesGetResponse,
  SBNamespaceUpdateParameters,
  NamespacesUpdateOptionalParams,
  NamespacesUpdateResponse,
  NamespacesListVirtualNetworkRulesResponse,
  NamespacesCreateOrUpdateVirtualNetworkRuleOptionalParams,
  NamespacesCreateOrUpdateVirtualNetworkRuleResponse,
  NamespacesDeleteVirtualNetworkRuleOptionalParams,
  NamespacesGetVirtualNetworkRuleOptionalParams,
  NamespacesGetVirtualNetworkRuleResponse,
  NamespacesListAuthorizationRulesResponse,
  NamespacesCreateOrUpdateAuthorizationRuleOptionalParams,
  NamespacesCreateOrUpdateAuthorizationRuleResponse,
  NamespacesDeleteAuthorizationRuleOptionalParams,
  NamespacesGetAuthorizationRuleOptionalParams,
  NamespacesGetAuthorizationRuleResponse,
  NamespacesListKeysOptionalParams,
  NamespacesListKeysResponse,
  RegenerateAccessKeyParameters,
  NamespacesRegenerateKeysOptionalParams,
  NamespacesRegenerateKeysResponse,
  CheckNameAvailability,
  NamespacesCheckNameAvailabilityOptionalParams,
  NamespacesCheckNameAvailabilityResponse,
  NamespacesCreateOrUpdateNetworkRuleSetOptionalParams,
  NamespacesCreateOrUpdateNetworkRuleSetResponse,
  NamespacesGetNetworkRuleSetOptionalParams,
  NamespacesGetNetworkRuleSetResponse,
  NamespacesListNetworkRuleSetsResponse,
  SBNamespaceMigrate,
  NamespacesMigrateOptionalParams,
  NamespacesListIpFilterRulesNextResponse,
  NamespacesListNextResponse,
  NamespacesListByResourceGroupNextResponse,
  NamespacesListVirtualNetworkRulesNextResponse,
  NamespacesListAuthorizationRulesNextResponse,
  NamespacesListNetworkRuleSetsNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Namespaces operations. */
export class NamespacesImpl implements Namespaces {
  private readonly client: ServiceBusManagementClientContext;

  /**
   * Initialize a new instance of the class Namespaces class.
   * @param client Reference to the service client
   */
  constructor(client: ServiceBusManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets a list of IP Filter rules for a Namespace.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param options The options parameters.
   */
  public listIpFilterRules(
    resourceGroupName: string,
    namespaceName: string,
    options?: NamespacesListIpFilterRulesOptionalParams
  ): PagedAsyncIterableIterator<IpFilterRule> {
    const iter = this.listIpFilterRulesPagingAll(
      resourceGroupName,
      namespaceName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listIpFilterRulesPagingPage(
          resourceGroupName,
          namespaceName,
          options
        );
      }
    };
  }

  private async *listIpFilterRulesPagingPage(
    resourceGroupName: string,
    namespaceName: string,
    options?: NamespacesListIpFilterRulesOptionalParams
  ): AsyncIterableIterator<IpFilterRule[]> {
    let result = await this._listIpFilterRules(
      resourceGroupName,
      namespaceName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listIpFilterRulesNext(
        resourceGroupName,
        namespaceName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listIpFilterRulesPagingAll(
    resourceGroupName: string,
    namespaceName: string,
    options?: NamespacesListIpFilterRulesOptionalParams
  ): AsyncIterableIterator<IpFilterRule> {
    for await (const page of this.listIpFilterRulesPagingPage(
      resourceGroupName,
      namespaceName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets all the available namespaces within the subscription, irrespective of the resource groups.
   * @param options The options parameters.
   */
  public list(
    options?: NamespacesListOptionalParams
  ): PagedAsyncIterableIterator<SBNamespace> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(options);
      }
    };
  }

  private async *listPagingPage(
    options?: NamespacesListOptionalParams
  ): AsyncIterableIterator<SBNamespace[]> {
    let result = await this._list(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    options?: NamespacesListOptionalParams
  ): AsyncIterableIterator<SBNamespace> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets the available namespaces within a resource group.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: NamespacesListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<SBNamespace> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupPagingPage(resourceGroupName, options);
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: NamespacesListByResourceGroupOptionalParams
  ): AsyncIterableIterator<SBNamespace[]> {
    let result = await this._listByResourceGroup(resourceGroupName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: NamespacesListByResourceGroupOptionalParams
  ): AsyncIterableIterator<SBNamespace> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets a list of VirtualNetwork rules for a Namespace.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param options The options parameters.
   */
  public listVirtualNetworkRules(
    resourceGroupName: string,
    namespaceName: string,
    options?: NamespacesListVirtualNetworkRulesOptionalParams
  ): PagedAsyncIterableIterator<VirtualNetworkRule> {
    const iter = this.listVirtualNetworkRulesPagingAll(
      resourceGroupName,
      namespaceName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listVirtualNetworkRulesPagingPage(
          resourceGroupName,
          namespaceName,
          options
        );
      }
    };
  }

  private async *listVirtualNetworkRulesPagingPage(
    resourceGroupName: string,
    namespaceName: string,
    options?: NamespacesListVirtualNetworkRulesOptionalParams
  ): AsyncIterableIterator<VirtualNetworkRule[]> {
    let result = await this._listVirtualNetworkRules(
      resourceGroupName,
      namespaceName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listVirtualNetworkRulesNext(
        resourceGroupName,
        namespaceName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listVirtualNetworkRulesPagingAll(
    resourceGroupName: string,
    namespaceName: string,
    options?: NamespacesListVirtualNetworkRulesOptionalParams
  ): AsyncIterableIterator<VirtualNetworkRule> {
    for await (const page of this.listVirtualNetworkRulesPagingPage(
      resourceGroupName,
      namespaceName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets the authorization rules for a namespace.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param options The options parameters.
   */
  public listAuthorizationRules(
    resourceGroupName: string,
    namespaceName: string,
    options?: NamespacesListAuthorizationRulesOptionalParams
  ): PagedAsyncIterableIterator<SBAuthorizationRule> {
    const iter = this.listAuthorizationRulesPagingAll(
      resourceGroupName,
      namespaceName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAuthorizationRulesPagingPage(
          resourceGroupName,
          namespaceName,
          options
        );
      }
    };
  }

  private async *listAuthorizationRulesPagingPage(
    resourceGroupName: string,
    namespaceName: string,
    options?: NamespacesListAuthorizationRulesOptionalParams
  ): AsyncIterableIterator<SBAuthorizationRule[]> {
    let result = await this._listAuthorizationRules(
      resourceGroupName,
      namespaceName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAuthorizationRulesNext(
        resourceGroupName,
        namespaceName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAuthorizationRulesPagingAll(
    resourceGroupName: string,
    namespaceName: string,
    options?: NamespacesListAuthorizationRulesOptionalParams
  ): AsyncIterableIterator<SBAuthorizationRule> {
    for await (const page of this.listAuthorizationRulesPagingPage(
      resourceGroupName,
      namespaceName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets list of NetworkRuleSet for a Namespace.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param options The options parameters.
   */
  public listNetworkRuleSets(
    resourceGroupName: string,
    namespaceName: string,
    options?: NamespacesListNetworkRuleSetsOptionalParams
  ): PagedAsyncIterableIterator<NetworkRuleSet> {
    const iter = this.listNetworkRuleSetsPagingAll(
      resourceGroupName,
      namespaceName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listNetworkRuleSetsPagingPage(
          resourceGroupName,
          namespaceName,
          options
        );
      }
    };
  }

  private async *listNetworkRuleSetsPagingPage(
    resourceGroupName: string,
    namespaceName: string,
    options?: NamespacesListNetworkRuleSetsOptionalParams
  ): AsyncIterableIterator<NetworkRuleSet[]> {
    let result = await this._listNetworkRuleSets(
      resourceGroupName,
      namespaceName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNetworkRuleSetsNext(
        resourceGroupName,
        namespaceName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listNetworkRuleSetsPagingAll(
    resourceGroupName: string,
    namespaceName: string,
    options?: NamespacesListNetworkRuleSetsOptionalParams
  ): AsyncIterableIterator<NetworkRuleSet> {
    for await (const page of this.listNetworkRuleSetsPagingPage(
      resourceGroupName,
      namespaceName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets a list of IP Filter rules for a Namespace.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param options The options parameters.
   */
  private _listIpFilterRules(
    resourceGroupName: string,
    namespaceName: string,
    options?: NamespacesListIpFilterRulesOptionalParams
  ): Promise<NamespacesListIpFilterRulesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, namespaceName, options },
      listIpFilterRulesOperationSpec
    );
  }

  /**
   * Creates or updates an IpFilterRule for a Namespace.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param ipFilterRuleName The IP Filter Rule name.
   * @param parameters The Namespace IpFilterRule.
   * @param options The options parameters.
   */
  createOrUpdateIpFilterRule(
    resourceGroupName: string,
    namespaceName: string,
    ipFilterRuleName: string,
    parameters: IpFilterRule,
    options?: NamespacesCreateOrUpdateIpFilterRuleOptionalParams
  ): Promise<NamespacesCreateOrUpdateIpFilterRuleResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        ipFilterRuleName,
        parameters,
        options
      },
      createOrUpdateIpFilterRuleOperationSpec
    );
  }

  /**
   * Deletes an IpFilterRule for a Namespace.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param ipFilterRuleName The IP Filter Rule name.
   * @param options The options parameters.
   */
  deleteIpFilterRule(
    resourceGroupName: string,
    namespaceName: string,
    ipFilterRuleName: string,
    options?: NamespacesDeleteIpFilterRuleOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, namespaceName, ipFilterRuleName, options },
      deleteIpFilterRuleOperationSpec
    );
  }

  /**
   * Gets an IpFilterRule for a Namespace by rule name.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param ipFilterRuleName The IP Filter Rule name.
   * @param options The options parameters.
   */
  getIpFilterRule(
    resourceGroupName: string,
    namespaceName: string,
    ipFilterRuleName: string,
    options?: NamespacesGetIpFilterRuleOptionalParams
  ): Promise<NamespacesGetIpFilterRuleResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, namespaceName, ipFilterRuleName, options },
      getIpFilterRuleOperationSpec
    );
  }

  /**
   * Gets all the available namespaces within the subscription, irrespective of the resource groups.
   * @param options The options parameters.
   */
  private _list(
    options?: NamespacesListOptionalParams
  ): Promise<NamespacesListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Gets the available namespaces within a resource group.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: NamespacesListByResourceGroupOptionalParams
  ): Promise<NamespacesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Creates or updates a service namespace. Once created, this namespace's resource manifest is
   * immutable. This operation is idempotent.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name.
   * @param parameters Parameters supplied to create a namespace resource.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    namespaceName: string,
    parameters: SBNamespace,
    options?: NamespacesCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<NamespacesCreateOrUpdateResponse>,
      NamespacesCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<NamespacesCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, namespaceName, parameters, options },
      createOrUpdateOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * Creates or updates a service namespace. Once created, this namespace's resource manifest is
   * immutable. This operation is idempotent.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name.
   * @param parameters Parameters supplied to create a namespace resource.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    namespaceName: string,
    parameters: SBNamespace,
    options?: NamespacesCreateOrUpdateOptionalParams
  ): Promise<NamespacesCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      namespaceName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes an existing namespace. This operation also removes all associated resources under the
   * namespace.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    namespaceName: string,
    options?: NamespacesDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, namespaceName, options },
      deleteOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * Deletes an existing namespace. This operation also removes all associated resources under the
   * namespace.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    namespaceName: string,
    options?: NamespacesDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      namespaceName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets a description for the specified namespace.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    namespaceName: string,
    options?: NamespacesGetOptionalParams
  ): Promise<NamespacesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, namespaceName, options },
      getOperationSpec
    );
  }

  /**
   * Updates a service namespace. Once created, this namespace's resource manifest is immutable. This
   * operation is idempotent.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param parameters Parameters supplied to update a namespace resource.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    namespaceName: string,
    parameters: SBNamespaceUpdateParameters,
    options?: NamespacesUpdateOptionalParams
  ): Promise<NamespacesUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, namespaceName, parameters, options },
      updateOperationSpec
    );
  }

  /**
   * Gets a list of VirtualNetwork rules for a Namespace.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param options The options parameters.
   */
  private _listVirtualNetworkRules(
    resourceGroupName: string,
    namespaceName: string,
    options?: NamespacesListVirtualNetworkRulesOptionalParams
  ): Promise<NamespacesListVirtualNetworkRulesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, namespaceName, options },
      listVirtualNetworkRulesOperationSpec
    );
  }

  /**
   * Creates or updates an VirtualNetworkRule for a Namespace.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param virtualNetworkRuleName The Virtual Network Rule name.
   * @param parameters The Namespace VirtualNetworkRule.
   * @param options The options parameters.
   */
  createOrUpdateVirtualNetworkRule(
    resourceGroupName: string,
    namespaceName: string,
    virtualNetworkRuleName: string,
    parameters: VirtualNetworkRule,
    options?: NamespacesCreateOrUpdateVirtualNetworkRuleOptionalParams
  ): Promise<NamespacesCreateOrUpdateVirtualNetworkRuleResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        virtualNetworkRuleName,
        parameters,
        options
      },
      createOrUpdateVirtualNetworkRuleOperationSpec
    );
  }

  /**
   * Deletes an VirtualNetworkRule for a Namespace.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param virtualNetworkRuleName The Virtual Network Rule name.
   * @param options The options parameters.
   */
  deleteVirtualNetworkRule(
    resourceGroupName: string,
    namespaceName: string,
    virtualNetworkRuleName: string,
    options?: NamespacesDeleteVirtualNetworkRuleOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, namespaceName, virtualNetworkRuleName, options },
      deleteVirtualNetworkRuleOperationSpec
    );
  }

  /**
   * Gets an VirtualNetworkRule for a Namespace by rule name.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param virtualNetworkRuleName The Virtual Network Rule name.
   * @param options The options parameters.
   */
  getVirtualNetworkRule(
    resourceGroupName: string,
    namespaceName: string,
    virtualNetworkRuleName: string,
    options?: NamespacesGetVirtualNetworkRuleOptionalParams
  ): Promise<NamespacesGetVirtualNetworkRuleResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, namespaceName, virtualNetworkRuleName, options },
      getVirtualNetworkRuleOperationSpec
    );
  }

  /**
   * Gets the authorization rules for a namespace.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param options The options parameters.
   */
  private _listAuthorizationRules(
    resourceGroupName: string,
    namespaceName: string,
    options?: NamespacesListAuthorizationRulesOptionalParams
  ): Promise<NamespacesListAuthorizationRulesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, namespaceName, options },
      listAuthorizationRulesOperationSpec
    );
  }

  /**
   * Creates or updates an authorization rule for a namespace.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param authorizationRuleName The authorization rule name.
   * @param parameters The shared access authorization rule.
   * @param options The options parameters.
   */
  createOrUpdateAuthorizationRule(
    resourceGroupName: string,
    namespaceName: string,
    authorizationRuleName: string,
    parameters: SBAuthorizationRule,
    options?: NamespacesCreateOrUpdateAuthorizationRuleOptionalParams
  ): Promise<NamespacesCreateOrUpdateAuthorizationRuleResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        authorizationRuleName,
        parameters,
        options
      },
      createOrUpdateAuthorizationRuleOperationSpec
    );
  }

  /**
   * Deletes a namespace authorization rule.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param authorizationRuleName The authorization rule name.
   * @param options The options parameters.
   */
  deleteAuthorizationRule(
    resourceGroupName: string,
    namespaceName: string,
    authorizationRuleName: string,
    options?: NamespacesDeleteAuthorizationRuleOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, namespaceName, authorizationRuleName, options },
      deleteAuthorizationRuleOperationSpec
    );
  }

  /**
   * Gets an authorization rule for a namespace by rule name.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param authorizationRuleName The authorization rule name.
   * @param options The options parameters.
   */
  getAuthorizationRule(
    resourceGroupName: string,
    namespaceName: string,
    authorizationRuleName: string,
    options?: NamespacesGetAuthorizationRuleOptionalParams
  ): Promise<NamespacesGetAuthorizationRuleResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, namespaceName, authorizationRuleName, options },
      getAuthorizationRuleOperationSpec
    );
  }

  /**
   * Gets the primary and secondary connection strings for the namespace.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param authorizationRuleName The authorization rule name.
   * @param options The options parameters.
   */
  listKeys(
    resourceGroupName: string,
    namespaceName: string,
    authorizationRuleName: string,
    options?: NamespacesListKeysOptionalParams
  ): Promise<NamespacesListKeysResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, namespaceName, authorizationRuleName, options },
      listKeysOperationSpec
    );
  }

  /**
   * Regenerates the primary or secondary connection strings for the namespace.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param authorizationRuleName The authorization rule name.
   * @param parameters Parameters supplied to regenerate the authorization rule.
   * @param options The options parameters.
   */
  regenerateKeys(
    resourceGroupName: string,
    namespaceName: string,
    authorizationRuleName: string,
    parameters: RegenerateAccessKeyParameters,
    options?: NamespacesRegenerateKeysOptionalParams
  ): Promise<NamespacesRegenerateKeysResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        authorizationRuleName,
        parameters,
        options
      },
      regenerateKeysOperationSpec
    );
  }

  /**
   * Check the give namespace name availability.
   * @param parameters Parameters to check availability of the given namespace name
   * @param options The options parameters.
   */
  checkNameAvailability(
    parameters: CheckNameAvailability,
    options?: NamespacesCheckNameAvailabilityOptionalParams
  ): Promise<NamespacesCheckNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      { parameters, options },
      checkNameAvailabilityOperationSpec
    );
  }

  /**
   * Create or update NetworkRuleSet for a Namespace.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param parameters The Namespace IpFilterRule.
   * @param options The options parameters.
   */
  createOrUpdateNetworkRuleSet(
    resourceGroupName: string,
    namespaceName: string,
    parameters: NetworkRuleSet,
    options?: NamespacesCreateOrUpdateNetworkRuleSetOptionalParams
  ): Promise<NamespacesCreateOrUpdateNetworkRuleSetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, namespaceName, parameters, options },
      createOrUpdateNetworkRuleSetOperationSpec
    );
  }

  /**
   * Gets NetworkRuleSet for a Namespace.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param options The options parameters.
   */
  getNetworkRuleSet(
    resourceGroupName: string,
    namespaceName: string,
    options?: NamespacesGetNetworkRuleSetOptionalParams
  ): Promise<NamespacesGetNetworkRuleSetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, namespaceName, options },
      getNetworkRuleSetOperationSpec
    );
  }

  /**
   * Gets list of NetworkRuleSet for a Namespace.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param options The options parameters.
   */
  private _listNetworkRuleSets(
    resourceGroupName: string,
    namespaceName: string,
    options?: NamespacesListNetworkRuleSetsOptionalParams
  ): Promise<NamespacesListNetworkRuleSetsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, namespaceName, options },
      listNetworkRuleSetsOperationSpec
    );
  }

  /**
   * This operation Migrate the given namespace to provided name type
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param parameters Parameters supplied to migrate namespace type.
   * @param options The options parameters.
   */
  migrate(
    resourceGroupName: string,
    namespaceName: string,
    parameters: SBNamespaceMigrate,
    options?: NamespacesMigrateOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, namespaceName, parameters, options },
      migrateOperationSpec
    );
  }

  /**
   * ListIpFilterRulesNext
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param nextLink The nextLink from the previous successful call to the ListIpFilterRules method.
   * @param options The options parameters.
   */
  private _listIpFilterRulesNext(
    resourceGroupName: string,
    namespaceName: string,
    nextLink: string,
    options?: NamespacesListIpFilterRulesNextOptionalParams
  ): Promise<NamespacesListIpFilterRulesNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, namespaceName, nextLink, options },
      listIpFilterRulesNextOperationSpec
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: NamespacesListNextOptionalParams
  ): Promise<NamespacesListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: NamespacesListByResourceGroupNextOptionalParams
  ): Promise<NamespacesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }

  /**
   * ListVirtualNetworkRulesNext
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param nextLink The nextLink from the previous successful call to the ListVirtualNetworkRules
   *                 method.
   * @param options The options parameters.
   */
  private _listVirtualNetworkRulesNext(
    resourceGroupName: string,
    namespaceName: string,
    nextLink: string,
    options?: NamespacesListVirtualNetworkRulesNextOptionalParams
  ): Promise<NamespacesListVirtualNetworkRulesNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, namespaceName, nextLink, options },
      listVirtualNetworkRulesNextOperationSpec
    );
  }

  /**
   * ListAuthorizationRulesNext
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param nextLink The nextLink from the previous successful call to the ListAuthorizationRules method.
   * @param options The options parameters.
   */
  private _listAuthorizationRulesNext(
    resourceGroupName: string,
    namespaceName: string,
    nextLink: string,
    options?: NamespacesListAuthorizationRulesNextOptionalParams
  ): Promise<NamespacesListAuthorizationRulesNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, namespaceName, nextLink, options },
      listAuthorizationRulesNextOperationSpec
    );
  }

  /**
   * ListNetworkRuleSetsNext
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param nextLink The nextLink from the previous successful call to the ListNetworkRuleSets method.
   * @param options The options parameters.
   */
  private _listNetworkRuleSetsNext(
    resourceGroupName: string,
    namespaceName: string,
    nextLink: string,
    options?: NamespacesListNetworkRuleSetsNextOptionalParams
  ): Promise<NamespacesListNetworkRuleSetsNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, namespaceName, nextLink, options },
      listNetworkRuleSetsNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listIpFilterRulesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/ipfilterrules",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IpFilterRuleListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateIpFilterRuleOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/ipfilterrules/{ipFilterRuleName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.IpFilterRule
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.subscriptionId,
    Parameters.ipFilterRuleName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteIpFilterRuleOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/ipfilterrules/{ipFilterRuleName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.subscriptionId,
    Parameters.ipFilterRuleName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getIpFilterRuleOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/ipfilterrules/{ipFilterRuleName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IpFilterRule
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.subscriptionId,
    Parameters.ipFilterRuleName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.ServiceBus/namespaces",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SBNamespaceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SBNamespaceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SBNamespace
    },
    201: {
      bodyMapper: Mappers.SBNamespace
    },
    202: {
      bodyMapper: Mappers.SBNamespace
    },
    204: {
      bodyMapper: Mappers.SBNamespace
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.namespaceName1
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SBNamespace
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SBNamespace
    },
    201: {
      bodyMapper: Mappers.SBNamespace
    },
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listVirtualNetworkRulesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/virtualnetworkrules",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkRuleListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateVirtualNetworkRuleOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/virtualnetworkrules/{virtualNetworkRuleName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkRule
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.subscriptionId,
    Parameters.virtualNetworkRuleName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteVirtualNetworkRuleOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/virtualnetworkrules/{virtualNetworkRuleName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.subscriptionId,
    Parameters.virtualNetworkRuleName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getVirtualNetworkRuleOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/virtualnetworkrules/{virtualNetworkRuleName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkRule
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.subscriptionId,
    Parameters.virtualNetworkRuleName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAuthorizationRulesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/AuthorizationRules",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SBAuthorizationRuleListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateAuthorizationRuleOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SBAuthorizationRule
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.subscriptionId,
    Parameters.authorizationRuleName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteAuthorizationRuleOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.subscriptionId,
    Parameters.authorizationRuleName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getAuthorizationRuleOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SBAuthorizationRule
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.subscriptionId,
    Parameters.authorizationRuleName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listKeysOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}/listKeys",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AccessKeys
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.subscriptionId,
    Parameters.authorizationRuleName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const regenerateKeysOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}/regenerateKeys",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AccessKeys
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.subscriptionId,
    Parameters.authorizationRuleName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const checkNameAvailabilityOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.ServiceBus/CheckNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameAvailabilityResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters6,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const createOrUpdateNetworkRuleSetOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/networkRuleSets/default",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkRuleSet
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters7,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getNetworkRuleSetOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/networkRuleSets/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkRuleSet
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNetworkRuleSetsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/networkRuleSets",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkRuleSetListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const migrateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/migrate",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters8,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listIpFilterRulesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IpFilterRuleListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SBNamespaceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SBNamespaceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listVirtualNetworkRulesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkRuleListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAuthorizationRulesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SBAuthorizationRuleListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNetworkRuleSetsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkRuleSetListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
