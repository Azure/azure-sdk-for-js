/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import "@azure/core-paging";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Regions } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ServiceBusManagementClientContext } from "../serviceBusManagementClientContext";
import {
  PremiumMessagingRegions,
  RegionsListBySkuNextOptionalParams,
  RegionsListBySkuOptionalParams,
  RegionsListBySkuResponse,
  RegionsListBySkuNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Regions operations. */
export class RegionsImpl implements Regions {
  private readonly client: ServiceBusManagementClientContext;

  /**
   * Initialize a new instance of the class Regions class.
   * @param client Reference to the service client
   */
  constructor(client: ServiceBusManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets the available Regions for a given sku
   * @param sku The sku type.
   * @param options The options parameters.
   */
  public listBySku(
    sku: string,
    options?: RegionsListBySkuOptionalParams
  ): PagedAsyncIterableIterator<PremiumMessagingRegions> {
    const iter = this.listBySkuPagingAll(sku, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBySkuPagingPage(sku, options);
      }
    };
  }

  private async *listBySkuPagingPage(
    sku: string,
    options?: RegionsListBySkuOptionalParams
  ): AsyncIterableIterator<PremiumMessagingRegions[]> {
    let result = await this._listBySku(sku, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBySkuNext(sku, continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBySkuPagingAll(
    sku: string,
    options?: RegionsListBySkuOptionalParams
  ): AsyncIterableIterator<PremiumMessagingRegions> {
    for await (const page of this.listBySkuPagingPage(sku, options)) {
      yield* page;
    }
  }

  /**
   * Gets the available Regions for a given sku
   * @param sku The sku type.
   * @param options The options parameters.
   */
  private _listBySku(
    sku: string,
    options?: RegionsListBySkuOptionalParams
  ): Promise<RegionsListBySkuResponse> {
    return this.client.sendOperationRequest(
      { sku, options },
      listBySkuOperationSpec
    );
  }

  /**
   * ListBySkuNext
   * @param sku The sku type.
   * @param nextLink The nextLink from the previous successful call to the ListBySku method.
   * @param options The options parameters.
   */
  private _listBySkuNext(
    sku: string,
    nextLink: string,
    options?: RegionsListBySkuNextOptionalParams
  ): Promise<RegionsListBySkuNextResponse> {
    return this.client.sendOperationRequest(
      { sku, nextLink, options },
      listBySkuNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySkuOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.ServiceBus/sku/{sku}/regions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PremiumMessagingRegionsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId, Parameters.sku],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySkuNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PremiumMessagingRegionsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.sku
  ],
  headerParameters: [Parameters.accept],
  serializer
};
