/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import "@azure/core-paging";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  IpFilterRule,
  NamespacesListIpFilterRulesOptionalParams,
  SBNamespace,
  NamespacesListOptionalParams,
  NamespacesListByResourceGroupOptionalParams,
  VirtualNetworkRule,
  NamespacesListVirtualNetworkRulesOptionalParams,
  SBAuthorizationRule,
  NamespacesListAuthorizationRulesOptionalParams,
  NetworkRuleSet,
  NamespacesListNetworkRuleSetsOptionalParams,
  NamespacesCreateOrUpdateIpFilterRuleOptionalParams,
  NamespacesCreateOrUpdateIpFilterRuleResponse,
  NamespacesDeleteIpFilterRuleOptionalParams,
  NamespacesGetIpFilterRuleOptionalParams,
  NamespacesGetIpFilterRuleResponse,
  NamespacesCreateOrUpdateOptionalParams,
  NamespacesCreateOrUpdateResponse,
  NamespacesDeleteOptionalParams,
  NamespacesGetOptionalParams,
  NamespacesGetResponse,
  SBNamespaceUpdateParameters,
  NamespacesUpdateOptionalParams,
  NamespacesUpdateResponse,
  NamespacesCreateOrUpdateVirtualNetworkRuleOptionalParams,
  NamespacesCreateOrUpdateVirtualNetworkRuleResponse,
  NamespacesDeleteVirtualNetworkRuleOptionalParams,
  NamespacesGetVirtualNetworkRuleOptionalParams,
  NamespacesGetVirtualNetworkRuleResponse,
  NamespacesCreateOrUpdateAuthorizationRuleOptionalParams,
  NamespacesCreateOrUpdateAuthorizationRuleResponse,
  NamespacesDeleteAuthorizationRuleOptionalParams,
  NamespacesGetAuthorizationRuleOptionalParams,
  NamespacesGetAuthorizationRuleResponse,
  NamespacesListKeysOptionalParams,
  NamespacesListKeysResponse,
  RegenerateAccessKeyParameters,
  NamespacesRegenerateKeysOptionalParams,
  NamespacesRegenerateKeysResponse,
  CheckNameAvailability,
  NamespacesCheckNameAvailabilityOptionalParams,
  NamespacesCheckNameAvailabilityResponse,
  NamespacesCreateOrUpdateNetworkRuleSetOptionalParams,
  NamespacesCreateOrUpdateNetworkRuleSetResponse,
  NamespacesGetNetworkRuleSetOptionalParams,
  NamespacesGetNetworkRuleSetResponse,
  SBNamespaceMigrate,
  NamespacesMigrateOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Namespaces. */
export interface Namespaces {
  /**
   * Gets a list of IP Filter rules for a Namespace.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param options The options parameters.
   */
  listIpFilterRules(
    resourceGroupName: string,
    namespaceName: string,
    options?: NamespacesListIpFilterRulesOptionalParams
  ): PagedAsyncIterableIterator<IpFilterRule>;
  /**
   * Gets all the available namespaces within the subscription, irrespective of the resource groups.
   * @param options The options parameters.
   */
  list(
    options?: NamespacesListOptionalParams
  ): PagedAsyncIterableIterator<SBNamespace>;
  /**
   * Gets the available namespaces within a resource group.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: NamespacesListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<SBNamespace>;
  /**
   * Gets a list of VirtualNetwork rules for a Namespace.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param options The options parameters.
   */
  listVirtualNetworkRules(
    resourceGroupName: string,
    namespaceName: string,
    options?: NamespacesListVirtualNetworkRulesOptionalParams
  ): PagedAsyncIterableIterator<VirtualNetworkRule>;
  /**
   * Gets the authorization rules for a namespace.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param options The options parameters.
   */
  listAuthorizationRules(
    resourceGroupName: string,
    namespaceName: string,
    options?: NamespacesListAuthorizationRulesOptionalParams
  ): PagedAsyncIterableIterator<SBAuthorizationRule>;
  /**
   * Gets list of NetworkRuleSet for a Namespace.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param options The options parameters.
   */
  listNetworkRuleSets(
    resourceGroupName: string,
    namespaceName: string,
    options?: NamespacesListNetworkRuleSetsOptionalParams
  ): PagedAsyncIterableIterator<NetworkRuleSet>;
  /**
   * Creates or updates an IpFilterRule for a Namespace.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param ipFilterRuleName The IP Filter Rule name.
   * @param parameters The Namespace IpFilterRule.
   * @param options The options parameters.
   */
  createOrUpdateIpFilterRule(
    resourceGroupName: string,
    namespaceName: string,
    ipFilterRuleName: string,
    parameters: IpFilterRule,
    options?: NamespacesCreateOrUpdateIpFilterRuleOptionalParams
  ): Promise<NamespacesCreateOrUpdateIpFilterRuleResponse>;
  /**
   * Deletes an IpFilterRule for a Namespace.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param ipFilterRuleName The IP Filter Rule name.
   * @param options The options parameters.
   */
  deleteIpFilterRule(
    resourceGroupName: string,
    namespaceName: string,
    ipFilterRuleName: string,
    options?: NamespacesDeleteIpFilterRuleOptionalParams
  ): Promise<void>;
  /**
   * Gets an IpFilterRule for a Namespace by rule name.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param ipFilterRuleName The IP Filter Rule name.
   * @param options The options parameters.
   */
  getIpFilterRule(
    resourceGroupName: string,
    namespaceName: string,
    ipFilterRuleName: string,
    options?: NamespacesGetIpFilterRuleOptionalParams
  ): Promise<NamespacesGetIpFilterRuleResponse>;
  /**
   * Creates or updates a service namespace. Once created, this namespace's resource manifest is
   * immutable. This operation is idempotent.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name.
   * @param parameters Parameters supplied to create a namespace resource.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    namespaceName: string,
    parameters: SBNamespace,
    options?: NamespacesCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<NamespacesCreateOrUpdateResponse>,
      NamespacesCreateOrUpdateResponse
    >
  >;
  /**
   * Creates or updates a service namespace. Once created, this namespace's resource manifest is
   * immutable. This operation is idempotent.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name.
   * @param parameters Parameters supplied to create a namespace resource.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    namespaceName: string,
    parameters: SBNamespace,
    options?: NamespacesCreateOrUpdateOptionalParams
  ): Promise<NamespacesCreateOrUpdateResponse>;
  /**
   * Deletes an existing namespace. This operation also removes all associated resources under the
   * namespace.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    namespaceName: string,
    options?: NamespacesDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes an existing namespace. This operation also removes all associated resources under the
   * namespace.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    namespaceName: string,
    options?: NamespacesDeleteOptionalParams
  ): Promise<void>;
  /**
   * Gets a description for the specified namespace.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    namespaceName: string,
    options?: NamespacesGetOptionalParams
  ): Promise<NamespacesGetResponse>;
  /**
   * Updates a service namespace. Once created, this namespace's resource manifest is immutable. This
   * operation is idempotent.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param parameters Parameters supplied to update a namespace resource.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    namespaceName: string,
    parameters: SBNamespaceUpdateParameters,
    options?: NamespacesUpdateOptionalParams
  ): Promise<NamespacesUpdateResponse>;
  /**
   * Creates or updates an VirtualNetworkRule for a Namespace.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param virtualNetworkRuleName The Virtual Network Rule name.
   * @param parameters The Namespace VirtualNetworkRule.
   * @param options The options parameters.
   */
  createOrUpdateVirtualNetworkRule(
    resourceGroupName: string,
    namespaceName: string,
    virtualNetworkRuleName: string,
    parameters: VirtualNetworkRule,
    options?: NamespacesCreateOrUpdateVirtualNetworkRuleOptionalParams
  ): Promise<NamespacesCreateOrUpdateVirtualNetworkRuleResponse>;
  /**
   * Deletes an VirtualNetworkRule for a Namespace.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param virtualNetworkRuleName The Virtual Network Rule name.
   * @param options The options parameters.
   */
  deleteVirtualNetworkRule(
    resourceGroupName: string,
    namespaceName: string,
    virtualNetworkRuleName: string,
    options?: NamespacesDeleteVirtualNetworkRuleOptionalParams
  ): Promise<void>;
  /**
   * Gets an VirtualNetworkRule for a Namespace by rule name.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param virtualNetworkRuleName The Virtual Network Rule name.
   * @param options The options parameters.
   */
  getVirtualNetworkRule(
    resourceGroupName: string,
    namespaceName: string,
    virtualNetworkRuleName: string,
    options?: NamespacesGetVirtualNetworkRuleOptionalParams
  ): Promise<NamespacesGetVirtualNetworkRuleResponse>;
  /**
   * Creates or updates an authorization rule for a namespace.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param authorizationRuleName The authorization rule name.
   * @param parameters The shared access authorization rule.
   * @param options The options parameters.
   */
  createOrUpdateAuthorizationRule(
    resourceGroupName: string,
    namespaceName: string,
    authorizationRuleName: string,
    parameters: SBAuthorizationRule,
    options?: NamespacesCreateOrUpdateAuthorizationRuleOptionalParams
  ): Promise<NamespacesCreateOrUpdateAuthorizationRuleResponse>;
  /**
   * Deletes a namespace authorization rule.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param authorizationRuleName The authorization rule name.
   * @param options The options parameters.
   */
  deleteAuthorizationRule(
    resourceGroupName: string,
    namespaceName: string,
    authorizationRuleName: string,
    options?: NamespacesDeleteAuthorizationRuleOptionalParams
  ): Promise<void>;
  /**
   * Gets an authorization rule for a namespace by rule name.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param authorizationRuleName The authorization rule name.
   * @param options The options parameters.
   */
  getAuthorizationRule(
    resourceGroupName: string,
    namespaceName: string,
    authorizationRuleName: string,
    options?: NamespacesGetAuthorizationRuleOptionalParams
  ): Promise<NamespacesGetAuthorizationRuleResponse>;
  /**
   * Gets the primary and secondary connection strings for the namespace.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param authorizationRuleName The authorization rule name.
   * @param options The options parameters.
   */
  listKeys(
    resourceGroupName: string,
    namespaceName: string,
    authorizationRuleName: string,
    options?: NamespacesListKeysOptionalParams
  ): Promise<NamespacesListKeysResponse>;
  /**
   * Regenerates the primary or secondary connection strings for the namespace.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param authorizationRuleName The authorization rule name.
   * @param parameters Parameters supplied to regenerate the authorization rule.
   * @param options The options parameters.
   */
  regenerateKeys(
    resourceGroupName: string,
    namespaceName: string,
    authorizationRuleName: string,
    parameters: RegenerateAccessKeyParameters,
    options?: NamespacesRegenerateKeysOptionalParams
  ): Promise<NamespacesRegenerateKeysResponse>;
  /**
   * Check the give namespace name availability.
   * @param parameters Parameters to check availability of the given namespace name
   * @param options The options parameters.
   */
  checkNameAvailability(
    parameters: CheckNameAvailability,
    options?: NamespacesCheckNameAvailabilityOptionalParams
  ): Promise<NamespacesCheckNameAvailabilityResponse>;
  /**
   * Create or update NetworkRuleSet for a Namespace.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param parameters The Namespace IpFilterRule.
   * @param options The options parameters.
   */
  createOrUpdateNetworkRuleSet(
    resourceGroupName: string,
    namespaceName: string,
    parameters: NetworkRuleSet,
    options?: NamespacesCreateOrUpdateNetworkRuleSetOptionalParams
  ): Promise<NamespacesCreateOrUpdateNetworkRuleSetResponse>;
  /**
   * Gets NetworkRuleSet for a Namespace.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param options The options parameters.
   */
  getNetworkRuleSet(
    resourceGroupName: string,
    namespaceName: string,
    options?: NamespacesGetNetworkRuleSetOptionalParams
  ): Promise<NamespacesGetNetworkRuleSetResponse>;
  /**
   * This operation Migrate the given namespace to provided name type
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param parameters Parameters supplied to migrate namespace type.
   * @param options The options parameters.
   */
  migrate(
    resourceGroupName: string,
    namespaceName: string,
    parameters: SBNamespaceMigrate,
    options?: NamespacesMigrateOptionalParams
  ): Promise<void>;
}
