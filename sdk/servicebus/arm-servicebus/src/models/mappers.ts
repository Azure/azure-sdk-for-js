/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const SBNamespaceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SBNamespaceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SBNamespace"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SBSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SBSku",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Basic", "Standard", "Premium"]
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "Enum",
          allowedValues: ["Basic", "Standard", "Premium"]
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Identity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Identity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "SystemAssigned",
            "UserAssigned",
            "SystemAssigned, UserAssigned",
            "None"
          ]
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserAssignedIdentity" }
          }
        }
      }
    }
  }
};

export const UserAssignedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const Encryption: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Encryption",
    modelProperties: {
      keyVaultProperties: {
        serializedName: "keyVaultProperties",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "KeyVaultProperties"
            }
          }
        }
      },
      keySource: {
        defaultValue: "Microsoft.KeyVault",
        isConstant: true,
        serializedName: "keySource",
        type: {
          name: "String"
        }
      },
      requireInfrastructureEncryption: {
        serializedName: "requireInfrastructureEncryption",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const KeyVaultProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyVaultProperties",
    modelProperties: {
      keyName: {
        serializedName: "keyName",
        type: {
          name: "String"
        }
      },
      keyVaultUri: {
        serializedName: "keyVaultUri",
        type: {
          name: "String"
        }
      },
      keyVersion: {
        serializedName: "keyVersion",
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "UserAssignedIdentityProperties"
        }
      }
    }
  }
};

export const UserAssignedIdentityProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentityProperties",
    modelProperties: {
      userAssignedIdentity: {
        serializedName: "userAssignedIdentity",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpoint",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectionState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionState",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorResponseError"
        }
      }
    }
  }
};

export const ErrorResponseError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponseError",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorResponse"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const PrivateEndpointConnectionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkResourcesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourcesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      groupId: {
        serializedName: "properties.groupId",
        type: {
          name: "String"
        }
      },
      requiredMembers: {
        serializedName: "properties.requiredMembers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      requiredZoneNames: {
        serializedName: "properties.requiredZoneNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ArmDisasterRecoveryListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArmDisasterRecoveryListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ArmDisasterRecovery"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FailoverProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FailoverProperties",
    modelProperties: {
      isSafeFailover: {
        serializedName: "properties.IsSafeFailover",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const MigrationConfigListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MigrationConfigListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MigrationConfigProperties"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NWRuleSetVirtualNetworkRules: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NWRuleSetVirtualNetworkRules",
    modelProperties: {
      subnet: {
        serializedName: "subnet",
        type: {
          name: "Composite",
          className: "Subnet"
        }
      },
      ignoreMissingVnetServiceEndpoint: {
        serializedName: "ignoreMissingVnetServiceEndpoint",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const Subnet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Subnet",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NWRuleSetIpRules: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NWRuleSetIpRules",
    modelProperties: {
      ipMask: {
        serializedName: "ipMask",
        type: {
          name: "String"
        }
      },
      action: {
        defaultValue: "Allow",
        serializedName: "action",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkRuleSetListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkRuleSetListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkRuleSet"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SBAuthorizationRuleListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SBAuthorizationRuleListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SBAuthorizationRule"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AccessKeys: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccessKeys",
    modelProperties: {
      primaryConnectionString: {
        serializedName: "primaryConnectionString",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      secondaryConnectionString: {
        serializedName: "secondaryConnectionString",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      aliasPrimaryConnectionString: {
        serializedName: "aliasPrimaryConnectionString",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      aliasSecondaryConnectionString: {
        serializedName: "aliasSecondaryConnectionString",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      primaryKey: {
        serializedName: "primaryKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      secondaryKey: {
        serializedName: "secondaryKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      keyName: {
        serializedName: "keyName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegenerateAccessKeyParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegenerateAccessKeyParameters",
    modelProperties: {
      keyType: {
        serializedName: "keyType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["PrimaryKey", "SecondaryKey"]
        }
      },
      key: {
        serializedName: "key",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SBQueueListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SBQueueListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SBQueue"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MessageCountDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MessageCountDetails",
    modelProperties: {
      activeMessageCount: {
        serializedName: "activeMessageCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      deadLetterMessageCount: {
        serializedName: "deadLetterMessageCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      scheduledMessageCount: {
        serializedName: "scheduledMessageCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      transferMessageCount: {
        serializedName: "transferMessageCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      transferDeadLetterMessageCount: {
        serializedName: "transferDeadLetterMessageCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SBTopicListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SBTopicListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SBTopic"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RuleListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RuleListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Rule"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Action: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Action",
    modelProperties: {
      sqlExpression: {
        serializedName: "sqlExpression",
        type: {
          name: "String"
        }
      },
      compatibilityLevel: {
        serializedName: "compatibilityLevel",
        type: {
          name: "Number"
        }
      },
      requiresPreprocessing: {
        defaultValue: true,
        serializedName: "requiresPreprocessing",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SqlFilter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlFilter",
    modelProperties: {
      sqlExpression: {
        serializedName: "sqlExpression",
        type: {
          name: "String"
        }
      },
      compatibilityLevel: {
        serializedName: "compatibilityLevel",
        type: {
          name: "Number"
        }
      },
      requiresPreprocessing: {
        defaultValue: true,
        serializedName: "requiresPreprocessing",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const CorrelationFilter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CorrelationFilter",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      correlationId: {
        serializedName: "correlationId",
        type: {
          name: "String"
        }
      },
      messageId: {
        serializedName: "messageId",
        type: {
          name: "String"
        }
      },
      to: {
        serializedName: "to",
        type: {
          name: "String"
        }
      },
      replyTo: {
        serializedName: "replyTo",
        type: {
          name: "String"
        }
      },
      label: {
        serializedName: "label",
        type: {
          name: "String"
        }
      },
      sessionId: {
        serializedName: "sessionId",
        type: {
          name: "String"
        }
      },
      replyToSessionId: {
        serializedName: "replyToSessionId",
        type: {
          name: "String"
        }
      },
      contentType: {
        serializedName: "contentType",
        type: {
          name: "String"
        }
      },
      requiresPreprocessing: {
        defaultValue: true,
        serializedName: "requiresPreprocessing",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SBSubscriptionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SBSubscriptionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SBSubscription"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SBClientAffineProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SBClientAffineProperties",
    modelProperties: {
      clientId: {
        serializedName: "clientId",
        type: {
          name: "String"
        }
      },
      isDurable: {
        serializedName: "isDurable",
        type: {
          name: "Boolean"
        }
      },
      isShared: {
        serializedName: "isShared",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const CheckNameAvailability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailability",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityResult",
    modelProperties: {
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      nameAvailable: {
        serializedName: "nameAvailable",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "InvalidName",
            "SubscriptionIsDisabled",
            "NameInUse",
            "NameInLockdown",
            "TooManyNamespaceInCurrentSubscription"
          ]
        }
      }
    }
  }
};

export const PrivateEndpointConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      privateEndpoint: {
        serializedName: "properties.privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "properties.privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "ConnectionState"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ArmDisasterRecovery: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArmDisasterRecovery",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Accepted", "Succeeded", "Failed"]
        }
      },
      pendingReplicationOperationsCount: {
        serializedName: "properties.pendingReplicationOperationsCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      partnerNamespace: {
        serializedName: "properties.partnerNamespace",
        type: {
          name: "String"
        }
      },
      alternateName: {
        serializedName: "properties.alternateName",
        type: {
          name: "String"
        }
      },
      role: {
        serializedName: "properties.role",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Primary", "PrimaryNotReplicating", "Secondary"]
        }
      }
    }
  }
};

export const MigrationConfigProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MigrationConfigProperties",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      pendingReplicationOperationsCount: {
        serializedName: "properties.pendingReplicationOperationsCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      targetNamespace: {
        serializedName: "properties.targetNamespace",
        type: {
          name: "String"
        }
      },
      postMigrationName: {
        serializedName: "properties.postMigrationName",
        type: {
          name: "String"
        }
      },
      migrationState: {
        serializedName: "properties.migrationState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkRuleSet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkRuleSet",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      trustedServiceAccessEnabled: {
        serializedName: "properties.trustedServiceAccessEnabled",
        type: {
          name: "Boolean"
        }
      },
      defaultAction: {
        serializedName: "properties.defaultAction",
        type: {
          name: "String"
        }
      },
      virtualNetworkRules: {
        serializedName: "properties.virtualNetworkRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NWRuleSetVirtualNetworkRules"
            }
          }
        }
      },
      ipRules: {
        serializedName: "properties.ipRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NWRuleSetIpRules"
            }
          }
        }
      },
      publicNetworkAccess: {
        defaultValue: "Enabled",
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SBAuthorizationRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SBAuthorizationRule",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      rights: {
        serializedName: "properties.rights",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: ["Manage", "Send", "Listen"]
            }
          }
        }
      }
    }
  }
};

export const SBQueue: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SBQueue",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      countDetails: {
        serializedName: "properties.countDetails",
        type: {
          name: "Composite",
          className: "MessageCountDetails"
        }
      },
      createdAt: {
        serializedName: "properties.createdAt",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      updatedAt: {
        serializedName: "properties.updatedAt",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      accessedAt: {
        serializedName: "properties.accessedAt",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      sizeInBytes: {
        serializedName: "properties.sizeInBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      messageCount: {
        serializedName: "properties.messageCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      lockDuration: {
        serializedName: "properties.lockDuration",
        type: {
          name: "TimeSpan"
        }
      },
      maxSizeInMegabytes: {
        serializedName: "properties.maxSizeInMegabytes",
        type: {
          name: "Number"
        }
      },
      maxMessageSizeInKilobytes: {
        serializedName: "properties.maxMessageSizeInKilobytes",
        type: {
          name: "Number"
        }
      },
      requiresDuplicateDetection: {
        serializedName: "properties.requiresDuplicateDetection",
        type: {
          name: "Boolean"
        }
      },
      requiresSession: {
        serializedName: "properties.requiresSession",
        type: {
          name: "Boolean"
        }
      },
      defaultMessageTimeToLive: {
        serializedName: "properties.defaultMessageTimeToLive",
        type: {
          name: "TimeSpan"
        }
      },
      deadLetteringOnMessageExpiration: {
        serializedName: "properties.deadLetteringOnMessageExpiration",
        type: {
          name: "Boolean"
        }
      },
      duplicateDetectionHistoryTimeWindow: {
        serializedName: "properties.duplicateDetectionHistoryTimeWindow",
        type: {
          name: "TimeSpan"
        }
      },
      maxDeliveryCount: {
        serializedName: "properties.maxDeliveryCount",
        type: {
          name: "Number"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "Enum",
          allowedValues: [
            "Active",
            "Disabled",
            "Restoring",
            "SendDisabled",
            "ReceiveDisabled",
            "Creating",
            "Deleting",
            "Renaming",
            "Unknown"
          ]
        }
      },
      enableBatchedOperations: {
        serializedName: "properties.enableBatchedOperations",
        type: {
          name: "Boolean"
        }
      },
      autoDeleteOnIdle: {
        serializedName: "properties.autoDeleteOnIdle",
        type: {
          name: "TimeSpan"
        }
      },
      enablePartitioning: {
        serializedName: "properties.enablePartitioning",
        type: {
          name: "Boolean"
        }
      },
      enableExpress: {
        serializedName: "properties.enableExpress",
        type: {
          name: "Boolean"
        }
      },
      forwardTo: {
        serializedName: "properties.forwardTo",
        type: {
          name: "String"
        }
      },
      forwardDeadLetteredMessagesTo: {
        serializedName: "properties.forwardDeadLetteredMessagesTo",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SBTopic: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SBTopic",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      sizeInBytes: {
        serializedName: "properties.sizeInBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      createdAt: {
        serializedName: "properties.createdAt",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      updatedAt: {
        serializedName: "properties.updatedAt",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      accessedAt: {
        serializedName: "properties.accessedAt",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      subscriptionCount: {
        serializedName: "properties.subscriptionCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      countDetails: {
        serializedName: "properties.countDetails",
        type: {
          name: "Composite",
          className: "MessageCountDetails"
        }
      },
      defaultMessageTimeToLive: {
        serializedName: "properties.defaultMessageTimeToLive",
        type: {
          name: "TimeSpan"
        }
      },
      maxSizeInMegabytes: {
        serializedName: "properties.maxSizeInMegabytes",
        type: {
          name: "Number"
        }
      },
      maxMessageSizeInKilobytes: {
        serializedName: "properties.maxMessageSizeInKilobytes",
        type: {
          name: "Number"
        }
      },
      requiresDuplicateDetection: {
        serializedName: "properties.requiresDuplicateDetection",
        type: {
          name: "Boolean"
        }
      },
      duplicateDetectionHistoryTimeWindow: {
        serializedName: "properties.duplicateDetectionHistoryTimeWindow",
        type: {
          name: "TimeSpan"
        }
      },
      enableBatchedOperations: {
        serializedName: "properties.enableBatchedOperations",
        type: {
          name: "Boolean"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "Enum",
          allowedValues: [
            "Active",
            "Disabled",
            "Restoring",
            "SendDisabled",
            "ReceiveDisabled",
            "Creating",
            "Deleting",
            "Renaming",
            "Unknown"
          ]
        }
      },
      supportOrdering: {
        serializedName: "properties.supportOrdering",
        type: {
          name: "Boolean"
        }
      },
      autoDeleteOnIdle: {
        serializedName: "properties.autoDeleteOnIdle",
        type: {
          name: "TimeSpan"
        }
      },
      enablePartitioning: {
        serializedName: "properties.enablePartitioning",
        type: {
          name: "Boolean"
        }
      },
      enableExpress: {
        serializedName: "properties.enableExpress",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const Rule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Rule",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      action: {
        serializedName: "properties.action",
        type: {
          name: "Composite",
          className: "Action"
        }
      },
      filterType: {
        serializedName: "properties.filterType",
        type: {
          name: "Enum",
          allowedValues: ["SqlFilter", "CorrelationFilter"]
        }
      },
      sqlFilter: {
        serializedName: "properties.sqlFilter",
        type: {
          name: "Composite",
          className: "SqlFilter"
        }
      },
      correlationFilter: {
        serializedName: "properties.correlationFilter",
        type: {
          name: "Composite",
          className: "CorrelationFilter"
        }
      }
    }
  }
};

export const SBSubscription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SBSubscription",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      messageCount: {
        serializedName: "properties.messageCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      createdAt: {
        serializedName: "properties.createdAt",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      accessedAt: {
        serializedName: "properties.accessedAt",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      updatedAt: {
        serializedName: "properties.updatedAt",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      countDetails: {
        serializedName: "properties.countDetails",
        type: {
          name: "Composite",
          className: "MessageCountDetails"
        }
      },
      lockDuration: {
        serializedName: "properties.lockDuration",
        type: {
          name: "TimeSpan"
        }
      },
      requiresSession: {
        serializedName: "properties.requiresSession",
        type: {
          name: "Boolean"
        }
      },
      defaultMessageTimeToLive: {
        serializedName: "properties.defaultMessageTimeToLive",
        type: {
          name: "TimeSpan"
        }
      },
      deadLetteringOnFilterEvaluationExceptions: {
        serializedName: "properties.deadLetteringOnFilterEvaluationExceptions",
        type: {
          name: "Boolean"
        }
      },
      deadLetteringOnMessageExpiration: {
        serializedName: "properties.deadLetteringOnMessageExpiration",
        type: {
          name: "Boolean"
        }
      },
      duplicateDetectionHistoryTimeWindow: {
        serializedName: "properties.duplicateDetectionHistoryTimeWindow",
        type: {
          name: "TimeSpan"
        }
      },
      maxDeliveryCount: {
        serializedName: "properties.maxDeliveryCount",
        type: {
          name: "Number"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "Enum",
          allowedValues: [
            "Active",
            "Disabled",
            "Restoring",
            "SendDisabled",
            "ReceiveDisabled",
            "Creating",
            "Deleting",
            "Renaming",
            "Unknown"
          ]
        }
      },
      enableBatchedOperations: {
        serializedName: "properties.enableBatchedOperations",
        type: {
          name: "Boolean"
        }
      },
      autoDeleteOnIdle: {
        serializedName: "properties.autoDeleteOnIdle",
        type: {
          name: "TimeSpan"
        }
      },
      forwardTo: {
        serializedName: "properties.forwardTo",
        type: {
          name: "String"
        }
      },
      forwardDeadLetteredMessagesTo: {
        serializedName: "properties.forwardDeadLetteredMessagesTo",
        type: {
          name: "String"
        }
      },
      isClientAffine: {
        serializedName: "properties.isClientAffine",
        type: {
          name: "Boolean"
        }
      },
      clientAffineProperties: {
        serializedName: "properties.clientAffineProperties",
        type: {
          name: "Composite",
          className: "SBClientAffineProperties"
        }
      }
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const ResourceNamespacePatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceNamespacePatch",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const SqlRuleAction: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlRuleAction",
    modelProperties: {
      ...Action.type.modelProperties
    }
  }
};

export const SBNamespace: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SBNamespace",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "SBSku"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "properties.createdAt",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      updatedAt: {
        serializedName: "properties.updatedAt",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      serviceBusEndpoint: {
        serializedName: "properties.serviceBusEndpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      metricId: {
        serializedName: "properties.metricId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      zoneRedundant: {
        serializedName: "properties.zoneRedundant",
        type: {
          name: "Boolean"
        }
      },
      encryption: {
        serializedName: "properties.encryption",
        type: {
          name: "Composite",
          className: "Encryption"
        }
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      },
      disableLocalAuth: {
        serializedName: "properties.disableLocalAuth",
        type: {
          name: "Boolean"
        }
      },
      alternateName: {
        serializedName: "properties.alternateName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SBNamespaceUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SBNamespaceUpdateParameters",
    modelProperties: {
      ...ResourceNamespacePatch.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "SBSku"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "properties.createdAt",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      updatedAt: {
        serializedName: "properties.updatedAt",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      serviceBusEndpoint: {
        serializedName: "properties.serviceBusEndpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      metricId: {
        serializedName: "properties.metricId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      encryption: {
        serializedName: "properties.encryption",
        type: {
          name: "Composite",
          className: "Encryption"
        }
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      },
      disableLocalAuth: {
        serializedName: "properties.disableLocalAuth",
        type: {
          name: "Boolean"
        }
      },
      alternateName: {
        serializedName: "properties.alternateName",
        type: {
          name: "String"
        }
      }
    }
  }
};
