/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * The Resource definition for other than namespace.
 */
export interface Resource extends BaseResource {
  /**
   * Resource Id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * The Resource definition.
 */
export interface TrackedResource extends Resource {
  /**
   * The Geo-location where the resource lives
   */
  location: string;
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The Resource definition.
 */
export interface ResourceNamespacePatch extends Resource {
  /**
   * Resource location
   */
  location?: string;
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
}

/**
 * SKU of the namespace.
 */
export interface SBSku {
  /**
   * Name of this SKU. Possible values include: 'Basic', 'Standard', 'Premium'
   */
  name: SkuName;
  /**
   * The billing tier of this particular SKU. Possible values include: 'Basic', 'Standard',
   * 'Premium'
   */
  tier?: SkuTier;
  /**
   * The specified messaging units for the tier. For Premium tier, capacity are 1,2 and 4.
   */
  capacity?: number;
}

/**
 * Description of a namespace resource.
 */
export interface SBNamespace extends TrackedResource {
  /**
   * Properties of Sku
   */
  sku?: SBSku;
  /**
   * Provisioning state of the namespace.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * The time the namespace was created.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly createdAt?: Date;
  /**
   * The time the namespace was updated.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly updatedAt?: Date;
  /**
   * Endpoint you can use to perform Service Bus operations.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serviceBusEndpoint?: string;
  /**
   * Identifier for Azure Insights metrics
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly metricId?: string;
}

/**
 * Description of a namespace resource.
 */
export interface SBNamespaceUpdateParameters extends ResourceNamespacePatch {
  /**
   * Properties of Sku
   */
  sku?: SBSku;
  /**
   * Provisioning state of the namespace.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * The time the namespace was created.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly createdAt?: Date;
  /**
   * The time the namespace was updated.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly updatedAt?: Date;
  /**
   * Endpoint you can use to perform Service Bus operations.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serviceBusEndpoint?: string;
  /**
   * Identifier for Azure Insights metrics
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly metricId?: string;
}

/**
 * Namespace Migrate Object
 */
export interface SBNamespaceMigrate {
  /**
   * Type of namespaces. Possible values include: 'Messaging', 'NotificationHub', 'Mixed',
   * 'EventHub', 'Relay'
   */
  targetNamespaceType: NameSpaceType;
}

/**
 * Description of a namespace authorization rule.
 */
export interface SBAuthorizationRule extends Resource {
  /**
   * The rights associated with the rule.
   */
  rights: AccessRights[];
}

/**
 * AuthorizationRule properties.
 */
export interface AuthorizationRuleProperties {
  /**
   * The rights associated with the rule.
   */
  rights: AccessRights[];
}

/**
 * Namespace/ServiceBus Connection String
 */
export interface AccessKeys {
  /**
   * Primary connection string of the created namespace authorization rule.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly primaryConnectionString?: string;
  /**
   * Secondary connection string of the created namespace authorization rule.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly secondaryConnectionString?: string;
  /**
   * Primary connection string of the alias if GEO DR is enabled
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly aliasPrimaryConnectionString?: string;
  /**
   * Secondary  connection string of the alias if GEO DR is enabled
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly aliasSecondaryConnectionString?: string;
  /**
   * A base64-encoded 256-bit primary key for signing and validating the SAS token.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly primaryKey?: string;
  /**
   * A base64-encoded 256-bit primary key for signing and validating the SAS token.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly secondaryKey?: string;
  /**
   * A string that describes the authorization rule.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly keyName?: string;
}

/**
 * Parameters supplied to the Regenerate Authorization Rule operation, specifies which key needs to
 * be reset.
 */
export interface RegenerateAccessKeyParameters {
  /**
   * The access key to regenerate. Possible values include: 'PrimaryKey', 'SecondaryKey'
   */
  keyType: KeyType;
  /**
   * Optional, if the key value provided, is reset for KeyType value or autogenerate Key value set
   * for keyType
   */
  key?: string;
}

/**
 * Message Count Details.
 */
export interface MessageCountDetails {
  /**
   * Number of active messages in the queue, topic, or subscription.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly activeMessageCount?: number;
  /**
   * Number of messages that are dead lettered.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly deadLetterMessageCount?: number;
  /**
   * Number of scheduled messages.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly scheduledMessageCount?: number;
  /**
   * Number of messages transferred to another queue, topic, or subscription.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly transferMessageCount?: number;
  /**
   * Number of messages transferred into dead letters.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly transferDeadLetterMessageCount?: number;
}

/**
 * Description of queue Resource.
 */
export interface SBQueue extends Resource {
  /**
   * Message Count Details.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly countDetails?: MessageCountDetails;
  /**
   * The exact time the message was created.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly createdAt?: Date;
  /**
   * The exact time the message was updated.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly updatedAt?: Date;
  /**
   * Last time a message was sent, or the last time there was a receive request to this queue.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly accessedAt?: Date;
  /**
   * The size of the queue, in bytes.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sizeInBytes?: number;
  /**
   * The number of messages in the queue.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly messageCount?: number;
  /**
   * ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the message is
   * locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value
   * is 1 minute.
   */
  lockDuration?: string;
  /**
   * The maximum size of the queue in megabytes, which is the size of memory allocated for the
   * queue. Default is 1024.
   */
  maxSizeInMegabytes?: number;
  /**
   * A value indicating if this queue requires duplicate detection.
   */
  requiresDuplicateDetection?: boolean;
  /**
   * A value that indicates whether the queue supports the concept of sessions.
   */
  requiresSession?: boolean;
  /**
   * ISO 8601 default message timespan to live value. This is the duration after which the message
   * expires, starting from when the message is sent to Service Bus. This is the default value used
   * when TimeToLive is not set on a message itself.
   */
  defaultMessageTimeToLive?: string;
  /**
   * A value that indicates whether this queue has dead letter support when a message expires.
   */
  deadLetteringOnMessageExpiration?: boolean;
  /**
   * ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The
   * default value is 10 minutes.
   */
  duplicateDetectionHistoryTimeWindow?: string;
  /**
   * The maximum delivery count. A message is automatically deadlettered after this number of
   * deliveries. default value is 10.
   */
  maxDeliveryCount?: number;
  /**
   * Enumerates the possible values for the status of a messaging entity. Possible values include:
   * 'Active', 'Disabled', 'Restoring', 'SendDisabled', 'ReceiveDisabled', 'Creating', 'Deleting',
   * 'Renaming', 'Unknown'
   */
  status?: EntityStatus;
  /**
   * Value that indicates whether server-side batched operations are enabled.
   */
  enableBatchedOperations?: boolean;
  /**
   * ISO 8061 timeSpan idle interval after which the queue is automatically deleted. The minimum
   * duration is 5 minutes.
   */
  autoDeleteOnIdle?: string;
  /**
   * A value that indicates whether the queue is to be partitioned across multiple message brokers.
   */
  enablePartitioning?: boolean;
  /**
   * A value that indicates whether Express Entities are enabled. An express queue holds a message
   * in memory temporarily before writing it to persistent storage.
   */
  enableExpress?: boolean;
  /**
   * Queue/Topic name to forward the messages
   */
  forwardTo?: string;
  /**
   * Queue/Topic name to forward the Dead Letter message
   */
  forwardDeadLetteredMessagesTo?: string;
}

/**
 * Description of topic resource.
 */
export interface SBTopic extends Resource {
  /**
   * Size of the topic, in bytes.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sizeInBytes?: number;
  /**
   * Exact time the message was created.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly createdAt?: Date;
  /**
   * The exact time the message was updated.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly updatedAt?: Date;
  /**
   * Last time the message was sent, or a request was received, for this topic.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly accessedAt?: Date;
  /**
   * Number of subscriptions.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly subscriptionCount?: number;
  /**
   * Message count details
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly countDetails?: MessageCountDetails;
  /**
   * ISO 8601 Default message timespan to live value. This is the duration after which the message
   * expires, starting from when the message is sent to Service Bus. This is the default value used
   * when TimeToLive is not set on a message itself.
   */
  defaultMessageTimeToLive?: string;
  /**
   * Maximum size of the topic in megabytes, which is the size of the memory allocated for the
   * topic. Default is 1024.
   */
  maxSizeInMegabytes?: number;
  /**
   * Value indicating if this topic requires duplicate detection.
   */
  requiresDuplicateDetection?: boolean;
  /**
   * ISO8601 timespan structure that defines the duration of the duplicate detection history. The
   * default value is 10 minutes.
   */
  duplicateDetectionHistoryTimeWindow?: string;
  /**
   * Value that indicates whether server-side batched operations are enabled.
   */
  enableBatchedOperations?: boolean;
  /**
   * Enumerates the possible values for the status of a messaging entity. Possible values include:
   * 'Active', 'Disabled', 'Restoring', 'SendDisabled', 'ReceiveDisabled', 'Creating', 'Deleting',
   * 'Renaming', 'Unknown'
   */
  status?: EntityStatus;
  /**
   * Value that indicates whether the topic supports ordering.
   */
  supportOrdering?: boolean;
  /**
   * ISO 8601 timespan idle interval after which the topic is automatically deleted. The minimum
   * duration is 5 minutes.
   */
  autoDeleteOnIdle?: string;
  /**
   * Value that indicates whether the topic to be partitioned across multiple message brokers is
   * enabled.
   */
  enablePartitioning?: boolean;
  /**
   * Value that indicates whether Express Entities are enabled. An express topic holds a message in
   * memory temporarily before writing it to persistent storage.
   */
  enableExpress?: boolean;
}

/**
 * Description of subscription resource.
 */
export interface SBSubscription extends Resource {
  /**
   * Number of messages.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly messageCount?: number;
  /**
   * Exact time the message was created.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly createdAt?: Date;
  /**
   * Last time there was a receive request to this subscription.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly accessedAt?: Date;
  /**
   * The exact time the message was updated.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly updatedAt?: Date;
  /**
   * Message count details
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly countDetails?: MessageCountDetails;
  /**
   * ISO 8061 lock duration timespan for the subscription. The default value is 1 minute.
   */
  lockDuration?: string;
  /**
   * Value indicating if a subscription supports the concept of sessions.
   */
  requiresSession?: boolean;
  /**
   * ISO 8061 Default message timespan to live value. This is the duration after which the message
   * expires, starting from when the message is sent to Service Bus. This is the default value used
   * when TimeToLive is not set on a message itself.
   */
  defaultMessageTimeToLive?: string;
  /**
   * Value that indicates whether a subscription has dead letter support on filter evaluation
   * exceptions.
   */
  deadLetteringOnFilterEvaluationExceptions?: boolean;
  /**
   * Value that indicates whether a subscription has dead letter support when a message expires.
   */
  deadLetteringOnMessageExpiration?: boolean;
  /**
   * ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The
   * default value is 10 minutes.
   */
  duplicateDetectionHistoryTimeWindow?: string;
  /**
   * Number of maximum deliveries.
   */
  maxDeliveryCount?: number;
  /**
   * Enumerates the possible values for the status of a messaging entity. Possible values include:
   * 'Active', 'Disabled', 'Restoring', 'SendDisabled', 'ReceiveDisabled', 'Creating', 'Deleting',
   * 'Renaming', 'Unknown'
   */
  status?: EntityStatus;
  /**
   * Value that indicates whether server-side batched operations are enabled.
   */
  enableBatchedOperations?: boolean;
  /**
   * ISO 8061 timeSpan idle interval after which the topic is automatically deleted. The minimum
   * duration is 5 minutes.
   */
  autoDeleteOnIdle?: string;
  /**
   * Queue/Topic name to forward the messages
   */
  forwardTo?: string;
  /**
   * Queue/Topic name to forward the Dead Letter message
   */
  forwardDeadLetteredMessagesTo?: string;
}

/**
 * Description of a Check Name availability request properties.
 */
export interface CheckNameAvailability {
  /**
   * The Name to check the namespace name availability and The namespace name can contain only
   * letters, numbers, and hyphens. The namespace must start with a letter, and it must end with a
   * letter or number.
   */
  name: string;
}

/**
 * Description of a Check Name availability request properties.
 */
export interface CheckNameAvailabilityResult {
  /**
   * The detailed info regarding the reason associated with the namespace.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
  /**
   * Value indicating namespace is availability, true if the namespace is available; otherwise,
   * false.
   */
  nameAvailable?: boolean;
  /**
   * The reason for unavailability of a namespace. Possible values include: 'None', 'InvalidName',
   * 'SubscriptionIsDisabled', 'NameInUse', 'NameInLockdown',
   * 'TooManyNamespaceInCurrentSubscription'
   */
  reason?: UnavailableReason;
}

/**
 * The object that represents the operation.
 */
export interface OperationDisplay {
  /**
   * Service provider: Microsoft.ServiceBus
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provider?: string;
  /**
   * Resource on which the operation is performed: Invoice, etc.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resource?: string;
  /**
   * Operation type: Read, write, delete, etc.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly operation?: string;
}

/**
 * A ServiceBus REST API operation
 */
export interface Operation {
  /**
   * Operation name: {provider}/{resource}/{operation}
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The object that represents the operation.
   */
  display?: OperationDisplay;
}

/**
 * Error response indicates ServiceBus service is not able to process the incoming request. The
 * reason is provided in the error message.
 */
export interface ErrorResponse {
  /**
   * Error code.
   */
  code?: string;
  /**
   * Error message indicating why the operation failed.
   */
  message?: string;
}

/**
 * Represents the filter actions which are allowed for the transformation of a message that have
 * been matched by a filter expression.
 */
export interface Action {
  /**
   * SQL expression. e.g. MyProperty='ABC'
   */
  sqlExpression?: string;
  /**
   * This property is reserved for future use. An integer value showing the compatibility level,
   * currently hard-coded to 20.
   */
  compatibilityLevel?: number;
  /**
   * Value that indicates whether the rule action requires preprocessing. Default value: true.
   */
  requiresPreprocessing?: boolean;
}

/**
 * Represents a filter which is a composition of an expression and an action that is executed in
 * the pub/sub pipeline.
 */
export interface SqlFilter {
  /**
   * The SQL expression. e.g. MyProperty='ABC'
   */
  sqlExpression?: string;
  /**
   * This property is reserved for future use. An integer value showing the compatibility level,
   * currently hard-coded to 20. Default value: 20.
   */
  compatibilityLevel?: number;
  /**
   * Value that indicates whether the rule action requires preprocessing. Default value: true.
   */
  requiresPreprocessing?: boolean;
}

/**
 * Represents the correlation filter expression.
 */
export interface CorrelationFilter {
  /**
   * dictionary object for custom filters
   */
  properties?: { [propertyName: string]: string };
  /**
   * Identifier of the correlation.
   */
  correlationId?: string;
  /**
   * Identifier of the message.
   */
  messageId?: string;
  /**
   * Address to send to.
   */
  to?: string;
  /**
   * Address of the queue to reply to.
   */
  replyTo?: string;
  /**
   * Application specific label.
   */
  label?: string;
  /**
   * Session identifier.
   */
  sessionId?: string;
  /**
   * Session identifier to reply to.
   */
  replyToSessionId?: string;
  /**
   * Content type of the message.
   */
  contentType?: string;
  /**
   * Value that indicates whether the rule action requires preprocessing. Default value: true.
   */
  requiresPreprocessing?: boolean;
}

/**
 * Description of Rule Resource.
 */
export interface Rule extends Resource {
  /**
   * Represents the filter actions which are allowed for the transformation of a message that have
   * been matched by a filter expression.
   */
  action?: Action;
  /**
   * Filter type that is evaluated against a BrokeredMessage. Possible values include: 'SqlFilter',
   * 'CorrelationFilter'
   */
  filterType?: FilterType;
  /**
   * Properties of sqlFilter
   */
  sqlFilter?: SqlFilter;
  /**
   * Properties of correlationFilter
   */
  correlationFilter?: CorrelationFilter;
}

/**
 * Represents set of actions written in SQL language-based syntax that is performed against a
 * ServiceBus.Messaging.BrokeredMessage
 */
export interface SqlRuleAction extends Action {
}

/**
 * An interface representing PremiumMessagingRegionsProperties.
 */
export interface PremiumMessagingRegionsProperties {
  /**
   * Region code
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly code?: string;
  /**
   * Full name of the region
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullName?: string;
}

/**
 * Premium Messaging Region
 */
export interface PremiumMessagingRegions extends ResourceNamespacePatch {
  properties?: PremiumMessagingRegionsProperties;
}

/**
 * Capture storage details for capture description
 */
export interface Destination {
  /**
   * Name for capture destination
   */
  name?: string;
  /**
   * Resource id of the storage account to be used to create the blobs
   */
  storageAccountResourceId?: string;
  /**
   * Blob container Name
   */
  blobContainer?: string;
  /**
   * Blob naming convention for archive, e.g.
   * {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}. Here all
   * the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
   */
  archiveNameFormat?: string;
}

/**
 * Properties to configure capture description for eventhub
 */
export interface CaptureDescription {
  /**
   * A value that indicates whether capture description is enabled.
   */
  enabled?: boolean;
  /**
   * Enumerates the possible values for the encoding format of capture description. Possible values
   * include: 'Avro', 'AvroDeflate'
   */
  encoding?: EncodingCaptureDescription;
  /**
   * The time window allows you to set the frequency with which the capture to Azure Blobs will
   * happen, value should between 60 to 900 seconds
   */
  intervalInSeconds?: number;
  /**
   * The size window defines the amount of data built up in your Event Hub before an capture
   * operation, value should be between 10485760 and 524288000 bytes
   */
  sizeLimitInBytes?: number;
  /**
   * Properties of Destination where capture will be stored. (Storage Account, Blob Names)
   */
  destination?: Destination;
}

/**
 * Single item in List or Get Event Hub operation
 */
export interface Eventhub extends Resource {
  /**
   * Current number of shards on the Event Hub.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly partitionIds?: string[];
  /**
   * Exact time the Event Hub was created.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly createdAt?: Date;
  /**
   * The exact time the message was updated.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly updatedAt?: Date;
  /**
   * Number of days to retain the events for this Event Hub, value should be 1 to 7 days
   */
  messageRetentionInDays?: number;
  /**
   * Number of partitions created for the Event Hub, allowed values are from 1 to 32 partitions.
   */
  partitionCount?: number;
  /**
   * Enumerates the possible values for the status of the Event Hub. Possible values include:
   * 'Active', 'Disabled', 'Restoring', 'SendDisabled', 'ReceiveDisabled', 'Creating', 'Deleting',
   * 'Renaming', 'Unknown'
   */
  status?: EntityStatus;
  /**
   * Properties of capture description
   */
  captureDescription?: CaptureDescription;
}

/**
 * Single item in List or Get Alias(Disaster Recovery configuration) operation
 */
export interface ArmDisasterRecovery extends Resource {
  /**
   * Provisioning state of the Alias(Disaster Recovery configuration) - possible values 'Accepted'
   * or 'Succeeded' or 'Failed'. Possible values include: 'Accepted', 'Succeeded', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningStateDR;
  /**
   * Number of entities pending to be replicated.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly pendingReplicationOperationsCount?: number;
  /**
   * ARM Id of the Primary/Secondary eventhub namespace name, which is part of GEO DR pairing
   */
  partnerNamespace?: string;
  /**
   * Primary/Secondary eventhub namespace name, which is part of GEO DR pairing
   */
  alternateName?: string;
  /**
   * role of namespace in GEO DR - possible values 'Primary' or 'PrimaryNotReplicating' or
   * 'Secondary'. Possible values include: 'Primary', 'PrimaryNotReplicating', 'Secondary'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly role?: RoleDisasterRecovery;
}

/**
 * Single item in List or Get Migration Config operation
 */
export interface MigrationConfigProperties extends Resource {
  /**
   * Provisioning state of Migration Configuration
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * Number of entities pending to be replicated.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly pendingReplicationOperationsCount?: number;
  /**
   * Existing premium Namespace ARM Id name which has no entities, will be used for migration
   */
  targetNamespace: string;
  /**
   * Name to access Standard Namespace after migration
   */
  postMigrationName: string;
  /**
   * State in which Standard to Premium Migration is, possible values : Unknown, Reverting,
   * Completing, Initiating, Syncing, Active
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly migrationState?: string;
}

/**
 * Properties supplied for Subnet
 */
export interface Subnet {
  /**
   * Resource ID of Virtual Network Subnet
   */
  id: string;
}

/**
 * Description of NetWorkRuleSet - IpRules resource.
 */
export interface NWRuleSetIpRules {
  /**
   * IP Mask
   */
  ipMask?: string;
  /**
   * The IP Filter Action. Possible values include: 'Allow'. Default value: 'Allow'.
   */
  action?: NetworkRuleIPAction;
}

/**
 * Description of VirtualNetworkRules - NetworkRules resource.
 */
export interface NWRuleSetVirtualNetworkRules {
  /**
   * Subnet properties
   */
  subnet?: Subnet;
  /**
   * Value that indicates whether to ignore missing VNet Service Endpoint
   */
  ignoreMissingVnetServiceEndpoint?: boolean;
}

/**
 * Description of NetworkRuleSet resource.
 */
export interface NetworkRuleSet extends Resource {
  /**
   * Default Action for Network Rule Set. Possible values include: 'Allow', 'Deny'
   */
  defaultAction?: DefaultAction;
  /**
   * List VirtualNetwork Rules
   */
  virtualNetworkRules?: NWRuleSetVirtualNetworkRules[];
  /**
   * List of IpRules
   */
  ipRules?: NWRuleSetIpRules[];
}

/**
 * Optional Parameters.
 */
export interface QueuesListByNamespaceOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Skip is only used if a previous operation returned a partial result. If a previous response
   * contains a nextLink element, the value of the nextLink element will include a skip parameter
   * that specifies a starting point to use for subsequent calls.
   */
  skip?: number;
  /**
   * May be used to limit the number of results to the most recent N usageDetails.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface TopicsListByNamespaceOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Skip is only used if a previous operation returned a partial result. If a previous response
   * contains a nextLink element, the value of the nextLink element will include a skip parameter
   * that specifies a starting point to use for subsequent calls.
   */
  skip?: number;
  /**
   * May be used to limit the number of results to the most recent N usageDetails.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface SubscriptionsListByTopicOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Skip is only used if a previous operation returned a partial result. If a previous response
   * contains a nextLink element, the value of the nextLink element will include a skip parameter
   * that specifies a starting point to use for subsequent calls.
   */
  skip?: number;
  /**
   * May be used to limit the number of results to the most recent N usageDetails.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface RulesListBySubscriptionsOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Skip is only used if a previous operation returned a partial result. If a previous response
   * contains a nextLink element, the value of the nextLink element will include a skip parameter
   * that specifies a starting point to use for subsequent calls.
   */
  skip?: number;
  /**
   * May be used to limit the number of results to the most recent N usageDetails.
   */
  top?: number;
}

/**
 * An interface representing ServiceBusManagementClientOptions.
 */
export interface ServiceBusManagementClientOptions extends AzureServiceClientOptions {
  baseUri?: string;
}

/**
 * @interface
 * Result of the request to list ServiceBus operations. It contains a list of operations and a URL
 * link to get the next set of results.
 * @extends Array<Operation>
 */
export interface OperationListResult extends Array<Operation> {
  /**
   * URL to get the next set of operation list results if there are any.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * The response of the List Namespace operation.
 * @extends Array<SBNamespace>
 */
export interface SBNamespaceListResult extends Array<SBNamespace> {
  /**
   * Link to the next set of results. Not empty if Value contains incomplete list of Namespaces.
   */
  nextLink?: string;
}

/**
 * @interface
 * The response to the List Namespace operation.
 * @extends Array<SBAuthorizationRule>
 */
export interface SBAuthorizationRuleListResult extends Array<SBAuthorizationRule> {
  /**
   * Link to the next set of results. Not empty if Value contains incomplete list of Authorization
   * Rules.
   */
  nextLink?: string;
}

/**
 * @interface
 * The response of the List NetworkRuleSet operation.
 * @extends Array<NetworkRuleSet>
 */
export interface NetworkRuleSetListResult extends Array<NetworkRuleSet> {
  /**
   * Link to the next set of results. Not empty if Value contains incomplete list of
   * NetworkRuleSet.
   */
  nextLink?: string;
}

/**
 * @interface
 * The result of the List Alias(Disaster Recovery configuration) operation.
 * @extends Array<ArmDisasterRecovery>
 */
export interface ArmDisasterRecoveryListResult extends Array<ArmDisasterRecovery> {
  /**
   * Link to the next set of results. Not empty if Value contains incomplete list of Alias(Disaster
   * Recovery configuration)
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * The result of the List migrationConfigurations operation.
 * @extends Array<MigrationConfigProperties>
 */
export interface MigrationConfigListResult extends Array<MigrationConfigProperties> {
  /**
   * Link to the next set of results. Not empty if Value contains incomplete list of
   * migrationConfigurations
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * The response to the List Queues operation.
 * @extends Array<SBQueue>
 */
export interface SBQueueListResult extends Array<SBQueue> {
  /**
   * Link to the next set of results. Not empty if Value contains incomplete list of queues.
   */
  nextLink?: string;
}

/**
 * @interface
 * The response to the List Topics operation.
 * @extends Array<SBTopic>
 */
export interface SBTopicListResult extends Array<SBTopic> {
  /**
   * Link to the next set of results. Not empty if Value contains incomplete list of topics.
   */
  nextLink?: string;
}

/**
 * @interface
 * The response to the List Subscriptions operation.
 * @extends Array<SBSubscription>
 */
export interface SBSubscriptionListResult extends Array<SBSubscription> {
  /**
   * Link to the next set of results. Not empty if Value contains incomplete list of subscriptions.
   */
  nextLink?: string;
}

/**
 * @interface
 * The response of the List rule operation.
 * @extends Array<Rule>
 */
export interface RuleListResult extends Array<Rule> {
  /**
   * Link to the next set of results. Not empty if Value contains incomplete list of rules
   */
  nextLink?: string;
}

/**
 * @interface
 * The response of the List PremiumMessagingRegions operation.
 * @extends Array<PremiumMessagingRegions>
 */
export interface PremiumMessagingRegionsListResult extends Array<PremiumMessagingRegions> {
  /**
   * Link to the next set of results. Not empty if Value contains incomplete list of
   * PremiumMessagingRegions.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * The result of the List EventHubs operation.
 * @extends Array<Eventhub>
 */
export interface EventHubListResult extends Array<Eventhub> {
  /**
   * Link to the next set of results. Not empty if Value contains incomplete list of EventHubs.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * Defines values for SkuName.
 * Possible values include: 'Basic', 'Standard', 'Premium'
 * @readonly
 * @enum {string}
 */
export type SkuName = 'Basic' | 'Standard' | 'Premium';

/**
 * Defines values for SkuTier.
 * Possible values include: 'Basic', 'Standard', 'Premium'
 * @readonly
 * @enum {string}
 */
export type SkuTier = 'Basic' | 'Standard' | 'Premium';

/**
 * Defines values for NameSpaceType.
 * Possible values include: 'Messaging', 'NotificationHub', 'Mixed', 'EventHub', 'Relay'
 * @readonly
 * @enum {string}
 */
export type NameSpaceType = 'Messaging' | 'NotificationHub' | 'Mixed' | 'EventHub' | 'Relay';

/**
 * Defines values for AccessRights.
 * Possible values include: 'Manage', 'Send', 'Listen'
 * @readonly
 * @enum {string}
 */
export type AccessRights = 'Manage' | 'Send' | 'Listen';

/**
 * Defines values for KeyType.
 * Possible values include: 'PrimaryKey', 'SecondaryKey'
 * @readonly
 * @enum {string}
 */
export type KeyType = 'PrimaryKey' | 'SecondaryKey';

/**
 * Defines values for EntityStatus.
 * Possible values include: 'Active', 'Disabled', 'Restoring', 'SendDisabled', 'ReceiveDisabled',
 * 'Creating', 'Deleting', 'Renaming', 'Unknown'
 * @readonly
 * @enum {string}
 */
export type EntityStatus = 'Active' | 'Disabled' | 'Restoring' | 'SendDisabled' | 'ReceiveDisabled' | 'Creating' | 'Deleting' | 'Renaming' | 'Unknown';

/**
 * Defines values for UnavailableReason.
 * Possible values include: 'None', 'InvalidName', 'SubscriptionIsDisabled', 'NameInUse',
 * 'NameInLockdown', 'TooManyNamespaceInCurrentSubscription'
 * @readonly
 * @enum {string}
 */
export type UnavailableReason = 'None' | 'InvalidName' | 'SubscriptionIsDisabled' | 'NameInUse' | 'NameInLockdown' | 'TooManyNamespaceInCurrentSubscription';

/**
 * Defines values for FilterType.
 * Possible values include: 'SqlFilter', 'CorrelationFilter'
 * @readonly
 * @enum {string}
 */
export type FilterType = 'SqlFilter' | 'CorrelationFilter';

/**
 * Defines values for EncodingCaptureDescription.
 * Possible values include: 'Avro', 'AvroDeflate'
 * @readonly
 * @enum {string}
 */
export type EncodingCaptureDescription = 'Avro' | 'AvroDeflate';

/**
 * Defines values for ProvisioningStateDR.
 * Possible values include: 'Accepted', 'Succeeded', 'Failed'
 * @readonly
 * @enum {string}
 */
export type ProvisioningStateDR = 'Accepted' | 'Succeeded' | 'Failed';

/**
 * Defines values for RoleDisasterRecovery.
 * Possible values include: 'Primary', 'PrimaryNotReplicating', 'Secondary'
 * @readonly
 * @enum {string}
 */
export type RoleDisasterRecovery = 'Primary' | 'PrimaryNotReplicating' | 'Secondary';

/**
 * Defines values for NetworkRuleIPAction.
 * Possible values include: 'Allow'
 * @readonly
 * @enum {string}
 */
export type NetworkRuleIPAction = 'Allow';

/**
 * Defines values for DefaultAction.
 * Possible values include: 'Allow', 'Deny'
 * @readonly
 * @enum {string}
 */
export type DefaultAction = 'Allow' | 'Deny';

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the checkNameAvailabilityMethod operation.
 */
export type NamespacesCheckNameAvailabilityMethodResponse = CheckNameAvailabilityResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CheckNameAvailabilityResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type NamespacesListResponse = SBNamespaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SBNamespaceListResult;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type NamespacesListByResourceGroupResponse = SBNamespaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SBNamespaceListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type NamespacesCreateOrUpdateResponse = SBNamespace & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SBNamespace;
    };
};

/**
 * Contains response data for the get operation.
 */
export type NamespacesGetResponse = SBNamespace & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SBNamespace;
    };
};

/**
 * Contains response data for the update operation.
 */
export type NamespacesUpdateResponse = SBNamespace & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SBNamespace;
    };
};

/**
 * Contains response data for the listAuthorizationRules operation.
 */
export type NamespacesListAuthorizationRulesResponse = SBAuthorizationRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SBAuthorizationRuleListResult;
    };
};

/**
 * Contains response data for the createOrUpdateAuthorizationRule operation.
 */
export type NamespacesCreateOrUpdateAuthorizationRuleResponse = SBAuthorizationRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SBAuthorizationRule;
    };
};

/**
 * Contains response data for the getAuthorizationRule operation.
 */
export type NamespacesGetAuthorizationRuleResponse = SBAuthorizationRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SBAuthorizationRule;
    };
};

/**
 * Contains response data for the listKeys operation.
 */
export type NamespacesListKeysResponse = AccessKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AccessKeys;
    };
};

/**
 * Contains response data for the regenerateKeys operation.
 */
export type NamespacesRegenerateKeysResponse = AccessKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AccessKeys;
    };
};

/**
 * Contains response data for the createOrUpdateNetworkRuleSet operation.
 */
export type NamespacesCreateOrUpdateNetworkRuleSetResponse = NetworkRuleSet & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkRuleSet;
    };
};

/**
 * Contains response data for the getNetworkRuleSet operation.
 */
export type NamespacesGetNetworkRuleSetResponse = NetworkRuleSet & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkRuleSet;
    };
};

/**
 * Contains response data for the listNetworkRuleSets operation.
 */
export type NamespacesListNetworkRuleSetsResponse = NetworkRuleSetListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkRuleSetListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type NamespacesBeginCreateOrUpdateResponse = SBNamespace & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SBNamespace;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type NamespacesListNextResponse = SBNamespaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SBNamespaceListResult;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type NamespacesListByResourceGroupNextResponse = SBNamespaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SBNamespaceListResult;
    };
};

/**
 * Contains response data for the listAuthorizationRulesNext operation.
 */
export type NamespacesListAuthorizationRulesNextResponse = SBAuthorizationRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SBAuthorizationRuleListResult;
    };
};

/**
 * Contains response data for the listNetworkRuleSetsNext operation.
 */
export type NamespacesListNetworkRuleSetsNextResponse = NetworkRuleSetListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkRuleSetListResult;
    };
};

/**
 * Contains response data for the checkNameAvailabilityMethod operation.
 */
export type DisasterRecoveryConfigsCheckNameAvailabilityMethodResponse = CheckNameAvailabilityResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CheckNameAvailabilityResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type DisasterRecoveryConfigsListResponse = ArmDisasterRecoveryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ArmDisasterRecoveryListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DisasterRecoveryConfigsCreateOrUpdateResponse = ArmDisasterRecovery & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ArmDisasterRecovery;
    };
};

/**
 * Contains response data for the get operation.
 */
export type DisasterRecoveryConfigsGetResponse = ArmDisasterRecovery & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ArmDisasterRecovery;
    };
};

/**
 * Contains response data for the listAuthorizationRules operation.
 */
export type DisasterRecoveryConfigsListAuthorizationRulesResponse = SBAuthorizationRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SBAuthorizationRuleListResult;
    };
};

/**
 * Contains response data for the getAuthorizationRule operation.
 */
export type DisasterRecoveryConfigsGetAuthorizationRuleResponse = SBAuthorizationRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SBAuthorizationRule;
    };
};

/**
 * Contains response data for the listKeys operation.
 */
export type DisasterRecoveryConfigsListKeysResponse = AccessKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AccessKeys;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type DisasterRecoveryConfigsListNextResponse = ArmDisasterRecoveryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ArmDisasterRecoveryListResult;
    };
};

/**
 * Contains response data for the listAuthorizationRulesNext operation.
 */
export type DisasterRecoveryConfigsListAuthorizationRulesNextResponse = SBAuthorizationRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SBAuthorizationRuleListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type MigrationConfigsListResponse = MigrationConfigListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MigrationConfigListResult;
    };
};

/**
 * Contains response data for the createAndStartMigration operation.
 */
export type MigrationConfigsCreateAndStartMigrationResponse = MigrationConfigProperties & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MigrationConfigProperties;
    };
};

/**
 * Contains response data for the get operation.
 */
export type MigrationConfigsGetResponse = MigrationConfigProperties & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MigrationConfigProperties;
    };
};

/**
 * Contains response data for the beginCreateAndStartMigration operation.
 */
export type MigrationConfigsBeginCreateAndStartMigrationResponse = MigrationConfigProperties & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MigrationConfigProperties;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type MigrationConfigsListNextResponse = MigrationConfigListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MigrationConfigListResult;
    };
};

/**
 * Contains response data for the listByNamespace operation.
 */
export type QueuesListByNamespaceResponse = SBQueueListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SBQueueListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type QueuesCreateOrUpdateResponse = SBQueue & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SBQueue;
    };
};

/**
 * Contains response data for the get operation.
 */
export type QueuesGetResponse = SBQueue & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SBQueue;
    };
};

/**
 * Contains response data for the listAuthorizationRules operation.
 */
export type QueuesListAuthorizationRulesResponse = SBAuthorizationRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SBAuthorizationRuleListResult;
    };
};

/**
 * Contains response data for the createOrUpdateAuthorizationRule operation.
 */
export type QueuesCreateOrUpdateAuthorizationRuleResponse = SBAuthorizationRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SBAuthorizationRule;
    };
};

/**
 * Contains response data for the getAuthorizationRule operation.
 */
export type QueuesGetAuthorizationRuleResponse = SBAuthorizationRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SBAuthorizationRule;
    };
};

/**
 * Contains response data for the listKeys operation.
 */
export type QueuesListKeysResponse = AccessKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AccessKeys;
    };
};

/**
 * Contains response data for the regenerateKeys operation.
 */
export type QueuesRegenerateKeysResponse = AccessKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AccessKeys;
    };
};

/**
 * Contains response data for the listByNamespaceNext operation.
 */
export type QueuesListByNamespaceNextResponse = SBQueueListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SBQueueListResult;
    };
};

/**
 * Contains response data for the listAuthorizationRulesNext operation.
 */
export type QueuesListAuthorizationRulesNextResponse = SBAuthorizationRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SBAuthorizationRuleListResult;
    };
};

/**
 * Contains response data for the listByNamespace operation.
 */
export type TopicsListByNamespaceResponse = SBTopicListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SBTopicListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type TopicsCreateOrUpdateResponse = SBTopic & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SBTopic;
    };
};

/**
 * Contains response data for the get operation.
 */
export type TopicsGetResponse = SBTopic & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SBTopic;
    };
};

/**
 * Contains response data for the listAuthorizationRules operation.
 */
export type TopicsListAuthorizationRulesResponse = SBAuthorizationRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SBAuthorizationRuleListResult;
    };
};

/**
 * Contains response data for the createOrUpdateAuthorizationRule operation.
 */
export type TopicsCreateOrUpdateAuthorizationRuleResponse = SBAuthorizationRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SBAuthorizationRule;
    };
};

/**
 * Contains response data for the getAuthorizationRule operation.
 */
export type TopicsGetAuthorizationRuleResponse = SBAuthorizationRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SBAuthorizationRule;
    };
};

/**
 * Contains response data for the listKeys operation.
 */
export type TopicsListKeysResponse = AccessKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AccessKeys;
    };
};

/**
 * Contains response data for the regenerateKeys operation.
 */
export type TopicsRegenerateKeysResponse = AccessKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AccessKeys;
    };
};

/**
 * Contains response data for the listByNamespaceNext operation.
 */
export type TopicsListByNamespaceNextResponse = SBTopicListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SBTopicListResult;
    };
};

/**
 * Contains response data for the listAuthorizationRulesNext operation.
 */
export type TopicsListAuthorizationRulesNextResponse = SBAuthorizationRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SBAuthorizationRuleListResult;
    };
};

/**
 * Contains response data for the listByTopic operation.
 */
export type SubscriptionsListByTopicResponse = SBSubscriptionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SBSubscriptionListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type SubscriptionsCreateOrUpdateResponse = SBSubscription & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SBSubscription;
    };
};

/**
 * Contains response data for the get operation.
 */
export type SubscriptionsGetResponse = SBSubscription & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SBSubscription;
    };
};

/**
 * Contains response data for the listByTopicNext operation.
 */
export type SubscriptionsListByTopicNextResponse = SBSubscriptionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SBSubscriptionListResult;
    };
};

/**
 * Contains response data for the listBySubscriptions operation.
 */
export type RulesListBySubscriptionsResponse = RuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RuleListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type RulesCreateOrUpdateResponse = Rule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Rule;
    };
};

/**
 * Contains response data for the get operation.
 */
export type RulesGetResponse = Rule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Rule;
    };
};

/**
 * Contains response data for the listBySubscriptionsNext operation.
 */
export type RulesListBySubscriptionsNextResponse = RuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RuleListResult;
    };
};

/**
 * Contains response data for the listBySku operation.
 */
export type RegionsListBySkuResponse = PremiumMessagingRegionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PremiumMessagingRegionsListResult;
    };
};

/**
 * Contains response data for the listBySkuNext operation.
 */
export type RegionsListBySkuNextResponse = PremiumMessagingRegionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PremiumMessagingRegionsListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type PremiumMessagingRegionsListResponse = PremiumMessagingRegionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PremiumMessagingRegionsListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type PremiumMessagingRegionsListNextResponse = PremiumMessagingRegionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PremiumMessagingRegionsListResult;
    };
};

/**
 * Contains response data for the listByNamespace operation.
 */
export type EventHubsListByNamespaceResponse = EventHubListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EventHubListResult;
    };
};

/**
 * Contains response data for the listByNamespaceNext operation.
 */
export type EventHubsListByNamespaceNextResponse = EventHubListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EventHubListResult;
    };
};
