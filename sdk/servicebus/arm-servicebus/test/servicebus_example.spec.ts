/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { env, Recorder, RecorderStartOptions, isPlaybackMode } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { ServiceBusManagementClient } from "../src/serviceBusManagementClient.js";
import { describe, it, assert, beforeEach, afterEach } from "vitest";

const replaceableVariables: Record<string, string> = {
  AZURE_CLIENT_ID: "azure_client_id",
  AZURE_CLIENT_SECRET: "azure_client_secret",
  AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
  SUBSCRIPTION_ID: "azure_subscription_id",
};

const recorderOptions: RecorderStartOptions = {
  envSetupForPlayback: replaceableVariables,
  removeCentralSanitizers: [
    "AZSDK3493", // .name in the body is not a secret and is listed below in the beforeEach section
    "AZSDK3430", // .id in the body is not a secret and is listed below in the beforeEach section
  ],
};

export const testPollingOptions = {
  updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};

describe("ServiceBus test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: ServiceBusManagementClient;
  let location: string;
  let resourceGroup: string;
  let namespacesName: string;
  let queueName: string;
  let topicName: string;

  beforeEach(async (ctx) => {
    recorder = new Recorder(ctx);
    await recorder.start(recorderOptions);
    subscriptionId = env.SUBSCRIPTION_ID || "";
    // This is an example of how the environment variables are used
    const credential = createTestCredential();
    client = new ServiceBusManagementClient(
      credential,
      subscriptionId,
      recorder.configureClientOptions({}),
    );
    location = "eastus";
    resourceGroup = "myjstest";
    namespacesName = "mynamespacexxx";
    queueName = "myQueue";
    topicName = "mytopic";
  });

  afterEach(async () => {
    await recorder.stop();
  });

  it("namespaces create test", async () => {
    const res = await client.namespaces.beginCreateOrUpdateAndWait(
      resourceGroup,
      namespacesName,
      {
        sku: {
          name: "Standard",
          tier: "Standard",
        },
        location: location,
        tags: {
          tag1: "value1",
          tag2: "value2",
        },
      },
      testPollingOptions,
    );
    assert.equal(res.name, namespacesName);
  });

  it("queues create test", async () => {
    const res = await client.queues.createOrUpdate(resourceGroup, namespacesName, queueName, {
      enablePartitioning: true,
    });
    assert.equal(res.name, queueName);
  });

  it("queues get test", async () => {
    const res = await client.queues.get(resourceGroup, namespacesName, queueName);
    assert.equal(res.name, queueName);
  });

  it("queues list test", async () => {
    const resArray = new Array();
    for await (let item of client.queues.listByNamespace(resourceGroup, namespacesName)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 1);
  });

  it("topics create test", async () => {
    const res = await client.topics.createOrUpdate(resourceGroup, namespacesName, topicName, {
      enableExpress: true,
    });
    assert.equal(res.name, topicName);
  });

  it("topics get test", async () => {
    const res = await client.topics.get(resourceGroup, namespacesName, topicName);
    assert.equal(res.name, topicName);
  });

  it("topics list test", async () => {
    const resArray = new Array();
    for await (let item of client.topics.listByNamespace(resourceGroup, namespacesName)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 1);
  });

  it("queues delete test", async () => {
    const resArray = new Array();
    await client.queues.delete(resourceGroup, namespacesName, queueName);
    for await (let item of client.queues.listByNamespace(resourceGroup, namespacesName)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });

  it("topics delete test", async () => {
    const resArray = new Array();
    await client.topics.delete(resourceGroup, namespacesName, topicName);
    for await (let item of client.topics.listByNamespace(resourceGroup, namespacesName)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });

  it("namespaces delete test", async () => {
    await client.namespaces.beginDeleteAndWait(resourceGroup, namespacesName, testPollingOptions);
  });
});
