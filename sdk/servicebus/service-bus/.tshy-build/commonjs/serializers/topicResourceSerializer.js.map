{"version":3,"file":"topicResourceSerializer.js","sourceRoot":"","sources":["../../../src/serializers/topicResourceSerializer.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAyBlC,8CAwBC;AAOD,gCAwCC;AAOD,kEAWC;;AA9GD,+DAAiG;AACjG,wEAAkD;AAElD,+CAU0B;AAE1B;;;;;GAKG;AACH,SAAgB,iBAAiB,CAAC,KAAyB;IACzD,OAAO;QACL,mGAAmG;QACnG,mGAAmG;QACnG,wBAAwB;QACxB,EAAE;QACF,0CAA0C;QAC1C,0LAA0L;QAE1L,wBAAwB,EAAE,KAAK,CAAC,wBAAwB;QACxD,kBAAkB,EAAE,IAAA,+BAAoB,EAAC,KAAK,CAAC,kBAAkB,CAAC;QAClE,0BAA0B,EAAE,IAAA,+BAAoB,EAAC,KAAK,CAAC,0BAA0B,CAAC;QAClF,mCAAmC,EAAE,KAAK,CAAC,mCAAmC;QAC9E,uBAAuB,EAAE,IAAA,+BAAoB,EAAC,KAAK,CAAC,uBAAuB,CAAC;QAC5E,kBAAkB,EAAE,IAAA,mCAAwB,EAAC,KAAK,CAAC,kBAAkB,CAAC;QACtE,MAAM,EAAE,IAAA,+BAAoB,EAAC,KAAK,CAAC,MAAM,CAAC;QAC1C,YAAY,EAAE,IAAA,+BAAoB,EAAC,KAAK,CAAC,YAAY,CAAC;QACtD,eAAe,EAAE,IAAA,+BAAoB,EAAC,KAAK,CAAC,eAAe,CAAC;QAC5D,gBAAgB,EAAE,IAAA,+BAAoB,EAAC,KAAK,CAAC,gBAAgB,CAAC;QAC9D,kBAAkB,EAAE,IAAA,+BAAoB,EAAC,KAAK,CAAC,kBAAkB,CAAC;QAClE,wBAAwB,EAAE,IAAA,+BAAoB,EAAC,KAAK,CAAC,kBAAkB,CAAC;QACxE,aAAa,EAAE,IAAA,+BAAoB,EAAC,KAAK,CAAC,aAAa,CAAC;QACxD,yBAAyB,EAAE,IAAA,+BAAoB,EAAC,KAAK,CAAC,yBAAyB,CAAC;KACjF,CAAC;AACJ,CAAC;AAED;;;;GAIG;AACH,SAAgB,UAAU,CAAC,QAA6B;IACtD,OAAO;QACL,IAAI,EAAE,IAAA,oBAAS,EAAC,QAAQ,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,WAAW,CAAC;QAC5D,kBAAkB,EAAE,IAAA,qBAAU,EAAC,QAAQ,CAAC,SAAS,CAAC,qBAAqB,CAAC,EAAE,oBAAoB,CAAC;QAE/F,kBAAkB,EAAE,IAAA,qBAAU,EAAC,QAAQ,CAAC,SAAS,CAAC,mBAAmB,CAAC,EAAE,oBAAoB,CAAC;QAC7F,eAAe,EAAE,IAAA,qBAAU,EAAC,QAAQ,CAAC,SAAS,CAAC,gBAAgB,CAAC,EAAE,iBAAiB,CAAC;QACpF,uBAAuB,EAAE,IAAA,qBAAU,EACjC,QAAQ,CAAC,SAAS,CAAC,yBAAyB,CAAC,EAC7C,yBAAyB,CAC1B;QAED,wBAAwB,EAAE,IAAA,oBAAS,EACjC,QAAQ,CAAC,SAAS,CAAC,4BAA4B,CAAC,EAChD,0BAA0B,CAC3B;QACD,gBAAgB,EAAE,QAAQ,CAAC,SAAS,CAAC,mBAAmB,CAAC;QAEzD,0BAA0B,EAAE,IAAA,qBAAU,EACpC,QAAQ,CAAC,SAAS,CAAC,4BAA4B,CAAC,EAChD,4BAA4B,CAC7B;QACD,mCAAmC,EAAE,IAAA,oBAAS,EAC5C,QAAQ,CAAC,SAAS,CAAC,uCAAuC,CAAC,EAC3D,qCAAqC,CACtC;QAED,kBAAkB,EAAE,IAAA,2CAAgC,EAAC,QAAQ,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;QAC7F,YAAY,EAAE,QAAQ,CAAC,SAAS,CAAC,aAAa,CAAC;QAE/C,MAAM,EAAE,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC;QAElC,aAAa,EAAE,IAAA,qBAAU,EAAC,QAAQ,CAAC,SAAS,CAAC,cAAc,CAAC,EAAE,eAAe,CAAC;QAE9E,kBAAkB,EAAE,QAAQ,CAAC,SAAS,CAAC,0BAA0B,CAAC;QAElE,yBAAyB,EAAE,IAAA,gCAAqB,EAC9C,QAAQ,CAAC,SAAS,CAAC,6BAA6B,CAAC,CAClD;KACF,CAAC;AACJ,CAAC;AAED;;;;GAIG;AACH,SAAgB,2BAA2B,CAAC,QAA6B;IACvE,OAAO;QACL,IAAI,EAAE,IAAA,oBAAS,EAAC,QAAQ,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,WAAW,CAAC;QAC5D,WAAW,EAAE,IAAA,gCAAqB,EAAC,QAAQ,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;QACrE,iBAAiB,EAAE,IAAA,gCAAqB,EAAC,QAAQ,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC;QAChF,SAAS,EAAE,IAAA,kBAAO,EAAC,QAAQ,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,WAAW,CAAC;QAC/D,qBAAqB,EAAE,IAAA,iCAAsB,EAAC,QAAQ,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;aAC7E,qBAAqB;QACxB,UAAU,EAAE,IAAA,kBAAO,EAAC,QAAQ,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,YAAY,CAAC;QACjE,UAAU,EAAE,IAAA,kBAAO,EAAC,QAAQ,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,YAAY,CAAC;KACnE,CAAC;AACJ,CAAC;AAoWD;;;GAGG;AACH,MAAa,uBAAuB;IAClC,SAAS,CAAC,QAA8B;QACtC,OAAO,IAAA,4CAAyB,EAAC,kBAAkB,EAAE,QAAQ,CAAC,CAAC;IACjE,CAAC;IACD,KAAK,CAAC,WAAW,CAAC,QAA+B;QAC/C,OAAO,IAAA,6CAA0B,EAAC,CAAC,WAAW,CAAC,EAAE,QAAQ,CAAC,CAAC;IAC7D,CAAC;CACF;AAPD,0DAOC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { FullOperationResponse, OperationOptions } from \"@azure/core-client\";\nimport type { AtomXmlSerializer } from \"../util/atomXmlHelper.js\";\nimport { deserializeAtomXmlResponse, serializeToAtomXmlRequest } from \"../util/atomXmlHelper.js\";\nimport * as Constants from \"../util/constants.js\";\nimport type { AuthorizationRule, EntityStatus, EntityAvailabilityStatus } from \"../util/utils.js\";\nimport {\n  getAuthorizationRulesOrUndefined,\n  getBoolean,\n  getInteger,\n  getIntegerOrUndefined,\n  getRawAuthorizationRules,\n  getString,\n  getStringOrUndefined,\n  getDate,\n  getMessageCountDetails,\n} from \"../util/utils.js\";\n\n/**\n * @internal\n * Builds the topic options object from the user provided options.\n * Handles the differences in casing for the property names,\n * converts values to string and ensures the right order as expected by the service\n */\nexport function buildTopicOptions(topic: CreateTopicOptions): InternalTopicOptions {\n  return {\n    // NOTE: this ordering is extremely important. As an example, misordering of the ForwardTo property\n    // resulted in a customer bug where the Forwarding attributes appeared to be set but the portal was\n    // not picking up on it.\n    //\n    // The authority on this ordering is here:\n    // https://github.com/Azure/azure-sdk-for-net/blob/8af2dfc32c96ef3e340f9d20013bf588d97ea756/sdk/servicebus/Azure.Messaging.ServiceBus/src/Administration/TopicPropertiesExtensions.cs#L175\n\n    DefaultMessageTimeToLive: topic.defaultMessageTimeToLive,\n    MaxSizeInMegabytes: getStringOrUndefined(topic.maxSizeInMegabytes),\n    RequiresDuplicateDetection: getStringOrUndefined(topic.requiresDuplicateDetection),\n    DuplicateDetectionHistoryTimeWindow: topic.duplicateDetectionHistoryTimeWindow,\n    EnableBatchedOperations: getStringOrUndefined(topic.enableBatchedOperations),\n    AuthorizationRules: getRawAuthorizationRules(topic.authorizationRules),\n    Status: getStringOrUndefined(topic.status),\n    UserMetadata: getStringOrUndefined(topic.userMetadata),\n    SupportOrdering: getStringOrUndefined(topic.supportOrdering),\n    AutoDeleteOnIdle: getStringOrUndefined(topic.autoDeleteOnIdle),\n    EnablePartitioning: getStringOrUndefined(topic.enablePartitioning),\n    EntityAvailabilityStatus: getStringOrUndefined(topic.availabilityStatus),\n    EnableExpress: getStringOrUndefined(topic.enableExpress),\n    MaxMessageSizeInKilobytes: getStringOrUndefined(topic.maxMessageSizeInKilobytes),\n  };\n}\n\n/**\n * @internal\n * Builds the topic object from the raw json object gotten after deserializing the\n * response from the service\n */\nexport function buildTopic(rawTopic: Record<string, any>): TopicProperties {\n  return {\n    name: getString(rawTopic[Constants.TOPIC_NAME], \"topicName\"),\n    maxSizeInMegabytes: getInteger(rawTopic[Constants.MAX_SIZE_IN_MEGABYTES], \"maxSizeInMegabytes\"),\n\n    enablePartitioning: getBoolean(rawTopic[Constants.ENABLE_PARTITIONING], \"enablePartitioning\"),\n    supportOrdering: getBoolean(rawTopic[Constants.SUPPORT_ORDERING], \"supportOrdering\"),\n    enableBatchedOperations: getBoolean(\n      rawTopic[Constants.ENABLE_BATCHED_OPERATIONS],\n      \"enableBatchedOperations\",\n    ),\n\n    defaultMessageTimeToLive: getString(\n      rawTopic[Constants.DEFAULT_MESSAGE_TIME_TO_LIVE],\n      \"defaultMessageTimeToLive\",\n    ),\n    autoDeleteOnIdle: rawTopic[Constants.AUTO_DELETE_ON_IDLE],\n\n    requiresDuplicateDetection: getBoolean(\n      rawTopic[Constants.REQUIRES_DUPLICATE_DETECTION],\n      \"requiresDuplicateDetection\",\n    ),\n    duplicateDetectionHistoryTimeWindow: getString(\n      rawTopic[Constants.DUPLICATE_DETECTION_HISTORY_TIME_WINDOW],\n      \"duplicateDetectionHistoryTimeWindow\",\n    ),\n\n    authorizationRules: getAuthorizationRulesOrUndefined(rawTopic[Constants.AUTHORIZATION_RULES]),\n    userMetadata: rawTopic[Constants.USER_METADATA],\n\n    status: rawTopic[Constants.STATUS],\n\n    enableExpress: getBoolean(rawTopic[Constants.ENABLE_EXPRESS], \"enableExpress\"),\n\n    availabilityStatus: rawTopic[Constants.ENTITY_AVAILABILITY_STATUS],\n\n    maxMessageSizeInKilobytes: getIntegerOrUndefined(\n      rawTopic[Constants.MAX_MESSAGE_SIZE_IN_KILOBYTES],\n    ),\n  };\n}\n\n/**\n * @internal\n * Builds the topic runtime info object from the raw json object gotten after deserializing the\n * response from the service\n */\nexport function buildTopicRuntimeProperties(rawTopic: Record<string, any>): TopicRuntimeProperties {\n  return {\n    name: getString(rawTopic[Constants.TOPIC_NAME], \"topicName\"),\n    sizeInBytes: getIntegerOrUndefined(rawTopic[Constants.SIZE_IN_BYTES]),\n    subscriptionCount: getIntegerOrUndefined(rawTopic[Constants.SUBSCRIPTION_COUNT]),\n    createdAt: getDate(rawTopic[Constants.CREATED_AT], \"createdAt\"),\n    scheduledMessageCount: getMessageCountDetails(rawTopic[Constants.COUNT_DETAILS])\n      .scheduledMessageCount,\n    modifiedAt: getDate(rawTopic[Constants.UPDATED_AT], \"modifiedAt\"),\n    accessedAt: getDate(rawTopic[Constants.ACCESSED_AT], \"accessedAt\"),\n  };\n}\n\n/**\n * Represents settable options on a topic\n */\nexport interface CreateTopicOptions extends OperationOptions {\n  /**\n   * Determines how long a message lives in the associated subscriptions.\n   * Subscriptions inherit the TTL from the topic unless they are created explicitly\n   * with a smaller TTL. Based on whether dead-lettering is enabled, a message whose\n   * TTL has expired will either be moved to the subscriptionâ€™s associated dead-letter\n   * sub-queue or will be permanently deleted.\n   * This is to be specified in ISO-8601 duration format\n   * such as \"PT1M\" for 1 minute, \"PT5S\" for 5 seconds.\n   *\n   * More on ISO-8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations\n   */\n  defaultMessageTimeToLive?: string;\n\n  /**\n   * Specifies the maximum topic size in megabytes. Any attempt to enqueue a message\n   * that will cause the topic to exceed this value will fail. All messages that are\n   * stored in the topic or any of its subscriptions count towards this value.\n   * Multiple copies of a message that reside in one or multiple subscriptions count\n   * as a single messages. For example, if message m exists once in subscription s1\n   * and twice in subscription s2, m is counted as a single message.\n   */\n  maxSizeInMegabytes?: number;\n\n  /**\n   * The maximum message size in kilobytes for messages sent to this topic.\n   *\n   * (Configurable only for Premium Tier Service Bus namespace.)\n   */\n  maxMessageSizeInKilobytes?: number;\n\n  /**\n   * If enabled, the topic will detect duplicate messages within the time span\n   * specified by the DuplicateDetectionHistoryTimeWindow property.\n   * Settable only at topic creation time.\n   */\n  requiresDuplicateDetection?: boolean;\n\n  /**\n   * Specifies the time span during which the Service Bus will detect message duplication.\n   * This is to be specified in ISO-8601 duration format\n   * such as \"PT1M\" for 1 minute, \"PT5S\" for 5 seconds.\n   *\n   * More on ISO-8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations\n   */\n  duplicateDetectionHistoryTimeWindow?: string;\n\n  /**\n   * Specifies if batched operations should be allowed.\n   */\n  enableBatchedOperations?: boolean;\n\n  /**\n   * Authorization rules on the topic\n   */\n  authorizationRules?: AuthorizationRule[];\n\n  /**\n   * Status of the messaging entity.\n   */\n  status?: EntityStatus;\n\n  /**\n   * The user provided metadata information associated with the topic.\n   * Used to specify textual content such as tags, labels, etc.\n   * Value must not exceed 1024 bytes encoded in utf-8.\n   */\n  userMetadata?: string;\n\n  /**\n   * Specifies whether the topic supports message ordering.\n   */\n  supportOrdering?: boolean;\n\n  /**\n   * Max idle time before entity is deleted.\n   * This is to be specified in ISO-8601 duration format\n   * such as \"PT1M\" for 1 minute, \"PT5S\" for 5 seconds.\n   *\n   * More on ISO-8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations\n   */\n  autoDeleteOnIdle?: string;\n\n  /**\n   * Specifies whether the topic should be partitioned\n   */\n  enablePartitioning?: boolean;\n\n  /**\n   * Specifies whether express entities are enabled on topic.\n   */\n  enableExpress?: boolean;\n\n  /**\n   * Availability status of the messaging entity.\n   */\n  availabilityStatus?: EntityAvailabilityStatus;\n}\n\n/**\n * Represents the input for updateTopic.\n *\n */\nexport interface TopicProperties {\n  /**\n   * Name of the topic\n   */\n  readonly name: string;\n\n  /**\n   * Determines how long a message lives in the associated subscriptions.\n   * Subscriptions inherit the TTL from the topic unless they are created explicitly\n   * with a smaller TTL. Based on whether dead-lettering is enabled, a message whose\n   * TTL has expired will either be moved to the subscriptionâ€™s associated dead-letter\n   * sub-queue or will be permanently deleted.\n   * This is to be specified in ISO-8601 duration format\n   * such as \"PT1M\" for 1 minute, \"PT5S\" for 5 seconds.\n   *\n   * More on ISO-8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations\n   */\n  defaultMessageTimeToLive: string;\n\n  /**\n   * Specifies the maximum topic size in megabytes. Any attempt to enqueue a message\n   * that will cause the topic to exceed this value will fail. All messages that are\n   * stored in the topic or any of its subscriptions count towards this value.\n   * Multiple copies of a message that reside in one or multiple subscriptions count\n   * as a single messages. For example, if message m exists once in subscription s1\n   * and twice in subscription s2, m is counted as a single message.\n   */\n  maxSizeInMegabytes: number;\n\n  /**\n   * The maximum message size in kilobytes for messages sent to this queue/topic.\n   *\n   * Not applicable if service version \"2017-04\" is chosen when creating the `ServiceBusAdministrationClient`.\n   */\n  maxMessageSizeInKilobytes?: number;\n\n  /**\n   * If enabled, the topic will detect duplicate messages within the time span\n   * specified by the DuplicateDetectionHistoryTimeWindow property.\n   * Settable only at topic creation time.\n   */\n  readonly requiresDuplicateDetection: boolean;\n\n  /**\n   * Specifies the time span during which the Service Bus will detect message duplication.\n   * This is to be specified in ISO-8601 duration format\n   * such as \"PT1M\" for 1 minute, \"PT5S\" for 5 seconds.\n   *\n   * More on ISO-8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations\n   */\n  duplicateDetectionHistoryTimeWindow: string;\n\n  /**\n   * Specifies if batched operations should be allowed.\n   */\n  enableBatchedOperations: boolean;\n\n  /**\n   * Authorization rules on the topic\n   */\n  authorizationRules?: AuthorizationRule[];\n\n  /**\n   * Status of the messaging entity.\n   */\n  status: EntityStatus;\n\n  /**\n   * The user provided metadata information associated with the topic.\n   * Used to specify textual content such as tags, labels, etc.\n   * Value must not exceed 1024 bytes encoded in utf-8.\n   */\n  userMetadata: string;\n\n  /**\n   * Specifies whether the topic supports message ordering.\n   */\n  supportOrdering: boolean;\n\n  /**\n   * Max idle time before entity is deleted.\n   * This is to be specified in ISO-8601 duration format\n   * such as \"PT1M\" for 1 minute, \"PT5S\" for 5 seconds.\n   *\n   * More on ISO-8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations\n   */\n  autoDeleteOnIdle: string;\n\n  /**\n   * Specifies whether the topic should be partitioned\n   */\n  readonly enablePartitioning: boolean;\n\n  /**\n   * Specifies whether express entities are enabled on topic.\n   */\n  readonly enableExpress: boolean;\n\n  /**\n   * Availability status of the messaging entity.\n   */\n  readonly availabilityStatus: EntityAvailabilityStatus;\n}\n\n/**\n * @internal\n * Internal representation of settable options on a topic\n */\nexport interface InternalTopicOptions {\n  /**\n   * Determines how long a message lives in the associated subscriptions. Subscriptions\n   * inherit the TTL from the topic unless they are created explicitly with a smaller TTL.\n   * Based on whether dead-lettering is enabled, a message whose TTL has expired will\n   * either be moved to the subscriptionâ€™s associated DeadLtterQueue or will be\n   * permanently deleted.\n   * This is to be specified in ISO-8601 duration format\n   * such as \"PT1M\" for 1 minute, \"PT5S\" for 5 seconds.\n   *\n   * More on ISO-8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations\n   */\n  DefaultMessageTimeToLive?: string;\n\n  /**\n   * Specifies the maximum topic size in megabytes. Any attempt to enqueue a message\n   * that will cause the topic to exceed this value will fail. All messages that are\n   * stored in the topic or any of its subscriptions count towards this value.\n   * Multiple copies of a message that reside in one or multiple subscriptions count\n   * as a single messages. For example, if message m exists once in subscription s1\n   * and twice in subscription s2, m is counted as a single message.\n   */\n  MaxSizeInMegabytes?: string;\n\n  /**\n   * The maximum message size in kilobytes for messages sent to this queue/topic\n   *\n   */\n  MaxMessageSizeInKilobytes?: string;\n\n  /**\n   * If enabled, the topic will detect duplicate messages within the time span\n   * specified by the DuplicateDetectionHistoryTimeWindow property.\n   * Settable only at topic creation time.\n   */\n  RequiresDuplicateDetection?: string;\n\n  /**\n   * Specifies the time span during which the Service Bus will detect message\n   * duplication.\n   * This is to be specified in ISO-8601 duration format\n   * such as \"PT1M\" for 1 minute, \"PT5S\" for 5 seconds.\n   *\n   * More on ISO-8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations\n   */\n  DuplicateDetectionHistoryTimeWindow?: string;\n\n  /**\n   * Specifies if batched operations should be allowed.\n   */\n  EnableBatchedOperations?: string;\n\n  /**\n   * Authorization rules on the topic\n   */\n  AuthorizationRules?: any;\n\n  /**\n   * Status of the messaging entity.\n   */\n  Status?: string;\n\n  /**\n   * The user provided metadata information associated with the topic.\n   * Used to specify textual content such as tags, labels, etc.\n   * Value must not exceed 1024 bytes encoded in utf-8.\n   */\n  UserMetadata?: string;\n\n  /**\n   * Specifies whether the topic supports message ordering.\n   */\n  SupportOrdering?: string;\n\n  /**\n   * Max idle time before entity is deleted.\n   * This is to be specified in ISO-8601 duration format\n   * such as \"PT1M\" for 1 minute, \"PT5S\" for 5 seconds.\n   *\n   * More on ISO-8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations\n   */\n  AutoDeleteOnIdle?: string;\n\n  /**\n   * Specifies whether the topic should be partitioned\n   */\n  EnablePartitioning?: string;\n\n  /**\n   * Specifies whether express entities are enabled on queue.\n   */\n  EnableExpress?: string;\n\n  /**\n   * Availability status of the messaging entity.\n   */\n  EntityAvailabilityStatus?: string;\n}\n\n/**\n * Represents runtime info attributes of a topic entity\n */\nexport interface TopicRuntimeProperties {\n  /**\n   * Name of the topic\n   */\n  name: string;\n\n  /**\n   * Specifies the topic size in bytes.\n   */\n  sizeInBytes?: number;\n\n  /**\n   * The subscription count on given topic.\n   *\n   */\n  subscriptionCount?: number;\n\n  /**\n   * The number of scheduled messages.\n   */\n  scheduledMessageCount: number;\n\n  /**\n   * Created at timestamp\n   */\n  createdAt: Date;\n\n  /**\n   * Updated at timestamp\n   */\n  modifiedAt: Date;\n\n  /**\n   * Accessed at timestamp\n   */\n  accessedAt: Date;\n}\n\n/**\n * @internal\n * TopicResourceSerializer for serializing / deserializing Topic entities\n */\nexport class TopicResourceSerializer implements AtomXmlSerializer {\n  serialize(resource: InternalTopicOptions): Record<string, unknown> {\n    return serializeToAtomXmlRequest(\"TopicDescription\", resource);\n  }\n  async deserialize(response: FullOperationResponse): Promise<FullOperationResponse> {\n    return deserializeAtomXmlResponse([\"TopicName\"], response);\n  }\n}\n"]}