{"version":3,"file":"compatibility.js","sourceRoot":"","sources":["../../../../src/util/compat/compatibility.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AA0IlC,wCAMC;AArID,qDAAgE;AA6GhE,SAAS,gBAAgB,CAAC,OAAoB;IAC5C,OAAO,IAAI,4BAAa,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AACnE,CAAC;AAED,SAAS,iBAAiB,CAAC,OAAwB;IACjD,OAAO;QACL,GAAG,EAAE,OAAO,CAAC,GAAG;QAChB,MAAM,EAAE,OAAO,CAAC,MAAM;QACtB,OAAO,EAAE,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC;QAC1C,eAAe,EAAE,OAAO,CAAC,eAAe;QACxC,OAAO,EAAE,OAAO,CAAC,OAAO;QACxB,SAAS,EAAE,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,IAAI,EAAE;KAC/D,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,SAAgB,cAAc,CAAC,QAA0B;IACvD,OAAO;QACL,OAAO,EAAE,iBAAiB,CAAC,QAAQ,CAAC,OAAO,CAAC;QAC5C,MAAM,EAAE,QAAQ,CAAC,MAAM;QACvB,OAAO,EAAE,gBAAgB,CAAC,QAAQ,CAAC,OAAO,CAAC;KAC5C,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { AbortSignalLike } from \"@azure/abort-controller\";\nimport type {\n  HttpHeaders,\n  HttpMethods,\n  PipelineRequest,\n  PipelineResponse,\n  ProxySettings,\n} from \"@azure/core-rest-pipeline\";\nimport type { HttpHeadersLike } from \"./httpHeaders.js\";\nimport { HttpHeaders as HttpHeadersV1 } from \"./httpHeaders.js\";\n\n/**\n * Fired in response to upload or download progress.\n */\nexport type TransferProgressEvent = {\n  /**\n   * The number of bytes loaded so far.\n   */\n  loadedBytes: number;\n};\n\n/**\n * A description of a HTTP request to be made to a remote server.\n */\nexport interface WebResourceLike {\n  /**\n   * The URL being accessed by the request.\n   */\n  url: string;\n  /**\n   * The HTTP method to use when making the request.\n   */\n  method: HttpMethods;\n  /**\n   * The HTTP body contents of the request.\n   */\n  body?: any;\n  /**\n   * The HTTP headers to use when making the request.\n   */\n  headers: HttpHeadersLike;\n  /**\n   * Whether or not the body of the HttpOperationResponse should be treated as a stream.\n   * @deprecated Use streamResponseStatusCodes property instead.\n   */\n  streamResponseBody?: boolean;\n  /**\n   * A list of response status codes whose corresponding HttpOperationResponse body should be treated as a stream.\n   */\n  streamResponseStatusCodes?: Set<number>;\n  /**\n   * Form data, used to build the request body.\n   */\n  formData?: any;\n  /**\n   * A query string represented as an object.\n   */\n  query?: { [key: string]: any };\n  /**\n   * If credentials (cookies) should be sent along during an XHR.\n   */\n  withCredentials: boolean;\n  /**\n   * The number of milliseconds a request can take before automatically being terminated.\n   * If the request is terminated, an `AbortError` is thrown.\n   */\n  timeout: number;\n  /**\n   * Proxy configuration.\n   */\n  proxySettings?: ProxySettings;\n  /**\n   * If the connection should be reused.\n   */\n  keepAlive?: boolean;\n  /**\n   * Whether or not to decompress response according to Accept-Encoding header (node-fetch only)\n   */\n  decompressResponse?: boolean;\n  /**\n   * A unique identifier for the request. Used for logging and tracing.\n   */\n  requestId: string;\n\n  /**\n   * Signal of an abort controller. Can be used to abort both sending a network request and waiting for a response.\n   */\n  abortSignal?: AbortSignalLike;\n\n  /**\n   * Callback which fires upon upload progress.\n   */\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n\n  /** Callback which fires upon download progress. */\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n}\n\n/**\n * The properties on an HTTP response which will always be present.\n */\nexport interface HttpResponse {\n  /**\n   * The raw request\n   */\n  request: WebResourceLike;\n\n  /**\n   * The HTTP response status (e.g. 200)\n   */\n  status: number;\n\n  /**\n   * The HTTP response headers.\n   */\n  headers: HttpHeadersLike;\n}\n\nfunction toHttpHeaderLike(headers: HttpHeaders): HttpHeadersLike {\n  return new HttpHeadersV1(headers.toJSON({ preserveCase: true }));\n}\n\nfunction toWebResourceLike(request: PipelineRequest): WebResourceLike {\n  return {\n    url: request.url,\n    method: request.method,\n    headers: toHttpHeaderLike(request.headers),\n    withCredentials: request.withCredentials,\n    timeout: request.timeout,\n    requestId: request.headers.get(\"x-ms-client-request-id\") || \"\",\n  };\n}\n\n/**\n * Helper to transform PipelineResponse to slimmed-down HttpResponse used in Service Bus.\n */\nexport function toHttpResponse(response: PipelineResponse): HttpResponse {\n  return {\n    request: toWebResourceLike(response.request),\n    status: response.status,\n    headers: toHttpHeaderLike(response.headers),\n  };\n}\n"]}