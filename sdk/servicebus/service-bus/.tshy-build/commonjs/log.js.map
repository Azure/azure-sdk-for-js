{"version":3,"file":"log.js","sourceRoot":"","sources":["../../src/log.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AA6DlC,gDAIC;AAsBD,wDA2BC;AA/GD,0CAAmD;AAEnD,gDAA0D;AAE1D;;;;GAIG;AACU,QAAA,MAAM,GAAG,sBAAsB,CAAC,aAAa,CAAC,CAAC;AAE5D;;;GAGG;AACU,QAAA,cAAc,GAAG,sBAAsB,CAAC,sBAAsB,CAAC,CAAC;AAE7E;;;GAGG;AACU,QAAA,YAAY,GAAG,sBAAsB,CAAC,oBAAoB,CAAC,CAAC;AAEzE;;;GAGG;AACU,QAAA,iBAAiB,GAAG,sBAAsB,CAAC,yBAAyB,CAAC,CAAC;AAEnF;;;GAGG;AACU,QAAA,gBAAgB,GAAG,sBAAsB,CAAC,wBAAwB,CAAC,CAAC;AAEjF;;;GAGG;AACU,QAAA,oBAAoB,GAAG,sBAAsB,CAAC,4BAA4B,CAAC,CAAC;AAEzF;;;GAGG;AACU,QAAA,aAAa,GAAG,sBAAsB,CAAC,sBAAsB,CAAC,CAAC;AAE5E;;;GAGG;AACU,QAAA,sBAAsB,GAAG,sBAAsB,CAAC,wBAAwB,CAAC,CAAC;AAEvF;;;;GAIG;AACH,SAAgB,kBAAkB,CAAC,OAAoB,EAAE,KAAc;IACrE,IAAI,IAAA,kCAAsB,EAAC,KAAK,EAAE,CAAC,OAAO,CAAC,CAAC,IAAI,KAAK,CAAC,KAAK,EAAE,CAAC;QAC5D,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC/B,CAAC;AACH,CAAC;AAkBD;;;GAGG;AACH,SAAgB,sBAAsB,CAAC,SAAiB;IACtD,MAAM,OAAO,GAAG,IAAA,2BAAkB,EAAC,SAAS,CAAqB,CAAC;IAElE,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,GAAkC,EAAE,GAAG,IAAW,EAAQ,EAAE;QACjF,IAAI,CAAqB,CAAC;QAE1B,sFAAsF;QACtF,2BAA2B;QAC3B,IAAI,OAAO,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,IAAI,KAAK,YAAY,EAAE,CAAC;YAC9C,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC;QACnB,CAAC;aAAM,CAAC;YACN,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC;QACtB,CAAC;QAED,mDAAmD;QACnD,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAEpB,mEAAmE;QACnE,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;QAEX,mFAAmF;QACnF,IAAI,GAAG,IAAK,GAAW,CAAC,KAAK,EAAE,CAAC;YAC9B,OAAO,CAAC,OAAO,CAAE,GAAW,CAAC,KAAK,CAAC,CAAC;QACtC,CAAC;IACH,CAAC,CAAC;IAEF,OAAO,OAAO,CAAC;AACjB,CAAC;AAED;;GAEG;AACH,SAAS,OAAO,CAAC,GAAkC;IACjD,OAAO,GAAG,IAAI,IAAI,IAAK,GAAW,CAAC,IAAI,IAAI,IAAI,CAAC;AAClD,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { AzureLogger } from \"@azure/logger\";\nimport { createClientLogger } from \"@azure/logger\";\nimport type { AmqpError } from \"rhea-promise\";\nimport { isObjectWithProperties } from \"@azure/core-util\";\n\n/**\n * The `@azure/logger` configuration for this package.\n * This will output logs using the `azure:service-bus` namespace prefix.\n * @internal\n */\nexport const logger = createServiceBusLogger(\"service-bus\");\n\n/**\n * Logging for ServiceBusReceivers of any type (session, non-session)\n * @internal\n */\nexport const receiverLogger = createServiceBusLogger(\"service-bus:receiver\");\n\n/**\n * Logging for ServiceBusSenders\n * @internal\n */\nexport const senderLogger = createServiceBusLogger(\"service-bus:sender\");\n\n/**\n * Logging for ServiceBusRuleManagers\n * @internal\n */\nexport const ruleManagerLogger = createServiceBusLogger(\"service-bus:rulemanager\");\n\n/**\n * Logging for connection management\n * @internal\n */\nexport const connectionLogger = createServiceBusLogger(\"service-bus:connection\");\n\n/**\n * Logging for the ServiceBusAdministrationClient\n * @internal\n */\nexport const administrationLogger = createServiceBusLogger(\"service-bus:administration\");\n\n/**\n * Logging related to message encoding/decoding.\n * @internal\n */\nexport const messageLogger = createServiceBusLogger(\"service-bus:messages\");\n\n/**\n * Logging related to message encoding/decoding.\n * @internal\n */\nexport const managementClientLogger = createServiceBusLogger(\"service-bus:management\");\n\n/**\n * Logs the error's stack trace to \"verbose\" if a stack trace is available.\n * @param error - Error containing a stack trace.\n * @internal\n */\nexport function logErrorStackTrace(_logger: AzureLogger, error: unknown): void {\n  if (isObjectWithProperties(error, [\"stack\"]) && error.stack) {\n    _logger.verbose(error.stack);\n  }\n}\n\n/**\n * @internal\n */\nexport interface ServiceBusLogger extends AzureLogger {\n  /**\n   * Logs an error with an associated message, formatted. If there is a stack\n   * trace in the error that will be logged to the verbose stream.\n   *\n   * Example:\n   *   receiverLogger.logError(new Error(\"hello, this is the error\"), \"this is my message\");\n   * will output:\n   *   azure:service-bus:receiver:warning this is my message : Error: hello, this is the error\n   */\n  logError(err: Error | AmqpError | undefined, ...args: any[]): void;\n}\n\n/**\n * Creates an AzureLogger with any additional methods for standardized logging (for example, with errors)\n * @internal\n */\nexport function createServiceBusLogger(namespace: string): ServiceBusLogger {\n  const _logger = createClientLogger(namespace) as ServiceBusLogger;\n\n  _logger[\"logError\"] = (err: Error | AmqpError | undefined, ...args: any[]): void => {\n    let l: typeof logger.info;\n\n    // abort errors are user initiated so we don't have to treat them as warnings, like we\n    // would with other errors.\n    if (isError(err) && err.name === \"AbortError\") {\n      l = _logger.info;\n    } else {\n      l = _logger.warning;\n    }\n\n    // tack on the error object so it also gets logged.\n    args.push(\":\", err);\n\n    // let the normal formatting work and include the error at the end.\n    l(...args);\n\n    // optionally log the stack trace if it's available but this always goes to verbose\n    if (err && (err as any).stack) {\n      _logger.verbose((err as any).stack);\n    }\n  };\n\n  return _logger;\n}\n\n/**\n * @internal\n */\nfunction isError(err: Error | AmqpError | undefined): err is Error {\n  return err != null && (err as any).name != null;\n}\n"]}