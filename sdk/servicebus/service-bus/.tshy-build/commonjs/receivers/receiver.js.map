{"version":3,"file":"receiver.js","sourceRoot":"","sources":["../../../src/receivers/receiver.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  PeekMessagesOptions,\n  GetMessageIteratorOptions,\n  MessageHandlers,\n  ReceiveMessagesOptions,\n  SubscribeOptions,\n  DeleteMessagesOptions,\n  PurgeMessagesOptions,\n} from \"../models.js\";\nimport type { OperationOptionsBase } from \"../modelsToBeSharedWithEventHubs.js\";\nimport type { ServiceBusReceivedMessage } from \"../serviceBusMessage.js\";\nimport type { ConnectionContext } from \"../connectionContext.js\";\nimport {\n  getAlreadyReceivingErrorMsg,\n  getReceiverClosedErrorMsg,\n  InvalidMaxMessageCountError,\n  throwErrorIfConnectionClosed,\n  throwTypeErrorIfParameterMissing,\n  throwTypeErrorIfParameterNotLong,\n  throwErrorIfInvalidOperationOnMessage,\n  throwTypeErrorIfParameterTypeMismatch,\n} from \"../util/errors.js\";\nimport type { ReceiveOptions } from \"../core/messageReceiver.js\";\nimport { StreamingReceiver } from \"../core/streamingReceiver.js\";\nimport { BatchingReceiver } from \"../core/batchingReceiver.js\";\nimport {\n  abandonMessage,\n  assertValidMessageHandlers,\n  completeMessage,\n  deadLetterMessage,\n  deferMessage,\n  getMessageIterator,\n} from \"./receiverCommon.js\";\nimport type Long from \"long\";\nimport type { ServiceBusMessageImpl, DeadLetterOptions } from \"../serviceBusMessage.js\";\nimport type { RetryConfig, RetryOptions } from \"@azure/core-amqp\";\nimport { Constants, RetryOperationType, retry } from \"@azure/core-amqp\";\nimport { LockRenewer } from \"../core/autoLockRenewer.js\";\nimport { receiverLogger as logger } from \"../log.js\";\nimport { translateServiceBusError } from \"../serviceBusError.js\";\nimport { ensureValidIdentifier } from \"../util/utils.js\";\nimport { toSpanOptions, tracingClient } from \"../diagnostics/tracing.js\";\nimport { extractSpanContextFromServiceBusMessage } from \"../diagnostics/instrumentServiceBusMessage.js\";\nimport type { TracingSpanLink } from \"@azure/core-tracing\";\n\n/**\n * The default time to wait for messages _after_ the first message\n * has been received.\n *\n * This timeout only applies to receiveMessages()\n *\n * @internal\n */\nexport const defaultMaxTimeAfterFirstMessageForBatchingMs = 1000;\n\n/**\n * The maximum number of messages to delete in a single batch.  This cap is established and enforced by the service.\n * @internal\n */\nexport const MaxDeleteMessageCount = 4000;\n\n/**\n * A receiver that does not handle sessions.\n */\nexport interface ServiceBusReceiver {\n  /**\n   * A name used to identify the receiver. This can be used to correlate logs and exceptions.\n   * If not specified or empty, a random unique one will be generated.\n   */\n  identifier: string;\n\n  /**\n   * Streams messages to message handlers.\n   * @param handlers - A handler that gets called for messages and errors.\n   * @param options - Options for subscribe.\n   * @returns An object that can be closed, sending any remaining messages to `handlers` and\n   * stopping new messages from arriving.\n   */\n  subscribe(\n    handlers: MessageHandlers,\n    options?: SubscribeOptions,\n  ): {\n    /**\n     * Causes the subscriber to stop receiving new messages.\n     */\n    close(): Promise<void>;\n  };\n\n  /**\n   * Returns an iterator that can be used to receive messages from Service Bus.\n   *\n   * @param options - A set of options to control the receive operation.\n   * - `abortSignal`: The signal to use to abort the ongoing operation.\n   *\n   * @throws Error if the underlying connection, client or receiver is closed.\n   * @throws Error if current receiver is already in state of receiving messages.\n   * @throws `ServiceBusError` if the service returns an error while receiving messages.\n   */\n  getMessageIterator(\n    options?: GetMessageIteratorOptions,\n  ): AsyncIterableIterator<ServiceBusReceivedMessage>;\n\n  /**\n   * Returns a promise that resolves to an array of messages received from Service Bus.\n   *\n   * @param maxMessageCount - The maximum number of messages to receive.\n   * @param options - A set of options to control the receive operation.\n   * - `maxWaitTimeInMs`: The maximum time to wait for the first message before returning an empty array if no messages are available.\n   * - `abortSignal`: The signal to use to abort the ongoing operation.\n   * @returns A promise that resolves with an array of messages.\n   * @throws Error if the underlying connection, client or receiver is closed.\n   * @throws Error if current receiver is already in state of receiving messages.\n   * @throws `ServiceBusError` if the service returns an error while receiving messages.\n   */\n  receiveMessages(\n    maxMessageCount: number,\n    options?: ReceiveMessagesOptions,\n  ): Promise<ServiceBusReceivedMessage[]>;\n\n  /**\n   * Returns a promise that resolves to an array of deferred messages identified by given `sequenceNumbers`.\n   * @param sequenceNumbers - The sequence number or an array of sequence numbers for the messages that need to be received.\n   * @param options - Options bag to pass an abort signal or tracing options.\n   * @returns A list of messages identified by the given sequenceNumbers or an empty list if no messages are found.\n   * @throws Error if the underlying connection or receiver is closed.\n   * @throws `ServiceBusError` if the service returns an error while receiving deferred messages.\n   */\n  receiveDeferredMessages(\n    sequenceNumbers: Long | Long[],\n    options?: OperationOptionsBase,\n  ): Promise<ServiceBusReceivedMessage[]>;\n\n  /**\n   * Peek the next batch of active messages (including deferred but not deadlettered messages) on the\n   * queue or subscription without modifying them.\n   * - The first call to `peekMessages()` fetches the first active message. Each subsequent call fetches the\n   * subsequent message.\n   * - Unlike a \"received\" message, \"peeked\" message is a read-only version of the message.\n   * It cannot be `Completed/Abandoned/Deferred/Deadlettered`.\n   * @param maxMessageCount - The maximum number of messages to peek.\n   * @param options - Options that allow to specify the maximum number of messages to peek,\n   * the sequenceNumber to start peeking from or an abortSignal to abort the operation.\n   */\n  peekMessages(\n    maxMessageCount: number,\n    options?: PeekMessagesOptions,\n  ): Promise<ServiceBusReceivedMessage[]>;\n\n  /**\n   * Delete messages. If no option is specified, all messages will be deleted.\n   *\n   * @param options - Options to configure the operation.\n   * @returns number of messages that have been deleted.\n   */\n  deleteMessages(options: DeleteMessagesOptions): Promise<number>;\n\n  /**\n   * Attempts to purge all messages from an entity.  Locked messages are not eligible for removal and\n   * will remain in the entity.\n   *\n   * @param options - Options that allow to specify the cutoff time for deletion. Only messages that were enqueued\n   *                  before this time will be deleted.  If not specified, current time will be used.\n   * @returns number of messages deleted.\n   */\n  purgeMessages(options?: PurgeMessagesOptions): Promise<number>;\n\n  /**\n   * Path of the entity for which the receiver has been created.\n   */\n  entityPath: string;\n  /**\n   * The receive mode used to create the receiver.\n   */\n  receiveMode: \"peekLock\" | \"receiveAndDelete\";\n  /**\n   * Returns `true` if either the receiver or the client that created it has been closed.\n   * @readonly\n   */\n  isClosed: boolean;\n  /**\n   * Closes the receiver.\n   * Once closed, the receiver cannot be used for any further operations.\n   * Use the `createReceiver()` method on the ServiceBusClient to create a new Receiver.\n   */\n  close(): Promise<void>;\n  /**\n   * Removes the message from Service Bus.\n   *\n   * @throws Error with name `SessionLockLostError` (for messages from a Queue/Subscription with sessions enabled)\n   * if the AMQP link with which the message was received is no longer alive. This can\n   * happen either because the lock on the session expired or the receiver was explicitly closed by\n   * the user or the AMQP link is closed by the library due to network loss or service error.\n   * @throws Error with name `MessageLockLostError` (for messages from a Queue/Subscription with sessions not enabled)\n   * if the lock on the message has expired or the AMQP link with which the message was received is\n   * no longer alive. The latter can happen if the receiver was explicitly closed by the user or the\n   * AMQP link got closed by the library due to network loss or service error.\n   * @throws Error if the message is already settled.\n   * property on the message if you are not sure whether the message is settled.\n   * @throws Error if used in `receiveAndDelete` mode because all messages received in this mode\n   * are pre-settled. To avoid this error, update your code to not settle a message which is received\n   * in this mode.\n   * @throws Error with name `ServiceUnavailableError` if Service Bus does not acknowledge the request to settle\n   * the message in time. The message may or may not have been settled successfully.\n   */\n  completeMessage(message: ServiceBusReceivedMessage): Promise<void>;\n  /**\n   * The lock held on the message by the receiver is let go, making the message available again in\n   * Service Bus for another receive operation.\n   *\n   * @throws `ServiceBusError` with the code `SessionLockLost` (for messages from a Queue/Subscription with sessions enabled)\n   * if the AMQP link with which the message was received is no longer alive. This can\n   * happen either because the lock on the session expired or the receiver was explicitly closed by\n   * the user or the AMQP link is closed by the library due to network loss or service error.\n   * @throws `ServiceBusError` with the code `MessageLockLost` (for messages from a Queue/Subscription with sessions not enabled)\n   * if the lock on the message has expired or the AMQP link with which the message was received is\n   * no longer alive. The latter can happen if the receiver was explicitly closed by the user or the\n   * AMQP link got closed by the library due to network loss or service error.\n   * @throws Error if the message is already settled.\n   * property on the message if you are not sure whether the message is settled.\n   * @throws Error if used in `receiveAndDelete` mode because all messages received in this mode\n   * are pre-settled. To avoid this error, update your code to not settle a message which is received\n   * in this mode.\n   * @throws `ServiceBusError` with the code `ServiceTimeout` if Service Bus does not acknowledge the request to settle\n   * the message in time. The message may or may not have been settled successfully.\n   *\n   * @param propertiesToModify - The properties of the message to modify while abandoning the message.\n   */\n  abandonMessage(\n    message: ServiceBusReceivedMessage,\n    propertiesToModify?: { [key: string]: number | boolean | string | Date | null },\n  ): Promise<void>;\n  /**\n   * Defers the processing of the message. Save the `sequenceNumber` of the message, in order to\n   * receive it message again in the future using the `receiveDeferredMessage` method.\n   *\n   * @throws `ServiceBusError` with the code `SessionLockLost` (for messages from a Queue/Subscription with sessions enabled)\n   * if the AMQP link with which the message was received is no longer alive. This can\n   * happen either because the lock on the session expired or the receiver was explicitly closed by\n   * the user or the AMQP link is closed by the library due to network loss or service error.\n   * @throws `ServiceBusError` with the code `MessageLockLost` (for messages from a Queue/Subscription with sessions not enabled)\n   * if the lock on the message has expired or the AMQP link with which the message was received is\n   * no longer alive. The latter can happen if the receiver was explicitly closed by the user or the\n   * AMQP link got closed by the library due to network loss or service error.\n   * @throws Error if the message is already settled.\n   * property on the message if you are not sure whether the message is settled.\n   * @throws Error if used in `receiveAndDelete` mode because all messages received in this mode\n   * are pre-settled. To avoid this error, update your code to not settle a message which is received\n   * in this mode.\n   * @throws `ServiceBusError` with the code `ServiceTimeout` if Service Bus does not acknowledge the request to settle\n   * the message in time. The message may or may not have been settled successfully.\n   *\n   * @param propertiesToModify - The properties of the message to modify while deferring the message\n   */\n  deferMessage(\n    message: ServiceBusReceivedMessage,\n    propertiesToModify?: { [key: string]: number | boolean | string | Date | null },\n  ): Promise<void>;\n  /**\n   * Moves the message to the deadletter sub-queue. To receive a deadletted message, create a new\n   * QueueClient/SubscriptionClient using the path for the deadletter sub-queue.\n   *\n   * @throws `ServiceBusError` with the code `SessionLockLost` (for messages from a Queue/Subscription with sessions enabled)\n   * if the AMQP link with which the message was received is no longer alive. This can\n   * happen either because the lock on the session expired or the receiver was explicitly closed by\n   * the user or the AMQP link is closed by the library due to network loss or service error.\n   * @throws `ServiceBusError` with the code `MessageLockLost` (for messages from a Queue/Subscription with sessions not enabled)\n   * if the lock on the message has expired or the AMQP link with which the message was received is\n   * no longer alive. The latter can happen if the receiver was explicitly closed by the user or the\n   * AMQP link got closed by the library due to network loss or service error.\n   * @throws Error if the message is already settled.\n   * property on the message if you are not sure whether the message is settled.\n   * @throws Error if used in `receiveAndDelete` mode because all messages received in this mode\n   * are pre-settled. To avoid this error, update your code to not settle a message which is received\n   * in this mode.\n   * @throws `ServiceBusError` with the code `ServiceTimeout` if Service Bus does not acknowledge the request to settle\n   * the message in time. The message may or may not have been settled successfully.\n   *\n   * @param options - The DeadLetter options that can be provided while\n   * rejecting the message.\n   */\n  deadLetterMessage(\n    message: ServiceBusReceivedMessage,\n    options?: DeadLetterOptions & { [key: string]: number | boolean | string | Date | null },\n  ): Promise<void>;\n  /**\n   * Renews the lock on the message for the duration as specified during the Queue/Subscription\n   * creation.\n   * - Check the `lockedUntilUtc` property on the message for the time when the lock expires.\n   * - If a message is not settled (using either `complete()`, `defer()` or `deadletter()`,\n   * before its lock expires, then the message lands back in the Queue/Subscription for the next\n   * receive operation.\n   *\n   * @returns New lock token expiry date and time in UTC format.\n   * @throws Error if the underlying connection, client or receiver is closed.\n   * @throws ServiceBusError if the service returns an error while renewing message lock.\n   */\n  renewMessageLock(message: ServiceBusReceivedMessage): Promise<Date>;\n}\n\n/**\n * @internal\n */\nexport class ServiceBusReceiverImpl implements ServiceBusReceiver {\n  public identifier: string;\n  private _retryOptions: RetryOptions;\n  /**\n   * Denotes if close() was called on this receiver\n   */\n  private _isClosed: boolean = false;\n\n  /**\n   * Instance of the BatchingReceiver class to use to receive messages in pull mode.\n   */\n  private _batchingReceiver?: BatchingReceiver;\n\n  /**\n   * Instance of the StreamingReceiver class to use to receive messages in push mode.\n   */\n  private _streamingReceiver?: StreamingReceiver;\n  private _lockRenewer: LockRenewer | undefined;\n\n  private get logPrefix(): string {\n    return `[${this._context.connectionId}|receiver:${this.entityPath}]`;\n  }\n\n  /**\n   * @throws Error if the underlying connection is closed.\n   */\n  constructor(\n    private _context: ConnectionContext,\n    public entityPath: string,\n    public receiveMode: \"peekLock\" | \"receiveAndDelete\",\n    maxAutoRenewLockDurationInMs: number,\n    private skipParsingBodyAsJson: boolean,\n    private skipConvertingDate: boolean = false,\n    retryOptions: RetryOptions = {},\n    identifier?: string,\n  ) {\n    throwErrorIfConnectionClosed(_context);\n    this._retryOptions = retryOptions;\n    this._lockRenewer = LockRenewer.create(\n      this._context,\n      maxAutoRenewLockDurationInMs,\n      receiveMode,\n    );\n    this.identifier = ensureValidIdentifier(this.entityPath, identifier);\n  }\n\n  private _throwIfAlreadyReceiving(): void {\n    if (this._isReceivingMessages()) {\n      const errorMessage = getAlreadyReceivingErrorMsg(this.entityPath);\n      const error = new Error(errorMessage);\n      logger.logError(error, `${this.logPrefix} is already receiving`);\n      throw error;\n    }\n  }\n\n  private _throwIfReceiverOrConnectionClosed(): void {\n    throwErrorIfConnectionClosed(this._context);\n    if (this.isClosed) {\n      const errorMessage = getReceiverClosedErrorMsg(this.entityPath);\n      const error = new Error(errorMessage);\n      logger.logError(error, `${this.logPrefix} is closed`);\n      throw error;\n    }\n  }\n\n  public get isClosed(): boolean {\n    return this._isClosed || this._context.wasConnectionCloseCalled;\n  }\n\n  async receiveMessages(\n    maxMessageCount: number,\n    options?: ReceiveMessagesOptions,\n  ): Promise<ServiceBusReceivedMessage[]> {\n    this._throwIfReceiverOrConnectionClosed();\n    this._throwIfAlreadyReceiving();\n    throwTypeErrorIfParameterMissing(\n      this._context.connectionId,\n      \"maxMessageCount\",\n      maxMessageCount,\n    );\n    throwTypeErrorIfParameterTypeMismatch(\n      this._context.connectionId,\n      \"maxMessageCount\",\n      maxMessageCount,\n      \"number\",\n    );\n\n    if (isNaN(maxMessageCount) || maxMessageCount < 1) {\n      throw new TypeError(InvalidMaxMessageCountError);\n    }\n\n    const receiveMessages = async (): Promise<ServiceBusReceivedMessage[]> => {\n      if (!this._batchingReceiver || !this._context.messageReceivers[this._batchingReceiver.name]) {\n        const receiveOptions: ReceiveOptions = {\n          maxConcurrentCalls: 0,\n          receiveMode: this.receiveMode,\n          lockRenewer: this._lockRenewer,\n          skipParsingBodyAsJson: this.skipParsingBodyAsJson,\n          skipConvertingDate: this.skipConvertingDate,\n        };\n        this._batchingReceiver = this._createBatchingReceiver(\n          this._context,\n          this.entityPath,\n          receiveOptions,\n        );\n      }\n\n      const receivedMessages = await this._batchingReceiver.receive(\n        maxMessageCount,\n        options?.maxWaitTimeInMs ?? Constants.defaultOperationTimeoutInMs,\n        defaultMaxTimeAfterFirstMessageForBatchingMs,\n        options ?? {},\n      );\n\n      return receivedMessages;\n    };\n    const config: RetryConfig<ServiceBusReceivedMessage[]> = {\n      connectionHost: this._context.config.host,\n      connectionId: this._context.connectionId,\n      operation: receiveMessages,\n      operationType: RetryOperationType.receiveMessage,\n      abortSignal: options?.abortSignal,\n      retryOptions: this._retryOptions,\n    };\n    return retry<ServiceBusReceivedMessage[]>(config).catch((err) => {\n      throw translateServiceBusError(err);\n    });\n  }\n\n  getMessageIterator(\n    options?: GetMessageIteratorOptions,\n  ): AsyncIterableIterator<ServiceBusReceivedMessage> {\n    return getMessageIterator(this, options);\n  }\n\n  async receiveDeferredMessages(\n    sequenceNumbers: Long | Long[],\n    options: OperationOptionsBase = {},\n  ): Promise<ServiceBusReceivedMessage[]> {\n    this._throwIfReceiverOrConnectionClosed();\n    throwTypeErrorIfParameterMissing(\n      this._context.connectionId,\n      \"sequenceNumbers\",\n      sequenceNumbers,\n    );\n    throwTypeErrorIfParameterNotLong(\n      this._context.connectionId,\n      \"sequenceNumbers\",\n      sequenceNumbers,\n    );\n\n    const deferredSequenceNumbers = Array.isArray(sequenceNumbers)\n      ? sequenceNumbers\n      : [sequenceNumbers];\n    const receiveDeferredMessagesOperationPromise = async (): Promise<\n      ServiceBusReceivedMessage[]\n    > => {\n      const deferredMessages = await this._context\n        .getManagementClient(this.entityPath)\n        .receiveDeferredMessages(deferredSequenceNumbers, this.receiveMode, undefined, {\n          ...options,\n          associatedLinkName: this._getAssociatedReceiverName(),\n          requestName: \"receiveDeferredMessages\",\n          timeoutInMs: this._retryOptions.timeoutInMs,\n          skipParsingBodyAsJson: this.skipParsingBodyAsJson,\n          skipConvertingDate: this.skipConvertingDate,\n        });\n      return deferredMessages;\n    };\n    const config: RetryConfig<ServiceBusReceivedMessage[]> = {\n      operation: receiveDeferredMessagesOperationPromise,\n      connectionId: this._context.connectionId,\n      operationType: RetryOperationType.management,\n      retryOptions: this._retryOptions,\n      abortSignal: options?.abortSignal,\n    };\n    return retry<ServiceBusReceivedMessage[]>(config);\n  }\n\n  async deleteMessages(options: DeleteMessagesOptions): Promise<number> {\n    this._throwIfReceiverOrConnectionClosed();\n\n    const deleteMessagesOperationPromise = (): Promise<number> => {\n      return this._context\n        .getManagementClient(this.entityPath)\n        .deleteMessages(options.maxMessageCount, options?.beforeEnqueueTime, undefined, {\n          ...options,\n          associatedLinkName: this._getAssociatedReceiverName(),\n          requestName: \"deleteMessages\",\n          timeoutInMs: this._retryOptions.timeoutInMs,\n        });\n    };\n    const config: RetryConfig<number> = {\n      operation: deleteMessagesOperationPromise,\n      connectionId: this._context.connectionId,\n      operationType: RetryOperationType.management,\n      retryOptions: this._retryOptions,\n      abortSignal: options?.abortSignal,\n    };\n    return retry<number>(config);\n  }\n\n  async purgeMessages(options?: PurgeMessagesOptions): Promise<number> {\n    let deletedCount = await this.deleteMessages({\n      maxMessageCount: MaxDeleteMessageCount,\n      beforeEnqueueTime: options?.beforeEnqueueTime,\n    });\n    logger.verbose(\n      `${this.logPrefix} receiver '${this.identifier}' deleted ${deletedCount} messages.`,\n    );\n    if (deletedCount === MaxDeleteMessageCount) {\n      let batchCount = MaxDeleteMessageCount;\n      while (batchCount === MaxDeleteMessageCount) {\n        batchCount = await this.deleteMessages({\n          maxMessageCount: MaxDeleteMessageCount,\n          beforeEnqueueTime: options?.beforeEnqueueTime,\n        });\n        logger.verbose(\n          `${this.logPrefix} receiver '${this.identifier}' deleted ${batchCount} messages.`,\n        );\n        deletedCount += batchCount;\n      }\n    }\n    logger.verbose(\n      `${this.logPrefix} receiver '${this.identifier}' purged ${deletedCount} messages.`,\n    );\n    return deletedCount;\n  }\n\n  // ManagementClient methods # Begin\n\n  async peekMessages(\n    maxMessageCount: number,\n    options: PeekMessagesOptions = {},\n  ): Promise<ServiceBusReceivedMessage[]> {\n    this._throwIfReceiverOrConnectionClosed();\n\n    const managementRequestOptions = {\n      ...options,\n      associatedLinkName: this._getAssociatedReceiverName(),\n      requestName: \"peekMessages\",\n      timeoutInMs: this._retryOptions?.timeoutInMs,\n      skipParsingBodyAsJson: this.skipParsingBodyAsJson,\n      skipConvertingDate: this.skipConvertingDate,\n    };\n    // omitMessageBody is available at runtime, but only exported in experimental subpath\n    const { fromSequenceNumber, omitMessageBody } = options as PeekMessagesOptions & {\n      omitMessageBody: boolean;\n    };\n    const peekOperationPromise = async (): Promise<ServiceBusReceivedMessage[]> => {\n      if (fromSequenceNumber !== undefined) {\n        return this._context\n          .getManagementClient(this.entityPath)\n          .peekBySequenceNumber(\n            fromSequenceNumber,\n            maxMessageCount,\n            undefined,\n            omitMessageBody,\n            managementRequestOptions,\n          );\n      } else {\n        return this._context\n          .getManagementClient(this.entityPath)\n          .peek(maxMessageCount, omitMessageBody, managementRequestOptions);\n      }\n    };\n\n    const config: RetryConfig<ServiceBusReceivedMessage[]> = {\n      operation: peekOperationPromise,\n      connectionId: this._context.connectionId,\n      operationType: RetryOperationType.management,\n      retryOptions: this._retryOptions,\n      abortSignal: options?.abortSignal,\n    };\n    return retry<ServiceBusReceivedMessage[]>(config);\n  }\n\n  subscribe(\n    handlers: MessageHandlers,\n    options?: SubscribeOptions,\n  ): {\n    close(): Promise<void>;\n  } {\n    assertValidMessageHandlers(handlers);\n    throwErrorIfConnectionClosed(this._context);\n    this._throwIfReceiverOrConnectionClosed();\n    this._throwIfAlreadyReceiving();\n\n    options = {\n      ...(options ?? {}),\n      autoCompleteMessages: options?.autoCompleteMessages ?? true,\n    };\n\n    // When the user \"stops\" a streaming receiver (via the returned instance from 'subscribe' we just suspend\n    // it, leaving the link open). This allows users to stop the flow of messages but still be able to settle messages\n    // since the link itself hasn't been shut down.\n    //\n    // Users can, if they want, restart their subscription (since we've got a link already established).\n    // So you'll have an instance here if the user has done:\n    // 1. const subscription = receiver.subscribe()\n    // 2. subscription.stop()\n    // 3. receiver.subscribe()\n\n    this._streamingReceiver =\n      this._streamingReceiver ??\n      new StreamingReceiver(this.identifier, this._context, this.entityPath, {\n        ...options,\n        receiveMode: this.receiveMode,\n        retryOptions: this._retryOptions,\n        lockRenewer: this._lockRenewer,\n        skipParsingBodyAsJson: this.skipParsingBodyAsJson,\n        skipConvertingDate: this.skipConvertingDate,\n      });\n\n    // this ensures that if the outer service bus client is closed that  this receiver is cleaned up.\n    // this mostly affects us if we're in the middle of init() - the connection (and receiver) are not yet\n    // open but we do need to close the receiver to exit the init() loop.\n    this._context.messageReceivers[this._streamingReceiver.name] = this._streamingReceiver;\n\n    this._streamingReceiver.subscribe(handlers, options).catch((_) => {\n      // (the error will already have been reported to the user)\n      if (this._streamingReceiver) {\n        delete this._context.messageReceivers[this._streamingReceiver.name];\n      }\n    });\n\n    return {\n      close: async (): Promise<void> => {\n        return this._streamingReceiver?.stopReceivingMessages();\n      },\n    };\n  }\n\n  async completeMessage(message: ServiceBusReceivedMessage): Promise<void> {\n    this._throwIfReceiverOrConnectionClosed();\n    throwErrorIfInvalidOperationOnMessage(message, this.receiveMode, this._context.connectionId);\n    const msgImpl = message as ServiceBusMessageImpl;\n    return completeMessage(msgImpl, this._context, this.entityPath, this._retryOptions);\n  }\n\n  async abandonMessage(\n    message: ServiceBusReceivedMessage,\n    propertiesToModify?: { [key: string]: number | boolean | string | Date | null },\n  ): Promise<void> {\n    this._throwIfReceiverOrConnectionClosed();\n    throwErrorIfInvalidOperationOnMessage(message, this.receiveMode, this._context.connectionId);\n    const msgImpl = message as ServiceBusMessageImpl;\n    return abandonMessage(\n      msgImpl,\n      this._context,\n      this.entityPath,\n      propertiesToModify,\n      this._retryOptions,\n    );\n  }\n\n  async deferMessage(\n    message: ServiceBusReceivedMessage,\n    propertiesToModify?: { [key: string]: number | boolean | string | Date | null },\n  ): Promise<void> {\n    this._throwIfReceiverOrConnectionClosed();\n    throwErrorIfInvalidOperationOnMessage(message, this.receiveMode, this._context.connectionId);\n    const msgImpl = message as ServiceBusMessageImpl;\n    return deferMessage(\n      msgImpl,\n      this._context,\n      this.entityPath,\n      propertiesToModify,\n      this._retryOptions,\n    );\n  }\n\n  async deadLetterMessage(\n    message: ServiceBusReceivedMessage,\n    options?: DeadLetterOptions & { [key: string]: number | boolean | string | Date | null },\n  ): Promise<void> {\n    this._throwIfReceiverOrConnectionClosed();\n    throwErrorIfInvalidOperationOnMessage(message, this.receiveMode, this._context.connectionId);\n    const msgImpl = message as ServiceBusMessageImpl;\n    return deadLetterMessage(msgImpl, this._context, this.entityPath, options, this._retryOptions);\n  }\n\n  async renewMessageLock(message: ServiceBusReceivedMessage): Promise<Date> {\n    this._throwIfReceiverOrConnectionClosed();\n    throwErrorIfInvalidOperationOnMessage(message, this.receiveMode, this._context.connectionId);\n\n    const tracingContext = extractSpanContextFromServiceBusMessage(message);\n    const spanLinks: TracingSpanLink[] = tracingContext ? [{ tracingContext }] : [];\n\n    return tracingClient.withSpan(\n      \"ServiceBusReceiver.renewMessageLock\",\n      {},\n      () => {\n        const msgImpl = message as ServiceBusMessageImpl;\n\n        let associatedLinkName: string | undefined;\n        if (msgImpl.delivery.link) {\n          const associatedReceiver = this._context.getReceiverFromCache(msgImpl.delivery.link.name);\n          associatedLinkName = associatedReceiver?.name;\n        }\n        return this._context\n          .getManagementClient(this.entityPath)\n          .renewLock(message.lockToken!, { associatedLinkName })\n          .then((lockedUntil) => {\n            message.lockedUntilUtc = lockedUntil;\n            return lockedUntil;\n          });\n      },\n      {\n        spanLinks,\n        ...toSpanOptions(\n          { entityPath: this.entityPath, host: this._context.config.host },\n          \"receive\",\n          \"client\",\n        ),\n      },\n    );\n  }\n\n  async close(): Promise<void> {\n    try {\n      this._isClosed = true;\n      if (this._context.connection && this._context.connection.isOpen()) {\n        // Close the streaming receiver.\n        if (this._streamingReceiver) {\n          await this._streamingReceiver.close();\n        }\n\n        // Close the batching receiver.\n        if (this._batchingReceiver) {\n          await this._batchingReceiver.close();\n        }\n      }\n    } catch (err: any) {\n      logger.logError(err, `${this.logPrefix} An error occurred while closing the Receiver`);\n      throw err;\n    }\n  }\n\n  /**\n   * Indicates whether the receiver is currently receiving messages or not.\n   * When this returns true, new `registerMessageHandler()` or `receiveMessages()` calls cannot be made.\n   */\n  private _isReceivingMessages(): boolean {\n    if (\n      this._streamingReceiver &&\n      this._streamingReceiver.isOpen() &&\n      this._streamingReceiver.isSubscribeActive\n    ) {\n      return true;\n    }\n    if (\n      this._batchingReceiver &&\n      this._batchingReceiver.isOpen() &&\n      this._batchingReceiver.isReceivingMessages\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  private _createBatchingReceiver(\n    context: ConnectionContext,\n    entityPath: string,\n    options: ReceiveOptions,\n  ): BatchingReceiver {\n    const receiver = BatchingReceiver.create(this.identifier, context, entityPath, options);\n    logger.verbose(\n      `[${this.logPrefix}] receiver '${receiver.name}' created, with maxConcurrentCalls set to ${options.maxConcurrentCalls}.`,\n    );\n\n    return receiver;\n  }\n\n  /**\n   * Helper function to retrieve any active receiver name, regardless of streaming or\n   * batching if it exists. This is used for optimization on the service side\n   */\n  private _getAssociatedReceiverName(): string | undefined {\n    if (this._streamingReceiver && this._streamingReceiver.isOpen()) {\n      return this._streamingReceiver.name;\n    }\n    if (\n      this._batchingReceiver &&\n      this._batchingReceiver.isOpen() &&\n      this._batchingReceiver.isReceivingMessages\n    ) {\n      return this._batchingReceiver.name;\n    }\n    return;\n  }\n}\n"]}