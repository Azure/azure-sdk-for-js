{"version":3,"file":"messageReceiver.js","sourceRoot":"","sources":["../../../src/core/messageReceiver.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { MessagingError, RetryOptions } from \"@azure/core-amqp\";\nimport { Constants, ErrorNameConditionMapper } from \"@azure/core-amqp\";\nimport type { AmqpError, EventContext, OnAmqpEvent, Receiver, ReceiverOptions } from \"rhea-promise\";\nimport { receiverLogger as logger } from \"../log.js\";\nimport type { ReceiverType } from \"./linkEntity.js\";\nimport { LinkEntity } from \"./linkEntity.js\";\nimport type { ConnectionContext } from \"../connectionContext.js\";\nimport type { ServiceBusMessageImpl } from \"../serviceBusMessage.js\";\nimport { DispositionType } from \"../serviceBusMessage.js\";\nimport { getUniqueName } from \"../util/utils.js\";\nimport type { ProcessErrorArgs, ReceiveMode, SubscribeOptions } from \"../models.js\";\nimport type { DispositionStatusOptions } from \"./managementClient.js\";\nimport type { AbortSignalLike } from \"@azure/abort-controller\";\nimport type { DeferredPromiseAndTimer, ReceiverHandlers } from \"./shared.js\";\nimport { onMessageSettled, createReceiverOptions } from \"./shared.js\";\nimport type { LockRenewer } from \"./autoLockRenewer.js\";\nimport { translateServiceBusError } from \"../serviceBusError.js\";\n\n/**\n * @internal\n */\nexport interface OnAmqpEventAsPromise extends OnAmqpEvent {\n  (context: EventContext): Promise<void>;\n}\n\n/**\n * @internal\n */\nexport interface ReceiveOptions extends SubscribeOptions {\n  /**\n   * The mode in which messages should be received.\n   */\n  receiveMode: ReceiveMode;\n  /**\n   * Retry policy options that determine the mode, number of retries, retry interval etc.\n   */\n  retryOptions?: RetryOptions;\n\n  /**\n   * A LockAutoRenewer that will automatically renew locks based on user specified interval.\n   * This will be set if the user has chosen peekLock mode _and_ they've set a positive\n   * maxAutoRenewLockDurationInMs value when they created their receiver.\n   */\n  lockRenewer: LockRenewer | undefined;\n  /**\n   * Option to disable the client from running JSON.parse() on the message body when receiving the message.\n   * Not applicable if the message was sent with AMQP body type value or sequence. Use this option when you\n   * prefer to work directly with the bytes present in the message body than have the client attempt to parse it.\n   */\n  skipParsingBodyAsJson: boolean;\n\n  /**\n   * Whether to skip converting Date type on properties of message annotations\n   * or application properties into numbers when receiving the message. By\n   * default, properties of Date type is converted into UNIX epoch number for\n   * compatibility.\n   */\n  skipConvertingDate: boolean;\n}\n\n/**\n * Describes the signature of the message handler passed to `registerMessageHandler` method.\n * @internal\n */\nexport interface OnMessage {\n  /**\n   * Handler for processing each incoming message.\n   */\n  (message: ServiceBusMessageImpl): Promise<void>;\n}\n\n/**\n * Describes the signature of the error handler passed to `registerMessageHandler` method.\n *\n * @internal\n */\nexport interface OnError {\n  /**\n   * Handler for any error that occurs while receiving or processing messages.\n   *\n   * NOTE: if this signature changes make sure you reflect those same changes in the\n   * `OnErrorNoContext` definition below.\n   */\n  (args: ProcessErrorArgs): Promise<void>;\n}\n\n/**\n * An onError method but without the context property. Used when wrapping OnError\n * with an implicit ProcessErrorContext. Used by LockRenewer.\n *\n * @internal\n */\nexport interface OnErrorNoContext {\n  (error: MessagingError | Error): void;\n}\n\n/**\n * @internal\n * Describes the MessageReceiver that will receive messages from ServiceBus.\n */\nexport abstract class MessageReceiver extends LinkEntity<Receiver> {\n  /**\n   * The type of receiver: \"batching\" or \"streaming\".\n   */\n  receiverType: ReceiverType;\n  /**\n   * The mode in which messages should be received.\n   * Default: ReceiveMode.peekLock\n   */\n  receiveMode: ReceiveMode;\n  /**\n   * Indicates whether `Message.complete()` should be called\n   * automatically after the message processing is complete while receiving messages with handlers.\n   * Default: false.\n   */\n  autoComplete: boolean;\n  /**\n   * Maintains a map of deliveries that\n   * are being actively disposed. It acts as a store for correlating the responses received for\n   * active dispositions.\n   */\n  protected _deliveryDispositionMap: Map<number, DeferredPromiseAndTimer> = new Map<\n    number,\n    DeferredPromiseAndTimer\n  >();\n\n  /**\n   * A lock renewer that handles message lock auto-renewal. This is undefined unless the user\n   * has activated autolock renewal via ReceiveOptions. A single auto lock renewer is shared\n   * for all links for a `ServiceBusReceiver` instance.\n   */\n  protected _lockRenewer: LockRenewer | undefined;\n\n  constructor(\n    public identifier: string,\n    context: ConnectionContext,\n    entityPath: string,\n    receiverType: ReceiverType,\n    options: Omit<ReceiveOptions, \"maxConcurrentCalls\">,\n  ) {\n    super(entityPath, entityPath, context, receiverType, logger, {\n      address: entityPath,\n      audience: `${context.config.endpoint}${entityPath}`,\n    });\n\n    this.receiverType = receiverType;\n    this.receiveMode = options.receiveMode || \"peekLock\";\n\n    // If explicitly set to false then autoComplete is false else true (default).\n    this.autoComplete =\n      options.autoCompleteMessages === false ? options.autoCompleteMessages : true;\n    this._lockRenewer = options.lockRenewer;\n  }\n\n  /**\n   * Creates the options that need to be specified while creating an AMQP receiver link.\n   */\n  protected _createReceiverOptions(\n    useNewName: boolean,\n    handlers: ReceiverHandlers,\n  ): ReceiverOptions {\n    const rcvrOptions: ReceiverOptions = createReceiverOptions(\n      useNewName ? getUniqueName(this.baseName) : this.name,\n      this.receiveMode,\n      {\n        address: this.address,\n      },\n      this.identifier,\n      {\n        onSettled: (context: EventContext) => {\n          return onMessageSettled(this.logPrefix, context.delivery, this._deliveryDispositionMap);\n        },\n        ...handlers,\n      },\n    );\n\n    return rcvrOptions;\n  }\n\n  /**\n   * Creates a new AMQP receiver under a new AMQP session.\n   */\n  protected async _init(options: ReceiverOptions, abortSignal?: AbortSignalLike): Promise<void> {\n    try {\n      await this.initLink(options, abortSignal);\n\n      // It is possible for someone to close the receiver and then start it again.\n      // Thus make sure that the receiver is present in the client cache.\n      this._context.messageReceivers[this.name] = this as any;\n    } catch (err: any) {\n      const translatedError = translateServiceBusError(err);\n      logger.logError(\n        translatedError,\n        \"%s An error occured while creating the receiver\",\n        this.logPrefix,\n      );\n\n      // Fix the unhelpful error messages for the OperationTimeoutError that comes from `rhea-promise`.\n      if ((translatedError as MessagingError).code === \"OperationTimeoutError\") {\n        translatedError.message =\n          \"Failed to create a receiver within allocated time and retry attempts.\";\n      }\n\n      throw translatedError;\n    }\n  }\n\n  protected createRheaLink(\n    options: ReceiverOptions,\n    _abortSignal?: AbortSignalLike,\n  ): Promise<Receiver> {\n    return this._context.connection.createReceiver(options);\n  }\n\n  /**\n   * React to receiver being detached due to given error.\n   * You may want to set up retries to recover the broken link and/or report error to user.\n   * @param error - The error accompanying the receiver/session error or connection disconnected events\n   */\n  abstract onDetached(error?: AmqpError | Error): Promise<void>;\n\n  /**\n   * Clears lock renewal timers on all active messages, clears token remewal for current receiver,\n   * removes current MessageReceiver instance from cache, and closes the underlying AMQP receiver.\n   * @returns Promise<void>.\n   */\n  async close(): Promise<void> {\n    this._lockRenewer?.stopAll(this);\n    await super.close();\n  }\n\n  /**\n   * Settles the message with the specified disposition.\n   * @param message - The ServiceBus Message that needs to be settled.\n   * @param operation - The disposition type.\n   * @param options - Optional parameters that can be provided while disposing the message.\n   */\n  async settleMessage(\n    message: ServiceBusMessageImpl,\n    operation: DispositionType,\n    options: DispositionStatusOptions,\n  ): Promise<any> {\n    return new Promise((resolve, reject) => {\n      if (operation.match(/^(complete|abandon|defer|deadletter)$/) == null) {\n        return reject(new Error(`operation: '${operation}' is not a valid operation.`));\n      }\n      this._lockRenewer?.stop(this, message);\n      const delivery = message.delivery;\n      const timer = setTimeout(() => {\n        this._deliveryDispositionMap.delete(delivery.id);\n\n        logger.verbose(\n          \"%s Disposition for delivery id: %d, did not complete in %d milliseconds. \" +\n            \"Hence rejecting the promise with timeout error.\",\n          this.logPrefix,\n          delivery.id,\n          Constants.defaultOperationTimeoutInMs,\n        );\n\n        const e: AmqpError = {\n          condition: ErrorNameConditionMapper.ServiceUnavailableError,\n          description:\n            \"Operation to settle the message has timed out. The disposition of the \" +\n            \"message may or may not be successful\",\n        };\n        return reject(translateServiceBusError(e));\n      }, options.retryOptions?.timeoutInMs ?? Constants.defaultOperationTimeoutInMs);\n      this._deliveryDispositionMap.set(delivery.id, {\n        resolve: resolve,\n        reject: reject,\n        timer: timer,\n      });\n      if (operation === DispositionType.complete) {\n        delivery.accept();\n      } else if (operation === DispositionType.abandon) {\n        const params: any = {\n          undeliverable_here: false,\n        };\n        if (options.propertiesToModify) params.message_annotations = options.propertiesToModify;\n        delivery.modified(params);\n      } else if (operation === DispositionType.defer) {\n        const params: any = {\n          undeliverable_here: true,\n        };\n        if (options.propertiesToModify) params.message_annotations = options.propertiesToModify;\n        delivery.modified(params);\n      } else if (operation === DispositionType.deadletter) {\n        const error: AmqpError = {\n          condition: Constants.deadLetterName,\n          info: {\n            ...options.propertiesToModify,\n            DeadLetterReason: options.deadLetterReason,\n            DeadLetterErrorDescription: options.deadLetterDescription,\n          },\n        };\n        delivery.reject(error);\n      }\n    });\n  }\n}\n"]}