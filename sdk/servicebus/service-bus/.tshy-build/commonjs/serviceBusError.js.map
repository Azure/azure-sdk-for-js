{"version":3,"file":"serviceBusError.js","sourceRoot":"","sources":["../../src/serviceBusError.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { isMessagingError, MessagingError, translate } from \"@azure/core-amqp\";\nimport type { AmqpError } from \"rhea-promise\";\nimport { isObjectWithProperties } from \"@azure/core-util\";\n\n/**\n * Service Bus failure codes.\n */\nexport type ServiceBusErrorCode =\n  // note: This list is intended to loosely follow https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/servicebus/Azure.Messaging.ServiceBus/src/Primitives/ServiceBusFailureReason.cs\n  /**\n   * The exception was the result of a general error within the client library.\n   */\n  | \"GeneralError\"\n  /**\n   * A Service Bus resource cannot be found by the Service Bus service.\n   */\n  | \"MessagingEntityNotFound\"\n  /**\n   * The lock on the message is lost. Callers should attempt to receive and process the message again.\n   */\n  | \"MessageLockLost\"\n  /**\n   * The requested message was not found.\n   */\n  | \"MessageNotFound\"\n  /**\n   * A message is larger than the maximum size allowed for its transport.\n   */\n  | \"MessageSizeExceeded\"\n  /**\n   * An entity with the same name exists under the same namespace.\n   */\n  | \"MessagingEntityAlreadyExists\"\n  /**\n   * The Messaging Entity is disabled. Enable the entity again using Portal.\n   */\n  | \"MessagingEntityDisabled\"\n  /**\n   * The quota applied to an Service Bus resource has been exceeded while interacting with the Azure Service Bus service.\n   */\n  | \"QuotaExceeded\"\n  /**\n   * The Azure Service Bus service reports that it is busy in response to a client request to perform an operation.\n   */\n  | \"ServiceBusy\"\n  /**\n   * An operation or other request timed out while interacting with the Azure Service Bus service.\n   */\n  | \"ServiceTimeout\"\n  /**\n   * There was a general communications error encountered when interacting with the Azure Service Bus service.\n   */\n  | \"ServiceCommunicationProblem\"\n  /**\n   * The requested session cannot be locked.\n   */\n  | \"SessionCannotBeLocked\"\n  /**\n   * The lock on the session has expired. Callers should request the session again.\n   */\n  | \"SessionLockLost\"\n  /**\n   * The user doesn't have access to the entity.\n   */\n  | \"UnauthorizedAccess\";\n\n/**\n * Translation between the MessagingErrorCodes into a ServiceBusCode\n *\n * @internal\n */\nexport const wellKnownMessageCodesToServiceBusCodes: Map<string, ServiceBusErrorCode> = new Map([\n  [\"MessagingEntityNotFoundError\", \"MessagingEntityNotFound\"],\n  [\"MessageLockLostError\", \"MessageLockLost\"],\n  [\"MessageNotFoundError\", \"MessageNotFound\"],\n  [\"MessageTooLargeError\", \"MessageSizeExceeded\"],\n  [\"MessagingEntityAlreadyExistsError\", \"MessagingEntityAlreadyExists\"],\n  [\"MessagingEntityDisabledError\", \"MessagingEntityDisabled\"],\n  [\"QuotaExceededError\", \"QuotaExceeded\"],\n  [\"ServerBusyError\", \"ServiceBusy\"],\n\n  [\"OperationTimeoutError\", \"ServiceTimeout\"],\n  [\"ServiceUnavailableError\", \"ServiceTimeout\"],\n  [\"ServiceCommunicationError\", \"ServiceCommunicationProblem\"],\n  [\"SessionCannotBeLockedError\", \"SessionCannotBeLocked\"],\n  [\"SessionLockLostError\", \"SessionLockLost\"],\n  [\"UnauthorizedError\", \"UnauthorizedAccess\"],\n]);\n\n/**\n * Errors that occur within Service Bus.\n */\nexport class ServiceBusError extends MessagingError {\n  /**\n   * The reason for the failure.\n   *\n   * - **GeneralError**: The exception was the result of a general error within the client library.\n   * - **MessagingEntityNotFound**: A Service Bus resource cannot be found by the Service Bus service.\n   * - **MessageLockLost**: The lock on the message is lost. Callers should attempt to receive and process the message again.\n   * - **MessageNotFound**: The requested message was not found.\n   * - **MessageSizeExceeded**: A message is larger than the maximum size allowed for its transport.\n   * - **MessagingEntityAlreadyExists**: An entity with the same name exists under the same namespace.\n   * - **MessagingEntityDisabled**: The Messaging Entity is disabled. Enable the entity again using Portal.\n   * - **QuotaExceeded**: The quota applied to an Service Bus resource has been exceeded while interacting with the Azure Service Bus service.\n   * - **ServiceBusy**: The Azure Service Bus service reports that it is busy in response to a client request to perform an operation.\n   * - **ServiceTimeout**: An operation or other request timed out while interacting with the Azure Service Bus service.\n   * - **ServiceCommunicationProblem**: There was a general communications error encountered when interacting with the Azure Service Bus service.\n   * - **SessionCannotBeLocked**: The requested session cannot be locked.\n   * - **SessionLockLost**: The lock on the session has expired. Callers should request the session again.\n   * - **UnauthorizedAccess\"**: The user doesn't have access to the entity.\n   */\n  // NOTE: make sure this list and the list above are properly kept in sync.\n  code: ServiceBusErrorCode;\n\n  /**\n   * @param message - The error message that provides more information about the error.\n   * @param code - The reason for the failure.\n   */\n  constructor(message: string, code: ServiceBusErrorCode);\n  /**\n   * @param messagingError - An error whose properties will be copied to the ServiceBusError.\n   */\n  constructor(messagingError: MessagingError);\n  constructor(messageOrError: string | MessagingError, code?: ServiceBusErrorCode) {\n    const message = typeof messageOrError === \"string\" ? messageOrError : messageOrError.message;\n    super(message);\n\n    if (typeof messageOrError === \"string\") {\n      this.code = code ?? \"GeneralError\";\n    } else {\n      for (const prop in messageOrError) {\n        (this as any)[prop] = (messageOrError as any)[prop];\n      }\n\n      this.code = ServiceBusError.normalizeMessagingCode(messageOrError.code);\n      // For GeneralErrors, prefix the error message with the MessagingError code to provide\n      // more context to the user.\n      if (this.code === \"GeneralError\" && messageOrError.code) {\n        this.message = `${messageOrError.code}: ${this.message}`;\n      }\n    }\n\n    this.name = \"ServiceBusError\";\n  }\n\n  private static normalizeMessagingCode(oldCode?: string): ServiceBusErrorCode {\n    if (oldCode == null || !wellKnownMessageCodesToServiceBusCodes.has(oldCode)) {\n      return \"GeneralError\";\n    }\n\n    return wellKnownMessageCodesToServiceBusCodes.get(oldCode)!;\n  }\n}\n\n/**\n * Translates an error into either an Error or a ServiceBusError which provides a `reason` code that\n * can be used by clients to programmatically react to errors.\n *\n * If you are calling `@azure/core-amqp/translate` you should swap to using this function instead since it provides\n * Service Bus specific handling of the error (falling back to default translate behavior otherwise).\n *\n * @internal\n */\nexport function translateServiceBusError(err: AmqpError | Error): ServiceBusError | Error {\n  if (isServiceBusError(err)) {\n    return err;\n  }\n\n  const translatedError = translate(err);\n\n  if (isMessagingError(translatedError)) {\n    return new ServiceBusError(translatedError);\n  }\n\n  return translatedError;\n}\n\n/**\n * Determines if an error is of type `ServiceBusError`\n *\n * @param err - An error to check to see if it's of type ServiceBusError\n */\nexport function isServiceBusError(err: unknown): err is ServiceBusError {\n  return isObjectWithProperties(err, [\"name\"]) && err.name === \"ServiceBusError\";\n}\n"]}