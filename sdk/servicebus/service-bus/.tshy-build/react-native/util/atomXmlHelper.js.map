{"version":3,"file":"atomXmlHelper.js","sourceRoot":"","sources":["../../../src/util/atomXmlHelper.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  PipelineResponse,\n  PipelineRequest,\n  TransferProgressEvent,\n} from \"@azure/core-rest-pipeline\";\nimport { RestError } from \"@azure/core-rest-pipeline\";\nimport type { ServiceClient, OperationOptions, FullOperationResponse } from \"@azure/core-client\";\nimport { parseXML, stringifyXML } from \"@azure/core-xml\";\n\nimport * as Constants from \"./constants.js\";\nimport { administrationLogger as logger } from \"../log.js\";\nimport { Buffer } from \"buffer\";\n\nimport { parseURL } from \"./parseUrl.js\";\nimport { isJSONLikeObject } from \"./utils.js\";\nimport { isDefined } from \"@azure/core-util\";\nimport type { OperationTracingOptions } from \"@azure/core-tracing\";\nimport type { AbortSignalLike } from \"@azure/abort-controller\";\nimport type { InternalQueueOptions } from \"../serializers/queueResourceSerializer.js\";\nimport type { InternalTopicOptions } from \"../serializers/topicResourceSerializer.js\";\nimport type { InternalSubscriptionOptions } from \"../serializers/subscriptionResourceSerializer.js\";\nimport type { CreateRuleOptions } from \"../serializers/ruleResourceSerializer.js\";\n\n/**\n * @internal\n * Represents the internal ATOM XML serializer interface\n */\nexport interface AtomXmlSerializer {\n  serialize(requestBodyInJson: object): Record<string, unknown>;\n\n  deserialize(response: FullOperationResponse): Promise<FullOperationResponse>;\n}\n\n/**\n   applies options to the pipeline request.\n  */\nfunction applyRequestOptions(\n  request: PipelineRequest,\n  options: {\n    headers?: Record<string, string>;\n    onUploadProgress?: (progress: TransferProgressEvent) => void;\n    onDownloadProgress?: (progress: TransferProgressEvent) => void;\n    abortSignal?: AbortSignalLike;\n    tracingOptions?: OperationTracingOptions;\n    timeout: number;\n  },\n): void {\n  if (options.headers) {\n    const headers = options.headers;\n    for (const headerName of Object.keys(headers)) {\n      request.headers.set(headerName, headers[headerName]);\n    }\n  }\n  request.onDownloadProgress = options.onDownloadProgress;\n  request.onUploadProgress = options.onUploadProgress;\n  request.abortSignal = options.abortSignal;\n  request.timeout = options.timeout;\n  if (options.tracingOptions) {\n    request.tracingOptions = options.tracingOptions;\n  }\n}\n\n/**\n * @internal\n * Utility to execute Atom XML operations as HTTP requests\n */\nexport async function executeAtomXmlOperation(\n  serviceBusAtomManagementClient: ServiceClient,\n  request: PipelineRequest,\n  serializer: AtomXmlSerializer,\n  operationOptions: OperationOptions,\n  requestObject?:\n    | InternalQueueOptions\n    | InternalTopicOptions\n    | InternalSubscriptionOptions\n    | CreateRuleOptions,\n): Promise<FullOperationResponse> {\n  if (requestObject) {\n    request.body = stringifyXML(serializer.serialize(requestObject), { rootName: \"entry\" });\n    if (request.method === \"PUT\") {\n      request.headers.set(\"content-length\", Buffer.byteLength(request.body));\n    }\n  }\n\n  logger.verbose(`Executing ATOM based HTTP request body: ${request.body}`);\n\n  const reqPrepareOptions = {\n    headers: operationOptions.requestOptions?.customHeaders,\n    onUploadProgress: operationOptions.requestOptions?.onUploadProgress,\n    onDownloadProgress: operationOptions.requestOptions?.onDownloadProgress,\n    abortSignal: operationOptions.abortSignal,\n    tracingOptions: operationOptions.tracingOptions,\n    disableJsonStringifyOnBody: true,\n    timeout: operationOptions.requestOptions?.timeout || 0,\n  };\n  applyRequestOptions(request, reqPrepareOptions);\n  const response: PipelineResponse = await serviceBusAtomManagementClient.sendRequest(request);\n\n  logger.verbose(`Received ATOM based HTTP response: ${response.bodyAsText}`);\n\n  try {\n    if (response.bodyAsText) {\n      (response as FullOperationResponse).parsedBody = await parseXML(response.bodyAsText, {\n        includeRoot: true,\n      });\n    }\n  } catch (err: any) {\n    const error = new RestError(\n      `Error occurred while parsing the response body - expected the service to return valid xml content.`,\n      {\n        code: RestError.PARSE_ERROR,\n        statusCode: response.status,\n        request: response.request,\n        response,\n      },\n    );\n    logger.logError(err, \"Error parsing response body from Service\");\n    throw error;\n  }\n\n  return serializer.deserialize(response);\n}\n\n/**\n * @internal\n * The key-value pairs having undefined/null as the values would lead to the empty tags in the serialized XML request.\n * Empty tags in the request body is problematic because of the following reasons.\n * - ATOM based management operations throw a \"Bad Request\" error if empty tags are included in the XML request body at top level.\n * - At the inner levels, Service assigns the empty strings as values to the empty tags instead of throwing an error.\n *\n * This method recursively removes the key-value pairs with undefined/null as the values from the request object that is to be serialized.\n *\n */\nexport function sanitizeSerializableObject(resource: { [key: string]: any }): void {\n  Object.keys(resource).forEach(function (property) {\n    if (!isDefined(resource[property])) {\n      delete resource[property];\n    } else if (isJSONLikeObject(resource[property])) {\n      sanitizeSerializableObject(resource[property]);\n    }\n  });\n}\n\n/**\n * @internal\n * Serializes input information to construct the Atom XML request\n * @param resourceName - Name of the resource to be serialized like `QueueDescription`\n * @param resource - The entity details\n * @param allowedProperties - The set of properties that are allowed by the service for the\n * associated operation(s);\n */\nexport function serializeToAtomXmlRequest(\n  resourceName: string,\n  resource: unknown,\n): Record<string, unknown> {\n  const content: any = {};\n\n  content[resourceName] = Object.assign({}, resource);\n  sanitizeSerializableObject(content[resourceName]);\n\n  content[resourceName][Constants.XML_METADATA_MARKER] = {\n    xmlns: \"http://schemas.microsoft.com/netservices/2010/10/servicebus/connect\",\n    \"xmlns:i\": \"http://www.w3.org/2001/XMLSchema-instance\",\n  };\n\n  content[Constants.XML_METADATA_MARKER] = { type: \"application/xml\" };\n  const requestDetails: Record<string, unknown> = {\n    updated: new Date().toISOString(),\n    content: content,\n  };\n  requestDetails[Constants.XML_METADATA_MARKER] = {\n    xmlns: \"http://www.w3.org/2005/Atom\",\n  };\n  return requestDetails;\n}\n\n/**\n * @internal\n * Transforms response to contain the parsed data.\n * @param nameProperties - The set of 'name' properties to be constructed on the\n * resultant object e.g., QueueName, TopicName, etc.\n */\nexport async function deserializeAtomXmlResponse(\n  nameProperties: string[],\n  response: FullOperationResponse,\n): Promise<FullOperationResponse> {\n  // If received data is a non-valid HTTP response, the body is expected to contain error information\n  if (response.status < 200 || response.status >= 300) {\n    throw buildError(response);\n  }\n\n  parseAtomResult(response, nameProperties);\n\n  return response;\n}\n\n/**\n * @internal\n * Utility to deserialize the given JSON content in response body based on\n * if it's a single `entry` or `feed` and updates the `response.parsedBody` to hold the evaluated output.\n * @param response - Response containing the JSON value in `response.parsedBody`\n * @param nameProperties - The set of 'name' properties to be constructed on the\n * resultant object e.g., QueueName, TopicName, etc.\n * */\nfunction parseAtomResult(response: FullOperationResponse, nameProperties: string[]): void {\n  const atomResponseInJson = response.parsedBody;\n\n  let result: any;\n  if (!atomResponseInJson) {\n    response.parsedBody = undefined;\n    return;\n  }\n\n  if (atomResponseInJson.feed) {\n    result = parseFeedResult(atomResponseInJson.feed);\n  } else if (atomResponseInJson.entry) {\n    result = parseEntryResult(atomResponseInJson.entry);\n  }\n\n  if (result) {\n    if (Array.isArray(result)) {\n      result.forEach((entry) => {\n        setName(entry, nameProperties);\n      });\n    } else {\n      setName(result, nameProperties);\n    }\n    response.parsedBody = result;\n    return;\n  }\n\n  logger.warning(\n    \"Failure in parsing response body from service. Expected response to be in Atom XML format and have either feed or entry components, but received - %0\",\n    atomResponseInJson,\n  );\n  throw new RestError(\n    \"Error occurred while parsing the response body - expected the service to return atom xml content with either feed or entry elements.\",\n    {\n      code: RestError.PARSE_ERROR,\n      statusCode: response.status,\n      request: response.request,\n      response,\n    },\n  );\n}\n\n/**\n * @internal\n * Utility to help parse given `entry` result\n */\nfunction parseEntryResult(entry: any): Record<string, unknown> | undefined {\n  let result: any;\n\n  if (\n    typeof entry !== \"object\" ||\n    entry == null ||\n    typeof entry.content !== \"object\" ||\n    entry.content == null\n  ) {\n    return undefined;\n  }\n\n  const contentElementNames = Object.keys(entry.content).filter(function (key) {\n    return key !== Constants.XML_METADATA_MARKER;\n  });\n\n  if (contentElementNames && contentElementNames[0]) {\n    const contentRootElementName = contentElementNames[0];\n    delete entry.content[contentRootElementName][Constants.XML_METADATA_MARKER];\n    result = entry.content[contentRootElementName];\n\n    if (result) {\n      if (entry[Constants.XML_METADATA_MARKER]) {\n        result[Constants.ATOM_METADATA_MARKER] = entry[Constants.XML_METADATA_MARKER];\n      } else {\n        result[Constants.ATOM_METADATA_MARKER] = {};\n      }\n\n      result[Constants.ATOM_METADATA_MARKER][\"ContentRootElement\"] = contentRootElementName;\n\n      Object.keys(entry).forEach((property: string) => {\n        if (property !== \"content\" && property !== Constants.XML_METADATA_MARKER) {\n          result[Constants.ATOM_METADATA_MARKER][property] = entry[property];\n        }\n      });\n\n      return result;\n    }\n  }\n\n  return undefined;\n}\n\n/**\n * @internal\n * Utility to help parse link info from the given `feed` result\n */\nfunction parseLinkInfo(\n  feedLink: { [Constants.XML_METADATA_MARKER]: { rel: string; href: string } }[],\n  relationship: \"self\" | \"next\",\n): string | undefined {\n  if (!feedLink || !Array.isArray(feedLink)) {\n    return undefined;\n  }\n  for (const linkInfo of feedLink) {\n    if (linkInfo[Constants.XML_METADATA_MARKER].rel === relationship) {\n      return linkInfo[Constants.XML_METADATA_MARKER].href;\n    }\n  }\n  return undefined;\n}\n\n/**\n * @internal\n * Utility to help parse given `feed` result\n */\nfunction parseFeedResult(feed: any): Record<string, unknown>[] & { nextLink?: string } {\n  const result: Record<string, unknown>[] & { nextLink?: string } = [];\n  if (typeof feed === \"object\" && feed != null && feed.entry) {\n    if (Array.isArray(feed.entry)) {\n      feed.entry.forEach((entry: any) => {\n        const parsedEntryResult = parseEntryResult(entry);\n        if (parsedEntryResult) {\n          result.push(parsedEntryResult);\n        }\n      });\n    } else {\n      const parsedEntryResult = parseEntryResult(feed.entry);\n      if (parsedEntryResult) {\n        result.push(parsedEntryResult);\n      }\n    }\n    result.nextLink = parseLinkInfo(feed.link, \"next\");\n  }\n  return result;\n}\n\n/**\n * @internal\n */\nfunction isKnownResponseCode(\n  statusCode: number,\n): statusCode is keyof typeof Constants.HttpResponseCodes {\n  return !!(Constants.HttpResponseCodes as { [statusCode: number]: string })[statusCode];\n}\n\n/**\n * @internal\n * Extracts the applicable entity name(s) from the URL based on the known structure\n * and instantiates the corresponding name properties to the deserialized response\n *\n * The pattern matching checks to extract entity names are based on following\n * constraints dictated by the service\n * - '/' is allowed in Queue and Topic names\n * - '/' is not allowed in Namespace, Subscription and Rule names\n * - Valid pathname URL structures used in the ATOM based management API are\n *     - `<namespace-component>/<topic-name>/Subscriptions/<subscription-name>/Rules/<rule-name>`\n *     - `<namespace-component>/<topic-name>/Subscriptions/<subscription-name>`\n *     - `<namespace-component>/<any-entity-name>`\n *\n */\nfunction setName(entry: any, nameProperties: any): any {\n  if (entry[Constants.ATOM_METADATA_MARKER]) {\n    let rawUrl = entry[Constants.ATOM_METADATA_MARKER].id;\n\n    // The parsedUrl gets constructed differently for browser vs Node.\n    // It is specifically behaves different for some of the Atom based management API where\n    // the received URL in \"id\" element is of type \"sb:// ... \" and not a standard HTTP one\n    // Hence, normalizing the URL for parsing to work as expected in browser\n    if (rawUrl.startsWith(\"sb://\")) {\n      rawUrl = \"https://\" + rawUrl.substring(5);\n    }\n\n    const parsedUrl = parseURL(rawUrl);\n    const pathname: string = parsedUrl.pathname;\n\n    const firstIndexOfDelimiter = pathname.indexOf(\"/\");\n\n    if (pathname.match(\"(.*)/(.*)/Subscriptions/(.*)/Rules/(.*)\")) {\n      const lastIndexOfSubscriptionsDelimiter = pathname.lastIndexOf(\"/Subscriptions/\");\n      const firstIndexOfRulesDelimiter = pathname.indexOf(\"/Rules/\");\n      entry[nameProperties[0]] = pathname.substring(\n        firstIndexOfDelimiter + 1,\n        lastIndexOfSubscriptionsDelimiter,\n      );\n      entry[nameProperties[1]] = pathname.substring(\n        lastIndexOfSubscriptionsDelimiter + 15,\n        firstIndexOfRulesDelimiter,\n      );\n      entry[nameProperties[2]] = pathname.substring(firstIndexOfRulesDelimiter + 7);\n    } else if (pathname.match(\"(.*)/(.*)/Subscriptions/(.*)\")) {\n      const lastIndexOfSubscriptionsDelimiter = pathname.lastIndexOf(\"/Subscriptions/\");\n      entry[nameProperties[0]] = pathname.substring(\n        firstIndexOfDelimiter + 1,\n        lastIndexOfSubscriptionsDelimiter,\n      );\n      entry[nameProperties[1]] = pathname.substring(lastIndexOfSubscriptionsDelimiter + 15);\n    } else if (pathname.match(\"(.*)/(.*)\")) {\n      entry[nameProperties[0]] = pathname.substring(firstIndexOfDelimiter + 1);\n    }\n  }\n}\n\n/**\n * @internal\n * Utility to help construct the normalized `RestError` object based on given error\n * information and other data present in the received `response` object.\n */\nexport function buildError(response: FullOperationResponse): RestError {\n  if (!isKnownResponseCode(response.status)) {\n    throw new RestError(\n      `Service returned an error response with an unrecognized HTTP status code - ${response.status}`,\n      {\n        code: \"ServiceError\",\n        statusCode: response.status,\n        request: response.request,\n        response,\n      },\n    );\n  }\n\n  const errorBody = response.parsedBody;\n  let errorMessage;\n  if (typeof errorBody === \"string\") {\n    errorMessage = errorBody;\n  } else {\n    if (\n      !isDefined(errorBody) ||\n      !isDefined(errorBody.Error) ||\n      !isDefined(errorBody.Error.Detail)\n    ) {\n      errorMessage =\n        \"Detailed error message information not available. Look at the 'code' property on error for more information.\";\n    } else {\n      errorMessage = errorBody.Error.Detail;\n    }\n  }\n\n  const errorCode = getErrorCode(response, errorMessage);\n\n  const error: RestError = new RestError(errorMessage, {\n    code: errorCode,\n    statusCode: response.status,\n    request: response.request,\n    response,\n  });\n  return error;\n}\n\n/**\n * @internal\n * Helper utility to construct user friendly error codes based on based on given error\n * information and other data present in the received `response` object.\n */\nfunction getErrorCode(response: PipelineResponse, errorMessage: string): string {\n  if (response.status === 401) {\n    return \"UnauthorizedRequestError\";\n  }\n  if (response.status === 404) {\n    return \"MessageEntityNotFoundError\";\n  }\n  if (response.status === 409) {\n    if (response.request.method === \"DELETE\") {\n      return \"ServiceError\";\n    }\n\n    if (response.request.method === \"PUT\" && response.request.headers.get(\"If-Match\") === \"*\") {\n      return \"ServiceError\";\n    }\n\n    if (errorMessage && errorMessage.toLowerCase().includes(\"subcode=40901\")) {\n      return \"ServiceError\";\n    }\n\n    return \"MessageEntityAlreadyExistsError\";\n  }\n\n  if (response.status === 403) {\n    if (errorMessage && errorMessage.toLowerCase().includes(\"subcode=40301\")) {\n      return \"InvalidOperationError\";\n    }\n    return \"QuotaExceededError\";\n  }\n\n  if (response.status === 400) {\n    return \"ServiceError\";\n  }\n\n  if (response.status === 503) {\n    return \"ServerBusyError\";\n  }\n\n  return (Constants.HttpResponseCodes as { [statusCode: number]: string })[response.status];\n}\n"]}