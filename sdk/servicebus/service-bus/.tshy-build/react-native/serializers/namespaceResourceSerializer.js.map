{"version":3,"file":"namespaceResourceSerializer.js","sourceRoot":"","sources":["../../../src/serializers/namespaceResourceSerializer.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAIlC,OAAO,EAAE,0BAA0B,EAAE,yBAAyB,EAAE,MAAM,0BAA0B,CAAC;AACjG,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,kBAAkB,CAAC;AAgClE;;;;GAIG;AACH,MAAM,UAAU,cAAc,CAAC,YAAiC;IAC9D,MAAM,YAAY,GAAqC,CACrD,SAAS,CAAC,YAAY,CAAC,cAAc,CAAC,EAAE,cAAc,CAAC,CACxD,CAAC;IACF,OAAO;QACL,SAAS,EAAE,OAAO,CAAC,YAAY,CAAC,aAAa,CAAC,EAAE,WAAW,CAAC;QAC5D,YAAY,EAAE,YAAY;QAC1B,UAAU,EAAE,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC,EAAE,YAAY,CAAC;QAC/D,IAAI,EAAE,SAAS,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC;QAC7C,cAAc,EACZ,YAAY,KAAK,SAAS;YACxB,CAAC,CAAC,UAAU,CAAC,YAAY,CAAC,gBAAgB,CAAC,EAAE,gBAAgB,CAAC;YAC9D,CAAC,CAAC,SAAS;KAChB,CAAC;AACJ,CAAC;AAED;;;GAGG;AACH,MAAM,OAAO,2BAA2B;IACtC,SAAS;QACP,OAAO,yBAAyB,CAAC,qBAAqB,EAAE,EAAE,CAAC,CAAC;IAC9D,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,QAA+B;QAC/C,OAAO,0BAA0B,CAAC,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC,CAAC;IACxD,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { FullOperationResponse } from \"@azure/core-client\";\nimport type { AtomXmlSerializer } from \"../util/atomXmlHelper.js\";\nimport { deserializeAtomXmlResponse, serializeToAtomXmlRequest } from \"../util/atomXmlHelper.js\";\nimport { getInteger, getString, getDate } from \"../util/utils.js\";\n\n/**\n * Represents the metadata related to a service bus namespace.\n *\n */\nexport interface NamespaceProperties {\n  /**\n   * The time at which the namespace was created.\n   */\n  createdAt: Date;\n  /**\n   * The SKU/tier of the namespace.\n   * \"Basic\", \"Standard\" and \"Premium\"\n   */\n  messagingSku: \"Basic\" | \"Premium\" | \"Standard\";\n  /**\n   * The last time at which the namespace was modified.\n   */\n  modifiedAt: Date;\n  /**\n   * Name of the namespace.\n   */\n  name: string;\n  /**\n   * Number of messaging units allocated for namespace.\n   * Valid only for Premium namespaces.\n   * messagingUnits would be set to `undefined` for Basic and Standard namespaces.\n   */\n  messagingUnits: number | undefined;\n}\n\n/**\n * @internal\n * Builds the namespace object from the raw json object gotten after deserializing the\n * response from the service\n */\nexport function buildNamespace(rawNamespace: Record<string, any>): NamespaceProperties {\n  const messagingSku = <\"Basic\" | \"Premium\" | \"Standard\">(\n    getString(rawNamespace[\"MessagingSKU\"], \"messagingSku\")\n  );\n  return {\n    createdAt: getDate(rawNamespace[\"CreatedTime\"], \"createdAt\"),\n    messagingSku: messagingSku,\n    modifiedAt: getDate(rawNamespace[\"ModifiedTime\"], \"modifiedAt\"),\n    name: getString(rawNamespace[\"Name\"], \"name\"),\n    messagingUnits:\n      messagingSku === \"Premium\"\n        ? getInteger(rawNamespace[\"MessagingUnits\"], \"messagingUnits\")\n        : undefined,\n  };\n}\n\n/**\n * @internal\n * Atom XML Serializer for Namespaces.\n */\nexport class NamespaceResourceSerializer implements AtomXmlSerializer {\n  serialize(): Record<string, unknown> {\n    return serializeToAtomXmlRequest(\"NamespaceProperties\", {});\n  }\n\n  async deserialize(response: FullOperationResponse): Promise<FullOperationResponse> {\n    return deserializeAtomXmlResponse([\"name\"], response);\n  }\n}\n"]}