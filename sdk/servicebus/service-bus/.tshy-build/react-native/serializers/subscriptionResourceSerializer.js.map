{"version":3,"file":"subscriptionResourceSerializer.js","sourceRoot":"","sources":["../../../src/serializers/subscriptionResourceSerializer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { FullOperationResponse, OperationOptions } from \"@azure/core-client\";\nimport type { CorrelationRuleFilter } from \"../index.js\";\nimport type { AtomXmlSerializer } from \"../util/atomXmlHelper.js\";\nimport { deserializeAtomXmlResponse, serializeToAtomXmlRequest } from \"../util/atomXmlHelper.js\";\nimport * as Constants from \"../util/constants.js\";\nimport type { EntityStatus, EntityAvailabilityStatus } from \"../util/utils.js\";\nimport {\n  getBoolean,\n  getMessageCountDetails,\n  getInteger,\n  getString,\n  getStringOrUndefined,\n  getDate,\n} from \"../util/utils.js\";\nimport type {\n  InternalRuleOptions,\n  SqlRuleAction,\n  SqlRuleFilter,\n} from \"./ruleResourceSerializer.js\";\nimport { buildInternalRuleResource } from \"./ruleResourceSerializer.js\";\n\n/**\n * @internal\n * Builds the subscription options object from the user provided options.\n * Handles the differences in casing for the property names,\n * converts values to string and ensures the right order as expected by the service\n */\nexport function buildSubscriptionOptions(\n  subscription: CreateSubscriptionOptions,\n): InternalSubscriptionOptions {\n  return {\n    // NOTE: this ordering is extremely important. As an example, misordering of the ForwardTo property\n    // resulted in a customer bug where the Forwarding attributes appeared to be set but the portal was\n    // not picking up on it.\n    //\n    // The authority on this ordering is here:\n    // https://github.com/Azure/azure-sdk-for-net/blob/8af2dfc32c96ef3e340f9d20013bf588d97ea756/sdk/servicebus/Azure.Messaging.ServiceBus/src/Administration/SubscriptionPropertiesExtensions.cs#L191\n    LockDuration: subscription.lockDuration,\n    RequiresSession: getStringOrUndefined(subscription.requiresSession),\n    DefaultMessageTimeToLive: getStringOrUndefined(subscription.defaultMessageTimeToLive),\n    DeadLetteringOnMessageExpiration: getStringOrUndefined(\n      subscription.deadLetteringOnMessageExpiration,\n    ),\n    DeadLetteringOnFilterEvaluationExceptions: getStringOrUndefined(\n      subscription.deadLetteringOnFilterEvaluationExceptions,\n    ),\n    DefaultRuleDescription: subscription.defaultRuleOptions\n      ? buildInternalRuleResource(subscription.defaultRuleOptions)\n      : undefined,\n    MaxDeliveryCount: getStringOrUndefined(subscription.maxDeliveryCount),\n    EnableBatchedOperations: getStringOrUndefined(subscription.enableBatchedOperations),\n    Status: getStringOrUndefined(subscription.status),\n    ForwardTo: getStringOrUndefined(subscription.forwardTo),\n    UserMetadata: getStringOrUndefined(subscription.userMetadata),\n    ForwardDeadLetteredMessagesTo: getStringOrUndefined(subscription.forwardDeadLetteredMessagesTo),\n    AutoDeleteOnIdle: getStringOrUndefined(subscription.autoDeleteOnIdle),\n    EntityAvailabilityStatus: getStringOrUndefined(subscription.availabilityStatus),\n  };\n}\n\n/**\n * @internal\n * Builds the subscription object from the raw json object gotten after deserializing\n * the response from the service\n */\nexport function buildSubscription(rawSubscription: Record<string, any>): SubscriptionProperties {\n  return {\n    subscriptionName: getString(rawSubscription[Constants.SUBSCRIPTION_NAME], \"subscriptionName\"),\n    topicName: getString(rawSubscription[Constants.TOPIC_NAME], \"topicName\"),\n\n    lockDuration: getString(rawSubscription[Constants.LOCK_DURATION], \"lockDuration\"),\n    maxDeliveryCount: getInteger(rawSubscription[Constants.MAX_DELIVERY_COUNT], \"maxDeliveryCount\"),\n\n    requiresSession: getBoolean(rawSubscription[Constants.REQUIRES_SESSION], \"requiresSession\"),\n    enableBatchedOperations: getBoolean(\n      rawSubscription[Constants.ENABLE_BATCHED_OPERATIONS],\n      \"enableBatchedOperations\",\n    ),\n\n    defaultMessageTimeToLive: getString(\n      rawSubscription[Constants.DEFAULT_MESSAGE_TIME_TO_LIVE],\n      \"defaultMessageTimeToLive\",\n    ),\n    autoDeleteOnIdle: getString(rawSubscription[Constants.AUTO_DELETE_ON_IDLE], \"autoDeleteOnIdle\"),\n\n    deadLetteringOnMessageExpiration: getBoolean(\n      rawSubscription[Constants.DEAD_LETTERING_ON_MESSAGE_EXPIRATION],\n      \"deadLetteringOnMessageExpiration\",\n    ),\n    deadLetteringOnFilterEvaluationExceptions: getBoolean(\n      rawSubscription[Constants.DEAD_LETTERING_ON_FILTER_EVALUATION_EXCEPTIONS],\n      \"deadLetteringOnFilterEvaluationExceptions\",\n    ),\n    forwardDeadLetteredMessagesTo: getStringOrUndefined(\n      rawSubscription[Constants.FORWARD_DEADLETTERED_MESSAGES_TO],\n    ),\n\n    forwardTo: getStringOrUndefined(rawSubscription[Constants.FORWARD_TO]),\n    userMetadata: rawSubscription[Constants.USER_METADATA],\n\n    status: getString(rawSubscription[Constants.STATUS], \"status\") as EntityStatus,\n\n    availabilityStatus: getString(\n      rawSubscription[Constants.ENTITY_AVAILABILITY_STATUS],\n      \"availabilityStatus\",\n    ) as EntityAvailabilityStatus,\n  };\n}\n\n/**\n * @internal\n * Builds the subscription runtime info object from the raw json object gotten after deserializing\n * the response from the service\n */\nexport function buildSubscriptionRuntimeProperties(\n  rawSubscription: Record<string, any>,\n): SubscriptionRuntimeProperties {\n  const messageCountDetails = getMessageCountDetails(rawSubscription[Constants.COUNT_DETAILS]);\n  return {\n    subscriptionName: getString(rawSubscription[Constants.SUBSCRIPTION_NAME], \"subscriptionName\"),\n    topicName: getString(rawSubscription[Constants.TOPIC_NAME], \"topicName\"),\n    totalMessageCount: getInteger(rawSubscription[Constants.MESSAGE_COUNT], \"messageCount\"),\n    activeMessageCount: messageCountDetails.activeMessageCount,\n    deadLetterMessageCount: messageCountDetails.deadLetterMessageCount,\n    transferDeadLetterMessageCount: messageCountDetails.transferDeadLetterMessageCount,\n    transferMessageCount: messageCountDetails.transferMessageCount,\n    createdAt: getDate(rawSubscription[Constants.CREATED_AT], \"createdAt\"),\n    modifiedAt: getDate(rawSubscription[Constants.UPDATED_AT], \"modifiedAt\"),\n    accessedAt: getDate(rawSubscription[Constants.ACCESSED_AT], \"accessedAt\"),\n  };\n}\n\n/**\n * Represents settable options on a subscription\n */\nexport interface CreateSubscriptionOptions extends OperationOptions {\n  /**\n   * The default lock duration is applied to subscriptions that do not define a lock\n   * duration.\n   * (If sessions are enabled, this lock duration is applicable for sessions and not for messages.)\n   *\n   * This is to be specified in ISO-8601 duration format\n   * such as \"PT1M\" for 1 minute, \"PT5S\" for 5 seconds.\n   *\n   * More on ISO-8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations\n   */\n  lockDuration?: string;\n\n  /**\n   * If set to true, the subscription will be session-aware and only SessionReceiver\n   * will be supported. Session-aware subscription are not supported through REST.\n   * Settable only at subscription creation time.\n   */\n  requiresSession?: boolean;\n\n  /**\n   * Determines how long a message lives in the subscription. Based on whether\n   * dead-lettering is enabled, a message whose TTL has expired will either be moved\n   * to the subscription’s associated DeadLtterQueue or permanently deleted.\n   * This is to be specified in ISO-8601 duration format\n   * such as \"PT1M\" for 1 minute, \"PT5S\" for 5 seconds.\n   *\n   * More on ISO-8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations\n   */\n  defaultMessageTimeToLive?: string;\n\n  /**\n   * If it is enabled and a message expires, the Service Bus moves the message from\n   * the queue into the subscription’s dead-letter sub-queue. If disabled, message\n   * will be permanently deleted from the subscription’s main queue.\n   * Settable only at subscription creation time.\n   */\n  deadLetteringOnMessageExpiration?: boolean;\n\n  /**\n   * Determines how the Service Bus handles a message that causes an exception during\n   * a subscription’s filter evaluation. If the value is set to true, the message that\n   * caused the exception will be moved to the subscription’s dead-letter sub-queue.\n   * Otherwise, it will be discarded. By default this parameter is set to true,\n   * allowing the user a chance to investigate the cause of the exception.\n   * It can occur from a malformed message or some incorrect assumptions being made\n   * in the filter about the form of the message. Settable only at topic creation time.\n   */\n  deadLetteringOnFilterEvaluationExceptions?: boolean;\n\n  /**\n   * Represents the options to create the default rule for the subscription.\n   */\n  defaultRuleOptions?: {\n    /**\n     * Name of the rule\n     */\n    name: string;\n\n    /**\n     * Defines the filter expression that the rule evaluates. For `SqlRuleFilter` input,\n     * the expression string is interpreted as a SQL92 expression which must\n     * evaluate to True or False. Only one between a `CorrelationRuleFilter` or\n     * a `SqlRuleFilter` can be defined.\n     */\n    filter?: SqlRuleFilter | CorrelationRuleFilter;\n\n    /**\n     * The SQL like expression that can be executed on the message should the\n     * associated filter apply.\n     */\n    action?: SqlRuleAction;\n  };\n\n  /**\n   * The maximum delivery count of messages after which if it is still not settled,\n   * gets moved to the dead-letter sub-queue.\n   *\n   */\n  maxDeliveryCount?: number;\n\n  /**\n   * Specifies if batched operations should be allowed.\n   */\n  enableBatchedOperations?: boolean;\n\n  /**\n   * Status of the messaging entity.\n   */\n  status?: EntityStatus;\n\n  /**\n   * Absolute URL or the name of the queue or topic the\n   * messages are to be forwarded to.\n   * For example, an absolute URL input would be of the form\n   * `sb://<your-service-bus-namespace-endpoint>/<queue-or-topic-name>`\n   */\n  forwardTo?: string;\n\n  /**\n   * The user provided metadata information associated with the subscription.\n   * Used to specify textual content such as tags, labels, etc.\n   * Value must not exceed 1024 bytes encoded in utf-8.\n   */\n  userMetadata?: string;\n\n  /**\n   * Absolute URL or the name of the queue or topic the dead-lettered\n   * messages are to be forwarded to.\n   * For example, an absolute URL input would be of the form\n   * `sb://<your-service-bus-namespace-endpoint>/<queue-or-topic-name>`\n   */\n  forwardDeadLetteredMessagesTo?: string;\n\n  /**\n   * Max idle time before entity is deleted.\n   * This is to be specified in ISO-8601 duration format\n   * such as \"PT1M\" for 1 minute, \"PT5S\" for 5 seconds.\n   *\n   * More on ISO-8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations\n   */\n  autoDeleteOnIdle?: string;\n\n  /**\n   * Availability status of the messaging entity.\n   */\n  availabilityStatus?: EntityAvailabilityStatus;\n}\n\n/**\n * Represents the input for updateSubscription.\n *\n */\nexport interface SubscriptionProperties {\n  /**\n   * Name of the subscription\n   */\n  readonly subscriptionName: string;\n\n  /**\n   * Name of the topic\n   */\n  readonly topicName: string;\n\n  /**\n   * The default lock duration is applied to subscriptions that do not define a lock\n   * duration.\n   * (If sessions are enabled, this lock duration is applicable for sessions and not for messages.)\n   *\n   * This is to be specified in ISO-8601 duration format\n   * such as \"PT1M\" for 1 minute, \"PT5S\" for 5 seconds.\n   *\n   * More on ISO-8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations\n   */\n  lockDuration: string;\n\n  /**\n   * If set to true, the subscription will be session-aware and only SessionReceiver\n   * will be supported. Session-aware subscription are not supported through REST.\n   * Settable only at subscription creation time.\n   */\n  readonly requiresSession: boolean;\n\n  /**\n   * Determines how long a message lives in the subscription. Based on whether\n   * dead-lettering is enabled, a message whose TTL has expired will either be moved\n   * to the subscription’s associated DeadLtterQueue or permanently deleted.\n   * This is to be specified in ISO-8601 duration format\n   * such as \"PT1M\" for 1 minute, \"PT5S\" for 5 seconds.\n   *\n   * More on ISO-8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations\n   */\n  defaultMessageTimeToLive: string;\n\n  /**\n   * If it is enabled and a message expires, the Service Bus moves the message from\n   * the queue into the subscription’s dead-letter sub-queue. If disabled, message\n   * will be permanently deleted from the subscription’s main queue.\n   * Settable only at subscription creation time.\n   */\n  deadLetteringOnMessageExpiration: boolean;\n\n  /**\n   * Determines how the Service Bus handles a message that causes an exception during\n   * a subscription’s filter evaluation. If the value is set to true, the message that\n   * caused the exception will be moved to the subscription’s dead-letter sub-queue.\n   * Otherwise, it will be discarded. By default this parameter is set to true,\n   * allowing the user a chance to investigate the cause of the exception.\n   * It can occur from a malformed message or some incorrect assumptions being made\n   * in the filter about the form of the message. Settable only at topic creation time.\n   */\n  deadLetteringOnFilterEvaluationExceptions: boolean;\n\n  /**\n   * The maximum delivery count of messages after which if it is still not settled,\n   * gets moved to the dead-letter sub-queue.\n   *\n   */\n  maxDeliveryCount: number;\n\n  /**\n   * Specifies if batched operations should be allowed.\n   */\n  enableBatchedOperations: boolean;\n\n  /**\n   * Status of the messaging entity.\n   */\n  status: EntityStatus;\n\n  /**\n   * Absolute URL or the name of the queue or topic the\n   * messages are to be forwarded to.\n   * For example, an absolute URL input would be of the form\n   * `sb://<your-service-bus-namespace-endpoint>/<queue-or-topic-name>`\n   */\n  forwardTo?: string;\n\n  /**\n   * The user provided metadata information associated with the subscription.\n   * Used to specify textual content such as tags, labels, etc.\n   * Value must not exceed 1024 bytes encoded in utf-8.\n   */\n  userMetadata?: string;\n\n  /**\n   * Absolute URL or the name of the queue or topic the dead-lettered\n   * messages are to be forwarded to.\n   * For example, an absolute URL input would be of the form\n   * `sb://<your-service-bus-namespace-endpoint>/<queue-or-topic-name>`\n   */\n  forwardDeadLetteredMessagesTo?: string;\n\n  /**\n   * Max idle time before entity is deleted.\n   * This is to be specified in ISO-8601 duration format\n   * such as \"PT1M\" for 1 minute, \"PT5S\" for 5 seconds.\n   *\n   * More on ISO-8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations\n   */\n  autoDeleteOnIdle: string;\n\n  /**\n   * Availability status of the messaging entity.\n   */\n  availabilityStatus?: EntityAvailabilityStatus;\n}\n\n/**\n * @internal\n * Internal representation of settable options on a subscription\n */\nexport interface InternalSubscriptionOptions {\n  /**\n   * The default lock duration is applied to subscriptions that do not define a lock\n   * duration.\n   * (If sessions are enabled, this lock duration is applicable for sessions and not for messages.)\n   *\n   * This is to be specified in ISO-8601 duration format\n   * such as \"PT1M\" for 1 minute, \"PT5S\" for 5 seconds.\n   *\n   * More on ISO-8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations\n   */\n  LockDuration?: string;\n\n  /**\n   * If set to true, the subscription will be session-aware and only SessionReceiver\n   * will be supported. Session-aware subscription are not supported through REST.\n   * Settable only at subscription creation time.\n   */\n  RequiresSession?: string;\n\n  /**\n   * Determines how long a message lives in the subscription. Based on whether\n   * dead-lettering is enabled, a message whose TTL has expired will either be moved\n   * to the subscription’s associated DeadLtterQueue or permanently deleted.\n   * This is to be specified in ISO-8601 duration format\n   * such as \"PT1M\" for 1 minute, \"PT5S\" for 5 seconds.\n   *\n   * More on ISO-8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations\n   */\n  DefaultMessageTimeToLive?: string;\n\n  /**\n   * If it is enabled and a message expires, the Service Bus moves the message from\n   * the queue into the subscription’s dead-letter sub-queue. If disabled, message\n   * will be permanently deleted from the subscription’s main queue.\n   * Settable only at subscription creation time.\n   */\n  DeadLetteringOnMessageExpiration?: string;\n\n  /**\n   * Determines how the Service Bus handles a message that causes an exception during\n   * a subscription’s filter evaluation. If the value is set to true, the message\n   * that caused the exception will be moved to the subscription’s dead-letter sub-queue.\n   * Otherwise, it will be discarded. By default this parameter is set to true, allowing\n   * the user a chance to investigate the cause of the exception. It can occur from a\n   * malformed message or some incorrect assumptions being made in the filter about the\n   * form of the message. Settable only at topic creation time.\n   */\n  DeadLetteringOnFilterEvaluationExceptions?: string;\n\n  /**\n   * The maximum delivery count of messages after which if it is still not settled,\n   * gets moved to the dead-letter sub-queue.\n   *\n   */\n  MaxDeliveryCount?: string;\n\n  /**\n   * Specifies if batched operations should be allowed.\n   */\n  EnableBatchedOperations?: string;\n\n  /**\n   * Status of the messaging entity.\n   */\n  Status?: string;\n\n  /**\n   * Absolute URL or the name of the queue or topic the\n   * messages are to be forwarded to.\n   * For example, an absolute URL input would be of the form\n   * `sb://<your-service-bus-namespace-endpoint>/<queue-or-topic-name>`\n   */\n  ForwardTo?: string;\n\n  /**\n   * The user provided metadata information associated with the subscription.\n   * Used to specify textual content such as tags, labels, etc.\n   * Value must not exceed 1024 bytes encoded in utf-8.\n   */\n  UserMetadata?: string;\n\n  /**\n   * Absolute URL or the name of the queue or topic the dead-lettered\n   * messages are to be forwarded to.\n   * For example, an absolute URL input would be of the form\n   * `sb://<your-service-bus-namespace-endpoint>/<queue-or-topic-name>`\n   */\n  ForwardDeadLetteredMessagesTo?: string;\n\n  /**\n   * Max idle time before entity is deleted.\n   * This is to be specified in ISO-8601 duration format\n   * such as \"PT1M\" for 1 minute, \"PT5S\" for 5 seconds.\n   *\n   * More on ISO-8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations\n   */\n  AutoDeleteOnIdle?: string;\n\n  /**\n   * Availability status of the messaging entity.\n   */\n  EntityAvailabilityStatus?: string;\n\n  DefaultRuleDescription?: InternalRuleOptions;\n}\n\n/**\n * Represents runtime info attributes of a subscription entity\n */\nexport interface SubscriptionRuntimeProperties {\n  /**\n   * Name of the subscription\n   */\n  subscriptionName: string;\n\n  /**\n   * Name of the topic\n   */\n  topicName: string;\n\n  /**\n   * The entity's message count.\n   *\n   */\n  totalMessageCount: number;\n\n  /**\n   * The number of active messages in the queue.\n   */\n  activeMessageCount: number;\n\n  /**\n   * The number of messages that have been dead lettered.\n   */\n  deadLetterMessageCount: number;\n\n  /**\n   * The number of messages transferred to another queue, topic, or subscription\n   */\n  transferMessageCount: number;\n\n  /**\n   * The number of messages transferred to the dead letter queue.\n   */\n  transferDeadLetterMessageCount: number;\n\n  /**\n   * Created at timestamp\n   */\n  createdAt: Date;\n\n  /**\n   * Updated at timestamp\n   */\n  modifiedAt: Date;\n\n  /**\n   * Accessed at timestamp\n   */\n  accessedAt: Date;\n}\n\n/**\n * @internal\n * SubscriptionResourceSerializer for serializing / deserializing Subscription entities\n */\nexport class SubscriptionResourceSerializer implements AtomXmlSerializer {\n  serialize(resource: InternalSubscriptionOptions): Record<string, unknown> {\n    return serializeToAtomXmlRequest(\"SubscriptionDescription\", resource);\n  }\n\n  async deserialize(response: FullOperationResponse): Promise<FullOperationResponse> {\n    return deserializeAtomXmlResponse([\"TopicName\", \"SubscriptionName\"], response);\n  }\n}\n"]}