{"version":3,"file":"queueResourceSerializer.js","sourceRoot":"","sources":["../../../src/serializers/queueResourceSerializer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { FullOperationResponse, OperationOptions } from \"@azure/core-client\";\nimport type { AtomXmlSerializer } from \"../util/atomXmlHelper.js\";\nimport { deserializeAtomXmlResponse, serializeToAtomXmlRequest } from \"../util/atomXmlHelper.js\";\nimport * as Constants from \"../util/constants.js\";\nimport type { AuthorizationRule, EntityStatus, EntityAvailabilityStatus } from \"../util/utils.js\";\nimport {\n  getAuthorizationRulesOrUndefined,\n  getBoolean,\n  getMessageCountDetails,\n  getInteger,\n  getIntegerOrUndefined,\n  getRawAuthorizationRules,\n  getString,\n  getStringOrUndefined,\n  getDate,\n} from \"../util/utils.js\";\n\n/**\n * @internal\n * Builds the queue options object from the user provided options.\n * Handles the differences in casing for the property names,\n * converts values to string and ensures the right order as expected by the service\n */\nexport function buildQueueOptions(queue: CreateQueueOptions): InternalQueueOptions {\n  return {\n    // NOTE: this ordering is extremely important. As an example, misordering of the ForwardTo property\n    // resulted in a customer bug where the Forwarding attributes appeared to be set but the portal was\n    // not picking up on it.\n    //\n    // The authority on this ordering is here:\n    // https://github.com/Azure/azure-sdk-for-net/blob/8af2dfc32c96ef3e340f9d20013bf588d97ea756/sdk/servicebus/Azure.Messaging.ServiceBus/src/Administration/QueuePropertiesExtensions.cs#L20\n\n    LockDuration: queue.lockDuration,\n    MaxSizeInMegabytes: getStringOrUndefined(queue.maxSizeInMegabytes),\n    RequiresDuplicateDetection: getStringOrUndefined(queue.requiresDuplicateDetection),\n    RequiresSession: getStringOrUndefined(queue.requiresSession),\n    DefaultMessageTimeToLive: queue.defaultMessageTimeToLive,\n    DeadLetteringOnMessageExpiration: getStringOrUndefined(queue.deadLetteringOnMessageExpiration),\n    DuplicateDetectionHistoryTimeWindow: queue.duplicateDetectionHistoryTimeWindow,\n    MaxDeliveryCount: getStringOrUndefined(queue.maxDeliveryCount),\n    EnableBatchedOperations: getStringOrUndefined(queue.enableBatchedOperations),\n    AuthorizationRules: getRawAuthorizationRules(queue.authorizationRules),\n    Status: getStringOrUndefined(queue.status),\n    ForwardTo: getStringOrUndefined(queue.forwardTo),\n    UserMetadata: getStringOrUndefined(queue.userMetadata),\n    AutoDeleteOnIdle: getStringOrUndefined(queue.autoDeleteOnIdle),\n    EnablePartitioning: getStringOrUndefined(queue.enablePartitioning),\n    ForwardDeadLetteredMessagesTo: getStringOrUndefined(queue.forwardDeadLetteredMessagesTo),\n    EntityAvailabilityStatus: getStringOrUndefined(queue.availabilityStatus),\n    EnableExpress: getStringOrUndefined(queue.enableExpress),\n    MaxMessageSizeInKilobytes: getStringOrUndefined(queue.maxMessageSizeInKilobytes),\n  };\n}\n\n/**\n * @internal\n * Builds the queue object from the raw json object gotten after deserializing the\n * response from the service\n */\nexport function buildQueue(rawQueue: Record<string, any>): QueueProperties {\n  return {\n    name: getString(rawQueue[Constants.QUEUE_NAME], \"queueName\"),\n\n    forwardTo: getStringOrUndefined(rawQueue[Constants.FORWARD_TO]),\n    userMetadata: rawQueue[Constants.USER_METADATA],\n\n    lockDuration: getString(rawQueue[Constants.LOCK_DURATION], \"lockDuration\"),\n    maxSizeInMegabytes: getInteger(rawQueue[Constants.MAX_SIZE_IN_MEGABYTES], \"maxSizeInMegabytes\"),\n\n    maxDeliveryCount: getInteger(rawQueue[Constants.MAX_DELIVERY_COUNT], \"maxDeliveryCount\"),\n\n    enablePartitioning: getBoolean(rawQueue[Constants.ENABLE_PARTITIONING], \"enablePartitioning\"),\n    requiresSession: getBoolean(rawQueue[Constants.REQUIRES_SESSION], \"requiresSession\"),\n    enableBatchedOperations: getBoolean(\n      rawQueue[Constants.ENABLE_BATCHED_OPERATIONS],\n      \"enableBatchedOperations\",\n    ),\n\n    defaultMessageTimeToLive: getString(\n      rawQueue[Constants.DEFAULT_MESSAGE_TIME_TO_LIVE],\n      \"defaultMessageTimeToLive\",\n    ),\n    autoDeleteOnIdle: rawQueue[Constants.AUTO_DELETE_ON_IDLE],\n\n    requiresDuplicateDetection: getBoolean(\n      rawQueue[Constants.REQUIRES_DUPLICATE_DETECTION],\n      \"requiresDuplicateDetection\",\n    ),\n    duplicateDetectionHistoryTimeWindow: getString(\n      rawQueue[Constants.DUPLICATE_DETECTION_HISTORY_TIME_WINDOW],\n      \"duplicateDetectionHistoryTimeWindow\",\n    ),\n    deadLetteringOnMessageExpiration: getBoolean(\n      rawQueue[Constants.DEAD_LETTERING_ON_MESSAGE_EXPIRATION],\n      \"deadLetteringOnMessageExpiration\",\n    ),\n    forwardDeadLetteredMessagesTo: getStringOrUndefined(\n      rawQueue[Constants.FORWARD_DEADLETTERED_MESSAGES_TO],\n    ),\n\n    authorizationRules: getAuthorizationRulesOrUndefined(rawQueue[Constants.AUTHORIZATION_RULES]),\n\n    status: rawQueue[Constants.STATUS],\n\n    enableExpress: getBoolean(rawQueue[Constants.ENABLE_EXPRESS], \"enableExpress\"),\n\n    availabilityStatus: rawQueue[Constants.ENTITY_AVAILABILITY_STATUS],\n\n    maxMessageSizeInKilobytes: getIntegerOrUndefined(\n      rawQueue[Constants.MAX_MESSAGE_SIZE_IN_KILOBYTES],\n    ),\n  };\n}\n\n/**\n * @internal\n * Builds the queue runtime info object from the raw json object gotten after deserializing the\n * response from the service\n */\nexport function buildQueueRuntimeProperties(rawQueue: Record<string, any>): QueueRuntimeProperties {\n  const messageCountDetails = getMessageCountDetails(rawQueue[Constants.COUNT_DETAILS]);\n  return {\n    name: getString(rawQueue[Constants.QUEUE_NAME], \"queueName\"),\n    sizeInBytes: getIntegerOrUndefined(rawQueue[Constants.SIZE_IN_BYTES]),\n    totalMessageCount: getIntegerOrUndefined(rawQueue[Constants.MESSAGE_COUNT]),\n    ...messageCountDetails,\n    createdAt: getDate(rawQueue[Constants.CREATED_AT], \"createdAt\"),\n    modifiedAt: getDate(rawQueue[Constants.UPDATED_AT], \"modifiedAt\"),\n    accessedAt: getDate(rawQueue[Constants.ACCESSED_AT], \"accessedAt\"),\n  };\n}\n\n/**\n * Represents settable options on a queue\n */\nexport interface CreateQueueOptions extends OperationOptions {\n  /**\n   * Determines the amount of time in seconds in which a message should be locked for\n   * processing by a receiver. After this period, the message is unlocked and available\n   * for consumption by the next receiver.\n   * (If sessions are enabled, this lock duration is applicable for sessions and not for messages.)\n   *\n   * This is to be specified in ISO-8601 duration format\n   * such as \"PT1M\" for 1 minute, \"PT5S\" for 5 seconds.\n   *\n   * More on ISO-8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations\n   */\n  lockDuration?: string;\n\n  /**\n   * Specifies the maximum queue size in megabytes. Any attempt to enqueue a message that\n   * will cause the queue to exceed this value will fail.\n   */\n  maxSizeInMegabytes?: number;\n\n  /**\n   * The maximum message size in kilobytes for messages sent to this queue.\n   *\n   * (Configurable only for Premium Tier Service Bus namespace.)\n   */\n  maxMessageSizeInKilobytes?: number;\n\n  /**\n   * If enabled, the topic will detect duplicate messages within the time\n   * span specified by the DuplicateDetectionHistoryTimeWindow property.\n   * Settable only at queue creation time.\n   */\n  requiresDuplicateDetection?: boolean;\n\n  /**\n   * If set to true, the queue will be session-aware and only SessionReceiver\n   * will be supported. Session-aware queues are not supported through REST.\n   * Settable only at queue creation time.\n   */\n  requiresSession?: boolean;\n\n  /**\n   * Depending on whether DeadLettering is enabled, a message is automatically\n   * moved to the dead-letter sub-queue or deleted if it has been stored in the\n   * queue for longer than the specified time.\n   * This value is overwritten by a TTL specified on the message\n   * if and only if the message TTL is smaller than the TTL set on the queue.\n   * This value is immutable after the Queue has been created.\n   * This is to be specified in ISO-8601 duration format\n   * such as \"PT1M\" for 1 minute, \"PT5S\" for 5 seconds.\n   *\n   * More on ISO-8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations\n   */\n  defaultMessageTimeToLive?: string;\n\n  /**\n   * If it is enabled and a message expires, the Service Bus moves the message\n   * from the queue into the queue’s dead-letter sub-queue. If disabled,\n   * message will be permanently deleted from the queue.\n   * Settable only at queue creation time.\n   */\n  deadLetteringOnMessageExpiration?: boolean;\n\n  /**\n   * Specifies the time span during which the Service Bus detects message duplication.\n   * This is to be specified in ISO-8601 duration format\n   * such as \"PT1M\" for 1 minute, \"PT5S\" for 5 seconds.\n   *\n   * More on ISO-8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations\n   */\n  duplicateDetectionHistoryTimeWindow?: string;\n\n  /**\n   * The maximum delivery count of messages after which if it is still not settled,\n   * gets moved to the dead-letter sub-queue.\n   */\n  maxDeliveryCount?: number;\n\n  /**\n   * Specifies if batched operations should be allowed.\n   */\n  enableBatchedOperations?: boolean;\n\n  /**\n   * Authorization rules on the queue\n   */\n  authorizationRules?: AuthorizationRule[];\n\n  /**\n   * Status of the messaging entity.\n   */\n  status?: EntityStatus;\n\n  /**\n   * Absolute URL or the name of the queue or topic the\n   * messages are to be forwarded to.\n   * For example, an absolute URL input would be of the form\n   * `sb://<your-service-bus-namespace-endpoint>/<queue-or-topic-name>`\n   */\n  forwardTo?: string;\n\n  /**\n   * The user provided metadata information associated with the queue.\n   * Used to specify textual content such as tags, labels, etc.\n   * Value must not exceed 1024 bytes encoded in utf-8.\n   */\n  userMetadata?: string;\n\n  /**\n   * Max idle time before entity is deleted.\n   * This is to be specified in ISO-8601 duration format\n   * such as \"PT1M\" for 1 minute, \"PT5S\" for 5 seconds.\n   *\n   * More on ISO-8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations\n   */\n  autoDeleteOnIdle?: string;\n\n  /**\n   * Specifies whether the queue should be partitioned.\n   */\n  enablePartitioning?: boolean;\n\n  /**\n   * Absolute URL or the name of the queue or topic the dead-lettered\n   * messages are to be forwarded to.\n   * For example, an absolute URL input would be of the form\n   * `sb://<your-service-bus-namespace-endpoint>/<queue-or-topic-name>`\n   */\n  forwardDeadLetteredMessagesTo?: string;\n\n  /**\n   * Specifies whether express entities are enabled on queue.\n   */\n  enableExpress?: boolean;\n\n  /**\n   * Availability status of the messaging entity.\n   */\n  availabilityStatus?: EntityAvailabilityStatus;\n}\n\n/**\n * Represents the input for updateQueue.\n *\n */\nexport interface QueueProperties {\n  /**\n   * Name of the queue\n   */\n  readonly name: string;\n\n  /**\n   * Determines the amount of time in seconds in which a message should be locked for\n   * processing by a receiver. After this period, the message is unlocked and available\n   * for consumption by the next receiver.\n   * (If sessions are enabled, this lock duration is applicable for sessions and not for messages.)\n   *\n   * This is to be specified in ISO-8601 duration format\n   * such as \"PT1M\" for 1 minute, \"PT5S\" for 5 seconds.\n   *\n   * More on ISO-8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations\n   */\n  lockDuration: string;\n\n  /**\n   * Specifies the maximum queue size in megabytes. Any attempt to enqueue a message that\n   * will cause the queue to exceed this value will fail.\n   */\n  maxSizeInMegabytes: number;\n\n  /**\n   * The maximum message size in kilobytes for messages sent to this queue.\n   *\n   * Not applicable if service version \"2017-04\" is chosen when creating the `ServiceBusAdministrationClient`.\n   */\n  maxMessageSizeInKilobytes?: number;\n\n  /**\n   * If enabled, the topic will detect duplicate messages within the time\n   * span specified by the DuplicateDetectionHistoryTimeWindow property.\n   * Settable only at queue creation time.\n   */\n  readonly requiresDuplicateDetection: boolean;\n\n  /**\n   * If set to true, the queue will be session-aware and only SessionReceiver\n   * will be supported. Session-aware queues are not supported through REST.\n   * Settable only at queue creation time.\n   */\n  readonly requiresSession: boolean;\n\n  /**\n   * Depending on whether DeadLettering is enabled, a message is automatically\n   * moved to the dead-letter sub-queue or deleted if it has been stored in the\n   * queue for longer than the specified time.\n   * This value is overwritten by a TTL specified on the message\n   * if and only if the message TTL is smaller than the TTL set on the queue.\n   * This value is immutable after the Queue has been created.\n   * This is to be specified in ISO-8601 duration format\n   * such as \"PT1M\" for 1 minute, \"PT5S\" for 5 seconds.\n   *\n   * More on ISO-8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations\n   */\n  defaultMessageTimeToLive: string;\n\n  /**\n   * If it is enabled and a message expires, the Service Bus moves the message\n   * from the queue into the queue’s dead-letter sub-queue. If disabled,\n   * message will be permanently deleted from the queue.\n   * Settable only at queue creation time.\n   */\n  deadLetteringOnMessageExpiration: boolean;\n\n  /**\n   * Specifies the time span during which the Service Bus detects message duplication.\n   * This is to be specified in ISO-8601 duration format\n   * such as \"PT1M\" for 1 minute, \"PT5S\" for 5 seconds.\n   *\n   * More on ISO-8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations\n   */\n  duplicateDetectionHistoryTimeWindow: string;\n\n  /**\n   * The maximum delivery count of messages after which if it is still not settled,\n   * gets moved to the dead-letter sub-queue.\n   */\n  maxDeliveryCount: number;\n\n  /**\n   * Specifies if batched operations should be allowed.\n   */\n  enableBatchedOperations: boolean;\n\n  /**\n   * Authorization rules on the queue\n   */\n  authorizationRules?: AuthorizationRule[];\n\n  /**\n   * Status of the messaging entity.\n   */\n  status: EntityStatus;\n\n  /**\n   * Absolute URL or the name of the queue or topic the\n   * messages are to be forwarded to.\n   * For example, an absolute URL input would be of the form\n   * `sb://<your-service-bus-namespace-endpoint>/<queue-or-topic-name>`\n   */\n  forwardTo?: string;\n\n  /**\n   * The user provided metadata information associated with the queue.\n   * Used to specify textual content such as tags, labels, etc.\n   * Value must not exceed 1024 bytes encoded in utf-8.\n   */\n  userMetadata: string;\n\n  /**\n   * Max idle time before entity is deleted.\n   * This is to be specified in ISO-8601 duration format\n   * such as \"PT1M\" for 1 minute, \"PT5S\" for 5 seconds.\n   *\n   * More on ISO-8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations\n   */\n  autoDeleteOnIdle: string;\n\n  /**\n   * Specifies whether the queue should be partitioned.\n   */\n  readonly enablePartitioning: boolean;\n\n  /**\n   * Absolute URL or the name of the queue or topic the dead-lettered\n   * messages are to be forwarded to.\n   * For example, an absolute URL input would be of the form\n   * `sb://<your-service-bus-namespace-endpoint>/<queue-or-topic-name>`\n   */\n  forwardDeadLetteredMessagesTo?: string;\n\n  /**\n   * Specifies whether express entities are enabled on queue.\n   */\n  readonly enableExpress: boolean;\n\n  /**\n   * Availability status of the messaging entity.\n   */\n  readonly availabilityStatus: EntityAvailabilityStatus;\n}\n/**\n * @internal\n * Internal representation of settable options on a queue\n */\nexport interface InternalQueueOptions {\n  /**\n   * Determines the amount of time in seconds in which a message should be locked for\n   * processing by a receiver. After this period, the message is unlocked and\n   * can be consumed by the next receiver.\n   * (If sessions are enabled, this lock duration is applicable for sessions and not for messages.)\n   *\n   * This is to be specified in ISO-8601 duration format\n   * such as \"PT1M\" for 1 minute, \"PT5S\" for 5 seconds.\n   *\n   * More on ISO-8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations\n   */\n  LockDuration?: string;\n\n  /**\n   * The max size in MegaBytes\n   *\n   */\n  MaxSizeInMegabytes?: string;\n\n  /**\n   * The maximum message size in kilobytes for messages sent to this queue/topic.\n   */\n  MaxMessageSizeInKilobytes?: string;\n\n  /**\n   *  If enabled, the topic will detect duplicate messages within the time\n   * span specified by the DuplicateDetectionHistoryTimeWindow property.\n   * Settable only at queue creation time.\n   */\n  RequiresDuplicateDetection?: string;\n\n  /**\n   * If set to true, the queue will be session-aware and only SessionReceiver\n   * will be supported. Session-aware queues are not supported through REST.\n   * Settable only at queue creation time.\n   */\n  RequiresSession?: string;\n\n  /**\n   * Depending on whether DeadLettering is enabled, a message is automatically moved to\n   * the DeadLetterQueue or deleted if it has been stored in the queue for longer than\n   * the specified time. This value is overwritten by a TTL specified on the message\n   * if and only if the message TTL is smaller than the TTL set on the queue.\n   * This value is immutable after the Queue has been created.\n   * This is to be specified in ISO-8601 duration format\n   * such as \"PT1M\" for 1 minute, \"PT5S\" for 5 seconds.\n   *\n   * More on ISO-8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations\n   */\n  DefaultMessageTimeToLive?: string;\n\n  /**\n   * If it is enabled and a message expires, the Service Bus moves the message\n   * from the queue into the queue’s dead-letter sub-queue. If disabled,\n   * message will be permanently deleted from the queue.\n   * Settable only at queue creation time.\n   */\n  DeadLetteringOnMessageExpiration?: string;\n\n  /**\n   * Specifies the time span during which the Service Bus detects message duplication.\n   * This is to be specified in ISO-8601 duration format\n   * such as \"PT1M\" for 1 minute, \"PT5S\" for 5 seconds.\n   *\n   * More on ISO-8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations\n   */\n  DuplicateDetectionHistoryTimeWindow?: string;\n\n  /**\n   * The maximum delivery count of messages after which if it is still not settled,\n   * gets moved to the dead-letter sub-queue.\n   *\n   */\n  MaxDeliveryCount?: string;\n\n  /**\n   * Specifies if batched operations should be allowed.\n   */\n  EnableBatchedOperations?: string;\n\n  /**\n   * Authorization rules on the queue\n   */\n  AuthorizationRules?: any;\n\n  /**\n   * Status of the messaging entity.\n   */\n  Status?: string;\n\n  /**\n   * Absolute URL or the name of the queue or topic the\n   * messages are to be forwarded to.\n   * For example, an absolute URL input would be of the form\n   * `sb://<your-service-bus-namespace-endpoint>/<queue-or-topic-name>`\n   */\n  ForwardTo?: string;\n\n  /**\n   * The user provided metadata information associated with the queue.\n   * Used to specify textual content such as tags, labels, etc.\n   * Value must not exceed 1024 bytes encoded in utf-8.\n   */\n  UserMetadata?: string;\n\n  /**\n   * Max idle time before entity is deleted.\n   * This is to be specified in ISO-8601 duration format\n   * such as \"PT1M\" for 1 minute, \"PT5S\" for 5 seconds.\n   *\n   * More on ISO-8601 duration format: https://en.wikipedia.org/wiki/ISO_8601#Durations\n   */\n  AutoDeleteOnIdle?: string;\n\n  /**\n   * Specifies whether the queue should be partitioned.\n   */\n  EnablePartitioning?: string;\n\n  /**\n   * Absolute URL or the name of the queue or topic the dead-lettered\n   * messages are to be forwarded to.\n   * For example, an absolute URL input would be of the form\n   * `sb://<your-service-bus-namespace-endpoint>/<queue-or-topic-name>`\n   */\n  ForwardDeadLetteredMessagesTo?: string;\n\n  /**\n   * Specifies whether express entities are enabled on queue.\n   */\n  EnableExpress?: string;\n\n  /**\n   * Availability status of the messaging entity.\n   */\n  EntityAvailabilityStatus?: string;\n}\n\n/**\n * Represents runtime info attributes of a queue entity\n */\nexport interface QueueRuntimeProperties {\n  /**\n   * Name of the queue\n   */\n  name: string;\n\n  /**\n   * Created at timestamp\n   */\n  createdAt: Date;\n\n  /**\n   * Updated at timestamp\n   */\n  modifiedAt: Date;\n\n  /**\n   * Accessed at timestamp\n   */\n  accessedAt: Date;\n\n  /**\n   * The entity's message count.\n   *\n   */\n  totalMessageCount?: number;\n\n  /**\n   * The number of active messages in the queue.\n   */\n  activeMessageCount: number;\n\n  /**\n   * The number of messages that have been dead lettered.\n   */\n  deadLetterMessageCount: number;\n\n  /**\n   * The number of scheduled messages.\n   */\n  scheduledMessageCount: number;\n\n  /**\n   * The number of messages transferred to another queue, topic, or subscription\n   */\n  transferMessageCount: number;\n\n  /**\n   * The number of messages transferred to the dead letter queue.\n   */\n  transferDeadLetterMessageCount: number;\n\n  /**\n   * The entity's size in bytes.\n   *\n   */\n  sizeInBytes?: number;\n}\n\n/**\n * @internal\n * Atom XML Serializer for Queues.\n */\nexport class QueueResourceSerializer implements AtomXmlSerializer {\n  serialize(resource: InternalQueueOptions): Record<string, unknown> {\n    return serializeToAtomXmlRequest(\"QueueDescription\", resource);\n  }\n\n  async deserialize(response: FullOperationResponse): Promise<FullOperationResponse> {\n    return deserializeAtomXmlResponse([\"QueueName\"], response);\n  }\n}\n"]}