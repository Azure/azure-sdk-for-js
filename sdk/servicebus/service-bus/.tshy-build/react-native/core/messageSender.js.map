{"version":3,"file":"messageSender.js","sourceRoot":"","sources":["../../../src/core/messageSender.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { senderLogger as logger } from \"../log.js\";\nimport type {\n  AmqpError,\n  AwaitableSender,\n  AwaitableSenderOptions,\n  EventContext,\n  OnAmqpEvent,\n} from \"rhea-promise\";\nimport { message as RheaMessageUtil } from \"rhea-promise\";\nimport type {\n  MessagingError,\n  RetryConfig,\n  RetryOptions,\n  AmqpAnnotatedMessage,\n} from \"@azure/core-amqp\";\nimport { Constants, ErrorNameConditionMapper, RetryOperationType, retry } from \"@azure/core-amqp\";\nimport type { ServiceBusMessage } from \"../serviceBusMessage.js\";\nimport { toRheaMessage } from \"../serviceBusMessage.js\";\nimport type { ConnectionContext } from \"../connectionContext.js\";\nimport { LinkEntity } from \"./linkEntity.js\";\nimport { getUniqueName, waitForSendable, waitForTimeoutOrAbortOrResolve } from \"../util/utils.js\";\nimport { throwErrorIfConnectionClosed } from \"../util/errors.js\";\nimport type { ServiceBusMessageBatch } from \"../serviceBusMessageBatch.js\";\nimport { ServiceBusMessageBatchImpl } from \"../serviceBusMessageBatch.js\";\nimport type { CreateMessageBatchOptions } from \"../models.js\";\nimport type { OperationOptionsBase } from \"../modelsToBeSharedWithEventHubs.js\";\nimport type { AbortSignalLike } from \"@azure/abort-controller\";\nimport { ServiceBusError, translateServiceBusError } from \"../serviceBusError.js\";\nimport { isDefined } from \"@azure/core-util\";\nimport { defaultDataTransformer } from \"../dataTransformer.js\";\n\n/**\n * @internal\n * Describes the MessageSender that will send messages to ServiceBus.\n */\nexport class MessageSender extends LinkEntity<AwaitableSender> {\n  /**\n   * The handler function to handle errors that happen on the\n   * underlying sender.\n   * @readonly\n   */\n  private readonly _onAmqpError: OnAmqpEvent;\n  /**\n   * The handler function to handle \"sender_close\" event\n   * that happens on the underlying sender.\n   * @readonly\n   */\n  private readonly _onAmqpClose: OnAmqpEvent;\n  /**\n   * The message handler that will be set as the handler on\n   * the underlying rhea sender's session for the \"session_error\" event.\n   */\n  private _onSessionError: OnAmqpEvent;\n  /**\n   * The message handler that will be set as the handler on\n   * the underlying rhea sender's session for the \"session_close\" event.\n   */\n  private _onSessionClose: OnAmqpEvent;\n  private _retryOptions: RetryOptions;\n\n  constructor(\n    private identifier: string,\n    connectionContext: ConnectionContext,\n    entityPath: string,\n    retryOptions: RetryOptions,\n  ) {\n    super(entityPath, entityPath, connectionContext, \"sender\", logger, {\n      address: entityPath,\n      audience: `${connectionContext.config.endpoint}${entityPath}`,\n    });\n    this._retryOptions = retryOptions;\n    this._onAmqpError = (context: EventContext) => {\n      const senderError = context.sender && context.sender.error;\n      logger.logError(\n        senderError,\n        \"%s 'sender_error' event occurred on the sender '%s' with address '%s'. \" +\n          \"The associated error\",\n        this.logPrefix,\n        this.name,\n        this.address,\n      );\n      // TODO: Consider rejecting promise in trySendBatch() or createBatch()\n    };\n\n    this._onSessionError = (context: EventContext) => {\n      const sessionError = context.session && context.session.error;\n      logger.logError(\n        sessionError,\n        \"%s 'session_error' event occurred on the session of sender '%s' with address '%s'. \" +\n          \"The associated error\",\n        this.logPrefix,\n        this.name,\n        this.address,\n      );\n      // TODO: Consider rejecting promise in trySendBatch() or createBatch()\n    };\n\n    this._onAmqpClose = async (context: EventContext) => {\n      const senderError = context.sender && context.sender.error;\n\n      logger.logError(\n        senderError,\n        `${this.logPrefix} 'sender_close' event occurred. The associated error is`,\n      );\n\n      await this.onDetached().catch((err) => {\n        logger.logError(\n          err,\n          `${this.logPrefix} error when closing sender after 'sender_close' event`,\n        );\n      });\n    };\n\n    this._onSessionClose = async (context: EventContext) => {\n      const sessionError = context.session && context.session.error;\n\n      logger.logError(\n        sessionError,\n        `${this.logPrefix} 'session_close' event occurred. The associated error is`,\n      );\n\n      await this.onDetached().catch((err) => {\n        logger.logError(\n          err,\n          `${this.logPrefix} error when closing sender after 'session_close' event`,\n        );\n      });\n    };\n  }\n\n  private _createSenderOptions(newName?: boolean): AwaitableSenderOptions {\n    if (newName) this.name = getUniqueName(this.baseName);\n    const srOptions: AwaitableSenderOptions = {\n      name: this.name,\n      target: {\n        address: this.address,\n      },\n      source: this.identifier,\n      onError: this._onAmqpError,\n      onClose: this._onAmqpClose,\n      onSessionError: this._onSessionError,\n      onSessionClose: this._onSessionClose,\n    };\n    logger.verbose(`${this.logPrefix} Creating sender with options: %O`, srOptions);\n    return srOptions;\n  }\n\n  /**\n   * Tries to send the message to ServiceBus if there is enough credit to send them\n   * and the circular buffer has available space to settle the message after sending them.\n   *\n   * We have implemented a synchronous send over here in the sense that we shall be waiting\n   * for the message to be accepted or rejected and accordingly resolve or reject the promise.\n   *\n   * @param encodedMessage - The encoded message to be sent to ServiceBus.\n   * @param sendBatch - Boolean indicating whether the encoded message represents a batch of messages or not\n   */\n  private _trySend(\n    encodedMessage: Buffer,\n    sendBatch: boolean,\n    options: OperationOptionsBase | undefined,\n  ): Promise<void> {\n    const abortSignal = options?.abortSignal;\n    const timeoutInMs = !isDefined(this._retryOptions.timeoutInMs)\n      ? Constants.defaultOperationTimeoutInMs\n      : this._retryOptions.timeoutInMs;\n\n    const sendEventPromise = async (): Promise<void> => {\n      const initStartTime = Date.now();\n      if (!this.isOpen()) {\n        try {\n          await waitForTimeoutOrAbortOrResolve({\n            actionFn: () => this.open(undefined, options?.abortSignal),\n            abortSignal: options?.abortSignal,\n            timeoutMs: timeoutInMs,\n            timeoutMessage:\n              `[${this._context.connectionId}] Sender \"${this.name}\" ` +\n              `with address \"${this.address}\", was not able to send the message right now, due ` +\n              `to operation timeout.`,\n          });\n        } catch (err: any) {\n          const translatedError = translateServiceBusError(err);\n          logger.logError(\n            translatedError,\n            \"%s An error occurred while creating the sender\",\n            this.logPrefix,\n            this.name,\n          );\n          throw translatedError;\n        }\n      }\n\n      const timeTakenByInit = Date.now() - initStartTime;\n\n      logger.verbose(\n        \"%s Sender '%s', credit: %d available: %d\",\n        this.logPrefix,\n        this.name,\n        this.link?.credit,\n        this.link?.session?.outgoing?.available(),\n      );\n\n      const waitingTime = await waitForSendable(\n        logger,\n        this.logPrefix,\n        this.name,\n        timeoutInMs - timeTakenByInit,\n        this.link,\n        this.link?.session?.outgoing?.available(),\n      );\n\n      if (timeoutInMs <= timeTakenByInit + waitingTime) {\n        const desc: string =\n          `${this.logPrefix} Sender \"${this.name}\" ` +\n          `with address \"${this.address}\", was not able to send the message right now, due ` +\n          `to operation timeout.`;\n        logger.warning(desc);\n        const e: AmqpError = {\n          condition: ErrorNameConditionMapper.ServiceUnavailableError,\n          description: desc,\n        };\n        throw translateServiceBusError(e);\n      }\n\n      if (!this.link) {\n        const msg = `[${this.logPrefix}] Cannot send the message. Link is not ready.`;\n        logger.warning(msg);\n        const amqpError: AmqpError = {\n          condition: ErrorNameConditionMapper.SenderNotReadyError,\n          description: msg,\n        };\n        throw translateServiceBusError(amqpError);\n      }\n      try {\n        const delivery = await this.link.send(encodedMessage, {\n          format: sendBatch ? 0x80013700 : 0,\n          timeoutInSeconds: (timeoutInMs - timeTakenByInit - waitingTime) / 1000,\n          abortSignal,\n        });\n        logger.verbose(\n          \"%s Sender '%s', sent message with delivery id: %d\",\n          this.logPrefix,\n          this.name,\n          delivery.id,\n        );\n      } catch (error: any) {\n        const translatedError = translateServiceBusError(error.innerError || error);\n        logger.logError(\n          translatedError,\n          `${this.logPrefix} An error occurred while sending the message`,\n        );\n        throw translatedError;\n      }\n    };\n    const config: RetryConfig<void> = {\n      operation: sendEventPromise,\n      connectionId: this._context.connectionId!,\n      operationType: RetryOperationType.sendMessage,\n      retryOptions: this._retryOptions,\n      abortSignal: abortSignal,\n    };\n\n    return retry<void>(config);\n  }\n\n  protected createRheaLink(options: AwaitableSenderOptions): Promise<AwaitableSender> {\n    return this._context.connection.createAwaitableSender(options);\n  }\n\n  /**\n   * Initializes the sender session on the connection.\n   */\n  public async open(\n    options?: AwaitableSenderOptions,\n    abortSignal?: AbortSignalLike,\n  ): Promise<void> {\n    try {\n      if (!options) {\n        options = this._createSenderOptions();\n      }\n      await this.initLink(options, abortSignal);\n    } catch (err: any) {\n      const translatedError = translateServiceBusError(err);\n      logger.logError(\n        translatedError,\n        `${this.logPrefix} An error occurred while creating the sender`,\n      );\n      // Fix the unhelpful error messages for the OperationTimeoutError that comes from `rhea-promise`.\n      if ((translatedError as MessagingError).code === \"OperationTimeoutError\") {\n        translatedError.message =\n          \"Failed to create a sender within allocated time and retry attempts.\";\n      }\n      throw translatedError;\n    }\n  }\n\n  /**\n   * Closes the rhea link.\n   * To be called when connection is disconnected, onAmqpClose and onSessionClose events.\n   */\n  async onDetached(): Promise<void> {\n    // Clears the token renewal timer. Closes the link and its session if they are open.\n    // Removes the link and its session if they are present in rhea's cache.\n    await this.closeLink();\n  }\n\n  /**\n   * Determines whether the AMQP sender link is open. If open then returns true else returns false.\n   */\n  isOpen(): boolean {\n    const result: boolean = this.link == null ? false : this.link.isOpen();\n    logger.verbose(\n      \"%s Sender '%s' with address '%s' is open? -> %s\",\n      this.logPrefix,\n      this.name,\n      this.address,\n      result,\n    );\n    return result;\n  }\n\n  /**\n   * Sends the given message, with the given options on this link\n   *\n   * @param data - Message to send. Will be sent as UTF8-encoded JSON string.\n   */\n  async send(\n    data: ServiceBusMessage | AmqpAnnotatedMessage,\n    options?: OperationOptionsBase,\n  ): Promise<void> {\n    throwErrorIfConnectionClosed(this._context);\n    try {\n      const amqpMessage = toRheaMessage(data, defaultDataTransformer);\n\n      // TODO: this body of logic is really similar to what's in sendMessages. Unify what we can.\n      const encodedMessage = RheaMessageUtil.encode(amqpMessage);\n      logger.verbose(\"%s Sender '%s', trying to send message: %O\", this.logPrefix, this.name, data);\n      return await this._trySend(encodedMessage, false, options);\n    } catch (err: any) {\n      logger.logError(\n        err,\n        \"%s An error occurred while sending the message: %O\\nError\",\n        this.logPrefix,\n        data,\n      );\n      throw err;\n    }\n  }\n\n  /**\n   * Returns maximum message size on the AMQP sender link.\n   *\n   * Options to configure the `createBatch` method on the `Sender`.\n   * - `maxSizeInBytes`: The upper limit for the size of batch.\n   *\n   * Example usage:\n   * ```ts snippet:ignore\n   * {\n   *     retryOptions: { maxRetries: 5; timeoutInMs: 10 }\n   * }\n   * ```\n   */\n  async getMaxMessageSize(\n    options: {\n      retryOptions?: RetryOptions;\n    } & Pick<OperationOptionsBase, \"abortSignal\"> = {},\n  ): Promise<number> {\n    const retryOptions = options.retryOptions || {};\n    if (this.isOpen()) {\n      return this.link!.maxMessageSize;\n    }\n\n    const config: RetryConfig<number> = {\n      operation: async () => {\n        await this.open(undefined, options?.abortSignal);\n\n        if (this.link) {\n          return this.link.maxMessageSize;\n        }\n\n        throw new ServiceBusError(\n          \"Link failed to initialize, cannot get max message size.\",\n          \"GeneralError\",\n        );\n      },\n      connectionId: this._context.connectionId,\n      operationType: RetryOperationType.senderLink,\n      retryOptions: retryOptions,\n      abortSignal: options?.abortSignal,\n    };\n\n    return retry(config);\n  }\n\n  async createBatch(options?: CreateMessageBatchOptions): Promise<ServiceBusMessageBatch> {\n    throwErrorIfConnectionClosed(this._context);\n    let maxMessageSize = await this.getMaxMessageSize({\n      retryOptions: this._retryOptions,\n      abortSignal: options?.abortSignal,\n    });\n    if (options?.maxSizeInBytes) {\n      if (options.maxSizeInBytes > maxMessageSize!) {\n        const error = new Error(\n          `Max message size (${options.maxSizeInBytes} bytes) is greater than maximum message size (${maxMessageSize} bytes) on the AMQP sender link.`,\n        );\n        throw error;\n      }\n      maxMessageSize = options.maxSizeInBytes;\n    }\n    return new ServiceBusMessageBatchImpl(this._context, maxMessageSize!);\n  }\n\n  async sendBatch(\n    batchMessage: ServiceBusMessageBatch,\n    options?: OperationOptionsBase,\n  ): Promise<void> {\n    throwErrorIfConnectionClosed(this._context);\n    try {\n      logger.verbose(\n        \"%s Sender '%s', sending encoded batch message.\",\n        this.logPrefix,\n        this.name,\n        batchMessage,\n      );\n      return await this._trySend(batchMessage._generateMessage(), true, options);\n    } catch (err: any) {\n      logger.logError(\n        err,\n        \"%s Sender '%s': An error occurred while sending the messages: %O\\nError\",\n        this.logPrefix,\n        this.name,\n        batchMessage,\n      );\n      throw err;\n    }\n  }\n\n  static create(\n    identifier: string,\n    context: ConnectionContext,\n    entityPath: string,\n    retryOptions: RetryOptions,\n  ): MessageSender {\n    throwErrorIfConnectionClosed(context);\n\n    const sbSender = new MessageSender(identifier, context, entityPath, retryOptions);\n    context.senders[sbSender.name] = sbSender;\n    return sbSender;\n  }\n\n  protected removeLinkFromContext(): void {\n    delete this._context.senders[this.name];\n  }\n}\n"]}