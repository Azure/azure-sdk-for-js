{"version":3,"file":"linkEntity.js","sourceRoot":"","sources":["../../../src/core/linkEntity.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAGlC,OAAO,EACL,SAAS,EACT,SAAS,EACT,sBAAsB,EACtB,oBAAoB,EACpB,kBAAkB,GACnB,MAAM,kBAAkB,CAAC;AAU1B,OAAO,EAAE,aAAa,EAAE,MAAM,cAAc,CAAC;AAC7C,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AAEjD,OAAO,EAAE,UAAU,EAAE,MAAM,yBAAyB,CAAC;AAErD,OAAO,EAAE,eAAe,EAAE,MAAM,uBAAuB,CAAC;AAiExD;;;GAGG;AACH,MAAM,OAAgB,UAAU;IA8D9B,IAAW,SAAS;QAClB,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAcD;;;;;;OAMG;IACH,YACkB,QAAgB,EAChB,UAAkB,EAClC,OAA0B,EAClB,SAA2B,EAC3B,OAAyB,EACjC,OAA2B;QALX,aAAQ,GAAR,QAAQ,CAAQ;QAChB,eAAU,GAAV,UAAU,CAAQ;QAE1B,cAAS,GAAT,SAAS,CAAkB;QAC3B,YAAO,GAAP,OAAO,CAAkB;QAxBnC;;;WAGG;QACK,0BAAqB,GAAY,KAAK,CAAC;QAE/C;;;WAGG;QACK,cAAS,GAAW,cAAc,aAAa,EAAE,EAAE,CAAC;QAiB1D,IAAI,CAAC,OAAO;YAAE,OAAO,GAAG,EAAE,CAAC;QAC3B,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC;QACrC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,EAAE,CAAC;QACvC,IAAI,CAAC,IAAI,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAC;QACpC,IAAI,CAAC,UAAU,GAAG,IAAI,OAAO,CAAC,YAAY,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,IAAI,GAAG,CAAC;IAC/E,CAAC;IAED;;OAEG;IACH,MAAM;QACJ,MAAM,MAAM,GAAY,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;QACjE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,UAAU,aAAa,MAAM,EAAE,CAAC,CAAC;QAC9D,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,QAAQ,CAAC,OAA4B,EAAE,WAA6B;QACxE,yGAAyG;QACzG,MAAM,IAAI,CAAC,QAAQ,CAAC,eAAe,EAAE,CAAC;QAEtC,IAAI,CAAC,OAAO,CAAC,OAAO,CAClB,GAAG,IAAI,CAAC,UAAU,qCAAqC,IAAI,CAAC,SAAS,wBAAwB,CAC9F,CAAC;QACF,OAAO,sBAAsB,CAAC,OAAO,CACnC,IAAI,CAAC,SAAS,EACd,GAAG,EAAE;YACH,IAAI,CAAC,OAAO,CAAC,OAAO,CAClB,GAAG,IAAI,CAAC,UAAU,SAAS,IAAI,CAAC,SAAS,iCAAiC,CAC3E,CAAC;YACF,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;QAClD,CAAC,EACD;YACE,WAAW,EAAE,WAAW;YACxB,WAAW,EAAE,SAAS,CAAC,2BAA2B;SACnD,CACF,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,aAAa,CACzB,OAA4B,EAC5B,WAA6B;QAE7B,MAAM,YAAY,GAAG,GAAS,EAAE;;YAC9B,IAAI,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,OAAO,EAAE,CAAC;gBACzB,MAAA,IAAI,CAAC,KAAK,0CAAE,KAAK,EAAE,CAAC;gBACpB,MAAM,IAAI,UAAU,CAAC,oBAAoB,CAAC,CAAC;YAC7C,CAAC;QACH,CAAC,CAAC;QAEF,MAAM,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC;QAChD,YAAY,EAAE,CAAC;QAEf,IAAI,OAAO,CAAC,IAAI,EAAE,CAAC;YACjB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;YACzB,IAAI,CAAC,UAAU,GAAG,IAAI,YAAY,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,IAAI,GAAG,CAAC;QACvE,CAAC;QAED,IAAI,IAAI,CAAC,qBAAqB,EAAE,CAAC;YAC/B,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,UAAU,mDAAmD,CAAC,CAAC;YAC5F,MAAM,IAAI,UAAU,CAAC,kDAAkD,CAAC,CAAC;QAC3E,CAAC;QAED,IAAI,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC;YAClB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,UAAU,mCAAmC,CAAC,CAAC;YAC5E,OAAO;QACT,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,OAAO,CAClB,GAAG,IAAI,CAAC,UAAU,wDAAwD,CAC3E,CAAC;QAEF,IAAI,CAAC;YACH,MAAM,IAAI,CAAC,eAAe,CAAC;gBACzB,WAAW;gBACX,eAAe,EAAE,KAAK;gBACtB,WAAW,EAAE,SAAS,CAAC,2BAA2B;aACnD,CAAC,CAAC;YAEH,YAAY,EAAE,CAAC;YACf,IAAI,CAAC,sBAAsB,EAAE,CAAC;YAE9B,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,UAAU,2BAA2B,EAAE,OAAO,CAAC,CAAC;YAC7E,IAAI,CAAC,KAAK,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;YAChD,YAAY,EAAE,CAAC;YAEf,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAE3B,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,UAAU,yBAAyB,CAAC,CAAC;QACpE,CAAC;QAAC,OAAO,GAAQ,EAAE,CAAC;YAClB,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,UAAU,sCAAsC,CAAC,CAAC;YACrF,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;YAC3B,MAAM,GAAG,CAAC;QACZ,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,KAAK;QACT,wFAAwF;QACxF,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;QAElC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,SAAS,iCAAiC,CAAC,CAAC;QAEzE,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAE7B,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC;QACvB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,SAAS,gCAAgC,CAAC,CAAC;IAC1E,CAAC;IAcD;;;OAGG;IACO,SAAS;QACjB,IAAI,CAAC,OAAO,CAAC,OAAO,CAClB,GAAG,IAAI,CAAC,UAAU,qCAAqC,IAAI,CAAC,SAAS,mBAAmB,CACzF,CAAC;QACF,OAAO,sBAAsB,CAAC,OAAO,CACnC,IAAI,CAAC,SAAS,EACd,GAAG,EAAE;YACH,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,UAAU,SAAS,IAAI,CAAC,SAAS,4BAA4B,CAAC,CAAC;YAC5F,OAAO,IAAI,CAAC,aAAa,EAAE,CAAC;QAC9B,CAAC,EACD,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,EAAE,SAAS,EAAE,CACnD,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,aAAa;QACzB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,UAAU,yBAAyB,CAAC,CAAC;QAElE,YAAY,CAAC,IAAI,CAAC,kBAAoC,CAAC,CAAC;QACxD,IAAI,CAAC,kBAAkB,GAAG,SAAS,CAAC;QAEpC,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;YACf,IAAI,CAAC;gBACH,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;gBACxB,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;gBAEvB,0FAA0F;gBAC1F,qCAAqC;gBACrC,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC;gBACnB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,UAAU,UAAU,CAAC,CAAC;YACrD,CAAC;YAAC,OAAO,GAAQ,EAAE,CAAC;gBAClB,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,UAAU,2CAA2C,CAAC,CAAC;YAC5F,CAAC;QACH,CAAC;IACH,CAAC;IAED;;;OAGG;IACH,IAAY,KAAK;QACf,IAAI,MAAM,GAAG,YAAY,CAAC;QAC1B,IAAK,IAAY,CAAC,WAAW,IAAK,IAAY,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;YAChE,MAAM,GAAI,IAAY,CAAC,WAAW,CAAC,IAAI,CAAC;QAC1C,CAAC;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,IAAc,oBAAoB;QAChC,OAAO,IAAI,CAAC,qBAAqB,CAAC;IACpC,CAAC;IAED,IAAc,IAAI;QAChB,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED;;;OAGG;IACK,KAAK,CAAC,eAAe,CAAC,EAC5B,WAAW,EACX,eAAe,EACf,WAAW,GAKZ;QACC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,UAAU,mCAAmC,CAAC,CAAC;QAE5E,+DAA+D;QAC/D,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAE9B,uFAAuF;QACvF,oFAAoF;QACpF,oFAAoF;QACpF,4EAA4E;QAC5E,IAAI,CAAC,OAAO,CAAC,OAAO,CAClB,kFAAkF;YAChF,0BAA0B,EAC5B,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,OAAO,EAChC,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,OAAO,CACb,CAAC;QAEF,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAC7B,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,MAAM,EAAE,EAAE,CAAC;YACvC,MAAM,sBAAsB,CAAC,OAAO,CAClC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,OAAO,EAChC,GAAG,EAAE;gBACH,IAAI,CAAC,sBAAsB,EAAE,CAAC;gBAC9B,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,WAAW,EAAE,WAAW,EAAE,CAAC,CAAC;YACrE,CAAC,EACD;gBACE,WAAW;gBACX,WAAW,EAAE,WAAW,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;aACpD,CACF,CAAC;QACJ,CAAC;QAED,IAAI,WAAwB,CAAC;QAC7B,IAAI,SAAoB,CAAC;QACzB,IAAI,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,EAAE,CAAC;YACtD,WAAW,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC1E,SAAS,GAAG,SAAS,CAAC,eAAe,CAAC;YAEtC,sCAAsC;YACtC,IAAI,CAAC,aAAa,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC;QAC3C,CAAC;aAAM,CAAC;YACN,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,QAAQ,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC;YAC5F,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACd,MAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC,CAAC;YACpF,CAAC;YACD,WAAW,GAAG,QAAQ,CAAC;YACvB,SAAS,GAAG,SAAS,CAAC,eAAe,CAAC;YACtC,IAAI,CAAC,aAAa,GAAG,WAAW,CAAC,kBAAkB,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;QACnF,CAAC;QACD,IAAI,CAAC,OAAO,CAAC,OAAO,CAClB,kDAAkD,EAClD,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,QAAQ,CACd,CAAC;QACF,+CAA+C;QAC/C,IAAI,CAAC,OAAO,CAAC,OAAO,CAClB,0EAA0E,EAC1E,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,QAAQ,CAAC,kBAAkB,EAChC,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,OAAO,CACb,CAAC;QACF,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;QAC1C,CAAC;QACD,MAAM,sBAAsB,CAAC,OAAO,CAClC,IAAI,CAAC,QAAQ,CAAC,kBAAkB,EAChC,GAAG,EAAE;YACH,IAAI,CAAC,sBAAsB,EAAE,CAAC;YAC9B,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,cAAc,CAC5C,IAAI,CAAC,QAAQ,EACb,WAAW,CAAC,KAAK,EACjB,SAAS,EACT;gBACE,WAAW;gBACX,WAAW,EAAE,WAAW,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;aACpD,CACF,CAAC;QACJ,CAAC,EACD;YACE,WAAW;YACX,WAAW,EAAE,WAAW,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;SACpD,CACF,CAAC;QACF,IAAI,CAAC,OAAO,CAAC,OAAO,CAClB,uDAAuD,EACvD,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,OAAO,CACb,CAAC;QACF,IAAI,eAAe,EAAE,CAAC;YACpB,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC7B,CAAC;IACH,CAAC;IAED;;;;OAIG;IACK,sBAAsB;QAC5B,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,mBAAmB,EAAE,EAAE,CAAC;YACzC,OAAO;QACT,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,OAAO,CAClB,GAAG,IAAI,CAAC,UAAU,yDAAyD,CAC5E,CAAC;QACF,MAAM,GAAG,GAAG,IAAI,eAAe,CAC7B,wDAAwD,EACxD,cAAc,CACf,CAAC;QACF,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC;QACrB,MAAM,GAAG,CAAC;IACZ,CAAC;IAED;;OAEG;IACK,mBAAmB;QACzB,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;YACxB,OAAO;QACT,CAAC;QACD,0CAA0C;QAC1C,8EAA8E;QAC9E,+CAA+C;QAC/C,IAAI,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC5B,YAAY,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACxC,CAAC;QACD,IAAI,CAAC,kBAAkB,GAAG,UAAU,CAAC,KAAK,IAAI,EAAE;YAC9C,IAAI,CAAC;gBACH,MAAM,IAAI,CAAC,eAAe,CAAC;oBACzB,eAAe,EAAE,IAAI;oBACrB,WAAW,EAAE,SAAS;oBACtB,WAAW,EAAE,SAAS,CAAC,2BAA2B;iBACnD,CAAC,CAAC;YACL,CAAC;YAAC,OAAO,GAAQ,EAAE,CAAC;gBAClB,IAAI,CAAC,OAAO,CAAC,QAAQ,CACnB,GAAG,EACH,wEAAwE,EACxE,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,OAAO,CACb,CAAC;YACJ,CAAC;QACH,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QACvB,IAAI,CAAC,OAAO,CAAC,OAAO,CAClB,8EAA8E,EAC9E,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,aAAa,EAClB,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,QAAQ,EAAE,CACrD,CAAC;IACJ,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { RequestResponseLink } from \"@azure/core-amqp\";\nimport {\n  Constants,\n  TokenType,\n  defaultCancellableLock,\n  StandardAbortMessage,\n  isSasTokenProvider,\n} from \"@azure/core-amqp\";\nimport type { AccessToken } from \"@azure/core-auth\";\nimport type { ConnectionContext } from \"../connectionContext.js\";\nimport type {\n  AwaitableSender,\n  AwaitableSenderOptions,\n  Receiver,\n  ReceiverOptions,\n  SenderOptions,\n} from \"rhea-promise\";\nimport { generate_uuid } from \"rhea-promise\";\nimport { getUniqueName } from \"../util/utils.js\";\nimport type { AbortSignalLike } from \"@azure/abort-controller\";\nimport { AbortError } from \"@azure/abort-controller\";\nimport type { ServiceBusLogger } from \"../log.js\";\nimport { ServiceBusError } from \"../serviceBusError.js\";\n\n/**\n * @internal\n * Options passed to the constructor of LinkEntity\n */\nexport interface LinkEntityOptions {\n  /**\n   * The client entity address in one of the following forms:\n   */\n  address?: string;\n  /**\n   * The client entity token audience in one of the following forms:\n   */\n  audience?: string;\n}\n\n/**\n * A simple grouping of the sender and receiver options. Only used\n * with the ManagementClient today.\n *\n * @internal\n */\nexport interface RequestResponseLinkOptions {\n  senderOptions: SenderOptions;\n  receiverOptions: ReceiverOptions;\n  name?: string;\n}\n\n/**\n * @internal\n */\nexport type NonSessionReceiverType =\n  | \"batching\" // batching receiver\n  | \"streaming\"; // streaming receiver\n\n/**\n * @internal\n */\nexport type ReceiverType = NonSessionReceiverType | \"session\"; // message session\n\n/**\n * @internal\n */\ntype LinkOptionsT<LinkT extends Receiver | AwaitableSender | RequestResponseLink> =\n  LinkT extends Receiver\n    ? ReceiverOptions\n    : LinkT extends AwaitableSender\n      ? AwaitableSenderOptions\n      : LinkT extends RequestResponseLink\n        ? RequestResponseLinkOptions\n        : never;\n\n/**\n * @internal\n */\ntype LinkTypeT<LinkT extends Receiver | AwaitableSender | RequestResponseLink> =\n  LinkT extends Receiver\n    ? ReceiverType\n    : LinkT extends AwaitableSender\n      ? \"sender\" // sender\n      : LinkT extends RequestResponseLink\n        ? \"mgmt\" // management link\n        : never;\n\n/**\n * @internal\n * Describes the base class for entities like MessageSender, MessageReceiver and Management client.\n */\nexport abstract class LinkEntity<LinkT extends Receiver | AwaitableSender | RequestResponseLink> {\n  /**\n   * The unique name for the entity in the format:\n   * `${name of the entity}-${guid}`.\n   */\n  name: string;\n  /**\n   * The client entity address in one of the following forms:\n   *\n   * **Sender**\n   * - `\"<queue-name>\"`.\n   * - `\"<topic-name>\"`.\n   *\n   * **Receiver**\n   * - `\"<queue-name>\"`.\n   * - `\"<topic-name>\"`.\n   *\n   * **ManagementClient**\n   * -`\"$management\"`.\n   */\n  address: string;\n  /**\n   * The client entity token audience in one of the following forms:\n   *\n   * **Sender**\n   * - `\"sb://<yournamespace>.servicebus.windows.net/<queue-name>\"`\n   * - `\"sb://<yournamespace>.servicebus.windows.net/<topic-name>\"`\n   *\n   * **Receiver**\n   * - `\"sb://<yournamespace>.servicebus.windows.net/<queue-name>\"`\n   * - `\"sb://<yournamespace>.servicebus.windows.net/<topic-name>\"`\n   *\n   * **ManagementClient**\n   * - `\"sb://<your-namespace>.servicebus.windows.net/<queue-name>/$management\"`.\n   * - `\"sb://<your-namespace>.servicebus.windows.net/<topic-name>/$management\"`.\n   */\n  audience: string;\n  /**\n   * Provides relevant information about the amqp connection,\n   * cbs and $management sessions, token provider, sender and receivers.\n   */\n  protected _context: ConnectionContext;\n  /**\n   * The token renewal timer that keeps track of when\n   * the Client Entity is due for token renewal.\n   */\n  private _tokenRenewalTimer?: NodeJS.Timeout;\n  /**\n   * Indicates token timeout\n   */\n  protected _tokenTimeout?: number;\n\n  /**\n   * The actual rhea link (of type Receiver or AwaitableSender) or RequestResponseLink\n   */\n  private _link?: LinkT;\n\n  /**\n   * The log prefix for any log messages.\n   */\n  private _logPrefix: string;\n\n  public get logPrefix(): string {\n    return this._logPrefix;\n  }\n\n  /**\n   * Indicates that close() has been called on this link and\n   * that it should not be allowed to reopen.\n   */\n  private _wasClosedPermanently: boolean = false;\n\n  /**\n   * A lock that ensures that opening and closing this\n   * link properly cooperate.\n   */\n  private _openLock: string = `linkEntity-${generate_uuid()}`;\n\n  /**\n   * Creates a new ClientEntity instance.\n   * @param baseName - The base name to use for the link. A unique ID will be appended to this.\n   * @param entityPath - The entity path (ex: 'your-queue')\n   * @param context - The connection context.\n   * @param options - Options that can be provided while creating the LinkEntity.\n   */\n  constructor(\n    public readonly baseName: string,\n    public readonly entityPath: string,\n    context: ConnectionContext,\n    private _linkType: LinkTypeT<LinkT>,\n    private _logger: ServiceBusLogger,\n    options?: LinkEntityOptions,\n  ) {\n    if (!options) options = {};\n    this._context = context;\n    this.address = options.address || \"\";\n    this.audience = options.audience || \"\";\n    this.name = getUniqueName(baseName);\n    this._logPrefix = `[${context.connectionId}|${this._linkType}:${this.name}]`;\n  }\n\n  /**\n   * Determines whether the AMQP link is open. If open then returns true else returns false.\n   */\n  isOpen(): boolean {\n    const result: boolean = this._link ? this._link.isOpen() : false;\n    this._logger.verbose(`${this._logPrefix} is open? ${result}`);\n    return result;\n  }\n\n  /**\n   * Initializes this LinkEntity, setting this._link with the result of  `createRheaLink`, which\n   * is implemented by child classes.\n   *\n   * @returns A Promise that resolves when the link has been properly initialized\n   * @throws `AbortError` if the link has been closed via 'close'\n   */\n  async initLink(options: LinkOptionsT<LinkT>, abortSignal?: AbortSignalLike): Promise<void> {\n    // we'll check that the connection isn't in the process of recycling (and if so, wait for it to complete)\n    await this._context.readyToOpenLink();\n\n    this._logger.verbose(\n      `${this._logPrefix} Attempting to acquire lock token ${this._openLock} for initializing link`,\n    );\n    return defaultCancellableLock.acquire(\n      this._openLock,\n      () => {\n        this._logger.verbose(\n          `${this._logPrefix} Lock ${this._openLock} acquired for initializing link`,\n        );\n        return this._initLinkImpl(options, abortSignal);\n      },\n      {\n        abortSignal: abortSignal,\n        timeoutInMs: Constants.defaultOperationTimeoutInMs,\n      },\n    );\n  }\n\n  private async _initLinkImpl(\n    options: LinkOptionsT<LinkT>,\n    abortSignal?: AbortSignalLike,\n  ): Promise<void> {\n    const checkAborted = (): void => {\n      if (abortSignal?.aborted) {\n        this._link?.close();\n        throw new AbortError(StandardAbortMessage);\n      }\n    };\n\n    const connectionId = this._context.connectionId;\n    checkAborted();\n\n    if (options.name) {\n      this.name = options.name;\n      this._logPrefix = `[${connectionId}|${this._linkType}:${this.name}]`;\n    }\n\n    if (this._wasClosedPermanently) {\n      this._logger.verbose(`${this._logPrefix} Link has been permanently closed. Not reopening.`);\n      throw new AbortError(`Link has been permanently closed. Not reopening.`);\n    }\n\n    if (this.isOpen()) {\n      this._logger.verbose(`${this._logPrefix} Link is already open. Returning.`);\n      return;\n    }\n\n    this._logger.verbose(\n      `${this._logPrefix} Is not open and is not currently connecting. Opening.`,\n    );\n\n    try {\n      await this._negotiateClaim({\n        abortSignal,\n        setTokenRenewal: false,\n        timeoutInMs: Constants.defaultOperationTimeoutInMs,\n      });\n\n      checkAborted();\n      this.checkIfConnectionReady();\n\n      this._logger.verbose(`${this._logPrefix} Creating with options %O`, options);\n      this._link = await this.createRheaLink(options);\n      checkAborted();\n\n      this._ensureTokenRenewal();\n\n      this._logger.verbose(`${this._logPrefix} Link has been created.`);\n    } catch (err: any) {\n      this._logger.logError(err, `${this._logPrefix} Error thrown when creating the link`);\n      await this.closeLinkImpl();\n      throw err;\n    }\n  }\n\n  /**\n   * Clears token renewal for current link, removes current LinkEntity instance from cache,\n   * and closes the underlying AMQP link.\n   * Once closed, this instance of LinkEntity is not meant to be re-used.\n   */\n  async close(): Promise<void> {\n    // Set the flag to indicate that this instance of LinkEntity is not meant to be re-used.\n    this._wasClosedPermanently = true;\n\n    this._logger.verbose(`${this.logPrefix} permanently closing this link.`);\n\n    this.removeLinkFromContext();\n\n    await this.closeLink();\n    this._logger.verbose(`${this.logPrefix} permanently closed this link.`);\n  }\n\n  /**\n   * NOTE: This method should be implemented by any child classes to actually create the underlying\n   * Rhea link (AwaitableSender or Receiver or RequestResponseLink)\n   *\n   */\n  protected abstract createRheaLink(_options: LinkOptionsT<LinkT>): Promise<LinkT>;\n\n  /**\n   * Clears this link from context's link cache.\n   */\n  protected abstract removeLinkFromContext(): void;\n\n  /**\n   * Closes the internally held rhea link, stops the token renewal timer and sets\n   * the this._link field to undefined.\n   */\n  protected closeLink(): Promise<void> {\n    this._logger.verbose(\n      `${this._logPrefix} Attempting to acquire lock token ${this._openLock} for closing link`,\n    );\n    return defaultCancellableLock.acquire(\n      this._openLock,\n      () => {\n        this._logger.verbose(`${this._logPrefix} Lock ${this._openLock} acquired for closing link`);\n        return this.closeLinkImpl();\n      },\n      { abortSignal: undefined, timeoutInMs: undefined },\n    );\n  }\n\n  private async closeLinkImpl(): Promise<void> {\n    this._logger.verbose(`${this._logPrefix} closeLinkImpl() called`);\n\n    clearTimeout(this._tokenRenewalTimer as NodeJS.Timeout);\n    this._tokenRenewalTimer = undefined;\n\n    if (this._link) {\n      try {\n        const link = this._link;\n        this._link = undefined;\n\n        // This should take care of closing the link and it's underlying session. This should also\n        // remove them from the internal map.\n        await link.close();\n        this._logger.verbose(`${this._logPrefix} closed.`);\n      } catch (err: any) {\n        this._logger.logError(err, `${this._logPrefix} An error occurred while closing the link`);\n      }\n    }\n  }\n\n  /**\n   * Provides the current type of the ClientEntity.\n   * @returns The entity type.\n   */\n  private get _type(): string {\n    let result = \"LinkEntity\";\n    if ((this as any).constructor && (this as any).constructor.name) {\n      result = (this as any).constructor.name;\n    }\n    return result;\n  }\n\n  protected get wasClosedPermanently(): boolean {\n    return this._wasClosedPermanently;\n  }\n\n  protected get link(): LinkT | undefined {\n    return this._link;\n  }\n\n  /**\n   * Negotiates the cbs claim for the ClientEntity.\n   * @param setTokenRenewal - Set the token renewal timer. Default false.\n   */\n  private async _negotiateClaim({\n    abortSignal,\n    setTokenRenewal,\n    timeoutInMs,\n  }: {\n    setTokenRenewal: boolean;\n    abortSignal: AbortSignalLike | undefined;\n    timeoutInMs: number;\n  }): Promise<void> {\n    this._logger.verbose(`${this._logPrefix} negotiateclaim() has been called`);\n\n    // Wait for the connectionContext to be ready to open the link.\n    this.checkIfConnectionReady();\n\n    // Acquire the lock and establish a cbs session if it does not exist on the connection.\n    // Although node.js is single threaded, we need a locking mechanism to ensure that a\n    // race condition does not happen while creating a shared resource (in this case the\n    // cbs session, since we want to have exactly 1 cbs session per connection).\n    this._logger.verbose(\n      \"%s Acquiring cbs lock: '%s' for creating the cbs session while creating the %s: \" +\n        \"'%s' with address: '%s'.\",\n      this.logPrefix,\n      this._context.cbsSession.cbsLock,\n      this._type,\n      this.name,\n      this.address,\n    );\n\n    const startTime = Date.now();\n    if (!this._context.cbsSession.isOpen()) {\n      await defaultCancellableLock.acquire(\n        this._context.cbsSession.cbsLock,\n        () => {\n          this.checkIfConnectionReady();\n          return this._context.cbsSession.init({ abortSignal, timeoutInMs });\n        },\n        {\n          abortSignal,\n          timeoutInMs: timeoutInMs - (Date.now() - startTime),\n        },\n      );\n    }\n\n    let tokenObject: AccessToken;\n    let tokenType: TokenType;\n    if (isSasTokenProvider(this._context.tokenCredential)) {\n      tokenObject = await this._context.tokenCredential.getToken(this.audience);\n      tokenType = TokenType.CbsTokenTypeSas;\n\n      // renew sas token in every 45 minutes\n      this._tokenTimeout = (3600 - 900) * 1000;\n    } else {\n      const aadToken = await this._context.tokenCredential.getToken(Constants.aadServiceBusScope);\n      if (!aadToken) {\n        throw new Error(`Failed to get token from the provided \"TokenCredential\" object`);\n      }\n      tokenObject = aadToken;\n      tokenType = TokenType.CbsTokenTypeJwt;\n      this._tokenTimeout = tokenObject.expiresOnTimestamp - Date.now() - 2 * 60 * 1000;\n    }\n    this._logger.verbose(\n      \"%s %s: calling negotiateClaim for audience '%s'.\",\n      this.logPrefix,\n      this._type,\n      this.audience,\n    );\n    // Acquire the lock to negotiate the CBS claim.\n    this._logger.verbose(\n      \"%s Acquiring cbs lock: '%s' for cbs auth for %s: '%s' with address '%s'.\",\n      this.logPrefix,\n      this._context.negotiateClaimLock,\n      this._type,\n      this.name,\n      this.address,\n    );\n    if (!tokenObject) {\n      throw new Error(\"Token cannot be null\");\n    }\n    await defaultCancellableLock.acquire(\n      this._context.negotiateClaimLock,\n      () => {\n        this.checkIfConnectionReady();\n        return this._context.cbsSession.negotiateClaim(\n          this.audience,\n          tokenObject.token,\n          tokenType,\n          {\n            abortSignal,\n            timeoutInMs: timeoutInMs - (Date.now() - startTime),\n          },\n        );\n      },\n      {\n        abortSignal,\n        timeoutInMs: timeoutInMs - (Date.now() - startTime),\n      },\n    );\n    this._logger.verbose(\n      \"%s Negotiated claim for %s '%s' with with address: %s\",\n      this.logPrefix,\n      this._type,\n      this.name,\n      this.address,\n    );\n    if (setTokenRenewal) {\n      this._ensureTokenRenewal();\n    }\n  }\n\n  /**\n   * Checks to see if the connection is in a \"reopening\" state. If it is\n   * we need to _not_ use it otherwise we'll trigger some race conditions\n   * within rhea (for instance, errors about _process not being defined).\n   */\n  private checkIfConnectionReady(): void {\n    if (!this._context.isConnectionClosing()) {\n      return;\n    }\n\n    this._logger.verbose(\n      `${this._logPrefix} Connection is reopening, aborting link initialization.`,\n    );\n    const err = new ServiceBusError(\n      \"Connection is reopening, aborting link initialization.\",\n      \"GeneralError\",\n    );\n    err.retryable = true;\n    throw err;\n  }\n\n  /**\n   * Ensures that the token is renewed within the predefined renewal margin.\n   */\n  private _ensureTokenRenewal(): void {\n    if (!this._tokenTimeout) {\n      return;\n    }\n    // Clear the existing token renewal timer.\n    // This scenario can happen if the connection goes down and is brought back up\n    // before the `nextRenewalTimeout` was reached.\n    if (this._tokenRenewalTimer) {\n      clearTimeout(this._tokenRenewalTimer);\n    }\n    this._tokenRenewalTimer = setTimeout(async () => {\n      try {\n        await this._negotiateClaim({\n          setTokenRenewal: true,\n          abortSignal: undefined,\n          timeoutInMs: Constants.defaultOperationTimeoutInMs,\n        });\n      } catch (err: any) {\n        this._logger.logError(\n          err,\n          \"%s %s '%s' with address %s, an error occurred while renewing the token\",\n          this.logPrefix,\n          this._type,\n          this.name,\n          this.address,\n        );\n      }\n    }, this._tokenTimeout);\n    this._logger.verbose(\n      \"%s %s '%s' with address %s, has next token renewal in %d milliseconds @(%s).\",\n      this.logPrefix,\n      this._type,\n      this.name,\n      this.address,\n      this._tokenTimeout,\n      new Date(Date.now() + this._tokenTimeout).toString(),\n    );\n  }\n}\n"]}