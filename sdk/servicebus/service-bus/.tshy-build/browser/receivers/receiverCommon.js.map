{"version":3,"file":"receiverCommon.js","sourceRoot":"","sources":["../../../src/receivers/receiverCommon.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { MessageHandlers, ProcessErrorArgs } from \"../models.js\";\nimport type { ServiceBusReceiver } from \"./receiver.js\";\nimport type { OperationOptionsBase } from \"../modelsToBeSharedWithEventHubs.js\";\nimport type { createServiceBusLogger, ServiceBusLogger } from \"../log.js\";\nimport { logger, receiverLogger } from \"../log.js\";\nimport { translateServiceBusError } from \"../serviceBusError.js\";\nimport type {\n  DeadLetterOptions,\n  ServiceBusMessageImpl,\n  ServiceBusReceivedMessage,\n} from \"../serviceBusMessage.js\";\nimport { DispositionType } from \"../serviceBusMessage.js\";\nimport type { DispositionStatusOptions } from \"../core/managementClient.js\";\nimport type { ConnectionContext } from \"../connectionContext.js\";\nimport type { RetryConfig, RetryOptions } from \"@azure/core-amqp\";\nimport {\n  Constants,\n  ErrorNameConditionMapper,\n  retry,\n  RetryMode,\n  RetryOperationType,\n} from \"@azure/core-amqp\";\nimport { MessageAlreadySettled } from \"../util/errors.js\";\nimport { delay, isDefined } from \"@azure/core-util\";\nimport type { TracingSpanLink } from \"@azure/core-tracing\";\nimport { toSpanOptions, tracingClient } from \"../diagnostics/tracing.js\";\nimport { extractSpanContextFromServiceBusMessage } from \"../diagnostics/instrumentServiceBusMessage.js\";\n\n/**\n * @internal\n */\nexport function assertValidMessageHandlers(handlers: {\n  processMessage?: unknown;\n  processError?: unknown;\n}): void {\n  if (\n    handlers &&\n    handlers.processMessage instanceof Function &&\n    handlers.processError instanceof Function\n  ) {\n    return;\n  }\n\n  throw new TypeError('Invalid \"MessageHandlers\" provided.');\n}\n\n/**\n * @internal\n */\nexport async function* getMessageIterator(\n  receiver: Pick<ServiceBusReceiver, \"receiveMessages\">,\n  options?: OperationOptionsBase,\n): AsyncIterableIterator<ServiceBusReceivedMessage> {\n  while (true) {\n    const messages = await receiver.receiveMessages(1, options);\n\n    if (messages.length === 0) {\n      continue;\n    }\n\n    yield messages[0];\n  }\n}\n\n/**\n * @internal\n */\nexport function wrapProcessErrorHandler(\n  handlers: Pick<MessageHandlers, \"processError\">,\n  loggerParam: ServiceBusLogger = receiverLogger,\n): MessageHandlers[\"processError\"] {\n  return async (args: ProcessErrorArgs) => {\n    try {\n      args.error = translateServiceBusError(args.error);\n      await handlers.processError(args);\n    } catch (err: any) {\n      loggerParam.logError(err, `An error was thrown from the user's processError handler`);\n    }\n  };\n}\n\n/**\n * @internal\n *\n */\nexport function completeMessage(\n  message: ServiceBusMessageImpl,\n  context: ConnectionContext,\n  entityPath: string,\n  retryOptions: RetryOptions | undefined,\n): Promise<void> {\n  receiverLogger.verbose(\n    \"[%s] Completing the message with id '%s'.\",\n    context.connectionId,\n    message.messageId,\n  );\n  const tracingContext = extractSpanContextFromServiceBusMessage(message);\n  const spanLinks: TracingSpanLink[] = tracingContext ? [{ tracingContext }] : [];\n  return tracingClient.withSpan(\n    \"ServicebusReceiver.complete\",\n    {},\n    () =>\n      settleMessage(message, DispositionType.complete, context, entityPath, {\n        retryOptions,\n      }),\n    {\n      spanLinks,\n      ...toSpanOptions({ entityPath, host: context.config.host }, \"settle\", \"client\"),\n    },\n  );\n}\n\n/**\n * @internal\n *\n */\nexport function abandonMessage(\n  message: ServiceBusMessageImpl,\n  context: ConnectionContext,\n  entityPath: string,\n  propertiesToModify: { [key: string]: number | boolean | string | Date | null } | undefined,\n  retryOptions: RetryOptions | undefined,\n): Promise<void> {\n  receiverLogger.verbose(\n    \"[%s] Abandoning the message with id '%s'.\",\n    context.connectionId,\n    message.messageId,\n  );\n  const tracingContext = extractSpanContextFromServiceBusMessage(message);\n  const spanLinks: TracingSpanLink[] = tracingContext ? [{ tracingContext }] : [];\n  return tracingClient.withSpan(\n    \"ServicebusReceiver.abandon\",\n    {},\n    () =>\n      settleMessage(message, DispositionType.abandon, context, entityPath, {\n        propertiesToModify,\n        retryOptions,\n      }),\n    {\n      spanLinks,\n      ...toSpanOptions({ entityPath, host: context.config.host }, \"settle\", \"client\"),\n    },\n  );\n}\n\n/**\n * @internal\n *\n */\nexport function deferMessage(\n  message: ServiceBusMessageImpl,\n  context: ConnectionContext,\n  entityPath: string,\n  propertiesToModify: { [key: string]: number | boolean | string | Date | null } | undefined,\n  retryOptions: RetryOptions | undefined,\n): Promise<void> {\n  receiverLogger.verbose(\n    \"[%s] Deferring the message with id '%s'.\",\n    context.connectionId,\n    message.messageId,\n  );\n  const tracingContext = extractSpanContextFromServiceBusMessage(message);\n  const spanLinks: TracingSpanLink[] = tracingContext ? [{ tracingContext }] : [];\n  return tracingClient.withSpan(\n    \"ServiceBusReceiver.defer\",\n    {},\n    () =>\n      settleMessage(message, DispositionType.defer, context, entityPath, {\n        retryOptions,\n        propertiesToModify,\n      }),\n    {\n      spanLinks,\n      ...toSpanOptions({ entityPath, host: context.config.host }, \"settle\", \"client\"),\n    },\n  );\n}\n\n/**\n * @internal\n *\n */\nexport function deadLetterMessage(\n  message: ServiceBusMessageImpl,\n  context: ConnectionContext,\n  entityPath: string,\n  propertiesToModify:\n    | (DeadLetterOptions & { [key: string]: number | boolean | string | Date | null })\n    | undefined,\n  retryOptions: RetryOptions | undefined,\n): Promise<void> {\n  receiverLogger.verbose(\n    \"[%s] Deadlettering the message with id '%s'.\",\n    context.connectionId,\n    message.messageId,\n  );\n\n  const actualPropertiesToModify: Partial<DeadLetterOptions> = {\n    ...propertiesToModify,\n  };\n\n  // these two fields are handled specially and don't need to be in here.\n  delete actualPropertiesToModify.deadLetterErrorDescription;\n  delete actualPropertiesToModify.deadLetterReason;\n\n  const dispositionStatusOptions: DispositionStatusOptions = {\n    propertiesToModify: actualPropertiesToModify,\n    deadLetterReason: propertiesToModify?.deadLetterReason,\n    deadLetterDescription: propertiesToModify?.deadLetterErrorDescription,\n    retryOptions,\n  };\n\n  const tracingContext = extractSpanContextFromServiceBusMessage(message);\n  const spanLinks: TracingSpanLink[] = tracingContext ? [{ tracingContext }] : [];\n\n  return tracingClient.withSpan(\n    \"ServiceBusReceiver.deadLetter\",\n    {},\n    () =>\n      settleMessage(\n        message,\n        DispositionType.deadletter,\n        context,\n        entityPath,\n        dispositionStatusOptions,\n      ),\n    {\n      spanLinks,\n      ...toSpanOptions({ entityPath, host: context.config.host }, \"settle\", \"client\"),\n    },\n  );\n}\n\n/**\n * @internal\n */\nexport function settleMessage(\n  message: ServiceBusMessageImpl,\n  operation: DispositionType,\n  context: ConnectionContext,\n  entityPath: string,\n  options: DispositionStatusOptions,\n  _settleMessageOperation: typeof settleMessageOperation = settleMessageOperation,\n): Promise<void> {\n  return retry({\n    connectionId: context.connectionId,\n    operation: () => {\n      return _settleMessageOperation(message, operation, context, entityPath, options);\n    },\n    operationType: RetryOperationType.messageSettlement,\n    abortSignal: options?.abortSignal,\n    retryOptions: options?.retryOptions,\n  });\n}\n\n/**\n * @internal\n *\n * NOTE: it's tempting to make this method non-async. However, doing so makes it too easy\n * to throw exceptions that will not be \"catchable\" by people chaining to the returned Promise\n * since we can throw exceptions outside of the Promise's scope.\n */\nexport async function settleMessageOperation(\n  message: ServiceBusMessageImpl,\n  operation: DispositionType,\n  context: ConnectionContext,\n  entityPath: string,\n  options: DispositionStatusOptions,\n): Promise<void> {\n  const isDeferredMessage = !message.delivery.link;\n  const receiver = isDeferredMessage\n    ? undefined\n    : context.getReceiverFromCache(message.delivery.link.name, message.sessionId);\n  const associatedLinkName = receiver?.name;\n\n  let error: Error | undefined;\n  if (message.delivery.remote_settled) {\n    error = new Error(MessageAlreadySettled);\n  } else if (\n    !isDeferredMessage &&\n    (!receiver || !receiver.isOpen()) &&\n    isDefined(message.sessionId)\n  ) {\n    error = translateServiceBusError({\n      description:\n        `Failed to ${operation} the message as the AMQP link with which the message was ` +\n        `received is no longer alive.`,\n      condition: ErrorNameConditionMapper.SessionLockLostError,\n    });\n  }\n\n  if (error) {\n    receiverLogger.logError(\n      error,\n      \"[%s] An error occurred when settling a message with id '%s'\",\n      context.connectionId,\n      message.messageId,\n    );\n    throw error;\n  }\n\n  // Message Settlement with managementLink\n  // 1. If the received message is deferred as such messages can only be settled using managementLink\n  // 2. If the associated receiver link is not available. This does not apply to messages from sessions as we need a lock on the session to do so.\n  if (isDeferredMessage || ((!receiver || !receiver.isOpen()) && !isDefined(message.sessionId))) {\n    return context\n      .getManagementClient(entityPath)\n      .updateDispositionStatus(message.lockToken!, operation, {\n        ...options,\n        associatedLinkName,\n        sessionId: message.sessionId,\n      })\n      .catch((err) => {\n        throw translateServiceBusError(err);\n      });\n  }\n\n  return receiver!.settleMessage(message, operation, options).catch((err) => {\n    throw translateServiceBusError(err);\n  });\n}\n\n/** @internal */\nexport interface RetryForeverArgs<T> {\n  retryConfig: RetryConfig<T>;\n  onError: (err: Error) => void;\n  logger: ReturnType<typeof createServiceBusLogger>;\n  logPrefix: string;\n}\n\n/**\n * Calculates delay between retries, in milliseconds.\n */\nfunction calculateDelay(\n  attemptCount: number,\n  retryDelayInMs: number,\n  maxRetryDelayInMs: number,\n  mode: RetryMode,\n): number {\n  if (mode === RetryMode.Exponential) {\n    const boundedRandDelta =\n      retryDelayInMs * 0.8 +\n      Math.floor(Math.random() * (retryDelayInMs * 1.2 - retryDelayInMs * 0.8));\n\n    const incrementDelta = boundedRandDelta * (Math.pow(2, attemptCount) - 1);\n    return Math.min(incrementDelta, maxRetryDelayInMs);\n  }\n\n  return retryDelayInMs;\n}\n\n/**\n * Retry infinitely until success, reporting in between retry attempts.\n *\n * This function will only stop retrying if:\n * - args.retryConfig.operation resolves successfully\n * - args.retryConfig.operation rejects with an `AbortError`\n *\n * @internal\n */\nexport async function retryForever<T>(\n  args: RetryForeverArgs<T>,\n  retryFn: typeof retry = retry,\n): Promise<T> {\n  let numRetryCycles = 0;\n  const config = args.retryConfig;\n  if (!config.retryOptions) {\n    config.retryOptions = {};\n  }\n  // eslint-disable-next-line eqeqeq\n  if (config.retryOptions.retryDelayInMs == undefined || config.retryOptions.retryDelayInMs < 0) {\n    config.retryOptions.retryDelayInMs = Constants.defaultDelayBetweenOperationRetriesInMs;\n  }\n  if (\n    // eslint-disable-next-line eqeqeq\n    config.retryOptions.maxRetryDelayInMs == undefined ||\n    config.retryOptions.maxRetryDelayInMs < 0\n  ) {\n    config.retryOptions.maxRetryDelayInMs = Constants.defaultMaxDelayForExponentialRetryInMs;\n  }\n  if (!config.retryOptions.mode) {\n    config.retryOptions.mode = RetryMode.Fixed;\n  }\n\n  // The retries are broken up into cycles, giving the user some control over how often\n  // we actually attempt to retry.\n  while (true) {\n    ++numRetryCycles;\n\n    try {\n      return await retryFn(args.retryConfig);\n    } catch (err: any) {\n      // if the user aborts the operation we're immediately done.\n      // AbortError is also thrown by linkEntity.init() if the connection has been\n      // permanently closed.\n      if (err.name === \"AbortError\") {\n        logger.warning(`${args.logPrefix} AbortError caught, ending retries.`);\n        throw err;\n      }\n\n      // we only report the error here - this avoids spamming the user with too many\n      // redundant reports of errors while still providing them incremental status on failures.\n      try {\n        args.onError(err);\n      } catch (error: any) {\n        logger.error(\"args.onerror has thrown\", error);\n      }\n\n      args.logger.logError(\n        err,\n        `${args.logPrefix} Error thrown in retry cycle ${numRetryCycles}, restarting retry cycle with retry options`,\n        args.retryConfig,\n      );\n\n      const delayInMs = calculateDelay(\n        numRetryCycles,\n        config.retryOptions.retryDelayInMs,\n        config.retryOptions.maxRetryDelayInMs,\n        config.retryOptions.mode,\n      );\n      logger.verbose(\n        \"[%s] Sleeping for %d milliseconds for '%s'.\",\n        config.connectionId,\n        delayInMs,\n        config.operationType,\n      );\n      await delay(delayInMs, {\n        abortSignal: config.abortSignal,\n        abortErrorMsg: \"Retry cycle has been cancelled by the user.\",\n      });\n\n      continue;\n    }\n  }\n}\n"]}