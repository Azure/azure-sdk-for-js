{"version":3,"file":"sender.js","sourceRoot":"","sources":["../../src/sender.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAGlC,OAAO,EAAE,aAAa,EAAE,MAAM,yBAAyB,CAAC;AAGxD,OAAO,EACL,oCAAoC,EACpC,uBAAuB,EACvB,4BAA4B,EAC5B,gCAAgC,EAChC,0CAA0C,EAC1C,gCAAgC,EAChC,gCAAgC,GACjC,MAAM,kBAAkB,CAAC;AAI1B,OAAO,EAAE,kBAAkB,EAAE,KAAK,EAAE,MAAM,kBAAkB,CAAC;AAG7D,OAAO,EAAE,YAAY,IAAI,MAAM,EAAE,MAAM,UAAU,CAAC;AAClD,OAAO,EAAE,aAAa,EAAE,aAAa,EAAE,MAAM,0BAA0B,CAAC;AACxE,OAAO,EAAE,qBAAqB,EAAE,MAAM,iBAAiB,CAAC;AACxD,OAAO,EAAE,eAAe,EAAE,MAAM,sBAAsB,CAAC;AACvD,OAAO,EAAE,iBAAiB,EAAE,MAAM,8CAA8C,CAAC;AA2HjF;;GAEG;AACH,MAAM,OAAO,oBAAoB;IAU/B,IAAY,SAAS;QACnB,OAAO,IAAI,IAAI,CAAC,QAAQ,CAAC,YAAY,WAAW,IAAI,CAAC,UAAU,GAAG,CAAC;IACrE,CAAC;IAED;;;OAGG;IACH,YACU,QAA2B,EAC3B,WAAmB,EAC3B,eAA6B,EAAE,EAC/B,UAAmB;QAHX,aAAQ,GAAR,QAAQ,CAAmB;QAC3B,gBAAW,GAAX,WAAW,CAAQ;QAjB7B;;WAEG;QACK,cAAS,GAAY,KAAK,CAAC;QAkBjC,4BAA4B,CAAC,QAAQ,CAAC,CAAC;QACvC,IAAI,CAAC,UAAU,GAAG,WAAW,CAAC;QAC9B,IAAI,CAAC,UAAU,GAAG,qBAAqB,CAAC,IAAI,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;QACrE,IAAI,CAAC,OAAO,GAAG,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,EAAE,WAAW,EAAE,YAAY,CAAC,CAAC;QAC/F,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;IACpC,CAAC;IAEO,gCAAgC;QACtC,4BAA4B,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC5C,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAClB,MAAM,YAAY,GAAG,uBAAuB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAC/D,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC;YACtC,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAC,YAAY,aAAa,CAAC,CAAC;YACpE,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED,IAAW,QAAQ;QACjB,OAAO,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,QAAQ,CAAC,wBAAwB,CAAC;IAClE,CAAC;IAED,KAAK,CAAC,YAAY,CAChB,QAK0B,EAC1B,OAA8B;QAE9B,IAAI,CAAC,gCAAgC,EAAE,CAAC;QACxC,gCAAgC,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;QAEnF,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC;YACpE,yBAAyB;YACzB,gCAAgC,CAAC,QAAQ,EAAE,oCAAoC,CAAC,CAAC;YACjF,MAAM,eAAe,GAAG,QAAoD,CAAC;YAC7E,MAAM,EAAE,OAAO,EAAE,WAAW,EAAE,GAAG,iBAAiB,CAChD,eAAe,EACf,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,EACb,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,EACzB,SAAS,CACV,CAAC;YACF,MAAM,SAAS,GAAsB,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE,cAAc,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YAC1F,OAAO,aAAa,CAAC,QAAQ,CAC3B,uBAAuB,EACvB,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,EACb,CAAC,cAAc,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,cAAc,CAAC,kBAE5D,SAAS,IACN,aAAa,CACd,EAAE,UAAU,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,EAChE,SAAS,EACT,QAAQ,CACT,EAEJ,CAAC;QACJ,CAAC;QAED,IAAI,KAA6B,CAAC;QAClC,IAAI,wBAAwB,CAAC,QAAQ,CAAC,EAAE,CAAC;YACvC,wBAAwB;YACxB,KAAK,GAAG,QAAQ,CAAC;QACnB,CAAC;aAAM,CAAC;YACN,4BAA4B;YAC5B,KAAK,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;YAC/C,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE,CAAC;gBAC/B,gCAAgC,CAAC,OAAO,EAAE,oCAAoC,CAAC,CAAC;gBAChF,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE,CAAC;oBAC3C,mCAAmC;oBACnC,MAAM,IAAI,eAAe,CACvB,yKAAyK,EACzK,qBAAqB,CACtB,CAAC;gBACJ,CAAC;YACH,CAAC;QACH,CAAC;QAED,MAAM,SAAS,GAAsB,KAAK,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC,cAAc,EAAE,EAAE;YACrF,OAAO;gBACL,cAAc;aACf,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,OAAO,aAAa,CAAC,QAAQ,CAC3B,uBAAuB,EACvB,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,EACb,CAAC,cAAc,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,EAAE,cAAc,CAAC,kBAE/D,SAAS,IACN,aAAa,CACd,EAAE,UAAU,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,EAChE,SAAS,EACT,QAAQ,CACT,EAEJ,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,kBAAkB,CAAC,OAAmC;QAC1D,IAAI,CAAC,gCAAgC,EAAE,CAAC;QACxC,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IAC3C,CAAC;IAED,KAAK,CAAC,gBAAgB,CACpB,QAI0B,EAC1B,uBAA6B,EAC7B,UAAgC,EAAE;QAElC,IAAI,CAAC,gCAAgC,EAAE,CAAC;QACxC,gCAAgC,CAC9B,IAAI,CAAC,QAAQ,CAAC,YAAY,EAC1B,yBAAyB,EACzB,uBAAuB,CACxB,CAAC;QACF,0CAA0C,CACxC,IAAI,CAAC,QAAQ,CAAC,YAAY,EAC1B,yBAAyB,EACzB,uBAAuB,EACvB,IAAI,CACL,CAAC;QACF,gCAAgC,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;QACnF,MAAM,kBAAkB,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;QAE3E,KAAK,MAAM,OAAO,IAAI,kBAAkB,EAAE,CAAC;YACzC,gCAAgC,CAAC,OAAO,EAAE,oCAAoC,CAAC,CAAC;QAClF,CAAC;QAED,MAAM,+BAA+B,GAAG,KAAK,IAAqB,EAAE;YAClE,OAAO,IAAI,CAAC,QAAQ;iBACjB,mBAAmB,CAAC,IAAI,CAAC,WAAW,CAAC;iBACrC,gBAAgB,CAAC,uBAAuB,EAAE,kBAAkB,kCACxD,OAAO,KACV,kBAAkB,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,EACrC,WAAW,EAAE,kBAAkB,EAC/B,WAAW,EAAE,IAAI,CAAC,aAAa,CAAC,WAAW,IAC3C,CAAC;QACP,CAAC,CAAC;QACF,MAAM,MAAM,GAAwB;YAClC,SAAS,EAAE,+BAA+B;YAC1C,YAAY,EAAE,IAAI,CAAC,QAAQ,CAAC,YAAY;YACxC,aAAa,EAAE,kBAAkB,CAAC,UAAU;YAC5C,YAAY,EAAE,IAAI,CAAC,aAAa;YAChC,WAAW,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,WAAW;SAClC,CAAC;QACF,OAAO,KAAK,CAAS,MAAM,CAAC,CAAC;IAC/B,CAAC;IAED,KAAK,CAAC,uBAAuB,CAC3B,eAA8B,EAC9B,UAAgC,EAAE;QAElC,IAAI,CAAC,gCAAgC,EAAE,CAAC;QACxC,gCAAgC,CAC9B,IAAI,CAAC,QAAQ,CAAC,YAAY,EAC1B,iBAAiB,EACjB,eAAe,CAChB,CAAC;QACF,gCAAgC,CAC9B,IAAI,CAAC,QAAQ,CAAC,YAAY,EAC1B,iBAAiB,EACjB,eAAe,CAChB,CAAC;QAEF,MAAM,uBAAuB,GAAG,KAAK,CAAC,OAAO,CAAC,eAAe,CAAC;YAC5D,CAAC,CAAC,eAAe;YACjB,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC;QACtB,MAAM,uCAAuC,GAAG,KAAK,IAAmB,EAAE;YACxE,OAAO,IAAI,CAAC,QAAQ;iBACjB,mBAAmB,CAAC,IAAI,CAAC,WAAW,CAAC;iBACrC,uBAAuB,CAAC,uBAAuB,kCAC3C,OAAO,KACV,kBAAkB,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,EACrC,WAAW,EAAE,yBAAyB,EACtC,WAAW,EAAE,IAAI,CAAC,aAAa,CAAC,WAAW,IAC3C,CAAC;QACP,CAAC,CAAC;QACF,MAAM,MAAM,GAAsB;YAChC,SAAS,EAAE,uCAAuC;YAClD,YAAY,EAAE,IAAI,CAAC,QAAQ,CAAC,YAAY;YACxC,aAAa,EAAE,kBAAkB,CAAC,UAAU;YAC5C,YAAY,EAAE,IAAI,CAAC,aAAa;YAChC,WAAW,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,WAAW;SAClC,CAAC;QACF,OAAO,KAAK,CAAO,MAAM,CAAC,CAAC;IAC7B,CAAC;IAED,8DAA8D;IAC9D,6CAA6C;IAE7C,wCAAwC;IACxC,wCAAwC;IACxC,2EAA2E;IAC3E,gDAAgD;IAChD,oDAAoD;IACpD,wCAAwC;IACxC,wCAAwC;IACxC,OAAO;IAEP,gCAAgC;IAChC,IAAI;IAEJ,KAAK,CAAC,KAAK;QACT,IAAI,CAAC;YACH,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,MAAM,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QAC7B,CAAC;QAAC,OAAO,GAAQ,EAAE,CAAC;YAClB,MAAM,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,SAAS,6CAA6C,CAAC,CAAC;YACrF,MAAM,GAAG,CAAC;QACZ,CAAC;IACH,CAAC;CACF;AAED;;GAEG;AACH,MAAM,UAAU,wBAAwB,CACtC,sBAA+B;IAE/B,IAAI,sBAAsB,IAAI,IAAI,EAAE,CAAC;QACnC,OAAO,KAAK,CAAC;IACf,CAAC;IAED,MAAM,aAAa,GAAG,sBAAgD,CAAC;IAEvE,OAAO,CACL,OAAO,aAAa,CAAC,aAAa,KAAK,UAAU;QACjD,OAAO,aAAa,CAAC,cAAc,KAAK,QAAQ;QAChD,OAAO,aAAa,CAAC,WAAW,KAAK,QAAQ,CAC9C,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type Long from \"long\";\nimport { MessageSender } from \"./core/messageSender.js\";\nimport type { ServiceBusMessage } from \"./serviceBusMessage.js\";\nimport type { ConnectionContext } from \"./connectionContext.js\";\nimport {\n  errorInvalidMessageTypeSingleOrArray,\n  getSenderClosedErrorMsg,\n  throwErrorIfConnectionClosed,\n  throwIfNotValidServiceBusMessage,\n  throwTypeErrorIfNotInstanceOfParameterType,\n  throwTypeErrorIfParameterMissing,\n  throwTypeErrorIfParameterNotLong,\n} from \"./util/errors.js\";\nimport type { ServiceBusMessageBatch } from \"./serviceBusMessageBatch.js\";\nimport type { CreateMessageBatchOptions } from \"./models.js\";\nimport type { RetryConfig, RetryOptions, AmqpAnnotatedMessage } from \"@azure/core-amqp\";\nimport { RetryOperationType, retry } from \"@azure/core-amqp\";\nimport type { OperationOptionsBase } from \"./modelsToBeSharedWithEventHubs.js\";\nimport type { TracingSpanLink } from \"@azure/core-tracing\";\nimport { senderLogger as logger } from \"./log.js\";\nimport { toSpanOptions, tracingClient } from \"./diagnostics/tracing.js\";\nimport { ensureValidIdentifier } from \"./util/utils.js\";\nimport { ServiceBusError } from \"./serviceBusError.js\";\nimport { instrumentMessage } from \"./diagnostics/instrumentServiceBusMessage.js\";\n\n/**\n * A Sender can be used to send messages, schedule messages to be sent at a later time\n * and cancel such scheduled messages.\n * Use the `createSender` function on the ServiceBusClient to instantiate a Sender.\n * The Sender class is an abstraction over the underlying AMQP sender link.\n */\nexport interface ServiceBusSender {\n  /**\n   * A name used to identify the sender. This can be used to correlate logs and exceptions.\n   * If not specified or empty, a random unique one will be generated.\n   */\n  identifier: string;\n  /**\n   * Sends the given messages after creating an AMQP Sender link if it doesn't already exist.\n   *\n   * - To send messages to a `session` and/or `partition` enabled Queue/Topic, set the `sessionId`\n   * and/or `partitionKey` properties respectively on the messages.\n   * - All messages passed to the same sendMessages() call should have the same `sessionId` (if using\n   *  sessions) and the same `partitionKey` (if using partitions).\n   *\n   * **Note:**\n   *\n   *    __If you want to send messages of size greater than 1MB, please send individual messages instead of sending a batched message or an array of messages like below.__\n   *\n   *  `await sender.sendMessages(message);`\n   *\n   * __This is because the batched messages are not capable of sending the larger messages yet. You'll hit the `force detached` error in this case otherwise. Read [service-bus-premium-messaging#large-messages-support](https://learn.microsoft.com/en-us/azure/service-bus-messaging/service-bus-premium-messaging#large-messages-support). More info at [#23014](https://github.com/Azure/azure-sdk-for-js/pull/23014).__\n   *\n   * @param messages - A single message or an array of messages or a batch of messages created via the createBatch()\n   * method to send.\n   * @param options - Options bag to pass an abort signal or tracing options.\n   * @throws `ServiceBusError` with the code `MessageSizeExceeded` if the provided messages do not fit in a single `ServiceBusMessageBatch`.\n   * @throws Error if the underlying connection, client or sender is closed.\n   * @throws `ServiceBusError` if the service returns an error while sending messages to the service.\n   */\n  sendMessages(\n    messages:\n      | ServiceBusMessage\n      | ServiceBusMessage[]\n      | ServiceBusMessageBatch\n      | AmqpAnnotatedMessage\n      | AmqpAnnotatedMessage[],\n    options?: OperationOptionsBase,\n  ): Promise<void>;\n\n  /**\n   * Creates an instance of `ServiceBusMessageBatch` to which one can add messages until the maximum supported size is reached.\n   * The batch can be passed to the {@link send} method to send the messages to Azure Service Bus.\n   * @param options - Configures the behavior of the batch.\n   * - `maxSizeInBytes`: The upper limit for the size of batch. The `tryAdd` function will return `false` after this limit is reached.\n   *\n   * @throws `ServiceBusError` if an error is encountered while sending a message.\n   * @throws Error if the underlying connection or sender has been closed.\n   */\n  createMessageBatch(options?: CreateMessageBatchOptions): Promise<ServiceBusMessageBatch>;\n\n  // TODO: Commented out to come up with an alternative name\n  // /**\n  //  * Opens the AMQP link to Azure Service Bus from the sender.\n  //  *\n  //  * It is not necessary to call this method in order to use the sender. It is\n  //  * recommended to call this before your first sendMessages() call if you\n  //  * want to front load the work of setting up the AMQP link to the service.\n  //  *\n  //  * @param options - Options to configure tracing and the abortSignal.\n  //  */\n  // open(options?: OperationOptionsBase): Promise<void>;\n\n  /**\n   * Returns `true` if either the sender or the client that created it has been closed.\n   * @readonly\n   */\n  isClosed: boolean;\n\n  /**\n   * Schedules given messages to appear on Service Bus Queue/Subscription at a later time.\n   *\n   * @param messages - Message or an array of messages that need to be scheduled.\n   * @param scheduledEnqueueTimeUtc - The UTC time at which the messages should be enqueued.\n   * @param options - Options bag to pass an abort signal or tracing options.\n   * @returns The sequence numbers of messages that were scheduled.\n   * You will need the sequence number if you intend to cancel the scheduling of the messages.\n   * Save the `Long` type as-is in your application without converting to number. Since JavaScript\n   * only supports 53 bit numbers, converting the `Long` to number will cause loss in precision.\n   * @throws Error if the underlying connection, client or sender is closed.\n   * @throws `ServiceBusError` if the service returns an error while scheduling messages.\n   */\n  scheduleMessages(\n    messages:\n      | ServiceBusMessage\n      | ServiceBusMessage[]\n      | AmqpAnnotatedMessage\n      | AmqpAnnotatedMessage[],\n    scheduledEnqueueTimeUtc: Date,\n    options?: OperationOptionsBase,\n  ): Promise<Long[]>;\n\n  /**\n   * Cancels multiple messages that were scheduled to appear on a ServiceBus Queue/Subscription.\n   * @param sequenceNumbers - Sequence number or an array of sequence numbers of the messages to be cancelled.\n   * @param options - Options bag to pass an abort signal or tracing options.\n   * @throws Error if the underlying connection, client or sender is closed.\n   * @throws `ServiceBusError` if the service returns an error while canceling scheduled messages.\n   */\n  cancelScheduledMessages(\n    sequenceNumbers: Long | Long[],\n    options?: OperationOptionsBase,\n  ): Promise<void>;\n  /**\n   * Path of the entity for which the sender has been created.\n   */\n  entityPath: string;\n  /**\n   * Closes the underlying AMQP sender link.\n   * Once closed, the sender cannot be used for any further operations.\n   * Use the `createSender` function on the QueueClient or TopicClient to instantiate a new Sender\n   *\n   */\n  close(): Promise<void>;\n}\n\n/**\n * @internal\n */\nexport class ServiceBusSenderImpl implements ServiceBusSender {\n  public identifier: string;\n  private _retryOptions: RetryOptions;\n  /**\n   * Denotes if close() was called on this sender\n   */\n  private _isClosed: boolean = false;\n  private _sender: MessageSender;\n  public entityPath: string;\n\n  private get logPrefix(): string {\n    return `[${this._context.connectionId}|sender:${this.entityPath}]`;\n  }\n\n  /**\n   * @internal\n   * @throws Error if the underlying connection is closed.\n   */\n  constructor(\n    private _context: ConnectionContext,\n    private _entityPath: string,\n    retryOptions: RetryOptions = {},\n    identifier?: string,\n  ) {\n    throwErrorIfConnectionClosed(_context);\n    this.entityPath = _entityPath;\n    this.identifier = ensureValidIdentifier(this.entityPath, identifier);\n    this._sender = MessageSender.create(this.identifier, this._context, _entityPath, retryOptions);\n    this._retryOptions = retryOptions;\n  }\n\n  private _throwIfSenderOrConnectionClosed(): void {\n    throwErrorIfConnectionClosed(this._context);\n    if (this.isClosed) {\n      const errorMessage = getSenderClosedErrorMsg(this._entityPath);\n      const error = new Error(errorMessage);\n      logger.logError(error, `[${this._context.connectionId}] is closed`);\n      throw error;\n    }\n  }\n\n  public get isClosed(): boolean {\n    return this._isClosed || this._context.wasConnectionCloseCalled;\n  }\n\n  async sendMessages(\n    messages:\n      | ServiceBusMessage\n      | ServiceBusMessage[]\n      | ServiceBusMessageBatch\n      | AmqpAnnotatedMessage\n      | AmqpAnnotatedMessage[],\n    options?: OperationOptionsBase,\n  ): Promise<void> {\n    this._throwIfSenderOrConnectionClosed();\n    throwTypeErrorIfParameterMissing(this._context.connectionId, \"messages\", messages);\n\n    if (!isServiceBusMessageBatch(messages) && !Array.isArray(messages)) {\n      // Case 1: Single message\n      throwIfNotValidServiceBusMessage(messages, errorInvalidMessageTypeSingleOrArray);\n      const originalMessage = messages as ServiceBusMessage | AmqpAnnotatedMessage;\n      const { message, spanContext } = instrumentMessage(\n        originalMessage,\n        options ?? {},\n        this.entityPath,\n        this._context.config.host,\n        \"publish\",\n      );\n      const spanLinks: TracingSpanLink[] = spanContext ? [{ tracingContext: spanContext }] : [];\n      return tracingClient.withSpan(\n        \"ServiceBusSender.send\",\n        options ?? {},\n        (updatedOptions) => this._sender.send(message, updatedOptions),\n        {\n          spanLinks,\n          ...toSpanOptions(\n            { entityPath: this.entityPath, host: this._context.config.host },\n            \"publish\",\n            \"client\",\n          ),\n        },\n      );\n    }\n\n    let batch: ServiceBusMessageBatch;\n    if (isServiceBusMessageBatch(messages)) {\n      // Case 2: Batch message\n      batch = messages;\n    } else {\n      // Case 3: Array of messages\n      batch = await this.createMessageBatch(options);\n      for (const message of messages) {\n        throwIfNotValidServiceBusMessage(message, errorInvalidMessageTypeSingleOrArray);\n        if (!batch.tryAddMessage(message, options)) {\n          // this is too big - throw an error\n          throw new ServiceBusError(\n            \"Messages were too big to fit in a single batch. Remove some messages and try again or create your own batch using createBatch(), which gives more fine-grained control.\",\n            \"MessageSizeExceeded\",\n          );\n        }\n      }\n    }\n\n    const spanLinks: TracingSpanLink[] = batch._messageSpanContexts.map((tracingContext) => {\n      return {\n        tracingContext,\n      };\n    });\n\n    return tracingClient.withSpan(\n      \"ServiceBusSender.send\",\n      options ?? {},\n      (updatedOptions) => this._sender.sendBatch(batch, updatedOptions),\n      {\n        spanLinks,\n        ...toSpanOptions(\n          { entityPath: this.entityPath, host: this._context.config.host },\n          \"publish\",\n          \"client\",\n        ),\n      },\n    );\n  }\n\n  async createMessageBatch(options?: CreateMessageBatchOptions): Promise<ServiceBusMessageBatch> {\n    this._throwIfSenderOrConnectionClosed();\n    return this._sender.createBatch(options);\n  }\n\n  async scheduleMessages(\n    messages:\n      | ServiceBusMessage\n      | ServiceBusMessage[]\n      | AmqpAnnotatedMessage\n      | AmqpAnnotatedMessage[],\n    scheduledEnqueueTimeUtc: Date,\n    options: OperationOptionsBase = {},\n  ): Promise<Long[]> {\n    this._throwIfSenderOrConnectionClosed();\n    throwTypeErrorIfParameterMissing(\n      this._context.connectionId,\n      \"scheduledEnqueueTimeUtc\",\n      scheduledEnqueueTimeUtc,\n    );\n    throwTypeErrorIfNotInstanceOfParameterType(\n      this._context.connectionId,\n      \"scheduledEnqueueTimeUtc\",\n      scheduledEnqueueTimeUtc,\n      Date,\n    );\n    throwTypeErrorIfParameterMissing(this._context.connectionId, \"messages\", messages);\n    const messagesToSchedule = Array.isArray(messages) ? messages : [messages];\n\n    for (const message of messagesToSchedule) {\n      throwIfNotValidServiceBusMessage(message, errorInvalidMessageTypeSingleOrArray);\n    }\n\n    const scheduleMessageOperationPromise = async (): Promise<Long[]> => {\n      return this._context\n        .getManagementClient(this._entityPath)\n        .scheduleMessages(scheduledEnqueueTimeUtc, messagesToSchedule, {\n          ...options,\n          associatedLinkName: this._sender.name,\n          requestName: \"scheduleMessages\",\n          timeoutInMs: this._retryOptions.timeoutInMs,\n        });\n    };\n    const config: RetryConfig<Long[]> = {\n      operation: scheduleMessageOperationPromise,\n      connectionId: this._context.connectionId,\n      operationType: RetryOperationType.management,\n      retryOptions: this._retryOptions,\n      abortSignal: options?.abortSignal,\n    };\n    return retry<Long[]>(config);\n  }\n\n  async cancelScheduledMessages(\n    sequenceNumbers: Long | Long[],\n    options: OperationOptionsBase = {},\n  ): Promise<void> {\n    this._throwIfSenderOrConnectionClosed();\n    throwTypeErrorIfParameterMissing(\n      this._context.connectionId,\n      \"sequenceNumbers\",\n      sequenceNumbers,\n    );\n    throwTypeErrorIfParameterNotLong(\n      this._context.connectionId,\n      \"sequenceNumbers\",\n      sequenceNumbers,\n    );\n\n    const sequenceNumbersToCancel = Array.isArray(sequenceNumbers)\n      ? sequenceNumbers\n      : [sequenceNumbers];\n    const cancelSchedulesMessagesOperationPromise = async (): Promise<void> => {\n      return this._context\n        .getManagementClient(this._entityPath)\n        .cancelScheduledMessages(sequenceNumbersToCancel, {\n          ...options,\n          associatedLinkName: this._sender.name,\n          requestName: \"cancelScheduledMessages\",\n          timeoutInMs: this._retryOptions.timeoutInMs,\n        });\n    };\n    const config: RetryConfig<void> = {\n      operation: cancelSchedulesMessagesOperationPromise,\n      connectionId: this._context.connectionId,\n      operationType: RetryOperationType.management,\n      retryOptions: this._retryOptions,\n      abortSignal: options?.abortSignal,\n    };\n    return retry<void>(config);\n  }\n\n  // async open(options?: OperationOptionsBase): Promise<void> {\n  //   this._throwIfSenderOrConnectionClosed();\n\n  //   const config: RetryConfig<void> = {\n  //     // TODO: Pass tracing options too\n  //     operation: () => this._sender.open(undefined, options?.abortSignal),\n  //     connectionId: this._context.connectionId,\n  //     operationType: RetryOperationType.senderLink,\n  //     retryOptions: this._retryOptions,\n  //     abortSignal: options?.abortSignal\n  //   };\n\n  //   return retry<void>(config);\n  // }\n\n  async close(): Promise<void> {\n    try {\n      this._isClosed = true;\n      await this._sender.close();\n    } catch (err: any) {\n      logger.logError(err, `${this.logPrefix} An error occurred while closing the Sender`);\n      throw err;\n    }\n  }\n}\n\n/**\n * @internal\n */\nexport function isServiceBusMessageBatch(\n  messageBatchOrAnything: unknown,\n): messageBatchOrAnything is ServiceBusMessageBatch {\n  if (messageBatchOrAnything == null) {\n    return false;\n  }\n\n  const possibleBatch = messageBatchOrAnything as ServiceBusMessageBatch;\n\n  return (\n    typeof possibleBatch.tryAddMessage === \"function\" &&\n    typeof possibleBatch.maxSizeInBytes === \"number\" &&\n    typeof possibleBatch.sizeInBytes === \"number\"\n  );\n}\n"]}