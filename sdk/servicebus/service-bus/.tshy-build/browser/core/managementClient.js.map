{"version":3,"file":"managementClient.js","sourceRoot":"","sources":["../../../src/core/managementClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport Long from \"long\";\nimport type {\n  EventContext,\n  ReceiverOptions,\n  SenderOptions,\n  Typed,\n  Message as RheaMessage,\n} from \"rhea-promise\";\nimport {\n  message as RheaMessageUtil,\n  generate_uuid,\n  string_to_uuid,\n  types,\n  ReceiverEvents,\n} from \"rhea-promise\";\nimport type {\n  MessagingError,\n  SendRequestOptions,\n  RetryOptions,\n  AmqpAnnotatedMessage,\n} from \"@azure/core-amqp\";\nimport {\n  ConditionErrorNameMapper,\n  Constants,\n  defaultCancellableLock,\n  RequestResponseLink,\n} from \"@azure/core-amqp\";\nimport type { ConnectionContext } from \"../connectionContext.js\";\nimport type { ServiceBusReceivedMessage, ServiceBusMessage } from \"../serviceBusMessage.js\";\nimport {\n  DispositionType,\n  ServiceBusMessageImpl,\n  toRheaMessage,\n  fromRheaMessage,\n  updateScheduledTime,\n  updateMessageId,\n} from \"../serviceBusMessage.js\";\nimport type { RequestResponseLinkOptions } from \"./linkEntity.js\";\nimport { LinkEntity } from \"./linkEntity.js\";\nimport type { ServiceBusLogger } from \"../log.js\";\nimport { managementClientLogger, receiverLogger, senderLogger } from \"../log.js\";\nimport { toBuffer, waitForSendable } from \"../util/utils.js\";\nimport {\n  InvalidMaxMessageCountError,\n  throwErrorIfConnectionClosed,\n  throwTypeErrorIfParameterIsEmptyString,\n  throwTypeErrorIfParameterMissing,\n  throwTypeErrorIfParameterNotLong,\n  throwTypeErrorIfParameterTypeMismatch,\n} from \"../util/errors.js\";\nimport { max32BitNumber } from \"../util/constants.js\";\nimport { Buffer } from \"buffer\";\nimport type { OperationOptionsBase } from \"./../modelsToBeSharedWithEventHubs.js\";\nimport type { AbortSignalLike } from \"@azure/abort-controller\";\nimport type { ReceiveMode } from \"../models.js\";\nimport { translateServiceBusError } from \"../serviceBusError.js\";\nimport { defaultDataTransformer, tryToJsonDecode } from \"../dataTransformer.js\";\nimport { delay, isDefined, isObjectWithProperties } from \"@azure/core-util\";\nimport type {\n  RuleProperties,\n  SqlRuleAction,\n  SqlRuleFilter,\n} from \"../serializers/ruleResourceSerializer.js\";\nimport type { ListRequestOptions } from \"../serviceBusAtomManagementClient.js\";\n\n/**\n * @internal\n */\nexport interface SendManagementRequestOptions extends SendRequestOptions {\n  /**\n   * The name of the sender or receiver link associated with the managmenet operations.\n   * This is used for service side optimization.\n   */\n  associatedLinkName?: string;\n  /**\n   * Option to disable the client from running JSON.parse() on the message body when receiving the message.\n   * Not applicable if the message was sent with AMQP body type value or sequence. Use this option when you\n   * prefer to work directly with the bytes present in the message body than have the client attempt to parse it.\n   */\n  skipParsingBodyAsJson?: boolean;\n  /**\n   * Whether to skip converting Date type on properties of message annotations\n   * or application properties into numbers when receiving the message. By\n   * default, properties of Date type is converted into UNIX epoch number for\n   * compatibility.\n   */\n  skipConvertingDate?: boolean;\n}\n\n/**\n * Represents the correlation filter expression.\n * A CorrelationRuleFilter holds a set of conditions that are matched against user and system properties\n * of incoming messages from a Subscription.\n */\nexport interface CorrelationRuleFilter {\n  /**\n   * Value to be matched with the `correlationId` property of the incoming message.\n   */\n  correlationId?: string;\n  /**\n   * Value to be matched with the `messageId` property of the incoming message.\n   */\n  messageId?: string;\n  /**\n   * Value to be matched with the `to` property of the incoming message.\n   */\n  to?: string;\n  /**\n   * Value to be matched with the `replyTo` property of the incoming message.\n   */\n  replyTo?: string;\n  /**\n   * Value to be matched with the `subject` property of the incoming message.\n   */\n  subject?: string;\n  /**\n   * Value to be matched with the `sessionId` property of the incoming message.\n   */\n  sessionId?: string;\n  /**\n   * Value to be matched with the `replyToSessionId` property of the incoming message.\n   */\n  replyToSessionId?: string;\n  /**\n   * Value to be matched with the `contentType` property of the incoming message.\n   */\n  contentType?: string;\n  /**\n   * Value to be matched with the user properties of the incoming message.\n   */\n  applicationProperties?: { [key: string]: string | number | boolean | Date };\n}\n\n/**\n * @internal\n */\nconst sqlRuleProperties = [\"sqlExpression\"];\n\nfunction isSqlRuleFilter(obj: unknown): obj is SqlRuleFilter {\n  if (obj) {\n    return sqlRuleProperties.some((validProperty) => isObjectWithProperties(obj, [validProperty]));\n  }\n\n  return false;\n}\n\n/**\n * @internal\n */\nconst correlationProperties = [\n  \"correlationId\",\n  \"messageId\",\n  \"to\",\n  \"replyTo\",\n  \"subject\",\n  \"sessionId\",\n  \"replyToSessionId\",\n  \"contentType\",\n  \"applicationProperties\",\n];\n\nfunction isCorrelationRuleFilter(obj: unknown): obj is CorrelationRuleFilter {\n  if (obj) {\n    return correlationProperties.some((validProperty) =>\n      isObjectWithProperties(obj, [validProperty]),\n    );\n  }\n\n  return false;\n}\n\n/**\n * @internal\n * Options to set when updating the disposition status\n */\nexport interface DispositionStatusOptions extends OperationOptionsBase {\n  /**\n   * A map of Service Bus brokered message properties\n   * to modify.\n   */\n  propertiesToModify?: { [key: string]: any };\n  /**\n   * The deadletter reason. May be set if disposition status\n   * is set to suspended.\n   */\n  deadLetterReason?: string;\n  /**\n   * The deadletter description. May be set if disposition status\n   * is set to suspended.\n   */\n  deadLetterDescription?: string;\n  /**\n   * This should only be provided if `session` is enabled for a Queue or Topic.\n   */\n  sessionId?: string;\n  /**\n   * Retry options.\n   */\n  retryOptions: RetryOptions | undefined;\n}\n\n/**\n * @internal\n * Options passed to the constructor of ManagementClient\n */\nexport interface ManagementClientOptions {\n  address?: string;\n  audience?: string;\n}\n\n/**\n * @internal\n * Describes the ServiceBus Management Client that talks\n * to the $management endpoint over AMQP connection.\n */\nexport class ManagementClient extends LinkEntity<RequestResponseLink> {\n  /**\n   * The reply to Guid for the management client.\n   */\n  replyTo: string = generate_uuid();\n  /**\n   * Provides the sequence number of the last peeked message.\n   */\n  private _lastPeekedSequenceNumber: Long = Long.ZERO;\n  /**\n   * lock token for init operation\n   */\n  private _initLock: string = `initMgmtLink-${generate_uuid()}`;\n  /**\n   * Instantiates the management client.\n   * @param context - The connection context\n   * @param entityPath - The name/path of the entity (queue/topic/subscription name)\n   * for which the management request needs to be made.\n   * @param options - Options to be provided for creating the\n   * \"$management\" client.\n   */\n  constructor(context: ConnectionContext, entityPath: string, options?: ManagementClientOptions) {\n    super(`${entityPath}/$management`, entityPath, context, \"mgmt\", managementClientLogger, {\n      address: options && options.address ? options.address : Constants.management,\n      audience:\n        options && options.audience\n          ? options.audience\n          : `${context.config.endpoint}${entityPath}/$management`,\n    });\n    this._context = context;\n  }\n\n  /**\n   * initialize link with unique this.replyTo address.\n   * @param options -\n   * @returns updated options bag that has adjusted `timeoutInMs` to account for init time\n   */\n  private async initWithUniqueReplyTo(\n    options: SendManagementRequestOptions = {},\n  ): Promise<SendManagementRequestOptions> {\n    const retryTimeoutInMs = options.timeoutInMs ?? Constants.defaultOperationTimeoutInMs;\n    const initOperationStartTime = Date.now();\n    return defaultCancellableLock.acquire(\n      this._initLock,\n      async () => {\n        managementClientLogger.verbose(\n          `${this.logPrefix} lock acquired for initializing replyTo address and link`,\n        );\n        if (!this.isOpen()) {\n          this.replyTo = generate_uuid();\n          managementClientLogger.verbose(\n            `${this.logPrefix} new replyTo address: ${this.replyTo} generated`,\n          );\n        }\n        const { abortSignal } = options;\n        const aborter = new AbortController();\n\n        const abortListener = (): void => {\n          aborter.abort();\n        };\n        abortSignal?.addEventListener(\"abort\", abortListener);\n\n        if (!this.isOpen()) {\n          await Promise.race([\n            this._init(aborter.signal),\n            delay(retryTimeoutInMs, { abortSignal: aborter.signal }).then(\n              function onfulfilled() {\n                throw {\n                  name: \"OperationTimeoutError\",\n                  message:\n                    \"The initialization of management client timed out. Please try again later.\",\n                };\n              },\n              function onrejected(_) {\n                managementClientLogger.verbose(\n                  `The management client initialization has either completed or been cancelled.`,\n                );\n              },\n            ),\n          ]).finally(() => {\n            aborter.abort();\n            abortSignal?.removeEventListener(\"abort\", abortListener);\n          });\n        }\n\n        // time taken by the init operation\n        const timeTakenByInit = Date.now() - initOperationStartTime;\n        return {\n          ...options,\n          // Left over time\n          timeoutInMs: retryTimeoutInMs - timeTakenByInit,\n        };\n      },\n      {\n        abortSignal: options.abortSignal,\n        timeoutInMs: retryTimeoutInMs,\n      },\n    );\n  }\n\n  private async _init(abortSignal?: AbortSignalLike): Promise<void> {\n    throwErrorIfConnectionClosed(this._context);\n    try {\n      const rxopt: ReceiverOptions = {\n        source: { address: this.address },\n        name: this.replyTo,\n        target: { address: this.replyTo },\n        onSessionError: (context: EventContext) => {\n          const sbError = translateServiceBusError(context.session!.error!);\n          managementClientLogger.logError(\n            sbError,\n            `${this.logPrefix} An error occurred on the session for request/response links for $management`,\n          );\n        },\n      };\n      const sropt: SenderOptions = {\n        target: { address: this.address },\n        onError: (context: EventContext) => {\n          const ehError = translateServiceBusError(context.sender!.error!);\n          managementClientLogger.logError(\n            ehError,\n            `${this.logPrefix} An error occurred on the $management sender link`,\n          );\n        },\n      };\n\n      // Even if multiple parallel requests reach here, the initLink secures a lock\n      // to ensure there won't be multiple initializations\n      await this.initLink(\n        {\n          senderOptions: sropt,\n          receiverOptions: rxopt,\n        },\n        abortSignal,\n      );\n    } catch (err: any) {\n      const translatedError = translateServiceBusError(err);\n      managementClientLogger.logError(\n        translatedError,\n        `${this.logPrefix} An error occurred while establishing the $management links`,\n      );\n      throw translatedError;\n    }\n  }\n\n  protected async createRheaLink(\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options: RequestResponseLinkOptions,\n  ): Promise<RequestResponseLink> {\n    const rheaLink = await RequestResponseLink.create(\n      this._context.connection,\n      options.senderOptions,\n      options.receiverOptions,\n    );\n    // Attach listener for the `receiver_error` events to log the errors.\n\n    // \"message\" event listener is added in core-amqp.\n    // \"rhea\" doesn't allow setting only the \"onError\" handler in the options if it is not accompanied by an \"onMessage\" handler.\n    // Hence, not passing onError handler in the receiver options, adding a handler below.\n    rheaLink.receiver.on(ReceiverEvents.receiverError, (context: EventContext) => {\n      const ehError = translateServiceBusError(context.receiver!.error!);\n      managementClientLogger.logError(\n        ehError,\n        `${this.logPrefix} An error occurred on the $management receiver link`,\n      );\n    });\n    return rheaLink;\n  }\n\n  /**\n   * Given array of typed values, returns the element in given index\n   */\n  private _safelyGetTypedValueFromArray(data: Typed[], index: number): any {\n    return Array.isArray(data) && data.length > index && data[index]\n      ? data[index].value\n      : undefined;\n  }\n\n  private _decodeApplicationPropertiesMap(\n    obj: Typed,\n  ): Record<string, string | number | boolean | Date> {\n    if (!types.is_map(obj)) {\n      throw new Error(\"object to decode is not of Map types\");\n    }\n    const array = obj.value as Array<Typed>;\n    const result: Record<string, string | number | boolean | Date> = {};\n    for (let i = 0; i < array.length; i += 2) {\n      const key = array[i].value as string;\n      result[key] = array[i + 1].value as string | number | boolean | Date;\n    }\n\n    return result;\n  }\n\n  private async _makeManagementRequest(\n    request: RheaMessage,\n    internalLogger: ServiceBusLogger,\n    sendRequestOptions: SendManagementRequestOptions = {},\n  ): Promise<RheaMessage> {\n    if (request.message_id === undefined) {\n      request.message_id = generate_uuid();\n    }\n\n    try {\n      const { timeoutInMs } = sendRequestOptions;\n      await waitForSendable(\n        internalLogger,\n        this.logPrefix,\n        this.name,\n        timeoutInMs ?? Constants.defaultOperationTimeoutInMs,\n        this.link?.sender,\n        this.link?.session?.outgoing?.available(),\n      );\n\n      return await this.link!.sendRequest(request, sendRequestOptions);\n    } catch (err: any) {\n      const translatedError = translateServiceBusError(err);\n      internalLogger.logError(\n        translatedError,\n        \"%s An error occurred during send on management request-response link with address '%s'\",\n        this.logPrefix,\n        this.address,\n      );\n      throw translatedError;\n    }\n  }\n\n  /**\n   * Closes the AMQP management session to the ServiceBus namespace for this client,\n   * returning a promise that will be resolved when disconnection is completed.\n   */\n  async close(): Promise<void> {\n    try {\n      // Always clear the timeout, as the isOpen check may report\n      // false without ever having cleared the timeout otherwise.\n\n      // NOTE: management link currently doesn't have a separate concept of \"detaching\" like\n      // the other links do. When we add handling of this (via the onDetached call, like other links)\n      // we can change this back to closeLink(\"permanent\").\n      await this.closeLink();\n      managementClientLogger.verbose(\"Successfully closed the management session.\");\n    } catch (err: any) {\n      managementClientLogger.logError(\n        err,\n        `${this.logPrefix} An error occurred while closing the management session`,\n      );\n      throw err;\n    }\n  }\n\n  /**\n   * Fetches the next batch of active messages. The first call to `peek()` fetches the first\n   * active message for this client. Each subsequent call fetches the subsequent message in the\n   * entity.\n   *\n   * Unlike a `received` message, `peeked` message will not have lock token associated with it,\n   * and hence it cannot be `Completed/Abandoned/Deferred/Deadlettered/Renewed`. This method will\n   * also fetch even Deferred messages (but not Deadlettered message).\n   *\n   * @param messageCount - The number of messages to retrieve. Default value `1`.\n   * @param omitMessageBody - Whether to omit message body when peeking. Default value `false`.\n   */\n  async peek(\n    messageCount: number,\n    omitMessageBody?: boolean,\n    options?: OperationOptionsBase & SendManagementRequestOptions,\n  ): Promise<ServiceBusReceivedMessage[]> {\n    throwErrorIfConnectionClosed(this._context);\n    return this.peekBySequenceNumber(\n      this._lastPeekedSequenceNumber.add(1),\n      messageCount,\n      undefined,\n      omitMessageBody,\n      options,\n    );\n  }\n\n  /**\n   * Fetches the next batch of active messages in the current MessageSession. The first call to\n   * `peek()` fetches the first active message for this client. Each subsequent call fetches the\n   * subsequent message in the entity.\n   *\n   * Unlike a `received` message, `peeked` message will not have lock token associated with it,\n   * and hence it cannot be `Completed/Abandoned/Deferred/Deadlettered/Renewed`.  This method will\n   * also fetch even Deferred messages (but not Deadlettered message).\n   *\n   * @param sessionId - The sessionId from which messages need to be peeked.\n   * @param messageCount - The number of messages to retrieve. Default value `1`.\n   * @param omitMessageBody - Whether to omit message body when peeking Default value `false`.\n   */\n  async peekMessagesBySession(\n    sessionId: string,\n    messageCount: number,\n    omitMessageBody?: boolean,\n    options?: OperationOptionsBase & SendManagementRequestOptions,\n  ): Promise<ServiceBusReceivedMessage[]> {\n    throwErrorIfConnectionClosed(this._context);\n    return this.peekBySequenceNumber(\n      this._lastPeekedSequenceNumber.add(1),\n      messageCount,\n      sessionId,\n      omitMessageBody,\n      options,\n    );\n  }\n\n  /**\n   * Peeks the desired number of messages from the specified sequence number.\n   *\n   * @param fromSequenceNumber - The sequence number from where to read the message.\n   * @param messageCount - The number of messages to retrieve. Default value `1`.\n   * @param sessionId - The sessionId from which messages need to be peeked.\n   * @param omitMessageBody - Whether to omit message body when peeking. Default value `false`.\n   */\n  async peekBySequenceNumber(\n    fromSequenceNumber: Long,\n    maxMessageCount: number,\n    sessionId?: string,\n    omitMessageBody?: boolean,\n    options?: OperationOptionsBase & SendManagementRequestOptions,\n  ): Promise<ServiceBusReceivedMessage[]> {\n    throwErrorIfConnectionClosed(this._context);\n    const connId = this._context.connectionId;\n\n    // Checks for fromSequenceNumber\n    throwTypeErrorIfParameterMissing(connId, \"fromSequenceNumber\", fromSequenceNumber);\n    throwTypeErrorIfParameterNotLong(connId, \"fromSequenceNumber\", fromSequenceNumber);\n\n    // Checks for maxMessageCount\n    throwTypeErrorIfParameterMissing(\n      this._context.connectionId,\n      \"maxMessageCount\",\n      maxMessageCount,\n    );\n    throwTypeErrorIfParameterTypeMismatch(\n      this._context.connectionId,\n      \"maxMessageCount\",\n      maxMessageCount,\n      \"number\",\n    );\n\n    if (isNaN(maxMessageCount) || maxMessageCount < 1) {\n      throw new TypeError(InvalidMaxMessageCountError);\n    }\n\n    const messageList: ServiceBusReceivedMessage[] = [];\n    try {\n      const messageBody: any = {};\n      messageBody[Constants.fromSequenceNumber] = types.wrap_long(\n        Buffer.from(fromSequenceNumber.toBytesBE()),\n      );\n      messageBody[Constants.messageCount] = types.wrap_int(maxMessageCount!);\n      if (isDefined(sessionId)) {\n        messageBody[Constants.sessionIdMapKey] = sessionId;\n      }\n      if (isDefined(omitMessageBody)) {\n        const omitMessageBodyKey = \"omit-message-body\"; // TODO: Service Bus specific. Put it somewhere\n        messageBody[omitMessageBodyKey] = types.wrap_boolean(omitMessageBody);\n      }\n      const updatedOptions = await this.initWithUniqueReplyTo(options);\n      const request: RheaMessage = {\n        body: messageBody,\n        reply_to: this.replyTo,\n        application_properties: {\n          operation: Constants.operations.peekMessage,\n        },\n      };\n      if (updatedOptions?.associatedLinkName) {\n        request.application_properties![Constants.associatedLinkName] =\n          updatedOptions?.associatedLinkName;\n      }\n      request.application_properties![Constants.trackingId] = generate_uuid();\n\n      // TODO: it'd be nice to attribute this peek request to the actual receiver that made it. So have them pass in a\n      // log prefix rather than just falling back to the management links.\n      receiverLogger.verbose(\n        \"%s Peek by sequence number request body: %O.\",\n        this.logPrefix,\n        request.body,\n      );\n\n      const result = await this._makeManagementRequest(request, receiverLogger, updatedOptions);\n      if (result.application_properties!.statusCode !== 204) {\n        const messages = result.body.messages as { message: Buffer }[];\n        for (const msg of messages) {\n          const decodedMessage = RheaMessageUtil.decode(msg.message);\n          const message = fromRheaMessage(decodedMessage as any, {\n            skipParsingBodyAsJson: updatedOptions?.skipParsingBodyAsJson ?? false,\n            skipConvertingDate: updatedOptions?.skipConvertingDate ?? false,\n          });\n          messageList.push(message);\n          this._lastPeekedSequenceNumber = message.sequenceNumber!;\n        }\n      }\n    } catch (err: any) {\n      const error = translateServiceBusError(err) as MessagingError;\n      receiverLogger.logError(\n        error,\n        `${this.logPrefix} An error occurred while sending the request to peek messages to $management endpoint`,\n      );\n      // statusCode == 404 then do not throw\n      if (error.code !== ConditionErrorNameMapper[\"com.microsoft:message-not-found\"]) {\n        throw error;\n      }\n    }\n    return messageList;\n  }\n\n  /**\n   * Renews the lock on the message. The lock will be renewed based on the setting specified on\n   * the queue.\n   *\n   * When a message is received in `PeekLock` mode, the message is locked on the server for this\n   * receiver instance for a duration as specified during the Queue/Subscription creation\n   * (LockDuration). If processing of the message requires longer than this duration, the\n   * lock needs to be renewed. For each renewal, it resets the time the message is locked by the\n   * LockDuration set on the Entity.\n   *\n   * @param lockToken - Lock token of the message\n   * @param options - Options that can be set while sending the request.\n   * @returns New lock token expiry date and time in UTC format.\n   */\n  // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n  async renewLock(lockToken: string, options?: SendManagementRequestOptions): Promise<Date> {\n    throwErrorIfConnectionClosed(this._context);\n    if (!options) options = {};\n    if (options.timeoutInMs == null) options.timeoutInMs = 5000;\n\n    try {\n      const messageBody: any = {};\n\n      messageBody[Constants.lockTokens] = types.wrap_array(\n        [string_to_uuid(lockToken)],\n        0x98,\n        undefined,\n      );\n      const updatedOptions = await this.initWithUniqueReplyTo(options);\n      const request: RheaMessage = {\n        body: messageBody,\n        reply_to: this.replyTo,\n        application_properties: {\n          operation: Constants.operations.renewLock,\n        },\n      };\n      request.application_properties![Constants.trackingId] = generate_uuid();\n      if (updatedOptions.associatedLinkName) {\n        request.application_properties![Constants.associatedLinkName] =\n          updatedOptions.associatedLinkName;\n      }\n      receiverLogger.verbose(\n        \"[%s] Renew message Lock request: %O.\",\n        this._context.connectionId,\n        request,\n      );\n      const result = await this._makeManagementRequest(request, receiverLogger, {\n        abortSignal: updatedOptions?.abortSignal,\n        requestName: \"renewLock\",\n      });\n      const lockedUntilUtc = new Date(result.body.expirations[0]);\n      return lockedUntilUtc;\n    } catch (err: any) {\n      const error = translateServiceBusError(err);\n      receiverLogger.logError(\n        error,\n        `${this.logPrefix} An error occurred while sending the renew lock request to $management endpoint`,\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Schedules an array of messages to appear on Service Bus at a later time.\n   *\n   * @param scheduledEnqueueTimeUtc - The UTC time at which the messages should be enqueued.\n   * @param messages - An array of messages that needs to be scheduled.\n   * @returns The sequence numbers of messages that were scheduled.\n   */\n  async scheduleMessages(\n    scheduledEnqueueTimeUtc: Date,\n    messages: ServiceBusMessage[] | AmqpAnnotatedMessage[],\n    options?: OperationOptionsBase & SendManagementRequestOptions,\n  ): Promise<Long[]> {\n    throwErrorIfConnectionClosed(this._context);\n    if (!messages.length) {\n      return [];\n    }\n    const messageBody: any[] = [];\n    for (let i = 0; i < messages.length; i++) {\n      const item = messages[i];\n\n      try {\n        const rheaMessage = toRheaMessage(item, defaultDataTransformer);\n        updateMessageId(rheaMessage, rheaMessage.message_id || generate_uuid());\n        updateScheduledTime(rheaMessage, scheduledEnqueueTimeUtc);\n\n        const entry: {\n          message: Buffer;\n          [\"message-id\"]: ServiceBusMessage[\"messageId\"];\n          [\"partition-key\"]?: ServiceBusMessage[\"partitionKey\"];\n          [Constants.sessionIdMapKey]?: string | undefined;\n        } = {\n          message: RheaMessageUtil.encode(rheaMessage),\n          \"message-id\": rheaMessage.message_id,\n        };\n\n        if (rheaMessage.group_id) {\n          entry[Constants.sessionIdMapKey] = rheaMessage.group_id;\n        }\n\n        if (rheaMessage.message_annotations?.[Constants.partitionKey]) {\n          entry[\"partition-key\"] = rheaMessage.message_annotations[Constants.partitionKey];\n        }\n\n        // Will be required later for implementing Transactions\n        // if (item.viaPartitionKey) {\n        //   entry[\"via-partition-key\"] = item.viaPartitionKey;\n        // }\n\n        const wrappedEntry = types.wrap_map(entry);\n        messageBody.push(wrappedEntry);\n      } catch (err: any) {\n        const error = translateServiceBusError(err);\n        senderLogger.logError(\n          error,\n          `${this.logPrefix} An error occurred while encoding the item at position ${i} in the messages array`,\n        );\n        throw error;\n      }\n    }\n    const updatedOptions = await this.initWithUniqueReplyTo(options);\n    try {\n      const request: RheaMessage = {\n        body: { messages: messageBody },\n        reply_to: this.replyTo,\n        application_properties: {\n          operation: Constants.operations.scheduleMessage,\n        },\n      };\n      if (updatedOptions?.associatedLinkName) {\n        request.application_properties![Constants.associatedLinkName] =\n          updatedOptions?.associatedLinkName;\n      }\n      request.application_properties![Constants.trackingId] = generate_uuid();\n      senderLogger.verbose(\"%s Schedule messages request body: %O.\", this.logPrefix, request.body);\n      const result = await this._makeManagementRequest(request, senderLogger, updatedOptions);\n      const sequenceNumbers = result.body[Constants.sequenceNumbers];\n      const sequenceNumbersAsLong = [];\n      for (let i = 0; i < sequenceNumbers.length; i++) {\n        if (typeof sequenceNumbers[i] === \"number\") {\n          sequenceNumbersAsLong.push(Long.fromNumber(sequenceNumbers[i]));\n        } else {\n          sequenceNumbersAsLong.push(Long.fromBytesBE(sequenceNumbers[i]));\n        }\n      }\n      return sequenceNumbersAsLong;\n    } catch (err: any) {\n      const error = translateServiceBusError(err);\n      senderLogger.logError(\n        error,\n        `${this.logPrefix} An error occurred while sending the request to schedule messages to $management endpoint`,\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Cancels an array of messages that were scheduled.\n   * @param sequenceNumbers - An Array of sequence numbers of the message to be cancelled.\n   */\n  async cancelScheduledMessages(\n    sequenceNumbers: Long[],\n    options?: OperationOptionsBase & SendManagementRequestOptions,\n  ): Promise<void> {\n    throwErrorIfConnectionClosed(this._context);\n    if (!sequenceNumbers.length) {\n      return;\n    }\n    const messageBody: any = {};\n    messageBody[Constants.sequenceNumbers] = [];\n    for (let i = 0; i < sequenceNumbers.length; i++) {\n      const sequenceNumber = sequenceNumbers[i];\n      try {\n        messageBody[Constants.sequenceNumbers].push(Buffer.from(sequenceNumber.toBytesBE()));\n      } catch (err: any) {\n        const error = translateServiceBusError(err);\n        senderLogger.logError(\n          error,\n          `${this.logPrefix} An error occurred while encoding the item at position ${i} in the sequenceNumbers array`,\n        );\n        throw error;\n      }\n    }\n\n    try {\n      messageBody[Constants.sequenceNumbers] = types.wrap_array(\n        messageBody[Constants.sequenceNumbers],\n        0x81,\n        undefined,\n      );\n      const updatedOptions = await this.initWithUniqueReplyTo(options);\n      const request: RheaMessage = {\n        body: messageBody,\n        reply_to: this.replyTo,\n        application_properties: {\n          operation: Constants.operations.cancelScheduledMessage,\n        },\n      };\n\n      if (updatedOptions?.associatedLinkName) {\n        request.application_properties![Constants.associatedLinkName] =\n          updatedOptions?.associatedLinkName;\n      }\n      request.application_properties![Constants.trackingId] = generate_uuid();\n      senderLogger.verbose(\n        \"%s Cancel scheduled messages request body: %O.\",\n        this.logPrefix,\n        request.body,\n      );\n\n      await this._makeManagementRequest(request, senderLogger, updatedOptions);\n      return;\n    } catch (err: any) {\n      const error = translateServiceBusError(err);\n      senderLogger.logError(\n        error,\n        `${this.logPrefix} An error occurred while sending the request to cancel the scheduled message to $management endpoint`,\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Receives a list of deferred messages identified by `sequenceNumbers`.\n   *\n   * @param sequenceNumbers - A list containing the sequence numbers to receive.\n   * @param receiveMode - The mode in which the receiver was created.\n   * @returns a list of messages identified by the given sequenceNumbers or an empty list if no messages are found.\n   * - Throws an error if the messages have not been deferred.\n   */\n  async receiveDeferredMessages(\n    sequenceNumbers: Long[],\n    receiveMode: ReceiveMode,\n    sessionId?: string,\n    options?: OperationOptionsBase & SendManagementRequestOptions,\n  ): Promise<ServiceBusMessageImpl[]> {\n    throwErrorIfConnectionClosed(this._context);\n\n    if (!sequenceNumbers.length) {\n      return [];\n    }\n\n    const messageList: ServiceBusMessageImpl[] = [];\n    const messageBody: any = {};\n    messageBody[Constants.sequenceNumbers] = [];\n    for (let i = 0; i < sequenceNumbers.length; i++) {\n      const sequenceNumber = sequenceNumbers[i];\n      try {\n        messageBody[Constants.sequenceNumbers].push(Buffer.from(sequenceNumber.toBytesBE()));\n      } catch (err: any) {\n        const error = translateServiceBusError(err);\n        receiverLogger.logError(\n          error,\n          `${this.logPrefix} An error occurred while encoding the item at position ${i} in the sequenceNumbers array`,\n        );\n        throw error;\n      }\n    }\n\n    try {\n      messageBody[Constants.sequenceNumbers] = types.wrap_array(\n        messageBody[Constants.sequenceNumbers],\n        0x81,\n        undefined,\n      );\n      const receiverSettleMode: number = receiveMode === \"receiveAndDelete\" ? 0 : 1;\n      messageBody[Constants.receiverSettleMode] = types.wrap_uint(receiverSettleMode);\n      if (sessionId != null) {\n        messageBody[Constants.sessionIdMapKey] = sessionId;\n      }\n      const updatedOptions = await this.initWithUniqueReplyTo(options);\n      const request: RheaMessage = {\n        body: messageBody,\n        reply_to: this.replyTo,\n        application_properties: {\n          operation: Constants.operations.receiveBySequenceNumber,\n        },\n      };\n      if (updatedOptions?.associatedLinkName) {\n        request.application_properties![Constants.associatedLinkName] =\n          updatedOptions?.associatedLinkName;\n      }\n      request.application_properties![Constants.trackingId] = generate_uuid();\n      receiverLogger.verbose(\n        \"%s Receive deferred messages request body: %O.\",\n        this.logPrefix,\n        request.body,\n      );\n\n      const result = await this._makeManagementRequest(request, receiverLogger, updatedOptions);\n      const messages = result.body.messages as {\n        message: Buffer;\n        \"lock-token\": Buffer;\n      }[];\n      for (const msg of messages) {\n        const decodedMessage = RheaMessageUtil.decode(msg.message);\n        const message = new ServiceBusMessageImpl(\n          decodedMessage as any,\n          { tag: msg[\"lock-token\"] } as any,\n          false,\n          receiveMode,\n          updatedOptions?.skipParsingBodyAsJson ?? false,\n          false,\n        );\n        messageList.push(message);\n      }\n      return messageList;\n    } catch (err: any) {\n      const error = translateServiceBusError(err);\n      receiverLogger.logError(\n        error,\n        `${this.logPrefix} An error occurred while sending the request to receive deferred messages to $management endpoint`,\n      );\n      throw error;\n    }\n  }\n\n  private async _deleteMessages(\n    messageCount: number,\n    enqueueTimeUtcOlderThan: Date,\n    sessionId?: string,\n    options?: OperationOptionsBase & SendManagementRequestOptions,\n  ): Promise<number> {\n    try {\n      const messageBody: any = {};\n      messageBody[Constants.messageCount] = types.wrap_int(messageCount);\n      messageBody[Constants.enqueuedTimeUtc] = enqueueTimeUtcOlderThan;\n      if (isDefined(sessionId)) {\n        messageBody[Constants.sessionIdMapKey] = sessionId;\n      }\n\n      const updatedOptions = await this.initWithUniqueReplyTo(options);\n      const request: RheaMessage = {\n        body: messageBody,\n        reply_to: this.replyTo,\n        application_properties: {\n          operation: Constants.operations.deleteMessages,\n        },\n      };\n      if (updatedOptions?.associatedLinkName) {\n        request.application_properties![Constants.associatedLinkName] =\n          updatedOptions?.associatedLinkName;\n      }\n      request.application_properties![Constants.trackingId] = generate_uuid();\n      receiverLogger.verbose(\"%s delete messages request body: %O.\", this.logPrefix, request.body);\n\n      const result = await this._makeManagementRequest(request, receiverLogger, updatedOptions);\n      if (result.application_properties!.statusCode === 200) {\n        return result.body[\"message-count\"];\n      } else if (\n        result.application_properties!.statusCode === 204 &&\n        result.application_properties!.errorCondition === \"com.microsoft:message-not-found\"\n      ) {\n        return 0;\n      } else {\n        throw new Error(\n          `Unexpected response with status code of ${result.application_properties!.statusCode}`,\n        );\n      }\n    } catch (err: any) {\n      const error = translateServiceBusError(err) as MessagingError;\n      receiverLogger.logError(\n        error,\n        `${this.logPrefix} An error occurred while sending the request to delete messages to $management endpoint`,\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Delete messages. If no option is specified, all messages will be deleted.\n   *\n   * @param messageCount - number of messages to delete in a batch.\n   * @param enqueueTimeUtcOlderThan - Delete messages whose enqueue time (UTC) are older than this.\n   * @returns number of messages deleted.\n   */\n  async deleteMessages(\n    messageCount: number,\n    enqueueTimeUtcOlderThan?: Date,\n    sessionId?: string,\n    options: OperationOptionsBase & SendManagementRequestOptions = {},\n  ): Promise<number> {\n    throwTypeErrorIfParameterMissing(this._context.connectionId, \"messageCount\", messageCount);\n    throwTypeErrorIfParameterTypeMismatch(\n      this._context.connectionId,\n      \"messageCount\",\n      messageCount,\n      \"number\",\n    );\n\n    if (isNaN(messageCount) || messageCount < 1) {\n      throw new TypeError(\"'messageCount' must be a number greater than 0.\");\n    }\n\n    enqueueTimeUtcOlderThan ??= new Date();\n\n    return this._deleteMessages(messageCount, enqueueTimeUtcOlderThan, sessionId, options);\n  }\n\n  /**\n   * Updates the disposition status of deferred messages.\n   *\n   * @param lockTokens - Message lock tokens to update disposition status.\n   * @param dispositionStatus - The disposition status to be set\n   * @param options - Optional parameters that can be provided while updating the disposition status.\n   */\n  async updateDispositionStatus(\n    lockToken: string,\n    dispositionType: DispositionType,\n    // TODO: mgmt link retry<> will come in the next PR.\n    options?: Omit<DispositionStatusOptions, \"retryOptions\"> & SendManagementRequestOptions,\n  ): Promise<void> {\n    throwErrorIfConnectionClosed(this._context);\n    if (!options) options = {};\n    try {\n      let dispositionStatus: \"completed\" | \"defered\" | \"suspended\" | \"abandoned\";\n\n      if (dispositionType === DispositionType.abandon) dispositionStatus = \"abandoned\";\n      else if (dispositionType === DispositionType.complete) dispositionStatus = \"completed\";\n      else if (dispositionType === DispositionType.defer) dispositionStatus = \"defered\";\n      else if (dispositionType === DispositionType.deadletter) dispositionStatus = \"suspended\";\n      else throw new Error(`Provided \"dispositionType\" - ${dispositionType} is invalid`);\n\n      const messageBody: any = {};\n      const lockTokenBuffer: Buffer[] = [];\n      lockTokenBuffer.push(string_to_uuid(lockToken));\n      messageBody[Constants.lockTokens] = types.wrap_array(lockTokenBuffer, 0x98, undefined);\n      messageBody[Constants.dispositionStatus] = dispositionStatus;\n      if (options.deadLetterDescription != null) {\n        messageBody[Constants.deadLetterDescription] = options.deadLetterDescription;\n      }\n      if (options.deadLetterReason != null) {\n        messageBody[Constants.deadLetterReason] = options.deadLetterReason;\n      }\n      if (options.propertiesToModify != null) {\n        messageBody[Constants.propertiesToModify] = options.propertiesToModify;\n      }\n      if (options.sessionId != null) {\n        messageBody[Constants.sessionIdMapKey] = options.sessionId;\n      }\n      const updatedOptions = await this.initWithUniqueReplyTo(options);\n      const request: RheaMessage = {\n        body: messageBody,\n        reply_to: this.replyTo,\n        application_properties: {\n          operation: Constants.operations.updateDisposition,\n        },\n      };\n      if (updatedOptions.associatedLinkName) {\n        request.application_properties![Constants.associatedLinkName] =\n          updatedOptions.associatedLinkName;\n      }\n      request.application_properties![Constants.trackingId] = generate_uuid();\n      receiverLogger.verbose(\n        \"%s Update disposition status request body: %O.\",\n        this.logPrefix,\n        request.body,\n      );\n      await this._makeManagementRequest(request, receiverLogger, updatedOptions);\n    } catch (err: any) {\n      const error = translateServiceBusError(err);\n      receiverLogger.logError(\n        error,\n        `${this.logPrefix} An error occurred while sending the request to update disposition status to $management endpoint`,\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Renews the lock for the specified session.\n   *\n   * @param sessionId - Id of the session for which the lock needs to be renewed\n   * @param options - Options that can be set while sending the request.\n   * @returns New lock token expiry date and time in UTC format.\n   */\n  async renewSessionLock(\n    sessionId: string,\n    options?: OperationOptionsBase & SendManagementRequestOptions,\n  ): Promise<Date> {\n    throwErrorIfConnectionClosed(this._context);\n    try {\n      const messageBody: any = {};\n      messageBody[Constants.sessionIdMapKey] = sessionId;\n      const updatedOptions = await this.initWithUniqueReplyTo(options);\n      const request: RheaMessage = {\n        body: messageBody,\n        reply_to: this.replyTo,\n        application_properties: {\n          operation: Constants.operations.renewSessionLock,\n        },\n      };\n      request.application_properties![Constants.trackingId] = generate_uuid();\n      if (updatedOptions?.associatedLinkName) {\n        request.application_properties![Constants.associatedLinkName] =\n          updatedOptions?.associatedLinkName;\n      }\n      receiverLogger.verbose(\n        \"%s Renew Session Lock request body: %O.\",\n        this.logPrefix,\n        request.body,\n      );\n      const result = await this._makeManagementRequest(request, receiverLogger, updatedOptions);\n      const lockedUntilUtc = new Date(result.body.expiration);\n      receiverLogger.verbose(\n        \"%s Lock for session '%s' will expire at %s.\",\n        this.logPrefix,\n        sessionId,\n        lockedUntilUtc.toString(),\n      );\n      return lockedUntilUtc;\n    } catch (err: any) {\n      const error = translateServiceBusError(err);\n      receiverLogger.logError(\n        error,\n        `${this.logPrefix} An error occurred while sending the renew lock request to $management endpoint`,\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Sets the state of the specified session.\n   *\n   * @param sessionId - The session for which the state needs to be set\n   * @param state - The state that needs to be set.\n   */\n  async setSessionState(\n    sessionId: string,\n    state: unknown,\n    options?: OperationOptionsBase & SendManagementRequestOptions,\n  ): Promise<void> {\n    throwErrorIfConnectionClosed(this._context);\n\n    try {\n      const messageBody: any = {};\n      messageBody[Constants.sessionIdMapKey] = sessionId;\n      messageBody[\"session-state\"] = toBuffer(state);\n      const updatedOptions = await this.initWithUniqueReplyTo(options);\n      const request: RheaMessage = {\n        body: messageBody,\n        reply_to: this.replyTo,\n        application_properties: {\n          operation: Constants.operations.setSessionState,\n        },\n      };\n      if (updatedOptions?.associatedLinkName) {\n        request.application_properties![Constants.associatedLinkName] =\n          updatedOptions?.associatedLinkName;\n      }\n      request.application_properties![Constants.trackingId] = generate_uuid();\n      receiverLogger.verbose(\n        \"%s Set Session state request body: %O.\",\n        this.logPrefix,\n        request.body,\n      );\n      await this._makeManagementRequest(request, receiverLogger, updatedOptions);\n    } catch (err: any) {\n      const error = translateServiceBusError(err);\n      receiverLogger.logError(\n        error,\n        `${this.logPrefix} An error occurred while sending the renew lock request to $management endpoint`,\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Gets the state of the specified session.\n   *\n   * @param sessionId - The session for which the state needs to be retrieved.\n   * @returns The state of that session\n   */\n  async getSessionState(\n    sessionId: string,\n    options?: OperationOptionsBase & SendManagementRequestOptions,\n  ): Promise<any> {\n    throwErrorIfConnectionClosed(this._context);\n    try {\n      const messageBody: any = {};\n      messageBody[Constants.sessionIdMapKey] = sessionId;\n      const updatedOptions = await this.initWithUniqueReplyTo(options);\n      const request: RheaMessage = {\n        body: messageBody,\n        reply_to: this.replyTo,\n        application_properties: {\n          operation: Constants.operations.getSessionState,\n        },\n      };\n      if (updatedOptions?.associatedLinkName) {\n        request.application_properties![Constants.associatedLinkName] =\n          updatedOptions?.associatedLinkName;\n      }\n      request.application_properties![Constants.trackingId] = generate_uuid();\n      receiverLogger.verbose(\n        \"%s Get session state request body: %O.\",\n        this.logPrefix,\n        request.body,\n      );\n      const result = await this._makeManagementRequest(request, receiverLogger, updatedOptions);\n      return result.body[\"session-state\"]\n        ? tryToJsonDecode(result.body[\"session-state\"])\n        : result.body[\"session-state\"];\n    } catch (err: any) {\n      const error = translateServiceBusError(err);\n      receiverLogger.logError(\n        error,\n        `${this.logPrefix} An error occurred while sending the renew lock request to $management endpoint`,\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Lists the sessions on the ServiceBus Queue/Topic.\n   * @param lastUpdateTime - Filter to include only sessions updated after a given time.\n   * @param skip - The number of sessions to skip\n   * @param top - Maximum numer of sessions.\n   * @returns A list of session ids.\n   */\n  async listMessageSessions(\n    skip: number,\n    top: number,\n    lastUpdatedTime?: Date,\n    options?: OperationOptionsBase & SendManagementRequestOptions,\n  ): Promise<string[]> {\n    throwErrorIfConnectionClosed(this._context);\n    const defaultLastUpdatedTimeForListingSessions: number = 259200000; // 3 * 24 * 3600 * 1000\n    if (typeof skip !== \"number\") {\n      throw new Error(\"'skip' is a required parameter and must be of type 'number'.\");\n    }\n    if (typeof top !== \"number\") {\n      throw new Error(\"'top' is a required parameter and must be of type 'number'.\");\n    }\n    if (lastUpdatedTime && !(lastUpdatedTime instanceof Date)) {\n      throw new Error(\"'lastUpdatedTime' must be of type 'Date'.\");\n    }\n    if (!lastUpdatedTime) {\n      lastUpdatedTime = new Date(Date.now() - defaultLastUpdatedTimeForListingSessions);\n    }\n    try {\n      const messageBody: any = {};\n      messageBody[\"last-updated-time\"] = lastUpdatedTime;\n      messageBody[\"skip\"] = types.wrap_int(skip);\n      messageBody[\"top\"] = types.wrap_int(top);\n      const updatedOptions = await this.initWithUniqueReplyTo(options);\n      const request: RheaMessage = {\n        body: messageBody,\n        reply_to: this.replyTo,\n        application_properties: {\n          operation: Constants.operations.enumerateSessions,\n        },\n      };\n      request.application_properties![Constants.trackingId] = generate_uuid();\n      managementClientLogger.verbose(\n        \"%s List sessions request body: %O.\",\n        this.logPrefix,\n        request.body,\n      );\n      const response = await this._makeManagementRequest(\n        request,\n        managementClientLogger,\n        updatedOptions,\n      );\n\n      return (response && response.body && response.body[\"sessions-ids\"]) || [];\n    } catch (err: any) {\n      const error = translateServiceBusError(err);\n      managementClientLogger.logError(\n        error,\n        `${this.logPrefix} An error occurred while sending the renew lock request to $management endpoint`,\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Get all the rules on the Subscription.\n   * @returns A list of rules.\n   */\n  async getRules(\n    options?: ListRequestOptions & OperationOptionsBase & SendManagementRequestOptions,\n  ): Promise<RuleProperties[]> {\n    throwErrorIfConnectionClosed(this._context);\n    try {\n      const updatedOptions = (await this.initWithUniqueReplyTo(options)) as ListRequestOptions &\n        OperationOptionsBase &\n        SendManagementRequestOptions;\n      const request: RheaMessage = {\n        body: {\n          top: updatedOptions?.maxCount\n            ? types.wrap_int(updatedOptions.maxCount)\n            : types.wrap_int(max32BitNumber),\n          skip: updatedOptions?.skip ? types.wrap_int(updatedOptions.skip) : types.wrap_int(0),\n        },\n        reply_to: this.replyTo,\n        application_properties: {\n          operation: Constants.operations.enumerateRules,\n        },\n      };\n      request.application_properties![Constants.trackingId] = generate_uuid();\n\n      managementClientLogger.verbose(\n        \"%s Get rules request body: %O.\",\n        this.logPrefix,\n        request.body,\n      );\n      const response = await this._makeManagementRequest(\n        request,\n        managementClientLogger,\n        updatedOptions,\n      );\n      if (\n        response.application_properties!.statusCode === 204 ||\n        !response.body ||\n        !Array.isArray(response.body.rules)\n      ) {\n        return [];\n      }\n\n      // Reference: https://learn.microsoft.com/azure/service-bus-messaging/service-bus-amqp-request-response#response-11\n      const result: { \"rule-description\": Typed }[] = response.body.rules || [];\n      const rules: RuleProperties[] = [];\n      result.forEach((x) => {\n        const ruleDescriptor = x[\"rule-description\"];\n        let filter: SqlRuleFilter | CorrelationRuleFilter;\n\n        // We use the first three elements of the `ruleDescriptor.value` to get filter, action, name\n        if (\n          !ruleDescriptor ||\n          !ruleDescriptor.descriptor ||\n          ruleDescriptor.descriptor.value !== Constants.descriptorCodes.ruleDescriptionList ||\n          !Array.isArray(ruleDescriptor.value) ||\n          ruleDescriptor.value.length < 3\n        ) {\n          return;\n        }\n\n        const filtersRawData: Typed = ruleDescriptor.value[0];\n        const actionsRawData: Typed = ruleDescriptor.value[1];\n        let sqlRuleAction: SqlRuleAction;\n        if (\n          actionsRawData.descriptor.value === Constants.descriptorCodes.sqlRuleActionList &&\n          Array.isArray(actionsRawData.value) &&\n          actionsRawData.value.length\n        ) {\n          sqlRuleAction = {\n            sqlExpression: this._safelyGetTypedValueFromArray(actionsRawData.value, 0),\n          };\n        } else {\n          sqlRuleAction = {};\n        }\n\n        switch (filtersRawData.descriptor.value) {\n          case Constants.descriptorCodes.trueFilterList:\n            filter = {\n              sqlExpression: \"1=1\",\n            };\n            break;\n          case Constants.descriptorCodes.falseFilterList:\n            filter = {\n              sqlExpression: \"1=0\",\n            };\n            break;\n          case Constants.descriptorCodes.sqlFilterList:\n            filter = {\n              sqlExpression: this._safelyGetTypedValueFromArray(filtersRawData.value, 0),\n            };\n            break;\n          case Constants.descriptorCodes.correlationFilterList:\n            filter = {\n              correlationId: this._safelyGetTypedValueFromArray(filtersRawData.value, 0),\n              messageId: this._safelyGetTypedValueFromArray(filtersRawData.value, 1),\n              to: this._safelyGetTypedValueFromArray(filtersRawData.value, 2),\n              replyTo: this._safelyGetTypedValueFromArray(filtersRawData.value, 3),\n              subject: this._safelyGetTypedValueFromArray(filtersRawData.value, 4),\n              sessionId: this._safelyGetTypedValueFromArray(filtersRawData.value, 5),\n              replyToSessionId: this._safelyGetTypedValueFromArray(filtersRawData.value, 6),\n              contentType: this._safelyGetTypedValueFromArray(filtersRawData.value, 7),\n              applicationProperties:\n                Array.isArray(filtersRawData.value) &&\n                filtersRawData.value.length > 8 &&\n                filtersRawData.value[8]\n                  ? this._decodeApplicationPropertiesMap(filtersRawData.value[8])\n                  : undefined,\n            };\n            break;\n          default:\n            throw new Error(\n              `${this.logPrefix} Found unexpected descriptor code for the filter: ${filtersRawData.descriptor.value}`,\n            );\n        }\n\n        const rule: RuleProperties = {\n          name: ruleDescriptor.value[2].value,\n          filter,\n          action: sqlRuleAction,\n        };\n        rules.push(rule);\n      });\n\n      return rules;\n    } catch (err: any) {\n      const error = translateServiceBusError(err);\n      managementClientLogger.logError(\n        error,\n        `${this.logPrefix} An error occurred while sending the get rules request to $management endpoint`,\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Removes the rule on the Subscription identified by the given rule name.\n   */\n  async removeRule(\n    ruleName: string,\n    options?: OperationOptionsBase & SendManagementRequestOptions,\n  ): Promise<void> {\n    throwErrorIfConnectionClosed(this._context);\n    throwTypeErrorIfParameterMissing(this._context.connectionId, \"ruleName\", ruleName);\n    ruleName = String(ruleName);\n    throwTypeErrorIfParameterIsEmptyString(this._context.connectionId, \"ruleName\", ruleName);\n\n    try {\n      const updatedOptions = await this.initWithUniqueReplyTo(options);\n      const request: RheaMessage = {\n        body: {\n          \"rule-name\": types.wrap_string(ruleName),\n        },\n        reply_to: this.replyTo,\n        application_properties: {\n          operation: Constants.operations.removeRule,\n        },\n      };\n      request.application_properties![Constants.trackingId] = generate_uuid();\n\n      managementClientLogger.verbose(\n        \"%s Remove Rule request body: %O.\",\n        this.logPrefix,\n        request.body,\n      );\n      await this._makeManagementRequest(request, managementClientLogger, updatedOptions);\n    } catch (err: any) {\n      const error = translateServiceBusError(err);\n      managementClientLogger.logError(\n        error,\n        `${this.logPrefix} An error occurred while sending the remove rule request to $management endpoint`,\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Adds a rule on the subscription as defined by the given rule name, filter and action\n   * @param ruleName - Name of the rule\n   * @param filter - A Boolean, SQL expression or a Correlation filter\n   * @param sqlRuleActionExpression - Action to perform if the message satisfies the filtering expression\n   */\n  async addRule(\n    ruleName: string,\n    filter: SqlRuleFilter | CorrelationRuleFilter,\n    sqlRuleActionExpression?: string,\n    options?: OperationOptionsBase & SendManagementRequestOptions,\n  ): Promise<void> {\n    throwErrorIfConnectionClosed(this._context);\n\n    throwTypeErrorIfParameterMissing(this._context.connectionId, \"ruleName\", ruleName);\n    ruleName = String(ruleName);\n    throwTypeErrorIfParameterIsEmptyString(this._context.connectionId, \"ruleName\", ruleName);\n\n    throwTypeErrorIfParameterMissing(this._context.connectionId, \"filter\", filter);\n    if (!isSqlRuleFilter(filter) && !isCorrelationRuleFilter(filter)) {\n      throw new TypeError(\n        `The parameter \"filter\" should implement either the SqlRuleFilter or the CorrelationRuleFilter interface.`,\n      );\n    }\n\n    try {\n      const ruleDescription: any = {};\n      if (isSqlRuleFilter(filter)) {\n        ruleDescription[\"sql-filter\"] = {\n          expression: filter.sqlExpression,\n        };\n      } else {\n        ruleDescription[\"correlation-filter\"] = {\n          \"correlation-id\": filter.correlationId,\n          \"message-id\": filter.messageId,\n          to: filter.to,\n          \"reply-to\": filter.replyTo,\n          label: filter.subject,\n          \"session-id\": filter.sessionId,\n          \"reply-to-session-id\": filter.replyToSessionId,\n          \"content-type\": filter.contentType,\n          properties: filter.applicationProperties,\n        };\n      }\n\n      if (sqlRuleActionExpression !== undefined) {\n        ruleDescription[\"sql-rule-action\"] = {\n          expression: String(sqlRuleActionExpression),\n        };\n      }\n      const updatedOptions = await this.initWithUniqueReplyTo(options);\n      const request: RheaMessage = {\n        body: {\n          \"rule-name\": types.wrap_string(ruleName),\n          \"rule-description\": types.wrap_map(ruleDescription),\n        },\n        reply_to: this.replyTo,\n        application_properties: {\n          operation: Constants.operations.addRule,\n        },\n      };\n      request.application_properties![Constants.trackingId] = generate_uuid();\n\n      managementClientLogger.verbose(\"%s Add Rule request body: %O.\", this.logPrefix, request.body);\n      await this._makeManagementRequest(request, managementClientLogger, updatedOptions);\n    } catch (err: any) {\n      const error = translateServiceBusError(err);\n      managementClientLogger.logError(\n        error,\n        `${this.logPrefix} An error occurred while sending the Add rule request to $management endpoint`,\n      );\n      throw error;\n    }\n  }\n\n  protected removeLinkFromContext(): void {\n    delete this._context.managementClients[this.name];\n  }\n}\n\n/**\n * Converts an AmqpAnnotatedMessage or ServiceBusMessage into a properly formatted\n * message for sending to the mgmt link for scheduling.\n *\n * @internal\n * @hidden\n */\nexport function toScheduleableMessage(\n  item: ServiceBusMessage | AmqpAnnotatedMessage,\n  scheduledEnqueueTimeUtc: Date,\n): Record<string, unknown> {\n  const rheaMessage = toRheaMessage(item, defaultDataTransformer);\n  updateMessageId(rheaMessage, rheaMessage.message_id || generate_uuid());\n  updateScheduledTime(rheaMessage, scheduledEnqueueTimeUtc);\n\n  const entry: Record<string, unknown> = {\n    message: RheaMessageUtil.encode(rheaMessage),\n    \"message-id\": rheaMessage.message_id,\n  };\n\n  rheaMessage.message_annotations = {\n    ...rheaMessage.message_annotations,\n    [Constants.scheduledEnqueueTime]: scheduledEnqueueTimeUtc,\n  };\n\n  if (rheaMessage.group_id) {\n    entry[Constants.sessionIdMapKey] = rheaMessage.group_id;\n  }\n\n  const partitionKey =\n    rheaMessage.message_annotations && rheaMessage.message_annotations[Constants.partitionKey];\n\n  if (partitionKey) {\n    entry[\"partition-key\"] = partitionKey;\n  }\n  return entry;\n}\n"]}