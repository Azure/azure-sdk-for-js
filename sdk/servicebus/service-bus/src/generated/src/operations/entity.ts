/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ServiceBusManagementClientInternal } from "../serviceBusManagementClientInternal";
import {
  EntityGetTopicOptionalParams,
  EntityGetTopicResponse,
  CreateTopicBody,
  EntityPutTopicOptionalParams,
  EntityPutTopicResponse,
  EntityDeleteTopicResponse,
  EntityGetQueueOptionalParams,
  EntityGetQueueResponse,
  CreateQueueBody,
  EntityPutQueueOptionalParams,
  EntityPutQueueResponse,
  EntityDeleteQueueResponse
} from "../models";

/**
 * Class representing a Entity.
 */
export class Entity {
  private readonly client: ServiceBusManagementClientInternal;

  /**
   * Initialize a new instance of the class Entity class.
   * @param client Reference to the service client
   */
  constructor(client: ServiceBusManagementClientInternal) {
    this.client = client;
  }

  /**
   * Get the details about the Queue or Topic with the given topicName.
   * @param topicName The name of the queue or topic relative to the Service Bus namespace.
   * @param options The options parameters.
   */
  getTopic(
    topicName: string,
    options?: EntityGetTopicOptionalParams
  ): Promise<EntityGetTopicResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { topicName, options: operationOptions },
      getTopicOperationSpec
    ) as Promise<EntityGetTopicResponse>;
  }

  /**
   * Create or update a topic at the provided topicName
   * @param topicName The name of the queue or topic relative to the Service Bus namespace.
   * @param requestBody Parameters required to make or edit a topic.
   * @param options The options parameters.
   */
  putTopic(
    topicName: string,
    requestBody: CreateTopicBody,
    options?: EntityPutTopicOptionalParams
  ): Promise<EntityPutTopicResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { topicName, requestBody, options: operationOptions },
      putTopicOperationSpec
    ) as Promise<EntityPutTopicResponse>;
  }

  /**
   * Delete the Topic with the given topicName.
   * @param topicName The name of the queue or topic relative to the Service Bus namespace.
   * @param options The options parameters.
   */
  deleteTopic(
    topicName: string,
    options?: coreHttp.OperationOptions
  ): Promise<EntityDeleteTopicResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { topicName, options: operationOptions },
      deleteTopicOperationSpec
    ) as Promise<EntityDeleteTopicResponse>;
  }

  /**
   * Get the details about the Queue with the given queueName.
   * @param queueName The name of the queue or topic relative to the Service Bus namespace.
   * @param options The options parameters.
   */
  getQueue(
    queueName: string,
    options?: EntityGetQueueOptionalParams
  ): Promise<EntityGetQueueResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { queueName, options: operationOptions },
      getQueueOperationSpec
    ) as Promise<EntityGetQueueResponse>;
  }

  /**
   * Create or update a queue at the provided queueName
   * @param queueName The name of the queue or topic relative to the Service Bus namespace.
   * @param requestBody Parameters required to make or edit a queue.
   * @param options The options parameters.
   */
  putQueue(
    queueName: string,
    requestBody: CreateQueueBody,
    options?: EntityPutQueueOptionalParams
  ): Promise<EntityPutQueueResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { queueName, requestBody, options: operationOptions },
      putQueueOperationSpec
    ) as Promise<EntityPutQueueResponse>;
  }

  /**
   * Delete the Queue with the given queueName.
   * @param queueName The name of the queue or topic relative to the Service Bus namespace.
   * @param options The options parameters.
   */
  deleteQueue(
    queueName: string,
    options?: coreHttp.OperationOptions
  ): Promise<EntityDeleteQueueResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { queueName, options: operationOptions },
      deleteQueueOperationSpec
    ) as Promise<EntityDeleteQueueResponse>;
  }
}
// Operation Specifications

const xmlSerializer = new coreHttp.Serializer(Mappers, /* isXml */ true);

const getTopicOperationSpec: coreHttp.OperationSpec = {
  path: "/{topicName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CreateTopicBody
    },
    default: {
      bodyMapper: Mappers.ServiceBusManagementError,
      headersMapper: Mappers.EntityGetTopicHeaders
    }
  },
  queryParameters: [Parameters.enrich, Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.topicName],
  isXML: true,
  serializer: xmlSerializer
};
const putTopicOperationSpec: coreHttp.OperationSpec = {
  path: "/{topicName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    201: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    default: {
      bodyMapper: Mappers.ServiceBusManagementError,
      headersMapper: Mappers.EntityPutTopicHeaders
    }
  },
  requestBody: Parameters.requestBody,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.topicName],
  headerParameters: [Parameters.contentType, Parameters.ifMatch],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "xml",
  serializer: xmlSerializer
};
const deleteTopicOperationSpec: coreHttp.OperationSpec = {
  path: "/{topicName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.CreateTopicBody
    },
    default: {
      bodyMapper: Mappers.ServiceBusManagementError,
      headersMapper: Mappers.EntityDeleteTopicHeaders
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.topicName],
  isXML: true,
  serializer: xmlSerializer
};
const getQueueOperationSpec: coreHttp.OperationSpec = {
  path: "/{queueName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CreateQueueBody
    },
    default: {
      bodyMapper: Mappers.ServiceBusManagementError,
      headersMapper: Mappers.EntityGetQueueHeaders
    }
  },
  queryParameters: [Parameters.enrich, Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.queueName],
  isXML: true,
  serializer: xmlSerializer
};
const putQueueOperationSpec: coreHttp.OperationSpec = {
  path: "/{queueName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    201: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    default: {
      bodyMapper: Mappers.ServiceBusManagementError,
      headersMapper: Mappers.EntityPutQueueHeaders
    }
  },
  requestBody: Parameters.requestBody1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.queueName],
  headerParameters: [Parameters.contentType, Parameters.ifMatch],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "xml",
  serializer: xmlSerializer
};
const deleteQueueOperationSpec: coreHttp.OperationSpec = {
  path: "/{queueName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.CreateQueueBody
    },
    default: {
      bodyMapper: Mappers.ServiceBusManagementError,
      headersMapper: Mappers.EntityDeleteQueueHeaders
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.queueName],
  isXML: true,
  serializer: xmlSerializer
};
