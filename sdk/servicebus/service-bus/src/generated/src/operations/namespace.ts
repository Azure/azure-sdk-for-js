/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ServiceBusManagementClientInternal } from "../serviceBusManagementClientInternal";
import { NamespaceGetResponse } from "../models";

/**
 * Class representing a Namespace.
 */
export class Namespace {
  private readonly client: ServiceBusManagementClientInternal;

  /**
   * Initialize a new instance of the class Namespace class.
   * @param client Reference to the service client
   */
  constructor(client: ServiceBusManagementClientInternal) {
    this.client = client;
  }

  /**
   * Get the details about the Service Bus namespace.
   * @param options The options parameters.
   */
  get(options?: coreHttp.OperationOptions): Promise<NamespaceGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      getOperationSpec
    ) as Promise<NamespaceGetResponse>;
  }
}
// Operation Specifications

const xmlSerializer = new coreHttp.Serializer(Mappers, /* isXml */ true);

const getOperationSpec: coreHttp.OperationSpec = {
  path: "/$namespaceinfo",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NamespacePropertiesEntry
    },
    default: {
      bodyMapper: Mappers.ServiceBusManagementError,
      headersMapper: Mappers.NamespaceGetExceptionHeaders
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  isXML: true,
  serializer: xmlSerializer
};
