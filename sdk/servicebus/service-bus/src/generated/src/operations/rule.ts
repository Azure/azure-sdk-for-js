/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ServiceBusManagementClientInternal } from "../serviceBusManagementClientInternal";
import {
  RuleGetOptionalParams,
  RuleGetResponse,
  RulePutOptionalParams,
  RulePutResponse,
  RuleDeleteResponse
} from "../models";

/**
 * Class representing a Rule.
 */
export class Rule {
  private readonly client: ServiceBusManagementClientInternal;

  /**
   * Initialize a new instance of the class Rule class.
   * @param client Reference to the service client
   */
  constructor(client: ServiceBusManagementClientInternal) {
    this.client = client;
  }

  /**
   * Get the details about the rule of a subscription of a topic.
   * @param topicName name of the topic.
   * @param subscriptionName name of the subscription.
   * @param ruleName name of the filter.
   * @param options The options parameters.
   */
  get(
    topicName: string,
    subscriptionName: string,
    ruleName: string,
    options?: RuleGetOptionalParams
  ): Promise<RuleGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { topicName, subscriptionName, ruleName, options: operationOptions },
      getOperationSpec
    ) as Promise<RuleGetResponse>;
  }

  /**
   * Create or update a rule
   * @param topicName name of the topic.
   * @param subscriptionName name of the subscription.
   * @param ruleName name of the filter.
   * @param requestBody Parameters required to make or edit a rule.
   * @param options The options parameters.
   */
  put(
    topicName: string,
    subscriptionName: string,
    ruleName: string,
    requestBody: any,
    options?: RulePutOptionalParams
  ): Promise<RulePutResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      {
        topicName,
        subscriptionName,
        ruleName,
        requestBody,
        options: operationOptions
      },
      putOperationSpec
    ) as Promise<RulePutResponse>;
  }

  /**
   * Delete the rule with the given topicName, subscriptionName and ruleName.
   * @param topicName name of the topic.
   * @param subscriptionName name of the subscription.
   * @param ruleName name of the filter.
   * @param options The options parameters.
   */
  delete(
    topicName: string,
    subscriptionName: string,
    ruleName: string,
    options?: coreHttp.OperationOptions
  ): Promise<RuleDeleteResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { topicName, subscriptionName, ruleName, options: operationOptions },
      deleteOperationSpec
    ) as Promise<RuleDeleteResponse>;
  }
}
// Operation Specifications

const xmlSerializer = new coreHttp.Serializer(Mappers, /* isXml */ true);

const getOperationSpec: coreHttp.OperationSpec = {
  path: "/{topicName}/subscriptions/{subscriptionName}/rules/{ruleName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    default: {
      bodyMapper: Mappers.ServiceBusManagementError,
      headersMapper: Mappers.RuleGetHeaders
    }
  },
  queryParameters: [Parameters.enrich, Parameters.apiVersion],
  urlParameters: [
    Parameters.endpoint,
    Parameters.topicName,
    Parameters.subscriptionName,
    Parameters.ruleName
  ],
  isXML: true,
  serializer: xmlSerializer
};
const putOperationSpec: coreHttp.OperationSpec = {
  path: "/{topicName}/subscriptions/{subscriptionName}/rules/{ruleName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    201: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    default: {
      bodyMapper: Mappers.ServiceBusManagementError,
      headersMapper: Mappers.RulePutHeaders
    }
  },
  requestBody: Parameters.requestBody2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.endpoint,
    Parameters.topicName,
    Parameters.subscriptionName,
    Parameters.ruleName
  ],
  headerParameters: [Parameters.contentType, Parameters.ifMatch],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "xml",
  serializer: xmlSerializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path: "/{topicName}/subscriptions/{subscriptionName}/rules/{ruleName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    default: {
      bodyMapper: Mappers.ServiceBusManagementError,
      headersMapper: Mappers.RuleDeleteHeaders
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.endpoint,
    Parameters.topicName,
    Parameters.subscriptionName,
    Parameters.ruleName
  ],
  isXML: true,
  serializer: xmlSerializer
};
