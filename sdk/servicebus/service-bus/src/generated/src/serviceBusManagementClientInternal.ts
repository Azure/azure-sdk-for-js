/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import { Entity, Subscription, Rule, Namespace } from "./operations";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import { ServiceBusManagementClientInternalContext } from "./serviceBusManagementClientInternalContext";
import {
  ServiceBusManagementClientInternalOptionalParams,
  ServiceBusManagementClientInternalListSubscriptionsOptionalParams,
  ServiceBusManagementClientInternalListSubscriptionsResponse,
  ServiceBusManagementClientInternalListRulesOptionalParams,
  ServiceBusManagementClientInternalListRulesResponse,
  ServiceBusManagementClientInternalListEntitiesOptionalParams,
  ServiceBusManagementClientInternalListEntitiesResponse
} from "./models";

export class ServiceBusManagementClientInternal extends ServiceBusManagementClientInternalContext {
  /**
   * Initializes a new instance of the ServiceBusManagementClientInternal class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param endpoint The Service Bus fully qualified domain name.
   * @param options The parameter options
   */
  constructor(
    credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials,
    endpoint: string,
    options?: ServiceBusManagementClientInternalOptionalParams
  ) {
    super(credentials, endpoint, options);
    this.entity = new Entity(this);
    this.subscription = new Subscription(this);
    this.rule = new Rule(this);
    this.namespace = new Namespace(this);
  }

  /**
   * Get the details about the subscriptions of the given topic.
   * @param topicName name of the topic.
   * @param options The options parameters.
   */
  listSubscriptions(
    topicName: string,
    options?: ServiceBusManagementClientInternalListSubscriptionsOptionalParams
  ): Promise<ServiceBusManagementClientInternalListSubscriptionsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { topicName, options: operationOptions },
      listSubscriptionsOperationSpec
    ) as Promise<ServiceBusManagementClientInternalListSubscriptionsResponse>;
  }

  /**
   * Get the details about the rules of the given topic subscription.
   * @param topicName name of the topic.
   * @param subscriptionName name of the subscription.
   * @param options The options parameters.
   */
  listRules(
    topicName: string,
    subscriptionName: string,
    options?: ServiceBusManagementClientInternalListRulesOptionalParams
  ): Promise<ServiceBusManagementClientInternalListRulesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { topicName, subscriptionName, options: operationOptions },
      listRulesOperationSpec
    ) as Promise<ServiceBusManagementClientInternalListRulesResponse>;
  }

  /**
   * Get the details about the entities of the given Service Bus namespace.
   * @param entityType List all queues or all topics of the service bus. Value can be "queues" or
   *                   "topics"
   * @param options The options parameters.
   */
  listEntities(
    entityType: string,
    options?: ServiceBusManagementClientInternalListEntitiesOptionalParams
  ): Promise<ServiceBusManagementClientInternalListEntitiesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { entityType, options: operationOptions },
      listEntitiesOperationSpec
    ) as Promise<ServiceBusManagementClientInternalListEntitiesResponse>;
  }

  entity: Entity;
  subscription: Subscription;
  rule: Rule;
  namespace: Namespace;
}
// Operation Specifications

const xmlSerializer = new coreHttp.Serializer(Mappers, /* isXml */ true);

const listSubscriptionsOperationSpec: coreHttp.OperationSpec = {
  path: "/{topicName}/subscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    default: {
      bodyMapper: Mappers.ServiceBusManagementError,
      headersMapper: Mappers.ServiceBusManagementClientInternalListSubscriptionsExceptionHeaders
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.skip, Parameters.top],
  urlParameters: [Parameters.endpoint, Parameters.topicName],
  headerParameters: [Parameters.accept],
  isXML: true,
  serializer: xmlSerializer
};
const listRulesOperationSpec: coreHttp.OperationSpec = {
  path: "/{topicName}/subscriptions/{subscriptionName}/rules",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    default: {
      bodyMapper: Mappers.ServiceBusManagementError,
      headersMapper: Mappers.ServiceBusManagementClientInternalListRulesExceptionHeaders
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.skip, Parameters.top],
  urlParameters: [Parameters.endpoint, Parameters.topicName, Parameters.subscriptionName],
  headerParameters: [Parameters.accept],
  isXML: true,
  serializer: xmlSerializer
};
const listEntitiesOperationSpec: coreHttp.OperationSpec = {
  path: "/$Resources/{entityType}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    default: {
      bodyMapper: Mappers.ServiceBusManagementError,
      headersMapper: Mappers.ServiceBusManagementClientInternalListEntitiesExceptionHeaders
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.skip, Parameters.top],
  urlParameters: [Parameters.endpoint, Parameters.entityType],
  headerParameters: [Parameters.accept],
  isXML: true,
  serializer: xmlSerializer
};
