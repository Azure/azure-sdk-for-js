/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationURLParameter,
  OperationQueryParameter,
  OperationParameter
} from "@azure/core-http";
import {
  CreateTopicBody as CreateTopicBodyMapper,
  CreateQueueBody as CreateQueueBodyMapper
} from "../models/mappers";

export const endpoint: OperationURLParameter = {
  parameterPath: "endpoint",
  mapper: {
    serializedName: "endpoint",
    required: true,
    xmlName: "endpoint",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const topicName: OperationURLParameter = {
  parameterPath: "topicName",
  mapper: {
    constraints: {
      MinLength: 1
    },
    serializedName: "topicName",
    required: true,
    xmlName: "topicName",
    type: {
      name: "String"
    }
  }
};

export const enrich: OperationQueryParameter = {
  parameterPath: ["options", "enrich"],
  mapper: {
    serializedName: "enrich",
    xmlName: "enrich",
    type: {
      name: "Boolean"
    }
  }
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2017-04",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/atom+xml",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const requestBody: OperationParameter = {
  parameterPath: "requestBody",
  mapper: CreateTopicBodyMapper
};

export const ifMatch: OperationParameter = {
  parameterPath: ["options", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    xmlName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const queueName: OperationURLParameter = {
  parameterPath: "queueName",
  mapper: {
    constraints: {
      MinLength: 1
    },
    serializedName: "queueName",
    required: true,
    xmlName: "queueName",
    type: {
      name: "String"
    }
  }
};

export const requestBody1: OperationParameter = {
  parameterPath: "requestBody",
  mapper: CreateQueueBodyMapper
};

export const skip: OperationQueryParameter = {
  parameterPath: ["options", "skip"],
  mapper: {
    serializedName: "$skip",
    xmlName: "$skip",
    type: {
      name: "Number"
    }
  }
};

export const top: OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    defaultValue: 100,
    serializedName: "$top",
    xmlName: "$top",
    type: {
      name: "Number"
    }
  }
};

export const subscriptionName: OperationURLParameter = {
  parameterPath: "subscriptionName",
  mapper: {
    constraints: {
      MinLength: 1
    },
    serializedName: "subscriptionName",
    required: true,
    xmlName: "subscriptionName",
    type: {
      name: "String"
    }
  }
};

export const entityType: OperationURLParameter = {
  parameterPath: "entityType",
  mapper: {
    constraints: {
      MinLength: 1
    },
    serializedName: "entityType",
    required: true,
    xmlName: "entityType",
    type: {
      name: "String"
    }
  }
};

export const requestBody2: OperationParameter = {
  parameterPath: "requestBody",
  mapper: {
    serializedName: "requestBody",
    required: true,
    xmlName: "requestBody",
    type: {
      name: "any"
    }
  }
};

export const ruleName: OperationURLParameter = {
  parameterPath: "ruleName",
  mapper: {
    constraints: {
      MinLength: 1
    },
    serializedName: "ruleName",
    required: true,
    xmlName: "ruleName",
    type: {
      name: "String"
    }
  }
};
