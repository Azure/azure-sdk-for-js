/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const CreateTopicBody: coreHttp.CompositeMapper = {
  serializedName: "CreateTopicBody",
  xmlName: "entry",
  type: {
    name: "Composite",
    className: "CreateTopicBody",
    modelProperties: {
      updated: {
        serializedName: "updated",
        xmlName: "updated",
        type: {
          name: "DateTime"
        }
      },
      content: {
        serializedName: "content",
        xmlName: "content",
        type: {
          name: "Composite",
          className: "CreateTopicBodyContent"
        }
      }
    }
  }
};

export const CreateTopicBodyContent: coreHttp.CompositeMapper = {
  serializedName: "CreateTopicBodyContent",
  type: {
    name: "Composite",
    className: "CreateTopicBodyContent",
    modelProperties: {
      type: {
        defaultValue: "application/xml",
        serializedName: "type",
        xmlName: "type",
        xmlIsAttribute: true,
        type: {
          name: "String"
        }
      },
      topicDescription: {
        serializedName: "topicDescription",
        xmlName: "TopicDescription",
        type: {
          name: "Composite",
          className: "TopicDescription"
        }
      }
    }
  }
};

export const TopicDescription: coreHttp.CompositeMapper = {
  serializedName: "TopicDescription",
  xmlName: "TopicDescription",
  type: {
    name: "Composite",
    className: "TopicDescription",
    modelProperties: {
      defaultMessageTimeToLive: {
        serializedName: "defaultMessageTimeToLive",
        xmlName: "DefaultMessageTimeToLive",
        type: {
          name: "TimeSpan"
        }
      },
      maxSizeInMegabytes: {
        serializedName: "maxSizeInMegabytes",
        xmlName: "MaxSizeInMegabytes",
        type: {
          name: "Number"
        }
      },
      requiresDuplicateDetection: {
        serializedName: "requiresDuplicateDetection",
        xmlName: "RequiresDuplicateDetection",
        type: {
          name: "Boolean"
        }
      },
      duplicateDetectionHistoryTimeWindow: {
        serializedName: "duplicateDetectionHistoryTimeWindow",
        xmlName: "DuplicateDetectionHistoryTimeWindow",
        type: {
          name: "TimeSpan"
        }
      },
      enableBatchedOperations: {
        serializedName: "enableBatchedOperations",
        xmlName: "EnableBatchedOperations",
        type: {
          name: "Boolean"
        }
      },
      sizeInBytes: {
        serializedName: "sizeInBytes",
        xmlName: "SizeInBytes",
        type: {
          name: "Number"
        }
      },
      filteringMessagesBeforePublishing: {
        serializedName: "filteringMessagesBeforePublishing",
        xmlName: "FilteringMessagesBeforePublishing",
        type: {
          name: "Boolean"
        }
      },
      isAnonymousAccessible: {
        serializedName: "isAnonymousAccessible",
        xmlName: "IsAnonymousAccessible",
        type: {
          name: "Boolean"
        }
      },
      authorizationRules: {
        serializedName: "authorizationRules",
        xmlName: "AuthorizationRules",
        xmlIsWrapped: true,
        xmlElementName: "AuthorizationRule",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "AuthorizationRule" }
          }
        }
      },
      status: {
        serializedName: "status",
        xmlName: "Status",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        xmlName: "CreatedAt",
        type: {
          name: "DateTime"
        }
      },
      updatedAt: {
        serializedName: "updatedAt",
        xmlName: "UpdatedAt",
        type: {
          name: "DateTime"
        }
      },
      accessedAt: {
        serializedName: "accessedAt",
        xmlName: "AccessedAt",
        type: {
          name: "DateTime"
        }
      },
      supportOrdering: {
        serializedName: "supportOrdering",
        xmlName: "SupportOrdering",
        type: {
          name: "Boolean"
        }
      },
      messageCountDetails: {
        serializedName: "messageCountDetails",
        xmlName: "CountDetails",
        type: {
          name: "Composite",
          className: "MessageCountDetails"
        }
      },
      subscriptionCount: {
        serializedName: "subscriptionCount",
        xmlName: "SubscriptionCount",
        type: {
          name: "Number"
        }
      },
      autoDeleteOnIdle: {
        serializedName: "autoDeleteOnIdle",
        xmlName: "AutoDeleteOnIdle",
        type: {
          name: "TimeSpan"
        }
      },
      enablePartitioning: {
        serializedName: "enablePartitioning",
        xmlName: "EnablePartitioning",
        type: {
          name: "Boolean"
        }
      },
      entityAvailabilityStatus: {
        serializedName: "entityAvailabilityStatus",
        xmlName: "EntityAvailabilityStatus",
        type: {
          name: "String"
        }
      },
      enableSubscriptionPartitioning: {
        serializedName: "enableSubscriptionPartitioning",
        xmlName: "EnableSubscriptionPartitioning",
        type: {
          name: "Boolean"
        }
      },
      enableExpress: {
        serializedName: "enableExpress",
        xmlName: "EnableExpress",
        type: {
          name: "Boolean"
        }
      },
      userMetadata: {
        serializedName: "userMetadata",
        xmlName: "UserMetadata",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AuthorizationRule: coreHttp.CompositeMapper = {
  serializedName: "AuthorizationRule",
  xmlName: "AuthorizationRule",
  type: {
    name: "Composite",
    className: "AuthorizationRule",
    modelProperties: {
      type: {
        serializedName: "type",
        xmlName: "type",
        xmlIsAttribute: true,
        type: {
          name: "String"
        }
      },
      claimType: {
        serializedName: "claimType",
        xmlName: "ClaimType",
        type: {
          name: "String"
        }
      },
      claimValue: {
        serializedName: "claimValue",
        xmlName: "ClaimValue",
        type: {
          name: "String"
        }
      },
      rights: {
        serializedName: "rights",
        xmlName: "Rights",
        xmlIsWrapped: true,
        xmlElementName: "AccessRights",
        type: {
          name: "Sequence",
          element: { type: { name: "String" } }
        }
      },
      createdTime: {
        serializedName: "createdTime",
        xmlName: "CreatedTime",
        type: {
          name: "DateTime"
        }
      },
      modifiedTime: {
        serializedName: "modifiedTime",
        xmlName: "ModifiedTime",
        type: {
          name: "DateTime"
        }
      },
      keyName: {
        serializedName: "keyName",
        xmlName: "KeyName",
        type: {
          name: "String"
        }
      },
      primaryKey: {
        serializedName: "primaryKey",
        xmlName: "PrimaryKey",
        type: {
          name: "String"
        }
      },
      secondaryKey: {
        serializedName: "secondaryKey",
        xmlName: "SecondaryKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MessageCountDetails: coreHttp.CompositeMapper = {
  serializedName: "MessageCountDetails",
  xmlName: "CountDetails",
  type: {
    name: "Composite",
    className: "MessageCountDetails",
    modelProperties: {
      activeMessageCount: {
        serializedName: "activeMessageCount",
        xmlName: "ActiveMessageCount",
        type: {
          name: "Number"
        }
      },
      deadLetterMessageCount: {
        serializedName: "deadLetterMessageCount",
        xmlName: "DeadLetterMessageCount",
        type: {
          name: "Number"
        }
      },
      scheduledMessageCount: {
        serializedName: "scheduledMessageCount",
        xmlName: "ScheduledMessageCount",
        type: {
          name: "Number"
        }
      },
      transferDeadLetterMessageCount: {
        serializedName: "transferDeadLetterMessageCount",
        xmlName: "TransferDeadLetterMessageCount",
        type: {
          name: "Number"
        }
      },
      transferMessageCount: {
        serializedName: "transferMessageCount",
        xmlName: "TransferMessageCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ServiceBusManagementError: coreHttp.CompositeMapper = {
  serializedName: "ServiceBusManagementError",
  type: {
    name: "Composite",
    className: "ServiceBusManagementError",
    modelProperties: {
      code: {
        serializedName: "code",
        xmlName: "Code",
        type: {
          name: "Number"
        }
      },
      detail: {
        serializedName: "detail",
        xmlName: "Detail",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateQueueBody: coreHttp.CompositeMapper = {
  serializedName: "CreateQueueBody",
  xmlName: "entry",
  type: {
    name: "Composite",
    className: "CreateQueueBody",
    modelProperties: {
      updated: {
        serializedName: "updated",
        xmlName: "updated",
        type: {
          name: "DateTime"
        }
      },
      content: {
        serializedName: "content",
        xmlName: "content",
        type: {
          name: "Composite",
          className: "CreateQueueBodyContent"
        }
      }
    }
  }
};

export const CreateQueueBodyContent: coreHttp.CompositeMapper = {
  serializedName: "CreateQueueBodyContent",
  type: {
    name: "Composite",
    className: "CreateQueueBodyContent",
    modelProperties: {
      type: {
        defaultValue: "application/xml",
        serializedName: "type",
        xmlName: "type",
        xmlIsAttribute: true,
        type: {
          name: "String"
        }
      },
      queueDescription: {
        serializedName: "queueDescription",
        xmlName: "QueueDescription",
        type: {
          name: "Composite",
          className: "QueueDescription"
        }
      }
    }
  }
};

export const QueueDescription: coreHttp.CompositeMapper = {
  serializedName: "QueueDescription",
  xmlName: "QueueDescription",
  type: {
    name: "Composite",
    className: "QueueDescription",
    modelProperties: {
      lockDuration: {
        serializedName: "lockDuration",
        xmlName: "LockDuration",
        type: {
          name: "TimeSpan"
        }
      },
      maxSizeInMegabytes: {
        serializedName: "maxSizeInMegabytes",
        xmlName: "MaxSizeInMegabytes",
        type: {
          name: "Number"
        }
      },
      requiresDuplicateDetection: {
        serializedName: "requiresDuplicateDetection",
        xmlName: "RequiresDuplicateDetection",
        type: {
          name: "Boolean"
        }
      },
      requiresSession: {
        serializedName: "requiresSession",
        xmlName: "RequiresSession",
        type: {
          name: "Boolean"
        }
      },
      defaultMessageTimeToLive: {
        serializedName: "defaultMessageTimeToLive",
        xmlName: "DefaultMessageTimeToLive",
        type: {
          name: "TimeSpan"
        }
      },
      deadLetteringOnMessageExpiration: {
        serializedName: "deadLetteringOnMessageExpiration",
        xmlName: "DeadLetteringOnMessageExpiration",
        type: {
          name: "Boolean"
        }
      },
      duplicateDetectionHistoryTimeWindow: {
        serializedName: "duplicateDetectionHistoryTimeWindow",
        xmlName: "DuplicateDetectionHistoryTimeWindow",
        type: {
          name: "TimeSpan"
        }
      },
      maxDeliveryCount: {
        serializedName: "maxDeliveryCount",
        xmlName: "MaxDeliveryCount",
        type: {
          name: "Number"
        }
      },
      enableBatchedOperations: {
        serializedName: "enableBatchedOperations",
        xmlName: "EnableBatchedOperations",
        type: {
          name: "Boolean"
        }
      },
      sizeInBytes: {
        serializedName: "sizeInBytes",
        xmlName: "SizeInBytes",
        type: {
          name: "Number"
        }
      },
      messageCount: {
        serializedName: "messageCount",
        xmlName: "MessageCount",
        type: {
          name: "Number"
        }
      },
      isAnonymousAccessible: {
        serializedName: "isAnonymousAccessible",
        xmlName: "IsAnonymousAccessible",
        type: {
          name: "Boolean"
        }
      },
      authorizationRules: {
        serializedName: "authorizationRules",
        xmlName: "AuthorizationRules",
        xmlIsWrapped: true,
        xmlElementName: "AuthorizationRule",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "AuthorizationRule" }
          }
        }
      },
      status: {
        serializedName: "status",
        xmlName: "Status",
        type: {
          name: "String"
        }
      },
      forwardTo: {
        serializedName: "forwardTo",
        xmlName: "ForwardTo",
        type: {
          name: "String"
        }
      },
      userMetadata: {
        serializedName: "userMetadata",
        xmlName: "UserMetadata",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        xmlName: "CreatedAt",
        type: {
          name: "DateTime"
        }
      },
      updatedAt: {
        serializedName: "updatedAt",
        xmlName: "UpdatedAt",
        type: {
          name: "DateTime"
        }
      },
      accessedAt: {
        serializedName: "accessedAt",
        xmlName: "AccessedAt",
        type: {
          name: "DateTime"
        }
      },
      supportOrdering: {
        serializedName: "supportOrdering",
        xmlName: "SupportOrdering",
        type: {
          name: "Boolean"
        }
      },
      messageCountDetails: {
        serializedName: "messageCountDetails",
        xmlName: "CountDetails",
        type: {
          name: "Composite",
          className: "MessageCountDetails"
        }
      },
      autoDeleteOnIdle: {
        serializedName: "autoDeleteOnIdle",
        xmlName: "AutoDeleteOnIdle",
        type: {
          name: "TimeSpan"
        }
      },
      enablePartitioning: {
        serializedName: "enablePartitioning",
        xmlName: "EnablePartitioning",
        type: {
          name: "Boolean"
        }
      },
      entityAvailabilityStatus: {
        serializedName: "entityAvailabilityStatus",
        xmlName: "EntityAvailabilityStatus",
        type: {
          name: "String"
        }
      },
      enableExpress: {
        serializedName: "enableExpress",
        xmlName: "EnableExpress",
        type: {
          name: "Boolean"
        }
      },
      forwardDeadLetteredMessagesTo: {
        serializedName: "forwardDeadLetteredMessagesTo",
        xmlName: "ForwardDeadLetteredMessagesTo",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NamespacePropertiesEntry: coreHttp.CompositeMapper = {
  serializedName: "NamespacePropertiesEntry",
  xmlName: "entry",
  type: {
    name: "Composite",
    className: "NamespacePropertiesEntry",
    modelProperties: {
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      },
      title: {
        serializedName: "title",
        xmlName: "title",
        type: {
          name: "any"
        }
      },
      updated: {
        serializedName: "updated",
        xmlName: "updated",
        type: {
          name: "DateTime"
        }
      },
      author: {
        serializedName: "author",
        xmlName: "author",
        type: {
          name: "Composite",
          className: "ResponseAuthor"
        }
      },
      link: {
        serializedName: "link",
        xmlName: "link",
        type: {
          name: "Composite",
          className: "ResponseLink"
        }
      },
      content: {
        serializedName: "content",
        xmlName: "content",
        type: {
          name: "Composite",
          className: "NamespacePropertiesEntryContent"
        }
      }
    }
  }
};

export const ResponseAuthor: coreHttp.CompositeMapper = {
  serializedName: "ResponseAuthor",
  xmlName: "author",
  type: {
    name: "Composite",
    className: "ResponseAuthor",
    modelProperties: {
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResponseLink: coreHttp.CompositeMapper = {
  serializedName: "ResponseLink",
  xmlName: "link",
  type: {
    name: "Composite",
    className: "ResponseLink",
    modelProperties: {
      href: {
        serializedName: "href",
        xmlName: "href",
        xmlIsAttribute: true,
        type: {
          name: "String"
        }
      },
      rel: {
        serializedName: "rel",
        xmlName: "rel",
        xmlIsAttribute: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NamespacePropertiesEntryContent: coreHttp.CompositeMapper = {
  serializedName: "NamespacePropertiesEntryContent",
  type: {
    name: "Composite",
    className: "NamespacePropertiesEntryContent",
    modelProperties: {
      type: {
        serializedName: "type",
        xmlName: "type",
        xmlIsAttribute: true,
        type: {
          name: "String"
        }
      },
      namespaceProperties: {
        serializedName: "NamespaceProperties",
        xmlName: "NamespaceInfo",
        type: {
          name: "Composite",
          className: "NamespaceProperties"
        }
      }
    }
  }
};

export const NamespaceProperties: coreHttp.CompositeMapper = {
  serializedName: "NamespaceProperties",
  xmlName: "NamespaceInfo",
  type: {
    name: "Composite",
    className: "NamespaceProperties",
    modelProperties: {
      alias: {
        serializedName: "alias",
        xmlName: "Alias",
        type: {
          name: "String"
        }
      },
      createdTime: {
        serializedName: "createdTime",
        xmlName: "CreatedTime",
        type: {
          name: "DateTime"
        }
      },
      messagingSku: {
        serializedName: "messagingSku",
        xmlName: "MessagingSKU",
        type: {
          name: "String"
        }
      },
      messagingUnits: {
        serializedName: "messagingUnits",
        xmlName: "MessagingUnits",
        type: {
          name: "Number"
        }
      },
      modifiedTime: {
        serializedName: "modifiedTime",
        xmlName: "ModifiedTime",
        type: {
          name: "DateTime"
        }
      },
      name: {
        serializedName: "name",
        xmlName: "Name",
        type: {
          name: "String"
        }
      },
      namespaceType: {
        serializedName: "namespaceType",
        xmlName: "NamespaceType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateSubscriptionBody: coreHttp.CompositeMapper = {
  serializedName: "CreateSubscriptionBody",
  xmlName: "entry",
  type: {
    name: "Composite",
    className: "CreateSubscriptionBody",
    modelProperties: {
      content: {
        serializedName: "content",
        xmlName: "content",
        type: {
          name: "Composite",
          className: "CreateSubscriptionBodyContent"
        }
      }
    }
  }
};

export const CreateSubscriptionBodyContent: coreHttp.CompositeMapper = {
  serializedName: "CreateSubscriptionBodyContent",
  type: {
    name: "Composite",
    className: "CreateSubscriptionBodyContent",
    modelProperties: {
      type: {
        defaultValue: "application/xml",
        serializedName: "type",
        xmlName: "type",
        xmlIsAttribute: true,
        type: {
          name: "String"
        }
      },
      subscriptionDescription: {
        serializedName: "subscriptionDescription",
        xmlName: "SubscriptionDescription",
        type: {
          name: "Composite",
          className: "SubscriptionDescription"
        }
      }
    }
  }
};

export const SubscriptionDescription: coreHttp.CompositeMapper = {
  serializedName: "SubscriptionDescription",
  xmlName: "SubscriptionDescription",
  type: {
    name: "Composite",
    className: "SubscriptionDescription",
    modelProperties: {
      lockDuration: {
        serializedName: "lockDuration",
        xmlName: "LockDuration",
        type: {
          name: "TimeSpan"
        }
      },
      requiresSession: {
        serializedName: "requiresSession",
        xmlName: "RequiresSession",
        type: {
          name: "Boolean"
        }
      },
      defaultMessageTimeToLive: {
        serializedName: "defaultMessageTimeToLive",
        xmlName: "DefaultMessageTimeToLive",
        type: {
          name: "TimeSpan"
        }
      },
      deadLetteringOnMessageExpiration: {
        serializedName: "deadLetteringOnMessageExpiration",
        xmlName: "DeadLetteringOnMessageExpiration",
        type: {
          name: "Boolean"
        }
      },
      deadLetteringOnFilterEvaluationExceptions: {
        serializedName: "deadLetteringOnFilterEvaluationExceptions",
        xmlName: "DeadLetteringOnFilterEvaluationExceptions",
        type: {
          name: "Boolean"
        }
      },
      messageCount: {
        serializedName: "messageCount",
        xmlName: "MessageCount",
        type: {
          name: "Number"
        }
      },
      maxDeliveryCount: {
        serializedName: "maxDeliveryCount",
        xmlName: "MaxDeliveryCount",
        type: {
          name: "Number"
        }
      },
      enableBatchedOperations: {
        serializedName: "enableBatchedOperations",
        xmlName: "EnableBatchedOperations",
        type: {
          name: "Boolean"
        }
      },
      status: {
        serializedName: "status",
        xmlName: "Status",
        type: {
          name: "String"
        }
      },
      forwardTo: {
        serializedName: "forwardTo",
        xmlName: "ForwardTo",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        xmlName: "CreatedAt",
        type: {
          name: "DateTime"
        }
      },
      updatedAt: {
        serializedName: "updatedAt",
        xmlName: "UpdatedAt",
        type: {
          name: "DateTime"
        }
      },
      accessedAt: {
        serializedName: "accessedAt",
        xmlName: "AccessedAt",
        type: {
          name: "DateTime"
        }
      },
      messageCountDetails: {
        serializedName: "messageCountDetails",
        xmlName: "CountDetails",
        type: {
          name: "Composite",
          className: "MessageCountDetails"
        }
      },
      userMetadata: {
        serializedName: "userMetadata",
        xmlName: "UserMetadata",
        type: {
          name: "String"
        }
      },
      forwardDeadLetteredMessagesTo: {
        serializedName: "forwardDeadLetteredMessagesTo",
        xmlName: "ForwardDeadLetteredMessagesTo",
        type: {
          name: "String"
        }
      },
      autoDeleteOnIdle: {
        serializedName: "autoDeleteOnIdle",
        xmlName: "AutoDeleteOnIdle",
        type: {
          name: "TimeSpan"
        }
      },
      entityAvailabilityStatus: {
        serializedName: "entityAvailabilityStatus",
        xmlName: "EntityAvailabilityStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateRuleBody: coreHttp.CompositeMapper = {
  serializedName: "CreateRuleBody",
  xmlName: "entry",
  type: {
    name: "Composite",
    className: "CreateRuleBody",
    modelProperties: {
      content: {
        serializedName: "content",
        xmlName: "content",
        type: {
          name: "Composite",
          className: "CreateRuleBodyContent"
        }
      }
    }
  }
};

export const CreateRuleBodyContent: coreHttp.CompositeMapper = {
  serializedName: "CreateRuleBodyContent",
  type: {
    name: "Composite",
    className: "CreateRuleBodyContent",
    modelProperties: {
      type: {
        defaultValue: "application/xml",
        serializedName: "type",
        xmlName: "type",
        xmlIsAttribute: true,
        type: {
          name: "String"
        }
      },
      ruleDescription: {
        serializedName: "ruleDescription",
        xmlName: "RuleDescription",
        type: {
          name: "Composite",
          className: "RuleDescription"
        }
      }
    }
  }
};

export const RuleDescription: coreHttp.CompositeMapper = {
  serializedName: "RuleDescription",
  xmlName: "RuleDescription",
  type: {
    name: "Composite",
    className: "RuleDescription",
    modelProperties: {
      filter: {
        serializedName: "filter",
        xmlName: "Filter",
        type: {
          name: "Composite",
          className: "RuleFilter"
        }
      },
      action: {
        serializedName: "action",
        xmlName: "Action",
        type: {
          name: "Composite",
          className: "RuleAction"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        xmlName: "CreatedAt",
        type: {
          name: "DateTime"
        }
      },
      name: {
        serializedName: "name",
        xmlName: "Name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RuleFilter: coreHttp.CompositeMapper = {
  serializedName: "RuleFilter",
  xmlName: "Filter",
  type: {
    name: "Composite",
    className: "RuleFilter",
    uberParent: "RuleFilter",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        xmlName: "type",
        xmlIsAttribute: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RuleAction: coreHttp.CompositeMapper = {
  serializedName: "RuleAction",
  xmlName: "Action",
  type: {
    name: "Composite",
    className: "RuleAction",
    uberParent: "RuleAction",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        xmlName: "type",
        xmlIsAttribute: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QueueDescriptionEntry: coreHttp.CompositeMapper = {
  serializedName: "QueueDescriptionEntry",
  xmlName: "entry",
  type: {
    name: "Composite",
    className: "QueueDescriptionEntry",
    modelProperties: {
      base: {
        serializedName: "base",
        xmlName: "base",
        xmlIsAttribute: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      },
      title: {
        serializedName: "title",
        xmlName: "title",
        type: {
          name: "any"
        }
      },
      published: {
        serializedName: "published",
        xmlName: "published",
        type: {
          name: "DateTime"
        }
      },
      updated: {
        serializedName: "updated",
        xmlName: "updated",
        type: {
          name: "DateTime"
        }
      },
      author: {
        serializedName: "author",
        xmlName: "author",
        type: {
          name: "Composite",
          className: "ResponseAuthor"
        }
      },
      link: {
        serializedName: "link",
        xmlName: "link",
        type: {
          name: "Composite",
          className: "ResponseLink"
        }
      },
      content: {
        serializedName: "content",
        xmlName: "content",
        type: {
          name: "Composite",
          className: "QueueDescriptionEntryContent"
        }
      }
    }
  }
};

export const QueueDescriptionEntryContent: coreHttp.CompositeMapper = {
  serializedName: "QueueDescriptionEntryContent",
  type: {
    name: "Composite",
    className: "QueueDescriptionEntryContent",
    modelProperties: {
      type: {
        serializedName: "type",
        xmlName: "type",
        xmlIsAttribute: true,
        type: {
          name: "String"
        }
      },
      queueDescription: {
        serializedName: "QueueDescription",
        xmlName: "QueueDescription",
        type: {
          name: "Composite",
          className: "QueueDescription"
        }
      }
    }
  }
};

export const QueueDescriptionFeed: coreHttp.CompositeMapper = {
  serializedName: "QueueDescriptionFeed",
  xmlName: "feed",
  type: {
    name: "Composite",
    className: "QueueDescriptionFeed",
    modelProperties: {
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      },
      title: {
        serializedName: "title",
        xmlName: "title",
        type: {
          name: "any"
        }
      },
      updated: {
        serializedName: "updated",
        xmlName: "updated",
        type: {
          name: "DateTime"
        }
      },
      link: {
        serializedName: "link",
        xmlName: "link",
        xmlElementName: "link",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResponseLink" } }
        }
      },
      entry: {
        serializedName: "entry",
        xmlName: "entry",
        xmlElementName: "entry",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "QueueDescriptionEntry" }
          }
        }
      }
    }
  }
};

export const TopicDescriptionEntry: coreHttp.CompositeMapper = {
  serializedName: "TopicDescriptionEntry",
  xmlName: "entry",
  type: {
    name: "Composite",
    className: "TopicDescriptionEntry",
    modelProperties: {
      base: {
        serializedName: "base",
        xmlName: "base",
        xmlIsAttribute: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      },
      title: {
        serializedName: "title",
        xmlName: "title",
        type: {
          name: "any"
        }
      },
      published: {
        serializedName: "published",
        xmlName: "published",
        type: {
          name: "DateTime"
        }
      },
      updated: {
        serializedName: "updated",
        xmlName: "updated",
        type: {
          name: "DateTime"
        }
      },
      author: {
        serializedName: "author",
        xmlName: "author",
        type: {
          name: "Composite",
          className: "ResponseAuthor"
        }
      },
      link: {
        serializedName: "link",
        xmlName: "link",
        type: {
          name: "Composite",
          className: "ResponseLink"
        }
      },
      content: {
        serializedName: "content",
        xmlName: "content",
        type: {
          name: "Composite",
          className: "TopicDescriptionEntryContent"
        }
      }
    }
  }
};

export const TopicDescriptionEntryContent: coreHttp.CompositeMapper = {
  serializedName: "TopicDescriptionEntryContent",
  type: {
    name: "Composite",
    className: "TopicDescriptionEntryContent",
    modelProperties: {
      type: {
        serializedName: "type",
        xmlName: "type",
        xmlIsAttribute: true,
        type: {
          name: "String"
        }
      },
      topicDescription: {
        serializedName: "TopicDescription",
        xmlName: "TopicDescription",
        type: {
          name: "Composite",
          className: "TopicDescription"
        }
      }
    }
  }
};

export const TopicDescriptionFeed: coreHttp.CompositeMapper = {
  serializedName: "TopicDescriptionFeed",
  xmlName: "feed",
  type: {
    name: "Composite",
    className: "TopicDescriptionFeed",
    modelProperties: {
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      },
      title: {
        serializedName: "title",
        xmlName: "title",
        type: {
          name: "any"
        }
      },
      updated: {
        serializedName: "updated",
        xmlName: "updated",
        type: {
          name: "DateTime"
        }
      },
      link: {
        serializedName: "link",
        xmlName: "link",
        xmlElementName: "link",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResponseLink" } }
        }
      },
      entry: {
        serializedName: "entry",
        xmlName: "entry",
        xmlElementName: "entry",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "TopicDescriptionEntry" }
          }
        }
      }
    }
  }
};

export const SubscriptionDescriptionEntry: coreHttp.CompositeMapper = {
  serializedName: "SubscriptionDescriptionEntry",
  xmlName: "entry",
  type: {
    name: "Composite",
    className: "SubscriptionDescriptionEntry",
    modelProperties: {
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      },
      title: {
        serializedName: "title",
        xmlName: "title",
        type: {
          name: "any"
        }
      },
      published: {
        serializedName: "published",
        xmlName: "published",
        type: {
          name: "DateTime"
        }
      },
      updated: {
        serializedName: "updated",
        xmlName: "updated",
        type: {
          name: "DateTime"
        }
      },
      link: {
        serializedName: "link",
        xmlName: "link",
        type: {
          name: "Composite",
          className: "ResponseLink"
        }
      },
      content: {
        serializedName: "content",
        xmlName: "content",
        type: {
          name: "Composite",
          className: "SubscriptionDescriptionEntryContent"
        }
      }
    }
  }
};

export const SubscriptionDescriptionEntryContent: coreHttp.CompositeMapper = {
  serializedName: "SubscriptionDescriptionEntryContent",
  type: {
    name: "Composite",
    className: "SubscriptionDescriptionEntryContent",
    modelProperties: {
      type: {
        serializedName: "type",
        xmlName: "type",
        xmlIsAttribute: true,
        type: {
          name: "String"
        }
      },
      subscriptionDescription: {
        serializedName: "SubscriptionDescription",
        xmlName: "SubscriptionDescription",
        type: {
          name: "Composite",
          className: "SubscriptionDescription"
        }
      }
    }
  }
};

export const SubscriptionDescriptionFeed: coreHttp.CompositeMapper = {
  serializedName: "SubscriptionDescriptionFeed",
  xmlName: "feed",
  type: {
    name: "Composite",
    className: "SubscriptionDescriptionFeed",
    modelProperties: {
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      },
      title: {
        serializedName: "title",
        xmlName: "title",
        type: {
          name: "any"
        }
      },
      updated: {
        serializedName: "updated",
        xmlName: "updated",
        type: {
          name: "DateTime"
        }
      },
      link: {
        serializedName: "link",
        xmlName: "link",
        xmlElementName: "link",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResponseLink" } }
        }
      },
      entry: {
        serializedName: "entry",
        xmlName: "entry",
        xmlElementName: "entry",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubscriptionDescriptionEntry"
            }
          }
        }
      }
    }
  }
};

export const KeyValue: coreHttp.CompositeMapper = {
  serializedName: "KeyValue",
  xmlName: "KeyValueOfstringanyType",
  type: {
    name: "Composite",
    className: "KeyValue",
    modelProperties: {
      key: {
        serializedName: "key",
        xmlName: "Key",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        xmlName: "Value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RuleDescriptionEntry: coreHttp.CompositeMapper = {
  serializedName: "RuleDescriptionEntry",
  xmlName: "entry",
  type: {
    name: "Composite",
    className: "RuleDescriptionEntry",
    modelProperties: {
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      },
      title: {
        serializedName: "title",
        xmlName: "title",
        type: {
          name: "any"
        }
      },
      published: {
        serializedName: "published",
        xmlName: "published",
        type: {
          name: "DateTime"
        }
      },
      updated: {
        serializedName: "updated",
        xmlName: "updated",
        type: {
          name: "DateTime"
        }
      },
      link: {
        serializedName: "link",
        xmlName: "link",
        type: {
          name: "Composite",
          className: "ResponseLink"
        }
      },
      content: {
        serializedName: "content",
        xmlName: "content",
        type: {
          name: "Composite",
          className: "RuleDescriptionEntryContent"
        }
      }
    }
  }
};

export const RuleDescriptionEntryContent: coreHttp.CompositeMapper = {
  serializedName: "RuleDescriptionEntryContent",
  type: {
    name: "Composite",
    className: "RuleDescriptionEntryContent",
    modelProperties: {
      type: {
        serializedName: "type",
        xmlName: "type",
        xmlIsAttribute: true,
        type: {
          name: "String"
        }
      },
      ruleDescription: {
        serializedName: "RuleDescription",
        xmlName: "RuleDescription",
        type: {
          name: "Composite",
          className: "RuleDescription"
        }
      }
    }
  }
};

export const RuleDescriptionFeed: coreHttp.CompositeMapper = {
  serializedName: "RuleDescriptionFeed",
  xmlName: "feed",
  type: {
    name: "Composite",
    className: "RuleDescriptionFeed",
    modelProperties: {
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      },
      title: {
        serializedName: "title",
        xmlName: "title",
        type: {
          name: "any"
        }
      },
      updated: {
        serializedName: "updated",
        xmlName: "updated",
        type: {
          name: "DateTime"
        }
      },
      link: {
        serializedName: "link",
        xmlName: "link",
        xmlElementName: "link",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "ResponseLink" } }
        }
      },
      entry: {
        serializedName: "entry",
        xmlName: "entry",
        xmlElementName: "entry",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "RuleDescriptionEntry" }
          }
        }
      }
    }
  }
};

export const CorrelationFilter: coreHttp.CompositeMapper = {
  serializedName: "CorrelationFilter",
  type: {
    name: "Composite",
    className: "CorrelationFilter",
    uberParent: "RuleFilter",
    polymorphicDiscriminator: RuleFilter.type.polymorphicDiscriminator,
    modelProperties: {
      ...RuleFilter.type.modelProperties,
      correlationId: {
        serializedName: "correlationId",
        xmlName: "CorrelationId",
        type: {
          name: "String"
        }
      },
      messageId: {
        serializedName: "messageId",
        xmlName: "MessageId",
        type: {
          name: "String"
        }
      },
      to: {
        serializedName: "to",
        xmlName: "To",
        type: {
          name: "String"
        }
      },
      replyTo: {
        serializedName: "replyTo",
        xmlName: "ReplyTo",
        type: {
          name: "String"
        }
      },
      label: {
        serializedName: "label",
        xmlName: "Label",
        type: {
          name: "String"
        }
      },
      sessionId: {
        serializedName: "sessionId",
        xmlName: "SessionId",
        type: {
          name: "String"
        }
      },
      replyToSessionId: {
        serializedName: "replyToSessionId",
        xmlName: "ReplyToSessionId",
        type: {
          name: "String"
        }
      },
      contentType: {
        serializedName: "contentType",
        xmlName: "ContentType",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        xmlName: "Properties",
        xmlIsWrapped: true,
        xmlElementName: "KeyValueOfstringanyType",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "KeyValue" } }
        }
      }
    }
  }
};

export const SqlFilter: coreHttp.CompositeMapper = {
  serializedName: "SqlFilter",
  type: {
    name: "Composite",
    className: "SqlFilter",
    uberParent: "RuleFilter",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      ...RuleFilter.type.modelProperties,
      sqlExpression: {
        serializedName: "sqlExpression",
        xmlName: "SqlExpression",
        type: {
          name: "String"
        }
      },
      compatibilityLevel: {
        defaultValue: "20",
        serializedName: "compatibilityLevel",
        xmlName: "CompatibilityLevel",
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        xmlName: "Parameters",
        xmlIsWrapped: true,
        xmlElementName: "KeyValueOfstringanyType",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "KeyValue" } }
        }
      },
      requiresPreprocessing: {
        serializedName: "requiresPreprocessing",
        xmlName: "RequiresPreprocessing",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SqlRuleAction: coreHttp.CompositeMapper = {
  serializedName: "SqlRuleAction",
  type: {
    name: "Composite",
    className: "SqlRuleAction",
    uberParent: "RuleAction",
    polymorphicDiscriminator: RuleAction.type.polymorphicDiscriminator,
    modelProperties: {
      ...RuleAction.type.modelProperties,
      sqlExpression: {
        serializedName: "sqlExpression",
        xmlName: "SqlExpression",
        type: {
          name: "String"
        }
      },
      compatibilityLevel: {
        defaultValue: "20",
        serializedName: "compatibilityLevel",
        xmlName: "CompatibilityLevel",
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        xmlName: "Parameters",
        xmlIsWrapped: true,
        xmlElementName: "KeyValueOfstringanyType",
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "KeyValue" } }
        }
      },
      requiresPreprocessing: {
        serializedName: "requiresPreprocessing",
        xmlName: "RequiresPreprocessing",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const EmptyRuleAction: coreHttp.CompositeMapper = {
  serializedName: "EmptyRuleAction",
  type: {
    name: "Composite",
    className: "EmptyRuleAction",
    uberParent: "RuleAction",
    polymorphicDiscriminator: RuleAction.type.polymorphicDiscriminator,
    modelProperties: {
      ...RuleAction.type.modelProperties
    }
  }
};

export const TrueFilter: coreHttp.CompositeMapper = {
  serializedName: "TrueFilter",
  type: {
    name: "Composite",
    className: "TrueFilter",
    uberParent: "RuleFilter",
    polymorphicDiscriminator: RuleFilter.type.polymorphicDiscriminator,
    modelProperties: {
      ...SqlFilter.type.modelProperties
    }
  }
};

export const FalseFilter: coreHttp.CompositeMapper = {
  serializedName: "FalseFilter",
  type: {
    name: "Composite",
    className: "FalseFilter",
    uberParent: "RuleFilter",
    polymorphicDiscriminator: RuleFilter.type.polymorphicDiscriminator,
    modelProperties: {
      ...SqlFilter.type.modelProperties
    }
  }
};

export const EntityGetTopicHeaders: coreHttp.CompositeMapper = {
  serializedName: "Entity_getTopicHeaders",
  type: {
    name: "Composite",
    className: "EntityGetTopicHeaders",
    modelProperties: {
      xMsRequestId: {
        constraints: {
          Pattern: new RegExp(
            "^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$"
          )
        },
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsVersion: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EntityPutTopicHeaders: coreHttp.CompositeMapper = {
  serializedName: "Entity_putTopicHeaders",
  type: {
    name: "Composite",
    className: "EntityPutTopicHeaders",
    modelProperties: {
      xMsRequestId: {
        constraints: {
          Pattern: new RegExp(
            "^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$"
          )
        },
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsVersion: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EntityDeleteTopicHeaders: coreHttp.CompositeMapper = {
  serializedName: "Entity_deleteTopicHeaders",
  type: {
    name: "Composite",
    className: "EntityDeleteTopicHeaders",
    modelProperties: {
      xMsRequestId: {
        constraints: {
          Pattern: new RegExp(
            "^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$"
          )
        },
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsVersion: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EntityGetQueueHeaders: coreHttp.CompositeMapper = {
  serializedName: "Entity_getQueueHeaders",
  type: {
    name: "Composite",
    className: "EntityGetQueueHeaders",
    modelProperties: {
      xMsRequestId: {
        constraints: {
          Pattern: new RegExp(
            "^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$"
          )
        },
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsVersion: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EntityPutQueueHeaders: coreHttp.CompositeMapper = {
  serializedName: "Entity_putQueueHeaders",
  type: {
    name: "Composite",
    className: "EntityPutQueueHeaders",
    modelProperties: {
      xMsRequestId: {
        constraints: {
          Pattern: new RegExp(
            "^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$"
          )
        },
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsVersion: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EntityDeleteQueueHeaders: coreHttp.CompositeMapper = {
  serializedName: "Entity_deleteQueueHeaders",
  type: {
    name: "Composite",
    className: "EntityDeleteQueueHeaders",
    modelProperties: {
      xMsRequestId: {
        constraints: {
          Pattern: new RegExp(
            "^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$"
          )
        },
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsVersion: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceBusManagementClientInternalListSubscriptionsHeaders: coreHttp.CompositeMapper = {
  serializedName: "ServiceBusManagementClientInternal_listSubscriptionsHeaders",
  type: {
    name: "Composite",
    className: "ServiceBusManagementClientInternalListSubscriptionsHeaders",
    modelProperties: {
      xMsRequestId: {
        constraints: {
          Pattern: new RegExp(
            "^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$"
          )
        },
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsVersion: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceBusManagementClientInternalListRulesHeaders: coreHttp.CompositeMapper = {
  serializedName: "ServiceBusManagementClientInternal_listRulesHeaders",
  type: {
    name: "Composite",
    className: "ServiceBusManagementClientInternalListRulesHeaders",
    modelProperties: {
      xMsRequestId: {
        constraints: {
          Pattern: new RegExp(
            "^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$"
          )
        },
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsVersion: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceBusManagementClientInternalListEntitiesHeaders: coreHttp.CompositeMapper = {
  serializedName: "ServiceBusManagementClientInternal_listEntitiesHeaders",
  type: {
    name: "Composite",
    className: "ServiceBusManagementClientInternalListEntitiesHeaders",
    modelProperties: {
      xMsRequestId: {
        constraints: {
          Pattern: new RegExp(
            "^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$"
          )
        },
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsVersion: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubscriptionGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "Subscription_getHeaders",
  type: {
    name: "Composite",
    className: "SubscriptionGetHeaders",
    modelProperties: {
      xMsRequestId: {
        constraints: {
          Pattern: new RegExp(
            "^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$"
          )
        },
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsVersion: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubscriptionPutHeaders: coreHttp.CompositeMapper = {
  serializedName: "Subscription_putHeaders",
  type: {
    name: "Composite",
    className: "SubscriptionPutHeaders",
    modelProperties: {
      xMsRequestId: {
        constraints: {
          Pattern: new RegExp(
            "^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$"
          )
        },
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsVersion: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubscriptionDeleteHeaders: coreHttp.CompositeMapper = {
  serializedName: "Subscription_deleteHeaders",
  type: {
    name: "Composite",
    className: "SubscriptionDeleteHeaders",
    modelProperties: {
      xMsRequestId: {
        constraints: {
          Pattern: new RegExp(
            "^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$"
          )
        },
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsVersion: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RuleGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "Rule_getHeaders",
  type: {
    name: "Composite",
    className: "RuleGetHeaders",
    modelProperties: {
      xMsRequestId: {
        constraints: {
          Pattern: new RegExp(
            "^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$"
          )
        },
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsVersion: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RulePutHeaders: coreHttp.CompositeMapper = {
  serializedName: "Rule_putHeaders",
  type: {
    name: "Composite",
    className: "RulePutHeaders",
    modelProperties: {
      xMsRequestId: {
        constraints: {
          Pattern: new RegExp(
            "^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$"
          )
        },
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsVersion: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RuleDeleteHeaders: coreHttp.CompositeMapper = {
  serializedName: "Rule_deleteHeaders",
  type: {
    name: "Composite",
    className: "RuleDeleteHeaders",
    modelProperties: {
      xMsRequestId: {
        constraints: {
          Pattern: new RegExp(
            "^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$"
          )
        },
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsVersion: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NamespaceGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "Namespace_getHeaders",
  type: {
    name: "Composite",
    className: "NamespaceGetHeaders",
    modelProperties: {
      xMsRequestId: {
        constraints: {
          Pattern: new RegExp(
            "^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$"
          )
        },
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      xMsVersion: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  RuleFilter: RuleFilter,
  RuleAction: RuleAction,
  "RuleFilter.CorrelationFilter": CorrelationFilter,
  "RuleFilter.SqlFilter": SqlFilter,
  "RuleAction.SqlRuleAction": SqlRuleAction,
  "RuleAction.EmptyRuleAction": EmptyRuleAction,
  "RuleFilter.TrueFilter": TrueFilter,
  "RuleFilter.FalseFilter": FalseFilter
};
