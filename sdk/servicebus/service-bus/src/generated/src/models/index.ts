/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export type RuleFilterUnion = RuleFilter | CorrelationFilter | SqlFilterUnion;
export type RuleActionUnion = RuleAction | SqlRuleAction | EmptyRuleAction;
export type SqlFilterUnion = SqlFilter | TrueFilter | FalseFilter;

/**
 * The request body for creating a topic.
 */
export interface CreateTopicBody {
  xmlns?: string;
  /**
   * The timestamp for when this topic was last updated
   */
  updated?: Date;
  /**
   * TopicDescription for the new topic.
   */
  content?: CreateTopicBodyContent;
}

/**
 * TopicDescription for the new topic.
 */
export interface CreateTopicBodyContent {
  /**
   * MIME type of content.
   */
  type?: string;
  /**
   * Topic information to create.
   */
  topicDescription?: TopicDescription;
}

/**
 * Description of a Service Bus topic resource.
 */
export interface TopicDescription {
  xmlns?: string;
  xmlnsI?: string;
  /**
   * ISO 8601 default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
   */
  defaultMessageTimeToLive?: string;
  /**
   * The maximum size of the topic in megabytes, which is the size of memory allocated for the topic.
   */
  maxSizeInMegabytes?: number;
  /**
   * A value indicating if this topic requires duplicate detection.
   */
  requiresDuplicateDetection?: boolean;
  /**
   * ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
   */
  duplicateDetectionHistoryTimeWindow?: string;
  /**
   * Value that indicates whether server-side batched operations are enabled.
   */
  enableBatchedOperations?: boolean;
  /**
   * The size of the topic, in bytes.
   */
  sizeInBytes?: number;
  /**
   * Filter messages before publishing.
   */
  filteringMessagesBeforePublishing?: boolean;
  /**
   * A value indicating if the resource can be accessed without authorization.
   */
  isAnonymousAccessible?: boolean;
  /**
   * Authorization rules for resource.
   */
  authorizationRules?: AuthorizationRule[];
  /**
   * Status of a Service Bus resource
   */
  status?: EntityStatus;
  /**
   * The exact time the topic was created.
   */
  createdAt?: Date;
  /**
   * The exact time a message was updated in the topic.
   */
  updatedAt?: Date;
  /**
   * Last time a message was sent, or the last time there was a receive request to this topic.
   */
  accessedAt?: Date;
  /**
   * A value that indicates whether the topic supports ordering.
   */
  supportOrdering?: boolean;
  /**
   * Details about the message counts in entity.
   */
  messageCountDetails?: MessageCountDetails;
  /**
   * The number of subscriptions in the topic.
   */
  subscriptionCount?: number;
  /**
   * ISO 8601 timeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
   */
  autoDeleteOnIdle?: string;
  /**
   * A value that indicates whether the topic is to be partitioned across multiple message brokers.
   */
  enablePartitioning?: boolean;
  /**
   * Availability status of the entity
   */
  entityAvailabilityStatus?: EntityAvailabilityStatus;
  /**
   * A value that indicates whether the topic's subscription is to be partitioned.
   */
  enableSubscriptionPartitioning?: boolean;
  /**
   * A value that indicates whether Express Entities are enabled. An express topic holds a message in memory temporarily before writing it to persistent storage.
   */
  enableExpress?: boolean;
  /**
   * Metadata associated with the topic.
   */
  userMetadata?: string;
}

/**
 * Authorization rule of an entity
 */
export interface AuthorizationRule {
  /**
   * The authorization type.
   */
  type?: string;
  /**
   * The claim type.
   */
  claimType?: string;
  /**
   * The claim value.
   */
  claimValue?: string;
  /**
   * Access rights of the entity. Values are 'Send', 'Listen', or 'Manage'
   */
  rights?: string[];
  /**
   * The date and time when the authorization rule was created.
   */
  createdTime?: Date;
  /**
   * The date and time when the authorization rule was modified.
   */
  modifiedTime?: Date;
  /**
   * The authorization rule key name
   */
  keyName?: string;
  /**
   * The primary key of the authorization rule
   */
  primaryKey?: string;
  /**
   * The primary key of the authorization rule
   */
  secondaryKey?: string;
}

/**
 * Details about the message counts in entity.
 */
export interface MessageCountDetails {
  /**
   * Number of active messages in the queue, topic, or subscription.
   */
  activeMessageCount?: number;
  /**
   * Number of messages that are dead lettered.
   */
  deadLetterMessageCount?: number;
  /**
   * Number of scheduled messages.
   */
  scheduledMessageCount?: number;
  /**
   * Number of messages transferred into dead letters.
   */
  transferDeadLetterMessageCount?: number;
  /**
   * Number of messages transferred to another queue, topic, or subscription.
   */
  transferMessageCount?: number;
}

/**
 * The error response from Service Bus.
 */
export interface ServiceBusManagementError {
  /**
   * The service error code.
   */
  code?: number;
  /**
   * The service error message.
   */
  detail?: string;
}

/**
 * The request body for creating a queue.
 */
export interface CreateQueueBody {
  xmlns?: string;
  /**
   * The timestamp for when this queue was last updated
   */
  updated?: Date;
  /**
   * QueueDescription for the new queue.
   */
  content?: CreateQueueBodyContent;
}

/**
 * QueueDescription for the new queue.
 */
export interface CreateQueueBodyContent {
  /**
   * MIME type of content.
   */
  type?: string;
  /**
   * Properties of the new queue.
   */
  queueDescription?: QueueDescription;
}

/**
 * Description of a Service Bus queue resource.
 */
export interface QueueDescription {
  xmlns?: string;
  xmlnsI?: string;
  /**
   * ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute.
   */
  lockDuration?: string;
  /**
   * The maximum size of the queue in megabytes, which is the size of memory allocated for the queue.
   */
  maxSizeInMegabytes?: number;
  /**
   * A value indicating if this queue requires duplicate detection.
   */
  requiresDuplicateDetection?: boolean;
  /**
   * A value that indicates whether the queue supports the concept of sessions.
   */
  requiresSession?: boolean;
  /**
   * ISO 8601 default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
   */
  defaultMessageTimeToLive?: string;
  /**
   * A value that indicates whether this queue has dead letter support when a message expires.
   */
  deadLetteringOnMessageExpiration?: boolean;
  /**
   * ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
   */
  duplicateDetectionHistoryTimeWindow?: string;
  /**
   * The maximum delivery count. A message is automatically deadlettered after this number of deliveries. Default value is 10.
   */
  maxDeliveryCount?: number;
  /**
   * Value that indicates whether server-side batched operations are enabled.
   */
  enableBatchedOperations?: boolean;
  /**
   * The size of the queue, in bytes.
   */
  sizeInBytes?: number;
  /**
   * The number of messages in the queue.
   */
  messageCount?: number;
  /**
   * A value indicating if the resource can be accessed without authorization.
   */
  isAnonymousAccessible?: boolean;
  /**
   * Authorization rules for resource.
   */
  authorizationRules?: AuthorizationRule[];
  /**
   * Status of a Service Bus resource
   */
  status?: EntityStatus;
  /**
   * The name of the recipient entity to which all the messages sent to the queue are forwarded to.
   */
  forwardTo?: string;
  /**
   * Custom metdata that user can associate with the description. Max length is 1024 chars.
   */
  userMetadata?: string;
  /**
   * The exact time the queue was created.
   */
  createdAt?: Date;
  /**
   * The exact time the entity description was last updated.
   */
  updatedAt?: Date;
  /**
   * Last time a message was sent, or the last time there was a receive request to this queue.
   */
  accessedAt?: Date;
  /**
   * A value that indicates whether the queue supports ordering.
   */
  supportOrdering?: boolean;
  /**
   * Details about the message counts in entity.
   */
  messageCountDetails?: MessageCountDetails;
  /**
   * ISO 8601 timeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes.
   */
  autoDeleteOnIdle?: string;
  /**
   * A value that indicates whether the queue is to be partitioned across multiple message brokers.
   */
  enablePartitioning?: boolean;
  /**
   * Availability status of the entity
   */
  entityAvailabilityStatus?: EntityAvailabilityStatus;
  /**
   * A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage.
   */
  enableExpress?: boolean;
  /**
   * The name of the recipient entity to which all the dead-lettered messages of this subscription are forwarded to.
   */
  forwardDeadLetteredMessagesTo?: string;
}

/**
 * Represents an entry in the feed when querying namespace info
 */
export interface NamespacePropertiesEntry {
  /**
   * The URL of the GET request
   */
  id?: string;
  /**
   * The name of the namespace.
   */
  title?: any;
  /**
   * The timestamp for when this namespace was last updated
   */
  updated?: Date;
  /**
   * The author that created this resource
   */
  author?: ResponseAuthor;
  /**
   * The URL for the HTTP request
   */
  link?: ResponseLink;
  /**
   * Information about the namespace.
   */
  content?: NamespacePropertiesEntryContent;
}

/**
 * The author that created this resource
 */
export interface ResponseAuthor {
  /**
   * The Service Bus namespace
   */
  name?: string;
}

/**
 * The URL for the HTTP request
 */
export interface ResponseLink {
  /**
   * The URL of the GET request
   */
  href?: string;
  /**
   * What the link href is relative to
   */
  rel?: string;
}

/**
 * Information about the namespace.
 */
export interface NamespacePropertiesEntryContent {
  /**
   * Type of content in namespace info response
   */
  type?: string;
  /**
   * The metadata related to a Service Bus namespace.
   */
  namespaceProperties?: NamespaceProperties;
}

/**
 * The metadata related to a Service Bus namespace.
 */
export interface NamespaceProperties {
  /**
   * Alias for the geo-disaster recovery Service Bus namespace.
   */
  alias?: string;
  /**
   * The exact time the namespace was created.
   */
  createdTime?: Date;
  /**
   * The SKU for the messaging entity.
   */
  messagingSku?: MessagingSku;
  /**
   * The number of messaging units allocated to the namespace.
   */
  messagingUnits?: number;
  /**
   * The exact time the namespace was last modified.
   */
  modifiedTime?: Date;
  /**
   * Name of the namespace
   */
  name?: string;
  /**
   * The type of entities the namespace can contain.
   */
  namespaceType?: NamespaceType;
}

/**
 * The request body for creating a subscription.
 */
export interface CreateSubscriptionBody {
  /**
   * SubscriptionDescription for the new subscription.
   */
  content?: CreateSubscriptionBodyContent;
}

/**
 * SubscriptionDescription for the new subscription.
 */
export interface CreateSubscriptionBodyContent {
  /**
   * MIME type of content.
   */
  type?: string;
  /**
   * Subscription information to create.
   */
  subscriptionDescription?: SubscriptionDescription;
}

/**
 * Description of a Service Bus subscription resource.
 */
export interface SubscriptionDescription {
  /**
   * ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute.
   */
  lockDuration?: string;
  /**
   * A value that indicates whether the subscription supports the concept of sessions.
   */
  requiresSession?: boolean;
  /**
   * ISO 8601 default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
   */
  defaultMessageTimeToLive?: string;
  /**
   * A value that indicates whether this subscription has dead letter support when a message expires.
   */
  deadLetteringOnMessageExpiration?: boolean;
  /**
   * A value that indicates whether this subscription has dead letter support when a message expires.
   */
  deadLetteringOnFilterEvaluationExceptions?: boolean;
  /**
   * The number of messages in the subscription.
   */
  messageCount?: number;
  /**
   * The maximum delivery count. A message is automatically deadlettered after this number of deliveries. Default value is 10.
   */
  maxDeliveryCount?: number;
  /**
   * Value that indicates whether server-side batched operations are enabled.
   */
  enableBatchedOperations?: boolean;
  /**
   * Status of a Service Bus resource
   */
  status?: EntityStatus;
  /**
   * The name of the recipient entity to which all the messages sent to the subscription are forwarded to.
   */
  forwardTo?: string;
  /**
   * The exact time the subscription was created.
   */
  createdAt?: Date;
  /**
   * The exact time a message was updated in the subscription.
   */
  updatedAt?: Date;
  /**
   * Last time a message was sent, or the last time there was a receive request to this subscription.
   */
  accessedAt?: Date;
  /**
   * Details about the message counts in entity.
   */
  messageCountDetails?: MessageCountDetails;
  /**
   * Metadata associated with the subscription. Maximum number of characters is 1024.
   */
  userMetadata?: string;
  /**
   * The name of the recipient entity to which all the messages sent to the subscription are forwarded to.
   */
  forwardDeadLetteredMessagesTo?: string;
  /**
   * ISO 8601 timeSpan idle interval after which the subscription is automatically deleted. The minimum duration is 5 minutes.
   */
  autoDeleteOnIdle?: string;
  /**
   * Availability status of the entity
   */
  entityAvailabilityStatus?: EntityAvailabilityStatus;
}

/**
 * The request body for creating a rule.
 */
export interface CreateRuleBody {
  /**
   * RuleDescription for the new Rule.
   */
  content?: CreateRuleBodyContent;
}

/**
 * RuleDescription for the new Rule.
 */
export interface CreateRuleBodyContent {
  /**
   * MIME type of content.
   */
  type?: string;
  /**
   * Rule information to create.
   */
  ruleDescription?: RuleDescription;
}

export interface RuleDescription {
  filter?: RuleFilterUnion;
  action?: RuleActionUnion;
  /**
   * The exact time the rule was created.
   */
  createdAt?: Date;
  name?: string;
}

export interface RuleFilter {
  /**
   * Polymorphic discriminator, which specifies the different types this object can be
   */
  type: "CorrelationFilter" | "SqlFilter" | "TrueFilter" | "FalseFilter";
}

export interface RuleAction {
  /**
   * Polymorphic discriminator, which specifies the different types this object can be
   */
  type: "SqlRuleAction" | "EmptyRuleAction";
}

/**
 * Represents an entry in the feed when querying queues
 */
export interface QueueDescriptionEntry {
  /**
   * Base URL for the query.
   */
  base?: string;
  /**
   * The URL of the GET request
   */
  id?: string;
  /**
   * The name of the queue
   */
  title?: any;
  /**
   * The timestamp for when this queue was published
   */
  published?: Date;
  /**
   * The timestamp for when this queue was last updated
   */
  updated?: Date;
  /**
   * The author that created this resource
   */
  author?: ResponseAuthor;
  /**
   * The URL for the HTTP request
   */
  link?: ResponseLink;
  /**
   * The QueueDescription
   */
  content?: QueueDescriptionEntryContent;
}

/**
 * The QueueDescription
 */
export interface QueueDescriptionEntryContent {
  /**
   * Type of content in queue response
   */
  type?: string;
  /**
   * Description of a Service Bus queue resource.
   */
  queueDescription?: QueueDescription;
}

/**
 * Response from listing Service Bus queues.
 */
export interface QueueDescriptionFeed {
  /**
   * URL of the list queues query.
   */
  id?: string;
  /**
   * The entity type for the feed.
   */
  title?: any;
  /**
   * Datetime of the query.
   */
  updated?: Date;
  /**
   * Links to paginated response.
   */
  link?: ResponseLink[];
  /**
   * Queue entries.
   */
  entry?: QueueDescriptionEntry[];
}

/**
 * Represents an entry in the feed when querying topics
 */
export interface TopicDescriptionEntry {
  /**
   * Base URL for the query.
   */
  base?: string;
  /**
   * The URL of the GET request
   */
  id?: string;
  /**
   * The name of the topic
   */
  title?: any;
  /**
   * The timestamp for when this topic was published
   */
  published?: Date;
  /**
   * The timestamp for when this topic was last updated
   */
  updated?: Date;
  /**
   * The author that created this resource
   */
  author?: ResponseAuthor;
  /**
   * The URL for the HTTP request
   */
  link?: ResponseLink;
  /**
   * The TopicDescription
   */
  content?: TopicDescriptionEntryContent;
}

/**
 * The TopicDescription
 */
export interface TopicDescriptionEntryContent {
  /**
   * Type of content in topic response
   */
  type?: string;
  /**
   * Description of a Service Bus topic resource.
   */
  topicDescription?: TopicDescription;
}

/**
 * Response from listing Service Bus topics.
 */
export interface TopicDescriptionFeed {
  /**
   * URL of the list topics query.
   */
  id?: string;
  /**
   * The entity type for the feed.
   */
  title?: any;
  /**
   * Datetime of the query.
   */
  updated?: Date;
  /**
   * Links to paginated response.
   */
  link?: ResponseLink[];
  /**
   * Topic entries.
   */
  entry?: TopicDescriptionEntry[];
}

/**
 * Represents an entry in the feed when querying subscriptions.
 */
export interface SubscriptionDescriptionEntry {
  /**
   * The URL of the GET request
   */
  id?: string;
  /**
   * The name of the subscription
   */
  title?: any;
  /**
   * The timestamp for when this subscription was published
   */
  published?: Date;
  /**
   * The timestamp for when this subscription was last updated
   */
  updated?: Date;
  /**
   * The URL for the HTTP request
   */
  link?: ResponseLink;
  /**
   * The SubscriptionDescription.
   */
  content?: SubscriptionDescriptionEntryContent;
}

/**
 * The SubscriptionDescription.
 */
export interface SubscriptionDescriptionEntryContent {
  /**
   * Type of content in subscription response
   */
  type?: string;
  /**
   * Description of a Service Bus subscription resource.
   */
  subscriptionDescription?: SubscriptionDescription;
}

/**
 * Response from listing Service Bus subscriptions.
 */
export interface SubscriptionDescriptionFeed {
  /**
   * URL of the list subscriptions query.
   */
  id?: string;
  /**
   * The entity type for the feed.
   */
  title?: any;
  /**
   * Datetime of the query.
   */
  updated?: Date;
  /**
   * Links to paginated response.
   */
  link?: ResponseLink[];
  /**
   * Subscription entries.
   */
  entry?: SubscriptionDescriptionEntry[];
}

/**
 * Key Values of custom properties
 */
export interface KeyValue {
  key?: string;
  value?: string;
}

/**
 * Represents an entry in the feed when querying rules
 */
export interface RuleDescriptionEntry {
  /**
   * The URL of the GET request
   */
  id?: string;
  /**
   * The name of the rule
   */
  title?: any;
  /**
   * The timestamp for when this rule was published
   */
  published?: Date;
  /**
   * The timestamp for when this rule was last updated
   */
  updated?: Date;
  /**
   * The URL for the HTTP request
   */
  link?: ResponseLink;
  /**
   * The RuleDescription
   */
  content?: RuleDescriptionEntryContent;
}

/**
 * The RuleDescription
 */
export interface RuleDescriptionEntryContent {
  /**
   * Type of content in rule response
   */
  type?: string;
  ruleDescription?: RuleDescription;
}

/**
 * Response from listing Service Bus rules.
 */
export interface RuleDescriptionFeed {
  /**
   * URL of the list rules query.
   */
  id?: string;
  /**
   * The entity type for the feed.
   */
  title?: any;
  /**
   * Datetime of the query.
   */
  updated?: Date;
  /**
   * Links to paginated response.
   */
  link?: ResponseLink[];
  /**
   * Rules entries.
   */
  entry?: RuleDescriptionEntry[];
}

export type CorrelationFilter = RuleFilter & {
  correlationId?: string;
  messageId?: string;
  to?: string;
  replyTo?: string;
  label?: string;
  sessionId?: string;
  replyToSessionId?: string;
  contentType?: string;
  properties?: KeyValue[];
};

export type SqlFilter = RuleFilter & {
  sqlExpression?: string;
  compatibilityLevel?: string;
  parameters?: KeyValue[];
  requiresPreprocessing?: boolean;
};

export type SqlRuleAction = RuleAction & {
  sqlExpression?: string;
  compatibilityLevel?: string;
  parameters?: KeyValue[];
  requiresPreprocessing?: boolean;
};

export type EmptyRuleAction = RuleAction & {};

export type TrueFilter = SqlFilter & {};

export type FalseFilter = SqlFilter & {};

/**
 * Defines headers for Entity_getTopic operation.
 */
export interface EntityGetTopicHeaders {
  /**
   * A server-generated UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsRequestId?: string;
  /**
   * The version of the REST protocol used to process the request.
   */
  xMsVersion?: string;
}

/**
 * Defines headers for Entity_putTopic operation.
 */
export interface EntityPutTopicHeaders {
  /**
   * A server-generated UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsRequestId?: string;
  /**
   * The version of the REST protocol used to process the request.
   */
  xMsVersion?: string;
}

/**
 * Defines headers for Entity_deleteTopic operation.
 */
export interface EntityDeleteTopicHeaders {
  /**
   * A server-generated UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsRequestId?: string;
  /**
   * The version of the REST protocol used to process the request.
   */
  xMsVersion?: string;
}

/**
 * Defines headers for Entity_getQueue operation.
 */
export interface EntityGetQueueHeaders {
  /**
   * A server-generated UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsRequestId?: string;
  /**
   * The version of the REST protocol used to process the request.
   */
  xMsVersion?: string;
}

/**
 * Defines headers for Entity_putQueue operation.
 */
export interface EntityPutQueueHeaders {
  /**
   * A server-generated UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsRequestId?: string;
  /**
   * The version of the REST protocol used to process the request.
   */
  xMsVersion?: string;
}

/**
 * Defines headers for Entity_deleteQueue operation.
 */
export interface EntityDeleteQueueHeaders {
  /**
   * A server-generated UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsRequestId?: string;
  /**
   * The version of the REST protocol used to process the request.
   */
  xMsVersion?: string;
}

/**
 * Defines headers for ServiceBusManagementClientInternal_listSubscriptions operation.
 */
export interface ServiceBusManagementClientInternalListSubscriptionsHeaders {
  /**
   * A server-generated UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsRequestId?: string;
  /**
   * The version of the REST protocol used to process the request.
   */
  xMsVersion?: string;
}

/**
 * Defines headers for ServiceBusManagementClientInternal_listRules operation.
 */
export interface ServiceBusManagementClientInternalListRulesHeaders {
  /**
   * A server-generated UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsRequestId?: string;
  /**
   * The version of the REST protocol used to process the request.
   */
  xMsVersion?: string;
}

/**
 * Defines headers for ServiceBusManagementClientInternal_listEntities operation.
 */
export interface ServiceBusManagementClientInternalListEntitiesHeaders {
  /**
   * A server-generated UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsRequestId?: string;
  /**
   * The version of the REST protocol used to process the request.
   */
  xMsVersion?: string;
}

/**
 * Defines headers for Subscription_get operation.
 */
export interface SubscriptionGetHeaders {
  /**
   * A server-generated UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsRequestId?: string;
  /**
   * The version of the REST protocol used to process the request.
   */
  xMsVersion?: string;
}

/**
 * Defines headers for Subscription_put operation.
 */
export interface SubscriptionPutHeaders {
  /**
   * A server-generated UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsRequestId?: string;
  /**
   * The version of the REST protocol used to process the request.
   */
  xMsVersion?: string;
}

/**
 * Defines headers for Subscription_delete operation.
 */
export interface SubscriptionDeleteHeaders {
  /**
   * A server-generated UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsRequestId?: string;
  /**
   * The version of the REST protocol used to process the request.
   */
  xMsVersion?: string;
}

/**
 * Defines headers for Rule_get operation.
 */
export interface RuleGetHeaders {
  /**
   * A server-generated UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsRequestId?: string;
  /**
   * The version of the REST protocol used to process the request.
   */
  xMsVersion?: string;
}

/**
 * Defines headers for Rule_put operation.
 */
export interface RulePutHeaders {
  /**
   * A server-generated UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsRequestId?: string;
  /**
   * The version of the REST protocol used to process the request.
   */
  xMsVersion?: string;
}

/**
 * Defines headers for Rule_delete operation.
 */
export interface RuleDeleteHeaders {
  /**
   * A server-generated UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsRequestId?: string;
  /**
   * The version of the REST protocol used to process the request.
   */
  xMsVersion?: string;
}

/**
 * Defines headers for Namespace_get operation.
 */
export interface NamespaceGetHeaders {
  /**
   * A server-generated UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsRequestId?: string;
  /**
   * The version of the REST protocol used to process the request.
   */
  xMsVersion?: string;
}

/**
 * Defines values for EntityStatus.
 */
export type EntityStatus =
  | "Active"
  | "Creating"
  | "Deleting"
  | "Disabled"
  | "ReceiveDisabled"
  | "Renaming"
  | "Restoring"
  | "SendDisabled"
  | "Unknown";
/**
 * Defines values for EntityAvailabilityStatus.
 */
export type EntityAvailabilityStatus =
  | "Available"
  | "Limited"
  | "Renaming"
  | "Restoring"
  | "Unknown";
/**
 * Defines values for MessagingSku.
 */
export type MessagingSku = "Basic" | "Standard" | "Premium";
/**
 * Defines values for NamespaceType.
 */
export type NamespaceType =
  | "Messaging"
  | "NotificationHub"
  | "Mixed"
  | "EventHub"
  | "Relay";
/**
 * Defines values for AccessRights.
 */
export type AccessRights = "Manage" | "Send" | "Listen";

/**
 * Optional parameters.
 */
export interface EntityGetTopicOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * A query parameter that sets enrich to true or false.
   */
  enrich?: boolean;
}

/**
 * Contains response data for the getTopic operation.
 */
export type EntityGetTopicResponse = CreateTopicBody & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CreateTopicBody;
  };
};

/**
 * Optional parameters.
 */
export interface EntityPutTopicOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Match condition for an entity to be updated. If specified and a matching entity is not found, an error will be raised. To force an unconditional update, set to the wildcard character (*). If not specified, an insert will be performed when no existing entity is found to update and a replace will be performed if an existing entity is found.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the putTopic operation.
 */
export type EntityPutTopicResponse = {
  /**
   * The parsed response body.
   */
  body: any;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: any;
  };
};

/**
 * Contains response data for the deleteTopic operation.
 */
export type EntityDeleteTopicResponse = CreateTopicBody & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CreateTopicBody;
  };
};

/**
 * Optional parameters.
 */
export interface EntityGetQueueOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * A query parameter that sets enrich to true or false.
   */
  enrich?: boolean;
}

/**
 * Contains response data for the getQueue operation.
 */
export type EntityGetQueueResponse = CreateQueueBody & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CreateQueueBody;
  };
};

/**
 * Optional parameters.
 */
export interface EntityPutQueueOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Match condition for an entity to be updated. If specified and a matching entity is not found, an error will be raised. To force an unconditional update, set to the wildcard character (*). If not specified, an insert will be performed when no existing entity is found to update and a replace will be performed if an existing entity is found.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the putQueue operation.
 */
export type EntityPutQueueResponse = {
  /**
   * The parsed response body.
   */
  body: any;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: any;
  };
};

/**
 * Contains response data for the deleteQueue operation.
 */
export type EntityDeleteQueueResponse = CreateQueueBody & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CreateQueueBody;
  };
};

/**
 * Optional parameters.
 */
export interface ServiceBusManagementClientInternalListSubscriptionsOptionalParams
  extends coreHttp.OperationOptions {
  skip?: number;
  top?: number;
}

/**
 * Contains response data for the listSubscriptions operation.
 */
export type ServiceBusManagementClientInternalListSubscriptionsResponse = {
  /**
   * The parsed response body.
   */
  body: any;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: any;
  };
};

/**
 * Optional parameters.
 */
export interface ServiceBusManagementClientInternalListRulesOptionalParams
  extends coreHttp.OperationOptions {
  skip?: number;
  top?: number;
}

/**
 * Contains response data for the listRules operation.
 */
export type ServiceBusManagementClientInternalListRulesResponse = {
  /**
   * The parsed response body.
   */
  body: any;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: any;
  };
};

/**
 * Optional parameters.
 */
export interface ServiceBusManagementClientInternalListEntitiesOptionalParams
  extends coreHttp.OperationOptions {
  skip?: number;
  top?: number;
}

/**
 * Contains response data for the listEntities operation.
 */
export type ServiceBusManagementClientInternalListEntitiesResponse = {
  /**
   * The parsed response body.
   */
  body: any;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: any;
  };
};

/**
 * Optional parameters.
 */
export interface SubscriptionGetOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * A query parameter that sets enrich to true or false.
   */
  enrich?: boolean;
}

/**
 * Contains response data for the get operation.
 */
export type SubscriptionGetResponse = {
  /**
   * The parsed response body.
   */
  body: any;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: any;
  };
};

/**
 * Optional parameters.
 */
export interface SubscriptionPutOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Match condition for an entity to be updated. If specified and a matching entity is not found, an error will be raised. To force an unconditional update, set to the wildcard character (*). If not specified, an insert will be performed when no existing entity is found to update and a replace will be performed if an existing entity is found.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the put operation.
 */
export type SubscriptionPutResponse = {
  /**
   * The parsed response body.
   */
  body: any;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: any;
  };
};

/**
 * Contains response data for the delete operation.
 */
export type SubscriptionDeleteResponse = {
  /**
   * The parsed response body.
   */
  body: any;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: any;
  };
};

/**
 * Optional parameters.
 */
export interface RuleGetOptionalParams extends coreHttp.OperationOptions {
  /**
   * A query parameter that sets enrich to true or false.
   */
  enrich?: boolean;
}

/**
 * Contains response data for the get operation.
 */
export type RuleGetResponse = {
  /**
   * The parsed response body.
   */
  body: any;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: any;
  };
};

/**
 * Optional parameters.
 */
export interface RulePutOptionalParams extends coreHttp.OperationOptions {
  /**
   * Match condition for an entity to be updated. If specified and a matching entity is not found, an error will be raised. To force an unconditional update, set to the wildcard character (*). If not specified, an insert will be performed when no existing entity is found to update and a replace will be performed if an existing entity is found.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the put operation.
 */
export type RulePutResponse = {
  /**
   * The parsed response body.
   */
  body: any;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: any;
  };
};

/**
 * Contains response data for the delete operation.
 */
export type RuleDeleteResponse = {
  /**
   * The parsed response body.
   */
  body: any;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: any;
  };
};

/**
 * Contains response data for the get operation.
 */
export type NamespaceGetResponse = NamespacePropertiesEntry & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NamespacePropertiesEntry;
  };
};

/**
 * Optional parameters.
 */
export interface ServiceBusManagementClientInternalOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
