/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "./generated/src/models/mappers";
import * as Parameters from "./generated/src/models/parameters";
import { ServiceBusManagementClientInternal } from "./generated/src/serviceBusManagementClientInternal";
import {
  EntityGetOptionalParams,
  EntityGetResponse,
  EntityPutOptionalParams,
  EntityPutResponse,
  EntityDeleteResponse
} from "./generated/src/models";

/**
 * Class representing a Entity.
 */
export class EntityDuplicate {
  private readonly client: ServiceBusManagementClientInternal;

  /**
   * Initialize a new instance of the class Entity class.
   * @param client Reference to the service client
   */
  constructor(client: ServiceBusManagementClientInternal) {
    this.client = client;
  }

  /**
   * Get the details about the Queue or Topic with the given entityName.
   * @param entityName The name of the queue or topic relative to the Service Bus namespace.
   * @param options The options parameters.
   */
  get(entityName: string, options?: EntityGetOptionalParams): Promise<EntityGetResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { entityName, options: operationOptions },
      getOperationSpec
    ) as Promise<EntityGetResponse>;
  }

  /**
   * Create or update a queue or topic at the provided entityName
   * @param entityName The name of the queue or topic relative to the Service Bus namespace.
   * @param requestBody Parameters required to make or edit a queue or topic.
   * @param options The options parameters.
   */
  put(
    entityName: string,
    requestBody: any,
    options?: EntityPutOptionalParams
  ): Promise<EntityPutResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { entityName, requestBody, options: operationOptions },
      putOperationSpec
    ) as Promise<EntityPutResponse>;
  }

  /**
   * Delete the Queue or Topic with the given entityName.
   * @param entityName The name of the queue or topic relative to the Service Bus namespace.
   * @param options The options parameters.
   */
  delete(entityName: string, options?: coreHttp.OperationOptions): Promise<EntityDeleteResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { entityName, options: operationOptions },
      deleteOperationSpec
    ) as Promise<EntityDeleteResponse>;
  }
}
// Operation Specifications

const xmlSerializer = new coreHttp.Serializer(Mappers, /* isXml */ true);

const getOperationSpec: coreHttp.OperationSpec = {
  path: "/{entityName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    default: {
      bodyMapper: Mappers.ServiceBusManagementError,
      headersMapper: Mappers.EntityGetHeaders
    }
  },
  queryParameters: [Parameters.enrich, Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.entityName],
  isXML: true,
  serializer: xmlSerializer
};
const putOperationSpec: coreHttp.OperationSpec = {
  path: "/{entityName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    201: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    default: {
      bodyMapper: Mappers.ServiceBusManagementError,
      headersMapper: Mappers.EntityPutHeaders
    }
  },
  requestBody: Parameters.requestBody,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.entityName],
  headerParameters: [Parameters.contentType, Parameters.ifMatch],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "xml",
  serializer: xmlSerializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path: "/{entityName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: { type: { name: "any" }, serializedName: "any" }
    },
    default: {
      bodyMapper: Mappers.ServiceBusManagementError,
      headersMapper: Mappers.EntityDeleteHeaders
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.entityName],
  isXML: true,
  serializer: xmlSerializer
};
