/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/hierarchySettingsOperationsMappers";
import * as Parameters from "../models/parameters";
import { ManagementGroupsAPIContext } from "../managementGroupsAPIContext";

/** Class representing a HierarchySettingsOperations. */
export class HierarchySettingsOperations {
  private readonly client: ManagementGroupsAPIContext;

  /**
   * Create a HierarchySettingsOperations.
   * @param {ManagementGroupsAPIContext} client Reference to the service client.
   */
  constructor(client: ManagementGroupsAPIContext) {
    this.client = client;
  }

  /**
   * Gets all the hierarchy settings defined at the Management Group level. Settings can only be set
   * on the root Management Group of the hierarchy.
   * @param groupId Management Group ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.HierarchySettingsListResponse>
   */
  list(groupId: string, options?: msRest.RequestOptionsBase): Promise<Models.HierarchySettingsListResponse>;
  /**
   * @param groupId Management Group ID.
   * @param callback The callback
   */
  list(groupId: string, callback: msRest.ServiceCallback<Models.HierarchySettingsList>): void;
  /**
   * @param groupId Management Group ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(groupId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HierarchySettingsList>): void;
  list(groupId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HierarchySettingsList>, callback?: msRest.ServiceCallback<Models.HierarchySettingsList>): Promise<Models.HierarchySettingsListResponse> {
    return this.client.sendOperationRequest(
      {
        groupId,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.HierarchySettingsListResponse>;
  }

  /**
   * Gets the hierarchy settings defined at the Management Group level. Settings can only be set on
   * the root Management Group of the hierarchy.
   * @param groupId Management Group ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.HierarchySettingsGetResponse>
   */
  get(groupId: string, options?: msRest.RequestOptionsBase): Promise<Models.HierarchySettingsGetResponse>;
  /**
   * @param groupId Management Group ID.
   * @param callback The callback
   */
  get(groupId: string, callback: msRest.ServiceCallback<Models.HierarchySettings>): void;
  /**
   * @param groupId Management Group ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(groupId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HierarchySettings>): void;
  get(groupId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HierarchySettings>, callback?: msRest.ServiceCallback<Models.HierarchySettings>): Promise<Models.HierarchySettingsGetResponse> {
    return this.client.sendOperationRequest(
      {
        groupId,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.HierarchySettingsGetResponse>;
  }

  /**
   * Creates or updates the hierarchy settings defined at the Management Group level.
   * @param groupId Management Group ID.
   * @param createTenantSettingsRequest Tenant level settings request parameter.
   * @param [options] The optional parameters
   * @returns Promise<Models.HierarchySettingsCreateOrUpdateResponse>
   */
  createOrUpdate(groupId: string, createTenantSettingsRequest: Models.CreateOrUpdateSettingsRequest, options?: msRest.RequestOptionsBase): Promise<Models.HierarchySettingsCreateOrUpdateResponse>;
  /**
   * @param groupId Management Group ID.
   * @param createTenantSettingsRequest Tenant level settings request parameter.
   * @param callback The callback
   */
  createOrUpdate(groupId: string, createTenantSettingsRequest: Models.CreateOrUpdateSettingsRequest, callback: msRest.ServiceCallback<Models.HierarchySettings>): void;
  /**
   * @param groupId Management Group ID.
   * @param createTenantSettingsRequest Tenant level settings request parameter.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(groupId: string, createTenantSettingsRequest: Models.CreateOrUpdateSettingsRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HierarchySettings>): void;
  createOrUpdate(groupId: string, createTenantSettingsRequest: Models.CreateOrUpdateSettingsRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HierarchySettings>, callback?: msRest.ServiceCallback<Models.HierarchySettings>): Promise<Models.HierarchySettingsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        groupId,
        createTenantSettingsRequest,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.HierarchySettingsCreateOrUpdateResponse>;
  }

  /**
   * Updates the hierarchy settings defined at the Management Group level.
   * @param groupId Management Group ID.
   * @param createTenantSettingsRequest Tenant level settings request parameter.
   * @param [options] The optional parameters
   * @returns Promise<Models.HierarchySettingsUpdateResponse>
   */
  update(groupId: string, createTenantSettingsRequest: Models.CreateOrUpdateSettingsRequest, options?: msRest.RequestOptionsBase): Promise<Models.HierarchySettingsUpdateResponse>;
  /**
   * @param groupId Management Group ID.
   * @param createTenantSettingsRequest Tenant level settings request parameter.
   * @param callback The callback
   */
  update(groupId: string, createTenantSettingsRequest: Models.CreateOrUpdateSettingsRequest, callback: msRest.ServiceCallback<Models.HierarchySettings>): void;
  /**
   * @param groupId Management Group ID.
   * @param createTenantSettingsRequest Tenant level settings request parameter.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(groupId: string, createTenantSettingsRequest: Models.CreateOrUpdateSettingsRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HierarchySettings>): void;
  update(groupId: string, createTenantSettingsRequest: Models.CreateOrUpdateSettingsRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HierarchySettings>, callback?: msRest.ServiceCallback<Models.HierarchySettings>): Promise<Models.HierarchySettingsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        groupId,
        createTenantSettingsRequest,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.HierarchySettingsUpdateResponse>;
  }

  /**
   * Deletes the hierarchy settings defined at the Management Group level.
   * @param groupId Management Group ID.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(groupId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param groupId Management Group ID.
   * @param callback The callback
   */
  deleteMethod(groupId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param groupId Management Group ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(groupId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(groupId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        groupId,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Management/managementGroups/{groupId}/settings",
  urlParameters: [
    Parameters.groupId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HierarchySettingsList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Management/managementGroups/{groupId}/settings/default",
  urlParameters: [
    Parameters.groupId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HierarchySettings
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "providers/Microsoft.Management/managementGroups/{groupId}/settings/default",
  urlParameters: [
    Parameters.groupId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "createTenantSettingsRequest",
    mapper: {
      ...Mappers.CreateOrUpdateSettingsRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.HierarchySettings
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "providers/Microsoft.Management/managementGroups/{groupId}/settings/default",
  urlParameters: [
    Parameters.groupId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "createTenantSettingsRequest",
    mapper: {
      ...Mappers.CreateOrUpdateSettingsRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.HierarchySettings
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "providers/Microsoft.Management/managementGroups/{groupId}/settings/default",
  urlParameters: [
    Parameters.groupId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
