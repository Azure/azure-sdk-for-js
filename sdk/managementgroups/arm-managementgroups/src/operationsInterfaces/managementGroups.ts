/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  ManagementGroupInfo,
  ManagementGroupsListOptionalParams,
  DescendantInfo,
  ManagementGroupsGetDescendantsOptionalParams,
  ManagementGroupsGetOptionalParams,
  ManagementGroupsGetResponse,
  CreateManagementGroupRequest,
  ManagementGroupsCreateOrUpdateOptionalParams,
  ManagementGroupsCreateOrUpdateResponse,
  PatchManagementGroupRequest,
  ManagementGroupsUpdateOptionalParams,
  ManagementGroupsUpdateResponse,
  ManagementGroupsDeleteOptionalParams,
  ManagementGroupsDeleteResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a ManagementGroups. */
export interface ManagementGroups {
  /**
   * List management groups for the authenticated user.
   *
   * @param options The options parameters.
   */
  list(
    options?: ManagementGroupsListOptionalParams
  ): PagedAsyncIterableIterator<ManagementGroupInfo>;
  /**
   * List all entities that descend from a management group.
   *
   * @param groupId Management Group ID.
   * @param options The options parameters.
   */
  listDescendants(
    groupId: string,
    options?: ManagementGroupsGetDescendantsOptionalParams
  ): PagedAsyncIterableIterator<DescendantInfo>;
  /**
   * Get the details of the management group.
   *
   * @param groupId Management Group ID.
   * @param options The options parameters.
   */
  get(
    groupId: string,
    options?: ManagementGroupsGetOptionalParams
  ): Promise<ManagementGroupsGetResponse>;
  /**
   * Create or update a management group.
   * If a management group is already created and a subsequent create request is issued with different
   * properties, the management group properties will be updated.
   *
   * @param groupId Management Group ID.
   * @param createManagementGroupRequest Management group creation parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    groupId: string,
    createManagementGroupRequest: CreateManagementGroupRequest,
    options?: ManagementGroupsCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ManagementGroupsCreateOrUpdateResponse>,
      ManagementGroupsCreateOrUpdateResponse
    >
  >;
  /**
   * Create or update a management group.
   * If a management group is already created and a subsequent create request is issued with different
   * properties, the management group properties will be updated.
   *
   * @param groupId Management Group ID.
   * @param createManagementGroupRequest Management group creation parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    groupId: string,
    createManagementGroupRequest: CreateManagementGroupRequest,
    options?: ManagementGroupsCreateOrUpdateOptionalParams
  ): Promise<ManagementGroupsCreateOrUpdateResponse>;
  /**
   * Update a management group.
   *
   * @param groupId Management Group ID.
   * @param patchGroupRequest Management group patch parameters.
   * @param options The options parameters.
   */
  update(
    groupId: string,
    patchGroupRequest: PatchManagementGroupRequest,
    options?: ManagementGroupsUpdateOptionalParams
  ): Promise<ManagementGroupsUpdateResponse>;
  /**
   * Delete management group.
   * If a management group contains child resources, the request will fail.
   *
   * @param groupId Management Group ID.
   * @param options The options parameters.
   */
  beginDelete(
    groupId: string,
    options?: ManagementGroupsDeleteOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ManagementGroupsDeleteResponse>,
      ManagementGroupsDeleteResponse
    >
  >;
  /**
   * Delete management group.
   * If a management group contains child resources, the request will fail.
   *
   * @param groupId Management Group ID.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    groupId: string,
    options?: ManagementGroupsDeleteOptionalParams
  ): Promise<ManagementGroupsDeleteResponse>;
}
