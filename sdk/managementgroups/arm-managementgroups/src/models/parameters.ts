/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  CreateManagementGroupRequest as CreateManagementGroupRequestMapper,
  PatchManagementGroupRequest as PatchManagementGroupRequestMapper,
  CreateOrUpdateSettingsRequest as CreateOrUpdateSettingsRequestMapper,
  CheckNameAvailabilityRequest as CheckNameAvailabilityRequestMapper
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2021-04-01",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const cacheControl: OperationParameter = {
  parameterPath: ["options", "cacheControl"],
  mapper: {
    defaultValue: "no-cache",
    serializedName: "Cache-Control",
    type: {
      name: "String"
    }
  }
};

export const skiptoken: OperationQueryParameter = {
  parameterPath: ["options", "skiptoken"],
  mapper: {
    serializedName: "$skiptoken",
    type: {
      name: "String"
    }
  }
};

export const groupId: OperationURLParameter = {
  parameterPath: "groupId",
  mapper: {
    serializedName: "groupId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const expand: OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const recurse: OperationQueryParameter = {
  parameterPath: ["options", "recurse"],
  mapper: {
    serializedName: "$recurse",
    type: {
      name: "Boolean"
    }
  }
};

export const filter: OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const createManagementGroupRequest: OperationParameter = {
  parameterPath: "createManagementGroupRequest",
  mapper: CreateManagementGroupRequestMapper
};

export const patchGroupRequest: OperationParameter = {
  parameterPath: "patchGroupRequest",
  mapper: PatchManagementGroupRequestMapper
};

export const top: OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    serializedName: "$top",
    type: {
      name: "Number"
    }
  }
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const createTenantSettingsRequest: OperationParameter = {
  parameterPath: "createTenantSettingsRequest",
  mapper: CreateOrUpdateSettingsRequestMapper
};

export const checkNameAvailabilityRequest: OperationParameter = {
  parameterPath: "checkNameAvailabilityRequest",
  mapper: CheckNameAvailabilityRequestMapper
};

export const skip: OperationQueryParameter = {
  parameterPath: ["options", "skip"],
  mapper: {
    serializedName: "$skip",
    type: {
      name: "Number"
    }
  }
};

export const select: OperationQueryParameter = {
  parameterPath: ["options", "select"],
  mapper: {
    serializedName: "$select",
    type: {
      name: "String"
    }
  }
};

export const search: OperationQueryParameter = {
  parameterPath: ["options", "search"],
  mapper: {
    serializedName: "$search",
    type: {
      name: "String"
    }
  }
};

export const view: OperationQueryParameter = {
  parameterPath: ["options", "view"],
  mapper: {
    serializedName: "$view",
    type: {
      name: "String"
    }
  }
};

export const groupName: OperationQueryParameter = {
  parameterPath: ["options", "groupName"],
  mapper: {
    serializedName: "groupName",
    type: {
      name: "String"
    }
  }
};
