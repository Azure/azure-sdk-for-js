/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const ManagementGroupListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementGroupListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagementGroupInfo"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagementGroupInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementGroupInfo",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetails"
        }
      }
    }
  }
};

export const ErrorDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetails",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagementGroup: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementGroup",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "properties.details",
        type: {
          name: "Composite",
          className: "ManagementGroupDetails"
        }
      },
      children: {
        serializedName: "properties.children",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagementGroupChildInfo"
            }
          }
        }
      }
    }
  }
};

export const ManagementGroupDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementGroupDetails",
    modelProperties: {
      version: {
        serializedName: "version",
        type: {
          name: "Number"
        }
      },
      updatedTime: {
        serializedName: "updatedTime",
        type: {
          name: "DateTime"
        }
      },
      updatedBy: {
        serializedName: "updatedBy",
        type: {
          name: "String"
        }
      },
      parent: {
        serializedName: "parent",
        type: {
          name: "Composite",
          className: "ParentGroupInfo"
        }
      },
      path: {
        serializedName: "path",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagementGroupPathElement"
            }
          }
        }
      },
      managementGroupAncestors: {
        serializedName: "managementGroupAncestors",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      managementGroupAncestorsChain: {
        serializedName: "managementGroupAncestorsChain",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagementGroupPathElement"
            }
          }
        }
      }
    }
  }
};

export const ParentGroupInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ParentGroupInfo",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagementGroupPathElement: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementGroupPathElement",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagementGroupChildInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementGroupChildInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      children: {
        serializedName: "children",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagementGroupChildInfo"
            }
          }
        }
      }
    }
  }
};

export const CreateManagementGroupRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreateManagementGroupRequest",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "properties.tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        nullable: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "properties.details",
        type: {
          name: "Composite",
          className: "CreateManagementGroupDetails"
        }
      },
      children: {
        serializedName: "properties.children",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CreateManagementGroupChildInfo"
            }
          }
        }
      }
    }
  }
};

export const CreateManagementGroupDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreateManagementGroupDetails",
    modelProperties: {
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      updatedTime: {
        serializedName: "updatedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      updatedBy: {
        serializedName: "updatedBy",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      parent: {
        serializedName: "parent",
        type: {
          name: "Composite",
          className: "CreateParentGroupInfo"
        }
      }
    }
  }
};

export const CreateParentGroupInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreateParentGroupInfo",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateManagementGroupChildInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreateManagementGroupChildInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      children: {
        serializedName: "children",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CreateManagementGroupChildInfo"
            }
          }
        }
      }
    }
  }
};

export const AzureAsyncOperationResults: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureAsyncOperationResults",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PatchManagementGroupRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PatchManagementGroupRequest",
    modelProperties: {
      displayName: {
        serializedName: "displayName",
        nullable: true,
        type: {
          name: "String"
        }
      },
      parentGroupId: {
        serializedName: "parentGroupId",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DescendantListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DescendantListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DescendantInfo"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DescendantInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DescendantInfo",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        nullable: true,
        type: {
          name: "String"
        }
      },
      parent: {
        serializedName: "properties.parent",
        type: {
          name: "Composite",
          className: "DescendantParentGroupInfo"
        }
      }
    }
  }
};

export const DescendantParentGroupInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DescendantParentGroupInfo",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubscriptionUnderManagementGroup: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubscriptionUnderManagementGroup",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenant: {
        serializedName: "properties.tenant",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      parent: {
        serializedName: "properties.parent",
        type: {
          name: "Composite",
          className: "DescendantParentGroupInfo"
        }
      },
      state: {
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListSubscriptionUnderManagementGroup: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListSubscriptionUnderManagementGroup",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubscriptionUnderManagementGroup"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HierarchySettingsList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HierarchySettingsList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HierarchySettingsInfo"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HierarchySettingsInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HierarchySettingsInfo",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      },
      requireAuthorizationForGroupCreation: {
        serializedName: "properties.requireAuthorizationForGroupCreation",
        type: {
          name: "Boolean"
        }
      },
      defaultManagementGroup: {
        serializedName: "properties.defaultManagementGroup",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HierarchySettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HierarchySettings",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      },
      requireAuthorizationForGroupCreation: {
        serializedName: "properties.requireAuthorizationForGroupCreation",
        type: {
          name: "Boolean"
        }
      },
      defaultManagementGroup: {
        serializedName: "properties.defaultManagementGroup",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateOrUpdateSettingsRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreateOrUpdateSettingsRequest",
    modelProperties: {
      requireAuthorizationForGroupCreation: {
        serializedName: "properties.requireAuthorizationForGroupCreation",
        type: {
          name: "Boolean"
        }
      },
      defaultManagementGroup: {
        serializedName: "properties.defaultManagementGroup",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplayProperties"
        }
      }
    }
  }
};

export const OperationDisplayProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplayProperties",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        defaultValue: "Microsoft.Management/managementGroups",
        isConstant: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityResult",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Invalid", "AlreadyExists"]
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EntityListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EntityListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EntityInfo"
            }
          }
        }
      },
      count: {
        serializedName: "count",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EntityInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EntityInfo",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "properties.tenantId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        nullable: true,
        type: {
          name: "String"
        }
      },
      parent: {
        serializedName: "properties.parent",
        type: {
          name: "Composite",
          className: "EntityParentGroupInfo"
        }
      },
      permissions: {
        serializedName: "properties.permissions",
        nullable: true,
        type: {
          name: "String"
        }
      },
      inheritedPermissions: {
        serializedName: "properties.inheritedPermissions",
        nullable: true,
        type: {
          name: "String"
        }
      },
      numberOfDescendants: {
        serializedName: "properties.numberOfDescendants",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      numberOfChildren: {
        serializedName: "properties.numberOfChildren",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      numberOfChildGroups: {
        serializedName: "properties.numberOfChildGroups",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      parentDisplayNameChain: {
        serializedName: "properties.parentDisplayNameChain",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      parentNameChain: {
        serializedName: "properties.parentNameChain",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const EntityParentGroupInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EntityParentGroupInfo",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TenantBackfillStatusResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TenantBackfillStatusResult",
    modelProperties: {
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "NotStarted",
            "NotStartedButGroupsExist",
            "Started",
            "Failed",
            "Cancelled",
            "Completed"
          ]
        }
      }
    }
  }
};

export const OperationResults: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationResults",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EntityHierarchyItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EntityHierarchyItem",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      permissions: {
        serializedName: "properties.permissions",
        type: {
          name: "String"
        }
      },
      children: {
        serializedName: "properties.children",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EntityHierarchyItem"
            }
          }
        }
      }
    }
  }
};

export const ManagementGroupsCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementGroupsCreateOrUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagementGroupsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementGroupsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};
