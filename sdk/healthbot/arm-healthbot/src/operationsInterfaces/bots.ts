/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import type { PagedAsyncIterableIterator } from "@azure/core-paging";
import type { SimplePollerLike, OperationState } from "@azure/core-lro";
import type {
  HealthBot,
  BotsListByResourceGroupOptionalParams,
  BotsListOptionalParams,
  BotsCreateOptionalParams,
  BotsCreateResponse,
  BotsGetOptionalParams,
  BotsGetResponse,
  HealthBotUpdateParameters,
  BotsUpdateOptionalParams,
  BotsUpdateResponse,
  BotsDeleteOptionalParams,
  BotsListSecretsOptionalParams,
  BotsListSecretsResponse,
  BotsRegenerateApiJwtSecretOptionalParams,
  BotsRegenerateApiJwtSecretResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Bots. */
export interface Bots {
  /**
   * Returns all the resources of a particular type belonging to a resource group
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: BotsListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<HealthBot>;
  /**
   * Returns all the resources of a particular type belonging to a subscription.
   * @param options The options parameters.
   */
  list(options?: BotsListOptionalParams): PagedAsyncIterableIterator<HealthBot>;
  /**
   * Create a new Azure Health Bot.
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param botName The name of the Bot resource.
   * @param parameters The parameters to provide for the created Azure Health Bot.
   * @param options The options parameters.
   */
  beginCreate(
    resourceGroupName: string,
    botName: string,
    parameters: HealthBot,
    options?: BotsCreateOptionalParams,
  ): Promise<
    SimplePollerLike<OperationState<BotsCreateResponse>, BotsCreateResponse>
  >;
  /**
   * Create a new Azure Health Bot.
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param botName The name of the Bot resource.
   * @param parameters The parameters to provide for the created Azure Health Bot.
   * @param options The options parameters.
   */
  beginCreateAndWait(
    resourceGroupName: string,
    botName: string,
    parameters: HealthBot,
    options?: BotsCreateOptionalParams,
  ): Promise<BotsCreateResponse>;
  /**
   * Get a HealthBot.
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param botName The name of the Bot resource.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    botName: string,
    options?: BotsGetOptionalParams,
  ): Promise<BotsGetResponse>;
  /**
   * Patch a HealthBot.
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param botName The name of the Bot resource.
   * @param parameters The parameters to provide for the required Azure Health Bot.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    botName: string,
    parameters: HealthBotUpdateParameters,
    options?: BotsUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<OperationState<BotsUpdateResponse>, BotsUpdateResponse>
  >;
  /**
   * Patch a HealthBot.
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param botName The name of the Bot resource.
   * @param parameters The parameters to provide for the required Azure Health Bot.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    botName: string,
    parameters: HealthBotUpdateParameters,
    options?: BotsUpdateOptionalParams,
  ): Promise<BotsUpdateResponse>;
  /**
   * Delete a HealthBot.
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param botName The name of the Bot resource.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    botName: string,
    options?: BotsDeleteOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Delete a HealthBot.
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param botName The name of the Bot resource.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    botName: string,
    options?: BotsDeleteOptionalParams,
  ): Promise<void>;
  /**
   * List all secrets of a HealthBot.
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param botName The name of the Bot resource.
   * @param options The options parameters.
   */
  listSecrets(
    resourceGroupName: string,
    botName: string,
    options?: BotsListSecretsOptionalParams,
  ): Promise<BotsListSecretsResponse>;
  /**
   * Regenerate the API JWT Secret of a HealthBot.
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param botName The name of the Bot resource.
   * @param options The options parameters.
   */
  regenerateApiJwtSecret(
    resourceGroupName: string,
    botName: string,
    options?: BotsRegenerateApiJwtSecretOptionalParams,
  ): Promise<BotsRegenerateApiJwtSecretResponse>;
}
