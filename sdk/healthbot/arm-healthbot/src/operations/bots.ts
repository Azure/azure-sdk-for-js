/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/botsMappers";
import * as Parameters from "../models/parameters";
import { HealthbotClientContext } from "../healthbotClientContext";

/** Class representing a Bots. */
export class Bots {
  private readonly client: HealthbotClientContext;

  /**
   * Create a Bots.
   * @param {HealthbotClientContext} client Reference to the service client.
   */
  constructor(client: HealthbotClientContext) {
    this.client = client;
  }

  /**
   * Create a new HealthBot.
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param botName The name of the Bot resource.
   * @param parameters The parameters to provide for the created bot.
   * @param [options] The optional parameters
   * @returns Promise<Models.BotsCreateResponse>
   */
  create(resourceGroupName: string, botName: string, parameters: Models.HealthBot, options?: msRest.RequestOptionsBase): Promise<Models.BotsCreateResponse> {
    return this.beginCreate(resourceGroupName,botName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.BotsCreateResponse>;
  }

  /**
   * Get a HealthBot.
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param botName The name of the Bot resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.BotsGetResponse>
   */
  get(resourceGroupName: string, botName: string, options?: msRest.RequestOptionsBase): Promise<Models.BotsGetResponse>;
  /**
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param botName The name of the Bot resource.
   * @param callback The callback
   */
  get(resourceGroupName: string, botName: string, callback: msRest.ServiceCallback<Models.HealthBot>): void;
  /**
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param botName The name of the Bot resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, botName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HealthBot>): void;
  get(resourceGroupName: string, botName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HealthBot>, callback?: msRest.ServiceCallback<Models.HealthBot>): Promise<Models.BotsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        botName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.BotsGetResponse>;
  }

  /**
   * Patch a HealthBot.
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param botName The name of the Bot resource.
   * @param parameters The parameters to provide for the required bot.
   * @param [options] The optional parameters
   * @returns Promise<Models.BotsUpdateResponse>
   */
  update(resourceGroupName: string, botName: string, parameters: Models.HealthBotUpdateParameters, options?: msRest.RequestOptionsBase): Promise<Models.BotsUpdateResponse>;
  /**
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param botName The name of the Bot resource.
   * @param parameters The parameters to provide for the required bot.
   * @param callback The callback
   */
  update(resourceGroupName: string, botName: string, parameters: Models.HealthBotUpdateParameters, callback: msRest.ServiceCallback<Models.HealthBot>): void;
  /**
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param botName The name of the Bot resource.
   * @param parameters The parameters to provide for the required bot.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, botName: string, parameters: Models.HealthBotUpdateParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HealthBot>): void;
  update(resourceGroupName: string, botName: string, parameters: Models.HealthBotUpdateParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HealthBot>, callback?: msRest.ServiceCallback<Models.HealthBot>): Promise<Models.BotsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        botName,
        parameters,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.BotsUpdateResponse>;
  }

  /**
   * Delete a HealthBot.
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param botName The name of the Bot resource.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, botName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,botName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Returns all the resources of a particular type belonging to a resource group
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.BotsListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.BotsListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.BotResponseList>): void;
  /**
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BotResponseList>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BotResponseList>, callback?: msRest.ServiceCallback<Models.BotResponseList>): Promise<Models.BotsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.BotsListByResourceGroupResponse>;
  }

  /**
   * Returns all the resources of a particular type belonging to a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.BotsListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.BotsListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.BotResponseList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BotResponseList>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BotResponseList>, callback?: msRest.ServiceCallback<Models.BotResponseList>): Promise<Models.BotsListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.BotsListResponse>;
  }

  /**
   * Create a new HealthBot.
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param botName The name of the Bot resource.
   * @param parameters The parameters to provide for the created bot.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreate(resourceGroupName: string, botName: string, parameters: Models.HealthBot, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        botName,
        parameters,
        options
      },
      beginCreateOperationSpec,
      options);
  }

  /**
   * Delete a HealthBot.
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param botName The name of the Bot resource.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, botName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        botName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Returns all the resources of a particular type belonging to a resource group
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.BotsListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.BotsListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.BotResponseList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BotResponseList>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BotResponseList>, callback?: msRest.ServiceCallback<Models.BotResponseList>): Promise<Models.BotsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.BotsListByResourceGroupNextResponse>;
  }

  /**
   * Returns all the resources of a particular type belonging to a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.BotsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.BotsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.BotResponseList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BotResponseList>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BotResponseList>, callback?: msRest.ServiceCallback<Models.BotResponseList>): Promise<Models.BotsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.BotsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HealthBot/healthBots/{botName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.botName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HealthBot
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HealthBot/healthBots/{botName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.botName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.HealthBotUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.HealthBot
    },
    201: {
      bodyMapper: Mappers.HealthBot
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HealthBot/healthBots",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BotResponseList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.HealthBot/healthBots",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BotResponseList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const beginCreateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HealthBot/healthBots/{botName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.botName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.HealthBot,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.HealthBot
    },
    201: {
      bodyMapper: Mappers.HealthBot
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HealthBot/healthBots/{botName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.botName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BotResponseList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BotResponseList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
