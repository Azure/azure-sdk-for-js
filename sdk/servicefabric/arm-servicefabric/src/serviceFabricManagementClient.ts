/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import { TokenCredential } from "@azure/core-auth";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as operations from "./operations";
import { ServiceFabricManagementClientContext } from "./serviceFabricManagementClientContext";


class ServiceFabricManagementClient extends ServiceFabricManagementClientContext {
  // Operation groups
  clusters: operations.Clusters;
  clusterVersions: operations.ClusterVersions;
  operations: operations.Operations;
  applicationTypes: operations.ApplicationTypes;
  applicationTypeVersions: operations.ApplicationTypeVersions;
  applications: operations.Applications;
  services: operations.Services;
  managedClusters: operations.ManagedClusters;
  managedClusterVersions: operations.ManagedClusterVersions;
  nodeTypes: operations.NodeTypes;

  /**
   * Initializes a new instance of the ServiceFabricManagementClient class.
   * @param credentials Credentials needed for the client to connect to Azure. Credentials
   * implementing the TokenCredential interface from the @azure/identity package are recommended. For
   * more information about these credentials, see
   * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
   * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
   * @azure/ms-rest-browserauth are also supported.
   * @param subscriptionId The customer subscription identifier.
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials | TokenCredential, subscriptionId: string, options?: Models.ServiceFabricManagementClientOptions) {
    super(credentials, subscriptionId, options);
    this.clusters = new operations.Clusters(this);
    this.clusterVersions = new operations.ClusterVersions(this);
    this.operations = new operations.Operations(this);
    this.applicationTypes = new operations.ApplicationTypes(this);
    this.applicationTypeVersions = new operations.ApplicationTypeVersions(this);
    this.applications = new operations.Applications(this);
    this.services = new operations.Services(this);
    this.managedClusters = new operations.ManagedClusters(this);
    this.managedClusterVersions = new operations.ManagedClusterVersions(this);
    this.nodeTypes = new operations.NodeTypes(this);
  }
}

// Operation Specifications

export {
  ServiceFabricManagementClient,
  ServiceFabricManagementClientContext,
  Models as ServiceFabricManagementModels,
  Mappers as ServiceFabricManagementMappers
};
export * from "./operations";
