/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/managedClusterVersionsMappers";
import * as Parameters from "../models/parameters";
import { ServiceFabricManagementClientContext } from "../serviceFabricManagementClientContext";

/** Class representing a ManagedClusterVersions. */
export class ManagedClusterVersions {
  private readonly client: ServiceFabricManagementClientContext;

  /**
   * Create a ManagedClusterVersions.
   * @param {ServiceFabricManagementClientContext} client Reference to the service client.
   */
  constructor(client: ServiceFabricManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets all available code versions for Service Fabric cluster resources by OS type.
   * @summary Gets the list of Service Fabric cluster code versions available for the specified OS
   * type.
   * @param location The location for the cluster code versions. This is different from cluster
   * location.
   * @param osType The operating system of the cluster. Possible values include: 'Windows', 'Ubuntu',
   * 'RedHat', 'Ubuntu18_04'
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagedClusterVersionsListByOSResponse>
   */
  listByOS(location: string, osType: Models.OsType1, options?: msRest.RequestOptionsBase): Promise<Models.ManagedClusterVersionsListByOSResponse>;
  /**
   * @param location The location for the cluster code versions. This is different from cluster
   * location.
   * @param osType The operating system of the cluster. Possible values include: 'Windows', 'Ubuntu',
   * 'RedHat', 'Ubuntu18_04'
   * @param callback The callback
   */
  listByOS(location: string, osType: Models.OsType1, callback: msRest.ServiceCallback<Models.ManagedClusterVersionDetails[]>): void;
  /**
   * @param location The location for the cluster code versions. This is different from cluster
   * location.
   * @param osType The operating system of the cluster. Possible values include: 'Windows', 'Ubuntu',
   * 'RedHat', 'Ubuntu18_04'
   * @param options The optional parameters
   * @param callback The callback
   */
  listByOS(location: string, osType: Models.OsType1, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagedClusterVersionDetails[]>): void;
  listByOS(location: string, osType: Models.OsType1, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ManagedClusterVersionDetails[]>, callback?: msRest.ServiceCallback<Models.ManagedClusterVersionDetails[]>): Promise<Models.ManagedClusterVersionsListByOSResponse> {
    return this.client.sendOperationRequest(
      {
        location,
        osType,
        options
      },
      listByOSOperationSpec,
      callback) as Promise<Models.ManagedClusterVersionsListByOSResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByOSOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabric/managedclusters/locations/{location}/osType/{osType}/clusterVersions",
  urlParameters: [
    Parameters.location,
    Parameters.osType,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedClusterVersionDetails"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
