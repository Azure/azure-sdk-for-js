/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/nodeTypesMappers";
import * as Parameters from "../models/parameters";
import { ServiceFabricManagementClientContext } from "../serviceFabricManagementClientContext";

/** Class representing a NodeTypes. */
export class NodeTypes {
  private readonly client: ServiceFabricManagementClientContext;

  /**
   * Create a NodeTypes.
   * @param {ServiceFabricManagementClientContext} client Reference to the service client.
   */
  constructor(client: ServiceFabricManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets all Node types of the specified managed cluster.
   * @summary Gets the list of Node types of the specified managed cluster.
   * @param resourceGroupName The name of the resource group.
   * @param clusterName The name of the cluster resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.NodeTypesListByManagedClustersResponse>
   */
  listByManagedClusters(resourceGroupName: string, clusterName: string, options?: msRest.RequestOptionsBase): Promise<Models.NodeTypesListByManagedClustersResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param clusterName The name of the cluster resource.
   * @param callback The callback
   */
  listByManagedClusters(resourceGroupName: string, clusterName: string, callback: msRest.ServiceCallback<Models.NodeTypeListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param clusterName The name of the cluster resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByManagedClusters(resourceGroupName: string, clusterName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NodeTypeListResult>): void;
  listByManagedClusters(resourceGroupName: string, clusterName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NodeTypeListResult>, callback?: msRest.ServiceCallback<Models.NodeTypeListResult>): Promise<Models.NodeTypesListByManagedClustersResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        clusterName,
        options
      },
      listByManagedClustersOperationSpec,
      callback) as Promise<Models.NodeTypesListByManagedClustersResponse>;
  }

  /**
   * Restarts one or more nodes on the node type. It will disable the fabric nodes, trigger a restart
   * on the VMs and activate the nodes back again.
   * @summary Restarts one or more nodes on the node type.
   * @param resourceGroupName The name of the resource group.
   * @param clusterName The name of the cluster resource.
   * @param nodeTypeName The name of the node type.
   * @param parameters parameters for restart action.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  restart(resourceGroupName: string, clusterName: string, nodeTypeName: string, parameters: Models.NodeTypeActionParameters, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginRestart(resourceGroupName,clusterName,nodeTypeName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Reimages one or more nodes on the node type. It will disable the fabric nodes, trigger a reimage
   * on the VMs and activate the nodes back again.
   * @summary Reimages one or more nodes on the node type.
   * @param resourceGroupName The name of the resource group.
   * @param clusterName The name of the cluster resource.
   * @param nodeTypeName The name of the node type.
   * @param parameters parameters for reimage action.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  reimage(resourceGroupName: string, clusterName: string, nodeTypeName: string, parameters: Models.NodeTypeActionParameters, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginReimage(resourceGroupName,clusterName,nodeTypeName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Deletes one or more nodes on the node type. It will disable the fabric nodes, trigger a delete
   * on the VMs and removes the state from the cluster.
   * @summary Deletes one or more nodes on the node type.
   * @param resourceGroupName The name of the resource group.
   * @param clusterName The name of the cluster resource.
   * @param nodeTypeName The name of the node type.
   * @param parameters parameters for delete action.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteNode(resourceGroupName: string, clusterName: string, nodeTypeName: string, parameters: Models.NodeTypeActionParameters, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteNode(resourceGroupName,clusterName,nodeTypeName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Get a Service Fabric node type of a given managed cluster.
   * @summary Gets a Service Fabric node type.
   * @param resourceGroupName The name of the resource group.
   * @param clusterName The name of the cluster resource.
   * @param nodeTypeName The name of the node type.
   * @param [options] The optional parameters
   * @returns Promise<Models.NodeTypesGetResponse>
   */
  get(resourceGroupName: string, clusterName: string, nodeTypeName: string, options?: msRest.RequestOptionsBase): Promise<Models.NodeTypesGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param clusterName The name of the cluster resource.
   * @param nodeTypeName The name of the node type.
   * @param callback The callback
   */
  get(resourceGroupName: string, clusterName: string, nodeTypeName: string, callback: msRest.ServiceCallback<Models.NodeType>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param clusterName The name of the cluster resource.
   * @param nodeTypeName The name of the node type.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, clusterName: string, nodeTypeName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NodeType>): void;
  get(resourceGroupName: string, clusterName: string, nodeTypeName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NodeType>, callback?: msRest.ServiceCallback<Models.NodeType>): Promise<Models.NodeTypesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        clusterName,
        nodeTypeName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.NodeTypesGetResponse>;
  }

  /**
   * Create or update a Service Fabric node type of a given managed cluster.
   * @summary Creates or updates a Service Fabric node type.
   * @param resourceGroupName The name of the resource group.
   * @param clusterName The name of the cluster resource.
   * @param nodeTypeName The name of the node type.
   * @param parameters The node type resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.NodeTypesCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, clusterName: string, nodeTypeName: string, parameters: Models.NodeType, options?: msRest.RequestOptionsBase): Promise<Models.NodeTypesCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,clusterName,nodeTypeName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.NodeTypesCreateOrUpdateResponse>;
  }

  /**
   * Update the configuration of a node type of a given managed cluster.
   * @summary Updates the configuration of a node type of a given managed cluster.
   * @param resourceGroupName The name of the resource group.
   * @param clusterName The name of the cluster resource.
   * @param nodeTypeName The name of the node type.
   * @param parameters The parameters to update the node type configuration.
   * @param [options] The optional parameters
   * @returns Promise<Models.NodeTypesUpdateResponse>
   */
  update(resourceGroupName: string, clusterName: string, nodeTypeName: string, parameters: Models.NodeTypeUpdateParameters, options?: msRest.RequestOptionsBase): Promise<Models.NodeTypesUpdateResponse> {
    return this.beginUpdate(resourceGroupName,clusterName,nodeTypeName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.NodeTypesUpdateResponse>;
  }

  /**
   * Delete a Service Fabric node type of a given managed cluster.
   * @summary Deletes a Service Fabric node type.
   * @param resourceGroupName The name of the resource group.
   * @param clusterName The name of the cluster resource.
   * @param nodeTypeName The name of the node type.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, clusterName: string, nodeTypeName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,clusterName,nodeTypeName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Restarts one or more nodes on the node type. It will disable the fabric nodes, trigger a restart
   * on the VMs and activate the nodes back again.
   * @summary Restarts one or more nodes on the node type.
   * @param resourceGroupName The name of the resource group.
   * @param clusterName The name of the cluster resource.
   * @param nodeTypeName The name of the node type.
   * @param parameters parameters for restart action.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginRestart(resourceGroupName: string, clusterName: string, nodeTypeName: string, parameters: Models.NodeTypeActionParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        clusterName,
        nodeTypeName,
        parameters,
        options
      },
      beginRestartOperationSpec,
      options);
  }

  /**
   * Reimages one or more nodes on the node type. It will disable the fabric nodes, trigger a reimage
   * on the VMs and activate the nodes back again.
   * @summary Reimages one or more nodes on the node type.
   * @param resourceGroupName The name of the resource group.
   * @param clusterName The name of the cluster resource.
   * @param nodeTypeName The name of the node type.
   * @param parameters parameters for reimage action.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginReimage(resourceGroupName: string, clusterName: string, nodeTypeName: string, parameters: Models.NodeTypeActionParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        clusterName,
        nodeTypeName,
        parameters,
        options
      },
      beginReimageOperationSpec,
      options);
  }

  /**
   * Deletes one or more nodes on the node type. It will disable the fabric nodes, trigger a delete
   * on the VMs and removes the state from the cluster.
   * @summary Deletes one or more nodes on the node type.
   * @param resourceGroupName The name of the resource group.
   * @param clusterName The name of the cluster resource.
   * @param nodeTypeName The name of the node type.
   * @param parameters parameters for delete action.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteNode(resourceGroupName: string, clusterName: string, nodeTypeName: string, parameters: Models.NodeTypeActionParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        clusterName,
        nodeTypeName,
        parameters,
        options
      },
      beginDeleteNodeOperationSpec,
      options);
  }

  /**
   * Create or update a Service Fabric node type of a given managed cluster.
   * @summary Creates or updates a Service Fabric node type.
   * @param resourceGroupName The name of the resource group.
   * @param clusterName The name of the cluster resource.
   * @param nodeTypeName The name of the node type.
   * @param parameters The node type resource.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, clusterName: string, nodeTypeName: string, parameters: Models.NodeType, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        clusterName,
        nodeTypeName,
        parameters,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Update the configuration of a node type of a given managed cluster.
   * @summary Updates the configuration of a node type of a given managed cluster.
   * @param resourceGroupName The name of the resource group.
   * @param clusterName The name of the cluster resource.
   * @param nodeTypeName The name of the node type.
   * @param parameters The parameters to update the node type configuration.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(resourceGroupName: string, clusterName: string, nodeTypeName: string, parameters: Models.NodeTypeUpdateParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        clusterName,
        nodeTypeName,
        parameters,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * Delete a Service Fabric node type of a given managed cluster.
   * @summary Deletes a Service Fabric node type.
   * @param resourceGroupName The name of the resource group.
   * @param clusterName The name of the cluster resource.
   * @param nodeTypeName The name of the node type.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, clusterName: string, nodeTypeName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        clusterName,
        nodeTypeName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Gets all Node types of the specified managed cluster.
   * @summary Gets the list of Node types of the specified managed cluster.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.NodeTypesListByManagedClustersNextResponse>
   */
  listByManagedClustersNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.NodeTypesListByManagedClustersNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByManagedClustersNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.NodeTypeListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByManagedClustersNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NodeTypeListResult>): void;
  listByManagedClustersNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NodeTypeListResult>, callback?: msRest.ServiceCallback<Models.NodeTypeListResult>): Promise<Models.NodeTypesListByManagedClustersNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByManagedClustersNextOperationSpec,
      callback) as Promise<Models.NodeTypesListByManagedClustersNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByManagedClustersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/managedClusters/{clusterName}/nodeTypes",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.clusterName
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NodeTypeListResult
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/managedClusters/{clusterName}/nodeTypes/{nodeTypeName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName,
    Parameters.nodeTypeName
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NodeType
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const beginRestartOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/managedClusters/{clusterName}/nodeTypes/{nodeTypeName}/restart",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName,
    Parameters.nodeTypeName
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.NodeTypeActionParameters,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const beginReimageOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/managedClusters/{clusterName}/nodeTypes/{nodeTypeName}/reimage",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName,
    Parameters.nodeTypeName
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.NodeTypeActionParameters,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const beginDeleteNodeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/managedClusters/{clusterName}/nodeTypes/{nodeTypeName}/deleteNode",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName,
    Parameters.nodeTypeName
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.NodeTypeActionParameters,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/managedClusters/{clusterName}/nodeTypes/{nodeTypeName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName,
    Parameters.nodeTypeName
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.NodeType,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.NodeType
    },
    201: {
      bodyMapper: Mappers.NodeType
    },
    202: {
      bodyMapper: Mappers.NodeType
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/managedClusters/{clusterName}/nodeTypes/{nodeTypeName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName,
    Parameters.nodeTypeName
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.NodeTypeUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.NodeType
    },
    202: {
      bodyMapper: Mappers.NodeType
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/managedClusters/{clusterName}/nodeTypes/{nodeTypeName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName,
    Parameters.nodeTypeName
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const listByManagedClustersNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NodeTypeListResult
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
