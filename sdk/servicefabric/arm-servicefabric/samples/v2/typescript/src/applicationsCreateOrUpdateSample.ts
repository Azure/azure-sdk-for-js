/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import {
  ApplicationResource,
  ServiceFabricManagementClient
} from "@azure/arm-servicefabric";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to Create or update a Service Fabric application resource with the specified name.
 *
 * @summary Create or update a Service Fabric application resource with the specified name.
 * x-ms-original-file: specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationPutOperation_example_max.json
 */
async function putAnApplicationWithMaximumParameters() {
  const subscriptionId = "00000000-0000-0000-0000-000000000000";
  const resourceGroupName = "resRg";
  const clusterName = "myCluster";
  const applicationName = "myApp";
  const parameters: ApplicationResource = {
    maximumNodes: 3,
    metrics: [
      {
        name: "metric1",
        maximumCapacity: 3,
        reservationCapacity: 1,
        totalApplicationCapacity: 5
      }
    ],
    minimumNodes: 1,
    parameters: { param1: "value1" },
    removeApplicationCapacity: false,
    tags: {},
    typeName: "myAppType",
    typeVersion: "1.0",
    upgradePolicy: {
      applicationHealthPolicy: {
        considerWarningAsError: true,
        defaultServiceTypeHealthPolicy: {
          maxPercentUnhealthyPartitionsPerService: 0,
          maxPercentUnhealthyReplicasPerPartition: 0,
          maxPercentUnhealthyServices: 0
        },
        maxPercentUnhealthyDeployedApplications: 0
      },
      forceRestart: false,
      rollingUpgradeMonitoringPolicy: {
        failureAction: "Rollback",
        healthCheckRetryTimeout: "00:10:00",
        healthCheckStableDuration: "00:05:00",
        healthCheckWaitDuration: "00:02:00",
        upgradeDomainTimeout: "1.06:00:00",
        upgradeTimeout: "01:00:00"
      },
      upgradeMode: "Monitored",
      upgradeReplicaSetCheckTimeout: "01:00:00"
    }
  };
  const credential = new DefaultAzureCredential();
  const client = new ServiceFabricManagementClient(credential, subscriptionId);
  const result = await client.applications.beginCreateOrUpdateAndWait(
    resourceGroupName,
    clusterName,
    applicationName,
    parameters
  );
  console.log(result);
}

putAnApplicationWithMaximumParameters().catch(console.error);

/**
 * This sample demonstrates how to Create or update a Service Fabric application resource with the specified name.
 *
 * @summary Create or update a Service Fabric application resource with the specified name.
 * x-ms-original-file: specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationPutOperation_example_min.json
 */
async function putAnApplicationWithMinimumParameters() {
  const subscriptionId = "00000000-0000-0000-0000-000000000000";
  const resourceGroupName = "resRg";
  const clusterName = "myCluster";
  const applicationName = "myApp";
  const parameters: ApplicationResource = {
    location: "eastus",
    removeApplicationCapacity: false,
    tags: {},
    typeName: "myAppType",
    typeVersion: "1.0"
  };
  const credential = new DefaultAzureCredential();
  const client = new ServiceFabricManagementClient(credential, subscriptionId);
  const result = await client.applications.beginCreateOrUpdateAndWait(
    resourceGroupName,
    clusterName,
    applicationName,
    parameters
  );
  console.log(result);
}

putAnApplicationWithMinimumParameters().catch(console.error);

/**
 * This sample demonstrates how to Create or update a Service Fabric application resource with the specified name.
 *
 * @summary Create or update a Service Fabric application resource with the specified name.
 * x-ms-original-file: specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationPutOperation_recreate_example.json
 */
async function putAnApplicationWithRecreateOption() {
  const subscriptionId = "00000000-0000-0000-0000-000000000000";
  const resourceGroupName = "resRg";
  const clusterName = "myCluster";
  const applicationName = "myApp";
  const parameters: ApplicationResource = {
    parameters: { param1: "value1" },
    tags: {},
    typeName: "myAppType",
    typeVersion: "1.0",
    upgradePolicy: { recreateApplication: true }
  };
  const credential = new DefaultAzureCredential();
  const client = new ServiceFabricManagementClient(credential, subscriptionId);
  const result = await client.applications.beginCreateOrUpdateAndWait(
    resourceGroupName,
    clusterName,
    applicationName,
    parameters
  );
  console.log(result);
}

putAnApplicationWithRecreateOption().catch(console.error);
