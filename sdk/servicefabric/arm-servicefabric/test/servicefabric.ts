/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  env,
  record,
  RecorderEnvironmentSetup,
  Recorder,
  delay,
  isPlaybackMode
} from "@azure-tools/test-recorder";
import * as assert from "assert";
import { ClientSecretCredential } from "@azure/identity";
import { ServiceFabricManagementClient } from "../src/serviceFabricManagementClient";
import { resourceGroupName } from "../src/models/parameters";

const recorderEnvSetup: RecorderEnvironmentSetup = {
  replaceableVariables: {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
  },
  customizationsOnRecordings: [
    (recording: any): any =>
      recording.replace(
        /"access_token":"[^"]*"/g,
        `"access_token":"access_token"`
      )
  ],
  queryParametersToSkip: []
};

export const testPollingOptions = {
  updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};

describe("ServiceFabric test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: ServiceFabricManagementClient;
  let location: string;
  let resourceGroup: string;
  let clusterName: string;
  let applicationTypeName: string;

  beforeEach(async function() {
    recorder = record(this, recorderEnvSetup);
    subscriptionId = env.SUBSCRIPTION_ID;
    // This is an example of how the environment variables are used
    const credential = new ClientSecretCredential(
      env.AZURE_TENANT_ID,
      env.AZURE_CLIENT_ID,
      env.AZURE_CLIENT_SECRET
    );
    client = new ServiceFabricManagementClient(credential, subscriptionId);
    location = "eastus";
    resourceGroup = "myjstest";
    clusterName = "myclusterxxxy";
    applicationTypeName = "myapplicationtypexxxy";
  });

  afterEach(async function() {
    await recorder.stop();
  });

  it("clusters create test", async function() {
    const res = await client.clusters.beginCreateOrUpdateAndWait(resourceGroup,clusterName,{
      type: "Microsoft.ServiceFabric/clusters",
        location: location,
        id: "/subscriptions/" + subscriptionId + "/resourceGroups/" + resourceGroup + "/providers/Microsoft.ServiceFabric/clusters/" + clusterName,
        name: "myCluster",
        managementEndpoint: "http://myCluster.eastus.cloudapp.azure.com:19080",
        fabricSettings: [
            {
                name: "UpgradeService",
                parameters: [
                    {
                        name: "AppPollIntervalInSeconds",
                        value: "60"
                    }
                ]
            }
        ],
        diagnosticsStorageAccountConfig: {
            storageAccountName: "diag",
            protectedAccountKeyName: "StorageAccountKey1",
            blobEndpoint: "https://diag.blob.core.windows.net/",
            queueEndpoint: "https://diag.queue.core.windows.net/",
            tableEndpoint: "https://diag.table.core.windows.net/"
        },
        nodeTypes: [
            {
                name: "nt1vm",
                clientConnectionEndpointPort: 19000,
                httpGatewayEndpointPort: 19007,
                applicationPorts: {
                    startPort: 20000,
                    endPort: 30000
                },
                ephemeralPorts: {
                    startPort: 49000,
                    endPort: 64000
                },
                isPrimary: true,
                vmInstanceCount: 5,
                durabilityLevel: "Bronze"
            }
        ],
        reliabilityLevel: "Silver",
        upgradeMode: "Automatic"
    },testPollingOptions);
    assert.equal(res.name,clusterName);
  });

  it("applicationTypes create test", async function() {
    const res = await client.applicationTypes.createOrUpdate(resourceGroup,clusterName,applicationTypeName,{
        type: "applicationTypes",
        location: location,
        id: "/subscriptions/" + subscriptionId + "/resourceGroups/" + resourceGroup + "/providers/Microsoft.ServiceFabric/clusters/" + clusterName + "/applicationTypes/" + applicationTypeName,
        name: "myCluster"
    })
    assert.equal(res.name,applicationTypeName);
  });

  it("clusters get test", async function() {
    const res = await client.clusters.get(resourceGroup,clusterName)
    assert.equal(res.name,clusterName);
  });

  it("applicationTypes get test", async function() {
    const res = await client.applicationTypes.get(resourceGroup,clusterName,applicationTypeName)
    assert.equal(res.name,applicationTypeName);
  });

  it("clusters list test", async function() {
    const res = (await client.clusters.listByResourceGroup(resourceGroup)).value
    assert.equal(res?.length,1)
  });

  it("applicationTypes list test", async function() {
    const res = await client.applicationTypes.list(resourceGroup,clusterName)
    assert.equal(res.value?.length,1)
  });

  it("clusters update test", async function() {
    if(isPlaybackMode()) { 
      this.skip(); 
    }
    const res = await client.clusters.beginUpdateAndWait(resourceGroup,clusterName,{
      tags: {
            a: "b"
        },
        nodeTypes: [
            {
                name: "nt1vm",
                clientConnectionEndpointPort: 19000,
                httpGatewayEndpointPort: 19007,
                applicationPorts: {
                    startPort: 20000,
                    endPort: 30000
                },
                ephemeralPorts: {
                    startPort: 49000,
                    endPort: 64000
                },
                isPrimary: true,
                vmInstanceCount: 5,
                durabilityLevel: "Bronze"
            },
            {
                name: "testnt1",
                clientConnectionEndpointPort: 0,
                httpGatewayEndpointPort: 0,
                applicationPorts: {
                    startPort: 1000,
                    endPort: 2000
                },
                ephemeralPorts: {
                    startPort: 3000,
                    endPort: 4000
                },
                isPrimary: false,
                vmInstanceCount: 3,
                durabilityLevel: "Bronze"
            }
        ],
        reliabilityLevel: "Bronze",
        upgradeMode: "Automatic",
        eventStoreServiceEnabled: true
    },testPollingOptions);
    assert.equal(res.upgradeMode,"Automatic");
  });

  it("applicationTypes delete test", async function() {
    const resDelete = await client.applicationTypes.beginDeleteAndWait(resourceGroup,clusterName,applicationTypeName,testPollingOptions);
    const res = await client.applicationTypes.list(resourceGroup,clusterName)
    assert.equal(res.value?.length,0)
  });

  it("clusters delete test", async function() {
    const resDelete = await client.clusters.delete(resourceGroup,clusterName);
    const res = (await client.clusters.listByResourceGroup(resourceGroup)).value
    assert.equal(res?.length,0)
  });
});
