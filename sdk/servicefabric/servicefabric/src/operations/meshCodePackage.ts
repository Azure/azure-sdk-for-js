/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/meshCodePackageMappers";
import * as Parameters from "../models/parameters";
import { ServiceFabricClientContext } from "../serviceFabricClientContext";

/** Class representing a MeshCodePackage. */
export class MeshCodePackage {
  private readonly client: ServiceFabricClientContext;

  /**
   * Create a MeshCodePackage.
   * @param {ServiceFabricClientContext} client Reference to the service client.
   */
  constructor(client: ServiceFabricClientContext) {
    this.client = client;
  }

  /**
   * Gets the logs for the container of the specified code package of the service replica.
   * @summary Gets the logs from the container.
   * @param applicationResourceName The identity of the application.
   * @param serviceResourceName The identity of the service.
   * @param replicaName Service Fabric replica name.
   * @param codePackageName The name of code package of the service.
   * @param [options] The optional parameters
   * @returns Promise<Models.MeshCodePackageGetContainerLogsResponse>
   */
  getContainerLogs(applicationResourceName: string, serviceResourceName: string, replicaName: string, codePackageName: string, options?: Models.MeshCodePackageGetContainerLogsOptionalParams): Promise<Models.MeshCodePackageGetContainerLogsResponse>;
  /**
   * @param applicationResourceName The identity of the application.
   * @param serviceResourceName The identity of the service.
   * @param replicaName Service Fabric replica name.
   * @param codePackageName The name of code package of the service.
   * @param callback The callback
   */
  getContainerLogs(applicationResourceName: string, serviceResourceName: string, replicaName: string, codePackageName: string, callback: msRest.ServiceCallback<Models.ContainerLogs>): void;
  /**
   * @param applicationResourceName The identity of the application.
   * @param serviceResourceName The identity of the service.
   * @param replicaName Service Fabric replica name.
   * @param codePackageName The name of code package of the service.
   * @param options The optional parameters
   * @param callback The callback
   */
  getContainerLogs(applicationResourceName: string, serviceResourceName: string, replicaName: string, codePackageName: string, options: Models.MeshCodePackageGetContainerLogsOptionalParams, callback: msRest.ServiceCallback<Models.ContainerLogs>): void;
  getContainerLogs(applicationResourceName: string, serviceResourceName: string, replicaName: string, codePackageName: string, options?: Models.MeshCodePackageGetContainerLogsOptionalParams | msRest.ServiceCallback<Models.ContainerLogs>, callback?: msRest.ServiceCallback<Models.ContainerLogs>): Promise<Models.MeshCodePackageGetContainerLogsResponse> {
    return this.client.sendOperationRequest(
      {
        applicationResourceName,
        serviceResourceName,
        replicaName,
        codePackageName,
        options
      },
      getContainerLogsOperationSpec,
      callback) as Promise<Models.MeshCodePackageGetContainerLogsResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getContainerLogsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}/Replicas/{replicaName}/CodePackages/{codePackageName}/Logs",
  urlParameters: [
    Parameters.applicationResourceName,
    Parameters.serviceResourceName,
    Parameters.replicaName,
    Parameters.codePackageName2
  ],
  queryParameters: [
    Parameters.apiVersion8,
    Parameters.tail
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ContainerLogs
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};
