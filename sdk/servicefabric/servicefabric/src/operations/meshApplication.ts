/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/meshApplicationMappers";
import * as Parameters from "../models/parameters";
import { ServiceFabricClientContext } from "../serviceFabricClientContext";

/** Class representing a MeshApplication. */
export class MeshApplication {
  private readonly client: ServiceFabricClientContext;

  /**
   * Create a MeshApplication.
   * @param {ServiceFabricClientContext} client Reference to the service client.
   */
  constructor(client: ServiceFabricClientContext) {
    this.client = client;
  }

  /**
   * Creates a Application resource with the specified name, description and properties. If
   * Application resource with the same name exists, then it is updated with the specified
   * description and properties.
   * @summary Creates or updates a Application resource.
   * @param applicationResourceName The identity of the application.
   * @param applicationResourceDescription Description for creating a Application resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.MeshApplicationCreateOrUpdateResponse>
   */
  createOrUpdate(applicationResourceName: string, applicationResourceDescription: Models.ApplicationResourceDescription, options?: msRest.RequestOptionsBase): Promise<Models.MeshApplicationCreateOrUpdateResponse>;
  /**
   * @param applicationResourceName The identity of the application.
   * @param applicationResourceDescription Description for creating a Application resource.
   * @param callback The callback
   */
  createOrUpdate(applicationResourceName: string, applicationResourceDescription: Models.ApplicationResourceDescription, callback: msRest.ServiceCallback<Models.ApplicationResourceDescription>): void;
  /**
   * @param applicationResourceName The identity of the application.
   * @param applicationResourceDescription Description for creating a Application resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(applicationResourceName: string, applicationResourceDescription: Models.ApplicationResourceDescription, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplicationResourceDescription>): void;
  createOrUpdate(applicationResourceName: string, applicationResourceDescription: Models.ApplicationResourceDescription, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ApplicationResourceDescription>, callback?: msRest.ServiceCallback<Models.ApplicationResourceDescription>): Promise<Models.MeshApplicationCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        applicationResourceName,
        applicationResourceDescription,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.MeshApplicationCreateOrUpdateResponse>;
  }

  /**
   * Gets the information about the Application resource with the given name. The information include
   * the description and other properties of the Application.
   * @summary Gets the Application resource with the given name.
   * @param applicationResourceName The identity of the application.
   * @param [options] The optional parameters
   * @returns Promise<Models.MeshApplicationGetResponse>
   */
  get(applicationResourceName: string, options?: msRest.RequestOptionsBase): Promise<Models.MeshApplicationGetResponse>;
  /**
   * @param applicationResourceName The identity of the application.
   * @param callback The callback
   */
  get(applicationResourceName: string, callback: msRest.ServiceCallback<Models.ApplicationResourceDescription>): void;
  /**
   * @param applicationResourceName The identity of the application.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(applicationResourceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplicationResourceDescription>): void;
  get(applicationResourceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ApplicationResourceDescription>, callback?: msRest.ServiceCallback<Models.ApplicationResourceDescription>): Promise<Models.MeshApplicationGetResponse> {
    return this.client.sendOperationRequest(
      {
        applicationResourceName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.MeshApplicationGetResponse>;
  }

  /**
   * Deletes the Application resource identified by the name.
   * @summary Deletes the Application resource.
   * @param applicationResourceName The identity of the application.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(applicationResourceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param applicationResourceName The identity of the application.
   * @param callback The callback
   */
  deleteMethod(applicationResourceName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param applicationResourceName The identity of the application.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(applicationResourceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(applicationResourceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        applicationResourceName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Gets the information about all application resources in a given resource group. The information
   * include the description and other properties of the Application.
   * @summary Lists all the application resources.
   * @param [options] The optional parameters
   * @returns Promise<Models.MeshApplicationListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.MeshApplicationListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.PagedApplicationResourceDescriptionList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PagedApplicationResourceDescriptionList>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PagedApplicationResourceDescriptionList>, callback?: msRest.ServiceCallback<Models.PagedApplicationResourceDescriptionList>): Promise<Models.MeshApplicationListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.MeshApplicationListResponse>;
  }

  /**
   * Gets the upgrade progress information about the Application resource with the given name. The
   * information include percentage of completion and other upgrade state information of the
   * Application resource.
   * @summary Gets the progress of the latest upgrade performed on this application resource.
   * @param applicationResourceName The identity of the application.
   * @param [options] The optional parameters
   * @returns Promise<Models.MeshApplicationGetUpgradeProgressResponse>
   */
  getUpgradeProgress(applicationResourceName: string, options?: msRest.RequestOptionsBase): Promise<Models.MeshApplicationGetUpgradeProgressResponse>;
  /**
   * @param applicationResourceName The identity of the application.
   * @param callback The callback
   */
  getUpgradeProgress(applicationResourceName: string, callback: msRest.ServiceCallback<Models.ApplicationResourceUpgradeProgressInfo>): void;
  /**
   * @param applicationResourceName The identity of the application.
   * @param options The optional parameters
   * @param callback The callback
   */
  getUpgradeProgress(applicationResourceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplicationResourceUpgradeProgressInfo>): void;
  getUpgradeProgress(applicationResourceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ApplicationResourceUpgradeProgressInfo>, callback?: msRest.ServiceCallback<Models.ApplicationResourceUpgradeProgressInfo>): Promise<Models.MeshApplicationGetUpgradeProgressResponse> {
    return this.client.sendOperationRequest(
      {
        applicationResourceName,
        options
      },
      getUpgradeProgressOperationSpec,
      callback) as Promise<Models.MeshApplicationGetUpgradeProgressResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "Resources/Applications/{applicationResourceName}",
  urlParameters: [
    Parameters.applicationResourceName
  ],
  queryParameters: [
    Parameters.apiVersion8
  ],
  requestBody: {
    parameterPath: "applicationResourceDescription",
    mapper: {
      ...Mappers.ApplicationResourceDescription,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationResourceDescription
    },
    201: {
      bodyMapper: Mappers.ApplicationResourceDescription
    },
    202: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Resources/Applications/{applicationResourceName}",
  urlParameters: [
    Parameters.applicationResourceName
  ],
  queryParameters: [
    Parameters.apiVersion8
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationResourceDescription
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "Resources/Applications/{applicationResourceName}",
  urlParameters: [
    Parameters.applicationResourceName
  ],
  queryParameters: [
    Parameters.apiVersion8
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Resources/Applications",
  queryParameters: [
    Parameters.apiVersion8
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PagedApplicationResourceDescriptionList
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getUpgradeProgressOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Resources/Applications/{applicationResourceName}/$/GetUpgradeProgress",
  urlParameters: [
    Parameters.applicationResourceName
  ],
  queryParameters: [
    Parameters.apiVersion3
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationResourceUpgradeProgressInfo
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};
