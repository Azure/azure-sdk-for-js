/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/meshServiceMappers";
import * as Parameters from "../models/parameters";
import { ServiceFabricClientContext } from "../serviceFabricClientContext";

/** Class representing a MeshService. */
export class MeshService {
  private readonly client: ServiceFabricClientContext;

  /**
   * Create a MeshService.
   * @param {ServiceFabricClientContext} client Reference to the service client.
   */
  constructor(client: ServiceFabricClientContext) {
    this.client = client;
  }

  /**
   * Gets the information about the Service resource with the given name. The information include the
   * description and other properties of the Service.
   * @summary Gets the Service resource with the given name.
   * @param applicationResourceName The identity of the application.
   * @param serviceResourceName The identity of the service.
   * @param [options] The optional parameters
   * @returns Promise<Models.MeshServiceGetResponse>
   */
  get(applicationResourceName: string, serviceResourceName: string, options?: msRest.RequestOptionsBase): Promise<Models.MeshServiceGetResponse>;
  /**
   * @param applicationResourceName The identity of the application.
   * @param serviceResourceName The identity of the service.
   * @param callback The callback
   */
  get(applicationResourceName: string, serviceResourceName: string, callback: msRest.ServiceCallback<Models.ServiceResourceDescription>): void;
  /**
   * @param applicationResourceName The identity of the application.
   * @param serviceResourceName The identity of the service.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(applicationResourceName: string, serviceResourceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ServiceResourceDescription>): void;
  get(applicationResourceName: string, serviceResourceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ServiceResourceDescription>, callback?: msRest.ServiceCallback<Models.ServiceResourceDescription>): Promise<Models.MeshServiceGetResponse> {
    return this.client.sendOperationRequest(
      {
        applicationResourceName,
        serviceResourceName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.MeshServiceGetResponse>;
  }

  /**
   * Gets the information about all services of an application resource. The information include the
   * description and other properties of the Service.
   * @summary Lists all the service resources.
   * @param applicationResourceName The identity of the application.
   * @param [options] The optional parameters
   * @returns Promise<Models.MeshServiceListResponse>
   */
  list(applicationResourceName: string, options?: msRest.RequestOptionsBase): Promise<Models.MeshServiceListResponse>;
  /**
   * @param applicationResourceName The identity of the application.
   * @param callback The callback
   */
  list(applicationResourceName: string, callback: msRest.ServiceCallback<Models.PagedServiceResourceDescriptionList>): void;
  /**
   * @param applicationResourceName The identity of the application.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(applicationResourceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PagedServiceResourceDescriptionList>): void;
  list(applicationResourceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PagedServiceResourceDescriptionList>, callback?: msRest.ServiceCallback<Models.PagedServiceResourceDescriptionList>): Promise<Models.MeshServiceListResponse> {
    return this.client.sendOperationRequest(
      {
        applicationResourceName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.MeshServiceListResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}",
  urlParameters: [
    Parameters.applicationResourceName,
    Parameters.serviceResourceName
  ],
  queryParameters: [
    Parameters.apiVersion8
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ServiceResourceDescription
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Resources/Applications/{applicationResourceName}/Services",
  urlParameters: [
    Parameters.applicationResourceName
  ],
  queryParameters: [
    Parameters.apiVersion8
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PagedServiceResourceDescriptionList
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};
