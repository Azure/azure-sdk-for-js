/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import * as operations from "./operations";
import { ServiceFabricClientContext } from "./serviceFabricClientContext";

class ServiceFabricClient extends ServiceFabricClientContext {
  // Operation groups
  meshSecret: operations.MeshSecret;
  meshSecretValue: operations.MeshSecretValue;
  meshVolume: operations.MeshVolume;
  meshNetwork: operations.MeshNetwork;
  meshApplication: operations.MeshApplication;
  meshService: operations.MeshService;
  meshCodePackage: operations.MeshCodePackage;
  meshServiceReplica: operations.MeshServiceReplica;
  meshGateway: operations.MeshGateway;

  /**
   * Initializes a new instance of the ServiceFabricClient class.
   * @param [options] The parameter options
   */
  constructor(options?: Models.ServiceFabricClientOptions) {
    super(options);
    this.meshSecret = new operations.MeshSecret(this);
    this.meshSecretValue = new operations.MeshSecretValue(this);
    this.meshVolume = new operations.MeshVolume(this);
    this.meshNetwork = new operations.MeshNetwork(this);
    this.meshApplication = new operations.MeshApplication(this);
    this.meshService = new operations.MeshService(this);
    this.meshCodePackage = new operations.MeshCodePackage(this);
    this.meshServiceReplica = new operations.MeshServiceReplica(this);
    this.meshGateway = new operations.MeshGateway(this);
  }

  /**
   * Get the Service Fabric cluster manifest. The cluster manifest contains properties of the cluster
   * that include different node types on the cluster,
   * security configurations, fault, and upgrade domain topologies, etc.
   *
   * These properties are specified as part of the ClusterConfig.JSON file while deploying a
   * stand-alone cluster. However, most of the information in the cluster manifest
   * is generated internally by service fabric during cluster deployment in other deployment
   * scenarios (e.g. when using Azure portal).
   *
   * The contents of the cluster manifest are for informational purposes only and users are not
   * expected to take a dependency on the format of the file contents or its interpretation.
   * @summary Get the Service Fabric cluster manifest.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetClusterManifestResponse>
   */
  getClusterManifest(options?: Models.ServiceFabricClientGetClusterManifestOptionalParams): Promise<Models.GetClusterManifestResponse>;
  /**
   * @param callback The callback
   */
  getClusterManifest(callback: msRest.ServiceCallback<Models.ClusterManifest>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getClusterManifest(options: Models.ServiceFabricClientGetClusterManifestOptionalParams, callback: msRest.ServiceCallback<Models.ClusterManifest>): void;
  getClusterManifest(options?: Models.ServiceFabricClientGetClusterManifestOptionalParams | msRest.ServiceCallback<Models.ClusterManifest>, callback?: msRest.ServiceCallback<Models.ClusterManifest>): Promise<Models.GetClusterManifestResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getClusterManifestOperationSpec,
      callback) as Promise<Models.GetClusterManifestResponse>;
  }

  /**
   * Use EventsHealthStateFilter to filter the collection of health events reported on the cluster
   * based on the health state.
   * Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection
   * of nodes and applications returned based on their aggregated health state.
   * @summary Gets the health of a Service Fabric cluster.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetClusterHealthResponse>
   */
  getClusterHealth(options?: Models.ServiceFabricClientGetClusterHealthOptionalParams): Promise<Models.GetClusterHealthResponse>;
  /**
   * @param callback The callback
   */
  getClusterHealth(callback: msRest.ServiceCallback<Models.ClusterHealth>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getClusterHealth(options: Models.ServiceFabricClientGetClusterHealthOptionalParams, callback: msRest.ServiceCallback<Models.ClusterHealth>): void;
  getClusterHealth(options?: Models.ServiceFabricClientGetClusterHealthOptionalParams | msRest.ServiceCallback<Models.ClusterHealth>, callback?: msRest.ServiceCallback<Models.ClusterHealth>): Promise<Models.GetClusterHealthResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getClusterHealthOperationSpec,
      callback) as Promise<Models.GetClusterHealthResponse>;
  }

  /**
   * Use EventsHealthStateFilter to filter the collection of health events reported on the cluster
   * based on the health state.
   * Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to filter the collection
   * of nodes and applications returned based on their aggregated health state.
   * Use ClusterHealthPolicies to override the health policies used to evaluate the health.
   * @summary Gets the health of a Service Fabric cluster using the specified policy.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetClusterHealthUsingPolicyResponse>
   */
  getClusterHealthUsingPolicy(options?: Models.ServiceFabricClientGetClusterHealthUsingPolicyOptionalParams): Promise<Models.GetClusterHealthUsingPolicyResponse>;
  /**
   * @param callback The callback
   */
  getClusterHealthUsingPolicy(callback: msRest.ServiceCallback<Models.ClusterHealth>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getClusterHealthUsingPolicy(options: Models.ServiceFabricClientGetClusterHealthUsingPolicyOptionalParams, callback: msRest.ServiceCallback<Models.ClusterHealth>): void;
  getClusterHealthUsingPolicy(options?: Models.ServiceFabricClientGetClusterHealthUsingPolicyOptionalParams | msRest.ServiceCallback<Models.ClusterHealth>, callback?: msRest.ServiceCallback<Models.ClusterHealth>): Promise<Models.GetClusterHealthUsingPolicyResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getClusterHealthUsingPolicyOperationSpec,
      callback) as Promise<Models.GetClusterHealthUsingPolicyResponse>;
  }

  /**
   * Gets the health of a Service Fabric cluster using health chunks. Includes the aggregated health
   * state of the cluster, but none of the cluster entities.
   * To expand the cluster health and get the health state of all or some of the entities, use the
   * POST URI and specify the cluster health chunk query description.
   * @summary Gets the health of a Service Fabric cluster using health chunks.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetClusterHealthChunkResponse>
   */
  getClusterHealthChunk(options?: Models.ServiceFabricClientGetClusterHealthChunkOptionalParams): Promise<Models.GetClusterHealthChunkResponse>;
  /**
   * @param callback The callback
   */
  getClusterHealthChunk(callback: msRest.ServiceCallback<Models.ClusterHealthChunk>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getClusterHealthChunk(options: Models.ServiceFabricClientGetClusterHealthChunkOptionalParams, callback: msRest.ServiceCallback<Models.ClusterHealthChunk>): void;
  getClusterHealthChunk(options?: Models.ServiceFabricClientGetClusterHealthChunkOptionalParams | msRest.ServiceCallback<Models.ClusterHealthChunk>, callback?: msRest.ServiceCallback<Models.ClusterHealthChunk>): Promise<Models.GetClusterHealthChunkResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getClusterHealthChunkOperationSpec,
      callback) as Promise<Models.GetClusterHealthChunkResponse>;
  }

  /**
   * Gets the health of a Service Fabric cluster using health chunks. The health evaluation is done
   * based on the input cluster health chunk query description.
   * The query description allows users to specify health policies for evaluating the cluster and its
   * children.
   * Users can specify very flexible filters to select which cluster entities to return. The
   * selection can be done based on the entities health state and based on the hierarchy.
   * The query can return multi-level children of the entities based on the specified filters. For
   * example, it can return one application with a specified name, and for this application, return
   * only services that are in Error or Warning, and all partitions and replicas for one of these
   * services.
   * @summary Gets the health of a Service Fabric cluster using health chunks.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetClusterHealthChunkUsingPolicyAndAdvancedFiltersResponse>
   */
  getClusterHealthChunkUsingPolicyAndAdvancedFilters(options?: Models.ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams): Promise<Models.GetClusterHealthChunkUsingPolicyAndAdvancedFiltersResponse>;
  /**
   * @param callback The callback
   */
  getClusterHealthChunkUsingPolicyAndAdvancedFilters(callback: msRest.ServiceCallback<Models.ClusterHealthChunk>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getClusterHealthChunkUsingPolicyAndAdvancedFilters(options: Models.ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams, callback: msRest.ServiceCallback<Models.ClusterHealthChunk>): void;
  getClusterHealthChunkUsingPolicyAndAdvancedFilters(options?: Models.ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams | msRest.ServiceCallback<Models.ClusterHealthChunk>, callback?: msRest.ServiceCallback<Models.ClusterHealthChunk>): Promise<Models.GetClusterHealthChunkUsingPolicyAndAdvancedFiltersResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getClusterHealthChunkUsingPolicyAndAdvancedFiltersOperationSpec,
      callback) as Promise<Models.GetClusterHealthChunkUsingPolicyAndAdvancedFiltersResponse>;
  }

  /**
   * Sends a health report on a Service Fabric cluster. The report must contain the information about
   * the source of the health report and property on which it is reported.
   * The report is sent to a Service Fabric gateway node, which forwards to the health store.
   * The report may be accepted by the gateway, but rejected by the health store after extra
   * validation.
   * For example, the health store may reject the report because of an invalid parameter, like a
   * stale sequence number.
   * To see whether the report was applied in the health store, run GetClusterHealth and check that
   * the report appears in the HealthEvents section.
   * @summary Sends a health report on the Service Fabric cluster.
   * @param healthInformation Describes the health information for the health report. This
   * information needs to be present in all of the health reports sent to the health manager.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  reportClusterHealth(healthInformation: Models.HealthInformation, options?: Models.ServiceFabricClientReportClusterHealthOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param healthInformation Describes the health information for the health report. This
   * information needs to be present in all of the health reports sent to the health manager.
   * @param callback The callback
   */
  reportClusterHealth(healthInformation: Models.HealthInformation, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param healthInformation Describes the health information for the health report. This
   * information needs to be present in all of the health reports sent to the health manager.
   * @param options The optional parameters
   * @param callback The callback
   */
  reportClusterHealth(healthInformation: Models.HealthInformation, options: Models.ServiceFabricClientReportClusterHealthOptionalParams, callback: msRest.ServiceCallback<void>): void;
  reportClusterHealth(healthInformation: Models.HealthInformation, options?: Models.ServiceFabricClientReportClusterHealthOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        healthInformation,
        options
      },
      reportClusterHealthOperationSpec,
      callback);
  }

  /**
   * Gets a list of information about fabric code versions that are provisioned in the cluster. The
   * parameter CodeVersion can be used to optionally filter the output to only that particular
   * version.
   * @summary Gets a list of fabric code versions that are provisioned in a Service Fabric cluster.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetProvisionedFabricCodeVersionInfoListResponse>
   */
  getProvisionedFabricCodeVersionInfoList(options?: Models.ServiceFabricClientGetProvisionedFabricCodeVersionInfoListOptionalParams): Promise<Models.GetProvisionedFabricCodeVersionInfoListResponse>;
  /**
   * @param callback The callback
   */
  getProvisionedFabricCodeVersionInfoList(callback: msRest.ServiceCallback<Models.FabricCodeVersionInfo[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getProvisionedFabricCodeVersionInfoList(options: Models.ServiceFabricClientGetProvisionedFabricCodeVersionInfoListOptionalParams, callback: msRest.ServiceCallback<Models.FabricCodeVersionInfo[]>): void;
  getProvisionedFabricCodeVersionInfoList(options?: Models.ServiceFabricClientGetProvisionedFabricCodeVersionInfoListOptionalParams | msRest.ServiceCallback<Models.FabricCodeVersionInfo[]>, callback?: msRest.ServiceCallback<Models.FabricCodeVersionInfo[]>): Promise<Models.GetProvisionedFabricCodeVersionInfoListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getProvisionedFabricCodeVersionInfoListOperationSpec,
      callback) as Promise<Models.GetProvisionedFabricCodeVersionInfoListResponse>;
  }

  /**
   * Gets a list of information about fabric config versions that are provisioned in the cluster. The
   * parameter ConfigVersion can be used to optionally filter the output to only that particular
   * version.
   * @summary Gets a list of fabric config versions that are provisioned in a Service Fabric cluster.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetProvisionedFabricConfigVersionInfoListResponse>
   */
  getProvisionedFabricConfigVersionInfoList(options?: Models.ServiceFabricClientGetProvisionedFabricConfigVersionInfoListOptionalParams): Promise<Models.GetProvisionedFabricConfigVersionInfoListResponse>;
  /**
   * @param callback The callback
   */
  getProvisionedFabricConfigVersionInfoList(callback: msRest.ServiceCallback<Models.FabricConfigVersionInfo[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getProvisionedFabricConfigVersionInfoList(options: Models.ServiceFabricClientGetProvisionedFabricConfigVersionInfoListOptionalParams, callback: msRest.ServiceCallback<Models.FabricConfigVersionInfo[]>): void;
  getProvisionedFabricConfigVersionInfoList(options?: Models.ServiceFabricClientGetProvisionedFabricConfigVersionInfoListOptionalParams | msRest.ServiceCallback<Models.FabricConfigVersionInfo[]>, callback?: msRest.ServiceCallback<Models.FabricConfigVersionInfo[]>): Promise<Models.GetProvisionedFabricConfigVersionInfoListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getProvisionedFabricConfigVersionInfoListOperationSpec,
      callback) as Promise<Models.GetProvisionedFabricConfigVersionInfoListResponse>;
  }

  /**
   * Gets the current progress of the ongoing cluster upgrade. If no upgrade is currently in
   * progress, get the last state of the previous cluster upgrade.
   * @summary Gets the progress of the current cluster upgrade.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetClusterUpgradeProgressResponse>
   */
  getClusterUpgradeProgress(options?: Models.ServiceFabricClientGetClusterUpgradeProgressOptionalParams): Promise<Models.GetClusterUpgradeProgressResponse>;
  /**
   * @param callback The callback
   */
  getClusterUpgradeProgress(callback: msRest.ServiceCallback<Models.ClusterUpgradeProgressObject>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getClusterUpgradeProgress(options: Models.ServiceFabricClientGetClusterUpgradeProgressOptionalParams, callback: msRest.ServiceCallback<Models.ClusterUpgradeProgressObject>): void;
  getClusterUpgradeProgress(options?: Models.ServiceFabricClientGetClusterUpgradeProgressOptionalParams | msRest.ServiceCallback<Models.ClusterUpgradeProgressObject>, callback?: msRest.ServiceCallback<Models.ClusterUpgradeProgressObject>): Promise<Models.GetClusterUpgradeProgressResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getClusterUpgradeProgressOperationSpec,
      callback) as Promise<Models.GetClusterUpgradeProgressResponse>;
  }

  /**
   * The cluster configuration contains properties of the cluster that include different node types
   * on the cluster,
   * security configurations, fault, and upgrade domain topologies, etc.
   * @summary Get the Service Fabric standalone cluster configuration.
   * @param configurationApiVersion The API version of the Standalone cluster json configuration.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetClusterConfigurationResponse>
   */
  getClusterConfiguration(configurationApiVersion: string, options?: Models.ServiceFabricClientGetClusterConfigurationOptionalParams): Promise<Models.GetClusterConfigurationResponse>;
  /**
   * @param configurationApiVersion The API version of the Standalone cluster json configuration.
   * @param callback The callback
   */
  getClusterConfiguration(configurationApiVersion: string, callback: msRest.ServiceCallback<Models.ClusterConfiguration>): void;
  /**
   * @param configurationApiVersion The API version of the Standalone cluster json configuration.
   * @param options The optional parameters
   * @param callback The callback
   */
  getClusterConfiguration(configurationApiVersion: string, options: Models.ServiceFabricClientGetClusterConfigurationOptionalParams, callback: msRest.ServiceCallback<Models.ClusterConfiguration>): void;
  getClusterConfiguration(configurationApiVersion: string, options?: Models.ServiceFabricClientGetClusterConfigurationOptionalParams | msRest.ServiceCallback<Models.ClusterConfiguration>, callback?: msRest.ServiceCallback<Models.ClusterConfiguration>): Promise<Models.GetClusterConfigurationResponse> {
    return this.sendOperationRequest(
      {
        configurationApiVersion,
        options
      },
      getClusterConfigurationOperationSpec,
      callback) as Promise<Models.GetClusterConfigurationResponse>;
  }

  /**
   * Get the cluster configuration upgrade status details of a Service Fabric standalone cluster.
   * @summary Get the cluster configuration upgrade status of a Service Fabric standalone cluster.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetClusterConfigurationUpgradeStatusResponse>
   */
  getClusterConfigurationUpgradeStatus(options?: Models.ServiceFabricClientGetClusterConfigurationUpgradeStatusOptionalParams): Promise<Models.GetClusterConfigurationUpgradeStatusResponse>;
  /**
   * @param callback The callback
   */
  getClusterConfigurationUpgradeStatus(callback: msRest.ServiceCallback<Models.ClusterConfigurationUpgradeStatusInfo>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getClusterConfigurationUpgradeStatus(options: Models.ServiceFabricClientGetClusterConfigurationUpgradeStatusOptionalParams, callback: msRest.ServiceCallback<Models.ClusterConfigurationUpgradeStatusInfo>): void;
  getClusterConfigurationUpgradeStatus(options?: Models.ServiceFabricClientGetClusterConfigurationUpgradeStatusOptionalParams | msRest.ServiceCallback<Models.ClusterConfigurationUpgradeStatusInfo>, callback?: msRest.ServiceCallback<Models.ClusterConfigurationUpgradeStatusInfo>): Promise<Models.GetClusterConfigurationUpgradeStatusResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getClusterConfigurationUpgradeStatusOperationSpec,
      callback) as Promise<Models.GetClusterConfigurationUpgradeStatusResponse>;
  }

  /**
   * Get the service state of Service Fabric Upgrade Orchestration Service. This API is internally
   * used for support purposes.
   * @summary Get the service state of Service Fabric Upgrade Orchestration Service.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetUpgradeOrchestrationServiceStateResponse>
   */
  getUpgradeOrchestrationServiceState(options?: Models.ServiceFabricClientGetUpgradeOrchestrationServiceStateOptionalParams): Promise<Models.GetUpgradeOrchestrationServiceStateResponse>;
  /**
   * @param callback The callback
   */
  getUpgradeOrchestrationServiceState(callback: msRest.ServiceCallback<Models.UpgradeOrchestrationServiceState>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getUpgradeOrchestrationServiceState(options: Models.ServiceFabricClientGetUpgradeOrchestrationServiceStateOptionalParams, callback: msRest.ServiceCallback<Models.UpgradeOrchestrationServiceState>): void;
  getUpgradeOrchestrationServiceState(options?: Models.ServiceFabricClientGetUpgradeOrchestrationServiceStateOptionalParams | msRest.ServiceCallback<Models.UpgradeOrchestrationServiceState>, callback?: msRest.ServiceCallback<Models.UpgradeOrchestrationServiceState>): Promise<Models.GetUpgradeOrchestrationServiceStateResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getUpgradeOrchestrationServiceStateOperationSpec,
      callback) as Promise<Models.GetUpgradeOrchestrationServiceStateResponse>;
  }

  /**
   * Update the service state of Service Fabric Upgrade Orchestration Service. This API is internally
   * used for support purposes.
   * @summary Update the service state of Service Fabric Upgrade Orchestration Service.
   * @param upgradeOrchestrationServiceState Service state of Service Fabric Upgrade Orchestration
   * Service.
   * @param [options] The optional parameters
   * @returns Promise<Models.SetUpgradeOrchestrationServiceStateResponse>
   */
  setUpgradeOrchestrationServiceState(upgradeOrchestrationServiceState: Models.UpgradeOrchestrationServiceState, options?: Models.ServiceFabricClientSetUpgradeOrchestrationServiceStateOptionalParams): Promise<Models.SetUpgradeOrchestrationServiceStateResponse>;
  /**
   * @param upgradeOrchestrationServiceState Service state of Service Fabric Upgrade Orchestration
   * Service.
   * @param callback The callback
   */
  setUpgradeOrchestrationServiceState(upgradeOrchestrationServiceState: Models.UpgradeOrchestrationServiceState, callback: msRest.ServiceCallback<Models.UpgradeOrchestrationServiceStateSummary>): void;
  /**
   * @param upgradeOrchestrationServiceState Service state of Service Fabric Upgrade Orchestration
   * Service.
   * @param options The optional parameters
   * @param callback The callback
   */
  setUpgradeOrchestrationServiceState(upgradeOrchestrationServiceState: Models.UpgradeOrchestrationServiceState, options: Models.ServiceFabricClientSetUpgradeOrchestrationServiceStateOptionalParams, callback: msRest.ServiceCallback<Models.UpgradeOrchestrationServiceStateSummary>): void;
  setUpgradeOrchestrationServiceState(upgradeOrchestrationServiceState: Models.UpgradeOrchestrationServiceState, options?: Models.ServiceFabricClientSetUpgradeOrchestrationServiceStateOptionalParams | msRest.ServiceCallback<Models.UpgradeOrchestrationServiceStateSummary>, callback?: msRest.ServiceCallback<Models.UpgradeOrchestrationServiceStateSummary>): Promise<Models.SetUpgradeOrchestrationServiceStateResponse> {
    return this.sendOperationRequest(
      {
        upgradeOrchestrationServiceState,
        options
      },
      setUpgradeOrchestrationServiceStateOperationSpec,
      callback) as Promise<Models.SetUpgradeOrchestrationServiceStateResponse>;
  }

  /**
   * Validate and provision the code or configuration packages of a Service Fabric cluster.
   * @summary Provision the code or configuration packages of a Service Fabric cluster.
   * @param provisionFabricDescription Describes the parameters for provisioning a cluster.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  provisionCluster(provisionFabricDescription: Models.ProvisionFabricDescription, options?: Models.ServiceFabricClientProvisionClusterOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param provisionFabricDescription Describes the parameters for provisioning a cluster.
   * @param callback The callback
   */
  provisionCluster(provisionFabricDescription: Models.ProvisionFabricDescription, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param provisionFabricDescription Describes the parameters for provisioning a cluster.
   * @param options The optional parameters
   * @param callback The callback
   */
  provisionCluster(provisionFabricDescription: Models.ProvisionFabricDescription, options: Models.ServiceFabricClientProvisionClusterOptionalParams, callback: msRest.ServiceCallback<void>): void;
  provisionCluster(provisionFabricDescription: Models.ProvisionFabricDescription, options?: Models.ServiceFabricClientProvisionClusterOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        provisionFabricDescription,
        options
      },
      provisionClusterOperationSpec,
      callback);
  }

  /**
   * It is supported to unprovision code and configuration separately.
   * @summary Unprovision the code or configuration packages of a Service Fabric cluster.
   * @param unprovisionFabricDescription Describes the parameters for unprovisioning a cluster.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  unprovisionCluster(unprovisionFabricDescription: Models.UnprovisionFabricDescription, options?: Models.ServiceFabricClientUnprovisionClusterOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param unprovisionFabricDescription Describes the parameters for unprovisioning a cluster.
   * @param callback The callback
   */
  unprovisionCluster(unprovisionFabricDescription: Models.UnprovisionFabricDescription, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param unprovisionFabricDescription Describes the parameters for unprovisioning a cluster.
   * @param options The optional parameters
   * @param callback The callback
   */
  unprovisionCluster(unprovisionFabricDescription: Models.UnprovisionFabricDescription, options: Models.ServiceFabricClientUnprovisionClusterOptionalParams, callback: msRest.ServiceCallback<void>): void;
  unprovisionCluster(unprovisionFabricDescription: Models.UnprovisionFabricDescription, options?: Models.ServiceFabricClientUnprovisionClusterOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        unprovisionFabricDescription,
        options
      },
      unprovisionClusterOperationSpec,
      callback);
  }

  /**
   * Roll back the code or configuration upgrade of a Service Fabric cluster.
   * @summary Roll back the upgrade of a Service Fabric cluster.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  rollbackClusterUpgrade(options?: Models.ServiceFabricClientRollbackClusterUpgradeOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  rollbackClusterUpgrade(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  rollbackClusterUpgrade(options: Models.ServiceFabricClientRollbackClusterUpgradeOptionalParams, callback: msRest.ServiceCallback<void>): void;
  rollbackClusterUpgrade(options?: Models.ServiceFabricClientRollbackClusterUpgradeOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      rollbackClusterUpgradeOperationSpec,
      callback);
  }

  /**
   * Make the cluster code or configuration upgrade move on to the next upgrade domain if
   * appropriate.
   * @summary Make the cluster upgrade move on to the next upgrade domain.
   * @param resumeClusterUpgradeDescription Describes the parameters for resuming a cluster upgrade.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  resumeClusterUpgrade(resumeClusterUpgradeDescription: Models.ResumeClusterUpgradeDescription, options?: Models.ServiceFabricClientResumeClusterUpgradeOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param resumeClusterUpgradeDescription Describes the parameters for resuming a cluster upgrade.
   * @param callback The callback
   */
  resumeClusterUpgrade(resumeClusterUpgradeDescription: Models.ResumeClusterUpgradeDescription, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resumeClusterUpgradeDescription Describes the parameters for resuming a cluster upgrade.
   * @param options The optional parameters
   * @param callback The callback
   */
  resumeClusterUpgrade(resumeClusterUpgradeDescription: Models.ResumeClusterUpgradeDescription, options: Models.ServiceFabricClientResumeClusterUpgradeOptionalParams, callback: msRest.ServiceCallback<void>): void;
  resumeClusterUpgrade(resumeClusterUpgradeDescription: Models.ResumeClusterUpgradeDescription, options?: Models.ServiceFabricClientResumeClusterUpgradeOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        resumeClusterUpgradeDescription,
        options
      },
      resumeClusterUpgradeOperationSpec,
      callback);
  }

  /**
   * Validate the supplied upgrade parameters and start upgrading the code or configuration version
   * of a Service Fabric cluster if the parameters are valid.
   * @summary Start upgrading the code or configuration version of a Service Fabric cluster.
   * @param startClusterUpgradeDescription Describes the parameters for starting a cluster upgrade.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  startClusterUpgrade(startClusterUpgradeDescription: Models.StartClusterUpgradeDescription, options?: Models.ServiceFabricClientStartClusterUpgradeOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param startClusterUpgradeDescription Describes the parameters for starting a cluster upgrade.
   * @param callback The callback
   */
  startClusterUpgrade(startClusterUpgradeDescription: Models.StartClusterUpgradeDescription, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param startClusterUpgradeDescription Describes the parameters for starting a cluster upgrade.
   * @param options The optional parameters
   * @param callback The callback
   */
  startClusterUpgrade(startClusterUpgradeDescription: Models.StartClusterUpgradeDescription, options: Models.ServiceFabricClientStartClusterUpgradeOptionalParams, callback: msRest.ServiceCallback<void>): void;
  startClusterUpgrade(startClusterUpgradeDescription: Models.StartClusterUpgradeDescription, options?: Models.ServiceFabricClientStartClusterUpgradeOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        startClusterUpgradeDescription,
        options
      },
      startClusterUpgradeOperationSpec,
      callback);
  }

  /**
   * Validate the supplied configuration upgrade parameters and start upgrading the cluster
   * configuration if the parameters are valid.
   * @summary Start upgrading the configuration of a Service Fabric standalone cluster.
   * @param clusterConfigurationUpgradeDescription Parameters for a standalone cluster configuration
   * upgrade.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  startClusterConfigurationUpgrade(clusterConfigurationUpgradeDescription: Models.ClusterConfigurationUpgradeDescription, options?: Models.ServiceFabricClientStartClusterConfigurationUpgradeOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param clusterConfigurationUpgradeDescription Parameters for a standalone cluster configuration
   * upgrade.
   * @param callback The callback
   */
  startClusterConfigurationUpgrade(clusterConfigurationUpgradeDescription: Models.ClusterConfigurationUpgradeDescription, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param clusterConfigurationUpgradeDescription Parameters for a standalone cluster configuration
   * upgrade.
   * @param options The optional parameters
   * @param callback The callback
   */
  startClusterConfigurationUpgrade(clusterConfigurationUpgradeDescription: Models.ClusterConfigurationUpgradeDescription, options: Models.ServiceFabricClientStartClusterConfigurationUpgradeOptionalParams, callback: msRest.ServiceCallback<void>): void;
  startClusterConfigurationUpgrade(clusterConfigurationUpgradeDescription: Models.ClusterConfigurationUpgradeDescription, options?: Models.ServiceFabricClientStartClusterConfigurationUpgradeOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        clusterConfigurationUpgradeDescription,
        options
      },
      startClusterConfigurationUpgradeOperationSpec,
      callback);
  }

  /**
   * Update the upgrade parameters used during a Service Fabric cluster upgrade.
   * @summary Update the upgrade parameters of a Service Fabric cluster upgrade.
   * @param updateClusterUpgradeDescription Parameters for updating a cluster upgrade.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateClusterUpgrade(updateClusterUpgradeDescription: Models.UpdateClusterUpgradeDescription, options?: Models.ServiceFabricClientUpdateClusterUpgradeOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param updateClusterUpgradeDescription Parameters for updating a cluster upgrade.
   * @param callback The callback
   */
  updateClusterUpgrade(updateClusterUpgradeDescription: Models.UpdateClusterUpgradeDescription, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param updateClusterUpgradeDescription Parameters for updating a cluster upgrade.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateClusterUpgrade(updateClusterUpgradeDescription: Models.UpdateClusterUpgradeDescription, options: Models.ServiceFabricClientUpdateClusterUpgradeOptionalParams, callback: msRest.ServiceCallback<void>): void;
  updateClusterUpgrade(updateClusterUpgradeDescription: Models.UpdateClusterUpgradeDescription, options?: Models.ServiceFabricClientUpdateClusterUpgradeOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        updateClusterUpgradeDescription,
        options
      },
      updateClusterUpgradeOperationSpec,
      callback);
  }

  /**
   * Gets the Azure Active Directory metadata used for secured connection to cluster.
   * This API is not supposed to be called separately. It provides information needed to set up an
   * Azure Active Directory secured connection with a Service Fabric cluster.
   * @summary Gets the Azure Active Directory metadata used for secured connection to cluster.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAadMetadataResponse>
   */
  getAadMetadata(options?: Models.ServiceFabricClientGetAadMetadataOptionalParams): Promise<Models.GetAadMetadataResponse>;
  /**
   * @param callback The callback
   */
  getAadMetadata(callback: msRest.ServiceCallback<Models.AadMetadataObject>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAadMetadata(options: Models.ServiceFabricClientGetAadMetadataOptionalParams, callback: msRest.ServiceCallback<Models.AadMetadataObject>): void;
  getAadMetadata(options?: Models.ServiceFabricClientGetAadMetadataOptionalParams | msRest.ServiceCallback<Models.AadMetadataObject>, callback?: msRest.ServiceCallback<Models.AadMetadataObject>): Promise<Models.GetAadMetadataResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getAadMetadataOperationSpec,
      callback) as Promise<Models.GetAadMetadataResponse>;
  }

  /**
   * If a cluster upgrade is happening, then this API will return the lowest (older) version of the
   * current and target cluster runtime versions.
   * @summary Get the current Service Fabric cluster version.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetClusterVersionResponse>
   */
  getClusterVersion(options?: Models.ServiceFabricClientGetClusterVersionOptionalParams): Promise<Models.GetClusterVersionResponse>;
  /**
   * @param callback The callback
   */
  getClusterVersion(callback: msRest.ServiceCallback<Models.ClusterVersion>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getClusterVersion(options: Models.ServiceFabricClientGetClusterVersionOptionalParams, callback: msRest.ServiceCallback<Models.ClusterVersion>): void;
  getClusterVersion(options?: Models.ServiceFabricClientGetClusterVersionOptionalParams | msRest.ServiceCallback<Models.ClusterVersion>, callback?: msRest.ServiceCallback<Models.ClusterVersion>): Promise<Models.GetClusterVersionResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getClusterVersionOperationSpec,
      callback) as Promise<Models.GetClusterVersionResponse>;
  }

  /**
   * Retrieves the load information of a Service Fabric cluster for all the metrics that have load or
   * capacity defined.
   * @summary Gets the load of a Service Fabric cluster.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetClusterLoadResponse>
   */
  getClusterLoad(options?: Models.ServiceFabricClientGetClusterLoadOptionalParams): Promise<Models.GetClusterLoadResponse>;
  /**
   * @param callback The callback
   */
  getClusterLoad(callback: msRest.ServiceCallback<Models.ClusterLoadInfo>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getClusterLoad(options: Models.ServiceFabricClientGetClusterLoadOptionalParams, callback: msRest.ServiceCallback<Models.ClusterLoadInfo>): void;
  getClusterLoad(options?: Models.ServiceFabricClientGetClusterLoadOptionalParams | msRest.ServiceCallback<Models.ClusterLoadInfo>, callback?: msRest.ServiceCallback<Models.ClusterLoadInfo>): Promise<Models.GetClusterLoadResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getClusterLoadOperationSpec,
      callback) as Promise<Models.GetClusterLoadResponse>;
  }

  /**
   * If verbosity is set to true, then detailed health reports will be generated when replicas cannot
   * be placed or dropped.
   * If verbosity is set to false, then no health reports will be generated when replicas cannot be
   * placed or dropped.
   * @summary Changes the verbosity of service placement health reporting.
   * @param enabled The verbosity of service placement health reporting.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  toggleVerboseServicePlacementHealthReporting(enabled: boolean, options?: Models.ServiceFabricClientToggleVerboseServicePlacementHealthReportingOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param enabled The verbosity of service placement health reporting.
   * @param callback The callback
   */
  toggleVerboseServicePlacementHealthReporting(enabled: boolean, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param enabled The verbosity of service placement health reporting.
   * @param options The optional parameters
   * @param callback The callback
   */
  toggleVerboseServicePlacementHealthReporting(enabled: boolean, options: Models.ServiceFabricClientToggleVerboseServicePlacementHealthReportingOptionalParams, callback: msRest.ServiceCallback<void>): void;
  toggleVerboseServicePlacementHealthReporting(enabled: boolean, options?: Models.ServiceFabricClientToggleVerboseServicePlacementHealthReportingOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        enabled,
        options
      },
      toggleVerboseServicePlacementHealthReportingOperationSpec,
      callback);
  }

  /**
   * The response includes the name, status, ID, health, uptime, and other details about the nodes.
   * @summary Gets the list of nodes in the Service Fabric cluster.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetNodeInfoListResponse>
   */
  getNodeInfoList(options?: Models.ServiceFabricClientGetNodeInfoListOptionalParams): Promise<Models.GetNodeInfoListResponse>;
  /**
   * @param callback The callback
   */
  getNodeInfoList(callback: msRest.ServiceCallback<Models.PagedNodeInfoList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getNodeInfoList(options: Models.ServiceFabricClientGetNodeInfoListOptionalParams, callback: msRest.ServiceCallback<Models.PagedNodeInfoList>): void;
  getNodeInfoList(options?: Models.ServiceFabricClientGetNodeInfoListOptionalParams | msRest.ServiceCallback<Models.PagedNodeInfoList>, callback?: msRest.ServiceCallback<Models.PagedNodeInfoList>): Promise<Models.GetNodeInfoListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getNodeInfoListOperationSpec,
      callback) as Promise<Models.GetNodeInfoListResponse>;
  }

  /**
   * The response includes the name, status, ID, health, uptime, and other details about the node.
   * @summary Gets the information about a specific node in the Service Fabric cluster.
   * @param nodeName The name of the node.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetNodeInfoResponse>
   */
  getNodeInfo(nodeName: string, options?: Models.ServiceFabricClientGetNodeInfoOptionalParams): Promise<Models.GetNodeInfoResponse>;
  /**
   * @param nodeName The name of the node.
   * @param callback The callback
   */
  getNodeInfo(nodeName: string, callback: msRest.ServiceCallback<Models.NodeInfo>): void;
  /**
   * @param nodeName The name of the node.
   * @param options The optional parameters
   * @param callback The callback
   */
  getNodeInfo(nodeName: string, options: Models.ServiceFabricClientGetNodeInfoOptionalParams, callback: msRest.ServiceCallback<Models.NodeInfo>): void;
  getNodeInfo(nodeName: string, options?: Models.ServiceFabricClientGetNodeInfoOptionalParams | msRest.ServiceCallback<Models.NodeInfo>, callback?: msRest.ServiceCallback<Models.NodeInfo>): Promise<Models.GetNodeInfoResponse> {
    return this.sendOperationRequest(
      {
        nodeName,
        options
      },
      getNodeInfoOperationSpec,
      callback) as Promise<Models.GetNodeInfoResponse>;
  }

  /**
   * Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection
   * of health events reported on the node based on the health state. If the node that you specify by
   * name does not exist in the health store, this returns an error.
   * @summary Gets the health of a Service Fabric node.
   * @param nodeName The name of the node.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetNodeHealthResponse>
   */
  getNodeHealth(nodeName: string, options?: Models.ServiceFabricClientGetNodeHealthOptionalParams): Promise<Models.GetNodeHealthResponse>;
  /**
   * @param nodeName The name of the node.
   * @param callback The callback
   */
  getNodeHealth(nodeName: string, callback: msRest.ServiceCallback<Models.NodeHealth>): void;
  /**
   * @param nodeName The name of the node.
   * @param options The optional parameters
   * @param callback The callback
   */
  getNodeHealth(nodeName: string, options: Models.ServiceFabricClientGetNodeHealthOptionalParams, callback: msRest.ServiceCallback<Models.NodeHealth>): void;
  getNodeHealth(nodeName: string, options?: Models.ServiceFabricClientGetNodeHealthOptionalParams | msRest.ServiceCallback<Models.NodeHealth>, callback?: msRest.ServiceCallback<Models.NodeHealth>): Promise<Models.GetNodeHealthResponse> {
    return this.sendOperationRequest(
      {
        nodeName,
        options
      },
      getNodeHealthOperationSpec,
      callback) as Promise<Models.GetNodeHealthResponse>;
  }

  /**
   * Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection
   * of health events reported on the node based on the health state. Use ClusterHealthPolicy in the
   * POST body to override the health policies used to evaluate the health. If the node that you
   * specify by name does not exist in the health store, this returns an error.
   * @summary Gets the health of a Service Fabric node, by using the specified health policy.
   * @param nodeName The name of the node.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetNodeHealthUsingPolicyResponse>
   */
  getNodeHealthUsingPolicy(nodeName: string, options?: Models.ServiceFabricClientGetNodeHealthUsingPolicyOptionalParams): Promise<Models.GetNodeHealthUsingPolicyResponse>;
  /**
   * @param nodeName The name of the node.
   * @param callback The callback
   */
  getNodeHealthUsingPolicy(nodeName: string, callback: msRest.ServiceCallback<Models.NodeHealth>): void;
  /**
   * @param nodeName The name of the node.
   * @param options The optional parameters
   * @param callback The callback
   */
  getNodeHealthUsingPolicy(nodeName: string, options: Models.ServiceFabricClientGetNodeHealthUsingPolicyOptionalParams, callback: msRest.ServiceCallback<Models.NodeHealth>): void;
  getNodeHealthUsingPolicy(nodeName: string, options?: Models.ServiceFabricClientGetNodeHealthUsingPolicyOptionalParams | msRest.ServiceCallback<Models.NodeHealth>, callback?: msRest.ServiceCallback<Models.NodeHealth>): Promise<Models.GetNodeHealthUsingPolicyResponse> {
    return this.sendOperationRequest(
      {
        nodeName,
        options
      },
      getNodeHealthUsingPolicyOperationSpec,
      callback) as Promise<Models.GetNodeHealthUsingPolicyResponse>;
  }

  /**
   * Reports health state of the specified Service Fabric node. The report must contain the
   * information about the source of the health report and property on which it is reported.
   * The report is sent to a Service Fabric gateway node, which forwards to the health store.
   * The report may be accepted by the gateway, but rejected by the health store after extra
   * validation.
   * For example, the health store may reject the report because of an invalid parameter, like a
   * stale sequence number.
   * To see whether the report was applied in the health store, run GetNodeHealth and check that the
   * report appears in the HealthEvents section.
   * @summary Sends a health report on the Service Fabric node.
   * @param nodeName The name of the node.
   * @param healthInformation Describes the health information for the health report. This
   * information needs to be present in all of the health reports sent to the health manager.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  reportNodeHealth(nodeName: string, healthInformation: Models.HealthInformation, options?: Models.ServiceFabricClientReportNodeHealthOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param nodeName The name of the node.
   * @param healthInformation Describes the health information for the health report. This
   * information needs to be present in all of the health reports sent to the health manager.
   * @param callback The callback
   */
  reportNodeHealth(nodeName: string, healthInformation: Models.HealthInformation, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param nodeName The name of the node.
   * @param healthInformation Describes the health information for the health report. This
   * information needs to be present in all of the health reports sent to the health manager.
   * @param options The optional parameters
   * @param callback The callback
   */
  reportNodeHealth(nodeName: string, healthInformation: Models.HealthInformation, options: Models.ServiceFabricClientReportNodeHealthOptionalParams, callback: msRest.ServiceCallback<void>): void;
  reportNodeHealth(nodeName: string, healthInformation: Models.HealthInformation, options?: Models.ServiceFabricClientReportNodeHealthOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        nodeName,
        healthInformation,
        options
      },
      reportNodeHealthOperationSpec,
      callback);
  }

  /**
   * Retrieves the load information of a Service Fabric node for all the metrics that have load or
   * capacity defined.
   * @summary Gets the load information of a Service Fabric node.
   * @param nodeName The name of the node.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetNodeLoadInfoResponse>
   */
  getNodeLoadInfo(nodeName: string, options?: Models.ServiceFabricClientGetNodeLoadInfoOptionalParams): Promise<Models.GetNodeLoadInfoResponse>;
  /**
   * @param nodeName The name of the node.
   * @param callback The callback
   */
  getNodeLoadInfo(nodeName: string, callback: msRest.ServiceCallback<Models.NodeLoadInfo>): void;
  /**
   * @param nodeName The name of the node.
   * @param options The optional parameters
   * @param callback The callback
   */
  getNodeLoadInfo(nodeName: string, options: Models.ServiceFabricClientGetNodeLoadInfoOptionalParams, callback: msRest.ServiceCallback<Models.NodeLoadInfo>): void;
  getNodeLoadInfo(nodeName: string, options?: Models.ServiceFabricClientGetNodeLoadInfoOptionalParams | msRest.ServiceCallback<Models.NodeLoadInfo>, callback?: msRest.ServiceCallback<Models.NodeLoadInfo>): Promise<Models.GetNodeLoadInfoResponse> {
    return this.sendOperationRequest(
      {
        nodeName,
        options
      },
      getNodeLoadInfoOperationSpec,
      callback) as Promise<Models.GetNodeLoadInfoResponse>;
  }

  /**
   * Deactivate a Service Fabric cluster node with the specified deactivation intent. Once the
   * deactivation is in progress, the deactivation intent can be increased, but not decreased (for
   * example, a node that is deactivated with the Pause intent can be deactivated further with
   * Restart, but not the other way around. Nodes may be reactivated using the Activate a node
   * operation any time after they are deactivated. If the deactivation is not complete, this will
   * cancel the deactivation. A node that goes down and comes back up while deactivated will still
   * need to be reactivated before services will be placed on that node.
   * @summary Deactivate a Service Fabric cluster node with the specified deactivation intent.
   * @param nodeName The name of the node.
   * @param deactivationIntentDescription Describes the intent or reason for deactivating the node.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  disableNode(nodeName: string, deactivationIntentDescription: Models.DeactivationIntentDescription, options?: Models.ServiceFabricClientDisableNodeOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param nodeName The name of the node.
   * @param deactivationIntentDescription Describes the intent or reason for deactivating the node.
   * @param callback The callback
   */
  disableNode(nodeName: string, deactivationIntentDescription: Models.DeactivationIntentDescription, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param nodeName The name of the node.
   * @param deactivationIntentDescription Describes the intent or reason for deactivating the node.
   * @param options The optional parameters
   * @param callback The callback
   */
  disableNode(nodeName: string, deactivationIntentDescription: Models.DeactivationIntentDescription, options: Models.ServiceFabricClientDisableNodeOptionalParams, callback: msRest.ServiceCallback<void>): void;
  disableNode(nodeName: string, deactivationIntentDescription: Models.DeactivationIntentDescription, options?: Models.ServiceFabricClientDisableNodeOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        nodeName,
        deactivationIntentDescription,
        options
      },
      disableNodeOperationSpec,
      callback);
  }

  /**
   * Activates a Service Fabric cluster node that is currently deactivated. Once activated, the node
   * will again become a viable target for placing new replicas, and any deactivated replicas
   * remaining on the node will be reactivated.
   * @summary Activate a Service Fabric cluster node that is currently deactivated.
   * @param nodeName The name of the node.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  enableNode(nodeName: string, options?: Models.ServiceFabricClientEnableNodeOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param nodeName The name of the node.
   * @param callback The callback
   */
  enableNode(nodeName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param nodeName The name of the node.
   * @param options The optional parameters
   * @param callback The callback
   */
  enableNode(nodeName: string, options: Models.ServiceFabricClientEnableNodeOptionalParams, callback: msRest.ServiceCallback<void>): void;
  enableNode(nodeName: string, options?: Models.ServiceFabricClientEnableNodeOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        nodeName,
        options
      },
      enableNodeOperationSpec,
      callback);
  }

  /**
   * This implies that it is not possible to recover the persisted state of that node. This generally
   * happens if a hard disk has been wiped clean, or if a hard disk crashes. The node has to be down
   * for this operation to be successful. This operation lets Service Fabric know that the replicas
   * on that node no longer exist, and that Service Fabric should stop waiting for those replicas to
   * come back up. Do not run this cmdlet if the state on the node has not been removed and the node
   * can come back up with its state intact. Starting from Service Fabric 6.5, in order to use this
   * API for seed nodes, please change the seed nodes to regular (non-seed) nodes and then invoke
   * this API to remove the node state. If the cluster is running on Azure, after the seed node goes
   * down, Service Fabric will try to change it to a non-seed node automatically. To make this
   * happen, make sure the number of non-seed nodes in the primary node type is no less than the
   * number of Down seed nodes. If necessary, add more nodes to the primary node type to achieve
   * this. For standalone cluster, if the Down seed node is not expected to come back up with its
   * state intact, please remove the node from the cluster, see
   * https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-windows-server-add-remove-nodes
   * @summary Notifies Service Fabric that the persisted state on a node has been permanently removed
   * or lost.
   * @param nodeName The name of the node.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  removeNodeState(nodeName: string, options?: Models.ServiceFabricClientRemoveNodeStateOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param nodeName The name of the node.
   * @param callback The callback
   */
  removeNodeState(nodeName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param nodeName The name of the node.
   * @param options The optional parameters
   * @param callback The callback
   */
  removeNodeState(nodeName: string, options: Models.ServiceFabricClientRemoveNodeStateOptionalParams, callback: msRest.ServiceCallback<void>): void;
  removeNodeState(nodeName: string, options?: Models.ServiceFabricClientRemoveNodeStateOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        nodeName,
        options
      },
      removeNodeStateOperationSpec,
      callback);
  }

  /**
   * Restarts a Service Fabric cluster node that is already started.
   * @summary Restarts a Service Fabric cluster node.
   * @param nodeName The name of the node.
   * @param restartNodeDescription The instance of the node to be restarted and a flag indicating the
   * need to take dump of the fabric process.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  restartNode(nodeName: string, restartNodeDescription: Models.RestartNodeDescription, options?: Models.ServiceFabricClientRestartNodeOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param nodeName The name of the node.
   * @param restartNodeDescription The instance of the node to be restarted and a flag indicating the
   * need to take dump of the fabric process.
   * @param callback The callback
   */
  restartNode(nodeName: string, restartNodeDescription: Models.RestartNodeDescription, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param nodeName The name of the node.
   * @param restartNodeDescription The instance of the node to be restarted and a flag indicating the
   * need to take dump of the fabric process.
   * @param options The optional parameters
   * @param callback The callback
   */
  restartNode(nodeName: string, restartNodeDescription: Models.RestartNodeDescription, options: Models.ServiceFabricClientRestartNodeOptionalParams, callback: msRest.ServiceCallback<void>): void;
  restartNode(nodeName: string, restartNodeDescription: Models.RestartNodeDescription, options?: Models.ServiceFabricClientRestartNodeOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        nodeName,
        restartNodeDescription,
        options
      },
      restartNodeOperationSpec,
      callback);
  }

  /**
   * This api allows removing all existing configuration overrides on specified node.
   * @summary Removes configuration overrides on the specified node.
   * @param nodeName The name of the node.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  removeConfigurationOverrides(nodeName: string, options?: Models.ServiceFabricClientRemoveConfigurationOverridesOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param nodeName The name of the node.
   * @param callback The callback
   */
  removeConfigurationOverrides(nodeName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param nodeName The name of the node.
   * @param options The optional parameters
   * @param callback The callback
   */
  removeConfigurationOverrides(nodeName: string, options: Models.ServiceFabricClientRemoveConfigurationOverridesOptionalParams, callback: msRest.ServiceCallback<void>): void;
  removeConfigurationOverrides(nodeName: string, options?: Models.ServiceFabricClientRemoveConfigurationOverridesOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        nodeName,
        options
      },
      removeConfigurationOverridesOperationSpec,
      callback);
  }

  /**
   * This api allows getting all existing configuration overrides on the specified node.
   * @summary Gets the list of configuration overrides on the specified node.
   * @param nodeName The name of the node.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetConfigurationOverridesResponse>
   */
  getConfigurationOverrides(nodeName: string, options?: Models.ServiceFabricClientGetConfigurationOverridesOptionalParams): Promise<Models.GetConfigurationOverridesResponse>;
  /**
   * @param nodeName The name of the node.
   * @param callback The callback
   */
  getConfigurationOverrides(nodeName: string, callback: msRest.ServiceCallback<Models.ConfigParameterOverride[]>): void;
  /**
   * @param nodeName The name of the node.
   * @param options The optional parameters
   * @param callback The callback
   */
  getConfigurationOverrides(nodeName: string, options: Models.ServiceFabricClientGetConfigurationOverridesOptionalParams, callback: msRest.ServiceCallback<Models.ConfigParameterOverride[]>): void;
  getConfigurationOverrides(nodeName: string, options?: Models.ServiceFabricClientGetConfigurationOverridesOptionalParams | msRest.ServiceCallback<Models.ConfigParameterOverride[]>, callback?: msRest.ServiceCallback<Models.ConfigParameterOverride[]>): Promise<Models.GetConfigurationOverridesResponse> {
    return this.sendOperationRequest(
      {
        nodeName,
        options
      },
      getConfigurationOverridesOperationSpec,
      callback) as Promise<Models.GetConfigurationOverridesResponse>;
  }

  /**
   * This api allows adding all existing configuration overrides on the specified node.
   * @summary Adds the list of configuration overrides on the specified node.
   * @param nodeName The name of the node.
   * @param configParameterOverrideList Description for adding list of configuration overrides.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  addConfigurationParameterOverrides(nodeName: string, configParameterOverrideList: Models.ConfigParameterOverride[], options?: Models.ServiceFabricClientAddConfigurationParameterOverridesOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param nodeName The name of the node.
   * @param configParameterOverrideList Description for adding list of configuration overrides.
   * @param callback The callback
   */
  addConfigurationParameterOverrides(nodeName: string, configParameterOverrideList: Models.ConfigParameterOverride[], callback: msRest.ServiceCallback<void>): void;
  /**
   * @param nodeName The name of the node.
   * @param configParameterOverrideList Description for adding list of configuration overrides.
   * @param options The optional parameters
   * @param callback The callback
   */
  addConfigurationParameterOverrides(nodeName: string, configParameterOverrideList: Models.ConfigParameterOverride[], options: Models.ServiceFabricClientAddConfigurationParameterOverridesOptionalParams, callback: msRest.ServiceCallback<void>): void;
  addConfigurationParameterOverrides(nodeName: string, configParameterOverrideList: Models.ConfigParameterOverride[], options?: Models.ServiceFabricClientAddConfigurationParameterOverridesOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        nodeName,
        configParameterOverrideList,
        options
      },
      addConfigurationParameterOverridesOperationSpec,
      callback);
  }

  /**
   * Returns the information about the application types that are provisioned or in the process of
   * being provisioned in the Service Fabric cluster. Each version of an application type is returned
   * as one application type. The response includes the name, version, status, and other details
   * about the application type. This is a paged query, meaning that if not all of the application
   * types fit in a page, one page of results is returned as well as a continuation token, which can
   * be used to get the next page. For example, if there are 10 application types but a page only
   * fits the first three application types, or if max results is set to 3, then three is returned.
   * To access the rest of the results, retrieve subsequent pages by using the returned continuation
   * token in the next query. An empty continuation token is returned if there are no subsequent
   * pages.
   * @summary Gets the list of application types in the Service Fabric cluster.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetApplicationTypeInfoListResponse>
   */
  getApplicationTypeInfoList(options?: Models.ServiceFabricClientGetApplicationTypeInfoListOptionalParams): Promise<Models.GetApplicationTypeInfoListResponse>;
  /**
   * @param callback The callback
   */
  getApplicationTypeInfoList(callback: msRest.ServiceCallback<Models.PagedApplicationTypeInfoList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getApplicationTypeInfoList(options: Models.ServiceFabricClientGetApplicationTypeInfoListOptionalParams, callback: msRest.ServiceCallback<Models.PagedApplicationTypeInfoList>): void;
  getApplicationTypeInfoList(options?: Models.ServiceFabricClientGetApplicationTypeInfoListOptionalParams | msRest.ServiceCallback<Models.PagedApplicationTypeInfoList>, callback?: msRest.ServiceCallback<Models.PagedApplicationTypeInfoList>): Promise<Models.GetApplicationTypeInfoListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getApplicationTypeInfoListOperationSpec,
      callback) as Promise<Models.GetApplicationTypeInfoListResponse>;
  }

  /**
   * Returns the information about the application types that are provisioned or in the process of
   * being provisioned in the Service Fabric cluster. These results are of application types whose
   * name match exactly the one specified as the parameter, and which comply with the given query
   * parameters. All versions of the application type matching the application type name are
   * returned, with each version returned as one application type. The response includes the name,
   * version, status, and other details about the application type. This is a paged query, meaning
   * that if not all of the application types fit in a page, one page of results is returned as well
   * as a continuation token, which can be used to get the next page. For example, if there are 10
   * application types but a page only fits the first three application types, or if max results is
   * set to 3, then three is returned. To access the rest of the results, retrieve subsequent pages
   * by using the returned continuation token in the next query. An empty continuation token is
   * returned if there are no subsequent pages.
   * @summary Gets the list of application types in the Service Fabric cluster matching exactly the
   * specified name.
   * @param applicationTypeName The name of the application type.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetApplicationTypeInfoListByNameResponse>
   */
  getApplicationTypeInfoListByName(applicationTypeName: string, options?: Models.ServiceFabricClientGetApplicationTypeInfoListByNameOptionalParams): Promise<Models.GetApplicationTypeInfoListByNameResponse>;
  /**
   * @param applicationTypeName The name of the application type.
   * @param callback The callback
   */
  getApplicationTypeInfoListByName(applicationTypeName: string, callback: msRest.ServiceCallback<Models.PagedApplicationTypeInfoList>): void;
  /**
   * @param applicationTypeName The name of the application type.
   * @param options The optional parameters
   * @param callback The callback
   */
  getApplicationTypeInfoListByName(applicationTypeName: string, options: Models.ServiceFabricClientGetApplicationTypeInfoListByNameOptionalParams, callback: msRest.ServiceCallback<Models.PagedApplicationTypeInfoList>): void;
  getApplicationTypeInfoListByName(applicationTypeName: string, options?: Models.ServiceFabricClientGetApplicationTypeInfoListByNameOptionalParams | msRest.ServiceCallback<Models.PagedApplicationTypeInfoList>, callback?: msRest.ServiceCallback<Models.PagedApplicationTypeInfoList>): Promise<Models.GetApplicationTypeInfoListByNameResponse> {
    return this.sendOperationRequest(
      {
        applicationTypeName,
        options
      },
      getApplicationTypeInfoListByNameOperationSpec,
      callback) as Promise<Models.GetApplicationTypeInfoListByNameResponse>;
  }

  /**
   * Provisions a Service Fabric application type with the cluster. The provision is required before
   * any new applications can be instantiated.
   * The provision operation can be performed either on the application package specified by the
   * relativePathInImageStore, or by using the URI of the external '.sfpkg'.
   * @summary Provisions or registers a Service Fabric application type with the cluster using the
   * '.sfpkg' package in the external store or using the application package in the image store.
   * @param provisionApplicationTypeDescriptionBaseRequiredBodyParam The base type of provision
   * application type description which supports either image store-based provision or external
   * store-based provision.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  provisionApplicationType(provisionApplicationTypeDescriptionBaseRequiredBodyParam: Models.ProvisionApplicationTypeDescriptionBaseUnion, options?: Models.ServiceFabricClientProvisionApplicationTypeOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param provisionApplicationTypeDescriptionBaseRequiredBodyParam The base type of provision
   * application type description which supports either image store-based provision or external
   * store-based provision.
   * @param callback The callback
   */
  provisionApplicationType(provisionApplicationTypeDescriptionBaseRequiredBodyParam: Models.ProvisionApplicationTypeDescriptionBaseUnion, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param provisionApplicationTypeDescriptionBaseRequiredBodyParam The base type of provision
   * application type description which supports either image store-based provision or external
   * store-based provision.
   * @param options The optional parameters
   * @param callback The callback
   */
  provisionApplicationType(provisionApplicationTypeDescriptionBaseRequiredBodyParam: Models.ProvisionApplicationTypeDescriptionBaseUnion, options: Models.ServiceFabricClientProvisionApplicationTypeOptionalParams, callback: msRest.ServiceCallback<void>): void;
  provisionApplicationType(provisionApplicationTypeDescriptionBaseRequiredBodyParam: Models.ProvisionApplicationTypeDescriptionBaseUnion, options?: Models.ServiceFabricClientProvisionApplicationTypeOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        provisionApplicationTypeDescriptionBaseRequiredBodyParam,
        options
      },
      provisionApplicationTypeOperationSpec,
      callback);
  }

  /**
   * This operation can only be performed if all application instances of the application type have
   * been deleted. Once the application type is unregistered, no new application instances can be
   * created for this particular application type.
   * @summary Removes or unregisters a Service Fabric application type from the cluster.
   * @param applicationTypeName The name of the application type.
   * @param unprovisionApplicationTypeDescriptionInfo The relative path for the application package
   * in the image store specified during the prior copy operation.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  unprovisionApplicationType(applicationTypeName: string, unprovisionApplicationTypeDescriptionInfo: Models.UnprovisionApplicationTypeDescriptionInfo, options?: Models.ServiceFabricClientUnprovisionApplicationTypeOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param applicationTypeName The name of the application type.
   * @param unprovisionApplicationTypeDescriptionInfo The relative path for the application package
   * in the image store specified during the prior copy operation.
   * @param callback The callback
   */
  unprovisionApplicationType(applicationTypeName: string, unprovisionApplicationTypeDescriptionInfo: Models.UnprovisionApplicationTypeDescriptionInfo, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param applicationTypeName The name of the application type.
   * @param unprovisionApplicationTypeDescriptionInfo The relative path for the application package
   * in the image store specified during the prior copy operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  unprovisionApplicationType(applicationTypeName: string, unprovisionApplicationTypeDescriptionInfo: Models.UnprovisionApplicationTypeDescriptionInfo, options: Models.ServiceFabricClientUnprovisionApplicationTypeOptionalParams, callback: msRest.ServiceCallback<void>): void;
  unprovisionApplicationType(applicationTypeName: string, unprovisionApplicationTypeDescriptionInfo: Models.UnprovisionApplicationTypeDescriptionInfo, options?: Models.ServiceFabricClientUnprovisionApplicationTypeOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        applicationTypeName,
        unprovisionApplicationTypeDescriptionInfo,
        options
      },
      unprovisionApplicationTypeOperationSpec,
      callback);
  }

  /**
   * Gets the list containing the information about service types that are supported by a provisioned
   * application type in a Service Fabric cluster. The provided application type must exist.
   * Otherwise, a 404 status is returned.
   * @summary Gets the list containing the information about service types that are supported by a
   * provisioned application type in a Service Fabric cluster.
   * @param applicationTypeName The name of the application type.
   * @param applicationTypeVersion The version of the application type.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetServiceTypeInfoListResponse>
   */
  getServiceTypeInfoList(applicationTypeName: string, applicationTypeVersion: string, options?: Models.ServiceFabricClientGetServiceTypeInfoListOptionalParams): Promise<Models.GetServiceTypeInfoListResponse>;
  /**
   * @param applicationTypeName The name of the application type.
   * @param applicationTypeVersion The version of the application type.
   * @param callback The callback
   */
  getServiceTypeInfoList(applicationTypeName: string, applicationTypeVersion: string, callback: msRest.ServiceCallback<Models.ServiceTypeInfo[]>): void;
  /**
   * @param applicationTypeName The name of the application type.
   * @param applicationTypeVersion The version of the application type.
   * @param options The optional parameters
   * @param callback The callback
   */
  getServiceTypeInfoList(applicationTypeName: string, applicationTypeVersion: string, options: Models.ServiceFabricClientGetServiceTypeInfoListOptionalParams, callback: msRest.ServiceCallback<Models.ServiceTypeInfo[]>): void;
  getServiceTypeInfoList(applicationTypeName: string, applicationTypeVersion: string, options?: Models.ServiceFabricClientGetServiceTypeInfoListOptionalParams | msRest.ServiceCallback<Models.ServiceTypeInfo[]>, callback?: msRest.ServiceCallback<Models.ServiceTypeInfo[]>): Promise<Models.GetServiceTypeInfoListResponse> {
    return this.sendOperationRequest(
      {
        applicationTypeName,
        applicationTypeVersion,
        options
      },
      getServiceTypeInfoListOperationSpec,
      callback) as Promise<Models.GetServiceTypeInfoListResponse>;
  }

  /**
   * Gets the information about a specific service type that is supported by a provisioned
   * application type in a Service Fabric cluster. The provided application type must exist.
   * Otherwise, a 404 status is returned. A 204 response is returned if the specified service type is
   * not found in the cluster.
   * @summary Gets the information about a specific service type that is supported by a provisioned
   * application type in a Service Fabric cluster.
   * @param applicationTypeName The name of the application type.
   * @param applicationTypeVersion The version of the application type.
   * @param serviceTypeName Specifies the name of a Service Fabric service type.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetServiceTypeInfoByNameResponse>
   */
  getServiceTypeInfoByName(applicationTypeName: string, applicationTypeVersion: string, serviceTypeName: string, options?: Models.ServiceFabricClientGetServiceTypeInfoByNameOptionalParams): Promise<Models.GetServiceTypeInfoByNameResponse>;
  /**
   * @param applicationTypeName The name of the application type.
   * @param applicationTypeVersion The version of the application type.
   * @param serviceTypeName Specifies the name of a Service Fabric service type.
   * @param callback The callback
   */
  getServiceTypeInfoByName(applicationTypeName: string, applicationTypeVersion: string, serviceTypeName: string, callback: msRest.ServiceCallback<Models.ServiceTypeInfo>): void;
  /**
   * @param applicationTypeName The name of the application type.
   * @param applicationTypeVersion The version of the application type.
   * @param serviceTypeName Specifies the name of a Service Fabric service type.
   * @param options The optional parameters
   * @param callback The callback
   */
  getServiceTypeInfoByName(applicationTypeName: string, applicationTypeVersion: string, serviceTypeName: string, options: Models.ServiceFabricClientGetServiceTypeInfoByNameOptionalParams, callback: msRest.ServiceCallback<Models.ServiceTypeInfo>): void;
  getServiceTypeInfoByName(applicationTypeName: string, applicationTypeVersion: string, serviceTypeName: string, options?: Models.ServiceFabricClientGetServiceTypeInfoByNameOptionalParams | msRest.ServiceCallback<Models.ServiceTypeInfo>, callback?: msRest.ServiceCallback<Models.ServiceTypeInfo>): Promise<Models.GetServiceTypeInfoByNameResponse> {
    return this.sendOperationRequest(
      {
        applicationTypeName,
        applicationTypeVersion,
        serviceTypeName,
        options
      },
      getServiceTypeInfoByNameOperationSpec,
      callback) as Promise<Models.GetServiceTypeInfoByNameResponse>;
  }

  /**
   * Gets the manifest describing a service type. The response contains the service manifest XML as a
   * string.
   * @summary Gets the manifest describing a service type.
   * @param applicationTypeName The name of the application type.
   * @param applicationTypeVersion The version of the application type.
   * @param serviceManifestName The name of a service manifest registered as part of an application
   * type in a Service Fabric cluster.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetServiceManifestResponse>
   */
  getServiceManifest(applicationTypeName: string, applicationTypeVersion: string, serviceManifestName: string, options?: Models.ServiceFabricClientGetServiceManifestOptionalParams): Promise<Models.GetServiceManifestResponse>;
  /**
   * @param applicationTypeName The name of the application type.
   * @param applicationTypeVersion The version of the application type.
   * @param serviceManifestName The name of a service manifest registered as part of an application
   * type in a Service Fabric cluster.
   * @param callback The callback
   */
  getServiceManifest(applicationTypeName: string, applicationTypeVersion: string, serviceManifestName: string, callback: msRest.ServiceCallback<Models.ServiceTypeManifest>): void;
  /**
   * @param applicationTypeName The name of the application type.
   * @param applicationTypeVersion The version of the application type.
   * @param serviceManifestName The name of a service manifest registered as part of an application
   * type in a Service Fabric cluster.
   * @param options The optional parameters
   * @param callback The callback
   */
  getServiceManifest(applicationTypeName: string, applicationTypeVersion: string, serviceManifestName: string, options: Models.ServiceFabricClientGetServiceManifestOptionalParams, callback: msRest.ServiceCallback<Models.ServiceTypeManifest>): void;
  getServiceManifest(applicationTypeName: string, applicationTypeVersion: string, serviceManifestName: string, options?: Models.ServiceFabricClientGetServiceManifestOptionalParams | msRest.ServiceCallback<Models.ServiceTypeManifest>, callback?: msRest.ServiceCallback<Models.ServiceTypeManifest>): Promise<Models.GetServiceManifestResponse> {
    return this.sendOperationRequest(
      {
        applicationTypeName,
        applicationTypeVersion,
        serviceManifestName,
        options
      },
      getServiceManifestOperationSpec,
      callback) as Promise<Models.GetServiceManifestResponse>;
  }

  /**
   * Gets the list containing the information about service types from the applications deployed on a
   * node in a Service Fabric cluster. The response includes the name of the service type, its
   * registration status, the code package that registered it and activation ID of the service
   * package.
   * @summary Gets the list containing the information about service types from the applications
   * deployed on a node in a Service Fabric cluster.
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDeployedServiceTypeInfoListResponse>
   */
  getDeployedServiceTypeInfoList(nodeName: string, applicationId: string, options?: Models.ServiceFabricClientGetDeployedServiceTypeInfoListOptionalParams): Promise<Models.GetDeployedServiceTypeInfoListResponse>;
  /**
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param callback The callback
   */
  getDeployedServiceTypeInfoList(nodeName: string, applicationId: string, callback: msRest.ServiceCallback<Models.DeployedServiceTypeInfo[]>): void;
  /**
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDeployedServiceTypeInfoList(nodeName: string, applicationId: string, options: Models.ServiceFabricClientGetDeployedServiceTypeInfoListOptionalParams, callback: msRest.ServiceCallback<Models.DeployedServiceTypeInfo[]>): void;
  getDeployedServiceTypeInfoList(nodeName: string, applicationId: string, options?: Models.ServiceFabricClientGetDeployedServiceTypeInfoListOptionalParams | msRest.ServiceCallback<Models.DeployedServiceTypeInfo[]>, callback?: msRest.ServiceCallback<Models.DeployedServiceTypeInfo[]>): Promise<Models.GetDeployedServiceTypeInfoListResponse> {
    return this.sendOperationRequest(
      {
        nodeName,
        applicationId,
        options
      },
      getDeployedServiceTypeInfoListOperationSpec,
      callback) as Promise<Models.GetDeployedServiceTypeInfoListResponse>;
  }

  /**
   * Gets the list containing the information about a specific service type from the applications
   * deployed on a node in a Service Fabric cluster. The response includes the name of the service
   * type, its registration status, the code package that registered it and activation ID of the
   * service package. Each entry represents one activation of a service type, differentiated by the
   * activation ID.
   * @summary Gets the information about a specified service type of the application deployed on a
   * node in a Service Fabric cluster.
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param serviceTypeName Specifies the name of a Service Fabric service type.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDeployedServiceTypeInfoByNameResponse>
   */
  getDeployedServiceTypeInfoByName(nodeName: string, applicationId: string, serviceTypeName: string, options?: Models.ServiceFabricClientGetDeployedServiceTypeInfoByNameOptionalParams): Promise<Models.GetDeployedServiceTypeInfoByNameResponse>;
  /**
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param serviceTypeName Specifies the name of a Service Fabric service type.
   * @param callback The callback
   */
  getDeployedServiceTypeInfoByName(nodeName: string, applicationId: string, serviceTypeName: string, callback: msRest.ServiceCallback<Models.DeployedServiceTypeInfo[]>): void;
  /**
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param serviceTypeName Specifies the name of a Service Fabric service type.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDeployedServiceTypeInfoByName(nodeName: string, applicationId: string, serviceTypeName: string, options: Models.ServiceFabricClientGetDeployedServiceTypeInfoByNameOptionalParams, callback: msRest.ServiceCallback<Models.DeployedServiceTypeInfo[]>): void;
  getDeployedServiceTypeInfoByName(nodeName: string, applicationId: string, serviceTypeName: string, options?: Models.ServiceFabricClientGetDeployedServiceTypeInfoByNameOptionalParams | msRest.ServiceCallback<Models.DeployedServiceTypeInfo[]>, callback?: msRest.ServiceCallback<Models.DeployedServiceTypeInfo[]>): Promise<Models.GetDeployedServiceTypeInfoByNameResponse> {
    return this.sendOperationRequest(
      {
        nodeName,
        applicationId,
        serviceTypeName,
        options
      },
      getDeployedServiceTypeInfoByNameOperationSpec,
      callback) as Promise<Models.GetDeployedServiceTypeInfoByNameResponse>;
  }

  /**
   * Creates a Service Fabric application using the specified description.
   * @summary Creates a Service Fabric application.
   * @param applicationDescription Description for creating an application.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  createApplication(applicationDescription: Models.ApplicationDescription, options?: Models.ServiceFabricClientCreateApplicationOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param applicationDescription Description for creating an application.
   * @param callback The callback
   */
  createApplication(applicationDescription: Models.ApplicationDescription, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param applicationDescription Description for creating an application.
   * @param options The optional parameters
   * @param callback The callback
   */
  createApplication(applicationDescription: Models.ApplicationDescription, options: Models.ServiceFabricClientCreateApplicationOptionalParams, callback: msRest.ServiceCallback<void>): void;
  createApplication(applicationDescription: Models.ApplicationDescription, options?: Models.ServiceFabricClientCreateApplicationOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        applicationDescription,
        options
      },
      createApplicationOperationSpec,
      callback);
  }

  /**
   * An application must be created before it can be deleted. Deleting an application will delete all
   * services that are part of that application. By default, Service Fabric will try to close service
   * replicas in a graceful manner and then delete the service. However, if a service is having
   * issues closing the replica gracefully, the delete operation may take a long time or get stuck.
   * Use the optional ForceRemove flag to skip the graceful close sequence and forcefully delete the
   * application and all of its services.
   * @summary Deletes an existing Service Fabric application.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteApplication(applicationId: string, options?: Models.ServiceFabricClientDeleteApplicationOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param callback The callback
   */
  deleteApplication(applicationId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteApplication(applicationId: string, options: Models.ServiceFabricClientDeleteApplicationOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteApplication(applicationId: string, options?: Models.ServiceFabricClientDeleteApplicationOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        applicationId,
        options
      },
      deleteApplicationOperationSpec,
      callback);
  }

  /**
   * Returns the load information about the application that was created or in the process of being
   * created in the Service Fabric cluster and whose name matches the one specified as the parameter.
   * The response includes the name, minimum nodes, maximum nodes, the number of nodes the
   * application is occupying currently, and application load metric information about the
   * application.
   * @summary Gets load information about a Service Fabric application.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetApplicationLoadInfoResponse>
   */
  getApplicationLoadInfo(applicationId: string, options?: Models.ServiceFabricClientGetApplicationLoadInfoOptionalParams): Promise<Models.GetApplicationLoadInfoResponse>;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param callback The callback
   */
  getApplicationLoadInfo(applicationId: string, callback: msRest.ServiceCallback<Models.ApplicationLoadInfo>): void;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param options The optional parameters
   * @param callback The callback
   */
  getApplicationLoadInfo(applicationId: string, options: Models.ServiceFabricClientGetApplicationLoadInfoOptionalParams, callback: msRest.ServiceCallback<Models.ApplicationLoadInfo>): void;
  getApplicationLoadInfo(applicationId: string, options?: Models.ServiceFabricClientGetApplicationLoadInfoOptionalParams | msRest.ServiceCallback<Models.ApplicationLoadInfo>, callback?: msRest.ServiceCallback<Models.ApplicationLoadInfo>): Promise<Models.GetApplicationLoadInfoResponse> {
    return this.sendOperationRequest(
      {
        applicationId,
        options
      },
      getApplicationLoadInfoOperationSpec,
      callback) as Promise<Models.GetApplicationLoadInfoResponse>;
  }

  /**
   * Gets the information about the applications that were created or in the process of being created
   * in the Service Fabric cluster and match the specified filters. The response includes the name,
   * type, status, parameters, and other details about the application. If the applications do not
   * fit in a page, one page of results is returned as well as a continuation token, which can be
   * used to get the next page. Filters ApplicationTypeName and ApplicationDefinitionKindFilter
   * cannot be specified at the same time.
   * @summary Gets the list of applications created in the Service Fabric cluster that match the
   * specified filters.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetApplicationInfoListResponse>
   */
  getApplicationInfoList(options?: Models.ServiceFabricClientGetApplicationInfoListOptionalParams): Promise<Models.GetApplicationInfoListResponse>;
  /**
   * @param callback The callback
   */
  getApplicationInfoList(callback: msRest.ServiceCallback<Models.PagedApplicationInfoList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getApplicationInfoList(options: Models.ServiceFabricClientGetApplicationInfoListOptionalParams, callback: msRest.ServiceCallback<Models.PagedApplicationInfoList>): void;
  getApplicationInfoList(options?: Models.ServiceFabricClientGetApplicationInfoListOptionalParams | msRest.ServiceCallback<Models.PagedApplicationInfoList>, callback?: msRest.ServiceCallback<Models.PagedApplicationInfoList>): Promise<Models.GetApplicationInfoListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getApplicationInfoListOperationSpec,
      callback) as Promise<Models.GetApplicationInfoListResponse>;
  }

  /**
   * Returns the information about the application that was created or in the process of being
   * created in the Service Fabric cluster and whose name matches the one specified as the parameter.
   * The response includes the name, type, status, parameters, and other details about the
   * application.
   * @summary Gets information about a Service Fabric application.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetApplicationInfoResponse>
   */
  getApplicationInfo(applicationId: string, options?: Models.ServiceFabricClientGetApplicationInfoOptionalParams): Promise<Models.GetApplicationInfoResponse>;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param callback The callback
   */
  getApplicationInfo(applicationId: string, callback: msRest.ServiceCallback<Models.ApplicationInfo>): void;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param options The optional parameters
   * @param callback The callback
   */
  getApplicationInfo(applicationId: string, options: Models.ServiceFabricClientGetApplicationInfoOptionalParams, callback: msRest.ServiceCallback<Models.ApplicationInfo>): void;
  getApplicationInfo(applicationId: string, options?: Models.ServiceFabricClientGetApplicationInfoOptionalParams | msRest.ServiceCallback<Models.ApplicationInfo>, callback?: msRest.ServiceCallback<Models.ApplicationInfo>): Promise<Models.GetApplicationInfoResponse> {
    return this.sendOperationRequest(
      {
        applicationId,
        options
      },
      getApplicationInfoOperationSpec,
      callback) as Promise<Models.GetApplicationInfoResponse>;
  }

  /**
   * Returns the heath state of the service fabric application. The response reports either Ok, Error
   * or Warning health state. If the entity is not found in the health store, it will return Error.
   * @summary Gets the health of the service fabric application.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetApplicationHealthResponse>
   */
  getApplicationHealth(applicationId: string, options?: Models.ServiceFabricClientGetApplicationHealthOptionalParams): Promise<Models.GetApplicationHealthResponse>;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param callback The callback
   */
  getApplicationHealth(applicationId: string, callback: msRest.ServiceCallback<Models.ApplicationHealth>): void;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param options The optional parameters
   * @param callback The callback
   */
  getApplicationHealth(applicationId: string, options: Models.ServiceFabricClientGetApplicationHealthOptionalParams, callback: msRest.ServiceCallback<Models.ApplicationHealth>): void;
  getApplicationHealth(applicationId: string, options?: Models.ServiceFabricClientGetApplicationHealthOptionalParams | msRest.ServiceCallback<Models.ApplicationHealth>, callback?: msRest.ServiceCallback<Models.ApplicationHealth>): Promise<Models.GetApplicationHealthResponse> {
    return this.sendOperationRequest(
      {
        applicationId,
        options
      },
      getApplicationHealthOperationSpec,
      callback) as Promise<Models.GetApplicationHealthResponse>;
  }

  /**
   * Gets the health of a Service Fabric application. Use EventsHealthStateFilter to filter the
   * collection of health events reported on the node based on the health state. Use
   * ClusterHealthPolicies to override the health policies used to evaluate the health.
   * @summary Gets the health of a Service Fabric application using the specified policy.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetApplicationHealthUsingPolicyResponse>
   */
  getApplicationHealthUsingPolicy(applicationId: string, options?: Models.ServiceFabricClientGetApplicationHealthUsingPolicyOptionalParams): Promise<Models.GetApplicationHealthUsingPolicyResponse>;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param callback The callback
   */
  getApplicationHealthUsingPolicy(applicationId: string, callback: msRest.ServiceCallback<Models.ApplicationHealth>): void;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param options The optional parameters
   * @param callback The callback
   */
  getApplicationHealthUsingPolicy(applicationId: string, options: Models.ServiceFabricClientGetApplicationHealthUsingPolicyOptionalParams, callback: msRest.ServiceCallback<Models.ApplicationHealth>): void;
  getApplicationHealthUsingPolicy(applicationId: string, options?: Models.ServiceFabricClientGetApplicationHealthUsingPolicyOptionalParams | msRest.ServiceCallback<Models.ApplicationHealth>, callback?: msRest.ServiceCallback<Models.ApplicationHealth>): Promise<Models.GetApplicationHealthUsingPolicyResponse> {
    return this.sendOperationRequest(
      {
        applicationId,
        options
      },
      getApplicationHealthUsingPolicyOperationSpec,
      callback) as Promise<Models.GetApplicationHealthUsingPolicyResponse>;
  }

  /**
   * Reports health state of the specified Service Fabric application. The report must contain the
   * information about the source of the health report and property on which it is reported.
   * The report is sent to a Service Fabric gateway Application, which forwards to the health store.
   * The report may be accepted by the gateway, but rejected by the health store after extra
   * validation.
   * For example, the health store may reject the report because of an invalid parameter, like a
   * stale sequence number.
   * To see whether the report was applied in the health store, get application health and check that
   * the report appears in the HealthEvents section.
   * @summary Sends a health report on the Service Fabric application.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param healthInformation Describes the health information for the health report. This
   * information needs to be present in all of the health reports sent to the health manager.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  reportApplicationHealth(applicationId: string, healthInformation: Models.HealthInformation, options?: Models.ServiceFabricClientReportApplicationHealthOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param healthInformation Describes the health information for the health report. This
   * information needs to be present in all of the health reports sent to the health manager.
   * @param callback The callback
   */
  reportApplicationHealth(applicationId: string, healthInformation: Models.HealthInformation, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param healthInformation Describes the health information for the health report. This
   * information needs to be present in all of the health reports sent to the health manager.
   * @param options The optional parameters
   * @param callback The callback
   */
  reportApplicationHealth(applicationId: string, healthInformation: Models.HealthInformation, options: Models.ServiceFabricClientReportApplicationHealthOptionalParams, callback: msRest.ServiceCallback<void>): void;
  reportApplicationHealth(applicationId: string, healthInformation: Models.HealthInformation, options?: Models.ServiceFabricClientReportApplicationHealthOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        applicationId,
        healthInformation,
        options
      },
      reportApplicationHealthOperationSpec,
      callback);
  }

  /**
   * Validates the supplied application upgrade parameters and starts upgrading the application if
   * the parameters are valid.
   * @summary Starts upgrading an application in the Service Fabric cluster.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param applicationUpgradeDescription Parameters for an application upgrade.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  startApplicationUpgrade(applicationId: string, applicationUpgradeDescription: Models.ApplicationUpgradeDescription, options?: Models.ServiceFabricClientStartApplicationUpgradeOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param applicationUpgradeDescription Parameters for an application upgrade.
   * @param callback The callback
   */
  startApplicationUpgrade(applicationId: string, applicationUpgradeDescription: Models.ApplicationUpgradeDescription, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param applicationUpgradeDescription Parameters for an application upgrade.
   * @param options The optional parameters
   * @param callback The callback
   */
  startApplicationUpgrade(applicationId: string, applicationUpgradeDescription: Models.ApplicationUpgradeDescription, options: Models.ServiceFabricClientStartApplicationUpgradeOptionalParams, callback: msRest.ServiceCallback<void>): void;
  startApplicationUpgrade(applicationId: string, applicationUpgradeDescription: Models.ApplicationUpgradeDescription, options?: Models.ServiceFabricClientStartApplicationUpgradeOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        applicationId,
        applicationUpgradeDescription,
        options
      },
      startApplicationUpgradeOperationSpec,
      callback);
  }

  /**
   * Returns information about the state of the latest application upgrade along with details to aid
   * debugging application health issues.
   * @summary Gets details for the latest upgrade performed on this application.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetApplicationUpgradeResponse>
   */
  getApplicationUpgrade(applicationId: string, options?: Models.ServiceFabricClientGetApplicationUpgradeOptionalParams): Promise<Models.GetApplicationUpgradeResponse>;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param callback The callback
   */
  getApplicationUpgrade(applicationId: string, callback: msRest.ServiceCallback<Models.ApplicationUpgradeProgressInfo>): void;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param options The optional parameters
   * @param callback The callback
   */
  getApplicationUpgrade(applicationId: string, options: Models.ServiceFabricClientGetApplicationUpgradeOptionalParams, callback: msRest.ServiceCallback<Models.ApplicationUpgradeProgressInfo>): void;
  getApplicationUpgrade(applicationId: string, options?: Models.ServiceFabricClientGetApplicationUpgradeOptionalParams | msRest.ServiceCallback<Models.ApplicationUpgradeProgressInfo>, callback?: msRest.ServiceCallback<Models.ApplicationUpgradeProgressInfo>): Promise<Models.GetApplicationUpgradeResponse> {
    return this.sendOperationRequest(
      {
        applicationId,
        options
      },
      getApplicationUpgradeOperationSpec,
      callback) as Promise<Models.GetApplicationUpgradeResponse>;
  }

  /**
   * Updates the parameters of an ongoing application upgrade from the ones specified at the time of
   * starting the application upgrade. This may be required to mitigate stuck application upgrades
   * due to incorrect parameters or issues in the application to make progress.
   * @summary Updates an ongoing application upgrade in the Service Fabric cluster.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param applicationUpgradeUpdateDescription Parameters for updating an existing application
   * upgrade.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateApplicationUpgrade(applicationId: string, applicationUpgradeUpdateDescription: Models.ApplicationUpgradeUpdateDescription, options?: Models.ServiceFabricClientUpdateApplicationUpgradeOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param applicationUpgradeUpdateDescription Parameters for updating an existing application
   * upgrade.
   * @param callback The callback
   */
  updateApplicationUpgrade(applicationId: string, applicationUpgradeUpdateDescription: Models.ApplicationUpgradeUpdateDescription, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param applicationUpgradeUpdateDescription Parameters for updating an existing application
   * upgrade.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateApplicationUpgrade(applicationId: string, applicationUpgradeUpdateDescription: Models.ApplicationUpgradeUpdateDescription, options: Models.ServiceFabricClientUpdateApplicationUpgradeOptionalParams, callback: msRest.ServiceCallback<void>): void;
  updateApplicationUpgrade(applicationId: string, applicationUpgradeUpdateDescription: Models.ApplicationUpgradeUpdateDescription, options?: Models.ServiceFabricClientUpdateApplicationUpgradeOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        applicationId,
        applicationUpgradeUpdateDescription,
        options
      },
      updateApplicationUpgradeOperationSpec,
      callback);
  }

  /**
   * Resumes an unmonitored manual Service Fabric application upgrade. Service Fabric upgrades one
   * upgrade domain at a time. For unmonitored manual upgrades, after Service Fabric finishes an
   * upgrade domain, it waits for you to call this API before proceeding to the next upgrade domain.
   * @summary Resumes upgrading an application in the Service Fabric cluster.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param resumeApplicationUpgradeDescription Describes the parameters for resuming an application
   * upgrade.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  resumeApplicationUpgrade(applicationId: string, resumeApplicationUpgradeDescription: Models.ResumeApplicationUpgradeDescription, options?: Models.ServiceFabricClientResumeApplicationUpgradeOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param resumeApplicationUpgradeDescription Describes the parameters for resuming an application
   * upgrade.
   * @param callback The callback
   */
  resumeApplicationUpgrade(applicationId: string, resumeApplicationUpgradeDescription: Models.ResumeApplicationUpgradeDescription, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param resumeApplicationUpgradeDescription Describes the parameters for resuming an application
   * upgrade.
   * @param options The optional parameters
   * @param callback The callback
   */
  resumeApplicationUpgrade(applicationId: string, resumeApplicationUpgradeDescription: Models.ResumeApplicationUpgradeDescription, options: Models.ServiceFabricClientResumeApplicationUpgradeOptionalParams, callback: msRest.ServiceCallback<void>): void;
  resumeApplicationUpgrade(applicationId: string, resumeApplicationUpgradeDescription: Models.ResumeApplicationUpgradeDescription, options?: Models.ServiceFabricClientResumeApplicationUpgradeOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        applicationId,
        resumeApplicationUpgradeDescription,
        options
      },
      resumeApplicationUpgradeOperationSpec,
      callback);
  }

  /**
   * Starts rolling back the current application upgrade to the previous version. This API can only
   * be used to roll back the current in-progress upgrade that is rolling forward to new version. If
   * the application is not currently being upgraded use StartApplicationUpgrade API to upgrade it to
   * desired version, including rolling back to a previous version.
   * @summary Starts rolling back the currently on-going upgrade of an application in the Service
   * Fabric cluster.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  rollbackApplicationUpgrade(applicationId: string, options?: Models.ServiceFabricClientRollbackApplicationUpgradeOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param callback The callback
   */
  rollbackApplicationUpgrade(applicationId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param options The optional parameters
   * @param callback The callback
   */
  rollbackApplicationUpgrade(applicationId: string, options: Models.ServiceFabricClientRollbackApplicationUpgradeOptionalParams, callback: msRest.ServiceCallback<void>): void;
  rollbackApplicationUpgrade(applicationId: string, options?: Models.ServiceFabricClientRollbackApplicationUpgradeOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        applicationId,
        options
      },
      rollbackApplicationUpgradeOperationSpec,
      callback);
  }

  /**
   * Gets the list of applications deployed on a Service Fabric node. The results do not include
   * information about deployed system applications unless explicitly queried for by ID. Results
   * encompass deployed applications in active, activating, and downloading states. This query
   * requires that the node name corresponds to a node on the cluster. The query fails if the
   * provided node name does not point to any active Service Fabric nodes on the cluster.
   * @summary Gets the list of applications deployed on a Service Fabric node.
   * @param nodeName The name of the node.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDeployedApplicationInfoListResponse>
   */
  getDeployedApplicationInfoList(nodeName: string, options?: Models.ServiceFabricClientGetDeployedApplicationInfoListOptionalParams): Promise<Models.GetDeployedApplicationInfoListResponse>;
  /**
   * @param nodeName The name of the node.
   * @param callback The callback
   */
  getDeployedApplicationInfoList(nodeName: string, callback: msRest.ServiceCallback<Models.PagedDeployedApplicationInfoList>): void;
  /**
   * @param nodeName The name of the node.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDeployedApplicationInfoList(nodeName: string, options: Models.ServiceFabricClientGetDeployedApplicationInfoListOptionalParams, callback: msRest.ServiceCallback<Models.PagedDeployedApplicationInfoList>): void;
  getDeployedApplicationInfoList(nodeName: string, options?: Models.ServiceFabricClientGetDeployedApplicationInfoListOptionalParams | msRest.ServiceCallback<Models.PagedDeployedApplicationInfoList>, callback?: msRest.ServiceCallback<Models.PagedDeployedApplicationInfoList>): Promise<Models.GetDeployedApplicationInfoListResponse> {
    return this.sendOperationRequest(
      {
        nodeName,
        options
      },
      getDeployedApplicationInfoListOperationSpec,
      callback) as Promise<Models.GetDeployedApplicationInfoListResponse>;
  }

  /**
   * This query returns system application information if the application ID provided is for system
   * application. Results encompass deployed applications in active, activating, and downloading
   * states. This query requires that the node name corresponds to a node on the cluster. The query
   * fails if the provided node name does not point to any active Service Fabric nodes on the
   * cluster.
   * @summary Gets the information about an application deployed on a Service Fabric node.
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDeployedApplicationInfoResponse>
   */
  getDeployedApplicationInfo(nodeName: string, applicationId: string, options?: Models.ServiceFabricClientGetDeployedApplicationInfoOptionalParams): Promise<Models.GetDeployedApplicationInfoResponse>;
  /**
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param callback The callback
   */
  getDeployedApplicationInfo(nodeName: string, applicationId: string, callback: msRest.ServiceCallback<Models.DeployedApplicationInfo>): void;
  /**
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDeployedApplicationInfo(nodeName: string, applicationId: string, options: Models.ServiceFabricClientGetDeployedApplicationInfoOptionalParams, callback: msRest.ServiceCallback<Models.DeployedApplicationInfo>): void;
  getDeployedApplicationInfo(nodeName: string, applicationId: string, options?: Models.ServiceFabricClientGetDeployedApplicationInfoOptionalParams | msRest.ServiceCallback<Models.DeployedApplicationInfo>, callback?: msRest.ServiceCallback<Models.DeployedApplicationInfo>): Promise<Models.GetDeployedApplicationInfoResponse> {
    return this.sendOperationRequest(
      {
        nodeName,
        applicationId,
        options
      },
      getDeployedApplicationInfoOperationSpec,
      callback) as Promise<Models.GetDeployedApplicationInfoResponse>;
  }

  /**
   * Gets the information about health of an application deployed on a Service Fabric node. Use
   * EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported
   * on the deployed application based on health state. Use DeployedServicePackagesHealthStateFilter
   * to optionally filter for DeployedServicePackageHealth children based on health state.
   * @summary Gets the information about health of an application deployed on a Service Fabric node.
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDeployedApplicationHealthResponse>
   */
  getDeployedApplicationHealth(nodeName: string, applicationId: string, options?: Models.ServiceFabricClientGetDeployedApplicationHealthOptionalParams): Promise<Models.GetDeployedApplicationHealthResponse>;
  /**
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param callback The callback
   */
  getDeployedApplicationHealth(nodeName: string, applicationId: string, callback: msRest.ServiceCallback<Models.DeployedApplicationHealth>): void;
  /**
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDeployedApplicationHealth(nodeName: string, applicationId: string, options: Models.ServiceFabricClientGetDeployedApplicationHealthOptionalParams, callback: msRest.ServiceCallback<Models.DeployedApplicationHealth>): void;
  getDeployedApplicationHealth(nodeName: string, applicationId: string, options?: Models.ServiceFabricClientGetDeployedApplicationHealthOptionalParams | msRest.ServiceCallback<Models.DeployedApplicationHealth>, callback?: msRest.ServiceCallback<Models.DeployedApplicationHealth>): Promise<Models.GetDeployedApplicationHealthResponse> {
    return this.sendOperationRequest(
      {
        nodeName,
        applicationId,
        options
      },
      getDeployedApplicationHealthOperationSpec,
      callback) as Promise<Models.GetDeployedApplicationHealthResponse>;
  }

  /**
   * Gets the information about health of an application deployed on a Service Fabric node using the
   * specified policy. Use EventsHealthStateFilter to optionally filter for the collection of
   * HealthEvent objects reported on the deployed application based on health state. Use
   * DeployedServicePackagesHealthStateFilter to optionally filter for DeployedServicePackageHealth
   * children based on health state. Use ApplicationHealthPolicy to optionally override the health
   * policies used to evaluate the health. This API only uses 'ConsiderWarningAsError' field of the
   * ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the
   * deployed application.
   * @summary Gets the information about health of an application deployed on a Service Fabric node.
   * using the specified policy.
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDeployedApplicationHealthUsingPolicyResponse>
   */
  getDeployedApplicationHealthUsingPolicy(nodeName: string, applicationId: string, options?: Models.ServiceFabricClientGetDeployedApplicationHealthUsingPolicyOptionalParams): Promise<Models.GetDeployedApplicationHealthUsingPolicyResponse>;
  /**
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param callback The callback
   */
  getDeployedApplicationHealthUsingPolicy(nodeName: string, applicationId: string, callback: msRest.ServiceCallback<Models.DeployedApplicationHealth>): void;
  /**
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDeployedApplicationHealthUsingPolicy(nodeName: string, applicationId: string, options: Models.ServiceFabricClientGetDeployedApplicationHealthUsingPolicyOptionalParams, callback: msRest.ServiceCallback<Models.DeployedApplicationHealth>): void;
  getDeployedApplicationHealthUsingPolicy(nodeName: string, applicationId: string, options?: Models.ServiceFabricClientGetDeployedApplicationHealthUsingPolicyOptionalParams | msRest.ServiceCallback<Models.DeployedApplicationHealth>, callback?: msRest.ServiceCallback<Models.DeployedApplicationHealth>): Promise<Models.GetDeployedApplicationHealthUsingPolicyResponse> {
    return this.sendOperationRequest(
      {
        nodeName,
        applicationId,
        options
      },
      getDeployedApplicationHealthUsingPolicyOperationSpec,
      callback) as Promise<Models.GetDeployedApplicationHealthUsingPolicyResponse>;
  }

  /**
   * Reports health state of the application deployed on a Service Fabric node. The report must
   * contain the information about the source of the health report and property on which it is
   * reported.
   * The report is sent to a Service Fabric gateway Service, which forwards to the health store.
   * The report may be accepted by the gateway, but rejected by the health store after extra
   * validation.
   * For example, the health store may reject the report because of an invalid parameter, like a
   * stale sequence number.
   * To see whether the report was applied in the health store, get deployed application health and
   * check that the report appears in the HealthEvents section.
   * @summary Sends a health report on the Service Fabric application deployed on a Service Fabric
   * node.
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param healthInformation Describes the health information for the health report. This
   * information needs to be present in all of the health reports sent to the health manager.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  reportDeployedApplicationHealth(nodeName: string, applicationId: string, healthInformation: Models.HealthInformation, options?: Models.ServiceFabricClientReportDeployedApplicationHealthOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param healthInformation Describes the health information for the health report. This
   * information needs to be present in all of the health reports sent to the health manager.
   * @param callback The callback
   */
  reportDeployedApplicationHealth(nodeName: string, applicationId: string, healthInformation: Models.HealthInformation, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param healthInformation Describes the health information for the health report. This
   * information needs to be present in all of the health reports sent to the health manager.
   * @param options The optional parameters
   * @param callback The callback
   */
  reportDeployedApplicationHealth(nodeName: string, applicationId: string, healthInformation: Models.HealthInformation, options: Models.ServiceFabricClientReportDeployedApplicationHealthOptionalParams, callback: msRest.ServiceCallback<void>): void;
  reportDeployedApplicationHealth(nodeName: string, applicationId: string, healthInformation: Models.HealthInformation, options?: Models.ServiceFabricClientReportDeployedApplicationHealthOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        nodeName,
        applicationId,
        healthInformation,
        options
      },
      reportDeployedApplicationHealthOperationSpec,
      callback);
  }

  /**
   * The response contains the application manifest XML as a string.
   * @summary Gets the manifest describing an application type.
   * @param applicationTypeName The name of the application type.
   * @param applicationTypeVersion The version of the application type.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetApplicationManifestResponse>
   */
  getApplicationManifest(applicationTypeName: string, applicationTypeVersion: string, options?: Models.ServiceFabricClientGetApplicationManifestOptionalParams): Promise<Models.GetApplicationManifestResponse>;
  /**
   * @param applicationTypeName The name of the application type.
   * @param applicationTypeVersion The version of the application type.
   * @param callback The callback
   */
  getApplicationManifest(applicationTypeName: string, applicationTypeVersion: string, callback: msRest.ServiceCallback<Models.ApplicationTypeManifest>): void;
  /**
   * @param applicationTypeName The name of the application type.
   * @param applicationTypeVersion The version of the application type.
   * @param options The optional parameters
   * @param callback The callback
   */
  getApplicationManifest(applicationTypeName: string, applicationTypeVersion: string, options: Models.ServiceFabricClientGetApplicationManifestOptionalParams, callback: msRest.ServiceCallback<Models.ApplicationTypeManifest>): void;
  getApplicationManifest(applicationTypeName: string, applicationTypeVersion: string, options?: Models.ServiceFabricClientGetApplicationManifestOptionalParams | msRest.ServiceCallback<Models.ApplicationTypeManifest>, callback?: msRest.ServiceCallback<Models.ApplicationTypeManifest>): Promise<Models.GetApplicationManifestResponse> {
    return this.sendOperationRequest(
      {
        applicationTypeName,
        applicationTypeVersion,
        options
      },
      getApplicationManifestOperationSpec,
      callback) as Promise<Models.GetApplicationManifestResponse>;
  }

  /**
   * Returns the information about all services belonging to the application specified by the
   * application ID.
   * @summary Gets the information about all services belonging to the application specified by the
   * application ID.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetServiceInfoListResponse>
   */
  getServiceInfoList(applicationId: string, options?: Models.ServiceFabricClientGetServiceInfoListOptionalParams): Promise<Models.GetServiceInfoListResponse>;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param callback The callback
   */
  getServiceInfoList(applicationId: string, callback: msRest.ServiceCallback<Models.PagedServiceInfoList>): void;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param options The optional parameters
   * @param callback The callback
   */
  getServiceInfoList(applicationId: string, options: Models.ServiceFabricClientGetServiceInfoListOptionalParams, callback: msRest.ServiceCallback<Models.PagedServiceInfoList>): void;
  getServiceInfoList(applicationId: string, options?: Models.ServiceFabricClientGetServiceInfoListOptionalParams | msRest.ServiceCallback<Models.PagedServiceInfoList>, callback?: msRest.ServiceCallback<Models.PagedServiceInfoList>): Promise<Models.GetServiceInfoListResponse> {
    return this.sendOperationRequest(
      {
        applicationId,
        options
      },
      getServiceInfoListOperationSpec,
      callback) as Promise<Models.GetServiceInfoListResponse>;
  }

  /**
   * Returns the information about the specified service belonging to the specified Service Fabric
   * application.
   * @summary Gets the information about the specific service belonging to the Service Fabric
   * application.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetServiceInfoResponse>
   */
  getServiceInfo(applicationId: string, serviceId: string, options?: Models.ServiceFabricClientGetServiceInfoOptionalParams): Promise<Models.GetServiceInfoResponse>;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param callback The callback
   */
  getServiceInfo(applicationId: string, serviceId: string, callback: msRest.ServiceCallback<Models.ServiceInfoUnion>): void;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param options The optional parameters
   * @param callback The callback
   */
  getServiceInfo(applicationId: string, serviceId: string, options: Models.ServiceFabricClientGetServiceInfoOptionalParams, callback: msRest.ServiceCallback<Models.ServiceInfoUnion>): void;
  getServiceInfo(applicationId: string, serviceId: string, options?: Models.ServiceFabricClientGetServiceInfoOptionalParams | msRest.ServiceCallback<Models.ServiceInfoUnion>, callback?: msRest.ServiceCallback<Models.ServiceInfoUnion>): Promise<Models.GetServiceInfoResponse> {
    return this.sendOperationRequest(
      {
        applicationId,
        serviceId,
        options
      },
      getServiceInfoOperationSpec,
      callback) as Promise<Models.GetServiceInfoResponse>;
  }

  /**
   * Gets the name of the application for the specified service. A 404
   * FABRIC_E_SERVICE_DOES_NOT_EXIST error is returned if a service with the provided service ID does
   * not exist.
   * @summary Gets the name of the Service Fabric application for a service.
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetApplicationNameInfoResponse>
   */
  getApplicationNameInfo(serviceId: string, options?: Models.ServiceFabricClientGetApplicationNameInfoOptionalParams): Promise<Models.GetApplicationNameInfoResponse>;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param callback The callback
   */
  getApplicationNameInfo(serviceId: string, callback: msRest.ServiceCallback<Models.ApplicationNameInfo>): void;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param options The optional parameters
   * @param callback The callback
   */
  getApplicationNameInfo(serviceId: string, options: Models.ServiceFabricClientGetApplicationNameInfoOptionalParams, callback: msRest.ServiceCallback<Models.ApplicationNameInfo>): void;
  getApplicationNameInfo(serviceId: string, options?: Models.ServiceFabricClientGetApplicationNameInfoOptionalParams | msRest.ServiceCallback<Models.ApplicationNameInfo>, callback?: msRest.ServiceCallback<Models.ApplicationNameInfo>): Promise<Models.GetApplicationNameInfoResponse> {
    return this.sendOperationRequest(
      {
        serviceId,
        options
      },
      getApplicationNameInfoOperationSpec,
      callback) as Promise<Models.GetApplicationNameInfoResponse>;
  }

  /**
   * This api allows creating a new Service Fabric stateless or stateful service under a specified
   * Service Fabric application. The description for creating the service includes partitioning
   * information and optional properties for placement and load balancing. Some of the properties can
   * later be modified using `UpdateService` API.
   * @summary Creates the specified Service Fabric service.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param serviceDescription The information necessary to create a service.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  createService(applicationId: string, serviceDescription: Models.ServiceDescriptionUnion, options?: Models.ServiceFabricClientCreateServiceOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param serviceDescription The information necessary to create a service.
   * @param callback The callback
   */
  createService(applicationId: string, serviceDescription: Models.ServiceDescriptionUnion, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param serviceDescription The information necessary to create a service.
   * @param options The optional parameters
   * @param callback The callback
   */
  createService(applicationId: string, serviceDescription: Models.ServiceDescriptionUnion, options: Models.ServiceFabricClientCreateServiceOptionalParams, callback: msRest.ServiceCallback<void>): void;
  createService(applicationId: string, serviceDescription: Models.ServiceDescriptionUnion, options?: Models.ServiceFabricClientCreateServiceOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        applicationId,
        serviceDescription,
        options
      },
      createServiceOperationSpec,
      callback);
  }

  /**
   * Creates a Service Fabric service from the service template defined in the application manifest.
   * A service template contains the properties that will be same for the service instance of the
   * same type. The API allows overriding the properties that are usually different for different
   * services of the same service type.
   * @summary Creates a Service Fabric service from the service template.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param serviceFromTemplateDescription Describes the service that needs to be created from the
   * template defined in the application manifest.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  createServiceFromTemplate(applicationId: string, serviceFromTemplateDescription: Models.ServiceFromTemplateDescription, options?: Models.ServiceFabricClientCreateServiceFromTemplateOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param serviceFromTemplateDescription Describes the service that needs to be created from the
   * template defined in the application manifest.
   * @param callback The callback
   */
  createServiceFromTemplate(applicationId: string, serviceFromTemplateDescription: Models.ServiceFromTemplateDescription, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param serviceFromTemplateDescription Describes the service that needs to be created from the
   * template defined in the application manifest.
   * @param options The optional parameters
   * @param callback The callback
   */
  createServiceFromTemplate(applicationId: string, serviceFromTemplateDescription: Models.ServiceFromTemplateDescription, options: Models.ServiceFabricClientCreateServiceFromTemplateOptionalParams, callback: msRest.ServiceCallback<void>): void;
  createServiceFromTemplate(applicationId: string, serviceFromTemplateDescription: Models.ServiceFromTemplateDescription, options?: Models.ServiceFabricClientCreateServiceFromTemplateOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        applicationId,
        serviceFromTemplateDescription,
        options
      },
      createServiceFromTemplateOperationSpec,
      callback);
  }

  /**
   * A service must be created before it can be deleted. By default, Service Fabric will try to close
   * service replicas in a graceful manner and then delete the service. However, if the service is
   * having issues closing the replica gracefully, the delete operation may take a long time or get
   * stuck. Use the optional ForceRemove flag to skip the graceful close sequence and forcefully
   * delete the service.
   * @summary Deletes an existing Service Fabric service.
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteService(serviceId: string, options?: Models.ServiceFabricClientDeleteServiceOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param callback The callback
   */
  deleteService(serviceId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteService(serviceId: string, options: Models.ServiceFabricClientDeleteServiceOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteService(serviceId: string, options?: Models.ServiceFabricClientDeleteServiceOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        serviceId,
        options
      },
      deleteServiceOperationSpec,
      callback);
  }

  /**
   * This API allows updating properties of a running Service Fabric service. The set of properties
   * that can be updated are a subset of the properties that were specified at the time of creating
   * the service. The current set of properties can be obtained using `GetServiceDescription` API.
   * Note that updating the properties of a running service is different than upgrading your
   * application using `StartApplicationUpgrade` API. The upgrade is a long running background
   * operation that involves moving the application from one version to another, one upgrade domain
   * at a time, whereas update applies the new properties immediately to the service.
   * @summary Updates a Service Fabric service using the specified update description.
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param serviceUpdateDescription The information necessary to update a service.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateService(serviceId: string, serviceUpdateDescription: Models.ServiceUpdateDescriptionUnion, options?: Models.ServiceFabricClientUpdateServiceOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param serviceUpdateDescription The information necessary to update a service.
   * @param callback The callback
   */
  updateService(serviceId: string, serviceUpdateDescription: Models.ServiceUpdateDescriptionUnion, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param serviceUpdateDescription The information necessary to update a service.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateService(serviceId: string, serviceUpdateDescription: Models.ServiceUpdateDescriptionUnion, options: Models.ServiceFabricClientUpdateServiceOptionalParams, callback: msRest.ServiceCallback<void>): void;
  updateService(serviceId: string, serviceUpdateDescription: Models.ServiceUpdateDescriptionUnion, options?: Models.ServiceFabricClientUpdateServiceOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        serviceId,
        serviceUpdateDescription,
        options
      },
      updateServiceOperationSpec,
      callback);
  }

  /**
   * Gets the description of an existing Service Fabric service. A service must be created before its
   * description can be obtained.
   * @summary Gets the description of an existing Service Fabric service.
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetServiceDescriptionResponse>
   */
  getServiceDescription(serviceId: string, options?: Models.ServiceFabricClientGetServiceDescriptionOptionalParams): Promise<Models.GetServiceDescriptionResponse>;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param callback The callback
   */
  getServiceDescription(serviceId: string, callback: msRest.ServiceCallback<Models.ServiceDescriptionUnion>): void;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param options The optional parameters
   * @param callback The callback
   */
  getServiceDescription(serviceId: string, options: Models.ServiceFabricClientGetServiceDescriptionOptionalParams, callback: msRest.ServiceCallback<Models.ServiceDescriptionUnion>): void;
  getServiceDescription(serviceId: string, options?: Models.ServiceFabricClientGetServiceDescriptionOptionalParams | msRest.ServiceCallback<Models.ServiceDescriptionUnion>, callback?: msRest.ServiceCallback<Models.ServiceDescriptionUnion>): Promise<Models.GetServiceDescriptionResponse> {
    return this.sendOperationRequest(
      {
        serviceId,
        options
      },
      getServiceDescriptionOperationSpec,
      callback) as Promise<Models.GetServiceDescriptionResponse>;
  }

  /**
   * Gets the health information of the specified service.
   * Use EventsHealthStateFilter to filter the collection of health events reported on the service
   * based on the health state.
   * Use PartitionsHealthStateFilter to filter the collection of partitions returned.
   * If you specify a service that does not exist in the health store, this request returns an error.
   * @summary Gets the health of the specified Service Fabric service.
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetServiceHealthResponse>
   */
  getServiceHealth(serviceId: string, options?: Models.ServiceFabricClientGetServiceHealthOptionalParams): Promise<Models.GetServiceHealthResponse>;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param callback The callback
   */
  getServiceHealth(serviceId: string, callback: msRest.ServiceCallback<Models.ServiceHealth>): void;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param options The optional parameters
   * @param callback The callback
   */
  getServiceHealth(serviceId: string, options: Models.ServiceFabricClientGetServiceHealthOptionalParams, callback: msRest.ServiceCallback<Models.ServiceHealth>): void;
  getServiceHealth(serviceId: string, options?: Models.ServiceFabricClientGetServiceHealthOptionalParams | msRest.ServiceCallback<Models.ServiceHealth>, callback?: msRest.ServiceCallback<Models.ServiceHealth>): Promise<Models.GetServiceHealthResponse> {
    return this.sendOperationRequest(
      {
        serviceId,
        options
      },
      getServiceHealthOperationSpec,
      callback) as Promise<Models.GetServiceHealthResponse>;
  }

  /**
   * Gets the health information of the specified service.
   * If the application health policy is specified, the health evaluation uses it to get the
   * aggregated health state.
   * If the policy is not specified, the health evaluation uses the application health policy defined
   * in the application manifest, or the default health policy, if no policy is defined in the
   * manifest.
   * Use EventsHealthStateFilter to filter the collection of health events reported on the service
   * based on the health state.
   * Use PartitionsHealthStateFilter to filter the collection of partitions returned.
   * If you specify a service that does not exist in the health store, this request returns an error.
   * @summary Gets the health of the specified Service Fabric service, by using the specified health
   * policy.
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetServiceHealthUsingPolicyResponse>
   */
  getServiceHealthUsingPolicy(serviceId: string, options?: Models.ServiceFabricClientGetServiceHealthUsingPolicyOptionalParams): Promise<Models.GetServiceHealthUsingPolicyResponse>;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param callback The callback
   */
  getServiceHealthUsingPolicy(serviceId: string, callback: msRest.ServiceCallback<Models.ServiceHealth>): void;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param options The optional parameters
   * @param callback The callback
   */
  getServiceHealthUsingPolicy(serviceId: string, options: Models.ServiceFabricClientGetServiceHealthUsingPolicyOptionalParams, callback: msRest.ServiceCallback<Models.ServiceHealth>): void;
  getServiceHealthUsingPolicy(serviceId: string, options?: Models.ServiceFabricClientGetServiceHealthUsingPolicyOptionalParams | msRest.ServiceCallback<Models.ServiceHealth>, callback?: msRest.ServiceCallback<Models.ServiceHealth>): Promise<Models.GetServiceHealthUsingPolicyResponse> {
    return this.sendOperationRequest(
      {
        serviceId,
        options
      },
      getServiceHealthUsingPolicyOperationSpec,
      callback) as Promise<Models.GetServiceHealthUsingPolicyResponse>;
  }

  /**
   * Reports health state of the specified Service Fabric service. The report must contain the
   * information about the source of the health report and property on which it is reported.
   * The report is sent to a Service Fabric gateway Service, which forwards to the health store.
   * The report may be accepted by the gateway, but rejected by the health store after extra
   * validation.
   * For example, the health store may reject the report because of an invalid parameter, like a
   * stale sequence number.
   * To see whether the report was applied in the health store, run GetServiceHealth and check that
   * the report appears in the HealthEvents section.
   * @summary Sends a health report on the Service Fabric service.
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param healthInformation Describes the health information for the health report. This
   * information needs to be present in all of the health reports sent to the health manager.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  reportServiceHealth(serviceId: string, healthInformation: Models.HealthInformation, options?: Models.ServiceFabricClientReportServiceHealthOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param healthInformation Describes the health information for the health report. This
   * information needs to be present in all of the health reports sent to the health manager.
   * @param callback The callback
   */
  reportServiceHealth(serviceId: string, healthInformation: Models.HealthInformation, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param healthInformation Describes the health information for the health report. This
   * information needs to be present in all of the health reports sent to the health manager.
   * @param options The optional parameters
   * @param callback The callback
   */
  reportServiceHealth(serviceId: string, healthInformation: Models.HealthInformation, options: Models.ServiceFabricClientReportServiceHealthOptionalParams, callback: msRest.ServiceCallback<void>): void;
  reportServiceHealth(serviceId: string, healthInformation: Models.HealthInformation, options?: Models.ServiceFabricClientReportServiceHealthOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        serviceId,
        healthInformation,
        options
      },
      reportServiceHealthOperationSpec,
      callback);
  }

  /**
   * Resolve a Service Fabric service partition to get the endpoints of the service replicas.
   * @summary Resolve a Service Fabric partition.
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param [options] The optional parameters
   * @returns Promise<Models.ResolveServiceResponse>
   */
  resolveService(serviceId: string, options?: Models.ServiceFabricClientResolveServiceOptionalParams): Promise<Models.ResolveServiceResponse>;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param callback The callback
   */
  resolveService(serviceId: string, callback: msRest.ServiceCallback<Models.ResolvedServicePartition>): void;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param options The optional parameters
   * @param callback The callback
   */
  resolveService(serviceId: string, options: Models.ServiceFabricClientResolveServiceOptionalParams, callback: msRest.ServiceCallback<Models.ResolvedServicePartition>): void;
  resolveService(serviceId: string, options?: Models.ServiceFabricClientResolveServiceOptionalParams | msRest.ServiceCallback<Models.ResolvedServicePartition>, callback?: msRest.ServiceCallback<Models.ResolvedServicePartition>): Promise<Models.ResolveServiceResponse> {
    return this.sendOperationRequest(
      {
        serviceId,
        options
      },
      resolveServiceOperationSpec,
      callback) as Promise<Models.ResolveServiceResponse>;
  }

  /**
   * Returns the information about the unplaced replicas of the service.
   * If PartitionId is specified, then result will contain information only about unplaced replicas
   * for that partition.
   * If PartitionId is not specified, then result will contain information about unplaced replicas
   * for all partitions of that service.
   * If OnlyQueryPrimaries is set to true, then result will contain information only about primary
   * replicas, and will ignore unplaced secondary replicas.
   * @summary Gets the information about unplaced replica of the service.
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetUnplacedReplicaInformationResponse>
   */
  getUnplacedReplicaInformation(serviceId: string, options?: Models.ServiceFabricClientGetUnplacedReplicaInformationOptionalParams): Promise<Models.GetUnplacedReplicaInformationResponse>;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param callback The callback
   */
  getUnplacedReplicaInformation(serviceId: string, callback: msRest.ServiceCallback<Models.UnplacedReplicaInformation>): void;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param options The optional parameters
   * @param callback The callback
   */
  getUnplacedReplicaInformation(serviceId: string, options: Models.ServiceFabricClientGetUnplacedReplicaInformationOptionalParams, callback: msRest.ServiceCallback<Models.UnplacedReplicaInformation>): void;
  getUnplacedReplicaInformation(serviceId: string, options?: Models.ServiceFabricClientGetUnplacedReplicaInformationOptionalParams | msRest.ServiceCallback<Models.UnplacedReplicaInformation>, callback?: msRest.ServiceCallback<Models.UnplacedReplicaInformation>): Promise<Models.GetUnplacedReplicaInformationResponse> {
    return this.sendOperationRequest(
      {
        serviceId,
        options
      },
      getUnplacedReplicaInformationOperationSpec,
      callback) as Promise<Models.GetUnplacedReplicaInformationResponse>;
  }

  /**
   * The response includes the partition ID, partitioning scheme information, keys supported by the
   * partition, status, health, and other details about the partition.
   * @summary Gets the list of partitions of a Service Fabric service.
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPartitionInfoListResponse>
   */
  getPartitionInfoList(serviceId: string, options?: Models.ServiceFabricClientGetPartitionInfoListOptionalParams): Promise<Models.GetPartitionInfoListResponse>;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param callback The callback
   */
  getPartitionInfoList(serviceId: string, callback: msRest.ServiceCallback<Models.PagedServicePartitionInfoList>): void;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPartitionInfoList(serviceId: string, options: Models.ServiceFabricClientGetPartitionInfoListOptionalParams, callback: msRest.ServiceCallback<Models.PagedServicePartitionInfoList>): void;
  getPartitionInfoList(serviceId: string, options?: Models.ServiceFabricClientGetPartitionInfoListOptionalParams | msRest.ServiceCallback<Models.PagedServicePartitionInfoList>, callback?: msRest.ServiceCallback<Models.PagedServicePartitionInfoList>): Promise<Models.GetPartitionInfoListResponse> {
    return this.sendOperationRequest(
      {
        serviceId,
        options
      },
      getPartitionInfoListOperationSpec,
      callback) as Promise<Models.GetPartitionInfoListResponse>;
  }

  /**
   * Gets the information about the specified partition. The response includes the partition ID,
   * partitioning scheme information, keys supported by the partition, status, health, and other
   * details about the partition.
   * @summary Gets the information about a Service Fabric partition.
   * @param partitionId The identity of the partition.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPartitionInfoResponse>
   */
  getPartitionInfo(partitionId: string, options?: Models.ServiceFabricClientGetPartitionInfoOptionalParams): Promise<Models.GetPartitionInfoResponse>;
  /**
   * @param partitionId The identity of the partition.
   * @param callback The callback
   */
  getPartitionInfo(partitionId: string, callback: msRest.ServiceCallback<Models.ServicePartitionInfoUnion>): void;
  /**
   * @param partitionId The identity of the partition.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPartitionInfo(partitionId: string, options: Models.ServiceFabricClientGetPartitionInfoOptionalParams, callback: msRest.ServiceCallback<Models.ServicePartitionInfoUnion>): void;
  getPartitionInfo(partitionId: string, options?: Models.ServiceFabricClientGetPartitionInfoOptionalParams | msRest.ServiceCallback<Models.ServicePartitionInfoUnion>, callback?: msRest.ServiceCallback<Models.ServicePartitionInfoUnion>): Promise<Models.GetPartitionInfoResponse> {
    return this.sendOperationRequest(
      {
        partitionId,
        options
      },
      getPartitionInfoOperationSpec,
      callback) as Promise<Models.GetPartitionInfoResponse>;
  }

  /**
   * Gets name of the service for the specified partition. A 404 error is returned if the partition
   * ID does not exist in the cluster.
   * @summary Gets the name of the Service Fabric service for a partition.
   * @param partitionId The identity of the partition.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetServiceNameInfoResponse>
   */
  getServiceNameInfo(partitionId: string, options?: Models.ServiceFabricClientGetServiceNameInfoOptionalParams): Promise<Models.GetServiceNameInfoResponse>;
  /**
   * @param partitionId The identity of the partition.
   * @param callback The callback
   */
  getServiceNameInfo(partitionId: string, callback: msRest.ServiceCallback<Models.ServiceNameInfo>): void;
  /**
   * @param partitionId The identity of the partition.
   * @param options The optional parameters
   * @param callback The callback
   */
  getServiceNameInfo(partitionId: string, options: Models.ServiceFabricClientGetServiceNameInfoOptionalParams, callback: msRest.ServiceCallback<Models.ServiceNameInfo>): void;
  getServiceNameInfo(partitionId: string, options?: Models.ServiceFabricClientGetServiceNameInfoOptionalParams | msRest.ServiceCallback<Models.ServiceNameInfo>, callback?: msRest.ServiceCallback<Models.ServiceNameInfo>): Promise<Models.GetServiceNameInfoResponse> {
    return this.sendOperationRequest(
      {
        partitionId,
        options
      },
      getServiceNameInfoOperationSpec,
      callback) as Promise<Models.GetServiceNameInfoResponse>;
  }

  /**
   * Use EventsHealthStateFilter to filter the collection of health events reported on the service
   * based on the health state.
   * Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the
   * partition.
   * If you specify a partition that does not exist in the health store, this request returns an
   * error.
   * @summary Gets the health of the specified Service Fabric partition.
   * @param partitionId The identity of the partition.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPartitionHealthResponse>
   */
  getPartitionHealth(partitionId: string, options?: Models.ServiceFabricClientGetPartitionHealthOptionalParams): Promise<Models.GetPartitionHealthResponse>;
  /**
   * @param partitionId The identity of the partition.
   * @param callback The callback
   */
  getPartitionHealth(partitionId: string, callback: msRest.ServiceCallback<Models.PartitionHealth>): void;
  /**
   * @param partitionId The identity of the partition.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPartitionHealth(partitionId: string, options: Models.ServiceFabricClientGetPartitionHealthOptionalParams, callback: msRest.ServiceCallback<Models.PartitionHealth>): void;
  getPartitionHealth(partitionId: string, options?: Models.ServiceFabricClientGetPartitionHealthOptionalParams | msRest.ServiceCallback<Models.PartitionHealth>, callback?: msRest.ServiceCallback<Models.PartitionHealth>): Promise<Models.GetPartitionHealthResponse> {
    return this.sendOperationRequest(
      {
        partitionId,
        options
      },
      getPartitionHealthOperationSpec,
      callback) as Promise<Models.GetPartitionHealthResponse>;
  }

  /**
   * Gets the health information of the specified partition.
   * If the application health policy is specified, the health evaluation uses it to get the
   * aggregated health state.
   * If the policy is not specified, the health evaluation uses the application health policy defined
   * in the application manifest, or the default health policy, if no policy is defined in the
   * manifest.
   * Use EventsHealthStateFilter to filter the collection of health events reported on the partition
   * based on the health state.
   * Use ReplicasHealthStateFilter to filter the collection of ReplicaHealthState objects on the
   * partition. Use ApplicationHealthPolicy in the POST body to override the health policies used to
   * evaluate the health.
   * If you specify a partition that does not exist in the health store, this request returns an
   * error.
   * @summary Gets the health of the specified Service Fabric partition, by using the specified
   * health policy.
   * @param partitionId The identity of the partition.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPartitionHealthUsingPolicyResponse>
   */
  getPartitionHealthUsingPolicy(partitionId: string, options?: Models.ServiceFabricClientGetPartitionHealthUsingPolicyOptionalParams): Promise<Models.GetPartitionHealthUsingPolicyResponse>;
  /**
   * @param partitionId The identity of the partition.
   * @param callback The callback
   */
  getPartitionHealthUsingPolicy(partitionId: string, callback: msRest.ServiceCallback<Models.PartitionHealth>): void;
  /**
   * @param partitionId The identity of the partition.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPartitionHealthUsingPolicy(partitionId: string, options: Models.ServiceFabricClientGetPartitionHealthUsingPolicyOptionalParams, callback: msRest.ServiceCallback<Models.PartitionHealth>): void;
  getPartitionHealthUsingPolicy(partitionId: string, options?: Models.ServiceFabricClientGetPartitionHealthUsingPolicyOptionalParams | msRest.ServiceCallback<Models.PartitionHealth>, callback?: msRest.ServiceCallback<Models.PartitionHealth>): Promise<Models.GetPartitionHealthUsingPolicyResponse> {
    return this.sendOperationRequest(
      {
        partitionId,
        options
      },
      getPartitionHealthUsingPolicyOperationSpec,
      callback) as Promise<Models.GetPartitionHealthUsingPolicyResponse>;
  }

  /**
   * Reports health state of the specified Service Fabric partition. The report must contain the
   * information about the source of the health report and property on which it is reported.
   * The report is sent to a Service Fabric gateway Partition, which forwards to the health store.
   * The report may be accepted by the gateway, but rejected by the health store after extra
   * validation.
   * For example, the health store may reject the report because of an invalid parameter, like a
   * stale sequence number.
   * To see whether the report was applied in the health store, run GetPartitionHealth and check that
   * the report appears in the HealthEvents section.
   * @summary Sends a health report on the Service Fabric partition.
   * @param partitionId The identity of the partition.
   * @param healthInformation Describes the health information for the health report. This
   * information needs to be present in all of the health reports sent to the health manager.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  reportPartitionHealth(partitionId: string, healthInformation: Models.HealthInformation, options?: Models.ServiceFabricClientReportPartitionHealthOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param partitionId The identity of the partition.
   * @param healthInformation Describes the health information for the health report. This
   * information needs to be present in all of the health reports sent to the health manager.
   * @param callback The callback
   */
  reportPartitionHealth(partitionId: string, healthInformation: Models.HealthInformation, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param partitionId The identity of the partition.
   * @param healthInformation Describes the health information for the health report. This
   * information needs to be present in all of the health reports sent to the health manager.
   * @param options The optional parameters
   * @param callback The callback
   */
  reportPartitionHealth(partitionId: string, healthInformation: Models.HealthInformation, options: Models.ServiceFabricClientReportPartitionHealthOptionalParams, callback: msRest.ServiceCallback<void>): void;
  reportPartitionHealth(partitionId: string, healthInformation: Models.HealthInformation, options?: Models.ServiceFabricClientReportPartitionHealthOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        partitionId,
        healthInformation,
        options
      },
      reportPartitionHealthOperationSpec,
      callback);
  }

  /**
   * Returns information about the load of a specified partition.
   * The response includes a list of load reports for a Service Fabric partition.
   * Each report includes the load metric name, value, and last reported time in UTC.
   * @summary Gets the load information of the specified Service Fabric partition.
   * @param partitionId The identity of the partition.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPartitionLoadInformationResponse>
   */
  getPartitionLoadInformation(partitionId: string, options?: Models.ServiceFabricClientGetPartitionLoadInformationOptionalParams): Promise<Models.GetPartitionLoadInformationResponse>;
  /**
   * @param partitionId The identity of the partition.
   * @param callback The callback
   */
  getPartitionLoadInformation(partitionId: string, callback: msRest.ServiceCallback<Models.PartitionLoadInformation>): void;
  /**
   * @param partitionId The identity of the partition.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPartitionLoadInformation(partitionId: string, options: Models.ServiceFabricClientGetPartitionLoadInformationOptionalParams, callback: msRest.ServiceCallback<Models.PartitionLoadInformation>): void;
  getPartitionLoadInformation(partitionId: string, options?: Models.ServiceFabricClientGetPartitionLoadInformationOptionalParams | msRest.ServiceCallback<Models.PartitionLoadInformation>, callback?: msRest.ServiceCallback<Models.PartitionLoadInformation>): Promise<Models.GetPartitionLoadInformationResponse> {
    return this.sendOperationRequest(
      {
        partitionId,
        options
      },
      getPartitionLoadInformationOperationSpec,
      callback) as Promise<Models.GetPartitionLoadInformationResponse>;
  }

  /**
   * Resets the current load of a Service Fabric partition to the default load for the service.
   * @summary Resets the current load of a Service Fabric partition.
   * @param partitionId The identity of the partition.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  resetPartitionLoad(partitionId: string, options?: Models.ServiceFabricClientResetPartitionLoadOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param partitionId The identity of the partition.
   * @param callback The callback
   */
  resetPartitionLoad(partitionId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param partitionId The identity of the partition.
   * @param options The optional parameters
   * @param callback The callback
   */
  resetPartitionLoad(partitionId: string, options: Models.ServiceFabricClientResetPartitionLoadOptionalParams, callback: msRest.ServiceCallback<void>): void;
  resetPartitionLoad(partitionId: string, options?: Models.ServiceFabricClientResetPartitionLoadOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        partitionId,
        options
      },
      resetPartitionLoadOperationSpec,
      callback);
  }

  /**
   * This operation should only be performed if it is known that the replicas that are down cannot be
   * recovered. Incorrect use of this API can cause potential data loss.
   * @summary Indicates to the Service Fabric cluster that it should attempt to recover a specific
   * partition that is currently stuck in quorum loss.
   * @param partitionId The identity of the partition.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  recoverPartition(partitionId: string, options?: Models.ServiceFabricClientRecoverPartitionOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param partitionId The identity of the partition.
   * @param callback The callback
   */
  recoverPartition(partitionId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param partitionId The identity of the partition.
   * @param options The optional parameters
   * @param callback The callback
   */
  recoverPartition(partitionId: string, options: Models.ServiceFabricClientRecoverPartitionOptionalParams, callback: msRest.ServiceCallback<void>): void;
  recoverPartition(partitionId: string, options?: Models.ServiceFabricClientRecoverPartitionOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        partitionId,
        options
      },
      recoverPartitionOperationSpec,
      callback);
  }

  /**
   * Indicates to the Service Fabric cluster that it should attempt to recover the specified service
   * that is currently stuck in quorum loss. This operation should only be performed if it is known
   * that the replicas that are down cannot be recovered. Incorrect use of this API can cause
   * potential data loss.
   * @summary Indicates to the Service Fabric cluster that it should attempt to recover the specified
   * service that is currently stuck in quorum loss.
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  recoverServicePartitions(serviceId: string, options?: Models.ServiceFabricClientRecoverServicePartitionsOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param callback The callback
   */
  recoverServicePartitions(serviceId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param options The optional parameters
   * @param callback The callback
   */
  recoverServicePartitions(serviceId: string, options: Models.ServiceFabricClientRecoverServicePartitionsOptionalParams, callback: msRest.ServiceCallback<void>): void;
  recoverServicePartitions(serviceId: string, options?: Models.ServiceFabricClientRecoverServicePartitionsOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        serviceId,
        options
      },
      recoverServicePartitionsOperationSpec,
      callback);
  }

  /**
   * Indicates to the Service Fabric cluster that it should attempt to recover the system services
   * that are currently stuck in quorum loss. This operation should only be performed if it is known
   * that the replicas that are down cannot be recovered. Incorrect use of this API can cause
   * potential data loss.
   * @summary Indicates to the Service Fabric cluster that it should attempt to recover the system
   * services that are currently stuck in quorum loss.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  recoverSystemPartitions(options?: Models.ServiceFabricClientRecoverSystemPartitionsOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  recoverSystemPartitions(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  recoverSystemPartitions(options: Models.ServiceFabricClientRecoverSystemPartitionsOptionalParams, callback: msRest.ServiceCallback<void>): void;
  recoverSystemPartitions(options?: Models.ServiceFabricClientRecoverSystemPartitionsOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      recoverSystemPartitionsOperationSpec,
      callback);
  }

  /**
   * This operation should only be performed if it is known that the replicas that are down cannot be
   * recovered. Incorrect use of this API can cause potential data loss.
   * @summary Indicates to the Service Fabric cluster that it should attempt to recover any services
   * (including system services) which are currently stuck in quorum loss.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  recoverAllPartitions(options?: Models.ServiceFabricClientRecoverAllPartitionsOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  recoverAllPartitions(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  recoverAllPartitions(options: Models.ServiceFabricClientRecoverAllPartitionsOptionalParams, callback: msRest.ServiceCallback<void>): void;
  recoverAllPartitions(options?: Models.ServiceFabricClientRecoverAllPartitionsOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      recoverAllPartitionsOperationSpec,
      callback);
  }

  /**
   * This command moves the primary replica of a partition of a stateful service, respecting all
   * constraints.
   * If NodeName parameter is specified, primary will be moved to the specified node (if constraints
   * allow it).
   * If NodeName parameter is not specified, primary replica will be moved to a random node in the
   * cluster.
   * If IgnoreConstraints parameter is specified and set to true, then primary will be moved
   * regardless of the constraints.
   * @summary Moves the primary replica of a partition of a stateful service.
   * @param partitionId The identity of the partition.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  movePrimaryReplica(partitionId: string, options?: Models.ServiceFabricClientMovePrimaryReplicaOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param partitionId The identity of the partition.
   * @param callback The callback
   */
  movePrimaryReplica(partitionId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param partitionId The identity of the partition.
   * @param options The optional parameters
   * @param callback The callback
   */
  movePrimaryReplica(partitionId: string, options: Models.ServiceFabricClientMovePrimaryReplicaOptionalParams, callback: msRest.ServiceCallback<void>): void;
  movePrimaryReplica(partitionId: string, options?: Models.ServiceFabricClientMovePrimaryReplicaOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        partitionId,
        options
      },
      movePrimaryReplicaOperationSpec,
      callback);
  }

  /**
   * This command moves the secondary replica of a partition of a stateful service, respecting all
   * constraints.
   * CurrentNodeName parameter must be specified to identify the replica that is moved.
   * Source node name must be specified, but new node name can be omitted, and in that case replica
   * is moved to a random node.
   * If IgnoreConstraints parameter is specified and set to true, then secondary will be moved
   * regardless of the constraints.
   * @summary Moves the secondary replica of a partition of a stateful service.
   * @param partitionId The identity of the partition.
   * @param currentNodeName The name of the source node for secondary replica move.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  moveSecondaryReplica(partitionId: string, currentNodeName: string, options?: Models.ServiceFabricClientMoveSecondaryReplicaOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param partitionId The identity of the partition.
   * @param currentNodeName The name of the source node for secondary replica move.
   * @param callback The callback
   */
  moveSecondaryReplica(partitionId: string, currentNodeName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param partitionId The identity of the partition.
   * @param currentNodeName The name of the source node for secondary replica move.
   * @param options The optional parameters
   * @param callback The callback
   */
  moveSecondaryReplica(partitionId: string, currentNodeName: string, options: Models.ServiceFabricClientMoveSecondaryReplicaOptionalParams, callback: msRest.ServiceCallback<void>): void;
  moveSecondaryReplica(partitionId: string, currentNodeName: string, options?: Models.ServiceFabricClientMoveSecondaryReplicaOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        partitionId,
        currentNodeName,
        options
      },
      moveSecondaryReplicaOperationSpec,
      callback);
  }

  /**
   * For clusters that have the Repair Manager Service configured,
   * this API provides a way to create repair tasks that run automatically or manually.
   * For repair tasks that run automatically, an appropriate repair executor
   * must be running for each repair action to run automatically.
   * These are currently only available in specially-configured Azure Cloud Services.
   *
   * To create a manual repair task, provide the set of impacted node names and the
   * expected impact. When the state of the created repair task changes to approved,
   * you can safely perform repair actions on those nodes.
   *
   * This API supports the Service Fabric platform; it is not meant to be used directly from your
   * code.
   * @summary Creates a new repair task.
   * @param repairTask Describes the repair task to be created or updated.
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateRepairTaskResponse>
   */
  createRepairTask(repairTask: Models.RepairTask, options?: msRest.RequestOptionsBase): Promise<Models.CreateRepairTaskResponse>;
  /**
   * @param repairTask Describes the repair task to be created or updated.
   * @param callback The callback
   */
  createRepairTask(repairTask: Models.RepairTask, callback: msRest.ServiceCallback<Models.RepairTaskUpdateInfo>): void;
  /**
   * @param repairTask Describes the repair task to be created or updated.
   * @param options The optional parameters
   * @param callback The callback
   */
  createRepairTask(repairTask: Models.RepairTask, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RepairTaskUpdateInfo>): void;
  createRepairTask(repairTask: Models.RepairTask, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RepairTaskUpdateInfo>, callback?: msRest.ServiceCallback<Models.RepairTaskUpdateInfo>): Promise<Models.CreateRepairTaskResponse> {
    return this.sendOperationRequest(
      {
        repairTask,
        options
      },
      createRepairTaskOperationSpec,
      callback) as Promise<Models.CreateRepairTaskResponse>;
  }

  /**
   * This API supports the Service Fabric platform; it is not meant to be used directly from your
   * code.
   * @summary Requests the cancellation of the given repair task.
   * @param repairTaskCancelDescription Describes the repair task to be cancelled.
   * @param [options] The optional parameters
   * @returns Promise<Models.CancelRepairTaskResponse>
   */
  cancelRepairTask(repairTaskCancelDescription: Models.RepairTaskCancelDescription, options?: msRest.RequestOptionsBase): Promise<Models.CancelRepairTaskResponse>;
  /**
   * @param repairTaskCancelDescription Describes the repair task to be cancelled.
   * @param callback The callback
   */
  cancelRepairTask(repairTaskCancelDescription: Models.RepairTaskCancelDescription, callback: msRest.ServiceCallback<Models.RepairTaskUpdateInfo>): void;
  /**
   * @param repairTaskCancelDescription Describes the repair task to be cancelled.
   * @param options The optional parameters
   * @param callback The callback
   */
  cancelRepairTask(repairTaskCancelDescription: Models.RepairTaskCancelDescription, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RepairTaskUpdateInfo>): void;
  cancelRepairTask(repairTaskCancelDescription: Models.RepairTaskCancelDescription, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RepairTaskUpdateInfo>, callback?: msRest.ServiceCallback<Models.RepairTaskUpdateInfo>): Promise<Models.CancelRepairTaskResponse> {
    return this.sendOperationRequest(
      {
        repairTaskCancelDescription,
        options
      },
      cancelRepairTaskOperationSpec,
      callback) as Promise<Models.CancelRepairTaskResponse>;
  }

  /**
   * This API supports the Service Fabric platform; it is not meant to be used directly from your
   * code.
   * @summary Deletes a completed repair task.
   * @param repairTaskDeleteDescription Describes the repair task to be deleted.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteRepairTask(repairTaskDeleteDescription: Models.RepairTaskDeleteDescription, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param repairTaskDeleteDescription Describes the repair task to be deleted.
   * @param callback The callback
   */
  deleteRepairTask(repairTaskDeleteDescription: Models.RepairTaskDeleteDescription, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param repairTaskDeleteDescription Describes the repair task to be deleted.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteRepairTask(repairTaskDeleteDescription: Models.RepairTaskDeleteDescription, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteRepairTask(repairTaskDeleteDescription: Models.RepairTaskDeleteDescription, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        repairTaskDeleteDescription,
        options
      },
      deleteRepairTaskOperationSpec,
      callback);
  }

  /**
   * This API supports the Service Fabric platform; it is not meant to be used directly from your
   * code.
   * @summary Gets a list of repair tasks matching the given filters.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetRepairTaskListResponse>
   */
  getRepairTaskList(options?: Models.ServiceFabricClientGetRepairTaskListOptionalParams): Promise<Models.GetRepairTaskListResponse>;
  /**
   * @param callback The callback
   */
  getRepairTaskList(callback: msRest.ServiceCallback<Models.RepairTask[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getRepairTaskList(options: Models.ServiceFabricClientGetRepairTaskListOptionalParams, callback: msRest.ServiceCallback<Models.RepairTask[]>): void;
  getRepairTaskList(options?: Models.ServiceFabricClientGetRepairTaskListOptionalParams | msRest.ServiceCallback<Models.RepairTask[]>, callback?: msRest.ServiceCallback<Models.RepairTask[]>): Promise<Models.GetRepairTaskListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getRepairTaskListOperationSpec,
      callback) as Promise<Models.GetRepairTaskListResponse>;
  }

  /**
   * This API supports the Service Fabric platform; it is not meant to be used directly from your
   * code.
   * @summary Forces the approval of the given repair task.
   * @param repairTaskApproveDescription Describes the repair task to be approved.
   * @param [options] The optional parameters
   * @returns Promise<Models.ForceApproveRepairTaskResponse>
   */
  forceApproveRepairTask(repairTaskApproveDescription: Models.RepairTaskApproveDescription, options?: msRest.RequestOptionsBase): Promise<Models.ForceApproveRepairTaskResponse>;
  /**
   * @param repairTaskApproveDescription Describes the repair task to be approved.
   * @param callback The callback
   */
  forceApproveRepairTask(repairTaskApproveDescription: Models.RepairTaskApproveDescription, callback: msRest.ServiceCallback<Models.RepairTaskUpdateInfo>): void;
  /**
   * @param repairTaskApproveDescription Describes the repair task to be approved.
   * @param options The optional parameters
   * @param callback The callback
   */
  forceApproveRepairTask(repairTaskApproveDescription: Models.RepairTaskApproveDescription, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RepairTaskUpdateInfo>): void;
  forceApproveRepairTask(repairTaskApproveDescription: Models.RepairTaskApproveDescription, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RepairTaskUpdateInfo>, callback?: msRest.ServiceCallback<Models.RepairTaskUpdateInfo>): Promise<Models.ForceApproveRepairTaskResponse> {
    return this.sendOperationRequest(
      {
        repairTaskApproveDescription,
        options
      },
      forceApproveRepairTaskOperationSpec,
      callback) as Promise<Models.ForceApproveRepairTaskResponse>;
  }

  /**
   * This API supports the Service Fabric platform; it is not meant to be used directly from your
   * code.
   * @summary Updates the health policy of the given repair task.
   * @param repairTaskUpdateHealthPolicyDescription Describes the repair task healthy policy to be
   * updated.
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateRepairTaskHealthPolicyResponse>
   */
  updateRepairTaskHealthPolicy(repairTaskUpdateHealthPolicyDescription: Models.RepairTaskUpdateHealthPolicyDescription, options?: msRest.RequestOptionsBase): Promise<Models.UpdateRepairTaskHealthPolicyResponse>;
  /**
   * @param repairTaskUpdateHealthPolicyDescription Describes the repair task healthy policy to be
   * updated.
   * @param callback The callback
   */
  updateRepairTaskHealthPolicy(repairTaskUpdateHealthPolicyDescription: Models.RepairTaskUpdateHealthPolicyDescription, callback: msRest.ServiceCallback<Models.RepairTaskUpdateInfo>): void;
  /**
   * @param repairTaskUpdateHealthPolicyDescription Describes the repair task healthy policy to be
   * updated.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateRepairTaskHealthPolicy(repairTaskUpdateHealthPolicyDescription: Models.RepairTaskUpdateHealthPolicyDescription, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RepairTaskUpdateInfo>): void;
  updateRepairTaskHealthPolicy(repairTaskUpdateHealthPolicyDescription: Models.RepairTaskUpdateHealthPolicyDescription, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RepairTaskUpdateInfo>, callback?: msRest.ServiceCallback<Models.RepairTaskUpdateInfo>): Promise<Models.UpdateRepairTaskHealthPolicyResponse> {
    return this.sendOperationRequest(
      {
        repairTaskUpdateHealthPolicyDescription,
        options
      },
      updateRepairTaskHealthPolicyOperationSpec,
      callback) as Promise<Models.UpdateRepairTaskHealthPolicyResponse>;
  }

  /**
   * This API supports the Service Fabric platform; it is not meant to be used directly from your
   * code.
   * @summary Updates the execution state of a repair task.
   * @param repairTask Describes the repair task to be created or updated.
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateRepairExecutionStateResponse>
   */
  updateRepairExecutionState(repairTask: Models.RepairTask, options?: msRest.RequestOptionsBase): Promise<Models.UpdateRepairExecutionStateResponse>;
  /**
   * @param repairTask Describes the repair task to be created or updated.
   * @param callback The callback
   */
  updateRepairExecutionState(repairTask: Models.RepairTask, callback: msRest.ServiceCallback<Models.RepairTaskUpdateInfo>): void;
  /**
   * @param repairTask Describes the repair task to be created or updated.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateRepairExecutionState(repairTask: Models.RepairTask, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RepairTaskUpdateInfo>): void;
  updateRepairExecutionState(repairTask: Models.RepairTask, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RepairTaskUpdateInfo>, callback?: msRest.ServiceCallback<Models.RepairTaskUpdateInfo>): Promise<Models.UpdateRepairExecutionStateResponse> {
    return this.sendOperationRequest(
      {
        repairTask,
        options
      },
      updateRepairExecutionStateOperationSpec,
      callback) as Promise<Models.UpdateRepairExecutionStateResponse>;
  }

  /**
   * The GetReplicas endpoint returns information about the replicas of the specified partition. The
   * response includes the ID, role, status, health, node name, uptime, and other details about the
   * replica.
   * @summary Gets the information about replicas of a Service Fabric service partition.
   * @param partitionId The identity of the partition.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetReplicaInfoListResponse>
   */
  getReplicaInfoList(partitionId: string, options?: Models.ServiceFabricClientGetReplicaInfoListOptionalParams): Promise<Models.GetReplicaInfoListResponse>;
  /**
   * @param partitionId The identity of the partition.
   * @param callback The callback
   */
  getReplicaInfoList(partitionId: string, callback: msRest.ServiceCallback<Models.PagedReplicaInfoList>): void;
  /**
   * @param partitionId The identity of the partition.
   * @param options The optional parameters
   * @param callback The callback
   */
  getReplicaInfoList(partitionId: string, options: Models.ServiceFabricClientGetReplicaInfoListOptionalParams, callback: msRest.ServiceCallback<Models.PagedReplicaInfoList>): void;
  getReplicaInfoList(partitionId: string, options?: Models.ServiceFabricClientGetReplicaInfoListOptionalParams | msRest.ServiceCallback<Models.PagedReplicaInfoList>, callback?: msRest.ServiceCallback<Models.PagedReplicaInfoList>): Promise<Models.GetReplicaInfoListResponse> {
    return this.sendOperationRequest(
      {
        partitionId,
        options
      },
      getReplicaInfoListOperationSpec,
      callback) as Promise<Models.GetReplicaInfoListResponse>;
  }

  /**
   * The response includes the ID, role, status, health, node name, uptime, and other details about
   * the replica.
   * @summary Gets the information about a replica of a Service Fabric partition.
   * @param partitionId The identity of the partition.
   * @param replicaId The identifier of the replica.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetReplicaInfoResponse>
   */
  getReplicaInfo(partitionId: string, replicaId: string, options?: Models.ServiceFabricClientGetReplicaInfoOptionalParams): Promise<Models.GetReplicaInfoResponse>;
  /**
   * @param partitionId The identity of the partition.
   * @param replicaId The identifier of the replica.
   * @param callback The callback
   */
  getReplicaInfo(partitionId: string, replicaId: string, callback: msRest.ServiceCallback<Models.ReplicaInfoUnion>): void;
  /**
   * @param partitionId The identity of the partition.
   * @param replicaId The identifier of the replica.
   * @param options The optional parameters
   * @param callback The callback
   */
  getReplicaInfo(partitionId: string, replicaId: string, options: Models.ServiceFabricClientGetReplicaInfoOptionalParams, callback: msRest.ServiceCallback<Models.ReplicaInfoUnion>): void;
  getReplicaInfo(partitionId: string, replicaId: string, options?: Models.ServiceFabricClientGetReplicaInfoOptionalParams | msRest.ServiceCallback<Models.ReplicaInfoUnion>, callback?: msRest.ServiceCallback<Models.ReplicaInfoUnion>): Promise<Models.GetReplicaInfoResponse> {
    return this.sendOperationRequest(
      {
        partitionId,
        replicaId,
        options
      },
      getReplicaInfoOperationSpec,
      callback) as Promise<Models.GetReplicaInfoResponse>;
  }

  /**
   * Gets the health of a Service Fabric replica.
   * Use EventsHealthStateFilter to filter the collection of health events reported on the replica
   * based on the health state.
   * @summary Gets the health of a Service Fabric stateful service replica or stateless service
   * instance.
   * @param partitionId The identity of the partition.
   * @param replicaId The identifier of the replica.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetReplicaHealthResponse>
   */
  getReplicaHealth(partitionId: string, replicaId: string, options?: Models.ServiceFabricClientGetReplicaHealthOptionalParams): Promise<Models.GetReplicaHealthResponse>;
  /**
   * @param partitionId The identity of the partition.
   * @param replicaId The identifier of the replica.
   * @param callback The callback
   */
  getReplicaHealth(partitionId: string, replicaId: string, callback: msRest.ServiceCallback<Models.ReplicaHealthUnion>): void;
  /**
   * @param partitionId The identity of the partition.
   * @param replicaId The identifier of the replica.
   * @param options The optional parameters
   * @param callback The callback
   */
  getReplicaHealth(partitionId: string, replicaId: string, options: Models.ServiceFabricClientGetReplicaHealthOptionalParams, callback: msRest.ServiceCallback<Models.ReplicaHealthUnion>): void;
  getReplicaHealth(partitionId: string, replicaId: string, options?: Models.ServiceFabricClientGetReplicaHealthOptionalParams | msRest.ServiceCallback<Models.ReplicaHealthUnion>, callback?: msRest.ServiceCallback<Models.ReplicaHealthUnion>): Promise<Models.GetReplicaHealthResponse> {
    return this.sendOperationRequest(
      {
        partitionId,
        replicaId,
        options
      },
      getReplicaHealthOperationSpec,
      callback) as Promise<Models.GetReplicaHealthResponse>;
  }

  /**
   * Gets the health of a Service Fabric stateful service replica or stateless service instance.
   * Use EventsHealthStateFilter to filter the collection of health events reported on the cluster
   * based on the health state.
   * Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the
   * health. This API only uses 'ConsiderWarningAsError' field of the ApplicationHealthPolicy. The
   * rest of the fields are ignored while evaluating the health of the replica.
   * @summary Gets the health of a Service Fabric stateful service replica or stateless service
   * instance using the specified policy.
   * @param partitionId The identity of the partition.
   * @param replicaId The identifier of the replica.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetReplicaHealthUsingPolicyResponse>
   */
  getReplicaHealthUsingPolicy(partitionId: string, replicaId: string, options?: Models.ServiceFabricClientGetReplicaHealthUsingPolicyOptionalParams): Promise<Models.GetReplicaHealthUsingPolicyResponse>;
  /**
   * @param partitionId The identity of the partition.
   * @param replicaId The identifier of the replica.
   * @param callback The callback
   */
  getReplicaHealthUsingPolicy(partitionId: string, replicaId: string, callback: msRest.ServiceCallback<Models.ReplicaHealthUnion>): void;
  /**
   * @param partitionId The identity of the partition.
   * @param replicaId The identifier of the replica.
   * @param options The optional parameters
   * @param callback The callback
   */
  getReplicaHealthUsingPolicy(partitionId: string, replicaId: string, options: Models.ServiceFabricClientGetReplicaHealthUsingPolicyOptionalParams, callback: msRest.ServiceCallback<Models.ReplicaHealthUnion>): void;
  getReplicaHealthUsingPolicy(partitionId: string, replicaId: string, options?: Models.ServiceFabricClientGetReplicaHealthUsingPolicyOptionalParams | msRest.ServiceCallback<Models.ReplicaHealthUnion>, callback?: msRest.ServiceCallback<Models.ReplicaHealthUnion>): Promise<Models.GetReplicaHealthUsingPolicyResponse> {
    return this.sendOperationRequest(
      {
        partitionId,
        replicaId,
        options
      },
      getReplicaHealthUsingPolicyOperationSpec,
      callback) as Promise<Models.GetReplicaHealthUsingPolicyResponse>;
  }

  /**
   * Reports health state of the specified Service Fabric replica. The report must contain the
   * information about the source of the health report and property on which it is reported.
   * The report is sent to a Service Fabric gateway Replica, which forwards to the health store.
   * The report may be accepted by the gateway, but rejected by the health store after extra
   * validation.
   * For example, the health store may reject the report because of an invalid parameter, like a
   * stale sequence number.
   * To see whether the report was applied in the health store, run GetReplicaHealth and check that
   * the report appears in the HealthEvents section.
   * @summary Sends a health report on the Service Fabric replica.
   * @param partitionId The identity of the partition.
   * @param replicaId The identifier of the replica.
   * @param serviceKind The kind of service replica (Stateless or Stateful) for which the health is
   * being reported. Following are the possible values. Possible values include: 'Stateless',
   * 'Stateful'
   * @param healthInformation Describes the health information for the health report. This
   * information needs to be present in all of the health reports sent to the health manager.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  reportReplicaHealth(partitionId: string, replicaId: string, serviceKind: Models.ReplicaHealthReportServiceKind, healthInformation: Models.HealthInformation, options?: Models.ServiceFabricClientReportReplicaHealthOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param partitionId The identity of the partition.
   * @param replicaId The identifier of the replica.
   * @param serviceKind The kind of service replica (Stateless or Stateful) for which the health is
   * being reported. Following are the possible values. Possible values include: 'Stateless',
   * 'Stateful'
   * @param healthInformation Describes the health information for the health report. This
   * information needs to be present in all of the health reports sent to the health manager.
   * @param callback The callback
   */
  reportReplicaHealth(partitionId: string, replicaId: string, serviceKind: Models.ReplicaHealthReportServiceKind, healthInformation: Models.HealthInformation, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param partitionId The identity of the partition.
   * @param replicaId The identifier of the replica.
   * @param serviceKind The kind of service replica (Stateless or Stateful) for which the health is
   * being reported. Following are the possible values. Possible values include: 'Stateless',
   * 'Stateful'
   * @param healthInformation Describes the health information for the health report. This
   * information needs to be present in all of the health reports sent to the health manager.
   * @param options The optional parameters
   * @param callback The callback
   */
  reportReplicaHealth(partitionId: string, replicaId: string, serviceKind: Models.ReplicaHealthReportServiceKind, healthInformation: Models.HealthInformation, options: Models.ServiceFabricClientReportReplicaHealthOptionalParams, callback: msRest.ServiceCallback<void>): void;
  reportReplicaHealth(partitionId: string, replicaId: string, serviceKind: Models.ReplicaHealthReportServiceKind, healthInformation: Models.HealthInformation, options?: Models.ServiceFabricClientReportReplicaHealthOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        partitionId,
        replicaId,
        serviceKind,
        healthInformation,
        options
      },
      reportReplicaHealthOperationSpec,
      callback);
  }

  /**
   * Gets the list containing the information about replicas deployed on a Service Fabric node. The
   * information include partition ID, replica ID, status of the replica, name of the service, name
   * of the service type, and other information. Use PartitionId or ServiceManifestName query
   * parameters to return information about the deployed replicas matching the specified values for
   * those parameters.
   * @summary Gets the list of replicas deployed on a Service Fabric node.
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDeployedServiceReplicaInfoListResponse>
   */
  getDeployedServiceReplicaInfoList(nodeName: string, applicationId: string, options?: Models.ServiceFabricClientGetDeployedServiceReplicaInfoListOptionalParams): Promise<Models.GetDeployedServiceReplicaInfoListResponse>;
  /**
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param callback The callback
   */
  getDeployedServiceReplicaInfoList(nodeName: string, applicationId: string, callback: msRest.ServiceCallback<Models.DeployedServiceReplicaInfoUnion[]>): void;
  /**
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDeployedServiceReplicaInfoList(nodeName: string, applicationId: string, options: Models.ServiceFabricClientGetDeployedServiceReplicaInfoListOptionalParams, callback: msRest.ServiceCallback<Models.DeployedServiceReplicaInfoUnion[]>): void;
  getDeployedServiceReplicaInfoList(nodeName: string, applicationId: string, options?: Models.ServiceFabricClientGetDeployedServiceReplicaInfoListOptionalParams | msRest.ServiceCallback<Models.DeployedServiceReplicaInfoUnion[]>, callback?: msRest.ServiceCallback<Models.DeployedServiceReplicaInfoUnion[]>): Promise<Models.GetDeployedServiceReplicaInfoListResponse> {
    return this.sendOperationRequest(
      {
        nodeName,
        applicationId,
        options
      },
      getDeployedServiceReplicaInfoListOperationSpec,
      callback) as Promise<Models.GetDeployedServiceReplicaInfoListResponse>;
  }

  /**
   * Gets the details of the replica deployed on a Service Fabric node. The information includes
   * service kind, service name, current service operation, current service operation start date
   * time, partition ID, replica/instance ID, reported load, and other information.
   * @summary Gets the details of replica deployed on a Service Fabric node.
   * @param nodeName The name of the node.
   * @param partitionId The identity of the partition.
   * @param replicaId The identifier of the replica.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDeployedServiceReplicaDetailInfoResponse>
   */
  getDeployedServiceReplicaDetailInfo(nodeName: string, partitionId: string, replicaId: string, options?: Models.ServiceFabricClientGetDeployedServiceReplicaDetailInfoOptionalParams): Promise<Models.GetDeployedServiceReplicaDetailInfoResponse>;
  /**
   * @param nodeName The name of the node.
   * @param partitionId The identity of the partition.
   * @param replicaId The identifier of the replica.
   * @param callback The callback
   */
  getDeployedServiceReplicaDetailInfo(nodeName: string, partitionId: string, replicaId: string, callback: msRest.ServiceCallback<Models.DeployedServiceReplicaDetailInfoUnion>): void;
  /**
   * @param nodeName The name of the node.
   * @param partitionId The identity of the partition.
   * @param replicaId The identifier of the replica.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDeployedServiceReplicaDetailInfo(nodeName: string, partitionId: string, replicaId: string, options: Models.ServiceFabricClientGetDeployedServiceReplicaDetailInfoOptionalParams, callback: msRest.ServiceCallback<Models.DeployedServiceReplicaDetailInfoUnion>): void;
  getDeployedServiceReplicaDetailInfo(nodeName: string, partitionId: string, replicaId: string, options?: Models.ServiceFabricClientGetDeployedServiceReplicaDetailInfoOptionalParams | msRest.ServiceCallback<Models.DeployedServiceReplicaDetailInfoUnion>, callback?: msRest.ServiceCallback<Models.DeployedServiceReplicaDetailInfoUnion>): Promise<Models.GetDeployedServiceReplicaDetailInfoResponse> {
    return this.sendOperationRequest(
      {
        nodeName,
        partitionId,
        replicaId,
        options
      },
      getDeployedServiceReplicaDetailInfoOperationSpec,
      callback) as Promise<Models.GetDeployedServiceReplicaDetailInfoResponse>;
  }

  /**
   * Gets the details of the replica deployed on a Service Fabric node. The information includes
   * service kind, service name, current service operation, current service operation start date
   * time, partition ID, replica/instance ID, reported load, and other information.
   * @summary Gets the details of replica deployed on a Service Fabric node.
   * @param nodeName The name of the node.
   * @param partitionId The identity of the partition.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDeployedServiceReplicaDetailInfoByPartitionIdResponse>
   */
  getDeployedServiceReplicaDetailInfoByPartitionId(nodeName: string, partitionId: string, options?: Models.ServiceFabricClientGetDeployedServiceReplicaDetailInfoByPartitionIdOptionalParams): Promise<Models.GetDeployedServiceReplicaDetailInfoByPartitionIdResponse>;
  /**
   * @param nodeName The name of the node.
   * @param partitionId The identity of the partition.
   * @param callback The callback
   */
  getDeployedServiceReplicaDetailInfoByPartitionId(nodeName: string, partitionId: string, callback: msRest.ServiceCallback<Models.DeployedServiceReplicaDetailInfoUnion>): void;
  /**
   * @param nodeName The name of the node.
   * @param partitionId The identity of the partition.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDeployedServiceReplicaDetailInfoByPartitionId(nodeName: string, partitionId: string, options: Models.ServiceFabricClientGetDeployedServiceReplicaDetailInfoByPartitionIdOptionalParams, callback: msRest.ServiceCallback<Models.DeployedServiceReplicaDetailInfoUnion>): void;
  getDeployedServiceReplicaDetailInfoByPartitionId(nodeName: string, partitionId: string, options?: Models.ServiceFabricClientGetDeployedServiceReplicaDetailInfoByPartitionIdOptionalParams | msRest.ServiceCallback<Models.DeployedServiceReplicaDetailInfoUnion>, callback?: msRest.ServiceCallback<Models.DeployedServiceReplicaDetailInfoUnion>): Promise<Models.GetDeployedServiceReplicaDetailInfoByPartitionIdResponse> {
    return this.sendOperationRequest(
      {
        nodeName,
        partitionId,
        options
      },
      getDeployedServiceReplicaDetailInfoByPartitionIdOperationSpec,
      callback) as Promise<Models.GetDeployedServiceReplicaDetailInfoByPartitionIdResponse>;
  }

  /**
   * Restarts a service replica of a persisted service running on a node. Warning - There are no
   * safety checks performed when this API is used. Incorrect use of this API can lead to
   * availability loss for stateful services.
   * @summary Restarts a service replica of a persisted service running on a node.
   * @param nodeName The name of the node.
   * @param partitionId The identity of the partition.
   * @param replicaId The identifier of the replica.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  restartReplica(nodeName: string, partitionId: string, replicaId: string, options?: Models.ServiceFabricClientRestartReplicaOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param nodeName The name of the node.
   * @param partitionId The identity of the partition.
   * @param replicaId The identifier of the replica.
   * @param callback The callback
   */
  restartReplica(nodeName: string, partitionId: string, replicaId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param nodeName The name of the node.
   * @param partitionId The identity of the partition.
   * @param replicaId The identifier of the replica.
   * @param options The optional parameters
   * @param callback The callback
   */
  restartReplica(nodeName: string, partitionId: string, replicaId: string, options: Models.ServiceFabricClientRestartReplicaOptionalParams, callback: msRest.ServiceCallback<void>): void;
  restartReplica(nodeName: string, partitionId: string, replicaId: string, options?: Models.ServiceFabricClientRestartReplicaOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        nodeName,
        partitionId,
        replicaId,
        options
      },
      restartReplicaOperationSpec,
      callback);
  }

  /**
   * This API simulates a Service Fabric replica failure by removing a replica from a Service Fabric
   * cluster. The removal closes the replica, transitions the replica to the role None, and then
   * removes all of the state information of the replica from the cluster. This API tests the replica
   * state removal path, and simulates the report fault permanent path through client APIs. Warning -
   * There are no safety checks performed when this API is used. Incorrect use of this API can lead
   * to data loss for stateful services. In addition, the forceRemove flag impacts all other replicas
   * hosted in the same process.
   * @summary Removes a service replica running on a node.
   * @param nodeName The name of the node.
   * @param partitionId The identity of the partition.
   * @param replicaId The identifier of the replica.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  removeReplica(nodeName: string, partitionId: string, replicaId: string, options?: Models.ServiceFabricClientRemoveReplicaOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param nodeName The name of the node.
   * @param partitionId The identity of the partition.
   * @param replicaId The identifier of the replica.
   * @param callback The callback
   */
  removeReplica(nodeName: string, partitionId: string, replicaId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param nodeName The name of the node.
   * @param partitionId The identity of the partition.
   * @param replicaId The identifier of the replica.
   * @param options The optional parameters
   * @param callback The callback
   */
  removeReplica(nodeName: string, partitionId: string, replicaId: string, options: Models.ServiceFabricClientRemoveReplicaOptionalParams, callback: msRest.ServiceCallback<void>): void;
  removeReplica(nodeName: string, partitionId: string, replicaId: string, options?: Models.ServiceFabricClientRemoveReplicaOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        nodeName,
        partitionId,
        replicaId,
        options
      },
      removeReplicaOperationSpec,
      callback);
  }

  /**
   * Returns the information about the service packages deployed on a Service Fabric node for the
   * given application.
   * @summary Gets the list of service packages deployed on a Service Fabric node.
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDeployedServicePackageInfoListResponse>
   */
  getDeployedServicePackageInfoList(nodeName: string, applicationId: string, options?: Models.ServiceFabricClientGetDeployedServicePackageInfoListOptionalParams): Promise<Models.GetDeployedServicePackageInfoListResponse>;
  /**
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param callback The callback
   */
  getDeployedServicePackageInfoList(nodeName: string, applicationId: string, callback: msRest.ServiceCallback<Models.DeployedServicePackageInfo[]>): void;
  /**
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDeployedServicePackageInfoList(nodeName: string, applicationId: string, options: Models.ServiceFabricClientGetDeployedServicePackageInfoListOptionalParams, callback: msRest.ServiceCallback<Models.DeployedServicePackageInfo[]>): void;
  getDeployedServicePackageInfoList(nodeName: string, applicationId: string, options?: Models.ServiceFabricClientGetDeployedServicePackageInfoListOptionalParams | msRest.ServiceCallback<Models.DeployedServicePackageInfo[]>, callback?: msRest.ServiceCallback<Models.DeployedServicePackageInfo[]>): Promise<Models.GetDeployedServicePackageInfoListResponse> {
    return this.sendOperationRequest(
      {
        nodeName,
        applicationId,
        options
      },
      getDeployedServicePackageInfoListOperationSpec,
      callback) as Promise<Models.GetDeployedServicePackageInfoListResponse>;
  }

  /**
   * Returns the information about the service packages deployed on a Service Fabric node for the
   * given application. These results are of service packages whose name match exactly the service
   * package name specified as the parameter.
   * @summary Gets the list of service packages deployed on a Service Fabric node matching exactly
   * the specified name.
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param servicePackageName The name of the service package.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDeployedServicePackageInfoListByNameResponse>
   */
  getDeployedServicePackageInfoListByName(nodeName: string, applicationId: string, servicePackageName: string, options?: Models.ServiceFabricClientGetDeployedServicePackageInfoListByNameOptionalParams): Promise<Models.GetDeployedServicePackageInfoListByNameResponse>;
  /**
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param servicePackageName The name of the service package.
   * @param callback The callback
   */
  getDeployedServicePackageInfoListByName(nodeName: string, applicationId: string, servicePackageName: string, callback: msRest.ServiceCallback<Models.DeployedServicePackageInfo[]>): void;
  /**
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param servicePackageName The name of the service package.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDeployedServicePackageInfoListByName(nodeName: string, applicationId: string, servicePackageName: string, options: Models.ServiceFabricClientGetDeployedServicePackageInfoListByNameOptionalParams, callback: msRest.ServiceCallback<Models.DeployedServicePackageInfo[]>): void;
  getDeployedServicePackageInfoListByName(nodeName: string, applicationId: string, servicePackageName: string, options?: Models.ServiceFabricClientGetDeployedServicePackageInfoListByNameOptionalParams | msRest.ServiceCallback<Models.DeployedServicePackageInfo[]>, callback?: msRest.ServiceCallback<Models.DeployedServicePackageInfo[]>): Promise<Models.GetDeployedServicePackageInfoListByNameResponse> {
    return this.sendOperationRequest(
      {
        nodeName,
        applicationId,
        servicePackageName,
        options
      },
      getDeployedServicePackageInfoListByNameOperationSpec,
      callback) as Promise<Models.GetDeployedServicePackageInfoListByNameResponse>;
  }

  /**
   * Gets the information about health of a service package for a specific application deployed on a
   * Service Fabric node. Use EventsHealthStateFilter to optionally filter for the collection of
   * HealthEvent objects reported on the deployed service package based on health state.
   * @summary Gets the information about health of a service package for a specific application
   * deployed for a Service Fabric node and application.
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param servicePackageName The name of the service package.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDeployedServicePackageHealthResponse>
   */
  getDeployedServicePackageHealth(nodeName: string, applicationId: string, servicePackageName: string, options?: Models.ServiceFabricClientGetDeployedServicePackageHealthOptionalParams): Promise<Models.GetDeployedServicePackageHealthResponse>;
  /**
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param servicePackageName The name of the service package.
   * @param callback The callback
   */
  getDeployedServicePackageHealth(nodeName: string, applicationId: string, servicePackageName: string, callback: msRest.ServiceCallback<Models.DeployedServicePackageHealth>): void;
  /**
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param servicePackageName The name of the service package.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDeployedServicePackageHealth(nodeName: string, applicationId: string, servicePackageName: string, options: Models.ServiceFabricClientGetDeployedServicePackageHealthOptionalParams, callback: msRest.ServiceCallback<Models.DeployedServicePackageHealth>): void;
  getDeployedServicePackageHealth(nodeName: string, applicationId: string, servicePackageName: string, options?: Models.ServiceFabricClientGetDeployedServicePackageHealthOptionalParams | msRest.ServiceCallback<Models.DeployedServicePackageHealth>, callback?: msRest.ServiceCallback<Models.DeployedServicePackageHealth>): Promise<Models.GetDeployedServicePackageHealthResponse> {
    return this.sendOperationRequest(
      {
        nodeName,
        applicationId,
        servicePackageName,
        options
      },
      getDeployedServicePackageHealthOperationSpec,
      callback) as Promise<Models.GetDeployedServicePackageHealthResponse>;
  }

  /**
   * Gets the information about health of a service package for a specific application deployed on a
   * Service Fabric node. using the specified policy. Use EventsHealthStateFilter to optionally
   * filter for the collection of HealthEvent objects reported on the deployed service package based
   * on health state. Use ApplicationHealthPolicy to optionally override the health policies used to
   * evaluate the health. This API only uses 'ConsiderWarningAsError' field of the
   * ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the
   * deployed service package.
   * @summary Gets the information about health of service package for a specific application
   * deployed on a Service Fabric node using the specified policy.
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param servicePackageName The name of the service package.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDeployedServicePackageHealthUsingPolicyResponse>
   */
  getDeployedServicePackageHealthUsingPolicy(nodeName: string, applicationId: string, servicePackageName: string, options?: Models.ServiceFabricClientGetDeployedServicePackageHealthUsingPolicyOptionalParams): Promise<Models.GetDeployedServicePackageHealthUsingPolicyResponse>;
  /**
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param servicePackageName The name of the service package.
   * @param callback The callback
   */
  getDeployedServicePackageHealthUsingPolicy(nodeName: string, applicationId: string, servicePackageName: string, callback: msRest.ServiceCallback<Models.DeployedServicePackageHealth>): void;
  /**
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param servicePackageName The name of the service package.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDeployedServicePackageHealthUsingPolicy(nodeName: string, applicationId: string, servicePackageName: string, options: Models.ServiceFabricClientGetDeployedServicePackageHealthUsingPolicyOptionalParams, callback: msRest.ServiceCallback<Models.DeployedServicePackageHealth>): void;
  getDeployedServicePackageHealthUsingPolicy(nodeName: string, applicationId: string, servicePackageName: string, options?: Models.ServiceFabricClientGetDeployedServicePackageHealthUsingPolicyOptionalParams | msRest.ServiceCallback<Models.DeployedServicePackageHealth>, callback?: msRest.ServiceCallback<Models.DeployedServicePackageHealth>): Promise<Models.GetDeployedServicePackageHealthUsingPolicyResponse> {
    return this.sendOperationRequest(
      {
        nodeName,
        applicationId,
        servicePackageName,
        options
      },
      getDeployedServicePackageHealthUsingPolicyOperationSpec,
      callback) as Promise<Models.GetDeployedServicePackageHealthUsingPolicyResponse>;
  }

  /**
   * Reports health state of the service package of the application deployed on a Service Fabric
   * node. The report must contain the information about the source of the health report and property
   * on which it is reported.
   * The report is sent to a Service Fabric gateway Service, which forwards to the health store.
   * The report may be accepted by the gateway, but rejected by the health store after extra
   * validation.
   * For example, the health store may reject the report because of an invalid parameter, like a
   * stale sequence number.
   * To see whether the report was applied in the health store, get deployed service package health
   * and check that the report appears in the HealthEvents section.
   * @summary Sends a health report on the Service Fabric deployed service package.
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param servicePackageName The name of the service package.
   * @param healthInformation Describes the health information for the health report. This
   * information needs to be present in all of the health reports sent to the health manager.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  reportDeployedServicePackageHealth(nodeName: string, applicationId: string, servicePackageName: string, healthInformation: Models.HealthInformation, options?: Models.ServiceFabricClientReportDeployedServicePackageHealthOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param servicePackageName The name of the service package.
   * @param healthInformation Describes the health information for the health report. This
   * information needs to be present in all of the health reports sent to the health manager.
   * @param callback The callback
   */
  reportDeployedServicePackageHealth(nodeName: string, applicationId: string, servicePackageName: string, healthInformation: Models.HealthInformation, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param servicePackageName The name of the service package.
   * @param healthInformation Describes the health information for the health report. This
   * information needs to be present in all of the health reports sent to the health manager.
   * @param options The optional parameters
   * @param callback The callback
   */
  reportDeployedServicePackageHealth(nodeName: string, applicationId: string, servicePackageName: string, healthInformation: Models.HealthInformation, options: Models.ServiceFabricClientReportDeployedServicePackageHealthOptionalParams, callback: msRest.ServiceCallback<void>): void;
  reportDeployedServicePackageHealth(nodeName: string, applicationId: string, servicePackageName: string, healthInformation: Models.HealthInformation, options?: Models.ServiceFabricClientReportDeployedServicePackageHealthOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        nodeName,
        applicationId,
        servicePackageName,
        healthInformation,
        options
      },
      reportDeployedServicePackageHealthOperationSpec,
      callback);
  }

  /**
   * This API provides a way to download code packages including the container images on a specific
   * node outside of the normal application deployment and upgrade path. This is useful for the large
   * code packages and container images to be present on the node before the actual application
   * deployment and upgrade, thus significantly reducing the total time required for the deployment
   * or upgrade.
   * @summary Downloads all of the code packages associated with specified service manifest on the
   * specified node.
   * @param nodeName The name of the node.
   * @param deployServicePackageToNodeDescription Describes information for deploying a service
   * package to a Service Fabric node.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deployServicePackageToNode(nodeName: string, deployServicePackageToNodeDescription: Models.DeployServicePackageToNodeDescription, options?: Models.ServiceFabricClientDeployServicePackageToNodeOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param nodeName The name of the node.
   * @param deployServicePackageToNodeDescription Describes information for deploying a service
   * package to a Service Fabric node.
   * @param callback The callback
   */
  deployServicePackageToNode(nodeName: string, deployServicePackageToNodeDescription: Models.DeployServicePackageToNodeDescription, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param nodeName The name of the node.
   * @param deployServicePackageToNodeDescription Describes information for deploying a service
   * package to a Service Fabric node.
   * @param options The optional parameters
   * @param callback The callback
   */
  deployServicePackageToNode(nodeName: string, deployServicePackageToNodeDescription: Models.DeployServicePackageToNodeDescription, options: Models.ServiceFabricClientDeployServicePackageToNodeOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deployServicePackageToNode(nodeName: string, deployServicePackageToNodeDescription: Models.DeployServicePackageToNodeDescription, options?: Models.ServiceFabricClientDeployServicePackageToNodeOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        nodeName,
        deployServicePackageToNodeDescription,
        options
      },
      deployServicePackageToNodeOperationSpec,
      callback);
  }

  /**
   * Gets the list of code packages deployed on a Service Fabric node for the given application.
   * @summary Gets the list of code packages deployed on a Service Fabric node.
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDeployedCodePackageInfoListResponse>
   */
  getDeployedCodePackageInfoList(nodeName: string, applicationId: string, options?: Models.ServiceFabricClientGetDeployedCodePackageInfoListOptionalParams): Promise<Models.GetDeployedCodePackageInfoListResponse>;
  /**
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param callback The callback
   */
  getDeployedCodePackageInfoList(nodeName: string, applicationId: string, callback: msRest.ServiceCallback<Models.DeployedCodePackageInfo[]>): void;
  /**
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDeployedCodePackageInfoList(nodeName: string, applicationId: string, options: Models.ServiceFabricClientGetDeployedCodePackageInfoListOptionalParams, callback: msRest.ServiceCallback<Models.DeployedCodePackageInfo[]>): void;
  getDeployedCodePackageInfoList(nodeName: string, applicationId: string, options?: Models.ServiceFabricClientGetDeployedCodePackageInfoListOptionalParams | msRest.ServiceCallback<Models.DeployedCodePackageInfo[]>, callback?: msRest.ServiceCallback<Models.DeployedCodePackageInfo[]>): Promise<Models.GetDeployedCodePackageInfoListResponse> {
    return this.sendOperationRequest(
      {
        nodeName,
        applicationId,
        options
      },
      getDeployedCodePackageInfoListOperationSpec,
      callback) as Promise<Models.GetDeployedCodePackageInfoListResponse>;
  }

  /**
   * Restarts a code package deployed on a Service Fabric node in a cluster. This aborts the code
   * package process, which will restart all the user service replicas hosted in that process.
   * @summary Restarts a code package deployed on a Service Fabric node in a cluster.
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param restartDeployedCodePackageDescription Describes the deployed code package on Service
   * Fabric node to restart.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  restartDeployedCodePackage(nodeName: string, applicationId: string, restartDeployedCodePackageDescription: Models.RestartDeployedCodePackageDescription, options?: Models.ServiceFabricClientRestartDeployedCodePackageOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param restartDeployedCodePackageDescription Describes the deployed code package on Service
   * Fabric node to restart.
   * @param callback The callback
   */
  restartDeployedCodePackage(nodeName: string, applicationId: string, restartDeployedCodePackageDescription: Models.RestartDeployedCodePackageDescription, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param restartDeployedCodePackageDescription Describes the deployed code package on Service
   * Fabric node to restart.
   * @param options The optional parameters
   * @param callback The callback
   */
  restartDeployedCodePackage(nodeName: string, applicationId: string, restartDeployedCodePackageDescription: Models.RestartDeployedCodePackageDescription, options: Models.ServiceFabricClientRestartDeployedCodePackageOptionalParams, callback: msRest.ServiceCallback<void>): void;
  restartDeployedCodePackage(nodeName: string, applicationId: string, restartDeployedCodePackageDescription: Models.RestartDeployedCodePackageDescription, options?: Models.ServiceFabricClientRestartDeployedCodePackageOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        nodeName,
        applicationId,
        restartDeployedCodePackageDescription,
        options
      },
      restartDeployedCodePackageOperationSpec,
      callback);
  }

  /**
   * Gets the container logs for container deployed on a Service Fabric node for the given code
   * package.
   * @summary Gets the container logs for container deployed on a Service Fabric node.
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param serviceManifestName The name of a service manifest registered as part of an application
   * type in a Service Fabric cluster.
   * @param codePackageName The name of code package specified in service manifest registered as part
   * of an application type in a Service Fabric cluster.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetContainerLogsDeployedOnNodeResponse>
   */
  getContainerLogsDeployedOnNode(nodeName: string, applicationId: string, serviceManifestName: string, codePackageName: string, options?: Models.ServiceFabricClientGetContainerLogsDeployedOnNodeOptionalParams): Promise<Models.GetContainerLogsDeployedOnNodeResponse>;
  /**
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param serviceManifestName The name of a service manifest registered as part of an application
   * type in a Service Fabric cluster.
   * @param codePackageName The name of code package specified in service manifest registered as part
   * of an application type in a Service Fabric cluster.
   * @param callback The callback
   */
  getContainerLogsDeployedOnNode(nodeName: string, applicationId: string, serviceManifestName: string, codePackageName: string, callback: msRest.ServiceCallback<Models.ContainerLogs>): void;
  /**
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param serviceManifestName The name of a service manifest registered as part of an application
   * type in a Service Fabric cluster.
   * @param codePackageName The name of code package specified in service manifest registered as part
   * of an application type in a Service Fabric cluster.
   * @param options The optional parameters
   * @param callback The callback
   */
  getContainerLogsDeployedOnNode(nodeName: string, applicationId: string, serviceManifestName: string, codePackageName: string, options: Models.ServiceFabricClientGetContainerLogsDeployedOnNodeOptionalParams, callback: msRest.ServiceCallback<Models.ContainerLogs>): void;
  getContainerLogsDeployedOnNode(nodeName: string, applicationId: string, serviceManifestName: string, codePackageName: string, options?: Models.ServiceFabricClientGetContainerLogsDeployedOnNodeOptionalParams | msRest.ServiceCallback<Models.ContainerLogs>, callback?: msRest.ServiceCallback<Models.ContainerLogs>): Promise<Models.GetContainerLogsDeployedOnNodeResponse> {
    return this.sendOperationRequest(
      {
        nodeName,
        applicationId,
        serviceManifestName,
        codePackageName,
        options
      },
      getContainerLogsDeployedOnNodeOperationSpec,
      callback) as Promise<Models.GetContainerLogsDeployedOnNodeResponse>;
  }

  /**
   * Invoke container API on a container deployed on a Service Fabric node for the given code
   * package.
   * @summary Invoke container API on a container deployed on a Service Fabric node.
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param serviceManifestName The name of a service manifest registered as part of an application
   * type in a Service Fabric cluster.
   * @param codePackageName The name of code package specified in service manifest registered as part
   * of an application type in a Service Fabric cluster.
   * @param codePackageInstanceId ID that uniquely identifies a code package instance deployed on a
   * service fabric node.
   * @param containerApiRequestBody Parameters for making container API call
   * @param [options] The optional parameters
   * @returns Promise<Models.InvokeContainerApiResponse>
   */
  invokeContainerApi(nodeName: string, applicationId: string, serviceManifestName: string, codePackageName: string, codePackageInstanceId: string, containerApiRequestBody: Models.ContainerApiRequestBody, options?: Models.ServiceFabricClientInvokeContainerApiOptionalParams): Promise<Models.InvokeContainerApiResponse>;
  /**
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param serviceManifestName The name of a service manifest registered as part of an application
   * type in a Service Fabric cluster.
   * @param codePackageName The name of code package specified in service manifest registered as part
   * of an application type in a Service Fabric cluster.
   * @param codePackageInstanceId ID that uniquely identifies a code package instance deployed on a
   * service fabric node.
   * @param containerApiRequestBody Parameters for making container API call
   * @param callback The callback
   */
  invokeContainerApi(nodeName: string, applicationId: string, serviceManifestName: string, codePackageName: string, codePackageInstanceId: string, containerApiRequestBody: Models.ContainerApiRequestBody, callback: msRest.ServiceCallback<Models.ContainerApiResponse>): void;
  /**
   * @param nodeName The name of the node.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param serviceManifestName The name of a service manifest registered as part of an application
   * type in a Service Fabric cluster.
   * @param codePackageName The name of code package specified in service manifest registered as part
   * of an application type in a Service Fabric cluster.
   * @param codePackageInstanceId ID that uniquely identifies a code package instance deployed on a
   * service fabric node.
   * @param containerApiRequestBody Parameters for making container API call
   * @param options The optional parameters
   * @param callback The callback
   */
  invokeContainerApi(nodeName: string, applicationId: string, serviceManifestName: string, codePackageName: string, codePackageInstanceId: string, containerApiRequestBody: Models.ContainerApiRequestBody, options: Models.ServiceFabricClientInvokeContainerApiOptionalParams, callback: msRest.ServiceCallback<Models.ContainerApiResponse>): void;
  invokeContainerApi(nodeName: string, applicationId: string, serviceManifestName: string, codePackageName: string, codePackageInstanceId: string, containerApiRequestBody: Models.ContainerApiRequestBody, options?: Models.ServiceFabricClientInvokeContainerApiOptionalParams | msRest.ServiceCallback<Models.ContainerApiResponse>, callback?: msRest.ServiceCallback<Models.ContainerApiResponse>): Promise<Models.InvokeContainerApiResponse> {
    return this.sendOperationRequest(
      {
        nodeName,
        applicationId,
        serviceManifestName,
        codePackageName,
        codePackageInstanceId,
        containerApiRequestBody,
        options
      },
      invokeContainerApiOperationSpec,
      callback) as Promise<Models.InvokeContainerApiResponse>;
  }

  /**
   * Compose is a file format that describes multi-container applications. This API allows deploying
   * container based applications defined in compose format in a Service Fabric cluster. Once the
   * deployment is created, its status can be tracked via the `GetComposeDeploymentStatus` API.
   * @summary Creates a Service Fabric compose deployment.
   * @param createComposeDeploymentDescription Describes the compose deployment that needs to be
   * created.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  createComposeDeployment(createComposeDeploymentDescription: Models.CreateComposeDeploymentDescription, options?: Models.ServiceFabricClientCreateComposeDeploymentOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param createComposeDeploymentDescription Describes the compose deployment that needs to be
   * created.
   * @param callback The callback
   */
  createComposeDeployment(createComposeDeploymentDescription: Models.CreateComposeDeploymentDescription, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param createComposeDeploymentDescription Describes the compose deployment that needs to be
   * created.
   * @param options The optional parameters
   * @param callback The callback
   */
  createComposeDeployment(createComposeDeploymentDescription: Models.CreateComposeDeploymentDescription, options: Models.ServiceFabricClientCreateComposeDeploymentOptionalParams, callback: msRest.ServiceCallback<void>): void;
  createComposeDeployment(createComposeDeploymentDescription: Models.CreateComposeDeploymentDescription, options?: Models.ServiceFabricClientCreateComposeDeploymentOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        createComposeDeploymentDescription,
        options
      },
      createComposeDeploymentOperationSpec,
      callback);
  }

  /**
   * Returns the status of the compose deployment that was created or in the process of being created
   * in the Service Fabric cluster and whose name matches the one specified as the parameter. The
   * response includes the name, status, and other details about the deployment.
   * @summary Gets information about a Service Fabric compose deployment.
   * @param deploymentName The identity of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetComposeDeploymentStatusResponse>
   */
  getComposeDeploymentStatus(deploymentName: string, options?: Models.ServiceFabricClientGetComposeDeploymentStatusOptionalParams): Promise<Models.GetComposeDeploymentStatusResponse>;
  /**
   * @param deploymentName The identity of the deployment.
   * @param callback The callback
   */
  getComposeDeploymentStatus(deploymentName: string, callback: msRest.ServiceCallback<Models.ComposeDeploymentStatusInfo>): void;
  /**
   * @param deploymentName The identity of the deployment.
   * @param options The optional parameters
   * @param callback The callback
   */
  getComposeDeploymentStatus(deploymentName: string, options: Models.ServiceFabricClientGetComposeDeploymentStatusOptionalParams, callback: msRest.ServiceCallback<Models.ComposeDeploymentStatusInfo>): void;
  getComposeDeploymentStatus(deploymentName: string, options?: Models.ServiceFabricClientGetComposeDeploymentStatusOptionalParams | msRest.ServiceCallback<Models.ComposeDeploymentStatusInfo>, callback?: msRest.ServiceCallback<Models.ComposeDeploymentStatusInfo>): Promise<Models.GetComposeDeploymentStatusResponse> {
    return this.sendOperationRequest(
      {
        deploymentName,
        options
      },
      getComposeDeploymentStatusOperationSpec,
      callback) as Promise<Models.GetComposeDeploymentStatusResponse>;
  }

  /**
   * Gets the status about the compose deployments that were created or in the process of being
   * created in the Service Fabric cluster. The response includes the name, status, and other details
   * about the compose deployments. If the list of deployments do not fit in a page, one page of
   * results is returned as well as a continuation token, which can be used to get the next page.
   * @summary Gets the list of compose deployments created in the Service Fabric cluster.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetComposeDeploymentStatusListResponse>
   */
  getComposeDeploymentStatusList(options?: Models.ServiceFabricClientGetComposeDeploymentStatusListOptionalParams): Promise<Models.GetComposeDeploymentStatusListResponse>;
  /**
   * @param callback The callback
   */
  getComposeDeploymentStatusList(callback: msRest.ServiceCallback<Models.PagedComposeDeploymentStatusInfoList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getComposeDeploymentStatusList(options: Models.ServiceFabricClientGetComposeDeploymentStatusListOptionalParams, callback: msRest.ServiceCallback<Models.PagedComposeDeploymentStatusInfoList>): void;
  getComposeDeploymentStatusList(options?: Models.ServiceFabricClientGetComposeDeploymentStatusListOptionalParams | msRest.ServiceCallback<Models.PagedComposeDeploymentStatusInfoList>, callback?: msRest.ServiceCallback<Models.PagedComposeDeploymentStatusInfoList>): Promise<Models.GetComposeDeploymentStatusListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getComposeDeploymentStatusListOperationSpec,
      callback) as Promise<Models.GetComposeDeploymentStatusListResponse>;
  }

  /**
   * Returns the information about the state of the compose deployment upgrade along with details to
   * aid debugging application health issues.
   * @summary Gets details for the latest upgrade performed on this Service Fabric compose
   * deployment.
   * @param deploymentName The identity of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetComposeDeploymentUpgradeProgressResponse>
   */
  getComposeDeploymentUpgradeProgress(deploymentName: string, options?: Models.ServiceFabricClientGetComposeDeploymentUpgradeProgressOptionalParams): Promise<Models.GetComposeDeploymentUpgradeProgressResponse>;
  /**
   * @param deploymentName The identity of the deployment.
   * @param callback The callback
   */
  getComposeDeploymentUpgradeProgress(deploymentName: string, callback: msRest.ServiceCallback<Models.ComposeDeploymentUpgradeProgressInfo>): void;
  /**
   * @param deploymentName The identity of the deployment.
   * @param options The optional parameters
   * @param callback The callback
   */
  getComposeDeploymentUpgradeProgress(deploymentName: string, options: Models.ServiceFabricClientGetComposeDeploymentUpgradeProgressOptionalParams, callback: msRest.ServiceCallback<Models.ComposeDeploymentUpgradeProgressInfo>): void;
  getComposeDeploymentUpgradeProgress(deploymentName: string, options?: Models.ServiceFabricClientGetComposeDeploymentUpgradeProgressOptionalParams | msRest.ServiceCallback<Models.ComposeDeploymentUpgradeProgressInfo>, callback?: msRest.ServiceCallback<Models.ComposeDeploymentUpgradeProgressInfo>): Promise<Models.GetComposeDeploymentUpgradeProgressResponse> {
    return this.sendOperationRequest(
      {
        deploymentName,
        options
      },
      getComposeDeploymentUpgradeProgressOperationSpec,
      callback) as Promise<Models.GetComposeDeploymentUpgradeProgressResponse>;
  }

  /**
   * Deletes an existing Service Fabric compose deployment.
   * @summary Deletes an existing Service Fabric compose deployment from cluster.
   * @param deploymentName The identity of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  removeComposeDeployment(deploymentName: string, options?: Models.ServiceFabricClientRemoveComposeDeploymentOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param deploymentName The identity of the deployment.
   * @param callback The callback
   */
  removeComposeDeployment(deploymentName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param deploymentName The identity of the deployment.
   * @param options The optional parameters
   * @param callback The callback
   */
  removeComposeDeployment(deploymentName: string, options: Models.ServiceFabricClientRemoveComposeDeploymentOptionalParams, callback: msRest.ServiceCallback<void>): void;
  removeComposeDeployment(deploymentName: string, options?: Models.ServiceFabricClientRemoveComposeDeploymentOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        deploymentName,
        options
      },
      removeComposeDeploymentOperationSpec,
      callback);
  }

  /**
   * Validates the supplied upgrade parameters and starts upgrading the deployment if the parameters
   * are valid.
   * @summary Starts upgrading a compose deployment in the Service Fabric cluster.
   * @param deploymentName The identity of the deployment.
   * @param composeDeploymentUpgradeDescription Parameters for upgrading compose deployment.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  startComposeDeploymentUpgrade(deploymentName: string, composeDeploymentUpgradeDescription: Models.ComposeDeploymentUpgradeDescription, options?: Models.ServiceFabricClientStartComposeDeploymentUpgradeOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param deploymentName The identity of the deployment.
   * @param composeDeploymentUpgradeDescription Parameters for upgrading compose deployment.
   * @param callback The callback
   */
  startComposeDeploymentUpgrade(deploymentName: string, composeDeploymentUpgradeDescription: Models.ComposeDeploymentUpgradeDescription, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param deploymentName The identity of the deployment.
   * @param composeDeploymentUpgradeDescription Parameters for upgrading compose deployment.
   * @param options The optional parameters
   * @param callback The callback
   */
  startComposeDeploymentUpgrade(deploymentName: string, composeDeploymentUpgradeDescription: Models.ComposeDeploymentUpgradeDescription, options: Models.ServiceFabricClientStartComposeDeploymentUpgradeOptionalParams, callback: msRest.ServiceCallback<void>): void;
  startComposeDeploymentUpgrade(deploymentName: string, composeDeploymentUpgradeDescription: Models.ComposeDeploymentUpgradeDescription, options?: Models.ServiceFabricClientStartComposeDeploymentUpgradeOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        deploymentName,
        composeDeploymentUpgradeDescription,
        options
      },
      startComposeDeploymentUpgradeOperationSpec,
      callback);
  }

  /**
   * Rollback a service fabric compose deployment upgrade.
   * @summary Starts rolling back a compose deployment upgrade in the Service Fabric cluster.
   * @param deploymentName The identity of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  startRollbackComposeDeploymentUpgrade(deploymentName: string, options?: Models.ServiceFabricClientStartRollbackComposeDeploymentUpgradeOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param deploymentName The identity of the deployment.
   * @param callback The callback
   */
  startRollbackComposeDeploymentUpgrade(deploymentName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param deploymentName The identity of the deployment.
   * @param options The optional parameters
   * @param callback The callback
   */
  startRollbackComposeDeploymentUpgrade(deploymentName: string, options: Models.ServiceFabricClientStartRollbackComposeDeploymentUpgradeOptionalParams, callback: msRest.ServiceCallback<void>): void;
  startRollbackComposeDeploymentUpgrade(deploymentName: string, options?: Models.ServiceFabricClientStartRollbackComposeDeploymentUpgradeOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        deploymentName,
        options
      },
      startRollbackComposeDeploymentUpgradeOperationSpec,
      callback);
  }

  /**
   * Get the status of Chaos indicating whether or not Chaos is running, the Chaos parameters used
   * for running Chaos and the status of the Chaos Schedule.
   * @summary Get the status of Chaos.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetChaosResponse>
   */
  getChaos(options?: Models.ServiceFabricClientGetChaosOptionalParams): Promise<Models.GetChaosResponse>;
  /**
   * @param callback The callback
   */
  getChaos(callback: msRest.ServiceCallback<Models.Chaos>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getChaos(options: Models.ServiceFabricClientGetChaosOptionalParams, callback: msRest.ServiceCallback<Models.Chaos>): void;
  getChaos(options?: Models.ServiceFabricClientGetChaosOptionalParams | msRest.ServiceCallback<Models.Chaos>, callback?: msRest.ServiceCallback<Models.Chaos>): Promise<Models.GetChaosResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getChaosOperationSpec,
      callback) as Promise<Models.GetChaosResponse>;
  }

  /**
   * If Chaos is not already running in the cluster, it starts Chaos with the passed in Chaos
   * parameters.
   * If Chaos is already running when this call is made, the call fails with the error code
   * FABRIC_E_CHAOS_ALREADY_RUNNING.
   * Refer to the article [Induce controlled Chaos in Service Fabric
   * clusters](https://docs.microsoft.com/azure/service-fabric/service-fabric-controlled-chaos) for
   * more details.
   * @summary Starts Chaos in the cluster.
   * @param chaosParameters Describes all the parameters to configure a Chaos run.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  startChaos(chaosParameters: Models.ChaosParameters, options?: Models.ServiceFabricClientStartChaosOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param chaosParameters Describes all the parameters to configure a Chaos run.
   * @param callback The callback
   */
  startChaos(chaosParameters: Models.ChaosParameters, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param chaosParameters Describes all the parameters to configure a Chaos run.
   * @param options The optional parameters
   * @param callback The callback
   */
  startChaos(chaosParameters: Models.ChaosParameters, options: Models.ServiceFabricClientStartChaosOptionalParams, callback: msRest.ServiceCallback<void>): void;
  startChaos(chaosParameters: Models.ChaosParameters, options?: Models.ServiceFabricClientStartChaosOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        chaosParameters,
        options
      },
      startChaosOperationSpec,
      callback);
  }

  /**
   * Stops Chaos from executing new faults. In-flight faults will continue to execute until they are
   * complete. The current Chaos Schedule is put into a stopped state.
   * Once a schedule is stopped, it will stay in the stopped state and not be used to Chaos Schedule
   * new runs of Chaos. A new Chaos Schedule must be set in order to resume scheduling.
   * @summary Stops Chaos if it is running in the cluster and put the Chaos Schedule in a stopped
   * state.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  stopChaos(options?: Models.ServiceFabricClientStopChaosOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  stopChaos(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  stopChaos(options: Models.ServiceFabricClientStopChaosOptionalParams, callback: msRest.ServiceCallback<void>): void;
  stopChaos(options?: Models.ServiceFabricClientStopChaosOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      stopChaosOperationSpec,
      callback);
  }

  /**
   * To get the next segment of the Chaos events, you can specify the ContinuationToken. To get the
   * start of a new segment of Chaos events, you can specify the time range
   * through StartTimeUtc and EndTimeUtc. You cannot specify both the ContinuationToken and the time
   * range in the same call.
   * When there are more than 100 Chaos events, the Chaos events are returned in multiple segments
   * where a segment contains no more than 100 Chaos events and to get the next segment you make a
   * call to this API with the continuation token.
   * @summary Gets the next segment of the Chaos events based on the continuation token or the time
   * range.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetChaosEventsResponse>
   */
  getChaosEvents(options?: Models.ServiceFabricClientGetChaosEventsOptionalParams): Promise<Models.GetChaosEventsResponse>;
  /**
   * @param callback The callback
   */
  getChaosEvents(callback: msRest.ServiceCallback<Models.ChaosEventsSegment>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getChaosEvents(options: Models.ServiceFabricClientGetChaosEventsOptionalParams, callback: msRest.ServiceCallback<Models.ChaosEventsSegment>): void;
  getChaosEvents(options?: Models.ServiceFabricClientGetChaosEventsOptionalParams | msRest.ServiceCallback<Models.ChaosEventsSegment>, callback?: msRest.ServiceCallback<Models.ChaosEventsSegment>): Promise<Models.GetChaosEventsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getChaosEventsOperationSpec,
      callback) as Promise<Models.GetChaosEventsResponse>;
  }

  /**
   * Gets the version of the Chaos Schedule in use and the Chaos Schedule that defines when and how
   * to run Chaos.
   * @summary Get the Chaos Schedule defining when and how to run Chaos.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetChaosScheduleResponse>
   */
  getChaosSchedule(options?: Models.ServiceFabricClientGetChaosScheduleOptionalParams): Promise<Models.GetChaosScheduleResponse>;
  /**
   * @param callback The callback
   */
  getChaosSchedule(callback: msRest.ServiceCallback<Models.ChaosScheduleDescription>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getChaosSchedule(options: Models.ServiceFabricClientGetChaosScheduleOptionalParams, callback: msRest.ServiceCallback<Models.ChaosScheduleDescription>): void;
  getChaosSchedule(options?: Models.ServiceFabricClientGetChaosScheduleOptionalParams | msRest.ServiceCallback<Models.ChaosScheduleDescription>, callback?: msRest.ServiceCallback<Models.ChaosScheduleDescription>): Promise<Models.GetChaosScheduleResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getChaosScheduleOperationSpec,
      callback) as Promise<Models.GetChaosScheduleResponse>;
  }

  /**
   * Chaos will automatically schedule runs based on the Chaos Schedule.
   * The Chaos Schedule will be updated if the provided version matches the version on the server.
   * When updating the Chaos Schedule, the version on the server is incremented by 1.
   * The version on the server will wrap back to 0 after reaching a large number.
   * If Chaos is running when this call is made, the call will fail.
   * @summary Set the schedule used by Chaos.
   * @param chaosSchedule Describes the schedule used by Chaos.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  postChaosSchedule(chaosSchedule: Models.ChaosScheduleDescription, options?: Models.ServiceFabricClientPostChaosScheduleOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param chaosSchedule Describes the schedule used by Chaos.
   * @param callback The callback
   */
  postChaosSchedule(chaosSchedule: Models.ChaosScheduleDescription, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param chaosSchedule Describes the schedule used by Chaos.
   * @param options The optional parameters
   * @param callback The callback
   */
  postChaosSchedule(chaosSchedule: Models.ChaosScheduleDescription, options: Models.ServiceFabricClientPostChaosScheduleOptionalParams, callback: msRest.ServiceCallback<void>): void;
  postChaosSchedule(chaosSchedule: Models.ChaosScheduleDescription, options?: Models.ServiceFabricClientPostChaosScheduleOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        chaosSchedule,
        options
      },
      postChaosScheduleOperationSpec,
      callback);
  }

  /**
   * Uploads contents of the file to the image store. Use this API if the file is small enough to
   * upload again if the connection fails. The file's data needs to be added to the request body. The
   * contents will be uploaded to the specified path. Image store service uses a mark file to
   * indicate the availability of the folder. The mark file is an empty file named "_.dir". The mark
   * file is generated by the image store service when all files in a folder are uploaded. When using
   * File-by-File approach to upload application package in REST, the image store service isn't aware
   * of the file hierarchy of the application package; you need to create a mark file per folder and
   * upload it last, to let the image store service know that the folder is complete.
   * @summary Uploads contents of the file to the image store.
   * @param contentPath Relative path to file or folder in the image store from its root.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  uploadFile(contentPath: string, options?: Models.ServiceFabricClientUploadFileOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param contentPath Relative path to file or folder in the image store from its root.
   * @param callback The callback
   */
  uploadFile(contentPath: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param contentPath Relative path to file or folder in the image store from its root.
   * @param options The optional parameters
   * @param callback The callback
   */
  uploadFile(contentPath: string, options: Models.ServiceFabricClientUploadFileOptionalParams, callback: msRest.ServiceCallback<void>): void;
  uploadFile(contentPath: string, options?: Models.ServiceFabricClientUploadFileOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        contentPath,
        options
      },
      uploadFileOperationSpec,
      callback);
  }

  /**
   * Returns the information about the image store content at the specified contentPath. The
   * contentPath is relative to the root of the image store.
   * @summary Gets the image store content information.
   * @param contentPath Relative path to file or folder in the image store from its root.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetImageStoreContentResponse>
   */
  getImageStoreContent(contentPath: string, options?: Models.ServiceFabricClientGetImageStoreContentOptionalParams): Promise<Models.GetImageStoreContentResponse>;
  /**
   * @param contentPath Relative path to file or folder in the image store from its root.
   * @param callback The callback
   */
  getImageStoreContent(contentPath: string, callback: msRest.ServiceCallback<Models.ImageStoreContent>): void;
  /**
   * @param contentPath Relative path to file or folder in the image store from its root.
   * @param options The optional parameters
   * @param callback The callback
   */
  getImageStoreContent(contentPath: string, options: Models.ServiceFabricClientGetImageStoreContentOptionalParams, callback: msRest.ServiceCallback<Models.ImageStoreContent>): void;
  getImageStoreContent(contentPath: string, options?: Models.ServiceFabricClientGetImageStoreContentOptionalParams | msRest.ServiceCallback<Models.ImageStoreContent>, callback?: msRest.ServiceCallback<Models.ImageStoreContent>): Promise<Models.GetImageStoreContentResponse> {
    return this.sendOperationRequest(
      {
        contentPath,
        options
      },
      getImageStoreContentOperationSpec,
      callback) as Promise<Models.GetImageStoreContentResponse>;
  }

  /**
   * Deletes existing image store content being found within the given image store relative path.
   * This command can be used to delete uploaded application packages once they are provisioned.
   * @summary Deletes existing image store content.
   * @param contentPath Relative path to file or folder in the image store from its root.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteImageStoreContent(contentPath: string, options?: Models.ServiceFabricClientDeleteImageStoreContentOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param contentPath Relative path to file or folder in the image store from its root.
   * @param callback The callback
   */
  deleteImageStoreContent(contentPath: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param contentPath Relative path to file or folder in the image store from its root.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteImageStoreContent(contentPath: string, options: Models.ServiceFabricClientDeleteImageStoreContentOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteImageStoreContent(contentPath: string, options?: Models.ServiceFabricClientDeleteImageStoreContentOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        contentPath,
        options
      },
      deleteImageStoreContentOperationSpec,
      callback);
  }

  /**
   * Returns the information about the image store content at the root of the image store.
   * @summary Gets the content information at the root of the image store.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetImageStoreRootContentResponse>
   */
  getImageStoreRootContent(options?: Models.ServiceFabricClientGetImageStoreRootContentOptionalParams): Promise<Models.GetImageStoreRootContentResponse>;
  /**
   * @param callback The callback
   */
  getImageStoreRootContent(callback: msRest.ServiceCallback<Models.ImageStoreContent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getImageStoreRootContent(options: Models.ServiceFabricClientGetImageStoreRootContentOptionalParams, callback: msRest.ServiceCallback<Models.ImageStoreContent>): void;
  getImageStoreRootContent(options?: Models.ServiceFabricClientGetImageStoreRootContentOptionalParams | msRest.ServiceCallback<Models.ImageStoreContent>, callback?: msRest.ServiceCallback<Models.ImageStoreContent>): Promise<Models.GetImageStoreRootContentResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getImageStoreRootContentOperationSpec,
      callback) as Promise<Models.GetImageStoreRootContentResponse>;
  }

  /**
   * Copies the image store content from the source image store relative path to the destination
   * image store relative path.
   * @summary Copies image store content internally
   * @param imageStoreCopyDescription Describes the copy description for the image store.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  copyImageStoreContent(imageStoreCopyDescription: Models.ImageStoreCopyDescription, options?: Models.ServiceFabricClientCopyImageStoreContentOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param imageStoreCopyDescription Describes the copy description for the image store.
   * @param callback The callback
   */
  copyImageStoreContent(imageStoreCopyDescription: Models.ImageStoreCopyDescription, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param imageStoreCopyDescription Describes the copy description for the image store.
   * @param options The optional parameters
   * @param callback The callback
   */
  copyImageStoreContent(imageStoreCopyDescription: Models.ImageStoreCopyDescription, options: Models.ServiceFabricClientCopyImageStoreContentOptionalParams, callback: msRest.ServiceCallback<void>): void;
  copyImageStoreContent(imageStoreCopyDescription: Models.ImageStoreCopyDescription, options?: Models.ServiceFabricClientCopyImageStoreContentOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        imageStoreCopyDescription,
        options
      },
      copyImageStoreContentOperationSpec,
      callback);
  }

  /**
   * The DELETE request will cause the existing upload session to expire and remove any previously
   * uploaded file chunks.
   * @summary Cancels an image store upload session.
   * @param sessionId A GUID generated by the user for a file uploading. It identifies an image store
   * upload session which keeps track of all file chunks until it is committed.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteImageStoreUploadSession(sessionId: string, options?: Models.ServiceFabricClientDeleteImageStoreUploadSessionOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param sessionId A GUID generated by the user for a file uploading. It identifies an image store
   * upload session which keeps track of all file chunks until it is committed.
   * @param callback The callback
   */
  deleteImageStoreUploadSession(sessionId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param sessionId A GUID generated by the user for a file uploading. It identifies an image store
   * upload session which keeps track of all file chunks until it is committed.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteImageStoreUploadSession(sessionId: string, options: Models.ServiceFabricClientDeleteImageStoreUploadSessionOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteImageStoreUploadSession(sessionId: string, options?: Models.ServiceFabricClientDeleteImageStoreUploadSessionOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        sessionId,
        options
      },
      deleteImageStoreUploadSessionOperationSpec,
      callback);
  }

  /**
   * When all file chunks have been uploaded, the upload session needs to be committed explicitly to
   * complete the upload. Image store preserves the upload session until the expiration time, which
   * is 30 minutes after the last chunk received.
   * @summary Commit an image store upload session.
   * @param sessionId A GUID generated by the user for a file uploading. It identifies an image store
   * upload session which keeps track of all file chunks until it is committed.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  commitImageStoreUploadSession(sessionId: string, options?: Models.ServiceFabricClientCommitImageStoreUploadSessionOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param sessionId A GUID generated by the user for a file uploading. It identifies an image store
   * upload session which keeps track of all file chunks until it is committed.
   * @param callback The callback
   */
  commitImageStoreUploadSession(sessionId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param sessionId A GUID generated by the user for a file uploading. It identifies an image store
   * upload session which keeps track of all file chunks until it is committed.
   * @param options The optional parameters
   * @param callback The callback
   */
  commitImageStoreUploadSession(sessionId: string, options: Models.ServiceFabricClientCommitImageStoreUploadSessionOptionalParams, callback: msRest.ServiceCallback<void>): void;
  commitImageStoreUploadSession(sessionId: string, options?: Models.ServiceFabricClientCommitImageStoreUploadSessionOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        sessionId,
        options
      },
      commitImageStoreUploadSessionOperationSpec,
      callback);
  }

  /**
   * Gets the image store upload session identified by the given ID. User can query the upload
   * session at any time during uploading.
   * @summary Get the image store upload session by ID.
   * @param sessionId A GUID generated by the user for a file uploading. It identifies an image store
   * upload session which keeps track of all file chunks until it is committed.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetImageStoreUploadSessionByIdResponse>
   */
  getImageStoreUploadSessionById(sessionId: string, options?: Models.ServiceFabricClientGetImageStoreUploadSessionByIdOptionalParams): Promise<Models.GetImageStoreUploadSessionByIdResponse>;
  /**
   * @param sessionId A GUID generated by the user for a file uploading. It identifies an image store
   * upload session which keeps track of all file chunks until it is committed.
   * @param callback The callback
   */
  getImageStoreUploadSessionById(sessionId: string, callback: msRest.ServiceCallback<Models.UploadSession>): void;
  /**
   * @param sessionId A GUID generated by the user for a file uploading. It identifies an image store
   * upload session which keeps track of all file chunks until it is committed.
   * @param options The optional parameters
   * @param callback The callback
   */
  getImageStoreUploadSessionById(sessionId: string, options: Models.ServiceFabricClientGetImageStoreUploadSessionByIdOptionalParams, callback: msRest.ServiceCallback<Models.UploadSession>): void;
  getImageStoreUploadSessionById(sessionId: string, options?: Models.ServiceFabricClientGetImageStoreUploadSessionByIdOptionalParams | msRest.ServiceCallback<Models.UploadSession>, callback?: msRest.ServiceCallback<Models.UploadSession>): Promise<Models.GetImageStoreUploadSessionByIdResponse> {
    return this.sendOperationRequest(
      {
        sessionId,
        options
      },
      getImageStoreUploadSessionByIdOperationSpec,
      callback) as Promise<Models.GetImageStoreUploadSessionByIdResponse>;
  }

  /**
   * Gets the image store upload session associated with the given image store relative path. User
   * can query the upload session at any time during uploading.
   * @summary Get the image store upload session by relative path.
   * @param contentPath Relative path to file or folder in the image store from its root.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetImageStoreUploadSessionByPathResponse>
   */
  getImageStoreUploadSessionByPath(contentPath: string, options?: Models.ServiceFabricClientGetImageStoreUploadSessionByPathOptionalParams): Promise<Models.GetImageStoreUploadSessionByPathResponse>;
  /**
   * @param contentPath Relative path to file or folder in the image store from its root.
   * @param callback The callback
   */
  getImageStoreUploadSessionByPath(contentPath: string, callback: msRest.ServiceCallback<Models.UploadSession>): void;
  /**
   * @param contentPath Relative path to file or folder in the image store from its root.
   * @param options The optional parameters
   * @param callback The callback
   */
  getImageStoreUploadSessionByPath(contentPath: string, options: Models.ServiceFabricClientGetImageStoreUploadSessionByPathOptionalParams, callback: msRest.ServiceCallback<Models.UploadSession>): void;
  getImageStoreUploadSessionByPath(contentPath: string, options?: Models.ServiceFabricClientGetImageStoreUploadSessionByPathOptionalParams | msRest.ServiceCallback<Models.UploadSession>, callback?: msRest.ServiceCallback<Models.UploadSession>): Promise<Models.GetImageStoreUploadSessionByPathResponse> {
    return this.sendOperationRequest(
      {
        contentPath,
        options
      },
      getImageStoreUploadSessionByPathOperationSpec,
      callback) as Promise<Models.GetImageStoreUploadSessionByPathResponse>;
  }

  /**
   * Uploads a file chunk to the image store with the specified upload session ID and image store
   * relative path. This API allows user to resume the file upload operation. user doesn't have to
   * restart the file upload from scratch whenever there is a network interruption. Use this option
   * if the file size is large.
   *
   * To perform a resumable file upload, user need to break the file into multiple chunks and upload
   * these chunks to the image store one-by-one. Chunks don't have to be uploaded in order. If the
   * file represented by the image store relative path already exists, it will be overwritten when
   * the upload session commits.
   * @summary Uploads a file chunk to the image store relative path.
   * @param contentPath Relative path to file or folder in the image store from its root.
   * @param sessionId A GUID generated by the user for a file uploading. It identifies an image store
   * upload session which keeps track of all file chunks until it is committed.
   * @param contentRange When uploading file chunks to the image store, the Content-Range header
   * field need to be configured and sent with a request. The format should looks like "bytes
   * {First-Byte-Position}-{Last-Byte-Position}/{File-Length}". For example, Content-Range:bytes
   * 300-5000/20000 indicates that user is sending bytes 300 through 5,000 and the total file length
   * is 20,000 bytes.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  uploadFileChunk(contentPath: string, sessionId: string, contentRange: string, options?: Models.ServiceFabricClientUploadFileChunkOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param contentPath Relative path to file or folder in the image store from its root.
   * @param sessionId A GUID generated by the user for a file uploading. It identifies an image store
   * upload session which keeps track of all file chunks until it is committed.
   * @param contentRange When uploading file chunks to the image store, the Content-Range header
   * field need to be configured and sent with a request. The format should looks like "bytes
   * {First-Byte-Position}-{Last-Byte-Position}/{File-Length}". For example, Content-Range:bytes
   * 300-5000/20000 indicates that user is sending bytes 300 through 5,000 and the total file length
   * is 20,000 bytes.
   * @param callback The callback
   */
  uploadFileChunk(contentPath: string, sessionId: string, contentRange: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param contentPath Relative path to file or folder in the image store from its root.
   * @param sessionId A GUID generated by the user for a file uploading. It identifies an image store
   * upload session which keeps track of all file chunks until it is committed.
   * @param contentRange When uploading file chunks to the image store, the Content-Range header
   * field need to be configured and sent with a request. The format should looks like "bytes
   * {First-Byte-Position}-{Last-Byte-Position}/{File-Length}". For example, Content-Range:bytes
   * 300-5000/20000 indicates that user is sending bytes 300 through 5,000 and the total file length
   * is 20,000 bytes.
   * @param options The optional parameters
   * @param callback The callback
   */
  uploadFileChunk(contentPath: string, sessionId: string, contentRange: string, options: Models.ServiceFabricClientUploadFileChunkOptionalParams, callback: msRest.ServiceCallback<void>): void;
  uploadFileChunk(contentPath: string, sessionId: string, contentRange: string, options?: Models.ServiceFabricClientUploadFileChunkOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        contentPath,
        sessionId,
        contentRange,
        options
      },
      uploadFileChunkOperationSpec,
      callback);
  }

  /**
   * Returns the total size of files at the root and children folders in image store.
   * @summary Get the folder size at the root of the image store.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetImageStoreRootFolderSizeResponse>
   */
  getImageStoreRootFolderSize(options?: Models.ServiceFabricClientGetImageStoreRootFolderSizeOptionalParams): Promise<Models.GetImageStoreRootFolderSizeResponse>;
  /**
   * @param callback The callback
   */
  getImageStoreRootFolderSize(callback: msRest.ServiceCallback<Models.FolderSizeInfo>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getImageStoreRootFolderSize(options: Models.ServiceFabricClientGetImageStoreRootFolderSizeOptionalParams, callback: msRest.ServiceCallback<Models.FolderSizeInfo>): void;
  getImageStoreRootFolderSize(options?: Models.ServiceFabricClientGetImageStoreRootFolderSizeOptionalParams | msRest.ServiceCallback<Models.FolderSizeInfo>, callback?: msRest.ServiceCallback<Models.FolderSizeInfo>): Promise<Models.GetImageStoreRootFolderSizeResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getImageStoreRootFolderSizeOperationSpec,
      callback) as Promise<Models.GetImageStoreRootFolderSizeResponse>;
  }

  /**
   * Gets the total size of file under a image store folder, specified by contentPath. The
   * contentPath is relative to the root of the image store.
   * @summary Get the size of a folder in image store
   * @param contentPath Relative path to file or folder in the image store from its root.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetImageStoreFolderSizeResponse>
   */
  getImageStoreFolderSize(contentPath: string, options?: Models.ServiceFabricClientGetImageStoreFolderSizeOptionalParams): Promise<Models.GetImageStoreFolderSizeResponse>;
  /**
   * @param contentPath Relative path to file or folder in the image store from its root.
   * @param callback The callback
   */
  getImageStoreFolderSize(contentPath: string, callback: msRest.ServiceCallback<Models.FolderSizeInfo>): void;
  /**
   * @param contentPath Relative path to file or folder in the image store from its root.
   * @param options The optional parameters
   * @param callback The callback
   */
  getImageStoreFolderSize(contentPath: string, options: Models.ServiceFabricClientGetImageStoreFolderSizeOptionalParams, callback: msRest.ServiceCallback<Models.FolderSizeInfo>): void;
  getImageStoreFolderSize(contentPath: string, options?: Models.ServiceFabricClientGetImageStoreFolderSizeOptionalParams | msRest.ServiceCallback<Models.FolderSizeInfo>, callback?: msRest.ServiceCallback<Models.FolderSizeInfo>): Promise<Models.GetImageStoreFolderSizeResponse> {
    return this.sendOperationRequest(
      {
        contentPath,
        options
      },
      getImageStoreFolderSizeOperationSpec,
      callback) as Promise<Models.GetImageStoreFolderSizeResponse>;
  }

  /**
   * Returns information about the primary ImageStore replica, such as disk capacity and available
   * disk space at the node it is on, and several categories of the ImageStore's file system usage.
   * @summary Gets the overall ImageStore information
   * @param [options] The optional parameters
   * @returns Promise<Models.GetImageStoreInfoResponse>
   */
  getImageStoreInfo(options?: Models.ServiceFabricClientGetImageStoreInfoOptionalParams): Promise<Models.GetImageStoreInfoResponse>;
  /**
   * @param callback The callback
   */
  getImageStoreInfo(callback: msRest.ServiceCallback<Models.ImageStoreInfo>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getImageStoreInfo(options: Models.ServiceFabricClientGetImageStoreInfoOptionalParams, callback: msRest.ServiceCallback<Models.ImageStoreInfo>): void;
  getImageStoreInfo(options?: Models.ServiceFabricClientGetImageStoreInfoOptionalParams | msRest.ServiceCallback<Models.ImageStoreInfo>, callback?: msRest.ServiceCallback<Models.ImageStoreInfo>): Promise<Models.GetImageStoreInfoResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getImageStoreInfoOperationSpec,
      callback) as Promise<Models.GetImageStoreInfoResponse>;
  }

  /**
   * For clusters that have one or more instances of the Infrastructure Service configured,
   * this API provides a way to send infrastructure-specific commands to a particular
   * instance of the Infrastructure Service.
   *
   * Available commands and their corresponding response formats vary depending upon
   * the infrastructure on which the cluster is running.
   *
   * This API supports the Service Fabric platform; it is not meant to be used directly from your
   * code.
   * @summary Invokes an administrative command on the given Infrastructure Service instance.
   * @param command The text of the command to be invoked. The content of the command is
   * infrastructure-specific.
   * @param [options] The optional parameters
   * @returns Promise<Models.InvokeInfrastructureCommandResponse>
   */
  invokeInfrastructureCommand(command: string, options?: Models.ServiceFabricClientInvokeInfrastructureCommandOptionalParams): Promise<Models.InvokeInfrastructureCommandResponse>;
  /**
   * @param command The text of the command to be invoked. The content of the command is
   * infrastructure-specific.
   * @param callback The callback
   */
  invokeInfrastructureCommand(command: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param command The text of the command to be invoked. The content of the command is
   * infrastructure-specific.
   * @param options The optional parameters
   * @param callback The callback
   */
  invokeInfrastructureCommand(command: string, options: Models.ServiceFabricClientInvokeInfrastructureCommandOptionalParams, callback: msRest.ServiceCallback<string>): void;
  invokeInfrastructureCommand(command: string, options?: Models.ServiceFabricClientInvokeInfrastructureCommandOptionalParams | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.InvokeInfrastructureCommandResponse> {
    return this.sendOperationRequest(
      {
        command,
        options
      },
      invokeInfrastructureCommandOperationSpec,
      callback) as Promise<Models.InvokeInfrastructureCommandResponse>;
  }

  /**
   * For clusters that have one or more instances of the Infrastructure Service configured,
   * this API provides a way to send infrastructure-specific queries to a particular
   * instance of the Infrastructure Service.
   *
   * Available commands and their corresponding response formats vary depending upon
   * the infrastructure on which the cluster is running.
   *
   * This API supports the Service Fabric platform; it is not meant to be used directly from your
   * code.
   * @summary Invokes a read-only query on the given infrastructure service instance.
   * @param command The text of the command to be invoked. The content of the command is
   * infrastructure-specific.
   * @param [options] The optional parameters
   * @returns Promise<Models.InvokeInfrastructureQueryResponse>
   */
  invokeInfrastructureQuery(command: string, options?: Models.ServiceFabricClientInvokeInfrastructureQueryOptionalParams): Promise<Models.InvokeInfrastructureQueryResponse>;
  /**
   * @param command The text of the command to be invoked. The content of the command is
   * infrastructure-specific.
   * @param callback The callback
   */
  invokeInfrastructureQuery(command: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param command The text of the command to be invoked. The content of the command is
   * infrastructure-specific.
   * @param options The optional parameters
   * @param callback The callback
   */
  invokeInfrastructureQuery(command: string, options: Models.ServiceFabricClientInvokeInfrastructureQueryOptionalParams, callback: msRest.ServiceCallback<string>): void;
  invokeInfrastructureQuery(command: string, options?: Models.ServiceFabricClientInvokeInfrastructureQueryOptionalParams | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.InvokeInfrastructureQueryResponse> {
    return this.sendOperationRequest(
      {
        command,
        options
      },
      invokeInfrastructureQueryOperationSpec,
      callback) as Promise<Models.InvokeInfrastructureQueryResponse>;
  }

  /**
   * This API will induce data loss for the specified partition. It will trigger a call to the
   * OnDataLoss API of the partition.
   * Actual data loss will depend on the specified DataLossMode.
   *
   * - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the
   * partition but actual data loss depends on the presence of in-flight replication.
   * - FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
   *
   * This API should only be called with a stateful service as the target.
   *
   * Calling this API with a system service as the target is not advised.
   *
   * Note:  Once this API has been called, it cannot be reversed. Calling CancelOperation will only
   * stop execution and clean up internal system state.
   * It will not restore data if the command has progressed far enough to cause data loss.
   *
   * Call the GetDataLossProgress API with the same OperationId to return information on the
   * operation started with this API.
   * @summary This API will induce data loss for the specified partition. It will trigger a call to
   * the OnDataLossAsync API of the partition.
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param partitionId The identity of the partition.
   * @param operationId A GUID that identifies a call of this API.  This is passed into the
   * corresponding GetProgress API
   * @param dataLossMode This enum is passed to the StartDataLoss API to indicate what type of data
   * loss to induce. Possible values include: 'Invalid', 'PartialDataLoss', 'FullDataLoss'
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  startDataLoss(serviceId: string, partitionId: string, operationId: string, dataLossMode: Models.DataLossMode, options?: Models.ServiceFabricClientStartDataLossOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param partitionId The identity of the partition.
   * @param operationId A GUID that identifies a call of this API.  This is passed into the
   * corresponding GetProgress API
   * @param dataLossMode This enum is passed to the StartDataLoss API to indicate what type of data
   * loss to induce. Possible values include: 'Invalid', 'PartialDataLoss', 'FullDataLoss'
   * @param callback The callback
   */
  startDataLoss(serviceId: string, partitionId: string, operationId: string, dataLossMode: Models.DataLossMode, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param partitionId The identity of the partition.
   * @param operationId A GUID that identifies a call of this API.  This is passed into the
   * corresponding GetProgress API
   * @param dataLossMode This enum is passed to the StartDataLoss API to indicate what type of data
   * loss to induce. Possible values include: 'Invalid', 'PartialDataLoss', 'FullDataLoss'
   * @param options The optional parameters
   * @param callback The callback
   */
  startDataLoss(serviceId: string, partitionId: string, operationId: string, dataLossMode: Models.DataLossMode, options: Models.ServiceFabricClientStartDataLossOptionalParams, callback: msRest.ServiceCallback<void>): void;
  startDataLoss(serviceId: string, partitionId: string, operationId: string, dataLossMode: Models.DataLossMode, options?: Models.ServiceFabricClientStartDataLossOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        serviceId,
        partitionId,
        operationId,
        dataLossMode,
        options
      },
      startDataLossOperationSpec,
      callback);
  }

  /**
   * Gets the progress of a data loss operation started with StartDataLoss, using the OperationId.
   * @summary Gets the progress of a partition data loss operation started using the StartDataLoss
   * API.
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param partitionId The identity of the partition.
   * @param operationId A GUID that identifies a call of this API.  This is passed into the
   * corresponding GetProgress API
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDataLossProgressResponse>
   */
  getDataLossProgress(serviceId: string, partitionId: string, operationId: string, options?: Models.ServiceFabricClientGetDataLossProgressOptionalParams): Promise<Models.GetDataLossProgressResponse>;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param partitionId The identity of the partition.
   * @param operationId A GUID that identifies a call of this API.  This is passed into the
   * corresponding GetProgress API
   * @param callback The callback
   */
  getDataLossProgress(serviceId: string, partitionId: string, operationId: string, callback: msRest.ServiceCallback<Models.PartitionDataLossProgress>): void;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param partitionId The identity of the partition.
   * @param operationId A GUID that identifies a call of this API.  This is passed into the
   * corresponding GetProgress API
   * @param options The optional parameters
   * @param callback The callback
   */
  getDataLossProgress(serviceId: string, partitionId: string, operationId: string, options: Models.ServiceFabricClientGetDataLossProgressOptionalParams, callback: msRest.ServiceCallback<Models.PartitionDataLossProgress>): void;
  getDataLossProgress(serviceId: string, partitionId: string, operationId: string, options?: Models.ServiceFabricClientGetDataLossProgressOptionalParams | msRest.ServiceCallback<Models.PartitionDataLossProgress>, callback?: msRest.ServiceCallback<Models.PartitionDataLossProgress>): Promise<Models.GetDataLossProgressResponse> {
    return this.sendOperationRequest(
      {
        serviceId,
        partitionId,
        operationId,
        options
      },
      getDataLossProgressOperationSpec,
      callback) as Promise<Models.GetDataLossProgressResponse>;
  }

  /**
   * This API is useful for a temporary quorum loss situation on your service.
   *
   * Call the GetQuorumLossProgress API with the same OperationId to return information on the
   * operation started with this API.
   *
   * This can only be called on stateful persisted (HasPersistedState==true) services.  Do not use
   * this API on stateless services or stateful in-memory only services.
   * @summary Induces quorum loss for a given stateful service partition.
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param partitionId The identity of the partition.
   * @param operationId A GUID that identifies a call of this API.  This is passed into the
   * corresponding GetProgress API
   * @param quorumLossMode This enum is passed to the StartQuorumLoss API to indicate what type of
   * quorum loss to induce. Possible values include: 'Invalid', 'QuorumReplicas', 'AllReplicas'
   * @param quorumLossDuration The amount of time for which the partition will be kept in quorum
   * loss.  This must be specified in seconds.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  startQuorumLoss(serviceId: string, partitionId: string, operationId: string, quorumLossMode: Models.QuorumLossMode, quorumLossDuration: number, options?: Models.ServiceFabricClientStartQuorumLossOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param partitionId The identity of the partition.
   * @param operationId A GUID that identifies a call of this API.  This is passed into the
   * corresponding GetProgress API
   * @param quorumLossMode This enum is passed to the StartQuorumLoss API to indicate what type of
   * quorum loss to induce. Possible values include: 'Invalid', 'QuorumReplicas', 'AllReplicas'
   * @param quorumLossDuration The amount of time for which the partition will be kept in quorum
   * loss.  This must be specified in seconds.
   * @param callback The callback
   */
  startQuorumLoss(serviceId: string, partitionId: string, operationId: string, quorumLossMode: Models.QuorumLossMode, quorumLossDuration: number, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param partitionId The identity of the partition.
   * @param operationId A GUID that identifies a call of this API.  This is passed into the
   * corresponding GetProgress API
   * @param quorumLossMode This enum is passed to the StartQuorumLoss API to indicate what type of
   * quorum loss to induce. Possible values include: 'Invalid', 'QuorumReplicas', 'AllReplicas'
   * @param quorumLossDuration The amount of time for which the partition will be kept in quorum
   * loss.  This must be specified in seconds.
   * @param options The optional parameters
   * @param callback The callback
   */
  startQuorumLoss(serviceId: string, partitionId: string, operationId: string, quorumLossMode: Models.QuorumLossMode, quorumLossDuration: number, options: Models.ServiceFabricClientStartQuorumLossOptionalParams, callback: msRest.ServiceCallback<void>): void;
  startQuorumLoss(serviceId: string, partitionId: string, operationId: string, quorumLossMode: Models.QuorumLossMode, quorumLossDuration: number, options?: Models.ServiceFabricClientStartQuorumLossOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        serviceId,
        partitionId,
        operationId,
        quorumLossMode,
        quorumLossDuration,
        options
      },
      startQuorumLossOperationSpec,
      callback);
  }

  /**
   * Gets the progress of a quorum loss operation started with StartQuorumLoss, using the provided
   * OperationId.
   * @summary Gets the progress of a quorum loss operation on a partition started using the
   * StartQuorumLoss API.
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param partitionId The identity of the partition.
   * @param operationId A GUID that identifies a call of this API.  This is passed into the
   * corresponding GetProgress API
   * @param [options] The optional parameters
   * @returns Promise<Models.GetQuorumLossProgressResponse>
   */
  getQuorumLossProgress(serviceId: string, partitionId: string, operationId: string, options?: Models.ServiceFabricClientGetQuorumLossProgressOptionalParams): Promise<Models.GetQuorumLossProgressResponse>;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param partitionId The identity of the partition.
   * @param operationId A GUID that identifies a call of this API.  This is passed into the
   * corresponding GetProgress API
   * @param callback The callback
   */
  getQuorumLossProgress(serviceId: string, partitionId: string, operationId: string, callback: msRest.ServiceCallback<Models.PartitionQuorumLossProgress>): void;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param partitionId The identity of the partition.
   * @param operationId A GUID that identifies a call of this API.  This is passed into the
   * corresponding GetProgress API
   * @param options The optional parameters
   * @param callback The callback
   */
  getQuorumLossProgress(serviceId: string, partitionId: string, operationId: string, options: Models.ServiceFabricClientGetQuorumLossProgressOptionalParams, callback: msRest.ServiceCallback<Models.PartitionQuorumLossProgress>): void;
  getQuorumLossProgress(serviceId: string, partitionId: string, operationId: string, options?: Models.ServiceFabricClientGetQuorumLossProgressOptionalParams | msRest.ServiceCallback<Models.PartitionQuorumLossProgress>, callback?: msRest.ServiceCallback<Models.PartitionQuorumLossProgress>): Promise<Models.GetQuorumLossProgressResponse> {
    return this.sendOperationRequest(
      {
        serviceId,
        partitionId,
        operationId,
        options
      },
      getQuorumLossProgressOperationSpec,
      callback) as Promise<Models.GetQuorumLossProgressResponse>;
  }

  /**
   * This API is useful for testing failover.
   *
   * If used to target a stateless service partition, RestartPartitionMode must be
   * AllReplicasOrInstances.
   *
   * Call the GetPartitionRestartProgress API using the same OperationId to get the progress.
   * @summary This API will restart some or all replicas or instances of the specified partition.
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param partitionId The identity of the partition.
   * @param operationId A GUID that identifies a call of this API.  This is passed into the
   * corresponding GetProgress API
   * @param restartPartitionMode Describe which partitions to restart. Possible values include:
   * 'Invalid', 'AllReplicasOrInstances', 'OnlyActiveSecondaries'
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  startPartitionRestart(serviceId: string, partitionId: string, operationId: string, restartPartitionMode: Models.RestartPartitionMode, options?: Models.ServiceFabricClientStartPartitionRestartOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param partitionId The identity of the partition.
   * @param operationId A GUID that identifies a call of this API.  This is passed into the
   * corresponding GetProgress API
   * @param restartPartitionMode Describe which partitions to restart. Possible values include:
   * 'Invalid', 'AllReplicasOrInstances', 'OnlyActiveSecondaries'
   * @param callback The callback
   */
  startPartitionRestart(serviceId: string, partitionId: string, operationId: string, restartPartitionMode: Models.RestartPartitionMode, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param partitionId The identity of the partition.
   * @param operationId A GUID that identifies a call of this API.  This is passed into the
   * corresponding GetProgress API
   * @param restartPartitionMode Describe which partitions to restart. Possible values include:
   * 'Invalid', 'AllReplicasOrInstances', 'OnlyActiveSecondaries'
   * @param options The optional parameters
   * @param callback The callback
   */
  startPartitionRestart(serviceId: string, partitionId: string, operationId: string, restartPartitionMode: Models.RestartPartitionMode, options: Models.ServiceFabricClientStartPartitionRestartOptionalParams, callback: msRest.ServiceCallback<void>): void;
  startPartitionRestart(serviceId: string, partitionId: string, operationId: string, restartPartitionMode: Models.RestartPartitionMode, options?: Models.ServiceFabricClientStartPartitionRestartOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        serviceId,
        partitionId,
        operationId,
        restartPartitionMode,
        options
      },
      startPartitionRestartOperationSpec,
      callback);
  }

  /**
   * Gets the progress of a PartitionRestart started with StartPartitionRestart using the provided
   * OperationId.
   * @summary Gets the progress of a PartitionRestart operation started using StartPartitionRestart.
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param partitionId The identity of the partition.
   * @param operationId A GUID that identifies a call of this API.  This is passed into the
   * corresponding GetProgress API
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPartitionRestartProgressResponse>
   */
  getPartitionRestartProgress(serviceId: string, partitionId: string, operationId: string, options?: Models.ServiceFabricClientGetPartitionRestartProgressOptionalParams): Promise<Models.GetPartitionRestartProgressResponse>;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param partitionId The identity of the partition.
   * @param operationId A GUID that identifies a call of this API.  This is passed into the
   * corresponding GetProgress API
   * @param callback The callback
   */
  getPartitionRestartProgress(serviceId: string, partitionId: string, operationId: string, callback: msRest.ServiceCallback<Models.PartitionRestartProgress>): void;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param partitionId The identity of the partition.
   * @param operationId A GUID that identifies a call of this API.  This is passed into the
   * corresponding GetProgress API
   * @param options The optional parameters
   * @param callback The callback
   */
  getPartitionRestartProgress(serviceId: string, partitionId: string, operationId: string, options: Models.ServiceFabricClientGetPartitionRestartProgressOptionalParams, callback: msRest.ServiceCallback<Models.PartitionRestartProgress>): void;
  getPartitionRestartProgress(serviceId: string, partitionId: string, operationId: string, options?: Models.ServiceFabricClientGetPartitionRestartProgressOptionalParams | msRest.ServiceCallback<Models.PartitionRestartProgress>, callback?: msRest.ServiceCallback<Models.PartitionRestartProgress>): Promise<Models.GetPartitionRestartProgressResponse> {
    return this.sendOperationRequest(
      {
        serviceId,
        partitionId,
        operationId,
        options
      },
      getPartitionRestartProgressOperationSpec,
      callback) as Promise<Models.GetPartitionRestartProgressResponse>;
  }

  /**
   * Starts or stops a cluster node.  A cluster node is a process, not the OS instance itself.  To
   * start a node, pass in "Start" for the NodeTransitionType parameter.
   * To stop a node, pass in "Stop" for the NodeTransitionType parameter.  This API starts the
   * operation - when the API returns the node may not have finished transitioning yet.
   * Call GetNodeTransitionProgress with the same OperationId to get the progress of the operation.
   * @summary Starts or stops a cluster node.
   * @param nodeName The name of the node.
   * @param operationId A GUID that identifies a call of this API.  This is passed into the
   * corresponding GetProgress API
   * @param nodeTransitionType Indicates the type of transition to perform.  NodeTransitionType.Start
   * will start a stopped node.  NodeTransitionType.Stop will stop a node that is up. Possible values
   * include: 'Invalid', 'Start', 'Stop'
   * @param nodeInstanceId The node instance ID of the target node.  This can be determined through
   * GetNodeInfo API.
   * @param stopDurationInSeconds The duration, in seconds, to keep the node stopped.  The minimum
   * value is 600, the maximum is 14400.  After this time expires, the node will automatically come
   * back up.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  startNodeTransition(nodeName: string, operationId: string, nodeTransitionType: Models.NodeTransitionType, nodeInstanceId: string, stopDurationInSeconds: number, options?: Models.ServiceFabricClientStartNodeTransitionOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param nodeName The name of the node.
   * @param operationId A GUID that identifies a call of this API.  This is passed into the
   * corresponding GetProgress API
   * @param nodeTransitionType Indicates the type of transition to perform.  NodeTransitionType.Start
   * will start a stopped node.  NodeTransitionType.Stop will stop a node that is up. Possible values
   * include: 'Invalid', 'Start', 'Stop'
   * @param nodeInstanceId The node instance ID of the target node.  This can be determined through
   * GetNodeInfo API.
   * @param stopDurationInSeconds The duration, in seconds, to keep the node stopped.  The minimum
   * value is 600, the maximum is 14400.  After this time expires, the node will automatically come
   * back up.
   * @param callback The callback
   */
  startNodeTransition(nodeName: string, operationId: string, nodeTransitionType: Models.NodeTransitionType, nodeInstanceId: string, stopDurationInSeconds: number, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param nodeName The name of the node.
   * @param operationId A GUID that identifies a call of this API.  This is passed into the
   * corresponding GetProgress API
   * @param nodeTransitionType Indicates the type of transition to perform.  NodeTransitionType.Start
   * will start a stopped node.  NodeTransitionType.Stop will stop a node that is up. Possible values
   * include: 'Invalid', 'Start', 'Stop'
   * @param nodeInstanceId The node instance ID of the target node.  This can be determined through
   * GetNodeInfo API.
   * @param stopDurationInSeconds The duration, in seconds, to keep the node stopped.  The minimum
   * value is 600, the maximum is 14400.  After this time expires, the node will automatically come
   * back up.
   * @param options The optional parameters
   * @param callback The callback
   */
  startNodeTransition(nodeName: string, operationId: string, nodeTransitionType: Models.NodeTransitionType, nodeInstanceId: string, stopDurationInSeconds: number, options: Models.ServiceFabricClientStartNodeTransitionOptionalParams, callback: msRest.ServiceCallback<void>): void;
  startNodeTransition(nodeName: string, operationId: string, nodeTransitionType: Models.NodeTransitionType, nodeInstanceId: string, stopDurationInSeconds: number, options?: Models.ServiceFabricClientStartNodeTransitionOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        nodeName,
        operationId,
        nodeTransitionType,
        nodeInstanceId,
        stopDurationInSeconds,
        options
      },
      startNodeTransitionOperationSpec,
      callback);
  }

  /**
   * Gets the progress of an operation started with StartNodeTransition using the provided
   * OperationId.
   * @summary Gets the progress of an operation started using StartNodeTransition.
   * @param nodeName The name of the node.
   * @param operationId A GUID that identifies a call of this API.  This is passed into the
   * corresponding GetProgress API
   * @param [options] The optional parameters
   * @returns Promise<Models.GetNodeTransitionProgressResponse>
   */
  getNodeTransitionProgress(nodeName: string, operationId: string, options?: Models.ServiceFabricClientGetNodeTransitionProgressOptionalParams): Promise<Models.GetNodeTransitionProgressResponse>;
  /**
   * @param nodeName The name of the node.
   * @param operationId A GUID that identifies a call of this API.  This is passed into the
   * corresponding GetProgress API
   * @param callback The callback
   */
  getNodeTransitionProgress(nodeName: string, operationId: string, callback: msRest.ServiceCallback<Models.NodeTransitionProgress>): void;
  /**
   * @param nodeName The name of the node.
   * @param operationId A GUID that identifies a call of this API.  This is passed into the
   * corresponding GetProgress API
   * @param options The optional parameters
   * @param callback The callback
   */
  getNodeTransitionProgress(nodeName: string, operationId: string, options: Models.ServiceFabricClientGetNodeTransitionProgressOptionalParams, callback: msRest.ServiceCallback<Models.NodeTransitionProgress>): void;
  getNodeTransitionProgress(nodeName: string, operationId: string, options?: Models.ServiceFabricClientGetNodeTransitionProgressOptionalParams | msRest.ServiceCallback<Models.NodeTransitionProgress>, callback?: msRest.ServiceCallback<Models.NodeTransitionProgress>): Promise<Models.GetNodeTransitionProgressResponse> {
    return this.sendOperationRequest(
      {
        nodeName,
        operationId,
        options
      },
      getNodeTransitionProgressOperationSpec,
      callback) as Promise<Models.GetNodeTransitionProgressResponse>;
  }

  /**
   * Gets the list of user-induced fault operations filtered by provided input.
   * @summary Gets a list of user-induced fault operations filtered by provided input.
   * @param typeFilter Used to filter on OperationType for user-induced operations.
   *
   * - 65535 - select all
   * - 1 - select PartitionDataLoss.
   * - 2 - select PartitionQuorumLoss.
   * - 4 - select PartitionRestart.
   * - 8 - select NodeTransition.
   * @param stateFilter Used to filter on OperationState's for user-induced operations.
   *
   * - 65535 - select All
   * - 1 - select Running
   * - 2 - select RollingBack
   * - 8 - select Completed
   * - 16 - select Faulted
   * - 32 - select Cancelled
   * - 64 - select ForceCancelled
   * @param [options] The optional parameters
   * @returns Promise<Models.GetFaultOperationListResponse>
   */
  getFaultOperationList(typeFilter: number, stateFilter: number, options?: Models.ServiceFabricClientGetFaultOperationListOptionalParams): Promise<Models.GetFaultOperationListResponse>;
  /**
   * @param typeFilter Used to filter on OperationType for user-induced operations.
   *
   * - 65535 - select all
   * - 1 - select PartitionDataLoss.
   * - 2 - select PartitionQuorumLoss.
   * - 4 - select PartitionRestart.
   * - 8 - select NodeTransition.
   * @param stateFilter Used to filter on OperationState's for user-induced operations.
   *
   * - 65535 - select All
   * - 1 - select Running
   * - 2 - select RollingBack
   * - 8 - select Completed
   * - 16 - select Faulted
   * - 32 - select Cancelled
   * - 64 - select ForceCancelled
   * @param callback The callback
   */
  getFaultOperationList(typeFilter: number, stateFilter: number, callback: msRest.ServiceCallback<Models.OperationStatus[]>): void;
  /**
   * @param typeFilter Used to filter on OperationType for user-induced operations.
   *
   * - 65535 - select all
   * - 1 - select PartitionDataLoss.
   * - 2 - select PartitionQuorumLoss.
   * - 4 - select PartitionRestart.
   * - 8 - select NodeTransition.
   * @param stateFilter Used to filter on OperationState's for user-induced operations.
   *
   * - 65535 - select All
   * - 1 - select Running
   * - 2 - select RollingBack
   * - 8 - select Completed
   * - 16 - select Faulted
   * - 32 - select Cancelled
   * - 64 - select ForceCancelled
   * @param options The optional parameters
   * @param callback The callback
   */
  getFaultOperationList(typeFilter: number, stateFilter: number, options: Models.ServiceFabricClientGetFaultOperationListOptionalParams, callback: msRest.ServiceCallback<Models.OperationStatus[]>): void;
  getFaultOperationList(typeFilter: number, stateFilter: number, options?: Models.ServiceFabricClientGetFaultOperationListOptionalParams | msRest.ServiceCallback<Models.OperationStatus[]>, callback?: msRest.ServiceCallback<Models.OperationStatus[]>): Promise<Models.GetFaultOperationListResponse> {
    return this.sendOperationRequest(
      {
        typeFilter,
        stateFilter,
        options
      },
      getFaultOperationListOperationSpec,
      callback) as Promise<Models.GetFaultOperationListResponse>;
  }

  /**
   * The following APIs start fault operations that may be cancelled by using CancelOperation:
   * StartDataLoss, StartQuorumLoss, StartPartitionRestart, StartNodeTransition.
   *
   * If force is false, then the specified user-induced operation will be gracefully stopped and
   * cleaned up.  If force is true, the command will be aborted, and some internal state
   * may be left behind.  Specifying force as true should be used with care.  Calling this API with
   * force set to true is not allowed until this API has already
   * been called on the same test command with force set to false first, or unless the test command
   * already has an OperationState of OperationState.RollingBack.
   * Clarification: OperationState.RollingBack means that the system will be/is cleaning up internal
   * system state caused by executing the command.  It will not restore data if the
   * test command was to cause data loss.  For example, if you call StartDataLoss then call this API,
   * the system will only clean up internal state from running the command.
   * It will not restore the target partition's data, if the command progressed far enough to cause
   * data loss.
   *
   * Important note:  if this API is invoked with force==true, internal state may be left behind.
   * @summary Cancels a user-induced fault operation.
   * @param operationId A GUID that identifies a call of this API.  This is passed into the
   * corresponding GetProgress API
   * @param force Indicates whether to gracefully roll back and clean up internal system state
   * modified by executing the user-induced operation.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  cancelOperation(operationId: string, force: boolean, options?: Models.ServiceFabricClientCancelOperationOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param operationId A GUID that identifies a call of this API.  This is passed into the
   * corresponding GetProgress API
   * @param force Indicates whether to gracefully roll back and clean up internal system state
   * modified by executing the user-induced operation.
   * @param callback The callback
   */
  cancelOperation(operationId: string, force: boolean, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param operationId A GUID that identifies a call of this API.  This is passed into the
   * corresponding GetProgress API
   * @param force Indicates whether to gracefully roll back and clean up internal system state
   * modified by executing the user-induced operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  cancelOperation(operationId: string, force: boolean, options: Models.ServiceFabricClientCancelOperationOptionalParams, callback: msRest.ServiceCallback<void>): void;
  cancelOperation(operationId: string, force: boolean, options?: Models.ServiceFabricClientCancelOperationOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        operationId,
        force,
        options
      },
      cancelOperationOperationSpec,
      callback);
  }

  /**
   * Creates a backup policy which can be associated later with a Service Fabric application, service
   * or a partition for periodic backup.
   * @summary Creates a backup policy.
   * @param backupPolicyDescription Describes the backup policy.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  createBackupPolicy(backupPolicyDescription: Models.BackupPolicyDescription, options?: Models.ServiceFabricClientCreateBackupPolicyOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param backupPolicyDescription Describes the backup policy.
   * @param callback The callback
   */
  createBackupPolicy(backupPolicyDescription: Models.BackupPolicyDescription, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param backupPolicyDescription Describes the backup policy.
   * @param options The optional parameters
   * @param callback The callback
   */
  createBackupPolicy(backupPolicyDescription: Models.BackupPolicyDescription, options: Models.ServiceFabricClientCreateBackupPolicyOptionalParams, callback: msRest.ServiceCallback<void>): void;
  createBackupPolicy(backupPolicyDescription: Models.BackupPolicyDescription, options?: Models.ServiceFabricClientCreateBackupPolicyOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        backupPolicyDescription,
        options
      },
      createBackupPolicyOperationSpec,
      callback);
  }

  /**
   * Deletes an existing backup policy. A backup policy must be created before it can be deleted. A
   * currently active backup policy, associated with any Service Fabric application, service or
   * partition, cannot be deleted without first deleting the mapping.
   * @summary Deletes the backup policy.
   * @param backupPolicyName The name of the backup policy.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteBackupPolicy(backupPolicyName: string, options?: Models.ServiceFabricClientDeleteBackupPolicyOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param backupPolicyName The name of the backup policy.
   * @param callback The callback
   */
  deleteBackupPolicy(backupPolicyName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param backupPolicyName The name of the backup policy.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteBackupPolicy(backupPolicyName: string, options: Models.ServiceFabricClientDeleteBackupPolicyOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteBackupPolicy(backupPolicyName: string, options?: Models.ServiceFabricClientDeleteBackupPolicyOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        backupPolicyName,
        options
      },
      deleteBackupPolicyOperationSpec,
      callback);
  }

  /**
   * Get a list of all the backup policies configured.
   * @summary Gets all the backup policies configured.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetBackupPolicyListResponse>
   */
  getBackupPolicyList(options?: Models.ServiceFabricClientGetBackupPolicyListOptionalParams): Promise<Models.GetBackupPolicyListResponse>;
  /**
   * @param callback The callback
   */
  getBackupPolicyList(callback: msRest.ServiceCallback<Models.PagedBackupPolicyDescriptionList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getBackupPolicyList(options: Models.ServiceFabricClientGetBackupPolicyListOptionalParams, callback: msRest.ServiceCallback<Models.PagedBackupPolicyDescriptionList>): void;
  getBackupPolicyList(options?: Models.ServiceFabricClientGetBackupPolicyListOptionalParams | msRest.ServiceCallback<Models.PagedBackupPolicyDescriptionList>, callback?: msRest.ServiceCallback<Models.PagedBackupPolicyDescriptionList>): Promise<Models.GetBackupPolicyListResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getBackupPolicyListOperationSpec,
      callback) as Promise<Models.GetBackupPolicyListResponse>;
  }

  /**
   * Gets a particular backup policy identified by {backupPolicyName}
   * @summary Gets a particular backup policy by name.
   * @param backupPolicyName The name of the backup policy.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetBackupPolicyByNameResponse>
   */
  getBackupPolicyByName(backupPolicyName: string, options?: Models.ServiceFabricClientGetBackupPolicyByNameOptionalParams): Promise<Models.GetBackupPolicyByNameResponse>;
  /**
   * @param backupPolicyName The name of the backup policy.
   * @param callback The callback
   */
  getBackupPolicyByName(backupPolicyName: string, callback: msRest.ServiceCallback<Models.BackupPolicyDescription>): void;
  /**
   * @param backupPolicyName The name of the backup policy.
   * @param options The optional parameters
   * @param callback The callback
   */
  getBackupPolicyByName(backupPolicyName: string, options: Models.ServiceFabricClientGetBackupPolicyByNameOptionalParams, callback: msRest.ServiceCallback<Models.BackupPolicyDescription>): void;
  getBackupPolicyByName(backupPolicyName: string, options?: Models.ServiceFabricClientGetBackupPolicyByNameOptionalParams | msRest.ServiceCallback<Models.BackupPolicyDescription>, callback?: msRest.ServiceCallback<Models.BackupPolicyDescription>): Promise<Models.GetBackupPolicyByNameResponse> {
    return this.sendOperationRequest(
      {
        backupPolicyName,
        options
      },
      getBackupPolicyByNameOperationSpec,
      callback) as Promise<Models.GetBackupPolicyByNameResponse>;
  }

  /**
   * Returns a list of Service Fabric application, service or partition which are associated with
   * this backup policy.
   * @summary Gets the list of backup entities that are associated with this policy.
   * @param backupPolicyName The name of the backup policy.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAllEntitiesBackedUpByPolicyResponse>
   */
  getAllEntitiesBackedUpByPolicy(backupPolicyName: string, options?: Models.ServiceFabricClientGetAllEntitiesBackedUpByPolicyOptionalParams): Promise<Models.GetAllEntitiesBackedUpByPolicyResponse>;
  /**
   * @param backupPolicyName The name of the backup policy.
   * @param callback The callback
   */
  getAllEntitiesBackedUpByPolicy(backupPolicyName: string, callback: msRest.ServiceCallback<Models.PagedBackupEntityList>): void;
  /**
   * @param backupPolicyName The name of the backup policy.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllEntitiesBackedUpByPolicy(backupPolicyName: string, options: Models.ServiceFabricClientGetAllEntitiesBackedUpByPolicyOptionalParams, callback: msRest.ServiceCallback<Models.PagedBackupEntityList>): void;
  getAllEntitiesBackedUpByPolicy(backupPolicyName: string, options?: Models.ServiceFabricClientGetAllEntitiesBackedUpByPolicyOptionalParams | msRest.ServiceCallback<Models.PagedBackupEntityList>, callback?: msRest.ServiceCallback<Models.PagedBackupEntityList>): Promise<Models.GetAllEntitiesBackedUpByPolicyResponse> {
    return this.sendOperationRequest(
      {
        backupPolicyName,
        options
      },
      getAllEntitiesBackedUpByPolicyOperationSpec,
      callback) as Promise<Models.GetAllEntitiesBackedUpByPolicyResponse>;
  }

  /**
   * Updates the backup policy identified by {backupPolicyName}
   * @summary Updates the backup policy.
   * @param backupPolicyDescription Describes the backup policy.
   * @param backupPolicyName The name of the backup policy.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateBackupPolicy(backupPolicyDescription: Models.BackupPolicyDescription, backupPolicyName: string, options?: Models.ServiceFabricClientUpdateBackupPolicyOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param backupPolicyDescription Describes the backup policy.
   * @param backupPolicyName The name of the backup policy.
   * @param callback The callback
   */
  updateBackupPolicy(backupPolicyDescription: Models.BackupPolicyDescription, backupPolicyName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param backupPolicyDescription Describes the backup policy.
   * @param backupPolicyName The name of the backup policy.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateBackupPolicy(backupPolicyDescription: Models.BackupPolicyDescription, backupPolicyName: string, options: Models.ServiceFabricClientUpdateBackupPolicyOptionalParams, callback: msRest.ServiceCallback<void>): void;
  updateBackupPolicy(backupPolicyDescription: Models.BackupPolicyDescription, backupPolicyName: string, options?: Models.ServiceFabricClientUpdateBackupPolicyOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        backupPolicyDescription,
        backupPolicyName,
        options
      },
      updateBackupPolicyOperationSpec,
      callback);
  }

  /**
   * Enables periodic backup of stateful partitions which are part of this Service Fabric
   * application. Each partition is backed up individually as per the specified backup policy
   * description.
   * Note only C# based Reliable Actor and Reliable Stateful services are currently supported for
   * periodic backup.
   * @summary Enables periodic backup of stateful partitions under this Service Fabric application.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param enableBackupDescription Specifies the parameters for enabling backup.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  enableApplicationBackup(applicationId: string, enableBackupDescription: Models.EnableBackupDescription, options?: Models.ServiceFabricClientEnableApplicationBackupOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param enableBackupDescription Specifies the parameters for enabling backup.
   * @param callback The callback
   */
  enableApplicationBackup(applicationId: string, enableBackupDescription: Models.EnableBackupDescription, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param enableBackupDescription Specifies the parameters for enabling backup.
   * @param options The optional parameters
   * @param callback The callback
   */
  enableApplicationBackup(applicationId: string, enableBackupDescription: Models.EnableBackupDescription, options: Models.ServiceFabricClientEnableApplicationBackupOptionalParams, callback: msRest.ServiceCallback<void>): void;
  enableApplicationBackup(applicationId: string, enableBackupDescription: Models.EnableBackupDescription, options?: Models.ServiceFabricClientEnableApplicationBackupOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        applicationId,
        enableBackupDescription,
        options
      },
      enableApplicationBackupOperationSpec,
      callback);
  }

  /**
   * Disables periodic backup of Service Fabric application which was previously enabled.
   * @summary Disables periodic backup of Service Fabric application.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  disableApplicationBackup(applicationId: string, options?: Models.ServiceFabricClientDisableApplicationBackupOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param callback The callback
   */
  disableApplicationBackup(applicationId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param options The optional parameters
   * @param callback The callback
   */
  disableApplicationBackup(applicationId: string, options: Models.ServiceFabricClientDisableApplicationBackupOptionalParams, callback: msRest.ServiceCallback<void>): void;
  disableApplicationBackup(applicationId: string, options?: Models.ServiceFabricClientDisableApplicationBackupOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        applicationId,
        options
      },
      disableApplicationBackupOperationSpec,
      callback);
  }

  /**
   * Gets the Service Fabric backup configuration information for the application and the services
   * and partitions under this application.
   * @summary Gets the Service Fabric application backup configuration information.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetApplicationBackupConfigurationInfoResponse>
   */
  getApplicationBackupConfigurationInfo(applicationId: string, options?: Models.ServiceFabricClientGetApplicationBackupConfigurationInfoOptionalParams): Promise<Models.GetApplicationBackupConfigurationInfoResponse>;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param callback The callback
   */
  getApplicationBackupConfigurationInfo(applicationId: string, callback: msRest.ServiceCallback<Models.PagedBackupConfigurationInfoList>): void;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param options The optional parameters
   * @param callback The callback
   */
  getApplicationBackupConfigurationInfo(applicationId: string, options: Models.ServiceFabricClientGetApplicationBackupConfigurationInfoOptionalParams, callback: msRest.ServiceCallback<Models.PagedBackupConfigurationInfoList>): void;
  getApplicationBackupConfigurationInfo(applicationId: string, options?: Models.ServiceFabricClientGetApplicationBackupConfigurationInfoOptionalParams | msRest.ServiceCallback<Models.PagedBackupConfigurationInfoList>, callback?: msRest.ServiceCallback<Models.PagedBackupConfigurationInfoList>): Promise<Models.GetApplicationBackupConfigurationInfoResponse> {
    return this.sendOperationRequest(
      {
        applicationId,
        options
      },
      getApplicationBackupConfigurationInfoOperationSpec,
      callback) as Promise<Models.GetApplicationBackupConfigurationInfoResponse>;
  }

  /**
   * Returns a list of backups available for every partition in this Service Fabric application. The
   * server enumerates all the backups available at the backup location configured in the backup
   * policy. It also allows filtering of the result based on start and end datetime or just fetching
   * the latest available backup for every partition.
   * @summary Gets the list of backups available for every partition in this application.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetApplicationBackupListResponse>
   */
  getApplicationBackupList(applicationId: string, options?: Models.ServiceFabricClientGetApplicationBackupListOptionalParams): Promise<Models.GetApplicationBackupListResponse>;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param callback The callback
   */
  getApplicationBackupList(applicationId: string, callback: msRest.ServiceCallback<Models.PagedBackupInfoList>): void;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param options The optional parameters
   * @param callback The callback
   */
  getApplicationBackupList(applicationId: string, options: Models.ServiceFabricClientGetApplicationBackupListOptionalParams, callback: msRest.ServiceCallback<Models.PagedBackupInfoList>): void;
  getApplicationBackupList(applicationId: string, options?: Models.ServiceFabricClientGetApplicationBackupListOptionalParams | msRest.ServiceCallback<Models.PagedBackupInfoList>, callback?: msRest.ServiceCallback<Models.PagedBackupInfoList>): Promise<Models.GetApplicationBackupListResponse> {
    return this.sendOperationRequest(
      {
        applicationId,
        options
      },
      getApplicationBackupListOperationSpec,
      callback) as Promise<Models.GetApplicationBackupListResponse>;
  }

  /**
   * The application which is configured to take periodic backups, is suspended for taking further
   * backups till it is resumed again. This operation applies to the entire application's hierarchy.
   * It means all the services and partitions under this application are now suspended for backup.
   * @summary Suspends periodic backup for the specified Service Fabric application.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  suspendApplicationBackup(applicationId: string, options?: Models.ServiceFabricClientSuspendApplicationBackupOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param callback The callback
   */
  suspendApplicationBackup(applicationId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param options The optional parameters
   * @param callback The callback
   */
  suspendApplicationBackup(applicationId: string, options: Models.ServiceFabricClientSuspendApplicationBackupOptionalParams, callback: msRest.ServiceCallback<void>): void;
  suspendApplicationBackup(applicationId: string, options?: Models.ServiceFabricClientSuspendApplicationBackupOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        applicationId,
        options
      },
      suspendApplicationBackupOperationSpec,
      callback);
  }

  /**
   * The previously suspended Service Fabric application resumes taking periodic backup as per the
   * backup policy currently configured for the same.
   * @summary Resumes periodic backup of a Service Fabric application which was previously suspended.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  resumeApplicationBackup(applicationId: string, options?: Models.ServiceFabricClientResumeApplicationBackupOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param callback The callback
   */
  resumeApplicationBackup(applicationId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param options The optional parameters
   * @param callback The callback
   */
  resumeApplicationBackup(applicationId: string, options: Models.ServiceFabricClientResumeApplicationBackupOptionalParams, callback: msRest.ServiceCallback<void>): void;
  resumeApplicationBackup(applicationId: string, options?: Models.ServiceFabricClientResumeApplicationBackupOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        applicationId,
        options
      },
      resumeApplicationBackupOperationSpec,
      callback);
  }

  /**
   * Enables periodic backup of stateful partitions which are part of this Service Fabric service.
   * Each partition is backed up individually as per the specified backup policy description. In case
   * the application, which the service is part of, is already enabled for backup then this operation
   * would override the policy being used to take the periodic backup for this service and its
   * partitions (unless explicitly overridden at the partition level).
   * Note only C# based Reliable Actor and Reliable Stateful services are currently supported for
   * periodic backup.
   * @summary Enables periodic backup of stateful partitions under this Service Fabric service.
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param enableBackupDescription Specifies the parameters for enabling backup.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  enableServiceBackup(serviceId: string, enableBackupDescription: Models.EnableBackupDescription, options?: Models.ServiceFabricClientEnableServiceBackupOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param enableBackupDescription Specifies the parameters for enabling backup.
   * @param callback The callback
   */
  enableServiceBackup(serviceId: string, enableBackupDescription: Models.EnableBackupDescription, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param enableBackupDescription Specifies the parameters for enabling backup.
   * @param options The optional parameters
   * @param callback The callback
   */
  enableServiceBackup(serviceId: string, enableBackupDescription: Models.EnableBackupDescription, options: Models.ServiceFabricClientEnableServiceBackupOptionalParams, callback: msRest.ServiceCallback<void>): void;
  enableServiceBackup(serviceId: string, enableBackupDescription: Models.EnableBackupDescription, options?: Models.ServiceFabricClientEnableServiceBackupOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        serviceId,
        enableBackupDescription,
        options
      },
      enableServiceBackupOperationSpec,
      callback);
  }

  /**
   * Disables periodic backup of Service Fabric service which was previously enabled. Backup must be
   * explicitly enabled before it can be disabled.
   * In case the backup is enabled for the Service Fabric application, which this service is part of,
   * this service would continue to be periodically backed up as per the policy mapped at the
   * application level.
   * @summary Disables periodic backup of Service Fabric service which was previously enabled.
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  disableServiceBackup(serviceId: string, options?: Models.ServiceFabricClientDisableServiceBackupOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param callback The callback
   */
  disableServiceBackup(serviceId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param options The optional parameters
   * @param callback The callback
   */
  disableServiceBackup(serviceId: string, options: Models.ServiceFabricClientDisableServiceBackupOptionalParams, callback: msRest.ServiceCallback<void>): void;
  disableServiceBackup(serviceId: string, options?: Models.ServiceFabricClientDisableServiceBackupOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        serviceId,
        options
      },
      disableServiceBackupOperationSpec,
      callback);
  }

  /**
   * Gets the Service Fabric backup configuration information for the service and the partitions
   * under this service.
   * @summary Gets the Service Fabric service backup configuration information.
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetServiceBackupConfigurationInfoResponse>
   */
  getServiceBackupConfigurationInfo(serviceId: string, options?: Models.ServiceFabricClientGetServiceBackupConfigurationInfoOptionalParams): Promise<Models.GetServiceBackupConfigurationInfoResponse>;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param callback The callback
   */
  getServiceBackupConfigurationInfo(serviceId: string, callback: msRest.ServiceCallback<Models.PagedBackupConfigurationInfoList>): void;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param options The optional parameters
   * @param callback The callback
   */
  getServiceBackupConfigurationInfo(serviceId: string, options: Models.ServiceFabricClientGetServiceBackupConfigurationInfoOptionalParams, callback: msRest.ServiceCallback<Models.PagedBackupConfigurationInfoList>): void;
  getServiceBackupConfigurationInfo(serviceId: string, options?: Models.ServiceFabricClientGetServiceBackupConfigurationInfoOptionalParams | msRest.ServiceCallback<Models.PagedBackupConfigurationInfoList>, callback?: msRest.ServiceCallback<Models.PagedBackupConfigurationInfoList>): Promise<Models.GetServiceBackupConfigurationInfoResponse> {
    return this.sendOperationRequest(
      {
        serviceId,
        options
      },
      getServiceBackupConfigurationInfoOperationSpec,
      callback) as Promise<Models.GetServiceBackupConfigurationInfoResponse>;
  }

  /**
   * Returns a list of backups available for every partition in this Service Fabric service. The
   * server enumerates all the backups available in the backup store configured in the backup policy.
   * It also allows filtering of the result based on start and end datetime or just fetching the
   * latest available backup for every partition.
   * @summary Gets the list of backups available for every partition in this service.
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetServiceBackupListResponse>
   */
  getServiceBackupList(serviceId: string, options?: Models.ServiceFabricClientGetServiceBackupListOptionalParams): Promise<Models.GetServiceBackupListResponse>;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param callback The callback
   */
  getServiceBackupList(serviceId: string, callback: msRest.ServiceCallback<Models.PagedBackupInfoList>): void;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param options The optional parameters
   * @param callback The callback
   */
  getServiceBackupList(serviceId: string, options: Models.ServiceFabricClientGetServiceBackupListOptionalParams, callback: msRest.ServiceCallback<Models.PagedBackupInfoList>): void;
  getServiceBackupList(serviceId: string, options?: Models.ServiceFabricClientGetServiceBackupListOptionalParams | msRest.ServiceCallback<Models.PagedBackupInfoList>, callback?: msRest.ServiceCallback<Models.PagedBackupInfoList>): Promise<Models.GetServiceBackupListResponse> {
    return this.sendOperationRequest(
      {
        serviceId,
        options
      },
      getServiceBackupListOperationSpec,
      callback) as Promise<Models.GetServiceBackupListResponse>;
  }

  /**
   * The service which is configured to take periodic backups, is suspended for taking further
   * backups till it is resumed again. This operation applies to the entire service's hierarchy. It
   * means all the partitions under this service are now suspended for backup.
   * @summary Suspends periodic backup for the specified Service Fabric service.
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  suspendServiceBackup(serviceId: string, options?: Models.ServiceFabricClientSuspendServiceBackupOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param callback The callback
   */
  suspendServiceBackup(serviceId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param options The optional parameters
   * @param callback The callback
   */
  suspendServiceBackup(serviceId: string, options: Models.ServiceFabricClientSuspendServiceBackupOptionalParams, callback: msRest.ServiceCallback<void>): void;
  suspendServiceBackup(serviceId: string, options?: Models.ServiceFabricClientSuspendServiceBackupOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        serviceId,
        options
      },
      suspendServiceBackupOperationSpec,
      callback);
  }

  /**
   * The previously suspended Service Fabric service resumes taking periodic backup as per the backup
   * policy currently configured for the same.
   * @summary Resumes periodic backup of a Service Fabric service which was previously suspended.
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  resumeServiceBackup(serviceId: string, options?: Models.ServiceFabricClientResumeServiceBackupOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param callback The callback
   */
  resumeServiceBackup(serviceId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param options The optional parameters
   * @param callback The callback
   */
  resumeServiceBackup(serviceId: string, options: Models.ServiceFabricClientResumeServiceBackupOptionalParams, callback: msRest.ServiceCallback<void>): void;
  resumeServiceBackup(serviceId: string, options?: Models.ServiceFabricClientResumeServiceBackupOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        serviceId,
        options
      },
      resumeServiceBackupOperationSpec,
      callback);
  }

  /**
   * Enables periodic backup of stateful persisted partition. Each partition is backed up as per the
   * specified backup policy description. In case the application or service, which is partition is
   * part of, is already enabled for backup then this operation would override the policy being used
   * to take the periodic backup of this partition.
   * Note only C# based Reliable Actor and Reliable Stateful services are currently supported for
   * periodic backup.
   * @summary Enables periodic backup of the stateful persisted partition.
   * @param partitionId The identity of the partition.
   * @param enableBackupDescription Specifies the parameters for enabling backup.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  enablePartitionBackup(partitionId: string, enableBackupDescription: Models.EnableBackupDescription, options?: Models.ServiceFabricClientEnablePartitionBackupOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param partitionId The identity of the partition.
   * @param enableBackupDescription Specifies the parameters for enabling backup.
   * @param callback The callback
   */
  enablePartitionBackup(partitionId: string, enableBackupDescription: Models.EnableBackupDescription, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param partitionId The identity of the partition.
   * @param enableBackupDescription Specifies the parameters for enabling backup.
   * @param options The optional parameters
   * @param callback The callback
   */
  enablePartitionBackup(partitionId: string, enableBackupDescription: Models.EnableBackupDescription, options: Models.ServiceFabricClientEnablePartitionBackupOptionalParams, callback: msRest.ServiceCallback<void>): void;
  enablePartitionBackup(partitionId: string, enableBackupDescription: Models.EnableBackupDescription, options?: Models.ServiceFabricClientEnablePartitionBackupOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        partitionId,
        enableBackupDescription,
        options
      },
      enablePartitionBackupOperationSpec,
      callback);
  }

  /**
   * Disables periodic backup of partition which was previously enabled. Backup must be explicitly
   * enabled before it can be disabled.
   * In case the backup is enabled for the Service Fabric application or service, which this
   * partition is part of, this partition would continue to be periodically backed up as per the
   * policy mapped at the higher level entity.
   * @summary Disables periodic backup of Service Fabric partition which was previously enabled.
   * @param partitionId The identity of the partition.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  disablePartitionBackup(partitionId: string, options?: Models.ServiceFabricClientDisablePartitionBackupOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param partitionId The identity of the partition.
   * @param callback The callback
   */
  disablePartitionBackup(partitionId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param partitionId The identity of the partition.
   * @param options The optional parameters
   * @param callback The callback
   */
  disablePartitionBackup(partitionId: string, options: Models.ServiceFabricClientDisablePartitionBackupOptionalParams, callback: msRest.ServiceCallback<void>): void;
  disablePartitionBackup(partitionId: string, options?: Models.ServiceFabricClientDisablePartitionBackupOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        partitionId,
        options
      },
      disablePartitionBackupOperationSpec,
      callback);
  }

  /**
   * Gets the Service Fabric Backup configuration information for the specified partition.
   * @summary Gets the partition backup configuration information
   * @param partitionId The identity of the partition.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPartitionBackupConfigurationInfoResponse>
   */
  getPartitionBackupConfigurationInfo(partitionId: string, options?: Models.ServiceFabricClientGetPartitionBackupConfigurationInfoOptionalParams): Promise<Models.GetPartitionBackupConfigurationInfoResponse>;
  /**
   * @param partitionId The identity of the partition.
   * @param callback The callback
   */
  getPartitionBackupConfigurationInfo(partitionId: string, callback: msRest.ServiceCallback<Models.PartitionBackupConfigurationInfo>): void;
  /**
   * @param partitionId The identity of the partition.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPartitionBackupConfigurationInfo(partitionId: string, options: Models.ServiceFabricClientGetPartitionBackupConfigurationInfoOptionalParams, callback: msRest.ServiceCallback<Models.PartitionBackupConfigurationInfo>): void;
  getPartitionBackupConfigurationInfo(partitionId: string, options?: Models.ServiceFabricClientGetPartitionBackupConfigurationInfoOptionalParams | msRest.ServiceCallback<Models.PartitionBackupConfigurationInfo>, callback?: msRest.ServiceCallback<Models.PartitionBackupConfigurationInfo>): Promise<Models.GetPartitionBackupConfigurationInfoResponse> {
    return this.sendOperationRequest(
      {
        partitionId,
        options
      },
      getPartitionBackupConfigurationInfoOperationSpec,
      callback) as Promise<Models.GetPartitionBackupConfigurationInfoResponse>;
  }

  /**
   * Returns a list of backups available for the specified partition. The server enumerates all the
   * backups available in the backup store configured in the backup policy. It also allows filtering
   * of the result based on start and end datetime or just fetching the latest available backup for
   * the partition.
   * @summary Gets the list of backups available for the specified partition.
   * @param partitionId The identity of the partition.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPartitionBackupListResponse>
   */
  getPartitionBackupList(partitionId: string, options?: Models.ServiceFabricClientGetPartitionBackupListOptionalParams): Promise<Models.GetPartitionBackupListResponse>;
  /**
   * @param partitionId The identity of the partition.
   * @param callback The callback
   */
  getPartitionBackupList(partitionId: string, callback: msRest.ServiceCallback<Models.PagedBackupInfoList>): void;
  /**
   * @param partitionId The identity of the partition.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPartitionBackupList(partitionId: string, options: Models.ServiceFabricClientGetPartitionBackupListOptionalParams, callback: msRest.ServiceCallback<Models.PagedBackupInfoList>): void;
  getPartitionBackupList(partitionId: string, options?: Models.ServiceFabricClientGetPartitionBackupListOptionalParams | msRest.ServiceCallback<Models.PagedBackupInfoList>, callback?: msRest.ServiceCallback<Models.PagedBackupInfoList>): Promise<Models.GetPartitionBackupListResponse> {
    return this.sendOperationRequest(
      {
        partitionId,
        options
      },
      getPartitionBackupListOperationSpec,
      callback) as Promise<Models.GetPartitionBackupListResponse>;
  }

  /**
   * The partition which is configured to take periodic backups, is suspended for taking further
   * backups till it is resumed again.
   * @summary Suspends periodic backup for the specified partition.
   * @param partitionId The identity of the partition.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  suspendPartitionBackup(partitionId: string, options?: Models.ServiceFabricClientSuspendPartitionBackupOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param partitionId The identity of the partition.
   * @param callback The callback
   */
  suspendPartitionBackup(partitionId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param partitionId The identity of the partition.
   * @param options The optional parameters
   * @param callback The callback
   */
  suspendPartitionBackup(partitionId: string, options: Models.ServiceFabricClientSuspendPartitionBackupOptionalParams, callback: msRest.ServiceCallback<void>): void;
  suspendPartitionBackup(partitionId: string, options?: Models.ServiceFabricClientSuspendPartitionBackupOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        partitionId,
        options
      },
      suspendPartitionBackupOperationSpec,
      callback);
  }

  /**
   * The previously suspended partition resumes taking periodic backup as per the backup policy
   * currently configured for the same.
   * @summary Resumes periodic backup of partition which was previously suspended.
   * @param partitionId The identity of the partition.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  resumePartitionBackup(partitionId: string, options?: Models.ServiceFabricClientResumePartitionBackupOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param partitionId The identity of the partition.
   * @param callback The callback
   */
  resumePartitionBackup(partitionId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param partitionId The identity of the partition.
   * @param options The optional parameters
   * @param callback The callback
   */
  resumePartitionBackup(partitionId: string, options: Models.ServiceFabricClientResumePartitionBackupOptionalParams, callback: msRest.ServiceCallback<void>): void;
  resumePartitionBackup(partitionId: string, options?: Models.ServiceFabricClientResumePartitionBackupOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        partitionId,
        options
      },
      resumePartitionBackupOperationSpec,
      callback);
  }

  /**
   * Creates a backup of the stateful persisted partition's state. In case the partition is already
   * being periodically backed up, then by default the new backup is created at the same backup
   * storage. One can also override the same by specifying the backup storage details as part of the
   * request body. Once the backup is initiated, its progress can be tracked using the
   * GetBackupProgress operation.
   * In case, the operation times out, specify a greater backup timeout value in the query parameter.
   * @summary Triggers backup of the partition's state.
   * @param partitionId The identity of the partition.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  backupPartition(partitionId: string, options?: Models.ServiceFabricClientBackupPartitionOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param partitionId The identity of the partition.
   * @param callback The callback
   */
  backupPartition(partitionId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param partitionId The identity of the partition.
   * @param options The optional parameters
   * @param callback The callback
   */
  backupPartition(partitionId: string, options: Models.ServiceFabricClientBackupPartitionOptionalParams, callback: msRest.ServiceCallback<void>): void;
  backupPartition(partitionId: string, options?: Models.ServiceFabricClientBackupPartitionOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        partitionId,
        options
      },
      backupPartitionOperationSpec,
      callback);
  }

  /**
   * Returns information about the state of the latest backup along with details or failure reason in
   * case of completion.
   * @summary Gets details for the latest backup triggered for this partition.
   * @param partitionId The identity of the partition.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPartitionBackupProgressResponse>
   */
  getPartitionBackupProgress(partitionId: string, options?: Models.ServiceFabricClientGetPartitionBackupProgressOptionalParams): Promise<Models.GetPartitionBackupProgressResponse>;
  /**
   * @param partitionId The identity of the partition.
   * @param callback The callback
   */
  getPartitionBackupProgress(partitionId: string, callback: msRest.ServiceCallback<Models.BackupProgressInfo>): void;
  /**
   * @param partitionId The identity of the partition.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPartitionBackupProgress(partitionId: string, options: Models.ServiceFabricClientGetPartitionBackupProgressOptionalParams, callback: msRest.ServiceCallback<Models.BackupProgressInfo>): void;
  getPartitionBackupProgress(partitionId: string, options?: Models.ServiceFabricClientGetPartitionBackupProgressOptionalParams | msRest.ServiceCallback<Models.BackupProgressInfo>, callback?: msRest.ServiceCallback<Models.BackupProgressInfo>): Promise<Models.GetPartitionBackupProgressResponse> {
    return this.sendOperationRequest(
      {
        partitionId,
        options
      },
      getPartitionBackupProgressOperationSpec,
      callback) as Promise<Models.GetPartitionBackupProgressResponse>;
  }

  /**
   * Restores the state of a of the stateful persisted partition using the specified backup point. In
   * case the partition is already being periodically backed up, then by default the backup point is
   * looked for in the storage specified in backup policy. One can also override the same by
   * specifying the backup storage details as part of the restore partition description in body. Once
   * the restore is initiated, its progress can be tracked using the GetRestoreProgress operation.
   * In case, the operation times out, specify a greater restore timeout value in the query
   * parameter.
   * @summary Triggers restore of the state of the partition using the specified restore partition
   * description.
   * @param partitionId The identity of the partition.
   * @param restorePartitionDescription Describes the parameters to restore the partition.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  restorePartition(partitionId: string, restorePartitionDescription: Models.RestorePartitionDescription, options?: Models.ServiceFabricClientRestorePartitionOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param partitionId The identity of the partition.
   * @param restorePartitionDescription Describes the parameters to restore the partition.
   * @param callback The callback
   */
  restorePartition(partitionId: string, restorePartitionDescription: Models.RestorePartitionDescription, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param partitionId The identity of the partition.
   * @param restorePartitionDescription Describes the parameters to restore the partition.
   * @param options The optional parameters
   * @param callback The callback
   */
  restorePartition(partitionId: string, restorePartitionDescription: Models.RestorePartitionDescription, options: Models.ServiceFabricClientRestorePartitionOptionalParams, callback: msRest.ServiceCallback<void>): void;
  restorePartition(partitionId: string, restorePartitionDescription: Models.RestorePartitionDescription, options?: Models.ServiceFabricClientRestorePartitionOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        partitionId,
        restorePartitionDescription,
        options
      },
      restorePartitionOperationSpec,
      callback);
  }

  /**
   * Returns information about the state of the latest restore operation along with details or
   * failure reason in case of completion.
   * @summary Gets details for the latest restore operation triggered for this partition.
   * @param partitionId The identity of the partition.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPartitionRestoreProgressResponse>
   */
  getPartitionRestoreProgress(partitionId: string, options?: Models.ServiceFabricClientGetPartitionRestoreProgressOptionalParams): Promise<Models.GetPartitionRestoreProgressResponse>;
  /**
   * @param partitionId The identity of the partition.
   * @param callback The callback
   */
  getPartitionRestoreProgress(partitionId: string, callback: msRest.ServiceCallback<Models.RestoreProgressInfo>): void;
  /**
   * @param partitionId The identity of the partition.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPartitionRestoreProgress(partitionId: string, options: Models.ServiceFabricClientGetPartitionRestoreProgressOptionalParams, callback: msRest.ServiceCallback<Models.RestoreProgressInfo>): void;
  getPartitionRestoreProgress(partitionId: string, options?: Models.ServiceFabricClientGetPartitionRestoreProgressOptionalParams | msRest.ServiceCallback<Models.RestoreProgressInfo>, callback?: msRest.ServiceCallback<Models.RestoreProgressInfo>): Promise<Models.GetPartitionRestoreProgressResponse> {
    return this.sendOperationRequest(
      {
        partitionId,
        options
      },
      getPartitionRestoreProgressOperationSpec,
      callback) as Promise<Models.GetPartitionRestoreProgressResponse>;
  }

  /**
   * Gets the list of backups available for the specified backed up entity (Application, Service or
   * Partition) at the specified backup location (FileShare or Azure Blob Storage).
   * @summary Gets the list of backups available for the specified backed up entity at the specified
   * backup location.
   * @param getBackupByStorageQueryDescription Describes the filters and backup storage details to be
   * used for enumerating backups.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetBackupsFromBackupLocationResponse>
   */
  getBackupsFromBackupLocation(getBackupByStorageQueryDescription: Models.GetBackupByStorageQueryDescription, options?: Models.ServiceFabricClientGetBackupsFromBackupLocationOptionalParams): Promise<Models.GetBackupsFromBackupLocationResponse>;
  /**
   * @param getBackupByStorageQueryDescription Describes the filters and backup storage details to be
   * used for enumerating backups.
   * @param callback The callback
   */
  getBackupsFromBackupLocation(getBackupByStorageQueryDescription: Models.GetBackupByStorageQueryDescription, callback: msRest.ServiceCallback<Models.PagedBackupInfoList>): void;
  /**
   * @param getBackupByStorageQueryDescription Describes the filters and backup storage details to be
   * used for enumerating backups.
   * @param options The optional parameters
   * @param callback The callback
   */
  getBackupsFromBackupLocation(getBackupByStorageQueryDescription: Models.GetBackupByStorageQueryDescription, options: Models.ServiceFabricClientGetBackupsFromBackupLocationOptionalParams, callback: msRest.ServiceCallback<Models.PagedBackupInfoList>): void;
  getBackupsFromBackupLocation(getBackupByStorageQueryDescription: Models.GetBackupByStorageQueryDescription, options?: Models.ServiceFabricClientGetBackupsFromBackupLocationOptionalParams | msRest.ServiceCallback<Models.PagedBackupInfoList>, callback?: msRest.ServiceCallback<Models.PagedBackupInfoList>): Promise<Models.GetBackupsFromBackupLocationResponse> {
    return this.sendOperationRequest(
      {
        getBackupByStorageQueryDescription,
        options
      },
      getBackupsFromBackupLocationOperationSpec,
      callback) as Promise<Models.GetBackupsFromBackupLocationResponse>;
  }

  /**
   * Creates the specified Service Fabric name.
   * @summary Creates a Service Fabric name.
   * @param nameDescription Describes the Service Fabric name to be created.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  createName(nameDescription: Models.NameDescription, options?: Models.ServiceFabricClientCreateNameOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param nameDescription Describes the Service Fabric name to be created.
   * @param callback The callback
   */
  createName(nameDescription: Models.NameDescription, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param nameDescription Describes the Service Fabric name to be created.
   * @param options The optional parameters
   * @param callback The callback
   */
  createName(nameDescription: Models.NameDescription, options: Models.ServiceFabricClientCreateNameOptionalParams, callback: msRest.ServiceCallback<void>): void;
  createName(nameDescription: Models.NameDescription, options?: Models.ServiceFabricClientCreateNameOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        nameDescription,
        options
      },
      createNameOperationSpec,
      callback);
  }

  /**
   * Returns whether the specified Service Fabric name exists.
   * @summary Returns whether the Service Fabric name exists.
   * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  getNameExistsInfo(nameId: string, options?: Models.ServiceFabricClientGetNameExistsInfoOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
   * @param callback The callback
   */
  getNameExistsInfo(nameId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
   * @param options The optional parameters
   * @param callback The callback
   */
  getNameExistsInfo(nameId: string, options: Models.ServiceFabricClientGetNameExistsInfoOptionalParams, callback: msRest.ServiceCallback<void>): void;
  getNameExistsInfo(nameId: string, options?: Models.ServiceFabricClientGetNameExistsInfoOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        nameId,
        options
      },
      getNameExistsInfoOperationSpec,
      callback);
  }

  /**
   * Deletes the specified Service Fabric name. A name must be created before it can be deleted.
   * Deleting a name with child properties will fail.
   * @summary Deletes a Service Fabric name.
   * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteName(nameId: string, options?: Models.ServiceFabricClientDeleteNameOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
   * @param callback The callback
   */
  deleteName(nameId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteName(nameId: string, options: Models.ServiceFabricClientDeleteNameOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteName(nameId: string, options?: Models.ServiceFabricClientDeleteNameOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        nameId,
        options
      },
      deleteNameOperationSpec,
      callback);
  }

  /**
   * Enumerates all the Service Fabric names under a given name. If the subnames do not fit in a
   * page, one page of results is returned as well as a continuation token, which can be used to get
   * the next page. Querying a name that doesn't exist will fail.
   * @summary Enumerates all the Service Fabric names under a given name.
   * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSubNameInfoListResponse>
   */
  getSubNameInfoList(nameId: string, options?: Models.ServiceFabricClientGetSubNameInfoListOptionalParams): Promise<Models.GetSubNameInfoListResponse>;
  /**
   * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
   * @param callback The callback
   */
  getSubNameInfoList(nameId: string, callback: msRest.ServiceCallback<Models.PagedSubNameInfoList>): void;
  /**
   * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSubNameInfoList(nameId: string, options: Models.ServiceFabricClientGetSubNameInfoListOptionalParams, callback: msRest.ServiceCallback<Models.PagedSubNameInfoList>): void;
  getSubNameInfoList(nameId: string, options?: Models.ServiceFabricClientGetSubNameInfoListOptionalParams | msRest.ServiceCallback<Models.PagedSubNameInfoList>, callback?: msRest.ServiceCallback<Models.PagedSubNameInfoList>): Promise<Models.GetSubNameInfoListResponse> {
    return this.sendOperationRequest(
      {
        nameId,
        options
      },
      getSubNameInfoListOperationSpec,
      callback) as Promise<Models.GetSubNameInfoListResponse>;
  }

  /**
   * A Service Fabric name can have one or more named properties that store custom information. This
   * operation gets the information about these properties in a paged list. The information includes
   * name, value, and metadata about each of the properties.
   * @summary Gets information on all Service Fabric properties under a given name.
   * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPropertyInfoListResponse>
   */
  getPropertyInfoList(nameId: string, options?: Models.ServiceFabricClientGetPropertyInfoListOptionalParams): Promise<Models.GetPropertyInfoListResponse>;
  /**
   * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
   * @param callback The callback
   */
  getPropertyInfoList(nameId: string, callback: msRest.ServiceCallback<Models.PagedPropertyInfoList>): void;
  /**
   * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPropertyInfoList(nameId: string, options: Models.ServiceFabricClientGetPropertyInfoListOptionalParams, callback: msRest.ServiceCallback<Models.PagedPropertyInfoList>): void;
  getPropertyInfoList(nameId: string, options?: Models.ServiceFabricClientGetPropertyInfoListOptionalParams | msRest.ServiceCallback<Models.PagedPropertyInfoList>, callback?: msRest.ServiceCallback<Models.PagedPropertyInfoList>): Promise<Models.GetPropertyInfoListResponse> {
    return this.sendOperationRequest(
      {
        nameId,
        options
      },
      getPropertyInfoListOperationSpec,
      callback) as Promise<Models.GetPropertyInfoListResponse>;
  }

  /**
   * Creates or updates the specified Service Fabric property under a given name.
   * @summary Creates or updates a Service Fabric property.
   * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
   * @param propertyDescription Describes the Service Fabric property to be created.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  putProperty(nameId: string, propertyDescription: Models.PropertyDescription, options?: Models.ServiceFabricClientPutPropertyOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
   * @param propertyDescription Describes the Service Fabric property to be created.
   * @param callback The callback
   */
  putProperty(nameId: string, propertyDescription: Models.PropertyDescription, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
   * @param propertyDescription Describes the Service Fabric property to be created.
   * @param options The optional parameters
   * @param callback The callback
   */
  putProperty(nameId: string, propertyDescription: Models.PropertyDescription, options: Models.ServiceFabricClientPutPropertyOptionalParams, callback: msRest.ServiceCallback<void>): void;
  putProperty(nameId: string, propertyDescription: Models.PropertyDescription, options?: Models.ServiceFabricClientPutPropertyOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        nameId,
        propertyDescription,
        options
      },
      putPropertyOperationSpec,
      callback);
  }

  /**
   * Gets the specified Service Fabric property under a given name. This will always return both
   * value and metadata.
   * @summary Gets the specified Service Fabric property.
   * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
   * @param propertyName Specifies the name of the property to get.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPropertyInfoResponse>
   */
  getPropertyInfo(nameId: string, propertyName: string, options?: Models.ServiceFabricClientGetPropertyInfoOptionalParams): Promise<Models.GetPropertyInfoResponse>;
  /**
   * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
   * @param propertyName Specifies the name of the property to get.
   * @param callback The callback
   */
  getPropertyInfo(nameId: string, propertyName: string, callback: msRest.ServiceCallback<Models.PropertyInfo>): void;
  /**
   * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
   * @param propertyName Specifies the name of the property to get.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPropertyInfo(nameId: string, propertyName: string, options: Models.ServiceFabricClientGetPropertyInfoOptionalParams, callback: msRest.ServiceCallback<Models.PropertyInfo>): void;
  getPropertyInfo(nameId: string, propertyName: string, options?: Models.ServiceFabricClientGetPropertyInfoOptionalParams | msRest.ServiceCallback<Models.PropertyInfo>, callback?: msRest.ServiceCallback<Models.PropertyInfo>): Promise<Models.GetPropertyInfoResponse> {
    return this.sendOperationRequest(
      {
        nameId,
        propertyName,
        options
      },
      getPropertyInfoOperationSpec,
      callback) as Promise<Models.GetPropertyInfoResponse>;
  }

  /**
   * Deletes the specified Service Fabric property under a given name. A property must be created
   * before it can be deleted.
   * @summary Deletes the specified Service Fabric property.
   * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
   * @param propertyName Specifies the name of the property to get.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteProperty(nameId: string, propertyName: string, options?: Models.ServiceFabricClientDeletePropertyOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
   * @param propertyName Specifies the name of the property to get.
   * @param callback The callback
   */
  deleteProperty(nameId: string, propertyName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
   * @param propertyName Specifies the name of the property to get.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteProperty(nameId: string, propertyName: string, options: Models.ServiceFabricClientDeletePropertyOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteProperty(nameId: string, propertyName: string, options?: Models.ServiceFabricClientDeletePropertyOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        nameId,
        propertyName,
        options
      },
      deletePropertyOperationSpec,
      callback);
  }

  /**
   * Submits a batch of property operations. Either all or none of the operations will be committed.
   * @summary Submits a property batch.
   * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
   * @param propertyBatchDescriptionList Describes the property batch operations to be submitted.
   * @param [options] The optional parameters
   * @returns Promise<Models.SubmitPropertyBatchResponse>
   */
  submitPropertyBatch(nameId: string, propertyBatchDescriptionList: Models.PropertyBatchDescriptionList, options?: Models.ServiceFabricClientSubmitPropertyBatchOptionalParams): Promise<Models.SubmitPropertyBatchResponse>;
  /**
   * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
   * @param propertyBatchDescriptionList Describes the property batch operations to be submitted.
   * @param callback The callback
   */
  submitPropertyBatch(nameId: string, propertyBatchDescriptionList: Models.PropertyBatchDescriptionList, callback: msRest.ServiceCallback<Models.PropertyBatchInfoUnion>): void;
  /**
   * @param nameId The Service Fabric name, without the 'fabric:' URI scheme.
   * @param propertyBatchDescriptionList Describes the property batch operations to be submitted.
   * @param options The optional parameters
   * @param callback The callback
   */
  submitPropertyBatch(nameId: string, propertyBatchDescriptionList: Models.PropertyBatchDescriptionList, options: Models.ServiceFabricClientSubmitPropertyBatchOptionalParams, callback: msRest.ServiceCallback<Models.PropertyBatchInfoUnion>): void;
  submitPropertyBatch(nameId: string, propertyBatchDescriptionList: Models.PropertyBatchDescriptionList, options?: Models.ServiceFabricClientSubmitPropertyBatchOptionalParams | msRest.ServiceCallback<Models.PropertyBatchInfoUnion>, callback?: msRest.ServiceCallback<Models.PropertyBatchInfoUnion>): Promise<Models.SubmitPropertyBatchResponse> {
    return this.sendOperationRequest(
      {
        nameId,
        propertyBatchDescriptionList,
        options
      },
      submitPropertyBatchOperationSpec,
      callback) as Promise<Models.SubmitPropertyBatchResponse>;
  }

  /**
   * The response is list of ClusterEvent objects.
   * @summary Gets all Cluster-related events.
   * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetClusterEventListResponse>
   */
  getClusterEventList(startTimeUtc: string, endTimeUtc: string, options?: Models.ServiceFabricClientGetClusterEventListOptionalParams): Promise<Models.GetClusterEventListResponse>;
  /**
   * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param callback The callback
   */
  getClusterEventList(startTimeUtc: string, endTimeUtc: string, callback: msRest.ServiceCallback<Models.ClusterEventUnion[]>): void;
  /**
   * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param options The optional parameters
   * @param callback The callback
   */
  getClusterEventList(startTimeUtc: string, endTimeUtc: string, options: Models.ServiceFabricClientGetClusterEventListOptionalParams, callback: msRest.ServiceCallback<Models.ClusterEventUnion[]>): void;
  getClusterEventList(startTimeUtc: string, endTimeUtc: string, options?: Models.ServiceFabricClientGetClusterEventListOptionalParams | msRest.ServiceCallback<Models.ClusterEventUnion[]>, callback?: msRest.ServiceCallback<Models.ClusterEventUnion[]>): Promise<Models.GetClusterEventListResponse> {
    return this.sendOperationRequest(
      {
        startTimeUtc,
        endTimeUtc,
        options
      },
      getClusterEventListOperationSpec,
      callback) as Promise<Models.GetClusterEventListResponse>;
  }

  /**
   * The response is list of ContainerInstanceEvent objects.
   * @summary Gets all Containers-related events.
   * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetContainersEventListResponse>
   */
  getContainersEventList(startTimeUtc: string, endTimeUtc: string, options?: Models.ServiceFabricClientGetContainersEventListOptionalParams): Promise<Models.GetContainersEventListResponse>;
  /**
   * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param callback The callback
   */
  getContainersEventList(startTimeUtc: string, endTimeUtc: string, callback: msRest.ServiceCallback<Models.ContainerInstanceEvent[]>): void;
  /**
   * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param options The optional parameters
   * @param callback The callback
   */
  getContainersEventList(startTimeUtc: string, endTimeUtc: string, options: Models.ServiceFabricClientGetContainersEventListOptionalParams, callback: msRest.ServiceCallback<Models.ContainerInstanceEvent[]>): void;
  getContainersEventList(startTimeUtc: string, endTimeUtc: string, options?: Models.ServiceFabricClientGetContainersEventListOptionalParams | msRest.ServiceCallback<Models.ContainerInstanceEvent[]>, callback?: msRest.ServiceCallback<Models.ContainerInstanceEvent[]>): Promise<Models.GetContainersEventListResponse> {
    return this.sendOperationRequest(
      {
        startTimeUtc,
        endTimeUtc,
        options
      },
      getContainersEventListOperationSpec,
      callback) as Promise<Models.GetContainersEventListResponse>;
  }

  /**
   * The response is list of NodeEvent objects.
   * @summary Gets a Node-related events.
   * @param nodeName The name of the node.
   * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetNodeEventListResponse>
   */
  getNodeEventList(nodeName: string, startTimeUtc: string, endTimeUtc: string, options?: Models.ServiceFabricClientGetNodeEventListOptionalParams): Promise<Models.GetNodeEventListResponse>;
  /**
   * @param nodeName The name of the node.
   * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param callback The callback
   */
  getNodeEventList(nodeName: string, startTimeUtc: string, endTimeUtc: string, callback: msRest.ServiceCallback<Models.NodeEventUnion[]>): void;
  /**
   * @param nodeName The name of the node.
   * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param options The optional parameters
   * @param callback The callback
   */
  getNodeEventList(nodeName: string, startTimeUtc: string, endTimeUtc: string, options: Models.ServiceFabricClientGetNodeEventListOptionalParams, callback: msRest.ServiceCallback<Models.NodeEventUnion[]>): void;
  getNodeEventList(nodeName: string, startTimeUtc: string, endTimeUtc: string, options?: Models.ServiceFabricClientGetNodeEventListOptionalParams | msRest.ServiceCallback<Models.NodeEventUnion[]>, callback?: msRest.ServiceCallback<Models.NodeEventUnion[]>): Promise<Models.GetNodeEventListResponse> {
    return this.sendOperationRequest(
      {
        nodeName,
        startTimeUtc,
        endTimeUtc,
        options
      },
      getNodeEventListOperationSpec,
      callback) as Promise<Models.GetNodeEventListResponse>;
  }

  /**
   * The response is list of NodeEvent objects.
   * @summary Gets all Nodes-related Events.
   * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetNodesEventListResponse>
   */
  getNodesEventList(startTimeUtc: string, endTimeUtc: string, options?: Models.ServiceFabricClientGetNodesEventListOptionalParams): Promise<Models.GetNodesEventListResponse>;
  /**
   * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param callback The callback
   */
  getNodesEventList(startTimeUtc: string, endTimeUtc: string, callback: msRest.ServiceCallback<Models.NodeEventUnion[]>): void;
  /**
   * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param options The optional parameters
   * @param callback The callback
   */
  getNodesEventList(startTimeUtc: string, endTimeUtc: string, options: Models.ServiceFabricClientGetNodesEventListOptionalParams, callback: msRest.ServiceCallback<Models.NodeEventUnion[]>): void;
  getNodesEventList(startTimeUtc: string, endTimeUtc: string, options?: Models.ServiceFabricClientGetNodesEventListOptionalParams | msRest.ServiceCallback<Models.NodeEventUnion[]>, callback?: msRest.ServiceCallback<Models.NodeEventUnion[]>): Promise<Models.GetNodesEventListResponse> {
    return this.sendOperationRequest(
      {
        startTimeUtc,
        endTimeUtc,
        options
      },
      getNodesEventListOperationSpec,
      callback) as Promise<Models.GetNodesEventListResponse>;
  }

  /**
   * The response is list of ApplicationEvent objects.
   * @summary Gets an Application-related events.
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetApplicationEventListResponse>
   */
  getApplicationEventList(applicationId: string, startTimeUtc: string, endTimeUtc: string, options?: Models.ServiceFabricClientGetApplicationEventListOptionalParams): Promise<Models.GetApplicationEventListResponse>;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param callback The callback
   */
  getApplicationEventList(applicationId: string, startTimeUtc: string, endTimeUtc: string, callback: msRest.ServiceCallback<Models.ApplicationEventUnion[]>): void;
  /**
   * @param applicationId The identity of the application. This is typically the full name of the
   * application without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the application name is "fabric:/myapp/app1", the application identity would be
   * "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
   * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param options The optional parameters
   * @param callback The callback
   */
  getApplicationEventList(applicationId: string, startTimeUtc: string, endTimeUtc: string, options: Models.ServiceFabricClientGetApplicationEventListOptionalParams, callback: msRest.ServiceCallback<Models.ApplicationEventUnion[]>): void;
  getApplicationEventList(applicationId: string, startTimeUtc: string, endTimeUtc: string, options?: Models.ServiceFabricClientGetApplicationEventListOptionalParams | msRest.ServiceCallback<Models.ApplicationEventUnion[]>, callback?: msRest.ServiceCallback<Models.ApplicationEventUnion[]>): Promise<Models.GetApplicationEventListResponse> {
    return this.sendOperationRequest(
      {
        applicationId,
        startTimeUtc,
        endTimeUtc,
        options
      },
      getApplicationEventListOperationSpec,
      callback) as Promise<Models.GetApplicationEventListResponse>;
  }

  /**
   * The response is list of ApplicationEvent objects.
   * @summary Gets all Applications-related events.
   * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetApplicationsEventListResponse>
   */
  getApplicationsEventList(startTimeUtc: string, endTimeUtc: string, options?: Models.ServiceFabricClientGetApplicationsEventListOptionalParams): Promise<Models.GetApplicationsEventListResponse>;
  /**
   * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param callback The callback
   */
  getApplicationsEventList(startTimeUtc: string, endTimeUtc: string, callback: msRest.ServiceCallback<Models.ApplicationEventUnion[]>): void;
  /**
   * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param options The optional parameters
   * @param callback The callback
   */
  getApplicationsEventList(startTimeUtc: string, endTimeUtc: string, options: Models.ServiceFabricClientGetApplicationsEventListOptionalParams, callback: msRest.ServiceCallback<Models.ApplicationEventUnion[]>): void;
  getApplicationsEventList(startTimeUtc: string, endTimeUtc: string, options?: Models.ServiceFabricClientGetApplicationsEventListOptionalParams | msRest.ServiceCallback<Models.ApplicationEventUnion[]>, callback?: msRest.ServiceCallback<Models.ApplicationEventUnion[]>): Promise<Models.GetApplicationsEventListResponse> {
    return this.sendOperationRequest(
      {
        startTimeUtc,
        endTimeUtc,
        options
      },
      getApplicationsEventListOperationSpec,
      callback) as Promise<Models.GetApplicationsEventListResponse>;
  }

  /**
   * The response is list of ServiceEvent objects.
   * @summary Gets a Service-related events.
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetServiceEventListResponse>
   */
  getServiceEventList(serviceId: string, startTimeUtc: string, endTimeUtc: string, options?: Models.ServiceFabricClientGetServiceEventListOptionalParams): Promise<Models.GetServiceEventListResponse>;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param callback The callback
   */
  getServiceEventList(serviceId: string, startTimeUtc: string, endTimeUtc: string, callback: msRest.ServiceCallback<Models.ServiceEventUnion[]>): void;
  /**
   * @param serviceId The identity of the service. This ID is typically the full name of the service
   * without the 'fabric:' URI scheme.
   * Starting from version 6.0, hierarchical names are delimited with the "~" character.
   * For example, if the service name is "fabric:/myapp/app1/svc1", the service identity would be
   * "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous versions.
   * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param options The optional parameters
   * @param callback The callback
   */
  getServiceEventList(serviceId: string, startTimeUtc: string, endTimeUtc: string, options: Models.ServiceFabricClientGetServiceEventListOptionalParams, callback: msRest.ServiceCallback<Models.ServiceEventUnion[]>): void;
  getServiceEventList(serviceId: string, startTimeUtc: string, endTimeUtc: string, options?: Models.ServiceFabricClientGetServiceEventListOptionalParams | msRest.ServiceCallback<Models.ServiceEventUnion[]>, callback?: msRest.ServiceCallback<Models.ServiceEventUnion[]>): Promise<Models.GetServiceEventListResponse> {
    return this.sendOperationRequest(
      {
        serviceId,
        startTimeUtc,
        endTimeUtc,
        options
      },
      getServiceEventListOperationSpec,
      callback) as Promise<Models.GetServiceEventListResponse>;
  }

  /**
   * The response is list of ServiceEvent objects.
   * @summary Gets all Services-related events.
   * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetServicesEventListResponse>
   */
  getServicesEventList(startTimeUtc: string, endTimeUtc: string, options?: Models.ServiceFabricClientGetServicesEventListOptionalParams): Promise<Models.GetServicesEventListResponse>;
  /**
   * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param callback The callback
   */
  getServicesEventList(startTimeUtc: string, endTimeUtc: string, callback: msRest.ServiceCallback<Models.ServiceEventUnion[]>): void;
  /**
   * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param options The optional parameters
   * @param callback The callback
   */
  getServicesEventList(startTimeUtc: string, endTimeUtc: string, options: Models.ServiceFabricClientGetServicesEventListOptionalParams, callback: msRest.ServiceCallback<Models.ServiceEventUnion[]>): void;
  getServicesEventList(startTimeUtc: string, endTimeUtc: string, options?: Models.ServiceFabricClientGetServicesEventListOptionalParams | msRest.ServiceCallback<Models.ServiceEventUnion[]>, callback?: msRest.ServiceCallback<Models.ServiceEventUnion[]>): Promise<Models.GetServicesEventListResponse> {
    return this.sendOperationRequest(
      {
        startTimeUtc,
        endTimeUtc,
        options
      },
      getServicesEventListOperationSpec,
      callback) as Promise<Models.GetServicesEventListResponse>;
  }

  /**
   * The response is list of PartitionEvent objects.
   * @summary Gets a Partition-related events.
   * @param partitionId The identity of the partition.
   * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPartitionEventListResponse>
   */
  getPartitionEventList(partitionId: string, startTimeUtc: string, endTimeUtc: string, options?: Models.ServiceFabricClientGetPartitionEventListOptionalParams): Promise<Models.GetPartitionEventListResponse>;
  /**
   * @param partitionId The identity of the partition.
   * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param callback The callback
   */
  getPartitionEventList(partitionId: string, startTimeUtc: string, endTimeUtc: string, callback: msRest.ServiceCallback<Models.PartitionEventUnion[]>): void;
  /**
   * @param partitionId The identity of the partition.
   * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPartitionEventList(partitionId: string, startTimeUtc: string, endTimeUtc: string, options: Models.ServiceFabricClientGetPartitionEventListOptionalParams, callback: msRest.ServiceCallback<Models.PartitionEventUnion[]>): void;
  getPartitionEventList(partitionId: string, startTimeUtc: string, endTimeUtc: string, options?: Models.ServiceFabricClientGetPartitionEventListOptionalParams | msRest.ServiceCallback<Models.PartitionEventUnion[]>, callback?: msRest.ServiceCallback<Models.PartitionEventUnion[]>): Promise<Models.GetPartitionEventListResponse> {
    return this.sendOperationRequest(
      {
        partitionId,
        startTimeUtc,
        endTimeUtc,
        options
      },
      getPartitionEventListOperationSpec,
      callback) as Promise<Models.GetPartitionEventListResponse>;
  }

  /**
   * The response is list of PartitionEvent objects.
   * @summary Gets all Partitions-related events.
   * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPartitionsEventListResponse>
   */
  getPartitionsEventList(startTimeUtc: string, endTimeUtc: string, options?: Models.ServiceFabricClientGetPartitionsEventListOptionalParams): Promise<Models.GetPartitionsEventListResponse>;
  /**
   * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param callback The callback
   */
  getPartitionsEventList(startTimeUtc: string, endTimeUtc: string, callback: msRest.ServiceCallback<Models.PartitionEventUnion[]>): void;
  /**
   * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPartitionsEventList(startTimeUtc: string, endTimeUtc: string, options: Models.ServiceFabricClientGetPartitionsEventListOptionalParams, callback: msRest.ServiceCallback<Models.PartitionEventUnion[]>): void;
  getPartitionsEventList(startTimeUtc: string, endTimeUtc: string, options?: Models.ServiceFabricClientGetPartitionsEventListOptionalParams | msRest.ServiceCallback<Models.PartitionEventUnion[]>, callback?: msRest.ServiceCallback<Models.PartitionEventUnion[]>): Promise<Models.GetPartitionsEventListResponse> {
    return this.sendOperationRequest(
      {
        startTimeUtc,
        endTimeUtc,
        options
      },
      getPartitionsEventListOperationSpec,
      callback) as Promise<Models.GetPartitionsEventListResponse>;
  }

  /**
   * The response is list of ReplicaEvent objects.
   * @summary Gets a Partition Replica-related events.
   * @param partitionId The identity of the partition.
   * @param replicaId The identifier of the replica.
   * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPartitionReplicaEventListResponse>
   */
  getPartitionReplicaEventList(partitionId: string, replicaId: string, startTimeUtc: string, endTimeUtc: string, options?: Models.ServiceFabricClientGetPartitionReplicaEventListOptionalParams): Promise<Models.GetPartitionReplicaEventListResponse>;
  /**
   * @param partitionId The identity of the partition.
   * @param replicaId The identifier of the replica.
   * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param callback The callback
   */
  getPartitionReplicaEventList(partitionId: string, replicaId: string, startTimeUtc: string, endTimeUtc: string, callback: msRest.ServiceCallback<Models.ReplicaEventUnion[]>): void;
  /**
   * @param partitionId The identity of the partition.
   * @param replicaId The identifier of the replica.
   * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPartitionReplicaEventList(partitionId: string, replicaId: string, startTimeUtc: string, endTimeUtc: string, options: Models.ServiceFabricClientGetPartitionReplicaEventListOptionalParams, callback: msRest.ServiceCallback<Models.ReplicaEventUnion[]>): void;
  getPartitionReplicaEventList(partitionId: string, replicaId: string, startTimeUtc: string, endTimeUtc: string, options?: Models.ServiceFabricClientGetPartitionReplicaEventListOptionalParams | msRest.ServiceCallback<Models.ReplicaEventUnion[]>, callback?: msRest.ServiceCallback<Models.ReplicaEventUnion[]>): Promise<Models.GetPartitionReplicaEventListResponse> {
    return this.sendOperationRequest(
      {
        partitionId,
        replicaId,
        startTimeUtc,
        endTimeUtc,
        options
      },
      getPartitionReplicaEventListOperationSpec,
      callback) as Promise<Models.GetPartitionReplicaEventListResponse>;
  }

  /**
   * The response is list of ReplicaEvent objects.
   * @summary Gets all Replicas-related events for a Partition.
   * @param partitionId The identity of the partition.
   * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPartitionReplicasEventListResponse>
   */
  getPartitionReplicasEventList(partitionId: string, startTimeUtc: string, endTimeUtc: string, options?: Models.ServiceFabricClientGetPartitionReplicasEventListOptionalParams): Promise<Models.GetPartitionReplicasEventListResponse>;
  /**
   * @param partitionId The identity of the partition.
   * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param callback The callback
   */
  getPartitionReplicasEventList(partitionId: string, startTimeUtc: string, endTimeUtc: string, callback: msRest.ServiceCallback<Models.ReplicaEventUnion[]>): void;
  /**
   * @param partitionId The identity of the partition.
   * @param startTimeUtc The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param endTimeUtc The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPartitionReplicasEventList(partitionId: string, startTimeUtc: string, endTimeUtc: string, options: Models.ServiceFabricClientGetPartitionReplicasEventListOptionalParams, callback: msRest.ServiceCallback<Models.ReplicaEventUnion[]>): void;
  getPartitionReplicasEventList(partitionId: string, startTimeUtc: string, endTimeUtc: string, options?: Models.ServiceFabricClientGetPartitionReplicasEventListOptionalParams | msRest.ServiceCallback<Models.ReplicaEventUnion[]>, callback?: msRest.ServiceCallback<Models.ReplicaEventUnion[]>): Promise<Models.GetPartitionReplicasEventListResponse> {
    return this.sendOperationRequest(
      {
        partitionId,
        startTimeUtc,
        endTimeUtc,
        options
      },
      getPartitionReplicasEventListOperationSpec,
      callback) as Promise<Models.GetPartitionReplicasEventListResponse>;
  }

  /**
   * The response is list of FabricEvents.
   * @summary Gets all correlated events for a given event.
   * @param eventInstanceId The EventInstanceId.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCorrelatedEventListResponse>
   */
  getCorrelatedEventList(eventInstanceId: string, options?: Models.ServiceFabricClientGetCorrelatedEventListOptionalParams): Promise<Models.GetCorrelatedEventListResponse>;
  /**
   * @param eventInstanceId The EventInstanceId.
   * @param callback The callback
   */
  getCorrelatedEventList(eventInstanceId: string, callback: msRest.ServiceCallback<Models.FabricEventUnion[]>): void;
  /**
   * @param eventInstanceId The EventInstanceId.
   * @param options The optional parameters
   * @param callback The callback
   */
  getCorrelatedEventList(eventInstanceId: string, options: Models.ServiceFabricClientGetCorrelatedEventListOptionalParams, callback: msRest.ServiceCallback<Models.FabricEventUnion[]>): void;
  getCorrelatedEventList(eventInstanceId: string, options?: Models.ServiceFabricClientGetCorrelatedEventListOptionalParams | msRest.ServiceCallback<Models.FabricEventUnion[]>, callback?: msRest.ServiceCallback<Models.FabricEventUnion[]>): Promise<Models.GetCorrelatedEventListResponse> {
    return this.sendOperationRequest(
      {
        eventInstanceId,
        options
      },
      getCorrelatedEventListOperationSpec,
      callback) as Promise<Models.GetCorrelatedEventListResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getClusterManifestOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "$/GetClusterManifest",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ClusterManifest
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getClusterHealthOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "$/GetClusterHealth",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.nodesHealthStateFilter,
    Parameters.applicationsHealthStateFilter,
    Parameters.eventsHealthStateFilter,
    Parameters.excludeHealthStatistics,
    Parameters.includeSystemApplicationHealthStatistics,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ClusterHealth
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getClusterHealthUsingPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "$/GetClusterHealth",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.nodesHealthStateFilter,
    Parameters.applicationsHealthStateFilter,
    Parameters.eventsHealthStateFilter,
    Parameters.excludeHealthStatistics,
    Parameters.includeSystemApplicationHealthStatistics,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: [
      "options",
      "clusterHealthPolicies"
    ],
    mapper: Mappers.ClusterHealthPolicies
  },
  responses: {
    200: {
      bodyMapper: Mappers.ClusterHealth
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getClusterHealthChunkOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "$/GetClusterHealthChunk",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ClusterHealthChunk
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getClusterHealthChunkUsingPolicyAndAdvancedFiltersOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "$/GetClusterHealthChunk",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: [
      "options",
      "clusterHealthChunkQueryDescription"
    ],
    mapper: Mappers.ClusterHealthChunkQueryDescription
  },
  responses: {
    200: {
      bodyMapper: Mappers.ClusterHealthChunk
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const reportClusterHealthOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "$/ReportClusterHealth",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.immediate,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "healthInformation",
    mapper: {
      ...Mappers.HealthInformation,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getProvisionedFabricCodeVersionInfoListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "$/GetProvisionedCodeVersions",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.codeVersion,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FabricCodeVersionInfo"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getProvisionedFabricConfigVersionInfoListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "$/GetProvisionedConfigVersions",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.configVersion,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FabricConfigVersionInfo"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getClusterUpgradeProgressOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "$/GetUpgradeProgress",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ClusterUpgradeProgressObject
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getClusterConfigurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "$/GetClusterConfiguration",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.configurationApiVersion,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ClusterConfiguration
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getClusterConfigurationUpgradeStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "$/GetClusterConfigurationUpgradeStatus",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ClusterConfigurationUpgradeStatusInfo
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getUpgradeOrchestrationServiceStateOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "$/GetUpgradeOrchestrationServiceState",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.UpgradeOrchestrationServiceState
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const setUpgradeOrchestrationServiceStateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "$/SetUpgradeOrchestrationServiceState",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "upgradeOrchestrationServiceState",
    mapper: {
      ...Mappers.UpgradeOrchestrationServiceState,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.UpgradeOrchestrationServiceStateSummary
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const provisionClusterOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "$/Provision",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "provisionFabricDescription",
    mapper: {
      ...Mappers.ProvisionFabricDescription,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const unprovisionClusterOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "$/Unprovision",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "unprovisionFabricDescription",
    mapper: {
      ...Mappers.UnprovisionFabricDescription,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const rollbackClusterUpgradeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "$/RollbackUpgrade",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const resumeClusterUpgradeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "$/MoveToNextUpgradeDomain",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "resumeClusterUpgradeDescription",
    mapper: {
      ...Mappers.ResumeClusterUpgradeDescription,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const startClusterUpgradeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "$/Upgrade",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "startClusterUpgradeDescription",
    mapper: {
      ...Mappers.StartClusterUpgradeDescription,
      required: true
    }
  },
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const startClusterConfigurationUpgradeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "$/StartClusterConfigurationUpgrade",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "clusterConfigurationUpgradeDescription",
    mapper: {
      ...Mappers.ClusterConfigurationUpgradeDescription,
      required: true
    }
  },
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const updateClusterUpgradeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "$/UpdateUpgrade",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "updateClusterUpgradeDescription",
    mapper: {
      ...Mappers.UpdateClusterUpgradeDescription,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getAadMetadataOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "$/GetAadMetadata",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AadMetadataObject
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getClusterVersionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "$/GetClusterVersion",
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ClusterVersion
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getClusterLoadOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "$/GetLoadInformation",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ClusterLoadInfo
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const toggleVerboseServicePlacementHealthReportingOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "$/ToggleVerboseServicePlacementHealthReporting",
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.enabled,
    Parameters.timeout
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getNodeInfoListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Nodes",
  queryParameters: [
    Parameters.apiVersion2,
    Parameters.continuationToken,
    Parameters.nodeStatusFilter,
    Parameters.maxResults,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PagedNodeInfoList
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getNodeInfoOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Nodes/{nodeName}",
  urlParameters: [
    Parameters.nodeName0
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NodeInfo
    },
    204: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getNodeHealthOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Nodes/{nodeName}/$/GetHealth",
  urlParameters: [
    Parameters.nodeName0
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.eventsHealthStateFilter,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NodeHealth
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getNodeHealthUsingPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Nodes/{nodeName}/$/GetHealth",
  urlParameters: [
    Parameters.nodeName0
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.eventsHealthStateFilter,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: [
      "options",
      "clusterHealthPolicy"
    ],
    mapper: Mappers.ClusterHealthPolicy
  },
  responses: {
    200: {
      bodyMapper: Mappers.NodeHealth
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const reportNodeHealthOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Nodes/{nodeName}/$/ReportHealth",
  urlParameters: [
    Parameters.nodeName0
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.immediate,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "healthInformation",
    mapper: {
      ...Mappers.HealthInformation,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getNodeLoadInfoOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Nodes/{nodeName}/$/GetLoadInformation",
  urlParameters: [
    Parameters.nodeName0
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NodeLoadInfo
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const disableNodeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Nodes/{nodeName}/$/Deactivate",
  urlParameters: [
    Parameters.nodeName0
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "deactivationIntentDescription",
    mapper: {
      ...Mappers.DeactivationIntentDescription,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const enableNodeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Nodes/{nodeName}/$/Activate",
  urlParameters: [
    Parameters.nodeName0
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const removeNodeStateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Nodes/{nodeName}/$/RemoveNodeState",
  urlParameters: [
    Parameters.nodeName0
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const restartNodeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Nodes/{nodeName}/$/Restart",
  urlParameters: [
    Parameters.nodeName0
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "restartNodeDescription",
    mapper: {
      ...Mappers.RestartNodeDescription,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const removeConfigurationOverridesOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "Nodes/{nodeName}/$/RemoveConfigurationOverrides",
  urlParameters: [
    Parameters.nodeName0
  ],
  queryParameters: [
    Parameters.apiVersion3,
    Parameters.timeout
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getConfigurationOverridesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Nodes/{nodeName}/$/GetConfigurationOverrides",
  urlParameters: [
    Parameters.nodeName0
  ],
  queryParameters: [
    Parameters.apiVersion3,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConfigParameterOverride"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const addConfigurationParameterOverridesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Nodes/{nodeName}/$/AddConfigurationParameterOverrides",
  urlParameters: [
    Parameters.nodeName0
  ],
  queryParameters: [
    Parameters.apiVersion3,
    Parameters.force0,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "configParameterOverrideList",
    mapper: {
      required: true,
      serializedName: "ConfigParameterOverrideList",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Composite",
            className: "ConfigParameterOverride"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getApplicationTypeInfoListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "ApplicationTypes",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.applicationTypeDefinitionKindFilter,
    Parameters.excludeApplicationParameters,
    Parameters.continuationToken,
    Parameters.maxResults,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PagedApplicationTypeInfoList
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getApplicationTypeInfoListByNameOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "ApplicationTypes/{applicationTypeName}",
  urlParameters: [
    Parameters.applicationTypeName0
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.applicationTypeVersion0,
    Parameters.excludeApplicationParameters,
    Parameters.continuationToken,
    Parameters.maxResults,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PagedApplicationTypeInfoList
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const provisionApplicationTypeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "ApplicationTypes/$/Provision",
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "provisionApplicationTypeDescriptionBaseRequiredBodyParam",
    mapper: {
      ...Mappers.ProvisionApplicationTypeDescriptionBase,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const unprovisionApplicationTypeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "ApplicationTypes/{applicationTypeName}/$/Unprovision",
  urlParameters: [
    Parameters.applicationTypeName0
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "unprovisionApplicationTypeDescriptionInfo",
    mapper: {
      ...Mappers.UnprovisionApplicationTypeDescriptionInfo,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getServiceTypeInfoListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "ApplicationTypes/{applicationTypeName}/$/GetServiceTypes",
  urlParameters: [
    Parameters.applicationTypeName0
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.applicationTypeVersion1,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceTypeInfo"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getServiceTypeInfoByNameOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "ApplicationTypes/{applicationTypeName}/$/GetServiceTypes/{serviceTypeName}",
  urlParameters: [
    Parameters.applicationTypeName0,
    Parameters.serviceTypeName0
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.applicationTypeVersion1,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ServiceTypeInfo
    },
    204: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getServiceManifestOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "ApplicationTypes/{applicationTypeName}/$/GetServiceManifest",
  urlParameters: [
    Parameters.applicationTypeName0
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.applicationTypeVersion1,
    Parameters.serviceManifestName0,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ServiceTypeManifest
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getDeployedServiceTypeInfoListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServiceTypes",
  urlParameters: [
    Parameters.nodeName0,
    Parameters.applicationId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.serviceManifestName1,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeployedServiceTypeInfo"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getDeployedServiceTypeInfoByNameOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServiceTypes/{serviceTypeName}",
  urlParameters: [
    Parameters.nodeName0,
    Parameters.applicationId,
    Parameters.serviceTypeName0
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.serviceManifestName1,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeployedServiceTypeInfo"
            }
          }
        }
      }
    },
    204: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const createApplicationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Applications/$/Create",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "applicationDescription",
    mapper: {
      ...Mappers.ApplicationDescription,
      required: true
    }
  },
  responses: {
    201: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const deleteApplicationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Applications/{applicationId}/$/Delete",
  urlParameters: [
    Parameters.applicationId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.forceRemove,
    Parameters.timeout
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getApplicationLoadInfoOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Applications/{applicationId}/$/GetLoadInformation",
  urlParameters: [
    Parameters.applicationId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationLoadInfo
    },
    204: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getApplicationInfoListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Applications",
  queryParameters: [
    Parameters.apiVersion5,
    Parameters.applicationDefinitionKindFilter,
    Parameters.applicationTypeName1,
    Parameters.excludeApplicationParameters,
    Parameters.continuationToken,
    Parameters.maxResults,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PagedApplicationInfoList
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getApplicationInfoOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Applications/{applicationId}",
  urlParameters: [
    Parameters.applicationId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.excludeApplicationParameters,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationInfo
    },
    204: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getApplicationHealthOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Applications/{applicationId}/$/GetHealth",
  urlParameters: [
    Parameters.applicationId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.eventsHealthStateFilter,
    Parameters.deployedApplicationsHealthStateFilter,
    Parameters.servicesHealthStateFilter,
    Parameters.excludeHealthStatistics,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationHealth
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getApplicationHealthUsingPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Applications/{applicationId}/$/GetHealth",
  urlParameters: [
    Parameters.applicationId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.eventsHealthStateFilter,
    Parameters.deployedApplicationsHealthStateFilter,
    Parameters.servicesHealthStateFilter,
    Parameters.excludeHealthStatistics,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: [
      "options",
      "applicationHealthPolicy"
    ],
    mapper: Mappers.ApplicationHealthPolicy
  },
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationHealth
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const reportApplicationHealthOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Applications/{applicationId}/$/ReportHealth",
  urlParameters: [
    Parameters.applicationId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.immediate,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "healthInformation",
    mapper: {
      ...Mappers.HealthInformation,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const startApplicationUpgradeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Applications/{applicationId}/$/Upgrade",
  urlParameters: [
    Parameters.applicationId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "applicationUpgradeDescription",
    mapper: {
      ...Mappers.ApplicationUpgradeDescription,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getApplicationUpgradeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Applications/{applicationId}/$/GetUpgradeProgress",
  urlParameters: [
    Parameters.applicationId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationUpgradeProgressInfo
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const updateApplicationUpgradeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Applications/{applicationId}/$/UpdateUpgrade",
  urlParameters: [
    Parameters.applicationId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "applicationUpgradeUpdateDescription",
    mapper: {
      ...Mappers.ApplicationUpgradeUpdateDescription,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const resumeApplicationUpgradeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Applications/{applicationId}/$/MoveToNextUpgradeDomain",
  urlParameters: [
    Parameters.applicationId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "resumeApplicationUpgradeDescription",
    mapper: {
      ...Mappers.ResumeApplicationUpgradeDescription,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const rollbackApplicationUpgradeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Applications/{applicationId}/$/RollbackUpgrade",
  urlParameters: [
    Parameters.applicationId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getDeployedApplicationInfoListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Nodes/{nodeName}/$/GetApplications",
  urlParameters: [
    Parameters.nodeName0
  ],
  queryParameters: [
    Parameters.apiVersion5,
    Parameters.timeout,
    Parameters.includeHealthState,
    Parameters.continuationToken,
    Parameters.maxResults
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PagedDeployedApplicationInfoList
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getDeployedApplicationInfoOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Nodes/{nodeName}/$/GetApplications/{applicationId}",
  urlParameters: [
    Parameters.nodeName0,
    Parameters.applicationId
  ],
  queryParameters: [
    Parameters.apiVersion5,
    Parameters.timeout,
    Parameters.includeHealthState
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeployedApplicationInfo
    },
    204: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getDeployedApplicationHealthOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetHealth",
  urlParameters: [
    Parameters.nodeName0,
    Parameters.applicationId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.eventsHealthStateFilter,
    Parameters.deployedServicePackagesHealthStateFilter,
    Parameters.excludeHealthStatistics,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeployedApplicationHealth
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getDeployedApplicationHealthUsingPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetHealth",
  urlParameters: [
    Parameters.nodeName0,
    Parameters.applicationId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.eventsHealthStateFilter,
    Parameters.deployedServicePackagesHealthStateFilter,
    Parameters.excludeHealthStatistics,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: [
      "options",
      "applicationHealthPolicy"
    ],
    mapper: Mappers.ApplicationHealthPolicy
  },
  responses: {
    200: {
      bodyMapper: Mappers.DeployedApplicationHealth
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const reportDeployedApplicationHealthOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Nodes/{nodeName}/$/GetApplications/{applicationId}/$/ReportHealth",
  urlParameters: [
    Parameters.nodeName0,
    Parameters.applicationId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.immediate,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "healthInformation",
    mapper: {
      ...Mappers.HealthInformation,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getApplicationManifestOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "ApplicationTypes/{applicationTypeName}/$/GetApplicationManifest",
  urlParameters: [
    Parameters.applicationTypeName0
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.applicationTypeVersion1,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationTypeManifest
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getServiceInfoListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Applications/{applicationId}/$/GetServices",
  urlParameters: [
    Parameters.applicationId
  ],
  queryParameters: [
    Parameters.serviceTypeName1,
    Parameters.apiVersion0,
    Parameters.continuationToken,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PagedServiceInfoList
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getServiceInfoOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Applications/{applicationId}/$/GetServices/{serviceId}",
  urlParameters: [
    Parameters.applicationId,
    Parameters.serviceId0
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ServiceInfo
    },
    204: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getApplicationNameInfoOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Services/{serviceId}/$/GetApplicationName",
  urlParameters: [
    Parameters.serviceId0
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationNameInfo
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const createServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Applications/{applicationId}/$/GetServices/$/Create",
  urlParameters: [
    Parameters.applicationId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "serviceDescription",
    mapper: {
      ...Mappers.ServiceDescription,
      required: true
    }
  },
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const createServiceFromTemplateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Applications/{applicationId}/$/GetServices/$/CreateFromTemplate",
  urlParameters: [
    Parameters.applicationId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "serviceFromTemplateDescription",
    mapper: {
      ...Mappers.ServiceFromTemplateDescription,
      required: true
    }
  },
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const deleteServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Services/{serviceId}/$/Delete",
  urlParameters: [
    Parameters.serviceId0
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.forceRemove,
    Parameters.timeout
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const updateServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Services/{serviceId}/$/Update",
  urlParameters: [
    Parameters.serviceId0
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "serviceUpdateDescription",
    mapper: {
      ...Mappers.ServiceUpdateDescription,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getServiceDescriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Services/{serviceId}/$/GetDescription",
  urlParameters: [
    Parameters.serviceId0
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ServiceDescription
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getServiceHealthOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Services/{serviceId}/$/GetHealth",
  urlParameters: [
    Parameters.serviceId0
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.eventsHealthStateFilter,
    Parameters.partitionsHealthStateFilter,
    Parameters.excludeHealthStatistics,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ServiceHealth
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getServiceHealthUsingPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Services/{serviceId}/$/GetHealth",
  urlParameters: [
    Parameters.serviceId0
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.eventsHealthStateFilter,
    Parameters.partitionsHealthStateFilter,
    Parameters.excludeHealthStatistics,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: [
      "options",
      "applicationHealthPolicy"
    ],
    mapper: Mappers.ApplicationHealthPolicy
  },
  responses: {
    200: {
      bodyMapper: Mappers.ServiceHealth
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const reportServiceHealthOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Services/{serviceId}/$/ReportHealth",
  urlParameters: [
    Parameters.serviceId0
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.immediate,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "healthInformation",
    mapper: {
      ...Mappers.HealthInformation,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const resolveServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Services/{serviceId}/$/ResolvePartition",
  urlParameters: [
    Parameters.serviceId0
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.partitionKeyType,
    Parameters.partitionKeyValue,
    Parameters.previousRspVersion,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ResolvedServicePartition
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getUnplacedReplicaInformationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Services/{serviceId}/$/GetUnplacedReplicaInformation",
  urlParameters: [
    Parameters.serviceId0
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.partitionId0,
    Parameters.onlyQueryPrimaries,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.UnplacedReplicaInformation
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getPartitionInfoListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Services/{serviceId}/$/GetPartitions",
  urlParameters: [
    Parameters.serviceId0
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.continuationToken,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PagedServicePartitionInfoList
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getPartitionInfoOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Partitions/{partitionId}",
  urlParameters: [
    Parameters.partitionId1
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ServicePartitionInfo
    },
    204: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getServiceNameInfoOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Partitions/{partitionId}/$/GetServiceName",
  urlParameters: [
    Parameters.partitionId1
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ServiceNameInfo
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getPartitionHealthOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Partitions/{partitionId}/$/GetHealth",
  urlParameters: [
    Parameters.partitionId1
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.eventsHealthStateFilter,
    Parameters.replicasHealthStateFilter,
    Parameters.excludeHealthStatistics,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PartitionHealth
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getPartitionHealthUsingPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Partitions/{partitionId}/$/GetHealth",
  urlParameters: [
    Parameters.partitionId1
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.eventsHealthStateFilter,
    Parameters.replicasHealthStateFilter,
    Parameters.excludeHealthStatistics,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: [
      "options",
      "applicationHealthPolicy"
    ],
    mapper: Mappers.ApplicationHealthPolicy
  },
  responses: {
    200: {
      bodyMapper: Mappers.PartitionHealth
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const reportPartitionHealthOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Partitions/{partitionId}/$/ReportHealth",
  urlParameters: [
    Parameters.partitionId1
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.immediate,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "healthInformation",
    mapper: {
      ...Mappers.HealthInformation,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getPartitionLoadInformationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Partitions/{partitionId}/$/GetLoadInformation",
  urlParameters: [
    Parameters.partitionId1
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PartitionLoadInformation
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const resetPartitionLoadOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Partitions/{partitionId}/$/ResetLoad",
  urlParameters: [
    Parameters.partitionId1
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const recoverPartitionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Partitions/{partitionId}/$/Recover",
  urlParameters: [
    Parameters.partitionId1
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const recoverServicePartitionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Services/$/{serviceId}/$/GetPartitions/$/Recover",
  urlParameters: [
    Parameters.serviceId0
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const recoverSystemPartitionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "$/RecoverSystemPartitions",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const recoverAllPartitionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "$/RecoverAllPartitions",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const movePrimaryReplicaOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Partitions/{partitionId}/$/MovePrimaryReplica",
  urlParameters: [
    Parameters.partitionId1
  ],
  queryParameters: [
    Parameters.apiVersion6,
    Parameters.nodeName1,
    Parameters.ignoreConstraints,
    Parameters.timeout
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const moveSecondaryReplicaOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Partitions/{partitionId}/$/MoveSecondaryReplica",
  urlParameters: [
    Parameters.partitionId1
  ],
  queryParameters: [
    Parameters.apiVersion6,
    Parameters.currentNodeName,
    Parameters.newNodeName,
    Parameters.ignoreConstraints,
    Parameters.timeout
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const createRepairTaskOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "$/CreateRepairTask",
  queryParameters: [
    Parameters.apiVersion0
  ],
  requestBody: {
    parameterPath: "repairTask",
    mapper: {
      ...Mappers.RepairTask,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.RepairTaskUpdateInfo
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const cancelRepairTaskOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "$/CancelRepairTask",
  queryParameters: [
    Parameters.apiVersion0
  ],
  requestBody: {
    parameterPath: "repairTaskCancelDescription",
    mapper: {
      ...Mappers.RepairTaskCancelDescription,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.RepairTaskUpdateInfo
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const deleteRepairTaskOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "$/DeleteRepairTask",
  queryParameters: [
    Parameters.apiVersion0
  ],
  requestBody: {
    parameterPath: "repairTaskDeleteDescription",
    mapper: {
      ...Mappers.RepairTaskDeleteDescription,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getRepairTaskListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "$/GetRepairTaskList",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.taskIdFilter,
    Parameters.stateFilter0,
    Parameters.executorFilter
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RepairTask"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const forceApproveRepairTaskOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "$/ForceApproveRepairTask",
  queryParameters: [
    Parameters.apiVersion0
  ],
  requestBody: {
    parameterPath: "repairTaskApproveDescription",
    mapper: {
      ...Mappers.RepairTaskApproveDescription,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.RepairTaskUpdateInfo
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const updateRepairTaskHealthPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "$/UpdateRepairTaskHealthPolicy",
  queryParameters: [
    Parameters.apiVersion0
  ],
  requestBody: {
    parameterPath: "repairTaskUpdateHealthPolicyDescription",
    mapper: {
      ...Mappers.RepairTaskUpdateHealthPolicyDescription,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.RepairTaskUpdateInfo
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const updateRepairExecutionStateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "$/UpdateRepairExecutionState",
  queryParameters: [
    Parameters.apiVersion0
  ],
  requestBody: {
    parameterPath: "repairTask",
    mapper: {
      ...Mappers.RepairTask,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.RepairTaskUpdateInfo
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getReplicaInfoListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Partitions/{partitionId}/$/GetReplicas",
  urlParameters: [
    Parameters.partitionId1
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.continuationToken,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PagedReplicaInfoList
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getReplicaInfoOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Partitions/{partitionId}/$/GetReplicas/{replicaId}",
  urlParameters: [
    Parameters.partitionId1,
    Parameters.replicaId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ReplicaInfo
    },
    204: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getReplicaHealthOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/GetHealth",
  urlParameters: [
    Parameters.partitionId1,
    Parameters.replicaId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.eventsHealthStateFilter,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ReplicaHealth
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getReplicaHealthUsingPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/GetHealth",
  urlParameters: [
    Parameters.partitionId1,
    Parameters.replicaId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.eventsHealthStateFilter,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: [
      "options",
      "applicationHealthPolicy"
    ],
    mapper: Mappers.ApplicationHealthPolicy
  },
  responses: {
    200: {
      bodyMapper: Mappers.ReplicaHealth
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const reportReplicaHealthOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/ReportHealth",
  urlParameters: [
    Parameters.partitionId1,
    Parameters.replicaId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.serviceKind,
    Parameters.immediate,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "healthInformation",
    mapper: {
      ...Mappers.HealthInformation,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getDeployedServiceReplicaInfoListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetReplicas",
  urlParameters: [
    Parameters.nodeName0,
    Parameters.applicationId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.partitionId0,
    Parameters.serviceManifestName1,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeployedServiceReplicaInfo"
            }
          }
        }
      }
    },
    204: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getDeployedServiceReplicaDetailInfoOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas/{replicaId}/$/GetDetail",
  urlParameters: [
    Parameters.nodeName0,
    Parameters.partitionId1,
    Parameters.replicaId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeployedServiceReplicaDetailInfo
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getDeployedServiceReplicaDetailInfoByPartitionIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas",
  urlParameters: [
    Parameters.nodeName0,
    Parameters.partitionId1
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeployedServiceReplicaDetailInfo
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const restartReplicaOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas/{replicaId}/$/Restart",
  urlParameters: [
    Parameters.nodeName0,
    Parameters.partitionId1,
    Parameters.replicaId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const removeReplicaOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Nodes/{nodeName}/$/GetPartitions/{partitionId}/$/GetReplicas/{replicaId}/$/Delete",
  urlParameters: [
    Parameters.nodeName0,
    Parameters.partitionId1,
    Parameters.replicaId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.forceRemove,
    Parameters.timeout
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getDeployedServicePackageInfoListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages",
  urlParameters: [
    Parameters.nodeName0,
    Parameters.applicationId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeployedServicePackageInfo"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getDeployedServicePackageInfoListByNameOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}",
  urlParameters: [
    Parameters.nodeName0,
    Parameters.applicationId,
    Parameters.servicePackageName
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeployedServicePackageInfo"
            }
          }
        }
      }
    },
    204: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getDeployedServicePackageHealthOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}/$/GetHealth",
  urlParameters: [
    Parameters.nodeName0,
    Parameters.applicationId,
    Parameters.servicePackageName
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.eventsHealthStateFilter,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeployedServicePackageHealth
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getDeployedServicePackageHealthUsingPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}/$/GetHealth",
  urlParameters: [
    Parameters.nodeName0,
    Parameters.applicationId,
    Parameters.servicePackageName
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.eventsHealthStateFilter,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: [
      "options",
      "applicationHealthPolicy"
    ],
    mapper: Mappers.ApplicationHealthPolicy
  },
  responses: {
    200: {
      bodyMapper: Mappers.DeployedServicePackageHealth
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const reportDeployedServicePackageHealthOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetServicePackages/{servicePackageName}/$/ReportHealth",
  urlParameters: [
    Parameters.nodeName0,
    Parameters.applicationId,
    Parameters.servicePackageName
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.immediate,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "healthInformation",
    mapper: {
      ...Mappers.HealthInformation,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const deployServicePackageToNodeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Nodes/{nodeName}/$/DeployServicePackage",
  urlParameters: [
    Parameters.nodeName0
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "deployServicePackageToNodeDescription",
    mapper: {
      ...Mappers.DeployServicePackageToNodeDescription,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getDeployedCodePackageInfoListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages",
  urlParameters: [
    Parameters.nodeName0,
    Parameters.applicationId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.serviceManifestName1,
    Parameters.codePackageName0,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeployedCodePackageInfo"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const restartDeployedCodePackageOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages/$/Restart",
  urlParameters: [
    Parameters.nodeName0,
    Parameters.applicationId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "restartDeployedCodePackageDescription",
    mapper: {
      ...Mappers.RestartDeployedCodePackageDescription,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getContainerLogsDeployedOnNodeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages/$/ContainerLogs",
  urlParameters: [
    Parameters.nodeName0,
    Parameters.applicationId
  ],
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.serviceManifestName0,
    Parameters.codePackageName1,
    Parameters.tail,
    Parameters.previous,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ContainerLogs
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const invokeContainerApiOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Nodes/{nodeName}/$/GetApplications/{applicationId}/$/GetCodePackages/$/ContainerApi",
  urlParameters: [
    Parameters.nodeName0,
    Parameters.applicationId
  ],
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.serviceManifestName0,
    Parameters.codePackageName1,
    Parameters.codePackageInstanceId,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "containerApiRequestBody",
    mapper: {
      ...Mappers.ContainerApiRequestBody,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ContainerApiResponse
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const createComposeDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "ComposeDeployments/$/Create",
  queryParameters: [
    Parameters.apiVersion7,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "createComposeDeploymentDescription",
    mapper: {
      ...Mappers.CreateComposeDeploymentDescription,
      required: true
    }
  },
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getComposeDeploymentStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "ComposeDeployments/{deploymentName}",
  urlParameters: [
    Parameters.deploymentName
  ],
  queryParameters: [
    Parameters.apiVersion7,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ComposeDeploymentStatusInfo
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getComposeDeploymentStatusListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "ComposeDeployments",
  queryParameters: [
    Parameters.apiVersion7,
    Parameters.continuationToken,
    Parameters.maxResults,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PagedComposeDeploymentStatusInfoList
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getComposeDeploymentUpgradeProgressOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "ComposeDeployments/{deploymentName}/$/GetUpgradeProgress",
  urlParameters: [
    Parameters.deploymentName
  ],
  queryParameters: [
    Parameters.apiVersion7,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ComposeDeploymentUpgradeProgressInfo
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const removeComposeDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "ComposeDeployments/{deploymentName}/$/Delete",
  urlParameters: [
    Parameters.deploymentName
  ],
  queryParameters: [
    Parameters.apiVersion7,
    Parameters.timeout
  ],
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const startComposeDeploymentUpgradeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "ComposeDeployments/{deploymentName}/$/Upgrade",
  urlParameters: [
    Parameters.deploymentName
  ],
  queryParameters: [
    Parameters.apiVersion7,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "composeDeploymentUpgradeDescription",
    mapper: {
      ...Mappers.ComposeDeploymentUpgradeDescription,
      required: true
    }
  },
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const startRollbackComposeDeploymentUpgradeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "ComposeDeployments/{deploymentName}/$/RollbackUpgrade",
  urlParameters: [
    Parameters.deploymentName
  ],
  queryParameters: [
    Parameters.apiVersion8,
    Parameters.timeout
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getChaosOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Tools/Chaos",
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Chaos
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const startChaosOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Tools/Chaos/$/Start",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "chaosParameters",
    mapper: {
      ...Mappers.ChaosParameters,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const stopChaosOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Tools/Chaos/$/Stop",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getChaosEventsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Tools/Chaos/Events",
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.continuationToken,
    Parameters.startTimeUtc0,
    Parameters.endTimeUtc0,
    Parameters.maxResults,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ChaosEventsSegment
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getChaosScheduleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Tools/Chaos/Schedule",
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ChaosScheduleDescription
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const postChaosScheduleOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Tools/Chaos/Schedule",
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "chaosSchedule",
    mapper: {
      ...Mappers.ChaosScheduleDescription,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const uploadFileOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "ImageStore/{contentPath}",
  urlParameters: [
    Parameters.contentPath
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getImageStoreContentOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "ImageStore/{contentPath}",
  urlParameters: [
    Parameters.contentPath
  ],
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ImageStoreContent
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const deleteImageStoreContentOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "ImageStore/{contentPath}",
  urlParameters: [
    Parameters.contentPath
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getImageStoreRootContentOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "ImageStore",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ImageStoreContent
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const copyImageStoreContentOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "ImageStore/$/Copy",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "imageStoreCopyDescription",
    mapper: {
      ...Mappers.ImageStoreCopyDescription,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const deleteImageStoreUploadSessionOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "ImageStore/$/DeleteUploadSession",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.sessionId,
    Parameters.timeout
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const commitImageStoreUploadSessionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "ImageStore/$/CommitUploadSession",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.sessionId,
    Parameters.timeout
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getImageStoreUploadSessionByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "ImageStore/$/GetUploadSession",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.sessionId,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.UploadSession
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getImageStoreUploadSessionByPathOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "ImageStore/{contentPath}/$/GetUploadSession",
  urlParameters: [
    Parameters.contentPath
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.UploadSession
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const uploadFileChunkOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "ImageStore/{contentPath}/$/UploadChunk",
  urlParameters: [
    Parameters.contentPath
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.sessionId,
    Parameters.timeout
  ],
  headerParameters: [
    Parameters.contentRange
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getImageStoreRootFolderSizeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "ImageStore/$/FolderSize",
  queryParameters: [
    Parameters.apiVersion6,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FolderSizeInfo
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getImageStoreFolderSizeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "ImageStore/{contentPath}/$/FolderSize",
  urlParameters: [
    Parameters.contentPath
  ],
  queryParameters: [
    Parameters.apiVersion6,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FolderSizeInfo
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getImageStoreInfoOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "ImageStore/$/Info",
  queryParameters: [
    Parameters.apiVersion6,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ImageStoreInfo
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const invokeInfrastructureCommandOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "$/InvokeInfrastructureCommand",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.command,
    Parameters.serviceId1,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const invokeInfrastructureQueryOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "$/InvokeInfrastructureQuery",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.command,
    Parameters.serviceId1,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const startDataLossOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/StartDataLoss",
  urlParameters: [
    Parameters.serviceId0,
    Parameters.partitionId1
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.operationId,
    Parameters.dataLossMode,
    Parameters.timeout
  ],
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getDataLossProgressOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/GetDataLossProgress",
  urlParameters: [
    Parameters.serviceId0,
    Parameters.partitionId1
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.operationId,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PartitionDataLossProgress
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const startQuorumLossOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/StartQuorumLoss",
  urlParameters: [
    Parameters.serviceId0,
    Parameters.partitionId1
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.operationId,
    Parameters.quorumLossMode,
    Parameters.quorumLossDuration,
    Parameters.timeout
  ],
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getQuorumLossProgressOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/GetQuorumLossProgress",
  urlParameters: [
    Parameters.serviceId0,
    Parameters.partitionId1
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.operationId,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PartitionQuorumLossProgress
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const startPartitionRestartOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/StartRestart",
  urlParameters: [
    Parameters.serviceId0,
    Parameters.partitionId1
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.operationId,
    Parameters.restartPartitionMode,
    Parameters.timeout
  ],
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getPartitionRestartProgressOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Faults/Services/{serviceId}/$/GetPartitions/{partitionId}/$/GetRestartProgress",
  urlParameters: [
    Parameters.serviceId0,
    Parameters.partitionId1
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.operationId,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PartitionRestartProgress
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const startNodeTransitionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Faults/Nodes/{nodeName}/$/StartTransition/",
  urlParameters: [
    Parameters.nodeName0
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.operationId,
    Parameters.nodeTransitionType,
    Parameters.nodeInstanceId,
    Parameters.stopDurationInSeconds,
    Parameters.timeout
  ],
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getNodeTransitionProgressOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Faults/Nodes/{nodeName}/$/GetTransitionProgress",
  urlParameters: [
    Parameters.nodeName0
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.operationId,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NodeTransitionProgress
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getFaultOperationListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Faults/",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.typeFilter,
    Parameters.stateFilter1,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationStatus"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const cancelOperationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Faults/$/Cancel",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.operationId,
    Parameters.force1,
    Parameters.timeout
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const createBackupPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "BackupRestore/BackupPolicies/$/Create",
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "backupPolicyDescription",
    mapper: {
      ...Mappers.BackupPolicyDescription,
      required: true
    }
  },
  responses: {
    201: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const deleteBackupPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "BackupRestore/BackupPolicies/{backupPolicyName}/$/Delete",
  urlParameters: [
    Parameters.backupPolicyName
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.timeout
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getBackupPolicyListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "BackupRestore/BackupPolicies",
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.continuationToken,
    Parameters.maxResults,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PagedBackupPolicyDescriptionList
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getBackupPolicyByNameOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "BackupRestore/BackupPolicies/{backupPolicyName}",
  urlParameters: [
    Parameters.backupPolicyName
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BackupPolicyDescription
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getAllEntitiesBackedUpByPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "BackupRestore/BackupPolicies/{backupPolicyName}/$/GetBackupEnabledEntities",
  urlParameters: [
    Parameters.backupPolicyName
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.continuationToken,
    Parameters.maxResults,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PagedBackupEntityList
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const updateBackupPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "BackupRestore/BackupPolicies/{backupPolicyName}/$/Update",
  urlParameters: [
    Parameters.backupPolicyName
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "backupPolicyDescription",
    mapper: {
      ...Mappers.BackupPolicyDescription,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const enableApplicationBackupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Applications/{applicationId}/$/EnableBackup",
  urlParameters: [
    Parameters.applicationId
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "enableBackupDescription",
    mapper: {
      ...Mappers.EnableBackupDescription,
      required: true
    }
  },
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const disableApplicationBackupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Applications/{applicationId}/$/DisableBackup",
  urlParameters: [
    Parameters.applicationId
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: [
      "options",
      "disableBackupDescription"
    ],
    mapper: Mappers.DisableBackupDescription
  },
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getApplicationBackupConfigurationInfoOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Applications/{applicationId}/$/GetBackupConfigurationInfo",
  urlParameters: [
    Parameters.applicationId
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.continuationToken,
    Parameters.maxResults,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PagedBackupConfigurationInfoList
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getApplicationBackupListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Applications/{applicationId}/$/GetBackups",
  urlParameters: [
    Parameters.applicationId
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.timeout,
    Parameters.latest,
    Parameters.startDateTimeFilter,
    Parameters.endDateTimeFilter,
    Parameters.continuationToken,
    Parameters.maxResults
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PagedBackupInfoList
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const suspendApplicationBackupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Applications/{applicationId}/$/SuspendBackup",
  urlParameters: [
    Parameters.applicationId
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.timeout
  ],
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const resumeApplicationBackupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Applications/{applicationId}/$/ResumeBackup",
  urlParameters: [
    Parameters.applicationId
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.timeout
  ],
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const enableServiceBackupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Services/{serviceId}/$/EnableBackup",
  urlParameters: [
    Parameters.serviceId0
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "enableBackupDescription",
    mapper: {
      ...Mappers.EnableBackupDescription,
      required: true
    }
  },
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const disableServiceBackupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Services/{serviceId}/$/DisableBackup",
  urlParameters: [
    Parameters.serviceId0
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: [
      "options",
      "disableBackupDescription"
    ],
    mapper: Mappers.DisableBackupDescription
  },
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getServiceBackupConfigurationInfoOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Services/{serviceId}/$/GetBackupConfigurationInfo",
  urlParameters: [
    Parameters.serviceId0
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.continuationToken,
    Parameters.maxResults,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PagedBackupConfigurationInfoList
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getServiceBackupListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Services/{serviceId}/$/GetBackups",
  urlParameters: [
    Parameters.serviceId0
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.timeout,
    Parameters.latest,
    Parameters.startDateTimeFilter,
    Parameters.endDateTimeFilter,
    Parameters.continuationToken,
    Parameters.maxResults
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PagedBackupInfoList
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const suspendServiceBackupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Services/{serviceId}/$/SuspendBackup",
  urlParameters: [
    Parameters.serviceId0
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.timeout
  ],
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const resumeServiceBackupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Services/{serviceId}/$/ResumeBackup",
  urlParameters: [
    Parameters.serviceId0
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.timeout
  ],
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const enablePartitionBackupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Partitions/{partitionId}/$/EnableBackup",
  urlParameters: [
    Parameters.partitionId1
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "enableBackupDescription",
    mapper: {
      ...Mappers.EnableBackupDescription,
      required: true
    }
  },
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const disablePartitionBackupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Partitions/{partitionId}/$/DisableBackup",
  urlParameters: [
    Parameters.partitionId1
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: [
      "options",
      "disableBackupDescription"
    ],
    mapper: Mappers.DisableBackupDescription
  },
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getPartitionBackupConfigurationInfoOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Partitions/{partitionId}/$/GetBackupConfigurationInfo",
  urlParameters: [
    Parameters.partitionId1
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PartitionBackupConfigurationInfo
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getPartitionBackupListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Partitions/{partitionId}/$/GetBackups",
  urlParameters: [
    Parameters.partitionId1
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.timeout,
    Parameters.latest,
    Parameters.startDateTimeFilter,
    Parameters.endDateTimeFilter
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PagedBackupInfoList
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const suspendPartitionBackupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Partitions/{partitionId}/$/SuspendBackup",
  urlParameters: [
    Parameters.partitionId1
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.timeout
  ],
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const resumePartitionBackupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Partitions/{partitionId}/$/ResumeBackup",
  urlParameters: [
    Parameters.partitionId1
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.timeout
  ],
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const backupPartitionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Partitions/{partitionId}/$/Backup",
  urlParameters: [
    Parameters.partitionId1
  ],
  queryParameters: [
    Parameters.backupTimeout,
    Parameters.apiVersion1,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: [
      "options",
      "backupPartitionDescription"
    ],
    mapper: Mappers.BackupPartitionDescription
  },
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getPartitionBackupProgressOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Partitions/{partitionId}/$/GetBackupProgress",
  urlParameters: [
    Parameters.partitionId1
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BackupProgressInfo
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const restorePartitionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Partitions/{partitionId}/$/Restore",
  urlParameters: [
    Parameters.partitionId1
  ],
  queryParameters: [
    Parameters.restoreTimeout,
    Parameters.apiVersion1,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "restorePartitionDescription",
    mapper: {
      ...Mappers.RestorePartitionDescription,
      required: true
    }
  },
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getPartitionRestoreProgressOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Partitions/{partitionId}/$/GetRestoreProgress",
  urlParameters: [
    Parameters.partitionId1
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RestoreProgressInfo
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getBackupsFromBackupLocationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "BackupRestore/$/GetBackups",
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.timeout,
    Parameters.continuationToken,
    Parameters.maxResults
  ],
  requestBody: {
    parameterPath: "getBackupByStorageQueryDescription",
    mapper: {
      ...Mappers.GetBackupByStorageQueryDescription,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PagedBackupInfoList
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const createNameOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Names/$/Create",
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "nameDescription",
    mapper: {
      ...Mappers.NameDescription,
      required: true
    }
  },
  responses: {
    201: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getNameExistsInfoOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Names/{nameId}",
  urlParameters: [
    Parameters.nameId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const deleteNameOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "Names/{nameId}",
  urlParameters: [
    Parameters.nameId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getSubNameInfoListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Names/{nameId}/$/GetSubNames",
  urlParameters: [
    Parameters.nameId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.recursive,
    Parameters.continuationToken,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PagedSubNameInfoList
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getPropertyInfoListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Names/{nameId}/$/GetProperties",
  urlParameters: [
    Parameters.nameId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.includeValues,
    Parameters.continuationToken,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PagedPropertyInfoList
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const putPropertyOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "Names/{nameId}/$/GetProperty",
  urlParameters: [
    Parameters.nameId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "propertyDescription",
    mapper: {
      ...Mappers.PropertyDescription,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getPropertyInfoOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Names/{nameId}/$/GetProperty",
  urlParameters: [
    Parameters.nameId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.propertyName,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PropertyInfo
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const deletePropertyOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "Names/{nameId}/$/GetProperty",
  urlParameters: [
    Parameters.nameId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.propertyName,
    Parameters.timeout
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const submitPropertyBatchOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Names/{nameId}/$/GetProperties/$/SubmitBatch",
  urlParameters: [
    Parameters.nameId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.timeout
  ],
  requestBody: {
    parameterPath: "propertyBatchDescriptionList",
    mapper: {
      ...Mappers.PropertyBatchDescriptionList,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SuccessfulPropertyBatchInfo
    },
    409: {
      bodyMapper: Mappers.FailedPropertyBatchInfo
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getClusterEventListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "EventsStore/Cluster/Events",
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.timeout,
    Parameters.startTimeUtc1,
    Parameters.endTimeUtc1,
    Parameters.eventsTypesFilter,
    Parameters.excludeAnalysisEvents,
    Parameters.skipCorrelationLookup
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClusterEvent"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getContainersEventListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "EventsStore/Containers/Events",
  queryParameters: [
    Parameters.apiVersion9,
    Parameters.timeout,
    Parameters.startTimeUtc1,
    Parameters.endTimeUtc1,
    Parameters.eventsTypesFilter,
    Parameters.excludeAnalysisEvents,
    Parameters.skipCorrelationLookup
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContainerInstanceEvent"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getNodeEventListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "EventsStore/Nodes/{nodeName}/$/Events",
  urlParameters: [
    Parameters.nodeName0
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.timeout,
    Parameters.startTimeUtc1,
    Parameters.endTimeUtc1,
    Parameters.eventsTypesFilter,
    Parameters.excludeAnalysisEvents,
    Parameters.skipCorrelationLookup
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NodeEvent"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getNodesEventListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "EventsStore/Nodes/Events",
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.timeout,
    Parameters.startTimeUtc1,
    Parameters.endTimeUtc1,
    Parameters.eventsTypesFilter,
    Parameters.excludeAnalysisEvents,
    Parameters.skipCorrelationLookup
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NodeEvent"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getApplicationEventListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "EventsStore/Applications/{applicationId}/$/Events",
  urlParameters: [
    Parameters.applicationId
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.timeout,
    Parameters.startTimeUtc1,
    Parameters.endTimeUtc1,
    Parameters.eventsTypesFilter,
    Parameters.excludeAnalysisEvents,
    Parameters.skipCorrelationLookup
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationEvent"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getApplicationsEventListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "EventsStore/Applications/Events",
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.timeout,
    Parameters.startTimeUtc1,
    Parameters.endTimeUtc1,
    Parameters.eventsTypesFilter,
    Parameters.excludeAnalysisEvents,
    Parameters.skipCorrelationLookup
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationEvent"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getServiceEventListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "EventsStore/Services/{serviceId}/$/Events",
  urlParameters: [
    Parameters.serviceId0
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.timeout,
    Parameters.startTimeUtc1,
    Parameters.endTimeUtc1,
    Parameters.eventsTypesFilter,
    Parameters.excludeAnalysisEvents,
    Parameters.skipCorrelationLookup
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceEvent"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getServicesEventListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "EventsStore/Services/Events",
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.timeout,
    Parameters.startTimeUtc1,
    Parameters.endTimeUtc1,
    Parameters.eventsTypesFilter,
    Parameters.excludeAnalysisEvents,
    Parameters.skipCorrelationLookup
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceEvent"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getPartitionEventListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "EventsStore/Partitions/{partitionId}/$/Events",
  urlParameters: [
    Parameters.partitionId1
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.timeout,
    Parameters.startTimeUtc1,
    Parameters.endTimeUtc1,
    Parameters.eventsTypesFilter,
    Parameters.excludeAnalysisEvents,
    Parameters.skipCorrelationLookup
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PartitionEvent"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getPartitionsEventListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "EventsStore/Partitions/Events",
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.timeout,
    Parameters.startTimeUtc1,
    Parameters.endTimeUtc1,
    Parameters.eventsTypesFilter,
    Parameters.excludeAnalysisEvents,
    Parameters.skipCorrelationLookup
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PartitionEvent"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getPartitionReplicaEventListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "EventsStore/Partitions/{partitionId}/$/Replicas/{replicaId}/$/Events",
  urlParameters: [
    Parameters.partitionId1,
    Parameters.replicaId
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.timeout,
    Parameters.startTimeUtc1,
    Parameters.endTimeUtc1,
    Parameters.eventsTypesFilter,
    Parameters.excludeAnalysisEvents,
    Parameters.skipCorrelationLookup
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReplicaEvent"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getPartitionReplicasEventListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "EventsStore/Partitions/{partitionId}/$/Replicas/Events",
  urlParameters: [
    Parameters.partitionId1
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.timeout,
    Parameters.startTimeUtc1,
    Parameters.endTimeUtc1,
    Parameters.eventsTypesFilter,
    Parameters.excludeAnalysisEvents,
    Parameters.skipCorrelationLookup
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReplicaEvent"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

const getCorrelatedEventListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "EventsStore/CorrelatedEvents/{eventInstanceId}/$/Events",
  urlParameters: [
    Parameters.eventInstanceId
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.timeout
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FabricEvent"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.FabricError
    }
  },
  serializer
};

export {
  ServiceFabricClient,
  ServiceFabricClientContext,
  Models as ServiceFabricModels,
  Mappers as ServiceFabricMappers
};
export * from "./operations";
