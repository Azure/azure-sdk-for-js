/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };


/**
 * @interface
 * An interface representing QueryRequestOptions.
 * The options for query evaluation
 *
 */
export interface QueryRequestOptions {
  /**
   * @member {string} [skipToken] Continuation token for pagination, capturing
   * the next page size and offset, as well as the context of the query.
   */
  skipToken?: string;
  /**
   * @member {number} [top] The maximum number of rows that the query should
   * return. Overrides the page size when ```$skipToken``` property is present.
   */
  top?: number;
  /**
   * @member {number} [skip] The number of rows to skip from the beginning of
   * the results. Overrides the next page offset when ```$skipToken``` property
   * is present.
   */
  skip?: number;
}

/**
 * @interface
 * An interface representing FacetRequestOptions.
 * The options for facet evaluation
 *
 */
export interface FacetRequestOptions {
  /**
   * @member {string} [sortBy] The column name or query expression to sort on.
   * Defaults to count if not present.
   */
  sortBy?: string;
  /**
   * @member {FacetSortOrder} [sortOrder] The sorting order by the selected
   * column (count by default). Possible values include: 'asc', 'desc'. Default
   * value: 'desc' .
   */
  sortOrder?: FacetSortOrder;
  /**
   * @member {string} [filter] Specifies the filter condition for the 'where'
   * clause which will be run on main query's result, just before the actual
   * faceting.
   */
  filter?: string;
  /**
   * @member {number} [top] The maximum number of facet rows that should be
   * returned.
   */
  top?: number;
}

/**
 * @interface
 * An interface representing FacetRequest.
 * A request to compute additional statistics (facets) over the query results.
 *
 */
export interface FacetRequest {
  /**
   * @member {string} expression The column or list of columns to summarize by
   */
  expression: string;
  /**
   * @member {FacetRequestOptions} [options] The options for facet evaluation
   */
  options?: FacetRequestOptions;
}

/**
 * @interface
 * An interface representing QueryRequest.
 * Describes a query to be executed.
 *
 */
export interface QueryRequest {
  /**
   * @member {string[]} subscriptions Azure subscriptions against which to
   * execute the query.
   */
  subscriptions: string[];
  /**
   * @member {string} query The resources query.
   */
  query: string;
  /**
   * @member {QueryRequestOptions} [options] The query evaluation options
   */
  options?: QueryRequestOptions;
  /**
   * @member {FacetRequest[]} [facets] An array of facet requests to be
   * computed against the query result.
   */
  facets?: FacetRequest[];
}

/**
 * @interface
 * An interface representing Column.
 * Query result column descriptor.
 *
 */
export interface Column {
  /**
   * @member {string} name Column name.
   */
  name: string;
  /**
   * @member {ColumnDataType} type Column data type. Possible values include:
   * 'string', 'integer', 'number', 'boolean', 'object'
   */
  type: ColumnDataType;
}

/**
 * @interface
 * An interface representing Table.
 * Query output in tabular format.
 *
 */
export interface Table {
  /**
   * @member {Column[]} columns Query result column descriptors.
   */
  columns: Column[];
  /**
   * @member {any[][]} rows Query result rows.
   */
  rows: any[][];
}

/**
 * Contains the possible cases for Facet.
 */
export type FacetUnion = Facet | FacetResult | FacetError;

/**
 * @interface
 * An interface representing Facet.
 * A facet containing additional statistics on the response of a query. Can be
 * either FacetResult or FacetError.
 *
 */
export interface Facet {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "Facet";
  /**
   * @member {string} expression Facet expression, same as in the corresponding
   * facet request.
   */
  expression: string;
}

/**
 * @interface
 * An interface representing QueryResponse.
 * Query result.
 *
 */
export interface QueryResponse {
  /**
   * @member {number} totalRecords Number of total records matching the query.
   */
  totalRecords: number;
  /**
   * @member {number} count Number of records returned in the current response.
   * In the case of paging, this is the number of records in the current page.
   */
  count: number;
  /**
   * @member {ResultTruncated} resultTruncated Indicates whether the query
   * results are truncated. Possible values include: 'true', 'false'
   */
  resultTruncated: ResultTruncated;
  /**
   * @member {string} [skipToken] When present, the value can be passed to a
   * subsequent query call (together with the same query and subscriptions used
   * in the current request) to retrieve the next page of data.
   */
  skipToken?: string;
  /**
   * @member {Table} data Query output in tabular format.
   */
  data: Table;
  /**
   * @member {FacetUnion[]} [facets] Query facets.
   */
  facets?: FacetUnion[];
}

/**
 * @interface
 * An interface representing FacetResult.
 * Successfully executed facet containing additional statistics on the response
 * of a query.
 *
 */
export interface FacetResult {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "FacetResult";
  /**
   * @member {string} expression Facet expression, same as in the corresponding
   * facet request.
   */
  expression: string;
  /**
   * @member {number} totalRecords Number of total records in the facet
   * results.
   */
  totalRecords: number;
  /**
   * @member {number} count Number of records returned in the facet response.
   */
  count: number;
  /**
   * @member {Table} data A table containing the desired facets. Only present
   * if the facet is valid.
   */
  data: Table;
}

/**
 * @interface
 * An interface representing ErrorDetails.
 * @summary Error details.
 *
 */
export interface ErrorDetails {
  /**
   * @member {string} code Error code identifying the specific error.
   */
  code: string;
  /**
   * @member {string} message A human readable error message.
   */
  message: string;
  /**
   * @property Describes unknown properties. The value of an unknown property
   * can be of "any" type.
   */
  [property: string]: any;
}

/**
 * @interface
 * An interface representing FacetError.
 * A facet whose execution resulted in an error.
 *
 */
export interface FacetError {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "FacetError";
  /**
   * @member {string} expression Facet expression, same as in the corresponding
   * facet request.
   */
  expression: string;
  /**
   * @member {ErrorDetails[]} errors An array containing detected facet errors
   * with details.
   */
  errors: ErrorDetails[];
}

/**
 * @interface
 * An interface representing ErrorModel.
 * @summary Error info.
 *
 * Error details.
 *
 */
export interface ErrorModel {
  /**
   * @member {string} code Error code identifying the specific error.
   */
  code: string;
  /**
   * @member {string} message A human readable error message.
   */
  message: string;
  /**
   * @member {ErrorDetails[]} [details] Error details
   */
  details?: ErrorDetails[];
}

/**
 * @interface
 * An interface representing ErrorResponse.
 * @summary Error response.
 *
 * An error response from the API.
 *
 */
export interface ErrorResponse {
  /**
   * @member {ErrorModel} error Error information.
   */
  error: ErrorModel;
}

/**
 * @interface
 * An interface representing OperationDisplay.
 * Display metadata associated with the operation.
 *
 */
export interface OperationDisplay {
  /**
   * @member {string} [provider] Service provider: Microsoft Resource Graph.
   */
  provider?: string;
  /**
   * @member {string} [resource] Resource on which the operation is performed
   * etc.
   */
  resource?: string;
  /**
   * @member {string} [operation] Type of operation: get, read, delete, etc.
   */
  operation?: string;
  /**
   * @member {string} [description] Description for the operation.
   */
  description?: string;
}

/**
 * @interface
 * An interface representing Operation.
 * Resource Graph REST API operation definition.
 *
 */
export interface Operation {
  /**
   * @member {string} [name] Operation name: {provider}/{resource}/{operation}
   */
  name?: string;
  /**
   * @member {OperationDisplay} [display] Display metadata associated with the
   * operation.
   */
  display?: OperationDisplay;
  /**
   * @member {string} [origin] The origin of operations.
   */
  origin?: string;
}

/**
 * @interface
 * An interface representing ResourceGraphClientOptions.
 * @extends AzureServiceClientOptions
 */
export interface ResourceGraphClientOptions extends AzureServiceClientOptions {
  /**
   * @member {string} [baseUri]
   */
  baseUri?: string;
}


/**
 * @interface
 * An interface representing the OperationListResult.
 * Result of the request to list Resource Graph operations. It contains a list
 * of operations and a URL link to get the next set of results.
 *
 * @extends Array<Operation>
 */
export interface OperationListResult extends Array<Operation> {
}

/**
 * Defines values for FacetSortOrder.
 * Possible values include: 'asc', 'desc'
 * @readonly
 * @enum {string}
 */
export type FacetSortOrder = 'asc' | 'desc';

/**
 * Defines values for ResultTruncated.
 * Possible values include: 'true', 'false'
 * @readonly
 * @enum {string}
 */
export type ResultTruncated = 'true' | 'false';

/**
 * Defines values for ColumnDataType.
 * Possible values include: 'string', 'integer', 'number', 'boolean', 'object'
 * @readonly
 * @enum {string}
 */
export type ColumnDataType = 'string' | 'integer' | 'number' | 'boolean' | 'object';

/**
 * Contains response data for the resources operation.
 */
export type ResourcesResponse = QueryResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: QueryResponse;
    };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};
