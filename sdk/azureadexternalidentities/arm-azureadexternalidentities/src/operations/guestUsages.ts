/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { GuestUsages } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ExternalIdentitiesConfigurationClient } from "../externalIdentitiesConfigurationClient";
import {
  GuestUsagesResource,
  GuestUsagesListBySubscriptionOptionalParams,
  GuestUsagesListBySubscriptionResponse,
  GuestUsagesListByResourceGroupOptionalParams,
  GuestUsagesListByResourceGroupResponse,
  GuestUsagesCreateOptionalParams,
  GuestUsagesCreateResponse,
  GuestUsagesUpdateOptionalParams,
  GuestUsagesUpdateResponse,
  GuestUsagesDeleteOptionalParams,
  GuestUsagesGetOptionalParams,
  GuestUsagesGetResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing GuestUsages operations. */
export class GuestUsagesImpl implements GuestUsages {
  private readonly client: ExternalIdentitiesConfigurationClient;

  /**
   * Initialize a new instance of the class GuestUsages class.
   * @param client Reference to the service client
   */
  constructor(client: ExternalIdentitiesConfigurationClient) {
    this.client = client;
  }

  /**
   * Gets Guest Usages resources under a subscription for the Microsoft.AzureActiveDirectory resource
   * provider
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: GuestUsagesListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<GuestUsagesResource> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: GuestUsagesListBySubscriptionOptionalParams,
    _settings?: PageSettings
  ): AsyncIterableIterator<GuestUsagesResource[]> {
    let result: GuestUsagesListBySubscriptionResponse;
    result = await this._listBySubscription(options);
    yield result.value || [];
  }

  private async *listBySubscriptionPagingAll(
    options?: GuestUsagesListBySubscriptionOptionalParams
  ): AsyncIterableIterator<GuestUsagesResource> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets Guest Usages resources under a resource group for the Microsoft.AzureActiveDirectory resource
   * provider
   * @param resourceGroupName The name of the resource group.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: GuestUsagesListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<GuestUsagesResource> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: GuestUsagesListByResourceGroupOptionalParams,
    _settings?: PageSettings
  ): AsyncIterableIterator<GuestUsagesResource[]> {
    let result: GuestUsagesListByResourceGroupResponse;
    result = await this._listByResourceGroup(resourceGroupName, options);
    yield result.value || [];
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: GuestUsagesListByResourceGroupOptionalParams
  ): AsyncIterableIterator<GuestUsagesResource> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Creates a Guest Usages resource, which is used to linking a subscription to an instance of Azure AD
   * External Identities. [Learn more](https://aka.ms/extidbilling).
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The initial domain name of the Azure AD B2C tenant.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    resourceName: string,
    options?: GuestUsagesCreateOptionalParams
  ): Promise<GuestUsagesCreateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, options },
      createOperationSpec
    );
  }

  /**
   * Updates a Guest Usages resource for the Microsoft.AzureActiveDirectory resource provider
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The initial domain name of the Azure AD B2C tenant.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    resourceName: string,
    options?: GuestUsagesUpdateOptionalParams
  ): Promise<GuestUsagesUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, options },
      updateOperationSpec
    );
  }

  /**
   * Deletes a Guest Usages resource for the Microsoft.AzureActiveDirectory resource provider
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The initial domain name of the Azure AD B2C tenant.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    resourceName: string,
    options?: GuestUsagesDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, options },
      deleteOperationSpec
    );
  }

  /**
   * Gets a Guest Usages resource for the Microsoft.AzureActiveDirectory resource provider
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The initial domain name of the Azure AD B2C tenant.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    resourceName: string,
    options?: GuestUsagesGetOptionalParams
  ): Promise<GuestUsagesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, options },
      getOperationSpec
    );
  }

  /**
   * Gets Guest Usages resources under a subscription for the Microsoft.AzureActiveDirectory resource
   * provider
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: GuestUsagesListBySubscriptionOptionalParams
  ): Promise<GuestUsagesListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * Gets Guest Usages resources under a resource group for the Microsoft.AzureActiveDirectory resource
   * provider
   * @param resourceGroupName The name of the resource group.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: GuestUsagesListByResourceGroupOptionalParams
  ): Promise<GuestUsagesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/guestUsages/{resourceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.GuestUsagesResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.resource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/guestUsages/{resourceName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.GuestUsagesResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.resourcePatch,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/guestUsages/{resourceName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/guestUsages/{resourceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GuestUsagesResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.AzureActiveDirectory/guestUsages",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GuestUsagesResourceList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/guestUsages",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GuestUsagesResourceList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
