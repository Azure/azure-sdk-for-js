/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { B2CTenants } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ExternalIdentitiesConfigurationClient } from "../externalIdentitiesConfigurationClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  B2CTenantResource,
  B2CTenantsListByResourceGroupOptionalParams,
  B2CTenantsListByResourceGroupResponse,
  B2CTenantsListBySubscriptionOptionalParams,
  B2CTenantsListBySubscriptionResponse,
  B2CTenantsCheckNameAvailabilityOptionalParams,
  B2CTenantsCheckNameAvailabilityResponse,
  B2CTenantsGetOptionalParams,
  B2CTenantsGetResponse,
  B2CTenantsCreateOptionalParams,
  B2CTenantsCreateResponse,
  B2CTenantsUpdateOptionalParams,
  B2CTenantsUpdateResponse,
  B2CTenantsDeleteOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing B2CTenants operations. */
export class B2CTenantsImpl implements B2CTenants {
  private readonly client: ExternalIdentitiesConfigurationClient;

  /**
   * Initialize a new instance of the class B2CTenants class.
   * @param client Reference to the service client
   */
  constructor(client: ExternalIdentitiesConfigurationClient) {
    this.client = client;
  }

  /**
   * Get all the Azure AD B2C tenant resources in a resource group.
   * @param resourceGroupName The name of the resource group.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: B2CTenantsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<B2CTenantResource> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: B2CTenantsListByResourceGroupOptionalParams,
    _settings?: PageSettings
  ): AsyncIterableIterator<B2CTenantResource[]> {
    let result: B2CTenantsListByResourceGroupResponse;
    result = await this._listByResourceGroup(resourceGroupName, options);
    yield result.value || [];
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: B2CTenantsListByResourceGroupOptionalParams
  ): AsyncIterableIterator<B2CTenantResource> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get all the Azure AD B2C tenant resources in a subscription.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: B2CTenantsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<B2CTenantResource> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: B2CTenantsListBySubscriptionOptionalParams,
    _settings?: PageSettings
  ): AsyncIterableIterator<B2CTenantResource[]> {
    let result: B2CTenantsListBySubscriptionResponse;
    result = await this._listBySubscription(options);
    yield result.value || [];
  }

  private async *listBySubscriptionPagingAll(
    options?: B2CTenantsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<B2CTenantResource> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Checks the availability and validity of a domain name for the tenant.
   * @param options The options parameters.
   */
  checkNameAvailability(
    options?: B2CTenantsCheckNameAvailabilityOptionalParams
  ): Promise<B2CTenantsCheckNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      { options },
      checkNameAvailabilityOperationSpec
    );
  }

  /**
   * Get all the Azure AD B2C tenant resources in a resource group.
   * @param resourceGroupName The name of the resource group.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: B2CTenantsListByResourceGroupOptionalParams
  ): Promise<B2CTenantsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Get all the Azure AD B2C tenant resources in a subscription.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: B2CTenantsListBySubscriptionOptionalParams
  ): Promise<B2CTenantsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * Get the Azure AD B2C tenant resource.
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The initial domain name of the Azure AD B2C tenant.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    resourceName: string,
    options?: B2CTenantsGetOptionalParams
  ): Promise<B2CTenantsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, options },
      getOperationSpec
    );
  }

  /**
   * Initiates an async request to create both the Azure AD B2C tenant and the corresponding Azure
   * resource linked to a subscription.
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The initial domain name of the Azure AD B2C tenant.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    resourceName: string,
    options?: B2CTenantsCreateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<B2CTenantsCreateResponse>,
      B2CTenantsCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<B2CTenantsCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, resourceName, options },
      createOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Initiates an async request to create both the Azure AD B2C tenant and the corresponding Azure
   * resource linked to a subscription.
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The initial domain name of the Azure AD B2C tenant.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    resourceName: string,
    options?: B2CTenantsCreateOptionalParams
  ): Promise<B2CTenantsCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      resourceName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Update the Azure AD B2C tenant resource.
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The initial domain name of the Azure AD B2C tenant.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    resourceName: string,
    options?: B2CTenantsUpdateOptionalParams
  ): Promise<B2CTenantsUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, options },
      updateOperationSpec
    );
  }

  /**
   * Initiates an async operation to delete the Azure AD B2C tenant and Azure resource. The resource
   * deletion can only happen as the last step in [the tenant deletion
   * process](https://aka.ms/deleteB2Ctenant).
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The initial domain name of the Azure AD B2C tenant.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    resourceName: string,
    options?: B2CTenantsDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, resourceName, options },
      deleteOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Initiates an async operation to delete the Azure AD B2C tenant and Azure resource. The resource
   * deletion can only happen as the last step in [the tenant deletion
   * process](https://aka.ms/deleteB2Ctenant).
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The initial domain name of the Azure AD B2C tenant.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    resourceName: string,
    options?: B2CTenantsDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      resourceName,
      options
    );
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const checkNameAvailabilityOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.AzureActiveDirectory/checkNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.NameAvailabilityResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.checkNameAvailabilityRequestBody,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/b2cDirectories",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.B2CTenantResourceList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.AzureActiveDirectory/b2cDirectories",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.B2CTenantResourceList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/b2cDirectories/{resourceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.B2CTenantResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/b2cDirectories/{resourceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.B2CTenantResource
    },
    201: {
      bodyMapper: Mappers.B2CTenantResource
    },
    202: {
      bodyMapper: Mappers.B2CTenantResource
    },
    204: {
      bodyMapper: Mappers.B2CTenantResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.createTenantRequestBody,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/b2cDirectories/{resourceName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.B2CTenantResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.updateTenantRequestBody,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/b2cDirectories/{resourceName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
