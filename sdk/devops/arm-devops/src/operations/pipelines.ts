/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/pipelinesMappers";
import * as Parameters from "../models/parameters";
import { DevOpsClientContext } from "../devOpsClientContext";

/** Class representing a Pipelines. */
export class Pipelines {
  private readonly client: DevOpsClientContext;

  /**
   * Create a Pipelines.
   * @param {DevOpsClientContext} client Reference to the service client.
   */
  constructor(client: DevOpsClientContext) {
    this.client = client;
  }

  /**
   * Creates or updates an Azure Pipeline.
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param pipelineName The name of the Azure Pipeline resource in ARM.
   * @param createOperationParameters The request payload to create the Azure Pipeline.
   * @param [options] The optional parameters
   * @returns Promise<Models.PipelinesCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, pipelineName: string, createOperationParameters: Models.PipelineModel, options?: msRest.RequestOptionsBase): Promise<Models.PipelinesCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,pipelineName,createOperationParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.PipelinesCreateOrUpdateResponse>;
  }

  /**
   * Gets an existing Azure Pipeline.
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param pipelineName The name of the Azure Pipeline resource in ARM.
   * @param [options] The optional parameters
   * @returns Promise<Models.PipelinesGetResponse>
   */
  get(resourceGroupName: string, pipelineName: string, options?: msRest.RequestOptionsBase): Promise<Models.PipelinesGetResponse>;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param pipelineName The name of the Azure Pipeline resource in ARM.
   * @param callback The callback
   */
  get(resourceGroupName: string, pipelineName: string, callback: msRest.ServiceCallback<Models.PipelineModel>): void;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param pipelineName The name of the Azure Pipeline resource in ARM.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, pipelineName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PipelineModel>): void;
  get(resourceGroupName: string, pipelineName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PipelineModel>, callback?: msRest.ServiceCallback<Models.PipelineModel>): Promise<Models.PipelinesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        pipelineName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.PipelinesGetResponse>;
  }

  /**
   * Updates the properties of an Azure Pipeline. Currently, only tags can be updated.
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param pipelineName The name of the Azure Pipeline resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.PipelinesUpdateResponse>
   */
  update(resourceGroupName: string, pipelineName: string, options?: Models.PipelinesUpdateOptionalParams): Promise<Models.PipelinesUpdateResponse>;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param pipelineName The name of the Azure Pipeline resource.
   * @param callback The callback
   */
  update(resourceGroupName: string, pipelineName: string, callback: msRest.ServiceCallback<Models.PipelineModel>): void;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param pipelineName The name of the Azure Pipeline resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, pipelineName: string, options: Models.PipelinesUpdateOptionalParams, callback: msRest.ServiceCallback<Models.PipelineModel>): void;
  update(resourceGroupName: string, pipelineName: string, options?: Models.PipelinesUpdateOptionalParams | msRest.ServiceCallback<Models.PipelineModel>, callback?: msRest.ServiceCallback<Models.PipelineModel>): Promise<Models.PipelinesUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        pipelineName,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.PipelinesUpdateResponse>;
  }

  /**
   * Deletes an Azure Pipeline.
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param pipelineName The name of the Azure Pipeline resource.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, pipelineName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param pipelineName The name of the Azure Pipeline resource.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, pipelineName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param pipelineName The name of the Azure Pipeline resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, pipelineName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, pipelineName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        pipelineName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Lists all Azure Pipelines under the specified resource group.
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.PipelinesListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.PipelinesListByResourceGroupResponse>;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.PipelineListResult>): void;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PipelineListResult>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PipelineListResult>, callback?: msRest.ServiceCallback<Models.PipelineListResult>): Promise<Models.PipelinesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.PipelinesListByResourceGroupResponse>;
  }

  /**
   * Lists all Azure Pipelines under the specified subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.PipelinesListBySubscriptionResponse>
   */
  listBySubscription(options?: msRest.RequestOptionsBase): Promise<Models.PipelinesListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: msRest.ServiceCallback<Models.PipelineListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PipelineListResult>): void;
  listBySubscription(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PipelineListResult>, callback?: msRest.ServiceCallback<Models.PipelineListResult>): Promise<Models.PipelinesListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.PipelinesListBySubscriptionResponse>;
  }

  /**
   * Creates or updates an Azure Pipeline.
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param pipelineName The name of the Azure Pipeline resource in ARM.
   * @param createOperationParameters The request payload to create the Azure Pipeline.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, pipelineName: string, createOperationParameters: Models.PipelineModel, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        pipelineName,
        createOperationParameters,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Lists all Azure Pipelines under the specified resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PipelinesListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PipelinesListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PipelineListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PipelineListResult>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PipelineListResult>, callback?: msRest.ServiceCallback<Models.PipelineListResult>): Promise<Models.PipelinesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.PipelinesListByResourceGroupNextResponse>;
  }

  /**
   * Lists all Azure Pipelines under the specified subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PipelinesListBySubscriptionNextResponse>
   */
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PipelinesListBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PipelineListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PipelineListResult>): void;
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PipelineListResult>, callback?: msRest.ServiceCallback<Models.PipelineListResult>): Promise<Models.PipelinesListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBySubscriptionNextOperationSpec,
      callback) as Promise<Models.PipelinesListBySubscriptionNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevOps/pipelines/{pipelineName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.pipelineName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PipelineModel
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevOps/pipelines/{pipelineName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.pipelineName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      tags: [
        "options",
        "tags"
      ]
    },
    mapper: {
      ...Mappers.PipelineUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PipelineModel
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevOps/pipelines/{pipelineName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.pipelineName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevOps/pipelines",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PipelineListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.DevOps/pipelines",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PipelineListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevOps/pipelines/{pipelineName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.pipelineName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "createOperationParameters",
    mapper: {
      ...Mappers.PipelineModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PipelineModel
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PipelineListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listBySubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PipelineListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
