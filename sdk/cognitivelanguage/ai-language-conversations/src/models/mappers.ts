/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const AnalyzeConversationTask: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnalyzeConversationTask",
    uberParent: "AnalyzeConversationTask",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AnalyzeConversationTaskResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnalyzeConversationTaskResult",
    uberParent: "AnalyzeConversationTaskResult",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorModel"
        }
      }
    }
  }
};

export const ErrorModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorModel",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorModel"
            }
          }
        }
      },
      innererror: {
        serializedName: "innererror",
        type: {
          name: "Composite",
          className: "InnerErrorModel"
        }
      }
    }
  }
};

export const InnerErrorModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InnerErrorModel",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      innererror: {
        serializedName: "innererror",
        type: {
          name: "Composite",
          className: "InnerErrorModel"
        }
      }
    }
  }
};

export const AnalyzeConversationJobsInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnalyzeConversationJobsInput",
    modelProperties: {
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      analysisInput: {
        serializedName: "analysisInput",
        type: {
          name: "Composite",
          className: "MultiLanguageConversationAnalysisInput"
        }
      },
      tasks: {
        serializedName: "tasks",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AnalyzeConversationLROTask"
            }
          }
        }
      }
    }
  }
};

export const MultiLanguageConversationAnalysisInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MultiLanguageConversationAnalysisInput",
    modelProperties: {
      conversations: {
        serializedName: "conversations",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Conversation"
            }
          }
        }
      }
    }
  }
};

export const Conversation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Conversation",
    uberParent: "Conversation",
    polymorphicDiscriminator: {
      serializedName: "modality",
      clientName: "modality"
    },
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      language: {
        serializedName: "language",
        required: true,
        type: {
          name: "String"
        }
      },
      modality: {
        serializedName: "modality",
        required: true,
        type: {
          name: "String"
        }
      },
      domain: {
        serializedName: "domain",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TaskIdentifier: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskIdentifier",
    modelProperties: {
      taskName: {
        serializedName: "taskName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobStateAutoGenerated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobStateAutoGenerated",
    modelProperties: {
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      createdDateTime: {
        serializedName: "createdDateTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      expirationDateTime: {
        serializedName: "expirationDateTime",
        type: {
          name: "DateTime"
        }
      },
      jobId: {
        serializedName: "jobId",
        required: true,
        type: {
          name: "String"
        }
      },
      lastUpdatedDateTime: {
        serializedName: "lastUpdatedDateTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      status: {
        serializedName: "status",
        required: true,
        type: {
          name: "String"
        }
      },
      errors: {
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorModel"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConversationTasksState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConversationTasksState",
    modelProperties: {
      tasks: {
        serializedName: "tasks",
        type: {
          name: "Composite",
          className: "ConversationTasksStateTasks"
        }
      }
    }
  }
};

export const ConversationTasksStateTasks: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConversationTasksStateTasks",
    modelProperties: {
      completed: {
        serializedName: "completed",
        required: true,
        type: {
          name: "Number"
        }
      },
      failed: {
        serializedName: "failed",
        required: true,
        type: {
          name: "Number"
        }
      },
      inProgress: {
        serializedName: "inProgress",
        required: true,
        type: {
          name: "Number"
        }
      },
      total: {
        serializedName: "total",
        required: true,
        type: {
          name: "Number"
        }
      },
      items: {
        serializedName: "items",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AnalyzeConversationJobResult"
            }
          }
        }
      }
    }
  }
};

export const TaskStateAutoGenerated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskStateAutoGenerated",
    modelProperties: {
      lastUpdateDateTime: {
        serializedName: "lastUpdateDateTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      status: {
        serializedName: "status",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AnalyzeConversationJobStatistics: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnalyzeConversationJobStatistics",
    modelProperties: {
      statistics: {
        serializedName: "statistics",
        type: {
          name: "Composite",
          className: "ConversationRequestStatistics"
        }
      }
    }
  }
};

export const RequestStatistics: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RequestStatistics",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      transactionsCount: {
        serializedName: "transactionsCount",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ConversationAnalysisOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConversationAnalysisOptions",
    modelProperties: {
      conversationItem: {
        serializedName: "conversationItem",
        type: {
          name: "Composite",
          className: "ConversationItemBase"
        }
      }
    }
  }
};

export const ConversationItemBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConversationItemBase",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      participantId: {
        serializedName: "participantId",
        required: true,
        type: {
          name: "String"
        }
      },
      language: {
        serializedName: "language",
        type: {
          name: "String"
        }
      },
      modality: {
        serializedName: "modality",
        type: {
          name: "String"
        }
      },
      role: {
        serializedName: "role",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConversationTaskParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConversationTaskParameters",
    modelProperties: {
      projectName: {
        serializedName: "projectName",
        required: true,
        type: {
          name: "String"
        }
      },
      deploymentName: {
        serializedName: "deploymentName",
        required: true,
        type: {
          name: "String"
        }
      },
      verbose: {
        serializedName: "verbose",
        type: {
          name: "Boolean"
        }
      },
      isLoggingEnabled: {
        serializedName: "isLoggingEnabled",
        type: {
          name: "Boolean"
        }
      },
      stringIndexType: {
        defaultValue: "TextElements_v8",
        serializedName: "stringIndexType",
        type: {
          name: "String"
        }
      },
      directTarget: {
        serializedName: "directTarget",
        type: {
          name: "String"
        }
      },
      targetProjectParameters: {
        serializedName: "targetProjectParameters",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "AnalysisParameters" }
          }
        }
      }
    }
  }
};

export const AnalysisParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnalysisParameters",
    uberParent: "AnalysisParameters",
    polymorphicDiscriminator: {
      serializedName: "targetProjectKind",
      clientName: "targetProjectKind"
    },
    modelProperties: {
      targetProjectKind: {
        serializedName: "targetProjectKind",
        required: true,
        type: {
          name: "String"
        }
      },
      apiVersion: {
        serializedName: "apiVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AnalyzeConversationResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnalyzeConversationResult",
    modelProperties: {
      query: {
        serializedName: "query",
        required: true,
        type: {
          name: "String"
        }
      },
      detectedLanguage: {
        serializedName: "detectedLanguage",
        type: {
          name: "String"
        }
      },
      prediction: {
        serializedName: "prediction",
        type: {
          name: "Composite",
          className: "BasePrediction"
        }
      }
    }
  }
};

export const BasePrediction: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BasePrediction",
    uberParent: "BasePrediction",
    polymorphicDiscriminator: {
      serializedName: "projectKind",
      clientName: "projectKind"
    },
    modelProperties: {
      projectKind: {
        serializedName: "projectKind",
        required: true,
        type: {
          name: "String"
        }
      },
      topIntent: {
        serializedName: "topIntent",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConversationResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConversationResult",
    modelProperties: {
      query: {
        serializedName: "query",
        required: true,
        type: {
          name: "String"
        }
      },
      detectedLanguage: {
        serializedName: "detectedLanguage",
        type: {
          name: "String"
        }
      },
      prediction: {
        serializedName: "prediction",
        type: {
          name: "Composite",
          className: "ConversationPrediction"
        }
      }
    }
  }
};

export const ConversationIntent: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConversationIntent",
    modelProperties: {
      category: {
        serializedName: "category",
        required: true,
        type: {
          name: "String"
        }
      },
      confidence: {
        constraints: {
          InclusiveMaximum: 1,
          InclusiveMinimum: 0
        },
        serializedName: "confidenceScore",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ConversationEntity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConversationEntity",
    modelProperties: {
      category: {
        serializedName: "category",
        required: true,
        type: {
          name: "String"
        }
      },
      text: {
        serializedName: "text",
        required: true,
        type: {
          name: "String"
        }
      },
      offset: {
        serializedName: "offset",
        required: true,
        type: {
          name: "Number"
        }
      },
      length: {
        serializedName: "length",
        required: true,
        type: {
          name: "Number"
        }
      },
      confidence: {
        serializedName: "confidenceScore",
        required: true,
        type: {
          name: "Number"
        }
      },
      resolutions: {
        serializedName: "resolutions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BaseResolution"
            }
          }
        }
      },
      extraInformation: {
        serializedName: "extraInformation",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BaseExtraInformation"
            }
          }
        }
      }
    }
  }
};

export const BaseResolution: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BaseResolution",
    uberParent: "BaseResolution",
    polymorphicDiscriminator: {
      serializedName: "resolutionKind",
      clientName: "resolutionKind"
    },
    modelProperties: {
      resolutionKind: {
        serializedName: "resolutionKind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BaseExtraInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BaseExtraInformation",
    uberParent: "BaseExtraInformation",
    polymorphicDiscriminator: {
      serializedName: "extraInformationKind",
      clientName: "extraInformationKind"
    },
    modelProperties: {
      extraInformationKind: {
        serializedName: "extraInformationKind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TargetIntentResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TargetIntentResult",
    uberParent: "TargetIntentResult",
    polymorphicDiscriminator: {
      serializedName: "targetProjectKind",
      clientName: "targetProjectKind"
    },
    modelProperties: {
      targetProjectKind: {
        serializedName: "targetProjectKind",
        required: true,
        type: {
          name: "String"
        }
      },
      apiVersion: {
        serializedName: "apiVersion",
        type: {
          name: "String"
        }
      },
      confidence: {
        constraints: {
          InclusiveMaximum: 1,
          InclusiveMinimum: 0
        },
        serializedName: "confidenceScore",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const LuisCallingOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LuisCallingOptions",
    modelProperties: {
      verbose: {
        serializedName: "verbose",
        type: {
          name: "Boolean"
        }
      },
      log: {
        serializedName: "log",
        type: {
          name: "Boolean"
        }
      },
      showAllIntents: {
        serializedName: "show-all-intents",
        type: {
          name: "Boolean"
        }
      },
      timezoneOffset: {
        serializedName: "timezoneOffset",
        type: {
          name: "Number"
        }
      },
      spellCheck: {
        serializedName: "spellCheck",
        type: {
          name: "Boolean"
        }
      },
      bingSpellCheckSubscriptionKey: {
        serializedName: "bing-spell-check-subscription-key",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConversationCallingOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConversationCallingOptions",
    modelProperties: {
      language: {
        serializedName: "language",
        type: {
          name: "String"
        }
      },
      verbose: {
        serializedName: "verbose",
        type: {
          name: "Boolean"
        }
      },
      isLoggingEnabled: {
        serializedName: "isLoggingEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const AnswersOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnswersOptions",
    modelProperties: {
      qnaId: {
        serializedName: "qnaId",
        type: {
          name: "Number"
        }
      },
      question: {
        serializedName: "question",
        type: {
          name: "String"
        }
      },
      top: {
        serializedName: "top",
        type: {
          name: "Number"
        }
      },
      userId: {
        serializedName: "userId",
        type: {
          name: "String"
        }
      },
      confidenceThreshold: {
        constraints: {
          InclusiveMaximum: 1,
          InclusiveMinimum: 0
        },
        serializedName: "confidenceScoreThreshold",
        type: {
          name: "Number"
        }
      },
      answerContext: {
        serializedName: "context",
        type: {
          name: "Composite",
          className: "KnowledgeBaseAnswerContext"
        }
      },
      rankerKind: {
        serializedName: "rankerType",
        type: {
          name: "String"
        }
      },
      filters: {
        serializedName: "filters",
        type: {
          name: "Composite",
          className: "QueryFilters"
        }
      },
      shortAnswerOptions: {
        serializedName: "answerSpanRequest",
        type: {
          name: "Composite",
          className: "ShortAnswerOptions"
        }
      },
      includeUnstructuredSources: {
        serializedName: "includeUnstructuredSources",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const KnowledgeBaseAnswerContext: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KnowledgeBaseAnswerContext",
    modelProperties: {
      previousQnaId: {
        serializedName: "previousQnaId",
        required: true,
        type: {
          name: "Number"
        }
      },
      previousQuestion: {
        serializedName: "previousUserQuery",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QueryFilters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QueryFilters",
    modelProperties: {
      metadataFilter: {
        serializedName: "metadataFilter",
        type: {
          name: "Composite",
          className: "MetadataFilter"
        }
      },
      sourceFilter: {
        serializedName: "sourceFilter",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      logicalOperation: {
        serializedName: "logicalOperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetadataFilter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetadataFilter",
    modelProperties: {
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataRecord"
            }
          }
        }
      },
      logicalOperation: {
        serializedName: "logicalOperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetadataRecord: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetadataRecord",
    modelProperties: {
      key: {
        serializedName: "key",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ShortAnswerOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ShortAnswerOptions",
    modelProperties: {
      enable: {
        defaultValue: true,
        isConstant: true,
        serializedName: "enable",
        type: {
          name: "Boolean"
        }
      },
      confidenceThreshold: {
        constraints: {
          InclusiveMaximum: 1,
          InclusiveMinimum: 0
        },
        serializedName: "confidenceScoreThreshold",
        type: {
          name: "Number"
        }
      },
      top: {
        constraints: {
          InclusiveMaximum: 10,
          InclusiveMinimum: 1
        },
        serializedName: "topAnswersWithSpan",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const QuantityResolution: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QuantityResolution",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AnswersResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnswersResult",
    modelProperties: {
      answers: {
        serializedName: "answers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "KnowledgeBaseAnswer"
            }
          }
        }
      }
    }
  }
};

export const KnowledgeBaseAnswer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KnowledgeBaseAnswer",
    modelProperties: {
      questions: {
        serializedName: "questions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      answer: {
        serializedName: "answer",
        type: {
          name: "String"
        }
      },
      confidence: {
        constraints: {
          InclusiveMaximum: 1,
          InclusiveMinimum: 0
        },
        serializedName: "confidenceScore",
        type: {
          name: "Number"
        }
      },
      qnaId: {
        serializedName: "id",
        type: {
          name: "Number"
        }
      },
      source: {
        serializedName: "source",
        type: {
          name: "String"
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      dialog: {
        serializedName: "dialog",
        type: {
          name: "Composite",
          className: "KnowledgeBaseAnswerDialog"
        }
      },
      shortAnswer: {
        serializedName: "answerSpan",
        type: {
          name: "Composite",
          className: "AnswerSpan"
        }
      }
    }
  }
};

export const KnowledgeBaseAnswerDialog: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KnowledgeBaseAnswerDialog",
    modelProperties: {
      isContextOnly: {
        serializedName: "isContextOnly",
        type: {
          name: "Boolean"
        }
      },
      prompts: {
        constraints: {
          MaxItems: 20
        },
        serializedName: "prompts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "KnowledgeBaseAnswerPrompt"
            }
          }
        }
      }
    }
  }
};

export const KnowledgeBaseAnswerPrompt: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KnowledgeBaseAnswerPrompt",
    modelProperties: {
      displayOrder: {
        serializedName: "displayOrder",
        type: {
          name: "Number"
        }
      },
      qnaId: {
        serializedName: "qnaId",
        type: {
          name: "Number"
        }
      },
      displayText: {
        constraints: {
          MaxLength: 200
        },
        serializedName: "displayText",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AnswerSpan: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnswerSpan",
    modelProperties: {
      text: {
        serializedName: "text",
        type: {
          name: "String"
        }
      },
      confidence: {
        constraints: {
          InclusiveMaximum: 1,
          InclusiveMinimum: 0
        },
        serializedName: "confidenceScore",
        type: {
          name: "Number"
        }
      },
      offset: {
        serializedName: "offset",
        type: {
          name: "Number"
        }
      },
      length: {
        serializedName: "length",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const TaskParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskParameters",
    modelProperties: {
      loggingOptOut: {
        defaultValue: false,
        serializedName: "loggingOptOut",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ConversationPIIItemResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConversationPIIItemResult",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      redactedContent: {
        serializedName: "redactedContent",
        type: {
          name: "Composite",
          className: "RedactedTranscriptContent"
        }
      },
      entities: {
        serializedName: "entities",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Entity"
            }
          }
        }
      }
    }
  }
};

export const RedactedTranscriptContent: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RedactedTranscriptContent",
    modelProperties: {
      itn: {
        serializedName: "itn",
        type: {
          name: "String"
        }
      },
      maskedItn: {
        serializedName: "maskedItn",
        type: {
          name: "String"
        }
      },
      text: {
        serializedName: "text",
        type: {
          name: "String"
        }
      },
      lexical: {
        serializedName: "lexical",
        type: {
          name: "String"
        }
      },
      audioTimings: {
        serializedName: "audioTimings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AudioTiming"
            }
          }
        }
      }
    }
  }
};

export const AudioTiming: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AudioTiming",
    modelProperties: {
      offset: {
        serializedName: "offset",
        type: {
          name: "Number"
        }
      },
      duration: {
        serializedName: "duration",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Entity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Entity",
    modelProperties: {
      text: {
        serializedName: "text",
        required: true,
        type: {
          name: "String"
        }
      },
      category: {
        serializedName: "category",
        required: true,
        type: {
          name: "String"
        }
      },
      subcategory: {
        serializedName: "subcategory",
        type: {
          name: "String"
        }
      },
      offset: {
        serializedName: "offset",
        required: true,
        type: {
          name: "Number"
        }
      },
      length: {
        serializedName: "length",
        required: true,
        type: {
          name: "Number"
        }
      },
      confidenceScore: {
        serializedName: "confidenceScore",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ConversationPIIResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConversationPIIResult",
    modelProperties: {
      conversationItems: {
        serializedName: "conversationItems",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConversationPIIItemResult"
            }
          }
        }
      }
    }
  }
};

export const ConversationResultBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConversationResultBase",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      warnings: {
        serializedName: "warnings",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InputWarning"
            }
          }
        }
      },
      statistics: {
        serializedName: "statistics",
        type: {
          name: "Composite",
          className: "ConversationStatistics"
        }
      }
    }
  }
};

export const InputWarning: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InputWarning",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String"
        }
      },
      targetRef: {
        serializedName: "targetRef",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConversationStatistics: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConversationStatistics",
    modelProperties: {
      transactionsCount: {
        serializedName: "transactionsCount",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PreBuiltResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PreBuiltResult",
    modelProperties: {
      errors: {
        serializedName: "errors",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InputError"
            }
          }
        }
      },
      statistics: {
        serializedName: "statistics",
        type: {
          name: "Composite",
          className: "RequestStatistics"
        }
      },
      modelVersion: {
        serializedName: "modelVersion",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InputError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InputError",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorModel"
        }
      }
    }
  }
};

export const ConversationsSummaryResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConversationsSummaryResult",
    modelProperties: {
      summaries: {
        serializedName: "summaries",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConversationsSummaryResultSummariesItem"
            }
          }
        }
      }
    }
  }
};

export const SummaryResultItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SummaryResultItem",
    modelProperties: {
      aspect: {
        serializedName: "aspect",
        required: true,
        type: {
          name: "String"
        }
      },
      text: {
        serializedName: "text",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConversationalTask: coreClient.CompositeMapper = {
  serializedName: "Conversation",
  type: {
    name: "Composite",
    className: "ConversationalTask",
    uberParent: "AnalyzeConversationTask",
    polymorphicDiscriminator:
      AnalyzeConversationTask.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeConversationTask.type.modelProperties,
      analysisInput: {
        serializedName: "analysisInput",
        type: {
          name: "Composite",
          className: "ConversationAnalysisOptions"
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "ConversationTaskParameters"
        }
      }
    }
  }
};

export const ConversationalTaskResult: coreClient.CompositeMapper = {
  serializedName: "ConversationResult",
  type: {
    name: "Composite",
    className: "ConversationalTaskResult",
    uberParent: "AnalyzeConversationTaskResult",
    polymorphicDiscriminator:
      AnalyzeConversationTaskResult.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeConversationTaskResult.type.modelProperties,
      result: {
        serializedName: "result",
        type: {
          name: "Composite",
          className: "AnalyzeConversationResult"
        }
      }
    }
  }
};

export const TextConversation: coreClient.CompositeMapper = {
  serializedName: "text",
  type: {
    name: "Composite",
    className: "TextConversation",
    uberParent: "Conversation",
    polymorphicDiscriminator: Conversation.type.polymorphicDiscriminator,
    modelProperties: {
      ...Conversation.type.modelProperties,
      conversationItems: {
        serializedName: "conversationItems",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TextConversationItem"
            }
          }
        }
      }
    }
  }
};

export const TranscriptConversation: coreClient.CompositeMapper = {
  serializedName: "transcript",
  type: {
    name: "Composite",
    className: "TranscriptConversation",
    uberParent: "Conversation",
    polymorphicDiscriminator: Conversation.type.polymorphicDiscriminator,
    modelProperties: {
      ...Conversation.type.modelProperties,
      conversationItems: {
        serializedName: "conversationItems",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TranscriptConversationItem"
            }
          }
        }
      }
    }
  }
};

export const AnalyzeConversationLROTask: coreClient.CompositeMapper = {
  serializedName: "AnalyzeConversationLROTask",
  type: {
    name: "Composite",
    className: "AnalyzeConversationLROTask",
    uberParent: "TaskIdentifier",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      ...TaskIdentifier.type.modelProperties,
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AnalyzeConversationJobResult: coreClient.CompositeMapper = {
  serializedName: "AnalyzeConversationJobResult",
  type: {
    name: "Composite",
    className: "AnalyzeConversationJobResult",
    uberParent: "TaskStateAutoGenerated",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      ...TaskStateAutoGenerated.type.modelProperties,
      ...TaskIdentifier.type.modelProperties,
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AnalyzeConversationJobState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnalyzeConversationJobState",
    modelProperties: {
      ...JobStateAutoGenerated.type.modelProperties,
      ...ConversationTasksState.type.modelProperties,
      ...AnalyzeConversationJobStatistics.type.modelProperties
    }
  }
};

export const ConversationRequestStatistics: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConversationRequestStatistics",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      ...RequestStatistics.type.modelProperties,
      conversationsCount: {
        serializedName: "conversationsCount",
        required: true,
        type: {
          name: "Number"
        }
      },
      validConversationsCount: {
        serializedName: "validConversationsCount",
        required: true,
        type: {
          name: "Number"
        }
      },
      erroneousConversationsCount: {
        serializedName: "erroneousConversationsCount",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const TextConversationItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TextConversationItem",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      ...ConversationItemBase.type.modelProperties,
      text: {
        serializedName: "text",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TranscriptConversationItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TranscriptConversationItem",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      ...ConversationItemBase.type.modelProperties,
      itn: {
        serializedName: "itn",
        type: {
          name: "String"
        }
      },
      maskedItn: {
        serializedName: "maskedItn",
        type: {
          name: "String"
        }
      },
      text: {
        serializedName: "text",
        type: {
          name: "String"
        }
      },
      lexical: {
        serializedName: "lexical",
        type: {
          name: "String"
        }
      },
      audioTimings: {
        serializedName: "audioTimings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WordLevelTiming"
            }
          }
        }
      }
    }
  }
};

export const LuisParameters: coreClient.CompositeMapper = {
  serializedName: "Luis",
  type: {
    name: "Composite",
    className: "LuisParameters",
    uberParent: "AnalysisParameters",
    additionalProperties: { type: { name: "Object" } },
    polymorphicDiscriminator: AnalysisParameters.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalysisParameters.type.modelProperties,
      query: {
        constraints: {
          MaxLength: 500
        },
        serializedName: "query",
        type: {
          name: "String"
        }
      },
      callingOptions: {
        serializedName: "callingOptions",
        type: {
          name: "Composite",
          className: "LuisCallingOptions"
        }
      }
    }
  }
};

export const ConversationParameters: coreClient.CompositeMapper = {
  serializedName: "Conversation",
  type: {
    name: "Composite",
    className: "ConversationParameters",
    uberParent: "AnalysisParameters",
    polymorphicDiscriminator: AnalysisParameters.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalysisParameters.type.modelProperties,
      callingOptions: {
        serializedName: "callingOptions",
        type: {
          name: "Composite",
          className: "ConversationCallingOptions"
        }
      }
    }
  }
};

export const QuestionAnsweringParameters: coreClient.CompositeMapper = {
  serializedName: "QuestionAnswering",
  type: {
    name: "Composite",
    className: "QuestionAnsweringParameters",
    uberParent: "AnalysisParameters",
    polymorphicDiscriminator: AnalysisParameters.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalysisParameters.type.modelProperties,
      callingOptions: {
        serializedName: "callingOptions",
        type: {
          name: "Composite",
          className: "AnswersOptions"
        }
      }
    }
  }
};

export const ConversationPrediction: coreClient.CompositeMapper = {
  serializedName: "Conversation",
  type: {
    name: "Composite",
    className: "ConversationPrediction",
    uberParent: "BasePrediction",
    polymorphicDiscriminator: BasePrediction.type.polymorphicDiscriminator,
    modelProperties: {
      ...BasePrediction.type.modelProperties,
      intents: {
        serializedName: "intents",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConversationIntent"
            }
          }
        }
      },
      entities: {
        serializedName: "entities",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConversationEntity"
            }
          }
        }
      }
    }
  }
};

export const OrchestrationPrediction: coreClient.CompositeMapper = {
  serializedName: "Orchestration",
  type: {
    name: "Composite",
    className: "OrchestrationPrediction",
    uberParent: "BasePrediction",
    polymorphicDiscriminator: BasePrediction.type.polymorphicDiscriminator,
    modelProperties: {
      ...BasePrediction.type.modelProperties,
      intents: {
        serializedName: "intents",
        required: true,
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "TargetIntentResult" }
          }
        }
      }
    }
  }
};

export const AgeResolution: coreClient.CompositeMapper = {
  serializedName: "Age",
  type: {
    name: "Composite",
    className: "AgeResolution",
    uberParent: "BaseResolution",
    polymorphicDiscriminator: BaseResolution.type.polymorphicDiscriminator,
    modelProperties: {
      ...BaseResolution.type.modelProperties,
      ...QuantityResolution.type.modelProperties,
      unit: {
        serializedName: "unit",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VolumeResolution: coreClient.CompositeMapper = {
  serializedName: "Volume",
  type: {
    name: "Composite",
    className: "VolumeResolution",
    uberParent: "BaseResolution",
    polymorphicDiscriminator: BaseResolution.type.polymorphicDiscriminator,
    modelProperties: {
      ...BaseResolution.type.modelProperties,
      ...QuantityResolution.type.modelProperties,
      unit: {
        serializedName: "unit",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SpeedResolution: coreClient.CompositeMapper = {
  serializedName: "Speed",
  type: {
    name: "Composite",
    className: "SpeedResolution",
    uberParent: "BaseResolution",
    polymorphicDiscriminator: BaseResolution.type.polymorphicDiscriminator,
    modelProperties: {
      ...BaseResolution.type.modelProperties,
      ...QuantityResolution.type.modelProperties,
      unit: {
        serializedName: "unit",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AreaResolution: coreClient.CompositeMapper = {
  serializedName: "Area",
  type: {
    name: "Composite",
    className: "AreaResolution",
    uberParent: "BaseResolution",
    polymorphicDiscriminator: BaseResolution.type.polymorphicDiscriminator,
    modelProperties: {
      ...BaseResolution.type.modelProperties,
      ...QuantityResolution.type.modelProperties,
      unit: {
        serializedName: "unit",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LengthResolution: coreClient.CompositeMapper = {
  serializedName: "Length",
  type: {
    name: "Composite",
    className: "LengthResolution",
    uberParent: "BaseResolution",
    polymorphicDiscriminator: BaseResolution.type.polymorphicDiscriminator,
    modelProperties: {
      ...BaseResolution.type.modelProperties,
      ...QuantityResolution.type.modelProperties,
      unit: {
        serializedName: "unit",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InformationResolution: coreClient.CompositeMapper = {
  serializedName: "Information",
  type: {
    name: "Composite",
    className: "InformationResolution",
    uberParent: "BaseResolution",
    polymorphicDiscriminator: BaseResolution.type.polymorphicDiscriminator,
    modelProperties: {
      ...BaseResolution.type.modelProperties,
      ...QuantityResolution.type.modelProperties,
      unit: {
        serializedName: "unit",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TemperatureResolution: coreClient.CompositeMapper = {
  serializedName: "Temperature",
  type: {
    name: "Composite",
    className: "TemperatureResolution",
    uberParent: "BaseResolution",
    polymorphicDiscriminator: BaseResolution.type.polymorphicDiscriminator,
    modelProperties: {
      ...BaseResolution.type.modelProperties,
      ...QuantityResolution.type.modelProperties,
      unit: {
        serializedName: "unit",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WeightResolution: coreClient.CompositeMapper = {
  serializedName: "Weight",
  type: {
    name: "Composite",
    className: "WeightResolution",
    uberParent: "BaseResolution",
    polymorphicDiscriminator: BaseResolution.type.polymorphicDiscriminator,
    modelProperties: {
      ...BaseResolution.type.modelProperties,
      ...QuantityResolution.type.modelProperties,
      unit: {
        serializedName: "unit",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CurrencyResolution: coreClient.CompositeMapper = {
  serializedName: "Currency",
  type: {
    name: "Composite",
    className: "CurrencyResolution",
    uberParent: "BaseResolution",
    polymorphicDiscriminator: BaseResolution.type.polymorphicDiscriminator,
    modelProperties: {
      ...BaseResolution.type.modelProperties,
      ...QuantityResolution.type.modelProperties,
      iso4217: {
        serializedName: "ISO4217",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BooleanResolution: coreClient.CompositeMapper = {
  serializedName: "Boolean",
  type: {
    name: "Composite",
    className: "BooleanResolution",
    uberParent: "BaseResolution",
    polymorphicDiscriminator: BaseResolution.type.polymorphicDiscriminator,
    modelProperties: {
      ...BaseResolution.type.modelProperties,
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DateTimeResolution: coreClient.CompositeMapper = {
  serializedName: "DateTime",
  type: {
    name: "Composite",
    className: "DateTimeResolution",
    uberParent: "BaseResolution",
    polymorphicDiscriminator: BaseResolution.type.polymorphicDiscriminator,
    modelProperties: {
      ...BaseResolution.type.modelProperties,
      timex: {
        serializedName: "timex",
        required: true,
        type: {
          name: "String"
        }
      },
      dateTimeSubKind: {
        serializedName: "dateTimeSubKind",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      },
      modifier: {
        serializedName: "modifier",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NumberResolution: coreClient.CompositeMapper = {
  serializedName: "Number",
  type: {
    name: "Composite",
    className: "NumberResolution",
    uberParent: "BaseResolution",
    polymorphicDiscriminator: BaseResolution.type.polymorphicDiscriminator,
    modelProperties: {
      ...BaseResolution.type.modelProperties,
      numberKind: {
        serializedName: "numberKind",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OrdinalResolution: coreClient.CompositeMapper = {
  serializedName: "Ordinal",
  type: {
    name: "Composite",
    className: "OrdinalResolution",
    uberParent: "BaseResolution",
    polymorphicDiscriminator: BaseResolution.type.polymorphicDiscriminator,
    modelProperties: {
      ...BaseResolution.type.modelProperties,
      offset: {
        serializedName: "offset",
        required: true,
        type: {
          name: "String"
        }
      },
      relativeTo: {
        serializedName: "relativeTo",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TemporalSpanResolution: coreClient.CompositeMapper = {
  serializedName: "TemporalSpan",
  type: {
    name: "Composite",
    className: "TemporalSpanResolution",
    uberParent: "BaseResolution",
    polymorphicDiscriminator: BaseResolution.type.polymorphicDiscriminator,
    modelProperties: {
      ...BaseResolution.type.modelProperties,
      begin: {
        serializedName: "begin",
        type: {
          name: "String"
        }
      },
      end: {
        serializedName: "end",
        type: {
          name: "String"
        }
      },
      duration: {
        serializedName: "duration",
        type: {
          name: "String"
        }
      },
      modifier: {
        serializedName: "modifier",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NumericRangeResolution: coreClient.CompositeMapper = {
  serializedName: "NumericRange",
  type: {
    name: "Composite",
    className: "NumericRangeResolution",
    uberParent: "BaseResolution",
    polymorphicDiscriminator: BaseResolution.type.polymorphicDiscriminator,
    modelProperties: {
      ...BaseResolution.type.modelProperties,
      rangeKind: {
        serializedName: "rangeKind",
        required: true,
        type: {
          name: "String"
        }
      },
      minimum: {
        serializedName: "minimum",
        required: true,
        type: {
          name: "Number"
        }
      },
      maximum: {
        serializedName: "maximum",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const EntitySubtype: coreClient.CompositeMapper = {
  serializedName: "EntitySubtype",
  type: {
    name: "Composite",
    className: "EntitySubtype",
    uberParent: "BaseExtraInformation",
    polymorphicDiscriminator:
      BaseExtraInformation.type.polymorphicDiscriminator,
    modelProperties: {
      ...BaseExtraInformation.type.modelProperties,
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListKey: coreClient.CompositeMapper = {
  serializedName: "ListKey",
  type: {
    name: "Composite",
    className: "ListKey",
    uberParent: "BaseExtraInformation",
    polymorphicDiscriminator:
      BaseExtraInformation.type.polymorphicDiscriminator,
    modelProperties: {
      ...BaseExtraInformation.type.modelProperties,
      key: {
        serializedName: "key",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NoneLinkedTargetIntentResult: coreClient.CompositeMapper = {
  serializedName: "NonLinked",
  type: {
    name: "Composite",
    className: "NoneLinkedTargetIntentResult",
    uberParent: "TargetIntentResult",
    polymorphicDiscriminator: TargetIntentResult.type.polymorphicDiscriminator,
    modelProperties: {
      ...TargetIntentResult.type.modelProperties,
      result: {
        serializedName: "result",
        type: {
          name: "Composite",
          className: "ConversationResult"
        }
      }
    }
  }
};

export const ConversationTargetIntentResult: coreClient.CompositeMapper = {
  serializedName: "Conversation",
  type: {
    name: "Composite",
    className: "ConversationTargetIntentResult",
    uberParent: "TargetIntentResult",
    polymorphicDiscriminator: TargetIntentResult.type.polymorphicDiscriminator,
    modelProperties: {
      ...TargetIntentResult.type.modelProperties,
      result: {
        serializedName: "result",
        type: {
          name: "Composite",
          className: "ConversationResult"
        }
      }
    }
  }
};

export const LuisTargetIntentResult: coreClient.CompositeMapper = {
  serializedName: "Luis",
  type: {
    name: "Composite",
    className: "LuisTargetIntentResult",
    uberParent: "TargetIntentResult",
    polymorphicDiscriminator: TargetIntentResult.type.polymorphicDiscriminator,
    modelProperties: {
      ...TargetIntentResult.type.modelProperties,
      result: {
        serializedName: "result",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const QuestionAnsweringTargetIntentResult: coreClient.CompositeMapper = {
  serializedName: "QuestionAnswering",
  type: {
    name: "Composite",
    className: "QuestionAnsweringTargetIntentResult",
    uberParent: "TargetIntentResult",
    polymorphicDiscriminator: TargetIntentResult.type.polymorphicDiscriminator,
    modelProperties: {
      ...TargetIntentResult.type.modelProperties,
      result: {
        serializedName: "result",
        type: {
          name: "Composite",
          className: "AnswersResult"
        }
      }
    }
  }
};

export const PreBuiltTaskParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PreBuiltTaskParameters",
    modelProperties: {
      ...TaskParameters.type.modelProperties,
      modelVersion: {
        defaultValue: "latest",
        serializedName: "modelVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WordLevelTiming: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WordLevelTiming",
    modelProperties: {
      ...AudioTiming.type.modelProperties,
      word: {
        serializedName: "word",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConversationPIIResultsConversationsItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConversationPIIResultsConversationsItem",
    modelProperties: {
      ...ConversationPIIResult.type.modelProperties,
      ...ConversationResultBase.type.modelProperties
    }
  }
};

export const SummaryResultConversationsItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SummaryResultConversationsItem",
    modelProperties: {
      ...ConversationsSummaryResult.type.modelProperties,
      ...ConversationResultBase.type.modelProperties
    }
  }
};

export const ConversationPIIResults: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConversationPIIResults",
    modelProperties: {
      ...PreBuiltResult.type.modelProperties,
      conversations: {
        serializedName: "conversations",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConversationPIIResultsConversationsItem"
            }
          }
        }
      }
    }
  }
};

export const SummaryResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SummaryResult",
    modelProperties: {
      ...PreBuiltResult.type.modelProperties,
      conversations: {
        serializedName: "conversations",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SummaryResultConversationsItem"
            }
          }
        }
      }
    }
  }
};

export const ConversationsSummaryResultSummariesItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConversationsSummaryResultSummariesItem",
    modelProperties: {
      ...SummaryResultItem.type.modelProperties
    }
  }
};

export const AnalyzeConversationPIITask: coreClient.CompositeMapper = {
  serializedName: "ConversationalPIITask",
  type: {
    name: "Composite",
    className: "AnalyzeConversationPIITask",
    uberParent: "TaskIdentifier",
    polymorphicDiscriminator: TaskIdentifier.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeConversationLROTask.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "ConversationPIITaskParameters"
        }
      }
    }
  }
};

export const AnalyzeConversationSummarizationTask: coreClient.CompositeMapper = {
  serializedName: "ConversationalSummarizationTask",
  type: {
    name: "Composite",
    className: "AnalyzeConversationSummarizationTask",
    uberParent: "TaskIdentifier",
    polymorphicDiscriminator: TaskIdentifier.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeConversationLROTask.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "ConversationSummarizationTaskParameters"
        }
      }
    }
  }
};

export const AnalyzeConversationPIIResult: coreClient.CompositeMapper = {
  serializedName: "ConversationalPIIResults",
  type: {
    name: "Composite",
    className: "AnalyzeConversationPIIResult",
    uberParent: "TaskStateAutoGenerated",
    polymorphicDiscriminator:
      TaskStateAutoGenerated.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeConversationJobResult.type.modelProperties,
      results: {
        serializedName: "results",
        type: {
          name: "Composite",
          className: "ConversationPIIResults"
        }
      }
    }
  }
};

export const AnalyzeConversationSummarizationResult: coreClient.CompositeMapper = {
  serializedName: "ConversationalSummarizationResults",
  type: {
    name: "Composite",
    className: "AnalyzeConversationSummarizationResult",
    uberParent: "TaskStateAutoGenerated",
    polymorphicDiscriminator:
      TaskStateAutoGenerated.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeConversationJobResult.type.modelProperties,
      results: {
        serializedName: "results",
        type: {
          name: "Composite",
          className: "SummaryResult"
        }
      }
    }
  }
};

export const ConversationPIITaskParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConversationPIITaskParameters",
    modelProperties: {
      ...PreBuiltTaskParameters.type.modelProperties,
      piiCategories: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "piiCategories",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      includeAudioRedaction: {
        defaultValue: false,
        serializedName: "includeAudioRedaction",
        type: {
          name: "Boolean"
        }
      },
      redactionSource: {
        serializedName: "redactionSource",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConversationSummarizationTaskParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConversationSummarizationTaskParameters",
    modelProperties: {
      ...PreBuiltTaskParameters.type.modelProperties,
      summaryAspects: {
        serializedName: "summaryAspects",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ConversationAnalysisClientAnalyzeConversationExceptionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConversationAnalysisClientAnalyzeConversationExceptionHeaders",
    modelProperties: {
      xMsErrorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConversationAnalysisClientConversationAnalysisHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConversationAnalysisClientConversationAnalysisHeaders",
    modelProperties: {
      operationLocation: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  AnalyzeConversationTask: AnalyzeConversationTask,
  AnalyzeConversationTaskResult: AnalyzeConversationTaskResult,
  Conversation: Conversation,
  AnalysisParameters: AnalysisParameters,
  BasePrediction: BasePrediction,
  BaseResolution: BaseResolution,
  BaseExtraInformation: BaseExtraInformation,
  TargetIntentResult: TargetIntentResult,
  "AnalyzeConversationTask.Conversation": ConversationalTask,
  "AnalyzeConversationTaskResult.ConversationResult": ConversationalTaskResult,
  "Conversation.text": TextConversation,
  "Conversation.transcript": TranscriptConversation,
  "TaskIdentifier.AnalyzeConversationLROTask": AnalyzeConversationLROTask,
  "TaskStateAutoGenerated.AnalyzeConversationJobResult": AnalyzeConversationJobResult,
  "AnalysisParameters.Luis": LuisParameters,
  "AnalysisParameters.Conversation": ConversationParameters,
  "AnalysisParameters.QuestionAnswering": QuestionAnsweringParameters,
  "BasePrediction.Conversation": ConversationPrediction,
  "BasePrediction.Orchestration": OrchestrationPrediction,
  "BaseResolution.Age": AgeResolution,
  "BaseResolution.Volume": VolumeResolution,
  "BaseResolution.Speed": SpeedResolution,
  "BaseResolution.Area": AreaResolution,
  "BaseResolution.Length": LengthResolution,
  "BaseResolution.Information": InformationResolution,
  "BaseResolution.Temperature": TemperatureResolution,
  "BaseResolution.Weight": WeightResolution,
  "BaseResolution.Currency": CurrencyResolution,
  "BaseResolution.Boolean": BooleanResolution,
  "BaseResolution.DateTime": DateTimeResolution,
  "BaseResolution.Number": NumberResolution,
  "BaseResolution.Ordinal": OrdinalResolution,
  "BaseResolution.TemporalSpan": TemporalSpanResolution,
  "BaseResolution.NumericRange": NumericRangeResolution,
  "BaseExtraInformation.EntitySubtype": EntitySubtype,
  "BaseExtraInformation.ListKey": ListKey,
  "TargetIntentResult.NonLinked": NoneLinkedTargetIntentResult,
  "TargetIntentResult.Conversation": ConversationTargetIntentResult,
  "TargetIntentResult.Luis": LuisTargetIntentResult,
  "TargetIntentResult.QuestionAnswering": QuestionAnsweringTargetIntentResult,
  "TaskIdentifier.ConversationalPIITask": AnalyzeConversationPIITask,
  "TaskIdentifier.ConversationalSummarizationTask": AnalyzeConversationSummarizationTask,
  "TaskStateAutoGenerated.ConversationalPIIResults": AnalyzeConversationPIIResult,
  "TaskStateAutoGenerated.ConversationalSummarizationResults": AnalyzeConversationSummarizationResult
};
