"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.ConversationAnalysisClient = void 0;
var coreClient = require("@azure/core-client");
var core_lro_1 = require("@azure/core-lro");
var lroImpl_1 = require("./lroImpl");
var Parameters = require("./models/parameters");
var Mappers = require("./models/mappers");
var ConversationAnalysisClient = /** @class */ (function (_super) {
    __extends(ConversationAnalysisClient, _super);
    /**
     * Initializes a new instance of the ConversationAnalysisClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param endpoint Supported Cognitive Services endpoint (e.g.,
     *                 https://<resource-name>.api.cognitiveservices.azure.com).
     * @param options The parameter options
     */
    function ConversationAnalysisClient(credentials, endpoint, options) {
        var _this = this;
        var _a, _b;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (endpoint === undefined) {
            throw new Error("'endpoint' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        var defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        var packageDetails = "azsdk-js-ai-language-conversations/1.0.0-beta.1";
        var userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? "".concat(options.userAgentOptions.userAgentPrefix, " ").concat(packageDetails)
            : "".concat(packageDetails);
        var optionsWithDefaults = __assign(__assign(__assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix: userAgentPrefix
            }, baseUri: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "{Endpoint}/language" });
        _this = _super.call(this, optionsWithDefaults) || this;
        // Parameter assignments
        _this.endpoint = endpoint;
        // Assigning values to Constant parameters
        _this.apiVersion = options.apiVersion || "2022-05-15-preview";
        _this.addCustomApiVersionPolicy(options.apiVersion);
        return _this;
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    ConversationAnalysisClient.prototype.addCustomApiVersionPolicy = function (apiVersion) {
        if (!apiVersion) {
            return;
        }
        var apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest: function (request, next) {
                return __awaiter(this, void 0, void 0, function () {
                    var param, newParams;
                    return __generator(this, function (_a) {
                        param = request.url.split("?");
                        if (param.length > 1) {
                            newParams = param[1].split("&").map(function (item) {
                                if (item.indexOf("api-version") > -1) {
                                    return "api-version=" + apiVersion;
                                }
                                else {
                                    return item;
                                }
                            });
                            request.url = param[0] + "?" + newParams.join("&");
                        }
                        return [2 /*return*/, next(request)];
                    });
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    };
    /**
     * Analyzes the input conversation utterance.
     * @param task A single conversational task to execute.
     * @param options The options parameters.
     */
    ConversationAnalysisClient.prototype.analyzeConversation = function (task, options) {
        return this.sendOperationRequest({ task: task, options: options }, analyzeConversationOperationSpec);
    };
    /**
     * Submit a collection of conversations for analysis. Specify one or more unique tasks to be executed.
     * @param task The collection of conversations to analyze and one or more tasks to execute.
     * @param options The options parameters.
     */
    ConversationAnalysisClient.prototype.beginConversationAnalysis = function (task, options) {
        return __awaiter(this, void 0, void 0, function () {
            var directSendOperation, sendOperation, lro, poller;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        directSendOperation = function (args, spec) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                return [2 /*return*/, this.sendOperationRequest(args, spec)];
                            });
                        }); };
                        sendOperation = function (args, spec) { return __awaiter(_this, void 0, void 0, function () {
                            var currentRawResponse, providedCallback, callback, updatedArgs, flatResponse;
                            var _a;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        currentRawResponse = undefined;
                                        providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                                        callback = function (rawResponse, flatResponse) {
                                            currentRawResponse = rawResponse;
                                            providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                                        };
                                        updatedArgs = __assign(__assign({}, args), { options: __assign(__assign({}, args.options), { onResponse: callback }) });
                                        return [4 /*yield*/, directSendOperation(updatedArgs, spec)];
                                    case 1:
                                        flatResponse = _b.sent();
                                        return [2 /*return*/, {
                                                flatResponse: flatResponse,
                                                rawResponse: {
                                                    statusCode: currentRawResponse.status,
                                                    body: currentRawResponse.parsedBody,
                                                    headers: currentRawResponse.headers.toJSON()
                                                }
                                            }];
                                }
                            });
                        }); };
                        lro = new lroImpl_1.LroImpl(sendOperation, { task: task, options: options }, conversationAnalysisOperationSpec);
                        poller = new core_lro_1.LroEngine(lro, {
                            resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                            intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
                        });
                        return [4 /*yield*/, poller.poll()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, poller];
                }
            });
        });
    };
    /**
     * Submit a collection of conversations for analysis. Specify one or more unique tasks to be executed.
     * @param task The collection of conversations to analyze and one or more tasks to execute.
     * @param options The options parameters.
     */
    ConversationAnalysisClient.prototype.beginConversationAnalysisAndWait = function (task, options) {
        return __awaiter(this, void 0, void 0, function () {
            var poller;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.beginConversationAnalysis(task, options)];
                    case 1:
                        poller = _a.sent();
                        return [2 /*return*/, poller.pollUntilDone()];
                }
            });
        });
    };
    return ConversationAnalysisClient;
}(coreClient.ServiceClient));
exports.ConversationAnalysisClient = ConversationAnalysisClient;
// Operation Specifications
var serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
var analyzeConversationOperationSpec = {
    path: "/:analyze-conversations",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.AnalyzeConversationTaskResult
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse,
            headersMapper: Mappers.ConversationAnalysisClientAnalyzeConversationExceptionHeaders
        }
    },
    requestBody: Parameters.task,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer: serializer
};
var conversationAnalysisOperationSpec = {
    path: "/analyze-conversations/jobs",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.AnalyzeConversationJobState
        },
        201: {
            bodyMapper: Mappers.AnalyzeConversationJobState
        },
        202: {
            bodyMapper: Mappers.AnalyzeConversationJobState
        },
        204: {
            bodyMapper: Mappers.AnalyzeConversationJobState
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.task1,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer: serializer
};
