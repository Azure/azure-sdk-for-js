/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export type AnalyzeActionUnion =
  | AnalyzeAction
  | AnalyzeTextEntityLinkingInput
  | AnalyzeTextEntityRecognitionInput
  | AnalyzeTextKeyPhraseExtractionInput
  | AnalyzeTextPiiEntitiesRecognitionInput
  | AnalyzeTextLanguageDetectionInput
  | AnalyzeTextSentimentAnalysisInput;
export type AnalyzeTextTaskResultUnion =
  | AnalyzeTextTaskResult
  | SentimentTaskResult
  | EntitiesTaskResult
  | EntityLinkingTaskResult
  | PiiTaskResult
  | KeyPhraseTaskResult
  | LanguageDetectionTaskResult;
export type AnalyzeBatchActionUnion =
  | AnalyzeBatchAction
  | CustomEntitiesLROTask
  | CustomSingleLabelClassificationLROTask
  | CustomMultiLabelClassificationLROTask
  | HealthcareLROTask
  | SentimentAnalysisLROTask
  | EntitiesLROTask
  | EntityLinkingLROTask
  | PiiLROTask
  | ExtractiveSummarizationLROTask
  | KeyPhraseLROTask
  | AbstractiveSummarizationLROTask;
export type AnalyzeTextLROResultUnion =
  | AnalyzeTextLROResult
  | EntityRecognitionLROResult
  | CustomEntityRecognitionLROResult
  | CustomSingleLabelClassificationLROResult
  | CustomMultiLabelClassificationLROResult
  | EntityLinkingLROResult
  | PiiEntityRecognitionLROResult
  | ExtractiveSummarizationLROResult
  | HealthcareLROResult
  | SentimentLROResult
  | KeyPhraseExtractionLROResult
  | AbstractiveSummarizationLROResult;

export interface AnalyzeAction {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind:
    | "EntityLinking"
    | "EntityRecognition"
    | "KeyPhraseExtraction"
    | "PiiEntityRecognition"
    | "LanguageDetection"
    | "SentimentAnalysis";
}

export interface AnalyzeTextTaskResult {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind:
    | "SentimentAnalysisResults"
    | "EntityRecognitionResults"
    | "EntityLinkingResults"
    | "PiiEntityRecognitionResults"
    | "KeyPhraseExtractionResults"
    | "LanguageDetectionResults";
}

/** Error response. */
export interface ErrorResponse {
  /** The error object. */
  error: ErrorModel;
}

/** The error object. */
export interface ErrorModel {
  /** Describes unknown properties. The value of an unknown property can be of "any" type. */
  [property: string]: any;
  /** One of a server-defined set of error codes. */
  code: ErrorCode;
  /** A human-readable representation of the error. */
  message: string;
  /** The target of the error. */
  target?: string;
  /** An array of details about specific errors that led to this reported error. */
  details?: ErrorModel[];
  /** An object containing more specific information than the current object about the error. */
  innererror?: InnerErrorModel;
}

/** An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses. */
export interface InnerErrorModel {
  /** One of a server-defined set of error codes. */
  code: InnerErrorCode;
  /** Error message. */
  message: string;
  /** Error details. */
  details?: { [propertyName: string]: string };
  /** Error target. */
  target?: string;
  /** An object containing more specific information than the current object about the error. */
  innererror?: InnerErrorModel;
}

export interface AnalyzeTextJobsInput {
  /** Optional display name for the analysis job. */
  displayName?: string;
  analysisInput: MultiLanguageAnalysisInput;
  /** The set of tasks to execute on the input documents. */
  tasks: AnalyzeBatchActionUnion[];
}

export interface MultiLanguageAnalysisInput {
  documents?: TextDocumentInput[];
}

/** An object representing an individual text document to be analyzed by the Language service. The document contains a unique document ID, the full text of the document, and the language of the document's text. */
export interface TextDocumentInput {
  /** A unique, non-empty document identifier. */
  id: string;
  /** The input text to process. */
  text: string;
  /** (Optional) This is the 2 letter ISO 639-1 representation of a language. For example, use "en" for English; "es" for Spanish etc. If not set, use "en" for English as default. */
  language?: string;
}

/** The State of a batched action */
export interface BatchActionState {
  /** The name of the action */
  actionName?: string;
}

export interface JobState {
  displayName?: string;
  createdOn: Date;
  expiresOn?: Date;
  id: string;
  modifiedOn: Date;
  status: OperationStatus;
  errors?: ErrorModel[];
  nextLink?: string;
}

export interface TasksState {
  tasks: TasksStateTasks;
}

export interface TasksStateTasks {
  completed: number;
  failed: number;
  inProgress: number;
  total: number;
  items?: AnalyzeTextLROResultUnion[];
}

export interface TaskState {
  lastUpdateDateTime: Date;
  status: State;
}

export interface AnalyzeTextJobStatistics {
  /** if includeStatistics=true was specified in the request this field will contain information about the request payload. */
  statistics?: TextDocumentBatchStatistics;
}

/** if includeStatistics=true was specified in the request this field will contain information about the request payload. */
export interface TextDocumentBatchStatistics {
  /** Number of documents submitted in the request. */
  documentCount: number;
  /** Number of valid documents. This excludes empty, over-size limit or non-supported languages documents. */
  validDocumentCount: number;
  /** Number of invalid documents. This includes empty, over-size limit or non-supported languages documents. */
  erroneousDocumentCount: number;
  /** Number of transactions for the request. */
  transactionCount: number;
}

export interface LanguageDetectionAnalysisInput {
  documents?: LanguageDetectionInput[];
}

/** An input to the language detection operation. This object specifies a unique document id, as well as the full text of a document and a hint indicating the document's country of origin to assist the Language predictive model in detecting the document's language. */
export interface LanguageDetectionInput {
  /** Unique, non-empty document identifier. */
  id: string;
  /** Full text of the input document. */
  text: string;
  /** A hint indicating the document's country of origin to assist the Language predictive model in detecting the document's language. */
  countryHint?: string;
}

/** Configuration common to all actions. */
export interface ActionCommon {
  /**
   * If set to true, you opt-out of having your text input logged for troubleshooting. By default, Cognitive Language Service logs your input text for 48 hours, solely to allow for troubleshooting issues. Setting this parameter to true, disables in logging and may limit our ability to remediate issues that occur.
   *
   * Default is false.
   */
  disableServiceLogs?: boolean;
}

export interface CustomResult {
  /** Errors by document id. */
  errors: DocumentError[];
  /** if includeStatistics=true was specified in the request this field will contain information about the request payload. */
  statistics?: TextDocumentBatchStatistics;
  /** This field indicates the project name for the model. */
  projectName: string;
  /** This field indicates the deployment name for the model. */
  deploymentName: string;
}

/** Contains details of errors encountered during a job execution. */
export interface DocumentError {
  /** The ID of the input document. */
  id: string;
  /** Error encountered. */
  error: ErrorModel;
}

/** A word or phrase identified as an entity that is categorized within a taxonomy of types. The set of categories recognized by the Language service is described at https://docs.microsoft.com/azure/cognitive-services/language-service/named-entity-recognition/concepts/named-entity-categories . */
export interface Entity {
  /** Entity text as appears in the request. */
  text: string;
  /** Entity type. */
  category: string;
  /** (Optional) Entity sub type. */
  subCategory?: string;
  /** Start position for the entity text. Use of different 'stringIndexType' values can affect the offset returned. */
  offset: number;
  /** Length for the entity text. Use of different 'stringIndexType' values can affect the length returned. */
  length: number;
  /** Confidence score between 0 and 1 of the extracted entity. */
  confidenceScore: number;
}

export interface DocumentResult {
  /** Unique, non-empty document identifier. */
  id: string;
  /** Warnings encountered while processing document. */
  warnings: DocumentWarning[];
  /** if showStats=true was specified in the request this field will contain information about the document payload. */
  statistics?: TextDocumentStatistics;
}

/** Represents a warning encountered while processing a document. */
export interface DocumentWarning {
  /** Error code. */
  code: WarningCode;
  /** Warning message. */
  message: string;
}

/** if includeStatistics=true was specified in the request this field will contain information about the document payload. */
export interface TextDocumentStatistics {
  /** Number of text elements recognized in the document. */
  characterCount: number;
  /** Number of transactions for the document. */
  transactionCount: number;
}

/** A classification result from a custom classify document single category action */
export interface ClassificationCategory {
  /** Classification type. */
  category: string;
  /** Confidence score between 0 and 1 of the recognized class. */
  confidenceScore: number;
}

/** A type representing a reference for the healthcare entity into a specific entity catalog. */
export interface HealthcareEntity {
  /** Entity text as appears in the request. */
  text: string;
  /** Healthcare Entity Category. */
  category: HealthcareEntityCategory;
  /** (Optional) Entity sub type. */
  subCategory?: string;
  /** Start position for the entity text. Use of different 'stringIndexType' values can affect the offset returned. */
  offset: number;
  /** Length for the entity text. Use of different 'stringIndexType' values can affect the length returned. */
  length: number;
  /** Confidence score between 0 and 1 of the extracted entity. */
  confidenceScore: number;
  /** An object that describes metadata about the healthcare entity such as whether it is hypothetical or conditional. */
  assertion?: HealthcareAssertion;
  /** Preferred name for the entity. Example: 'histologically' would have a 'name' of 'histologic'. */
  normalizedText?: string;
  /** Entity references in known data sources. */
  dataSources?: EntityDataSource[];
}

/** An object that describes metadata about the healthcare entity such as whether it is hypothetical or conditional. */
export interface HealthcareAssertion {
  /** Describes any conditionality on the entity. */
  conditionality?: EntityConditionality;
  /** Describes the entities certainty and polarity. */
  certainty?: EntityCertainty;
  /** Describes if the entity is the subject of the text or if it describes someone else. */
  association?: EntityAssociation;
}

/** A type representing a reference for the healthcare entity into a specific entity catalog. */
export interface EntityDataSource {
  /** Entity Catalog. Examples include: UMLS, CHV, MSH, etc. */
  name: string;
  /** Entity id in the given source catalog. */
  entityId: string;
}

/** Every relation is an entity graph of a certain relationType, where all entities are connected and have specific roles within the relation context. */
export interface HealthcareRelation {
  /** Type of relation. Examples include: `DosageOfMedication` or 'FrequencyOfMedication', etc. */
  relationType: RelationType;
  /** Confidence score between 0 and 1 of the extracted relation. */
  confidenceScore?: number;
  /** The entities in the relation. */
  entities: HealthcareRelationEntity[];
}

export interface HealthcareRelationEntity {
  /** Reference link object, using a JSON pointer RFC 6901 (URI Fragment Identifier Representation), pointing to the entity . */
  ref: string;
  /** Role of entity in the relationship. For example: 'CD20-positive diffuse large B-cell lymphoma' has the following entities with their roles in parenthesis:  CD20 (GeneOrProtein), Positive (Expression), diffuse large B-cell lymphoma (Diagnosis). */
  role: string;
}

export interface PreBuiltResult {
  /** Errors by document id. */
  errors: DocumentError[];
  /** if includeStatistics=true was specified in the request this field will contain information about the request payload. */
  statistics?: TextDocumentBatchStatistics;
  /** This field indicates which model is used for scoring. */
  modelVersion: string;
}

/** Represents the confidence scores between 0 and 1 across all sentiment classes: positive, neutral, negative. */
export interface SentimentConfidenceScores {
  /** Confidence score for positive sentiment */
  positive: number;
  /** Confidence score for neutral sentiment */
  neutral: number;
  /** Confidence score for negative sentiment */
  negative: number;
}

/** The predicted sentiment for a given span of text. For more information regarding text sentiment, seehttps://docs.microsoft.com/azure/cognitive-services/language-service/sentiment-opinion-mining/overview. */
export interface SentenceSentiment {
  /** The sentence text. */
  text: string;
  /** The predicted Sentiment for the sentence. */
  sentiment: SentenceSentimentLabel;
  /** The sentiment confidence score between 0 and 1 for the sentence for all classes. */
  confidenceScores: SentimentConfidenceScores;
  /** The sentence offset from the start of the document. */
  offset: number;
  /** The length of the sentence. */
  length: number;
  /** The array of sentence targets for the sentence. */
  targets?: SentenceTarget[];
  /** The array of assessments for the sentence. */
  assessments?: AssessmentSentiment[];
}

export interface SentenceTarget {
  /** Targeted sentiment in the sentence. */
  sentiment: TokenSentimentLabel;
  /** Target sentiment confidence scores for the target in the sentence. */
  confidenceScores: TargetConfidenceScores;
  /** The target offset from the start of the sentence. */
  offset: number;
  /** The length of the target. */
  length: number;
  /** The target text detected. */
  text: string;
  /** The array of either assessment or target objects which is related to the target. */
  relations: TargetRelation[];
}

/** Represents the confidence scores across all sentiment classes: positive and negative. */
export interface TargetConfidenceScores {
  /** Confidence score for positive sentiment */
  positive: number;
  /** Confidence score for negative sentiment */
  negative: number;
}

export interface TargetRelation {
  /** The type related to the target. */
  relationType: TargetRelationType;
  /** The JSON pointer indicating the linked object. */
  ref: string;
}

/** An object that contains the predicted sentiment, confidence scores and other information about an assessment of a target. For example, in the sentence "The food is good", the assessment of the target 'food' is 'good'. */
export interface AssessmentSentiment {
  /** Assessment sentiment in the sentence. */
  sentiment: TokenSentimentLabel;
  /** Assessment sentiment confidence scores in the sentence. */
  confidenceScores: TargetConfidenceScores;
  /** The assessment offset from the start of the sentence. */
  offset: number;
  /** The length of the assessment. */
  length: number;
  /** The assessment text detected. */
  text: string;
  /** The indicator representing if the assessment is negated. */
  isNegated: boolean;
}

/** A word or phrase identified as a well-known entity within a database, including its formal (disambiguated) name and a link to the entity information within the source database. */
export interface LinkedEntity {
  /** Entity Linking formal name. */
  name: string;
  /** List of instances this entity appears in the text. */
  matches: Match[];
  /** Language used in the data source. */
  language: string;
  /** Unique identifier of the recognized entity from the data source. */
  dataSourceEntityId?: string;
  /** URL for the entity's page from the data source. */
  url: string;
  /** Data source used to extract entity linking, such as Wiki/Bing etc. */
  dataSource: string;
  /** Bing Entity Search API unique identifier of the recognized entity. */
  bingEntitySearchApiId?: string;
}

/** Details about the specific substring in a document that refers to a linked entity identified by the Language model. */
export interface Match {
  /** If a well known item is recognized, a decimal number denoting the confidence level between 0 and 1 will be returned. */
  confidenceScore: number;
  /** Entity text as appears in the request. */
  text: string;
  /** Start position for the entity match text. */
  offset: number;
  /** Length for the entity match text. */
  length: number;
}

/** A sentence that is part of the extracted summary. */
export interface SummarySentence {
  /** The extracted sentence text. */
  text: string;
  /** A double value representing the relevance of the sentence within the summary. Higher values indicate higher importance. */
  rankScore: number;
  /** The sentence offset from the start of the document, based on the value of the parameter StringIndexType. */
  offset: number;
  /** The length of the sentence. */
  length: number;
}

/** Information about the language of a document as identified by the Language service. */
export interface DetectedLanguage {
  /** Long name of a detected language (e.g. English, French). */
  name: string;
  /** A two letter representation of the detected language according to the ISO 639-1 standard (e.g. en, fr). */
  iso6391Name: string;
  /** A confidence score between 0 and 1. Scores close to 1 indicate 100% certainty that the identified language is true. */
  confidenceScore: number;
}

export interface Pagination {
  nextLink?: string;
}

export interface JobErrors {
  errors?: ErrorModel[];
}

/** Supported parameters for an Abstractive Summarization task. */
export interface AbstractiveSummarizationTaskParametersBase {
  /** It controls the approximate number of sentences in the output summaries. */
  sentenceCount?: number;
  /**
   * Specifies the measurement unit used to calculate the offset and length properties. For a list of possible values, see {@link KnownStringIndexType}.
   *
   * The default is the JavaScript's default which is "Utf16CodeUnit".
   */
  stringIndexType?: StringIndexType;
}

/** An object representing the summarization results of each document. */
export interface AbstractiveSummarizationResultBase {
  /** Response by document */
  documents: AbstractiveSummaryDocumentResult[];
}

/** An object representing a single summary with context for given document. */
export interface AbstractiveSummary {
  /** The text of the summary. */
  text: string;
  /** The context list of the summary. */
  contexts: SummaryContext[];
}

/** The context of the summary. */
export interface SummaryContext {
  /** Start position for the context. Use of different 'stringIndexType' values can affect the offset returned. */
  offset: number;
  /** The length of the context. Use of different 'stringIndexType' values can affect the length returned. */
  length: number;
}

export interface AnalyzeTextEntityLinkingInput extends AnalyzeAction {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "EntityLinking";
  analysisInput?: MultiLanguageAnalysisInput;
  /** Options for an entity linking action. */
  parameters?: EntityLinkingAction;
}

export interface AnalyzeTextEntityRecognitionInput extends AnalyzeAction {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "EntityRecognition";
  analysisInput?: MultiLanguageAnalysisInput;
  /** Options for an entity recognition action. */
  parameters?: EntityRecognitionAction;
}

export interface AnalyzeTextKeyPhraseExtractionInput extends AnalyzeAction {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "KeyPhraseExtraction";
  analysisInput?: MultiLanguageAnalysisInput;
  /** Options for a key phrase recognition action. */
  parameters?: KeyPhraseExtractionAction;
}

export interface AnalyzeTextPiiEntitiesRecognitionInput extends AnalyzeAction {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "PiiEntityRecognition";
  analysisInput?: MultiLanguageAnalysisInput;
  /** Options for a Pii entity recognition action. */
  parameters?: PiiEntityRecognitionAction;
}

export interface AnalyzeTextLanguageDetectionInput extends AnalyzeAction {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "LanguageDetection";
  analysisInput?: LanguageDetectionAnalysisInput;
  /** Options for a language detection action. */
  parameters?: LanguageDetectionAction;
}

export interface AnalyzeTextSentimentAnalysisInput extends AnalyzeAction {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "SentimentAnalysis";
  analysisInput?: MultiLanguageAnalysisInput;
  /** Options for a sentiment analysis action. */
  parameters?: SentimentAnalysisAction;
}

export interface SentimentTaskResult extends AnalyzeTextTaskResult {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "SentimentAnalysisResults";
  results: SentimentResponse;
}

export interface EntitiesTaskResult extends AnalyzeTextTaskResult {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "EntityRecognitionResults";
  results: EntitiesResult;
}

export interface EntityLinkingTaskResult extends AnalyzeTextTaskResult {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "EntityLinkingResults";
  results: EntityLinkingResult;
}

export interface PiiTaskResult extends AnalyzeTextTaskResult {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "PiiEntityRecognitionResults";
  results: PiiResult;
}

export interface KeyPhraseTaskResult extends AnalyzeTextTaskResult {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "KeyPhraseExtractionResults";
  results: KeyPhraseResult;
}

export interface LanguageDetectionTaskResult extends AnalyzeTextTaskResult {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "LanguageDetectionResults";
  results: LanguageDetectionResult;
}

export interface AnalyzeBatchAction extends BatchActionState {
  /** Enumeration of supported long-running Text Analysis tasks. */
  kind: AnalyzeTextLROTaskKind;
}

export interface AnalyzeTextLROResult extends TaskState, BatchActionState {
  /** Enumeration of supported Text Analysis long-running operation task results. */
  kind: AnalyzeTextLROResultsKind;
}

export interface AnalyzeTextJobState
  extends JobState,
    TasksState,
    AnalyzeTextJobStatistics {}

/** Configuration common to all actions that use prebuilt models. */
export interface ActionPrebuilt extends ActionCommon {
  /** The version of the model to be used by the action. */
  modelVersion?: string;
}

/** Configuration common to all actions that use custom models. */
export interface ActionCustom extends ActionCommon {
  /** The project name for the model to be used by the action. */
  projectName: string;
  /** The deployment name for the model to be used by the action. */
  deploymentName: string;
}

export interface CustomEntitiesResult extends CustomResult {
  /** Response by document */
  documents: CustomEntitiesResultDocumentsItem[];
}

export interface CustomLabelClassificationResult extends CustomResult {
  /** Response by document */
  documents: CustomLabelClassificationResultDocumentsItem[];
}

export interface EntitiesDocumentResult extends DocumentResult {
  /** Recognized entities in the document. */
  entities: Entity[];
}

export interface ClassificationDocumentResult extends DocumentResult {
  classifications: ClassificationCategory[];
}

export interface HealthcareEntitiesDocumentResult extends DocumentResult {
  /** Healthcare entities. */
  entities: HealthcareEntity[];
  /** Healthcare entity relations. */
  relations: HealthcareRelation[];
}

export interface SentimentDocumentResult extends DocumentResult {
  /** Predicted sentiment for document (Negative, Neutral, Positive, or Mixed). */
  sentiment: DocumentSentimentLabel;
  /** Document level sentiment confidence scores between 0 and 1 for each sentiment class. */
  confidenceScores: SentimentConfidenceScores;
  /** Sentence level sentiment analysis. */
  sentences: SentenceSentiment[];
}

export interface LinkedEntitiesDocumentResult extends DocumentResult {
  /** Recognized well known entities in the document. */
  entities: LinkedEntity[];
}

export interface PiiEntitiesDocumentResult extends DocumentResult {
  /** Returns redacted text. */
  redactedText: string;
  /** Recognized entities in the document. */
  entities: Entity[];
}

export interface ExtractedSummaryDocumentResult extends DocumentResult {
  /** A ranked list of sentences representing the extracted summary. */
  sentences: SummarySentence[];
}

export interface KeyPhrasesDocumentResult extends DocumentResult {
  /** A list of representative words or phrases. The number of key phrases returned is proportional to the number of words in the input document. */
  keyPhrases: string[];
}

export interface LanguageDetectionDocumentResult extends DocumentResult {
  /** Detected Language. */
  detectedLanguage: DetectedLanguage;
}

/** An object representing the summarization result of a single document. */
export interface AbstractiveSummaryDocumentResult extends DocumentResult {
  /** A list of abstractive summaries. */
  summaries: AbstractiveSummary[];
}

export interface HealthcareResult extends PreBuiltResult {
  documents: HealthcareResultDocumentsItem[];
}

export interface SentimentResponse extends PreBuiltResult {
  /** Sentiment analysis per document. */
  documents: SentimentResponseDocumentsItem[];
}

export interface EntitiesResult extends PreBuiltResult {
  /** Response by document */
  documents: EntitiesResultDocumentsItem[];
}

export interface EntityLinkingResult extends PreBuiltResult {
  /** Response by document */
  documents: EntityLinkingResultDocumentsItem[];
}

export interface PiiResult extends PreBuiltResult {
  /** Response by document */
  documents: PiiResultDocumentsItem[];
}

export interface ExtractiveSummarizationResult extends PreBuiltResult {
  /** Response by document */
  documents: ExtractedSummaryDocumentResult[];
}

export interface KeyPhraseResult extends PreBuiltResult {
  /** Response by document */
  documents: KeyPhraseResultDocumentsItem[];
}

export interface LanguageDetectionResult extends PreBuiltResult {
  /** Response by document */
  documents: LanguageDetectionDocumentResult[];
}

/** An object representing the pre-build summarization results of each document. */
export interface AbstractiveSummarizationResult
  extends AbstractiveSummarizationResultBase,
    PreBuiltResult {}

/** Supported parameters for the pre-build Abstractive Summarization task. */
export interface AbstractiveSummarizationAction
  extends AbstractiveSummarizationTaskParametersBase,
    ActionPrebuilt {}

/** Use custom models to ease the process of information extraction from unstructured documents like contracts or financial documents */
export interface CustomEntitiesLROTask extends AnalyzeBatchAction {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "CustomEntityRecognition";
  /** Supported parameters for a Custom Entities task. */
  parameters?: CustomEntityRecognitionAction;
}

/** Use custom models to classify text into single label taxonomy */
export interface CustomSingleLabelClassificationLROTask
  extends AnalyzeBatchAction {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "CustomSingleLabelClassification";
  /** Options for a single-label classification custom action */
  parameters?: CustomSingleLabelClassificationAction;
}

/** Use custom models to classify text into multi label taxonomy */
export interface CustomMultiLabelClassificationLROTask
  extends AnalyzeBatchAction {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "CustomMultiLabelClassification";
  /** Options for a multi-label classification custom action */
  parameters?: CustomMultiLabelClassificationAction;
}

export interface HealthcareLROTask extends AnalyzeBatchAction {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "Healthcare";
  /** Supported parameters for a Healthcare task. */
  parameters?: HealthcareAction;
}

/** An object representing the task definition for a Sentiment Analysis task. */
export interface SentimentAnalysisLROTask extends AnalyzeBatchAction {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "SentimentAnalysis";
  /** Options for a sentiment analysis action. */
  parameters?: SentimentAnalysisAction;
}

/** An object representing the task definition for an Entities Recognition task. */
export interface EntitiesLROTask extends AnalyzeBatchAction {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "EntityRecognition";
  /** Options for an entity recognition action. */
  parameters?: EntityRecognitionAction;
}

/** An object representing the task definition for an Entity Linking task. */
export interface EntityLinkingLROTask extends AnalyzeBatchAction {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "EntityLinking";
  /** Options for an entity linking action. */
  parameters?: EntityLinkingAction;
}

/** An object representing the task definition for a PII Entities Recognition task. */
export interface PiiLROTask extends AnalyzeBatchAction {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "PiiEntityRecognition";
  /** Options for a Pii entity recognition action. */
  parameters?: PiiEntityRecognitionAction;
}

/** An object representing the task definition for an Extractive Summarization task. */
export interface ExtractiveSummarizationLROTask extends AnalyzeBatchAction {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "ExtractiveSummarization";
  /** Supported parameters for an Extractive Summarization task. */
  parameters?: ExtractiveSummarizationAction;
}

/** An object representing the task definition for a Key Phrase Extraction task. */
export interface KeyPhraseLROTask extends AnalyzeBatchAction {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "KeyPhraseExtraction";
  /** Options for a key phrase recognition action. */
  parameters?: KeyPhraseExtractionAction;
}

/** An object representing the task definition for an Abstractive Summarization task. */
export interface AbstractiveSummarizationLROTask extends AnalyzeBatchAction {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "AbstractiveSummarization";
  /** Supported parameters for the pre-build Abstractive Summarization task. */
  parameters: AbstractiveSummarizationAction;
}

export interface EntityRecognitionLROResult extends AnalyzeTextLROResult {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "EntityRecognitionLROResults";
  results: EntitiesResult;
}

export interface CustomEntityRecognitionLROResult extends AnalyzeTextLROResult {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "CustomEntityRecognitionLROResults";
  results: CustomEntitiesResult;
}

export interface CustomSingleLabelClassificationLROResult
  extends AnalyzeTextLROResult {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "CustomSingleLabelClassificationLROResults";
  results: CustomLabelClassificationResult;
}

export interface CustomMultiLabelClassificationLROResult
  extends AnalyzeTextLROResult {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "CustomMultiLabelClassificationLROResults";
  results: CustomLabelClassificationResult;
}

export interface EntityLinkingLROResult extends AnalyzeTextLROResult {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "EntityLinkingLROResults";
  results: EntityLinkingResult;
}

export interface PiiEntityRecognitionLROResult extends AnalyzeTextLROResult {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "PiiEntityRecognitionLROResults";
  results: PiiResult;
}

export interface ExtractiveSummarizationLROResult extends AnalyzeTextLROResult {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "ExtractiveSummarizationLROResults";
  results: ExtractiveSummarizationResult;
}

export interface HealthcareLROResult extends AnalyzeTextLROResult {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "HealthcareLROResults";
  results: HealthcareResult;
}

export interface SentimentLROResult extends AnalyzeTextLROResult {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "SentimentAnalysisLROResults";
  results: SentimentResponse;
}

export interface KeyPhraseExtractionLROResult extends AnalyzeTextLROResult {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "KeyPhraseExtractionLROResults";
  results: KeyPhraseResult;
}

/** An object representing the results for an Abstractive Summarization task. */
export interface AbstractiveSummarizationLROResult
  extends AnalyzeTextLROResult {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "AbstractiveSummarizationLROResults";
  /** An object representing the pre-build summarization results of each document. */
  results: AbstractiveSummarizationResult;
}

/** Options for an entity linking action. */
export interface EntityLinkingAction extends ActionPrebuilt {
  /**
   * Specifies the measurement unit used to calculate the offset and length properties. For a list of possible values, see {@link KnownStringIndexType}.
   *
   * The default is the JavaScript's default which is "Utf16CodeUnit".
   */
  stringIndexType?: StringIndexType;
}

/** Options for an entity recognition action. */
export interface EntityRecognitionAction extends ActionPrebuilt {
  /**
   * Specifies the measurement unit used to calculate the offset and length properties. For a list of possible values, see {@link KnownStringIndexType}.
   *
   * The default is the JavaScript's default which is "Utf16CodeUnit".
   */
  stringIndexType?: StringIndexType;
}

/** Options for a key phrase recognition action. */
export interface KeyPhraseExtractionAction extends ActionPrebuilt {}

/** Options for a Pii entity recognition action. */
export interface PiiEntityRecognitionAction extends ActionPrebuilt {
  /**
   * Filters entities to ones only included in the specified domain (e.g., if set to `Phi`, only entities in the Protected Healthcare Information domain will be returned). For a list of possible domains, see {@link KnownPiiEntityDomain}.
   *
   * See {@link https://aka.ms/tanerpii the service documentation} for more information.
   */
  domainFilter?: PiiEntityDomain;
  /** Filters entities to ones only included in the specified array of categories. For a list of possible categories, see {@link KnownPiiCategory} */
  categoriesFilter?: PiiEntityCategory[];
  /**
   * Specifies the measurement unit used to calculate the offset and length properties. For a list of possible values, see {@link KnownStringIndexType}.
   *
   * The default is the JavaScript's default which is "Utf16CodeUnit".
   */
  stringIndexType?: StringIndexType;
}

/** Options for a language detection action. */
export interface LanguageDetectionAction extends ActionPrebuilt {}

/** Options for a sentiment analysis action. */
export interface SentimentAnalysisAction extends ActionPrebuilt {
  /** Enables performing opinion mining on the input documents, a more  granular analysis around the aspects of a product or service (also known as aspect-based sentiment analysis). If set to true, {@link SentenceSentiment.opinions} will contain the results of this analysis. See {@link https://docs.microsoft.com/azure/cognitive-services/language-service/sentiment-opinion-mining/overview#opinion-mining the service documentation} for more information. */
  includeOpinionMining?: boolean;
  /**
   * Specifies the measurement unit used to calculate the offset and length properties. For a list of possible values, see {@link KnownStringIndexType}.
   *
   * The default is the JavaScript's default which is "Utf16CodeUnit".
   */
  stringIndexType?: StringIndexType;
}

/** Supported parameters for a Healthcare task. */
export interface HealthcareAction extends ActionPrebuilt {
  /**
   * Specifies the measurement unit used to calculate the offset and length properties. For a list of possible values, see {@link KnownStringIndexType}.
   *
   * The default is the JavaScript's default which is "Utf16CodeUnit".
   */
  stringIndexType?: StringIndexType;
}

/** Supported parameters for an Extractive Summarization task. */
export interface ExtractiveSummarizationAction extends ActionPrebuilt {
  /** The max number of sentences to be part of the summary. */
  maxSentenceCount?: number;
  /** The sorting criteria to use for the results of Extractive Summarization. */
  orderBy?: ExtractiveSummarizationOrderingCriteria;
  /**
   * Specifies the measurement unit used to calculate the offset and length properties. For a list of possible values, see {@link KnownStringIndexType}.
   *
   * The default is the JavaScript's default which is "Utf16CodeUnit".
   */
  stringIndexType?: StringIndexType;
}

/** Supported parameters for a Custom Entities task. */
export interface CustomEntityRecognitionAction extends ActionCustom {
  /**
   * Specifies the measurement unit used to calculate the offset and length properties. For a list of possible values, see {@link KnownStringIndexType}.
   *
   * The default is the JavaScript's default which is "Utf16CodeUnit".
   */
  stringIndexType?: StringIndexType;
}

/** Options for a single-label classification custom action */
export interface CustomSingleLabelClassificationAction extends ActionCustom {}

/** Options for a multi-label classification custom action */
export interface CustomMultiLabelClassificationAction extends ActionCustom {}

export interface CustomEntitiesResultDocumentsItem
  extends EntitiesDocumentResult {}

export interface EntitiesResultDocumentsItem extends EntitiesDocumentResult {}

export interface CustomLabelClassificationResultDocumentsItem
  extends ClassificationDocumentResult {}

export interface HealthcareResultDocumentsItem
  extends HealthcareEntitiesDocumentResult {}

export interface SentimentResponseDocumentsItem
  extends SentimentDocumentResult {}

export interface EntityLinkingResultDocumentsItem
  extends LinkedEntitiesDocumentResult {}

export interface PiiResultDocumentsItem extends PiiEntitiesDocumentResult {}

export interface KeyPhraseResultDocumentsItem
  extends KeyPhrasesDocumentResult {}

/** Defines headers for GeneratedClient_analyzeBatch operation. */
export interface GeneratedClientAnalyzeBatchHeaders {
  operationLocation?: string;
}

/** Defines headers for AnalyzeText_cancelJob operation. */
export interface AnalyzeTextCancelJobHeaders {
  operationLocation?: string;
}

/** Known values of {@link AnalyzeTextTaskKind} that the service accepts. */
export enum KnownAnalyzeTextTaskKind {
  /** SentimentAnalysis */
  SentimentAnalysis = "SentimentAnalysis",
  /** EntityRecognition */
  EntityRecognition = "EntityRecognition",
  /** PiiEntityRecognition */
  PiiEntityRecognition = "PiiEntityRecognition",
  /** KeyPhraseExtraction */
  KeyPhraseExtraction = "KeyPhraseExtraction",
  /** LanguageDetection */
  LanguageDetection = "LanguageDetection",
  /** EntityLinking */
  EntityLinking = "EntityLinking"
}

/**
 * Defines values for AnalyzeTextTaskKind. \
 * {@link KnownAnalyzeTextTaskKind} can be used interchangeably with AnalyzeTextTaskKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SentimentAnalysis** \
 * **EntityRecognition** \
 * **PiiEntityRecognition** \
 * **KeyPhraseExtraction** \
 * **LanguageDetection** \
 * **EntityLinking**
 */
export type AnalyzeTextTaskKind = string;

/** Known values of {@link AnalyzeTextTaskResultsKind} that the service accepts. */
export enum KnownAnalyzeTextTaskResultsKind {
  /** SentimentAnalysisResults */
  SentimentAnalysisResults = "SentimentAnalysisResults",
  /** EntityRecognitionResults */
  EntityRecognitionResults = "EntityRecognitionResults",
  /** PiiEntityRecognitionResults */
  PiiEntityRecognitionResults = "PiiEntityRecognitionResults",
  /** KeyPhraseExtractionResults */
  KeyPhraseExtractionResults = "KeyPhraseExtractionResults",
  /** LanguageDetectionResults */
  LanguageDetectionResults = "LanguageDetectionResults",
  /** EntityLinkingResults */
  EntityLinkingResults = "EntityLinkingResults"
}

/**
 * Defines values for AnalyzeTextTaskResultsKind. \
 * {@link KnownAnalyzeTextTaskResultsKind} can be used interchangeably with AnalyzeTextTaskResultsKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SentimentAnalysisResults** \
 * **EntityRecognitionResults** \
 * **PiiEntityRecognitionResults** \
 * **KeyPhraseExtractionResults** \
 * **LanguageDetectionResults** \
 * **EntityLinkingResults**
 */
export type AnalyzeTextTaskResultsKind = string;

/** Known values of {@link ErrorCode} that the service accepts. */
export enum KnownErrorCode {
  /** InvalidRequest */
  InvalidRequest = "InvalidRequest",
  /** InvalidArgument */
  InvalidArgument = "InvalidArgument",
  /** Unauthorized */
  Unauthorized = "Unauthorized",
  /** Forbidden */
  Forbidden = "Forbidden",
  /** NotFound */
  NotFound = "NotFound",
  /** ProjectNotFound */
  ProjectNotFound = "ProjectNotFound",
  /** OperationNotFound */
  OperationNotFound = "OperationNotFound",
  /** AzureCognitiveSearchNotFound */
  AzureCognitiveSearchNotFound = "AzureCognitiveSearchNotFound",
  /** AzureCognitiveSearchIndexNotFound */
  AzureCognitiveSearchIndexNotFound = "AzureCognitiveSearchIndexNotFound",
  /** TooManyRequests */
  TooManyRequests = "TooManyRequests",
  /** AzureCognitiveSearchThrottling */
  AzureCognitiveSearchThrottling = "AzureCognitiveSearchThrottling",
  /** AzureCognitiveSearchIndexLimitReached */
  AzureCognitiveSearchIndexLimitReached = "AzureCognitiveSearchIndexLimitReached",
  /** InternalServerError */
  InternalServerError = "InternalServerError",
  /** ServiceUnavailable */
  ServiceUnavailable = "ServiceUnavailable",
  /** Timeout */
  Timeout = "Timeout",
  /** QuotaExceeded */
  QuotaExceeded = "QuotaExceeded",
  /** Conflict */
  Conflict = "Conflict",
  /** Warning */
  Warning = "Warning"
}

/**
 * Defines values for ErrorCode. \
 * {@link KnownErrorCode} can be used interchangeably with ErrorCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **InvalidRequest** \
 * **InvalidArgument** \
 * **Unauthorized** \
 * **Forbidden** \
 * **NotFound** \
 * **ProjectNotFound** \
 * **OperationNotFound** \
 * **AzureCognitiveSearchNotFound** \
 * **AzureCognitiveSearchIndexNotFound** \
 * **TooManyRequests** \
 * **AzureCognitiveSearchThrottling** \
 * **AzureCognitiveSearchIndexLimitReached** \
 * **InternalServerError** \
 * **ServiceUnavailable** \
 * **Timeout** \
 * **QuotaExceeded** \
 * **Conflict** \
 * **Warning**
 */
export type ErrorCode = string;

/** Known values of {@link InnerErrorCode} that the service accepts. */
export enum KnownInnerErrorCode {
  /** InvalidRequest */
  InvalidRequest = "InvalidRequest",
  /** InvalidParameterValue */
  InvalidParameterValue = "InvalidParameterValue",
  /** KnowledgeBaseNotFound */
  KnowledgeBaseNotFound = "KnowledgeBaseNotFound",
  /** AzureCognitiveSearchNotFound */
  AzureCognitiveSearchNotFound = "AzureCognitiveSearchNotFound",
  /** AzureCognitiveSearchThrottling */
  AzureCognitiveSearchThrottling = "AzureCognitiveSearchThrottling",
  /** ExtractionFailure */
  ExtractionFailure = "ExtractionFailure",
  /** InvalidRequestBodyFormat */
  InvalidRequestBodyFormat = "InvalidRequestBodyFormat",
  /** EmptyRequest */
  EmptyRequest = "EmptyRequest",
  /** MissingInputDocuments */
  MissingInputDocuments = "MissingInputDocuments",
  /** InvalidDocument */
  InvalidDocument = "InvalidDocument",
  /** ModelVersionIncorrect */
  ModelVersionIncorrect = "ModelVersionIncorrect",
  /** InvalidDocumentBatch */
  InvalidDocumentBatch = "InvalidDocumentBatch",
  /** UnsupportedLanguageCode */
  UnsupportedLanguageCode = "UnsupportedLanguageCode",
  /** InvalidCountryHint */
  InvalidCountryHint = "InvalidCountryHint"
}

/**
 * Defines values for InnerErrorCode. \
 * {@link KnownInnerErrorCode} can be used interchangeably with InnerErrorCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **InvalidRequest** \
 * **InvalidParameterValue** \
 * **KnowledgeBaseNotFound** \
 * **AzureCognitiveSearchNotFound** \
 * **AzureCognitiveSearchThrottling** \
 * **ExtractionFailure** \
 * **InvalidRequestBodyFormat** \
 * **EmptyRequest** \
 * **MissingInputDocuments** \
 * **InvalidDocument** \
 * **ModelVersionIncorrect** \
 * **InvalidDocumentBatch** \
 * **UnsupportedLanguageCode** \
 * **InvalidCountryHint**
 */
export type InnerErrorCode = string;

/** Known values of {@link AnalyzeTextLROTaskKind} that the service accepts. */
export enum KnownAnalyzeTextLROTaskKind {
  /** SentimentAnalysis */
  SentimentAnalysis = "SentimentAnalysis",
  /** EntityRecognition */
  EntityRecognition = "EntityRecognition",
  /** PiiEntityRecognition */
  PiiEntityRecognition = "PiiEntityRecognition",
  /** KeyPhraseExtraction */
  KeyPhraseExtraction = "KeyPhraseExtraction",
  /** EntityLinking */
  EntityLinking = "EntityLinking",
  /** Healthcare */
  Healthcare = "Healthcare",
  /** ExtractiveSummarization */
  ExtractiveSummarization = "ExtractiveSummarization",
  /** CustomEntityRecognition */
  CustomEntityRecognition = "CustomEntityRecognition",
  /** CustomSingleLabelClassification */
  CustomSingleLabelClassification = "CustomSingleLabelClassification",
  /** CustomMultiLabelClassification */
  CustomMultiLabelClassification = "CustomMultiLabelClassification",
  /** AbstractiveSummarization */
  AbstractiveSummarization = "AbstractiveSummarization"
}

/**
 * Defines values for AnalyzeTextLROTaskKind. \
 * {@link KnownAnalyzeTextLROTaskKind} can be used interchangeably with AnalyzeTextLROTaskKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SentimentAnalysis** \
 * **EntityRecognition** \
 * **PiiEntityRecognition** \
 * **KeyPhraseExtraction** \
 * **EntityLinking** \
 * **Healthcare** \
 * **ExtractiveSummarization** \
 * **CustomEntityRecognition** \
 * **CustomSingleLabelClassification** \
 * **CustomMultiLabelClassification** \
 * **AbstractiveSummarization**
 */
export type AnalyzeTextLROTaskKind = string;

/** Known values of {@link OperationStatus} that the service accepts. */
export enum KnownOperationStatus {
  /** NotStarted */
  NotStarted = "notStarted",
  /** Running */
  Running = "running",
  /** Succeeded */
  Succeeded = "succeeded",
  /** PartiallyCompleted */
  PartiallyCompleted = "partiallyCompleted",
  /** Failed */
  Failed = "failed",
  /** Cancelled */
  Cancelled = "cancelled",
  /** Cancelling */
  Cancelling = "cancelling"
}

/**
 * Defines values for OperationStatus. \
 * {@link KnownOperationStatus} can be used interchangeably with OperationStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **notStarted** \
 * **running** \
 * **succeeded** \
 * **partiallyCompleted** \
 * **failed** \
 * **cancelled** \
 * **cancelling**
 */
export type OperationStatus = string;

/** Known values of {@link AnalyzeTextLROResultsKind} that the service accepts. */
export enum KnownAnalyzeTextLROResultsKind {
  /** SentimentAnalysisLROResults */
  SentimentAnalysisLROResults = "SentimentAnalysisLROResults",
  /** EntityRecognitionLROResults */
  EntityRecognitionLROResults = "EntityRecognitionLROResults",
  /** PiiEntityRecognitionLROResults */
  PiiEntityRecognitionLROResults = "PiiEntityRecognitionLROResults",
  /** KeyPhraseExtractionLROResults */
  KeyPhraseExtractionLROResults = "KeyPhraseExtractionLROResults",
  /** EntityLinkingLROResults */
  EntityLinkingLROResults = "EntityLinkingLROResults",
  /** HealthcareLROResults */
  HealthcareLROResults = "HealthcareLROResults",
  /** ExtractiveSummarizationLROResults */
  ExtractiveSummarizationLROResults = "ExtractiveSummarizationLROResults",
  /** CustomEntityRecognitionLROResults */
  CustomEntityRecognitionLROResults = "CustomEntityRecognitionLROResults",
  /** CustomSingleLabelClassificationLROResults */
  CustomSingleLabelClassificationLROResults = "CustomSingleLabelClassificationLROResults",
  /** CustomMultiLabelClassificationLROResults */
  CustomMultiLabelClassificationLROResults = "CustomMultiLabelClassificationLROResults",
  /** AbstractiveSummarizationLROResults */
  AbstractiveSummarizationLROResults = "AbstractiveSummarizationLROResults"
}

/**
 * Defines values for AnalyzeTextLROResultsKind. \
 * {@link KnownAnalyzeTextLROResultsKind} can be used interchangeably with AnalyzeTextLROResultsKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SentimentAnalysisLROResults** \
 * **EntityRecognitionLROResults** \
 * **PiiEntityRecognitionLROResults** \
 * **KeyPhraseExtractionLROResults** \
 * **EntityLinkingLROResults** \
 * **HealthcareLROResults** \
 * **ExtractiveSummarizationLROResults** \
 * **CustomEntityRecognitionLROResults** \
 * **CustomSingleLabelClassificationLROResults** \
 * **CustomMultiLabelClassificationLROResults** \
 * **AbstractiveSummarizationLROResults**
 */
export type AnalyzeTextLROResultsKind = string;

/** Known values of {@link State} that the service accepts. */
export enum KnownState {
  /** NotStarted */
  NotStarted = "notStarted",
  /** Running */
  Running = "running",
  /** Succeeded */
  Succeeded = "succeeded",
  /** Failed */
  Failed = "failed",
  /** Cancelled */
  Cancelled = "cancelled",
  /** Cancelling */
  Cancelling = "cancelling"
}

/**
 * Defines values for State. \
 * {@link KnownState} can be used interchangeably with State,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **notStarted** \
 * **running** \
 * **succeeded** \
 * **failed** \
 * **cancelled** \
 * **cancelling**
 */
export type State = string;

/** Known values of {@link StringIndexType} that the service accepts. */
export enum KnownStringIndexType {
  /** Returned offset and length values will correspond to TextElements (Graphemes and Grapheme clusters) confirming to the Unicode 8.0.0 standard. Use this option if your application is written in .Net Framework or .Net Core and you will be using StringInfo. */
  TextElementsV8 = "TextElements_v8",
  /** Returned offset and length values will correspond to Unicode code points. Use this option if your application is written in a language that support Unicode, for example Python. */
  UnicodeCodePoint = "UnicodeCodePoint",
  /** Returned offset and length values will correspond to UTF-16 code units. Use this option if your application is written in a language that support Unicode, for example Java, JavaScript. */
  Utf16CodeUnit = "Utf16CodeUnit"
}

/**
 * Defines values for StringIndexType. \
 * {@link KnownStringIndexType} can be used interchangeably with StringIndexType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **TextElements_v8**: Returned offset and length values will correspond to TextElements (Graphemes and Grapheme clusters) confirming to the Unicode 8.0.0 standard. Use this option if your application is written in .Net Framework or .Net Core and you will be using StringInfo. \
 * **UnicodeCodePoint**: Returned offset and length values will correspond to Unicode code points. Use this option if your application is written in a language that support Unicode, for example Python. \
 * **Utf16CodeUnit**: Returned offset and length values will correspond to UTF-16 code units. Use this option if your application is written in a language that support Unicode, for example Java, JavaScript.
 */
export type StringIndexType = string;

/** Known values of {@link PiiEntityDomain} that the service accepts. */
export enum KnownPiiEntityDomain {
  /** Indicates that entities in the Personal Health Information domain should be redacted. */
  Phi = "phi",
  /** Indicates that no domain is specified. */
  None = "none"
}

/**
 * Defines values for PiiEntityDomain. \
 * {@link KnownPiiEntityDomain} can be used interchangeably with PiiEntityDomain,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **phi**: Indicates that entities in the Personal Health Information domain should be redacted. \
 * **none**: Indicates that no domain is specified.
 */
export type PiiEntityDomain = string;

/** Known values of {@link PiiEntityCategory} that the service accepts. */
export enum KnownPiiEntityCategory {
  /** ABARoutingNumber */
  ABARoutingNumber = "ABARoutingNumber",
  /** ARNationalIdentityNumber */
  ARNationalIdentityNumber = "ARNationalIdentityNumber",
  /** AUBankAccountNumber */
  AUBankAccountNumber = "AUBankAccountNumber",
  /** AUDriversLicenseNumber */
  AUDriversLicenseNumber = "AUDriversLicenseNumber",
  /** AUMedicalAccountNumber */
  AUMedicalAccountNumber = "AUMedicalAccountNumber",
  /** AUPassportNumber */
  AUPassportNumber = "AUPassportNumber",
  /** AUTaxFileNumber */
  AUTaxFileNumber = "AUTaxFileNumber",
  /** AUBusinessNumber */
  AUBusinessNumber = "AUBusinessNumber",
  /** AUCompanyNumber */
  AUCompanyNumber = "AUCompanyNumber",
  /** ATIdentityCard */
  ATIdentityCard = "ATIdentityCard",
  /** ATTaxIdentificationNumber */
  ATTaxIdentificationNumber = "ATTaxIdentificationNumber",
  /** ATValueAddedTaxNumber */
  ATValueAddedTaxNumber = "ATValueAddedTaxNumber",
  /** AzureDocumentDBAuthKey */
  AzureDocumentDBAuthKey = "AzureDocumentDBAuthKey",
  /** AzureIaasDatabaseConnectionAndSQLString */
  AzureIaasDatabaseConnectionAndSQLString = "AzureIAASDatabaseConnectionAndSQLString",
  /** AzureIoTConnectionString */
  AzureIoTConnectionString = "AzureIoTConnectionString",
  /** AzurePublishSettingPassword */
  AzurePublishSettingPassword = "AzurePublishSettingPassword",
  /** AzureRedisCacheString */
  AzureRedisCacheString = "AzureRedisCacheString",
  /** AzureSAS */
  AzureSAS = "AzureSAS",
  /** AzureServiceBusString */
  AzureServiceBusString = "AzureServiceBusString",
  /** AzureStorageAccountKey */
  AzureStorageAccountKey = "AzureStorageAccountKey",
  /** AzureStorageAccountGeneric */
  AzureStorageAccountGeneric = "AzureStorageAccountGeneric",
  /** BENationalNumber */
  BENationalNumber = "BENationalNumber",
  /** BENationalNumberV2 */
  BENationalNumberV2 = "BENationalNumberV2",
  /** BEValueAddedTaxNumber */
  BEValueAddedTaxNumber = "BEValueAddedTaxNumber",
  /** BrcpfNumber */
  BrcpfNumber = "BRCPFNumber",
  /** BRLegalEntityNumber */
  BRLegalEntityNumber = "BRLegalEntityNumber",
  /** BRNationalIdrg */
  BRNationalIdrg = "BRNationalIDRG",
  /** BGUniformCivilNumber */
  BGUniformCivilNumber = "BGUniformCivilNumber",
  /** CABankAccountNumber */
  CABankAccountNumber = "CABankAccountNumber",
  /** CADriversLicenseNumber */
  CADriversLicenseNumber = "CADriversLicenseNumber",
  /** CAHealthServiceNumber */
  CAHealthServiceNumber = "CAHealthServiceNumber",
  /** CAPassportNumber */
  CAPassportNumber = "CAPassportNumber",
  /** CAPersonalHealthIdentification */
  CAPersonalHealthIdentification = "CAPersonalHealthIdentification",
  /** CASocialInsuranceNumber */
  CASocialInsuranceNumber = "CASocialInsuranceNumber",
  /** CLIdentityCardNumber */
  CLIdentityCardNumber = "CLIdentityCardNumber",
  /** CNResidentIdentityCardNumber */
  CNResidentIdentityCardNumber = "CNResidentIdentityCardNumber",
  /** CreditCardNumber */
  CreditCardNumber = "CreditCardNumber",
  /** HRIdentityCardNumber */
  HRIdentityCardNumber = "HRIdentityCardNumber",
  /** HRNationalIDNumber */
  HRNationalIDNumber = "HRNationalIDNumber",
  /** HRPersonalIdentificationNumber */
  HRPersonalIdentificationNumber = "HRPersonalIdentificationNumber",
  /** HRPersonalIdentificationOIBNumberV2 */
  HRPersonalIdentificationOIBNumberV2 = "HRPersonalIdentificationOIBNumberV2",
  /** CYIdentityCard */
  CYIdentityCard = "CYIdentityCard",
  /** CYTaxIdentificationNumber */
  CYTaxIdentificationNumber = "CYTaxIdentificationNumber",
  /** CZPersonalIdentityNumber */
  CZPersonalIdentityNumber = "CZPersonalIdentityNumber",
  /** CZPersonalIdentityV2 */
  CZPersonalIdentityV2 = "CZPersonalIdentityV2",
  /** DKPersonalIdentificationNumber */
  DKPersonalIdentificationNumber = "DKPersonalIdentificationNumber",
  /** DKPersonalIdentificationV2 */
  DKPersonalIdentificationV2 = "DKPersonalIdentificationV2",
  /** DrugEnforcementAgencyNumber */
  DrugEnforcementAgencyNumber = "DrugEnforcementAgencyNumber",
  /** EEPersonalIdentificationCode */
  EEPersonalIdentificationCode = "EEPersonalIdentificationCode",
  /** EUDebitCardNumber */
  EUDebitCardNumber = "EUDebitCardNumber",
  /** EUDriversLicenseNumber */
  EUDriversLicenseNumber = "EUDriversLicenseNumber",
  /** EugpsCoordinates */
  EugpsCoordinates = "EUGPSCoordinates",
  /** EUNationalIdentificationNumber */
  EUNationalIdentificationNumber = "EUNationalIdentificationNumber",
  /** EUPassportNumber */
  EUPassportNumber = "EUPassportNumber",
  /** EUSocialSecurityNumber */
  EUSocialSecurityNumber = "EUSocialSecurityNumber",
  /** EUTaxIdentificationNumber */
  EUTaxIdentificationNumber = "EUTaxIdentificationNumber",
  /** FIEuropeanHealthNumber */
  FIEuropeanHealthNumber = "FIEuropeanHealthNumber",
  /** FINationalID */
  FINationalID = "FINationalID",
  /** FINationalIDV2 */
  FINationalIDV2 = "FINationalIDV2",
  /** FIPassportNumber */
  FIPassportNumber = "FIPassportNumber",
  /** FRDriversLicenseNumber */
  FRDriversLicenseNumber = "FRDriversLicenseNumber",
  /** FRHealthInsuranceNumber */
  FRHealthInsuranceNumber = "FRHealthInsuranceNumber",
  /** FRNationalID */
  FRNationalID = "FRNationalID",
  /** FRPassportNumber */
  FRPassportNumber = "FRPassportNumber",
  /** FRSocialSecurityNumber */
  FRSocialSecurityNumber = "FRSocialSecurityNumber",
  /** FRTaxIdentificationNumber */
  FRTaxIdentificationNumber = "FRTaxIdentificationNumber",
  /** FRValueAddedTaxNumber */
  FRValueAddedTaxNumber = "FRValueAddedTaxNumber",
  /** DEDriversLicenseNumber */
  DEDriversLicenseNumber = "DEDriversLicenseNumber",
  /** DEPassportNumber */
  DEPassportNumber = "DEPassportNumber",
  /** DEIdentityCardNumber */
  DEIdentityCardNumber = "DEIdentityCardNumber",
  /** DETaxIdentificationNumber */
  DETaxIdentificationNumber = "DETaxIdentificationNumber",
  /** DEValueAddedNumber */
  DEValueAddedNumber = "DEValueAddedNumber",
  /** GRNationalIDCard */
  GRNationalIDCard = "GRNationalIDCard",
  /** GRNationalIDV2 */
  GRNationalIDV2 = "GRNationalIDV2",
  /** GRTaxIdentificationNumber */
  GRTaxIdentificationNumber = "GRTaxIdentificationNumber",
  /** HKIdentityCardNumber */
  HKIdentityCardNumber = "HKIdentityCardNumber",
  /** HUValueAddedNumber */
  HUValueAddedNumber = "HUValueAddedNumber",
  /** HUPersonalIdentificationNumber */
  HUPersonalIdentificationNumber = "HUPersonalIdentificationNumber",
  /** HUTaxIdentificationNumber */
  HUTaxIdentificationNumber = "HUTaxIdentificationNumber",
  /** INPermanentAccount */
  INPermanentAccount = "INPermanentAccount",
  /** INUniqueIdentificationNumber */
  INUniqueIdentificationNumber = "INUniqueIdentificationNumber",
  /** IDIdentityCardNumber */
  IDIdentityCardNumber = "IDIdentityCardNumber",
  /** InternationalBankingAccountNumber */
  InternationalBankingAccountNumber = "InternationalBankingAccountNumber",
  /** IEPersonalPublicServiceNumber */
  IEPersonalPublicServiceNumber = "IEPersonalPublicServiceNumber",
  /** IEPersonalPublicServiceNumberV2 */
  IEPersonalPublicServiceNumberV2 = "IEPersonalPublicServiceNumberV2",
  /** ILBankAccountNumber */
  ILBankAccountNumber = "ILBankAccountNumber",
  /** ILNationalID */
  ILNationalID = "ILNationalID",
  /** ITDriversLicenseNumber */
  ITDriversLicenseNumber = "ITDriversLicenseNumber",
  /** ITFiscalCode */
  ITFiscalCode = "ITFiscalCode",
  /** ITValueAddedTaxNumber */
  ITValueAddedTaxNumber = "ITValueAddedTaxNumber",
  /** JPBankAccountNumber */
  JPBankAccountNumber = "JPBankAccountNumber",
  /** JPDriversLicenseNumber */
  JPDriversLicenseNumber = "JPDriversLicenseNumber",
  /** JPPassportNumber */
  JPPassportNumber = "JPPassportNumber",
  /** JPResidentRegistrationNumber */
  JPResidentRegistrationNumber = "JPResidentRegistrationNumber",
  /** JPSocialInsuranceNumber */
  JPSocialInsuranceNumber = "JPSocialInsuranceNumber",
  /** JPMyNumberCorporate */
  JPMyNumberCorporate = "JPMyNumberCorporate",
  /** JPMyNumberPersonal */
  JPMyNumberPersonal = "JPMyNumberPersonal",
  /** JPResidenceCardNumber */
  JPResidenceCardNumber = "JPResidenceCardNumber",
  /** LVPersonalCode */
  LVPersonalCode = "LVPersonalCode",
  /** LTPersonalCode */
  LTPersonalCode = "LTPersonalCode",
  /** LUNationalIdentificationNumberNatural */
  LUNationalIdentificationNumberNatural = "LUNationalIdentificationNumberNatural",
  /** LUNationalIdentificationNumberNonNatural */
  LUNationalIdentificationNumberNonNatural = "LUNationalIdentificationNumberNonNatural",
  /** MYIdentityCardNumber */
  MYIdentityCardNumber = "MYIdentityCardNumber",
  /** MTIdentityCardNumber */
  MTIdentityCardNumber = "MTIdentityCardNumber",
  /** MTTaxIDNumber */
  MTTaxIDNumber = "MTTaxIDNumber",
  /** NLCitizensServiceNumber */
  NLCitizensServiceNumber = "NLCitizensServiceNumber",
  /** NLCitizensServiceNumberV2 */
  NLCitizensServiceNumberV2 = "NLCitizensServiceNumberV2",
  /** NLTaxIdentificationNumber */
  NLTaxIdentificationNumber = "NLTaxIdentificationNumber",
  /** NLValueAddedTaxNumber */
  NLValueAddedTaxNumber = "NLValueAddedTaxNumber",
  /** NZBankAccountNumber */
  NZBankAccountNumber = "NZBankAccountNumber",
  /** NZDriversLicenseNumber */
  NZDriversLicenseNumber = "NZDriversLicenseNumber",
  /** NZInlandRevenueNumber */
  NZInlandRevenueNumber = "NZInlandRevenueNumber",
  /** NZMinistryOfHealthNumber */
  NZMinistryOfHealthNumber = "NZMinistryOfHealthNumber",
  /** NZSocialWelfareNumber */
  NZSocialWelfareNumber = "NZSocialWelfareNumber",
  /** NOIdentityNumber */
  NOIdentityNumber = "NOIdentityNumber",
  /** PHUnifiedMultiPurposeIDNumber */
  PHUnifiedMultiPurposeIDNumber = "PHUnifiedMultiPurposeIDNumber",
  /** PLIdentityCard */
  PLIdentityCard = "PLIdentityCard",
  /** PLNationalID */
  PLNationalID = "PLNationalID",
  /** PLNationalIDV2 */
  PLNationalIDV2 = "PLNationalIDV2",
  /** PLPassportNumber */
  PLPassportNumber = "PLPassportNumber",
  /** PLTaxIdentificationNumber */
  PLTaxIdentificationNumber = "PLTaxIdentificationNumber",
  /** PlregonNumber */
  PlregonNumber = "PLREGONNumber",
  /** PTCitizenCardNumber */
  PTCitizenCardNumber = "PTCitizenCardNumber",
  /** PTCitizenCardNumberV2 */
  PTCitizenCardNumberV2 = "PTCitizenCardNumberV2",
  /** PTTaxIdentificationNumber */
  PTTaxIdentificationNumber = "PTTaxIdentificationNumber",
  /** ROPersonalNumericalCode */
  ROPersonalNumericalCode = "ROPersonalNumericalCode",
  /** RUPassportNumberDomestic */
  RUPassportNumberDomestic = "RUPassportNumberDomestic",
  /** RUPassportNumberInternational */
  RUPassportNumberInternational = "RUPassportNumberInternational",
  /** SANationalID */
  SANationalID = "SANationalID",
  /** SGNationalRegistrationIdentityCardNumber */
  SGNationalRegistrationIdentityCardNumber = "SGNationalRegistrationIdentityCardNumber",
  /** SKPersonalNumber */
  SKPersonalNumber = "SKPersonalNumber",
  /** SITaxIdentificationNumber */
  SITaxIdentificationNumber = "SITaxIdentificationNumber",
  /** SIUniqueMasterCitizenNumber */
  SIUniqueMasterCitizenNumber = "SIUniqueMasterCitizenNumber",
  /** ZAIdentificationNumber */
  ZAIdentificationNumber = "ZAIdentificationNumber",
  /** KRResidentRegistrationNumber */
  KRResidentRegistrationNumber = "KRResidentRegistrationNumber",
  /** Esdni */
  Esdni = "ESDNI",
  /** ESSocialSecurityNumber */
  ESSocialSecurityNumber = "ESSocialSecurityNumber",
  /** ESTaxIdentificationNumber */
  ESTaxIdentificationNumber = "ESTaxIdentificationNumber",
  /** SQLServerConnectionString */
  SQLServerConnectionString = "SQLServerConnectionString",
  /** SENationalID */
  SENationalID = "SENationalID",
  /** SENationalIDV2 */
  SENationalIDV2 = "SENationalIDV2",
  /** SEPassportNumber */
  SEPassportNumber = "SEPassportNumber",
  /** SETaxIdentificationNumber */
  SETaxIdentificationNumber = "SETaxIdentificationNumber",
  /** SwiftCode */
  SwiftCode = "SWIFTCode",
  /** CHSocialSecurityNumber */
  CHSocialSecurityNumber = "CHSocialSecurityNumber",
  /** TWNationalID */
  TWNationalID = "TWNationalID",
  /** TWPassportNumber */
  TWPassportNumber = "TWPassportNumber",
  /** TWResidentCertificate */
  TWResidentCertificate = "TWResidentCertificate",
  /** THPopulationIdentificationCode */
  THPopulationIdentificationCode = "THPopulationIdentificationCode",
  /** TRNationalIdentificationNumber */
  TRNationalIdentificationNumber = "TRNationalIdentificationNumber",
  /** UKDriversLicenseNumber */
  UKDriversLicenseNumber = "UKDriversLicenseNumber",
  /** UKElectoralRollNumber */
  UKElectoralRollNumber = "UKElectoralRollNumber",
  /** UKNationalHealthNumber */
  UKNationalHealthNumber = "UKNationalHealthNumber",
  /** UKNationalInsuranceNumber */
  UKNationalInsuranceNumber = "UKNationalInsuranceNumber",
  /** UKUniqueTaxpayerNumber */
  UKUniqueTaxpayerNumber = "UKUniqueTaxpayerNumber",
  /** UsukPassportNumber */
  UsukPassportNumber = "USUKPassportNumber",
  /** USBankAccountNumber */
  USBankAccountNumber = "USBankAccountNumber",
  /** USDriversLicenseNumber */
  USDriversLicenseNumber = "USDriversLicenseNumber",
  /** USIndividualTaxpayerIdentification */
  USIndividualTaxpayerIdentification = "USIndividualTaxpayerIdentification",
  /** USSocialSecurityNumber */
  USSocialSecurityNumber = "USSocialSecurityNumber",
  /** UAPassportNumberDomestic */
  UAPassportNumberDomestic = "UAPassportNumberDomestic",
  /** UAPassportNumberInternational */
  UAPassportNumberInternational = "UAPassportNumberInternational",
  /** Organization */
  Organization = "Organization",
  /** Email */
  Email = "Email",
  /** URL */
  URL = "URL",
  /** Age */
  Age = "Age",
  /** PhoneNumber */
  PhoneNumber = "PhoneNumber",
  /** IPAddress */
  IPAddress = "IPAddress",
  /** Date */
  Date = "Date",
  /** Person */
  Person = "Person",
  /** Address */
  Address = "Address",
  /** All */
  All = "All",
  /** Default */
  Default = "Default"
}

/**
 * Defines values for PiiEntityCategory. \
 * {@link KnownPiiEntityCategory} can be used interchangeably with PiiEntityCategory,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ABARoutingNumber** \
 * **ARNationalIdentityNumber** \
 * **AUBankAccountNumber** \
 * **AUDriversLicenseNumber** \
 * **AUMedicalAccountNumber** \
 * **AUPassportNumber** \
 * **AUTaxFileNumber** \
 * **AUBusinessNumber** \
 * **AUCompanyNumber** \
 * **ATIdentityCard** \
 * **ATTaxIdentificationNumber** \
 * **ATValueAddedTaxNumber** \
 * **AzureDocumentDBAuthKey** \
 * **AzureIAASDatabaseConnectionAndSQLString** \
 * **AzureIoTConnectionString** \
 * **AzurePublishSettingPassword** \
 * **AzureRedisCacheString** \
 * **AzureSAS** \
 * **AzureServiceBusString** \
 * **AzureStorageAccountKey** \
 * **AzureStorageAccountGeneric** \
 * **BENationalNumber** \
 * **BENationalNumberV2** \
 * **BEValueAddedTaxNumber** \
 * **BRCPFNumber** \
 * **BRLegalEntityNumber** \
 * **BRNationalIDRG** \
 * **BGUniformCivilNumber** \
 * **CABankAccountNumber** \
 * **CADriversLicenseNumber** \
 * **CAHealthServiceNumber** \
 * **CAPassportNumber** \
 * **CAPersonalHealthIdentification** \
 * **CASocialInsuranceNumber** \
 * **CLIdentityCardNumber** \
 * **CNResidentIdentityCardNumber** \
 * **CreditCardNumber** \
 * **HRIdentityCardNumber** \
 * **HRNationalIDNumber** \
 * **HRPersonalIdentificationNumber** \
 * **HRPersonalIdentificationOIBNumberV2** \
 * **CYIdentityCard** \
 * **CYTaxIdentificationNumber** \
 * **CZPersonalIdentityNumber** \
 * **CZPersonalIdentityV2** \
 * **DKPersonalIdentificationNumber** \
 * **DKPersonalIdentificationV2** \
 * **DrugEnforcementAgencyNumber** \
 * **EEPersonalIdentificationCode** \
 * **EUDebitCardNumber** \
 * **EUDriversLicenseNumber** \
 * **EUGPSCoordinates** \
 * **EUNationalIdentificationNumber** \
 * **EUPassportNumber** \
 * **EUSocialSecurityNumber** \
 * **EUTaxIdentificationNumber** \
 * **FIEuropeanHealthNumber** \
 * **FINationalID** \
 * **FINationalIDV2** \
 * **FIPassportNumber** \
 * **FRDriversLicenseNumber** \
 * **FRHealthInsuranceNumber** \
 * **FRNationalID** \
 * **FRPassportNumber** \
 * **FRSocialSecurityNumber** \
 * **FRTaxIdentificationNumber** \
 * **FRValueAddedTaxNumber** \
 * **DEDriversLicenseNumber** \
 * **DEPassportNumber** \
 * **DEIdentityCardNumber** \
 * **DETaxIdentificationNumber** \
 * **DEValueAddedNumber** \
 * **GRNationalIDCard** \
 * **GRNationalIDV2** \
 * **GRTaxIdentificationNumber** \
 * **HKIdentityCardNumber** \
 * **HUValueAddedNumber** \
 * **HUPersonalIdentificationNumber** \
 * **HUTaxIdentificationNumber** \
 * **INPermanentAccount** \
 * **INUniqueIdentificationNumber** \
 * **IDIdentityCardNumber** \
 * **InternationalBankingAccountNumber** \
 * **IEPersonalPublicServiceNumber** \
 * **IEPersonalPublicServiceNumberV2** \
 * **ILBankAccountNumber** \
 * **ILNationalID** \
 * **ITDriversLicenseNumber** \
 * **ITFiscalCode** \
 * **ITValueAddedTaxNumber** \
 * **JPBankAccountNumber** \
 * **JPDriversLicenseNumber** \
 * **JPPassportNumber** \
 * **JPResidentRegistrationNumber** \
 * **JPSocialInsuranceNumber** \
 * **JPMyNumberCorporate** \
 * **JPMyNumberPersonal** \
 * **JPResidenceCardNumber** \
 * **LVPersonalCode** \
 * **LTPersonalCode** \
 * **LUNationalIdentificationNumberNatural** \
 * **LUNationalIdentificationNumberNonNatural** \
 * **MYIdentityCardNumber** \
 * **MTIdentityCardNumber** \
 * **MTTaxIDNumber** \
 * **NLCitizensServiceNumber** \
 * **NLCitizensServiceNumberV2** \
 * **NLTaxIdentificationNumber** \
 * **NLValueAddedTaxNumber** \
 * **NZBankAccountNumber** \
 * **NZDriversLicenseNumber** \
 * **NZInlandRevenueNumber** \
 * **NZMinistryOfHealthNumber** \
 * **NZSocialWelfareNumber** \
 * **NOIdentityNumber** \
 * **PHUnifiedMultiPurposeIDNumber** \
 * **PLIdentityCard** \
 * **PLNationalID** \
 * **PLNationalIDV2** \
 * **PLPassportNumber** \
 * **PLTaxIdentificationNumber** \
 * **PLREGONNumber** \
 * **PTCitizenCardNumber** \
 * **PTCitizenCardNumberV2** \
 * **PTTaxIdentificationNumber** \
 * **ROPersonalNumericalCode** \
 * **RUPassportNumberDomestic** \
 * **RUPassportNumberInternational** \
 * **SANationalID** \
 * **SGNationalRegistrationIdentityCardNumber** \
 * **SKPersonalNumber** \
 * **SITaxIdentificationNumber** \
 * **SIUniqueMasterCitizenNumber** \
 * **ZAIdentificationNumber** \
 * **KRResidentRegistrationNumber** \
 * **ESDNI** \
 * **ESSocialSecurityNumber** \
 * **ESTaxIdentificationNumber** \
 * **SQLServerConnectionString** \
 * **SENationalID** \
 * **SENationalIDV2** \
 * **SEPassportNumber** \
 * **SETaxIdentificationNumber** \
 * **SWIFTCode** \
 * **CHSocialSecurityNumber** \
 * **TWNationalID** \
 * **TWPassportNumber** \
 * **TWResidentCertificate** \
 * **THPopulationIdentificationCode** \
 * **TRNationalIdentificationNumber** \
 * **UKDriversLicenseNumber** \
 * **UKElectoralRollNumber** \
 * **UKNationalHealthNumber** \
 * **UKNationalInsuranceNumber** \
 * **UKUniqueTaxpayerNumber** \
 * **USUKPassportNumber** \
 * **USBankAccountNumber** \
 * **USDriversLicenseNumber** \
 * **USIndividualTaxpayerIdentification** \
 * **USSocialSecurityNumber** \
 * **UAPassportNumberDomestic** \
 * **UAPassportNumberInternational** \
 * **Organization** \
 * **Email** \
 * **URL** \
 * **Age** \
 * **PhoneNumber** \
 * **IPAddress** \
 * **Date** \
 * **Person** \
 * **Address** \
 * **All** \
 * **Default**
 */
export type PiiEntityCategory = string;

/** Known values of {@link WarningCode} that the service accepts. */
export enum KnownWarningCode {
  /** LongWordsInDocument */
  LongWordsInDocument = "LongWordsInDocument",
  /** DocumentTruncated */
  DocumentTruncated = "DocumentTruncated"
}

/**
 * Defines values for WarningCode. \
 * {@link KnownWarningCode} can be used interchangeably with WarningCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **LongWordsInDocument** \
 * **DocumentTruncated**
 */
export type WarningCode = string;

/** Known values of {@link HealthcareEntityCategory} that the service accepts. */
export enum KnownHealthcareEntityCategory {
  /** BodyStructure */
  BodyStructure = "BodyStructure",
  /** Age */
  Age = "Age",
  /** Gender */
  Gender = "Gender",
  /** Ethnicity */
  Ethnicity = "Ethnicity",
  /** ExaminationName */
  ExaminationName = "ExaminationName",
  /** Date */
  Date = "Date",
  /** Direction */
  Direction = "Direction",
  /** Frequency */
  Frequency = "Frequency",
  /** MeasurementValue */
  MeasurementValue = "MeasurementValue",
  /** MeasurementUnit */
  MeasurementUnit = "MeasurementUnit",
  /** RelationalOperator */
  RelationalOperator = "RelationalOperator",
  /** Time */
  Time = "Time",
  /** Course */
  Course = "Course",
  /** GeneOrProtein */
  GeneOrProtein = "GeneOrProtein",
  /** Variant */
  Variant = "Variant",
  /** Expression */
  Expression = "Expression",
  /** MutationType */
  MutationType = "MutationType",
  /** AdministrativeEvent */
  AdministrativeEvent = "AdministrativeEvent",
  /** CareEnvironment */
  CareEnvironment = "CareEnvironment",
  /** HealthcareProfession */
  HealthcareProfession = "HealthcareProfession",
  /** Diagnosis */
  Diagnosis = "Diagnosis",
  /** SymptomOrSign */
  SymptomOrSign = "SymptomOrSign",
  /** ConditionQualifier */
  ConditionQualifier = "ConditionQualifier",
  /** ConditionScale */
  ConditionScale = "ConditionScale",
  /** MedicationClass */
  MedicationClass = "MedicationClass",
  /** MedicationName */
  MedicationName = "MedicationName",
  /** Dosage */
  Dosage = "Dosage",
  /** MedicationForm */
  MedicationForm = "MedicationForm",
  /** MedicationRoute */
  MedicationRoute = "MedicationRoute",
  /** FamilyRelation */
  FamilyRelation = "FamilyRelation",
  /** TreatmentName */
  TreatmentName = "TreatmentName",
  /** Allergen */
  Allergen = "Allergen",
  /** Employment */
  Employment = "Employment",
  /** LivingStatus */
  LivingStatus = "LivingStatus",
  /** SubstanceUse */
  SubstanceUse = "SubstanceUse",
  /** SubstanceUseAmount */
  SubstanceUseAmount = "SubstanceUseAmount"
}

/**
 * Defines values for HealthcareEntityCategory. \
 * {@link KnownHealthcareEntityCategory} can be used interchangeably with HealthcareEntityCategory,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **BodyStructure** \
 * **Age** \
 * **Gender** \
 * **Ethnicity** \
 * **ExaminationName** \
 * **Date** \
 * **Direction** \
 * **Frequency** \
 * **MeasurementValue** \
 * **MeasurementUnit** \
 * **RelationalOperator** \
 * **Time** \
 * **Course** \
 * **GeneOrProtein** \
 * **Variant** \
 * **Expression** \
 * **MutationType** \
 * **AdministrativeEvent** \
 * **CareEnvironment** \
 * **HealthcareProfession** \
 * **Diagnosis** \
 * **SymptomOrSign** \
 * **ConditionQualifier** \
 * **ConditionScale** \
 * **MedicationClass** \
 * **MedicationName** \
 * **Dosage** \
 * **MedicationForm** \
 * **MedicationRoute** \
 * **FamilyRelation** \
 * **TreatmentName** \
 * **Allergen** \
 * **Employment** \
 * **LivingStatus** \
 * **SubstanceUse** \
 * **SubstanceUseAmount**
 */
export type HealthcareEntityCategory = string;

/** Known values of {@link RelationType} that the service accepts. */
export enum KnownRelationType {
  /** Abbreviation */
  Abbreviation = "Abbreviation",
  /** BodySiteOfCondition */
  BodySiteOfCondition = "BodySiteOfCondition",
  /** BodySiteOfTreatment */
  BodySiteOfTreatment = "BodySiteOfTreatment",
  /** CourseOfCondition */
  CourseOfCondition = "CourseOfCondition",
  /** CourseOfExamination */
  CourseOfExamination = "CourseOfExamination",
  /** CourseOfMedication */
  CourseOfMedication = "CourseOfMedication",
  /** CourseOfTreatment */
  CourseOfTreatment = "CourseOfTreatment",
  /** DirectionOfBodyStructure */
  DirectionOfBodyStructure = "DirectionOfBodyStructure",
  /** DirectionOfCondition */
  DirectionOfCondition = "DirectionOfCondition",
  /** DirectionOfExamination */
  DirectionOfExamination = "DirectionOfExamination",
  /** DirectionOfTreatment */
  DirectionOfTreatment = "DirectionOfTreatment",
  /** DosageOfMedication */
  DosageOfMedication = "DosageOfMedication",
  /** ExaminationFindsCondition */
  ExaminationFindsCondition = "ExaminationFindsCondition",
  /** ExpressionOfGene */
  ExpressionOfGene = "ExpressionOfGene",
  /** ExpressionOfVariant */
  ExpressionOfVariant = "ExpressionOfVariant",
  /** FormOfMedication */
  FormOfMedication = "FormOfMedication",
  /** FrequencyOfCondition */
  FrequencyOfCondition = "FrequencyOfCondition",
  /** FrequencyOfMedication */
  FrequencyOfMedication = "FrequencyOfMedication",
  /** FrequencyOfTreatment */
  FrequencyOfTreatment = "FrequencyOfTreatment",
  /** MutationTypeOfGene */
  MutationTypeOfGene = "MutationTypeOfGene",
  /** MutationTypeOfVariant */
  MutationTypeOfVariant = "MutationTypeOfVariant",
  /** QualifierOfCondition */
  QualifierOfCondition = "QualifierOfCondition",
  /** RelationOfExamination */
  RelationOfExamination = "RelationOfExamination",
  /** RouteOfMedication */
  RouteOfMedication = "RouteOfMedication",
  /** ScaleOfCondition */
  ScaleOfCondition = "ScaleOfCondition",
  /** TimeOfCondition */
  TimeOfCondition = "TimeOfCondition",
  /** TimeOfEvent */
  TimeOfEvent = "TimeOfEvent",
  /** TimeOfExamination */
  TimeOfExamination = "TimeOfExamination",
  /** TimeOfMedication */
  TimeOfMedication = "TimeOfMedication",
  /** TimeOfTreatment */
  TimeOfTreatment = "TimeOfTreatment",
  /** UnitOfCondition */
  UnitOfCondition = "UnitOfCondition",
  /** UnitOfExamination */
  UnitOfExamination = "UnitOfExamination",
  /** ValueOfCondition */
  ValueOfCondition = "ValueOfCondition",
  /** ValueOfExamination */
  ValueOfExamination = "ValueOfExamination",
  /** VariantOfGene */
  VariantOfGene = "VariantOfGene"
}

/**
 * Defines values for RelationType. \
 * {@link KnownRelationType} can be used interchangeably with RelationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Abbreviation** \
 * **BodySiteOfCondition** \
 * **BodySiteOfTreatment** \
 * **CourseOfCondition** \
 * **CourseOfExamination** \
 * **CourseOfMedication** \
 * **CourseOfTreatment** \
 * **DirectionOfBodyStructure** \
 * **DirectionOfCondition** \
 * **DirectionOfExamination** \
 * **DirectionOfTreatment** \
 * **DosageOfMedication** \
 * **ExaminationFindsCondition** \
 * **ExpressionOfGene** \
 * **ExpressionOfVariant** \
 * **FormOfMedication** \
 * **FrequencyOfCondition** \
 * **FrequencyOfMedication** \
 * **FrequencyOfTreatment** \
 * **MutationTypeOfGene** \
 * **MutationTypeOfVariant** \
 * **QualifierOfCondition** \
 * **RelationOfExamination** \
 * **RouteOfMedication** \
 * **ScaleOfCondition** \
 * **TimeOfCondition** \
 * **TimeOfEvent** \
 * **TimeOfExamination** \
 * **TimeOfMedication** \
 * **TimeOfTreatment** \
 * **UnitOfCondition** \
 * **UnitOfExamination** \
 * **ValueOfCondition** \
 * **ValueOfExamination** \
 * **VariantOfGene**
 */
export type RelationType = string;

/** Known values of {@link ExtractiveSummarizationOrderingCriteria} that the service accepts. */
export enum KnownExtractiveSummarizationOrderingCriteria {
  /** Indicates that results should be sorted in order of appearance in the text. */
  Offset = "Offset",
  /** Indicates that results should be sorted in order of importance (i.e. rank score) according to the model. */
  Rank = "Rank"
}

/**
 * Defines values for ExtractiveSummarizationOrderingCriteria. \
 * {@link KnownExtractiveSummarizationOrderingCriteria} can be used interchangeably with ExtractiveSummarizationOrderingCriteria,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Offset**: Indicates that results should be sorted in order of appearance in the text. \
 * **Rank**: Indicates that results should be sorted in order of importance (i.e. rank score) according to the model.
 */
export type ExtractiveSummarizationOrderingCriteria = string;
/** Defines values for EntityConditionality. */
export type EntityConditionality = "hypothetical" | "conditional";
/** Defines values for EntityCertainty. */
export type EntityCertainty =
  | "positive"
  | "positivePossible"
  | "neutralPossible"
  | "negativePossible"
  | "negative";
/** Defines values for EntityAssociation. */
export type EntityAssociation = "subject" | "other";
/** Defines values for DocumentSentimentLabel. */
export type DocumentSentimentLabel =
  | "positive"
  | "neutral"
  | "negative"
  | "mixed";
/** Defines values for SentenceSentimentLabel. */
export type SentenceSentimentLabel = "positive" | "neutral" | "negative";
/** Defines values for TokenSentimentLabel. */
export type TokenSentimentLabel = "positive" | "mixed" | "negative";
/** Defines values for TargetRelationType. */
export type TargetRelationType = "assessment" | "target";

/** Optional parameters. */
export interface AnalyzeOptionalParams extends coreClient.OperationOptions {
  /** (Optional) if set to true, response will contain request and document level statistics. */
  includeStatistics?: boolean;
}

/** Contains response data for the analyze operation. */
export type AnalyzeResponse = AnalyzeTextTaskResultUnion;

/** Optional parameters. */
export interface AnalyzeBatchOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the analyzeBatch operation. */
export type AnalyzeBatchResponse = GeneratedClientAnalyzeBatchHeaders;

/** Optional parameters. */
export interface AnalyzeTextJobStatusOptionalParams
  extends coreClient.OperationOptions {
  /** (Optional) if set to true, response will contain request and document level statistics. */
  includeStatistics?: boolean;
  /** The maximum number of resources to return from the collection. */
  top?: number;
  /** An offset into the collection of the first resource to be returned. */
  skip?: number;
}

/** Contains response data for the jobStatus operation. */
export type AnalyzeTextJobStatusResponse = AnalyzeTextJobState;

/** Optional parameters. */
export interface AnalyzeTextCancelJobOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the cancelJob operation. */
export type AnalyzeTextCancelJobResponse = AnalyzeTextCancelJobHeaders;

/** Optional parameters. */
export interface GeneratedClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
