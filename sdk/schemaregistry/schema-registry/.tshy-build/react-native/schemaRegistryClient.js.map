{"version":3,"file":"schemaRegistryClient.js","sourceRoot":"","sources":["../../src/schemaRegistryClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  GetSchemaOptions,\n  GetSchemaPropertiesOptions,\n  RegisterSchemaOptions,\n  Schema,\n  SchemaDescription,\n  SchemaProperties,\n  SchemaRegistry,\n  SchemaRegistryClientOptions,\n} from \"./models.js\";\nimport type { SchemaRegistryClient as SchemaRegistryContext } from \"./clientDefinitions.js\";\nimport {\n  registerSchema,\n  getSchemaProperties,\n  getSchemaById,\n  getSchemaByVersion,\n} from \"./operations.js\";\nimport type { ClientOptions } from \"@azure-rest/core-client\";\nimport { getClient } from \"@azure-rest/core-client\";\nimport { logger } from \"./logger.js\";\nimport type { TokenCredential } from \"@azure/core-auth\";\nimport type { TracingClient } from \"@azure/core-tracing\";\nimport { createTracingClient } from \"@azure/core-tracing\";\nimport { DEFAULT_SCOPE, SDK_VERSION } from \"./constants.js\";\n\n/**\n * Initialize a new instance of `SchemaRegistryClient`\n * @param fullyQualifiedNamespace - The Schema Registry service endpoint, for example 'my-namespace.servicebus.windows.net'.\n * @param credentials - uniquely identify client credential\n * @param options - the parameter for all optional parameters\n */\nexport default function createClient(\n  fullyQualifiedNamespace: string,\n  credentials: TokenCredential,\n  options: ClientOptions = {},\n): SchemaRegistryContext {\n  const baseUrl = options.baseUrl ?? `${fullyQualifiedNamespace}`;\n  options.apiVersion = options.apiVersion ?? \"2023-07-01\";\n  const userAgentInfo = `azsdk-js-schema-registry/${SDK_VERSION}`;\n  const userAgentPrefix =\n    options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n      ? `${options.userAgentOptions.userAgentPrefix} ${userAgentInfo}`\n      : `${userAgentInfo}`;\n  options = {\n    ...options,\n    userAgentOptions: {\n      userAgentPrefix,\n    },\n    loggingOptions: {\n      logger: options.loggingOptions?.logger ?? logger.info,\n    },\n    credentials: {\n      scopes: options.credentials?.scopes ?? [DEFAULT_SCOPE],\n    },\n  };\n\n  const client = getClient(baseUrl, credentials, options) as SchemaRegistryContext;\n\n  return client;\n}\n\n/**\n * Client for Azure Schema Registry service.\n */\nexport class SchemaRegistryClient implements SchemaRegistry {\n  /** The Schema Registry service fully qualified namespace URL. */\n  readonly fullyQualifiedNamespace: string;\n\n  /** Underlying autorest generated client. */\n  private readonly _client: SchemaRegistryContext;\n\n  /** The tracing client */\n  private readonly _tracing: TracingClient;\n\n  /**\n   * Creates a new client for Azure Schema Registry service.\n   *\n   * @param fullyQualifiedNamespace - The Schema Registry service qualified namespace URL, for example\n   *                                  https://mynamespace.servicebus.windows.net.\n   * @param credential - Credential to authenticate requests to the service.\n   * @param options - Options to configure API requests to the service.\n   */\n  constructor(\n    fullyQualifiedNamespace: string,\n    credential: TokenCredential,\n    options: SchemaRegistryClientOptions = {},\n  ) {\n    this._tracing = createTracingClient({\n      namespace: \"Microsoft.EventHub\",\n      packageName: \"@azure/schema-registry\",\n      packageVersion: SDK_VERSION,\n    });\n    this._client = createClient(fullyQualifiedNamespace, credential, { ...options });\n    this.fullyQualifiedNamespace = fullyQualifiedNamespace;\n  }\n\n  /**\n   * Registers a new schema and returns its ID.\n   *\n   * If schema of specified name does not exist in the specified group, a schema\n   * is created at version 1. If schema of specified name exists already in\n   * specified group, schema is created at latest version + 1.\n   *\n   * @param schema - Schema to register.\n   * @returns Registered schema's ID.\n   */\n  registerSchema(\n    schema: SchemaDescription,\n    options: RegisterSchemaOptions = {},\n  ): Promise<SchemaProperties> {\n    return this._tracing.withSpan(\n      \"SchemaRegistryClient.registerSchema\",\n      options,\n      (updatedOptions) => registerSchema(this._client, schema, updatedOptions),\n    );\n  }\n\n  /**\n   * Gets the ID of an existing schema with matching name, group, type, and\n   * definition.\n   *\n   * @param schema - Schema to match.\n   * @returns Matched schema's ID.\n   */\n  getSchemaProperties(\n    schema: SchemaDescription,\n    options: GetSchemaPropertiesOptions = {},\n  ): Promise<SchemaProperties> {\n    return this._tracing.withSpan(\n      \"SchemaRegistryClient.getSchemaProperties\",\n      options,\n      (updatedOptions) => getSchemaProperties(this._client, schema, updatedOptions),\n    );\n  }\n\n  /**\n   * Gets an existing schema by ID. If the schema was not found, a RestError with\n   * status code 404 will be thrown, which could be caught as follows:\n   * \n   * ```ts snippet:ignore\n   * ...\n   * } catch (e) {\n    if (typeof e === \"object\" && e.statusCode === 404) {\n      ...;\n    }\n    throw e;\n  }\n   * ```\n   *\n   * @param schemaId - Unique schema ID.\n   * @returns Schema with given ID.\n   */\n  getSchema(schemaId: string, options?: GetSchemaOptions): Promise<Schema>;\n\n  /**\n   * Gets an existing schema by version. If the schema was not found, a RestError with\n   * status code 404 will be thrown, which could be caught as follows:\n   * \n   * ```ts snippet:ignore\n   * ...\n   * } catch (e) {\n    if (typeof e === \"object\" && e.statusCode === 404) {\n      ...;\n    }\n    throw e;\n  }\n   * ```\n   * @remarks \n   * \n   * If the client uses an older API version that does not support the format of the schema, \n   * the schema format may return the value in the content type header. Please upgrade to the client using\n   * the latest API version so that it can return the correct schema format.\n   * \n   * @param schemaDescription - schema version.\n   * @returns Schema with given ID.\n   */\n  getSchema(\n    name: string,\n    groupName: string,\n    version: number,\n    options?: GetSchemaOptions,\n  ): Promise<Schema>;\n  // implementation\n  getSchema(\n    nameOrId: string,\n    groupNameOrOptions?: string | GetSchemaOptions,\n    version?: number,\n    options: GetSchemaOptions = {},\n  ): Promise<Schema> {\n    if (typeof groupNameOrOptions !== \"string\" && version === undefined) {\n      return this._tracing.withSpan(\n        \"SchemaRegistryClient.getSchema\",\n        groupNameOrOptions ?? {},\n        (updatedOptions) => getSchemaById(this._client, nameOrId, updatedOptions),\n      );\n    }\n    return this._tracing.withSpan(\"SchemaRegistryClient.getSchema\", options, (updatedOptions) =>\n      getSchemaByVersion(\n        this._client,\n        groupNameOrOptions as string,\n        nameOrId,\n        version as number,\n        updatedOptions,\n      ),\n    );\n  }\n}\n"]}