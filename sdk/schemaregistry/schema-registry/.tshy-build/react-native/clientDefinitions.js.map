{"version":3,"file":"clientDefinitions.js","sourceRoot":"","sources":["../../src/clientDefinitions.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  ListSchemaGroupsParameters,\n  ListSchemaVersionsParameters,\n  GetSchemaByIdParameters,\n  GetSchemaByVersionParameters,\n  GetSchemaPropertiesByContentParameters,\n  RegisterSchemaParameters,\n} from \"./parameters.js\";\nimport type {\n  ListSchemaGroups200Response,\n  ListSchemaGroupsDefaultResponse,\n  ListSchemaVersions200Response,\n  ListSchemaVersionsDefaultResponse,\n  GetSchemaById200Response,\n  GetSchemaByIdDefaultResponse,\n  GetSchemaByVersion200Response,\n  GetSchemaByVersionDefaultResponse,\n  GetSchemaPropertiesByContent204Response,\n  GetSchemaPropertiesByContentDefaultResponse,\n  RegisterSchema204Response,\n  RegisterSchemaDefaultResponse,\n} from \"./responses.js\";\nimport type { Client, StreamableMethod } from \"@azure-rest/core-client\";\n\nexport interface ListSchemaGroups {\n  /** Gets the list of schema groups user is authorized to access. */\n  get(\n    options?: ListSchemaGroupsParameters,\n  ): StreamableMethod<ListSchemaGroups200Response | ListSchemaGroupsDefaultResponse>;\n}\n\nexport interface ListSchemaVersions {\n  /** Gets the list of all versions of one schema. */\n  get(\n    options?: ListSchemaVersionsParameters,\n  ): StreamableMethod<ListSchemaVersions200Response | ListSchemaVersionsDefaultResponse>;\n}\n\nexport interface GetSchemaById {\n  /** Gets a registered schema by its unique ID.  Azure Schema Registry guarantees that ID is unique within a namespace. Operation response type is based on serialization of schema requested. */\n  get(\n    options?: GetSchemaByIdParameters,\n  ): StreamableMethod<GetSchemaById200Response | GetSchemaByIdDefaultResponse>;\n}\n\nexport interface GetSchemaByVersion {\n  /** Gets one specific version of one schema. */\n  get(\n    options?: GetSchemaByVersionParameters,\n  ): StreamableMethod<GetSchemaByVersion200Response | GetSchemaByVersionDefaultResponse>;\n}\n\nexport interface GetSchemaPropertiesByContent {\n  /** Gets the properties referencing an existing schema within the specified schema group, as matched by schema content comparison. */\n  post(\n    options: GetSchemaPropertiesByContentParameters,\n  ): StreamableMethod<\n    GetSchemaPropertiesByContent204Response | GetSchemaPropertiesByContentDefaultResponse\n  >;\n}\n\nexport interface RegisterSchema {\n  /** Register new schema. If schema of specified name does not exist in specified group, schema is created at version 1. If schema of specified name exists already in specified group, schema is created at latest version + 1. */\n  put(\n    options: RegisterSchemaParameters,\n  ): StreamableMethod<RegisterSchema204Response | RegisterSchemaDefaultResponse>;\n}\n\nexport interface Routes {\n  /** Resource for '/$schemaGroups' has methods for the following verbs: get */\n  (path: \"/$schemaGroups\"): ListSchemaGroups;\n  /** Resource for '/$schemaGroups/\\{groupName\\}/schemas/\\{schemaName\\}/versions' has methods for the following verbs: get */\n  (\n    path: \"/$schemaGroups/{groupName}/schemas/{schemaName}/versions\",\n    groupName: string,\n    schemaName: string,\n  ): ListSchemaVersions;\n  /** Resource for '/$schemaGroups/$schemas/\\{id\\}' has methods for the following verbs: get */\n  (path: \"/$schemaGroups/$schemas/{id}\", id: string): GetSchemaById;\n  /** Resource for '/$schemaGroups/\\{groupName\\}/schemas/\\{schemaName\\}/versions/\\{schemaVersion\\}' has methods for the following verbs: get */\n  (\n    path: \"/$schemaGroups/{groupName}/schemas/{schemaName}/versions/{schemaVersion}\",\n    groupName: string,\n    schemaName: string,\n    schemaVersion: number,\n  ): GetSchemaByVersion;\n  /** Resource for '/$schemaGroups/\\{groupName\\}/schemas/\\{schemaName\\}:get-id' has methods for the following verbs: post */\n  (\n    path: \"/$schemaGroups/{groupName}/schemas/{schemaName}:get-id\",\n    groupName: string,\n    schemaName: string,\n  ): GetSchemaPropertiesByContent;\n  /** Resource for '/$schemaGroups/\\{groupName\\}/schemas/\\{schemaName\\}' has methods for the following verbs: put */\n  (\n    path: \"/$schemaGroups/{groupName}/schemas/{schemaName}\",\n    groupName: string,\n    schemaName: string,\n  ): RegisterSchema;\n}\n\nexport type SchemaRegistryClient = Client & {\n  path: Routes;\n};\n"]}