{"version":3,"file":"operations.js","sourceRoot":"","sources":["../../src/operations.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,YAAY,EAAE,MAAM,mBAAmB,CAAC;AASjD,OAAO,EAAE,gBAAgB,EAAE,uBAAuB,EAAE,qBAAqB,EAAE,MAAM,kBAAkB,CAAC;AAEpG,OAAO,EAAE,eAAe,EAAE,MAAM,yBAAyB,CAAC;AAE1D,MAAM,CAAC,KAAK,UAAU,cAAc,CAClC,OAA6B,EAC7B,MAAyB,EACzB,UAAiC,EAAE;IAEnC,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,UAAU,EAAE,UAAU,EAAE,aAAa,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC;IAClF,MAAM,QAAQ,GAAG,MAAM,OAAO;SAC3B,IAAI,CAAC,iDAAiD,EAAE,SAAS,EAAE,UAAU,CAAC;SAC9E,GAAG,iBACF,WAAW,EAAE,gBAAgB,CAAC,MAAM,CAAC,EACrC,IAAI,EAAE,oBAAoB,CAAC,aAAa,CAAC,IACtC,OAAO,EACV,CAAC;IACL,IAAI,YAAY,CAAC,QAAQ,CAAC,EAAE,CAAC;QAC3B,MAAM,eAAe,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC;IAED,OAAO,uBAAuB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AACnD,CAAC;AAED,MAAM,UAAU,oBAAoB,CAAC,aAAqB;IACxD,OAAO,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;AACjD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,mBAAmB,CACvC,OAA6B,EAC7B,MAAyB,EACzB,UAAsC,EAAE;IAExC,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,UAAU,EAAE,UAAU,EAAE,aAAa,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC;IAClF,MAAM,QAAQ,GAAG,MAAM,OAAO;SAC3B,IAAI,CAAC,wDAAwD,EAAE,SAAS,EAAE,UAAU,CAAC;SACrF,IAAI,iBACH,WAAW,EAAE,gBAAgB,CAAC,MAAM,CAAC,EACrC,IAAI,EAAE,aAAa,IAChB,OAAO,EACV,CAAC;IACL,IAAI,YAAY,CAAC,QAAQ,CAAC,EAAE,CAAC;QAC3B,MAAM,eAAe,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC;IAED,OAAO,uBAAuB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AACnD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,aAAa,CACjC,OAA6B,EAC7B,QAAgB,EAChB,OAA0B;IAE1B,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,8BAA8B,EAAE,QAAQ,CAAC,CAAC,GAAG,mBAAM,OAAO,EAAG,CAAC;IAElG,IAAI,YAAY,CAAC,QAAQ,CAAC,EAAE,CAAC;QAC3B,MAAM,eAAe,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC;IAED,OAAO,qBAAqB,CAAC,QAAQ,CAAC,CAAC;AACzC,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,kBAAkB,CACtC,OAA6B,EAC7B,SAAiB,EACjB,IAAY,EACZ,OAAe,EACf,OAA0B;IAE1B,MAAM,QAAQ,GAAG,MAAM,OAAO;SAC3B,IAAI,CACH,0EAA0E,EAC1E,SAAS,EACT,IAAI,EACJ,OAAO,CACR;SACA,GAAG,mBAAM,OAAO,EAAG,CAAC;IAEvB,IAAI,YAAY,CAAC,QAAQ,CAAC,EAAE,CAAC;QAC3B,MAAM,eAAe,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC;IAED,OAAO,qBAAqB,CAAC,QAAQ,CAAC,CAAC;AACzC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { isUnexpected } from \"./isUnexpected.js\";\nimport type {\n  GetSchemaOptions,\n  GetSchemaPropertiesOptions,\n  RegisterSchemaOptions,\n  Schema,\n  SchemaDescription,\n  SchemaProperties,\n} from \"./models.js\";\nimport { buildContentType, convertSchemaIdResponse, convertSchemaResponse } from \"./conversions.js\";\nimport type { SchemaRegistryClient } from \"./clientDefinitions.js\";\nimport { createRestError } from \"@azure-rest/core-client\";\n\nexport async function registerSchema(\n  context: SchemaRegistryClient,\n  schema: SchemaDescription,\n  options: RegisterSchemaOptions = {},\n): Promise<SchemaProperties> {\n  const { groupName, name: schemaName, definition: schemaContent, format } = schema;\n  const response = await context\n    .path(\"/$schemaGroups/{groupName}/schemas/{schemaName}\", groupName, schemaName)\n    .put({\n      contentType: buildContentType(format),\n      body: prepareSchemaContent(schemaContent),\n      ...options,\n    });\n  if (isUnexpected(response)) {\n    throw createRestError(response);\n  }\n\n  return convertSchemaIdResponse(response, format);\n}\n\nexport function prepareSchemaContent(schemaContent: string): Uint8Array {\n  return new TextEncoder().encode(schemaContent);\n}\n\nexport async function getSchemaProperties(\n  context: SchemaRegistryClient,\n  schema: SchemaDescription,\n  options: GetSchemaPropertiesOptions = {},\n): Promise<SchemaProperties> {\n  const { groupName, name: schemaName, definition: schemaContent, format } = schema;\n  const response = await context\n    .path(\"/$schemaGroups/{groupName}/schemas/{schemaName}:get-id\", groupName, schemaName)\n    .post({\n      contentType: buildContentType(format),\n      body: schemaContent,\n      ...options,\n    });\n  if (isUnexpected(response)) {\n    throw createRestError(response);\n  }\n\n  return convertSchemaIdResponse(response, format);\n}\n\nexport async function getSchemaById(\n  context: SchemaRegistryClient,\n  schemaId: string,\n  options?: GetSchemaOptions,\n): Promise<Schema> {\n  const response = await context.path(\"/$schemaGroups/$schemas/{id}\", schemaId).get({ ...options });\n\n  if (isUnexpected(response)) {\n    throw createRestError(response);\n  }\n\n  return convertSchemaResponse(response);\n}\n\nexport async function getSchemaByVersion(\n  context: SchemaRegistryClient,\n  groupName: string,\n  name: string,\n  version: number,\n  options?: GetSchemaOptions,\n): Promise<Schema> {\n  const response = await context\n    .path(\n      \"/$schemaGroups/{groupName}/schemas/{schemaName}/versions/{schemaVersion}\",\n      groupName,\n      name,\n      version,\n    )\n    .get({ ...options });\n\n  if (isUnexpected(response)) {\n    throw createRestError(response);\n  }\n\n  return convertSchemaResponse(response);\n}\n"]}