{"version":3,"file":"models.js","sourceRoot":"","sources":["../../src/models.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAkHlC;;GAEG;AACH,IAAY,kBAOX;AAPD,WAAY,kBAAkB;IAC5B,WAAW;IACX,mCAAa,CAAA;IACb,WAAW;IACX,mCAAa,CAAA;IACb,uEAAuE;IACvE,uCAAiB,CAAA;AACnB,CAAC,EAPW,kBAAkB,kCAAlB,kBAAkB,QAO7B","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { CommonClientOptions, OperationOptions } from \"@azure/core-client\";\n\n/**\n * Properties of a schema.\n */\nexport interface SchemaProperties {\n  /** ID that uniquely identifies a schema in the registry namespace. */\n  id: string;\n  /**\n   * Serialization type of schema.\n   */\n  format: string;\n  /** Schema group under which schema is or should be registered. */\n  groupName: string;\n  /** Name of schema. */\n  name: string;\n  /** The version of schema */\n  version: number;\n}\n\n/**\n * Schema definition with its name, format, and group.\n */\nexport interface SchemaDescription {\n  /** Schema group under which schema is or should be registered. */\n  groupName: string;\n  /** Name of schema. */\n  name: string;\n  /**\n   * The format of schema and it must match the serialization type of the schema's group.\n   */\n  format: string;\n  /** String representation of schema. */\n  definition: string;\n}\n\n/**\n * Schema definition with its properties.\n */\nexport interface Schema {\n  /** string representation of the schema. */\n  definition: string;\n  /** The properties of the schema */\n  properties: SchemaProperties;\n}\n\n/**\n * Options for SchemaRegistrationClient.\n */\nexport interface SchemaRegistryClientOptions extends CommonClientOptions {\n  /**\n   * The service API version to use in requests. The default is \"2022-10\".\n   */\n  apiVersion?: string;\n}\n\n/**\n * Options for SchemaRegistryClient.registerSchema.\n */\nexport interface RegisterSchemaOptions extends OperationOptions {}\n\n/**\n * Options for SchemaRegistryClient.getSchemaProperties.\n */\nexport interface GetSchemaPropertiesOptions extends OperationOptions {}\n\n/**\n * Options to configure SchemaRegistryClient.getSchema.\n */\nexport interface GetSchemaOptions extends OperationOptions {}\n\n/**\n * Represents a store of registered schemas.\n *\n * Implemented by SchemaRegistryClient to store the schemas using the Azure\n * Schema Registry service.\n */\nexport interface SchemaRegistry {\n  /**\n   * Registers a new schema and returns its ID.\n   *\n   * If schema of specified name does not exist in the specified group, a schema\n   * is created at version 1. If schema of specified name exists already in\n   * specified group, schema is created at latest version + 1.\n   *\n   * @param schema - Schema to register.\n   * @returns Registered schema's ID.\n   */\n  registerSchema(\n    schema: SchemaDescription,\n    options?: RegisterSchemaOptions,\n  ): Promise<SchemaProperties>;\n  /**\n   * Gets the ID of an existing schema with matching name, group, type, and\n   * definition.\n   *\n   * @param schema - Schema to match.\n   * @returns Matched schema's ID.\n   */\n  getSchemaProperties(\n    schema: SchemaDescription,\n    options?: GetSchemaPropertiesOptions,\n  ): Promise<SchemaProperties>;\n  /**\n   * Gets an existing schema by ID.\n   *\n   * @param schemaId - Unique schema ID.\n   * @returns Schema with given ID.\n   */\n  getSchema(schemaId: string, options?: GetSchemaOptions): Promise<Schema>;\n}\n\n/**\n * Schema formats supported at the time of this library release.\n */\nexport enum KnownSchemaFormats {\n  /** Avro */\n  Avro = \"Avro\",\n  /** JSON */\n  Json = \"Json\",\n  /** Schemas of the custom format will be treated as an opaque string */\n  Custom = \"Custom\",\n}\n\n/** Alias for SchemaContentTypeValues */\nexport type SchemaContentTypeValues =\n  | \"application/json; serialization=Avro\"\n  | \"application/json; serialization=Json\"\n  | \"text/plain; charset=utf-8\";\n"]}