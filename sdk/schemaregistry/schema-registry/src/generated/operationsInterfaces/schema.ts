/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreRestPipeline from "@azure/core-rest-pipeline";
import {
  SchemaGetByIdOptionalParams,
  SchemaGetByIdResponse,
  SchemaGetVersionsOptionalParams,
  SchemaGetVersionsResponse,
  SchemaGetSchemaVersionOptionalParams,
  SchemaGetSchemaVersionResponse,
  SchemaQueryIdByContentOptionalParams,
  SchemaQueryIdByContentResponse,
  SchemaRegisterOptionalParams,
  SchemaRegisterResponse
} from "../models";

/** Interface representing a Schema. */
export interface Schema {
  /**
   * Gets a registered schema by its unique ID.  Azure Schema Registry guarantees that ID is unique
   * within a namespace. Operation response type is based on serialization of schema requested.
   * @param id References specific schema in registry namespace.
   * @param options The options parameters.
   */
  getById(
    id: string,
    options?: SchemaGetByIdOptionalParams
  ): Promise<SchemaGetByIdResponse>;
  /**
   * Gets the list of all versions of one schema.
   * @param groupName Schema group under which schema is registered.  Group's serialization type should
   *                  match the serialization type specified in the request.
   * @param schemaName Name of schema.
   * @param options The options parameters.
   */
  getVersions(
    groupName: string,
    schemaName: string,
    options?: SchemaGetVersionsOptionalParams
  ): Promise<SchemaGetVersionsResponse>;
  /**
   * Gets one specific version of one schema.
   * @param groupName Schema group under which schema is registered.  Group's serialization type should
   *                  match the serialization type specified in the request.
   * @param schemaName Name of schema.
   * @param schemaVersion Version number of specific schema.
   * @param options The options parameters.
   */
  getSchemaVersion(
    groupName: string,
    schemaName: string,
    schemaVersion: number,
    options?: SchemaGetSchemaVersionOptionalParams
  ): Promise<SchemaGetSchemaVersionResponse>;
  /**
   * Gets the ID referencing an existing schema within the specified schema group, as matched by schema
   * content comparison.
   * @param groupName Schema group under which schema is registered.  Group's serialization type should
   *                  match the serialization type specified in the request.
   * @param schemaName Name of schema.
   * @param contentType Content type of the schema.
   * @param schemaContent String representation (UTF-8) of the registered schema.
   * @param options The options parameters.
   */
  queryIdByContent(
    groupName: string,
    schemaName: string,
    contentType: string,
    schemaContent: coreRestPipeline.RequestBodyType,
    options?: SchemaQueryIdByContentOptionalParams
  ): Promise<SchemaQueryIdByContentResponse>;
  /**
   * Register new schema. If schema of specified name does not exist in specified group, schema is
   * created at version 1. If schema of specified name exists already in specified group, schema is
   * created at latest version + 1.
   *
   * @param groupName Schema group under which schema should be registered.  Group's serialization type
   *                  should match the serialization type specified in the request.
   * @param schemaName Name of schema.
   * @param contentType Content type of the schema.
   * @param schemaContent String representation (UTF-8) of the schema being registered.
   * @param options The options parameters.
   */
  register(
    groupName: string,
    schemaName: string,
    contentType: string,
    schemaContent: coreRestPipeline.RequestBodyType,
    options?: SchemaRegisterOptionalParams
  ): Promise<SchemaRegisterResponse>;
}
