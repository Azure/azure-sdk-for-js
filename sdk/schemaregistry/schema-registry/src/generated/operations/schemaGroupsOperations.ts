/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { SchemaGroupsOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { GeneratedSchemaRegistryClient } from "../generatedSchemaRegistryClient";
import {
  SchemaGroupsListOptionalParams,
  SchemaGroupsListResponse
} from "../models";

/** Class containing SchemaGroupsOperations operations. */
export class SchemaGroupsOperationsImpl implements SchemaGroupsOperations {
  private readonly client: GeneratedSchemaRegistryClient;

  /**
   * Initialize a new instance of the class SchemaGroupsOperations class.
   * @param client Reference to the service client
   */
  constructor(client: GeneratedSchemaRegistryClient) {
    this.client = client;
  }

  /**
   * Gets the list of schema groups user is authorized to access.
   * @param options The options parameters.
   */
  list(
    options?: SchemaGroupsListOptionalParams
  ): Promise<SchemaGroupsListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/$schemaGroups",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SchemaGroups
    },
    default: {
      bodyMapper: Mappers.ErrorModel,
      headersMapper: Mappers.SchemaGroupsListExceptionHeaders
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
