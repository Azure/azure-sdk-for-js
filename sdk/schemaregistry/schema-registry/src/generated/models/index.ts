/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * JSON Object received from the registry containing schema identifiers.
 */
export interface SchemaId {
  /**
   * Schema ID that uniquely identifies a schema in the registry namespace.
   */
  id?: string;
}

/**
 * Defines headers for Schema_getById operation.
 */
export interface SchemaGetByIdHeaders {
  /**
   * URL location of schema, identified by schema group, schema name, and version.
   */
  location?: string;
  /**
   * Serialization type for the schema being stored.
   */
  serializationType?: string;
  /**
   * References specific schema in registry namespace.
   */
  schemaId?: string;
  /**
   * URL location of schema, identified by schema ID.
   */
  schemaIdLocation?: string;
  /**
   * Version of the returned schema.
   */
  schemaVersion?: number;
}

/**
 * Defines headers for Schema_queryIdByContent operation.
 */
export interface SchemaQueryIdByContentHeaders {
  /**
   * URL location of schema, identified by schema group, schema name, and version.
   */
  location?: string;
  /**
   * Serialization type for the schema being stored.
   */
  serializationType?: string;
  /**
   * References specific schema in registry namespace.
   */
  schemaId?: string;
  /**
   * URL location of schema, identified by schema ID.
   */
  schemaIdLocation?: string;
  /**
   * Version of the returned schema.
   */
  schemaVersion?: number;
}

/**
 * Defines headers for Schema_register operation.
 */
export interface SchemaRegisterHeaders {
  /**
   * URL location of schema, identified by schema group, schema name, and version.
   */
  location?: string;
  /**
   * Serialization type for the schema being registered.
   */
  serializationType?: string;
  /**
   * References specific schema in registry namespace.
   */
  schemaId?: string;
  /**
   * URL location of schema, identified by schema ID.
   */
  schemaIdLocation?: string;
  /**
   * Version of the returned schema.
   */
  schemaVersion?: number;
}

/**
 * Defines values for SerializationType.
 */
export type SerializationType = "avro" | string;

/**
 * Contains response data for the getById operation.
 */
export type SchemaGetByIdResponse = SchemaGetByIdHeaders & {
  /**
   * The parsed response body.
   */
  body: string;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: string;
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: SchemaGetByIdHeaders;
  };
};

/**
 * Contains response data for the queryIdByContent operation.
 */
export type SchemaQueryIdByContentResponse = SchemaQueryIdByContentHeaders &
  SchemaId & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SchemaId;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: SchemaQueryIdByContentHeaders;
    };
  };

/**
 * Contains response data for the register operation.
 */
export type SchemaRegisterResponse = SchemaRegisterHeaders &
  SchemaId & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SchemaId;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: SchemaRegisterHeaders;
    };
  };

/**
 * Optional parameters.
 */
export interface GeneratedSchemaRegistryClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
