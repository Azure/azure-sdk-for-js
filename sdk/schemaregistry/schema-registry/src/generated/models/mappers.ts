/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const SchemaId: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SchemaId",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceErrorResponse",
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        required: true,
        type: {
          name: "Number"
        }
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String"
        }
      },
      innererror: {
        serializedName: "innererror",
        type: {
          name: "Composite",
          className: "InnerErrorInfo"
        }
      }
    }
  }
};

export const InnerErrorInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InnerErrorInfo",
    modelProperties: {
      details: {
        serializedName: "details",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SchemaObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SchemaObject",
    modelProperties: {
      schema: {
        serializedName: "schema",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SchemaGetByIdHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SchemaGetByIdHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      serializationType: {
        serializedName: "serialization-type",
        type: {
          name: "String"
        }
      },
      schemaId: {
        serializedName: "schema-id",
        type: {
          name: "String"
        }
      },
      schemaIdLocation: {
        serializedName: "schema-id-location",
        type: {
          name: "String"
        }
      },
      schemaGroupName: {
        serializedName: "schema-group-name",
        type: {
          name: "String"
        }
      },
      schemaName: {
        serializedName: "schema-name",
        type: {
          name: "String"
        }
      },
      schemaVersion: {
        serializedName: "schema-version",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SchemaRegisterHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SchemaRegisterHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      serializationType: {
        serializedName: "serialization-type",
        type: {
          name: "String"
        }
      },
      schemaId: {
        serializedName: "schema-id",
        type: {
          name: "String"
        }
      },
      schemaIdLocation: {
        serializedName: "schema-id-location",
        type: {
          name: "String"
        }
      },
      schemaGroupName: {
        serializedName: "schema-group-name",
        type: {
          name: "String"
        }
      },
      schemaName: {
        serializedName: "schema-name",
        type: {
          name: "String"
        }
      },
      schemaVersion: {
        serializedName: "schema-version",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SchemaQueryIdByContentHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SchemaQueryIdByContentHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      serializationType: {
        serializedName: "serialization-type",
        type: {
          name: "String"
        }
      },
      schemaId: {
        serializedName: "schema-id",
        type: {
          name: "String"
        }
      },
      schemaIdLocation: {
        serializedName: "schema-id-location",
        type: {
          name: "String"
        }
      },
      schemaGroupName: {
        serializedName: "schema-group-name",
        type: {
          name: "String"
        }
      },
      schemaName: {
        serializedName: "schema-name",
        type: {
          name: "String"
        }
      },
      schemaVersion: {
        serializedName: "schema-version",
        type: {
          name: "Number"
        }
      }
    }
  }
};
