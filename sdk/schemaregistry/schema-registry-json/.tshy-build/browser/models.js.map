{"version":3,"file":"models.js","sourceRoot":"","sources":["../../src/models.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * A message that contains binary data and a content type.\n */\nexport interface MessageContent {\n  /**\n   * The message's binary data\n   */\n  data: Uint8Array;\n  /**\n   * The message's content type\n   */\n  contentType: string;\n}\n\n/**\n * MessageAdapter is an interface that converts to/from a concrete message type\n * to a MessageContent\n */\nexport interface MessageAdapter<MessageT> {\n  /**\n   * defines how to create a message from a payload and a content type\n   */\n  produce: (messageContent: MessageContent) => MessageT;\n  /**\n   * defines how to access the payload and the content type of a message\n   */\n  consume: (message: MessageT) => MessageContent;\n}\n\n/**\n * Options for Schema\n */\nexport interface JsonSchemaSerializerOptions<MessageT> {\n  /**\n   * The group name to be used when registering/looking up a schema. Must be specified\n   * if `serialize` will be called.\n   */\n  groupName?: string;\n  /**\n   * Message Adapter enables the serializer to produce and consume custom messages.\n   */\n  messageAdapter?: MessageAdapter<MessageT>;\n}\n\n/**\n * The options to the deserialize method.\n */\nexport interface DeserializeOptions {\n  /**\n   * Validate the value against the schema. Raise an error if the validation is not successful.\n   */\n  validateCallback?: (value: unknown, schema: string) => void;\n}\n"]}