/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** professionalService resources response with continuation. */
export interface ProfessionalServiceResourceResponseWithContinuation {
  /** the next link to query to get the remaining results. */
  nextLink?: string;
  /** the value of response. */
  value?: ProfessionalServiceResource[];
}

/** ProfessionalService REST API resource definition. */
export interface ProfessionalServiceResource {
  /** professionalService properties */
  properties?: ProfessionalServiceResourceProperties;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The resource uri
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Resource type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** the resource tags. */
  tags?: { [propertyName: string]: string };
}

/** professionalService resource properties */
export interface ProfessionalServiceProperties {
  /** The ProfessionalService Subscription Status. */
  status?: ProfessionalServiceResourceStatus;
  /** The current Term object. */
  term?: ProfessionalServicePropertiesTerm;
  /** The billing period eg P1M,P1Y for monthly,yearly respectively */
  billingPeriod?: string;
  /** Whether the current term is a Free Trial term */
  isFreeTrial?: boolean;
  /** The Payment channel for the ProfessionalServiceSubscription. */
  paymentChannelType?: PaymentChannelType;
  /** The metadata about the ProfessionalService subscription such as the AzureSubscriptionId and ResourceUri. */
  paymentChannelMetadata?: { [propertyName: string]: string };
  /**
   * The created date of this resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly created?: string;
  /** The last modifier date if this resource. */
  lastModified?: string;
}

/** The current Term object. */
export interface ProfessionalServicePropertiesTerm {
  /** The unit term eg P1M,P1Y,P2Y,P3Y meaning month,1year,2year,3year respectively */
  termUnit?: string;
  /** The start date of the current term */
  startDate?: string;
  /** The end date of the current term */
  endDate?: string;
}

/** properties for creation professionalService */
export interface ProfessionalServiceCreationProperties {
  /** The offer id. */
  offerId?: string;
  /** The publisher id. */
  publisherId?: string;
  /** The plan id. */
  skuId?: string;
  /** Whether the ProfessionalService subscription will auto renew upon term end. */
  autoRenew?: boolean;
  /** The quote id which the ProfessionalService will be purchase with. */
  quoteId?: string;
  /** The store front which initiates the purchase. */
  storeFront?: string;
  /** The unit term eg P1M,P1Y,P2Y,P3Y meaning month,1year,2year,3year respectively */
  termUnit?: string;
  /** The billing period eg P1M,P1Y for monthly,yearly respectively */
  billingPeriod?: string;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** ProfessionalService REST API resource definition for creation. */
export interface ProfessionalServiceResourceCreation {
  /**
   * The resource uri
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /** The resource name */
  name?: string;
  /**
   * Resource type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** the resource tags. */
  tags?: { [propertyName: string]: string };
  /** Resource location. Only value allowed for ProfessionalService is 'global' */
  location?: string;
  /** Properties of the ProfessionalService resource that are relevant for creation. */
  properties?: ProfessionalServiceCreationProperties;
}

/** delete Options */
export interface DeleteOptions {
  /** whether it is unsubscribeOnly */
  unsubscribeOnly?: boolean;
  /** The reasonCode */
  reasonCode?: number;
  /** the feedback */
  feedback?: string;
}

/** professionalService app operation response with continuation. */
export interface ProfessionalServiceAppOperationsResponseWithContinuation {
  /** the next link to query to get the remaining results. */
  nextLink?: string;
  /** the value of response. */
  value?: ProfessionalServiceAppOperation[];
}

/** professionalService app operations */
export interface ProfessionalServiceAppOperation {
  /** the operation name */
  name?: string;
  /** the operation display */
  display?: ProfessionalServiceAppOperationDisplay;
  /** the operation origin */
  origin?: string;
  /** whether the operation is a data action or not. */
  isDataAction?: boolean;
}

/** ProfessionalService app operation display */
export interface ProfessionalServiceAppOperationDisplay {
  /** Name of the provider for display purposes */
  provider?: string;
  /** Name of the resource type for display purposes */
  resource?: string;
  /** Name of the operation for display purposes */
  operation?: string;
  /** Description of the operation for display purposes */
  description?: string;
}

/** the ISV access token result response. */
export interface AccessTokenResult {
  /** The Publisher Offer Base Uri */
  publisherOfferBaseUri?: string;
  /** The generated token */
  token?: string;
}

/** professionalService app response with continuation. */
export interface ProfessionalServiceAppResponseWithContinuation {
  /** the next link to query to get the remaining results. */
  nextLink?: string;
  /** the value of response. */
  value?: ProfessionalServiceApp[];
}

/** the professionalServiceApp resource. */
export interface ProfessionalServiceApp {
  /**
   * the resource Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /** the resource location. */
  location?: string;
  /** the resource name. */
  name?: string;
  /** the resource type. */
  type?: string;
  /** the resource properties. */
  properties?: ProfessionalServiceAppProperties;
  /** the resource tags. */
  tags?: { [propertyName: string]: string };
}

/** ProfessionalService resource properties. */
export interface ProfessionalServiceAppProperties {
  /** the ProfessionalService resource status. */
  status?: ProfessionalServiceAppStatus;
  /** the resource plan details. */
  professionalServiceAppPlan?: ProfessionalServiceAppPlan;
}

/** ProfessionalService resource plan. */
export interface ProfessionalServiceAppPlan {
  /** the publisher id. */
  publisher?: string;
  /** the offer id. */
  product?: string;
  /** the plan id. */
  name?: string;
}

/** professionalService properties */
export interface ProfessionalServiceResourceProperties
  extends ProfessionalServiceProperties,
    ProfessionalServiceCreationProperties {}

/** Defines headers for ProfessionalServiceSubscriptionLevel_createOrUpdate operation. */
export interface ProfessionalServiceSubscriptionLevelCreateOrUpdateHeaders {
  /** The URL to check the status of the asynchronous operation. */
  location?: string;
  /** The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. */
  retryAfter?: number;
}

/** Defines headers for ProfessionalServiceSubscriptionLevel_delete operation. */
export interface ProfessionalServiceSubscriptionLevelDeleteHeaders {
  /** The URL to check the status of the asynchronous operation. */
  location?: string;
  /** The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. */
  retryAfter?: number;
}

/** Defines headers for ProfessionalServiceSubscriptionLevel_updateToUnsubscribed operation. */
export interface ProfessionalServiceSubscriptionLevelUpdateToUnsubscribedHeaders {
  /** The URL to check the status of the asynchronous operation. */
  location?: string;
  /** The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. */
  retryAfter?: number;
}

/** Defines headers for ProfessionalServiceOperation_get operation. */
export interface ProfessionalServiceOperationGetHeaders {
  /** The URL to check the status of the asynchronous operation. */
  location?: string;
  /** The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. */
  retryAfter?: number;
}

/** Known values of {@link ProfessionalServiceResourceStatus} that the service accepts. */
export enum KnownProfessionalServiceResourceStatus {
  /** NotStarted */
  NotStarted = "NotStarted",
  /** PendingFulfillmentStart */
  PendingFulfillmentStart = "PendingFulfillmentStart",
  /** Subscribed */
  Subscribed = "Subscribed",
  /** Unsubscribed */
  Unsubscribed = "Unsubscribed",
  /** Suspended */
  Suspended = "Suspended"
}

/**
 * Defines values for ProfessionalServiceResourceStatus. \
 * {@link KnownProfessionalServiceResourceStatus} can be used interchangeably with ProfessionalServiceResourceStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotStarted** \
 * **PendingFulfillmentStart** \
 * **Subscribed** \
 * **Unsubscribed** \
 * **Suspended**
 */
export type ProfessionalServiceResourceStatus = string;

/** Known values of {@link PaymentChannelType} that the service accepts. */
export enum KnownPaymentChannelType {
  /** SubscriptionDelegated */
  SubscriptionDelegated = "SubscriptionDelegated",
  /** CustomerDelegated */
  CustomerDelegated = "CustomerDelegated"
}

/**
 * Defines values for PaymentChannelType. \
 * {@link KnownPaymentChannelType} can be used interchangeably with PaymentChannelType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SubscriptionDelegated** \
 * **CustomerDelegated**
 */
export type PaymentChannelType = string;

/** Known values of {@link ProfessionalServiceAppStatus} that the service accepts. */
export enum KnownProfessionalServiceAppStatus {
  /** Pending */
  Pending = "Pending",
  /** Subscribed */
  Subscribed = "Subscribed",
  /** Unsubscribed */
  Unsubscribed = "Unsubscribed",
  /** Suspended */
  Suspended = "Suspended",
  /** Deactivated */
  Deactivated = "Deactivated"
}

/**
 * Defines values for ProfessionalServiceAppStatus. \
 * {@link KnownProfessionalServiceAppStatus} can be used interchangeably with ProfessionalServiceAppStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Subscribed** \
 * **Unsubscribed** \
 * **Suspended** \
 * **Deactivated**
 */
export type ProfessionalServiceAppStatus = string;

/** Optional parameters. */
export interface ProfessionalServiceSubscriptionLevelListByAzureSubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByAzureSubscription operation. */
export type ProfessionalServiceSubscriptionLevelListByAzureSubscriptionResponse = ProfessionalServiceResourceResponseWithContinuation;

/** Optional parameters. */
export interface ProfessionalServiceSubscriptionLevelListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type ProfessionalServiceSubscriptionLevelListByResourceGroupResponse = ProfessionalServiceResourceResponseWithContinuation;

/** Optional parameters. */
export interface ProfessionalServiceSubscriptionLevelGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ProfessionalServiceSubscriptionLevelGetResponse = ProfessionalServiceResource;

/** Optional parameters. */
export interface ProfessionalServiceSubscriptionLevelCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ProfessionalServiceSubscriptionLevelCreateOrUpdateResponse = ProfessionalServiceResource;

/** Optional parameters. */
export interface ProfessionalServiceSubscriptionLevelDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ProfessionalServiceSubscriptionLevelUpdateToUnsubscribedOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ProfessionalServiceSubscriptionLevelListByAzureSubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByAzureSubscriptionNext operation. */
export type ProfessionalServiceSubscriptionLevelListByAzureSubscriptionNextResponse = ProfessionalServiceResourceResponseWithContinuation;

/** Optional parameters. */
export interface ProfessionalServiceSubscriptionLevelListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type ProfessionalServiceSubscriptionLevelListByResourceGroupNextResponse = ProfessionalServiceResourceResponseWithContinuation;

/** Optional parameters. */
export interface ProfessionalServiceOperationGetOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the get operation. */
export type ProfessionalServiceOperationGetResponse = ProfessionalServiceResource;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = ProfessionalServiceAppOperationsResponseWithContinuation;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = ProfessionalServiceAppOperationsResponseWithContinuation;

/** Optional parameters. */
export interface ProfessionalServiceOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
