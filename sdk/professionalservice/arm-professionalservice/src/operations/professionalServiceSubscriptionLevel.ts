/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ProfessionalServiceSubscriptionLevel } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ProfessionalService } from "../professionalService";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  ProfessionalServiceResource,
  ProfessionalServiceSubscriptionLevelListByAzureSubscriptionNextOptionalParams,
  ProfessionalServiceSubscriptionLevelListByAzureSubscriptionOptionalParams,
  ProfessionalServiceSubscriptionLevelListByAzureSubscriptionResponse,
  ProfessionalServiceSubscriptionLevelListByResourceGroupNextOptionalParams,
  ProfessionalServiceSubscriptionLevelListByResourceGroupOptionalParams,
  ProfessionalServiceSubscriptionLevelListByResourceGroupResponse,
  ProfessionalServiceSubscriptionLevelGetOptionalParams,
  ProfessionalServiceSubscriptionLevelGetResponse,
  ProfessionalServiceResourceCreation,
  ProfessionalServiceSubscriptionLevelCreateOrUpdateOptionalParams,
  ProfessionalServiceSubscriptionLevelCreateOrUpdateResponse,
  ProfessionalServiceSubscriptionLevelDeleteOptionalParams,
  DeleteOptions,
  ProfessionalServiceSubscriptionLevelUpdateToUnsubscribedOptionalParams,
  ProfessionalServiceSubscriptionLevelListByAzureSubscriptionNextResponse,
  ProfessionalServiceSubscriptionLevelListByResourceGroupNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ProfessionalServiceSubscriptionLevel operations. */
export class ProfessionalServiceSubscriptionLevelImpl
  implements ProfessionalServiceSubscriptionLevel {
  private readonly client: ProfessionalService;

  /**
   * Initialize a new instance of the class ProfessionalServiceSubscriptionLevel class.
   * @param client Reference to the service client
   */
  constructor(client: ProfessionalService) {
    this.client = client;
  }

  /**
   * Gets information about all the Subscription Level ProfessionalService in a certain Azure
   * subscription.
   * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
   *                       00000000-0000-0000-0000-000000000000)
   * @param options The options parameters.
   */
  public listByAzureSubscription(
    subscriptionId: string,
    options?: ProfessionalServiceSubscriptionLevelListByAzureSubscriptionOptionalParams
  ): PagedAsyncIterableIterator<ProfessionalServiceResource> {
    const iter = this.listByAzureSubscriptionPagingAll(subscriptionId, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByAzureSubscriptionPagingPage(
          subscriptionId,
          options,
          settings
        );
      }
    };
  }

  private async *listByAzureSubscriptionPagingPage(
    subscriptionId: string,
    options?: ProfessionalServiceSubscriptionLevelListByAzureSubscriptionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ProfessionalServiceResource[]> {
    let result: ProfessionalServiceSubscriptionLevelListByAzureSubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByAzureSubscription(subscriptionId, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByAzureSubscriptionNext(
        subscriptionId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByAzureSubscriptionPagingAll(
    subscriptionId: string,
    options?: ProfessionalServiceSubscriptionLevelListByAzureSubscriptionOptionalParams
  ): AsyncIterableIterator<ProfessionalServiceResource> {
    for await (const page of this.listByAzureSubscriptionPagingPage(
      subscriptionId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets information about all the Subscription Level ProfessionalService in a certain resource group.
   * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
   *                       00000000-0000-0000-0000-000000000000)
   * @param resourceGroupName The name of the resource group.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    subscriptionId: string,
    resourceGroupName: string,
    options?: ProfessionalServiceSubscriptionLevelListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<ProfessionalServiceResource> {
    const iter = this.listByResourceGroupPagingAll(
      subscriptionId,
      resourceGroupName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          subscriptionId,
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    subscriptionId: string,
    resourceGroupName: string,
    options?: ProfessionalServiceSubscriptionLevelListByResourceGroupOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ProfessionalServiceResource[]> {
    let result: ProfessionalServiceSubscriptionLevelListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(
        subscriptionId,
        resourceGroupName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        subscriptionId,
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    subscriptionId: string,
    resourceGroupName: string,
    options?: ProfessionalServiceSubscriptionLevelListByResourceGroupOptionalParams
  ): AsyncIterableIterator<ProfessionalServiceResource> {
    for await (const page of this.listByResourceGroupPagingPage(
      subscriptionId,
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets information about all the Subscription Level ProfessionalService in a certain Azure
   * subscription.
   * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
   *                       00000000-0000-0000-0000-000000000000)
   * @param options The options parameters.
   */
  private _listByAzureSubscription(
    subscriptionId: string,
    options?: ProfessionalServiceSubscriptionLevelListByAzureSubscriptionOptionalParams
  ): Promise<
    ProfessionalServiceSubscriptionLevelListByAzureSubscriptionResponse
  > {
    return this.client.sendOperationRequest(
      { subscriptionId, options },
      listByAzureSubscriptionOperationSpec
    );
  }

  /**
   * Gets information about all the Subscription Level ProfessionalService in a certain resource group.
   * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
   *                       00000000-0000-0000-0000-000000000000)
   * @param resourceGroupName The name of the resource group.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    subscriptionId: string,
    resourceGroupName: string,
    options?: ProfessionalServiceSubscriptionLevelListByResourceGroupOptionalParams
  ): Promise<ProfessionalServiceSubscriptionLevelListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Gets information about the specified Subscription Level ProfessionalService.
   * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
   *                       00000000-0000-0000-0000-000000000000)
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The name of the resource.
   * @param options The options parameters.
   */
  get(
    subscriptionId: string,
    resourceGroupName: string,
    resourceName: string,
    options?: ProfessionalServiceSubscriptionLevelGetOptionalParams
  ): Promise<ProfessionalServiceSubscriptionLevelGetResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, resourceGroupName, resourceName, options },
      getOperationSpec
    );
  }

  /**
   * Creates or updates a ProfessionalService resource.
   * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
   *                       00000000-0000-0000-0000-000000000000)
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The name of the resource.
   * @param parameters Parameters supplied to the create or update subscription level ProfessionalService
   *                   operation.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    subscriptionId: string,
    resourceGroupName: string,
    resourceName: string,
    parameters: ProfessionalServiceResourceCreation,
    options?: ProfessionalServiceSubscriptionLevelCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<
        ProfessionalServiceSubscriptionLevelCreateOrUpdateResponse
      >,
      ProfessionalServiceSubscriptionLevelCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ProfessionalServiceSubscriptionLevelCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { subscriptionId, resourceGroupName, resourceName, parameters, options },
      createOrUpdateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates or updates a ProfessionalService resource.
   * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
   *                       00000000-0000-0000-0000-000000000000)
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The name of the resource.
   * @param parameters Parameters supplied to the create or update subscription level ProfessionalService
   *                   operation.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    subscriptionId: string,
    resourceGroupName: string,
    resourceName: string,
    parameters: ProfessionalServiceResourceCreation,
    options?: ProfessionalServiceSubscriptionLevelCreateOrUpdateOptionalParams
  ): Promise<ProfessionalServiceSubscriptionLevelCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      subscriptionId,
      resourceGroupName,
      resourceName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes the specified ProfessionalService.
   * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
   *                       00000000-0000-0000-0000-000000000000)
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The name of the resource.
   * @param options The options parameters.
   */
  async beginDelete(
    subscriptionId: string,
    resourceGroupName: string,
    resourceName: string,
    options?: ProfessionalServiceSubscriptionLevelDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { subscriptionId, resourceGroupName, resourceName, options },
      deleteOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes the specified ProfessionalService.
   * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
   *                       00000000-0000-0000-0000-000000000000)
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The name of the resource.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    subscriptionId: string,
    resourceGroupName: string,
    resourceName: string,
    options?: ProfessionalServiceSubscriptionLevelDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      subscriptionId,
      resourceGroupName,
      resourceName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Unsubscribe from a specified Subscription Level ProfessionalService.
   * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
   *                       00000000-0000-0000-0000-000000000000)
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The name of the resource.
   * @param parameters Parameters supplied to unsubscribe ProfessionalService operation.
   * @param options The options parameters.
   */
  async beginUpdateToUnsubscribed(
    subscriptionId: string,
    resourceGroupName: string,
    resourceName: string,
    parameters: DeleteOptions,
    options?: ProfessionalServiceSubscriptionLevelUpdateToUnsubscribedOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { subscriptionId, resourceGroupName, resourceName, parameters, options },
      updateToUnsubscribedOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Unsubscribe from a specified Subscription Level ProfessionalService.
   * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
   *                       00000000-0000-0000-0000-000000000000)
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The name of the resource.
   * @param parameters Parameters supplied to unsubscribe ProfessionalService operation.
   * @param options The options parameters.
   */
  async beginUpdateToUnsubscribedAndWait(
    subscriptionId: string,
    resourceGroupName: string,
    resourceName: string,
    parameters: DeleteOptions,
    options?: ProfessionalServiceSubscriptionLevelUpdateToUnsubscribedOptionalParams
  ): Promise<void> {
    const poller = await this.beginUpdateToUnsubscribed(
      subscriptionId,
      resourceGroupName,
      resourceName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * ListByAzureSubscriptionNext
   * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
   *                       00000000-0000-0000-0000-000000000000)
   * @param nextLink The nextLink from the previous successful call to the ListByAzureSubscription
   *                 method.
   * @param options The options parameters.
   */
  private _listByAzureSubscriptionNext(
    subscriptionId: string,
    nextLink: string,
    options?: ProfessionalServiceSubscriptionLevelListByAzureSubscriptionNextOptionalParams
  ): Promise<
    ProfessionalServiceSubscriptionLevelListByAzureSubscriptionNextResponse
  > {
    return this.client.sendOperationRequest(
      { subscriptionId, nextLink, options },
      listByAzureSubscriptionNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
   *                       00000000-0000-0000-0000-000000000000)
   * @param resourceGroupName The name of the resource group.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    subscriptionId: string,
    resourceGroupName: string,
    nextLink: string,
    options?: ProfessionalServiceSubscriptionLevelListByResourceGroupNextOptionalParams
  ): Promise<
    ProfessionalServiceSubscriptionLevelListByResourceGroupNextResponse
  > {
    return this.client.sendOperationRequest(
      { subscriptionId, resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByAzureSubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.ProfessionalService/resources",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProfessionalServiceResourceResponseWithContinuation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ProfessionalService/resources",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProfessionalServiceResourceResponseWithContinuation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ProfessionalService/resources/{resourceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProfessionalServiceResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ProfessionalService/resources/{resourceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ProfessionalServiceResource
    },
    201: {
      bodyMapper: Mappers.ProfessionalServiceResource
    },
    202: {
      bodyMapper: Mappers.ProfessionalServiceResource
    },
    204: {
      bodyMapper: Mappers.ProfessionalServiceResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ProfessionalService/resources/{resourceName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateToUnsubscribedOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ProfessionalService/resources/{resourceName}/unsubscribe",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listByAzureSubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProfessionalServiceResourceResponseWithContinuation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProfessionalServiceResourceResponseWithContinuation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
