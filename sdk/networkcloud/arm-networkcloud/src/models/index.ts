/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results. */
export interface OperationListResult {
  /**
   * List of operations supported by the resource provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results (if there are any).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export interface Operation {
  /**
   * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
  /** Localized display information for this particular operation. */
  display?: OperationDisplay;
  /**
   * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: Origin;
  /**
   * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export interface OperationDisplay {
  /**
   * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** BareMetalMachineList represents a list of bare metal machines. */
export interface BareMetalMachineList {
  /** The link used to get the next page of operations. */
  nextLink?: string;
  /** The list of bare metal machines. */
  value?: BareMetalMachine[];
}

/** ExtendedLocation represents the Azure custom location where the resource will be created. */
export interface ExtendedLocation {
  /** The resource ID of the extended location on which the resource will be created. */
  name: string;
  /** The extended location type, for example, CustomLocation. */
  type: string;
}

/** AdministrativeCredentials represents the admin credentials for the device requiring password-based authentication. */
export interface AdministrativeCredentials {
  /** The password of the administrator of the device used during initialization. */
  password: string;
  /** The username of the administrator of the device used during initialization. */
  username: string;
}

/** HardwareInventory represents the hardware configuration of this machine as exposed to the customer, including information acquired from the model/sku information and from the ironic inspector. */
export interface HardwareInventory {
  /**
   * Freeform data extracted from the environment about this machine. This information varies depending on the specific hardware and configuration.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalHostInformation?: string;
  /**
   * The list of network interfaces and associated details for the bare metal machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly interfaces?: HardwareInventoryNetworkInterface[];
  /**
   * Field Deprecated. Will be removed in an upcoming version. The list of network interface cards and associated details for the bare metal machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nics?: Nic[];
}

/** HardwareInventoryNetworkInterface represents the network interface details as part of a hardware inventory. */
export interface HardwareInventoryNetworkInterface {
  /**
   * The current status of the link.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly linkStatus?: string;
  /**
   * The MAC address associated with this interface.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly macAddress?: string;
  /**
   * The name of the interface.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The resource ID of the network interface for the port on the switch that this machine's interface is connected to.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkInterfaceId?: string;
}

/** Type Deprecated. Will be removed in an upcoming version. Nic represents the network interface card details. */
export interface Nic {
  /**
   * The information about the device connected to this NIC.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lldpNeighbor?: LldpNeighbor;
  /**
   * The MAC address associated with this NIC.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly macAddress?: string;
  /**
   * The name of the NIC/interface.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
}

/** Type Deprecated. Will be removed in an upcoming version. LldpNeighbor represents the details about the device connected to the NIC. */
export interface LldpNeighbor {
  /**
   * The descriptive information about the port on the connected device.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly portDescription?: string;
  /**
   * The system-assigned name of the port on the connected device.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly portName?: string;
  /**
   * The descriptive information about the connected device.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemDescription?: string;
  /**
   * The system-assigned name of the connected device.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemName?: string;
}

/** HardwareValidationStatus represents the latest hardware validation details performed for this bare metal machine. */
export interface HardwareValidationStatus {
  /**
   * The timestamp of the hardware validation execution.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastValidationTime?: Date;
  /**
   * The outcome of the hardware validation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly result?: BareMetalMachineHardwareValidationResult;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** CloudServicesNetworkList represents a list of cloud services networks. */
export interface CloudServicesNetworkList {
  /** The link used to get the next page of operations. */
  nextLink?: string;
  /** The list of cloud services networks. */
  value?: CloudServicesNetwork[];
}

/** EgressEndpoint represents the connection from a cloud services network to the specified endpoint for a common purpose. */
export interface EgressEndpoint {
  /** The descriptive category name of endpoints accessible by the AKS agent node. For example, azure-resource-management, API server, etc. The platform egress endpoints provided by default will use the category 'default'. */
  category: string;
  /** The list of endpoint dependencies. */
  endpoints: EndpointDependency[];
}

/** EndpointDependency represents the definition of an endpoint, including the domain and details. */
export interface EndpointDependency {
  /** The domain name of the dependency. */
  domainName: string;
  /** The port of this endpoint. */
  port?: number;
}

/** ClusterManagerList represents a list of cluster manager objects. */
export interface ClusterManagerList {
  /** The link used to get the next page of operations. */
  nextLink?: string;
  /** The list of cluster managers. */
  value?: ClusterManager[];
}

/** ClusterAvailableVersion represents the cluster version that the cluster manager can be asked to create and manage. */
export interface ClusterAvailableVersion {
  /**
   * The last date the version of the platform is supported.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly supportExpiryDate?: string;
  /**
   * The version of the cluster to be deployed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetClusterVersion?: string;
}

/** ManagedResourceGroupConfiguration represents the configuration of the resource group managed by Azure. */
export interface ManagedResourceGroupConfiguration {
  /** The location of the managed resource group. If not specified, the location of the parent resource is chosen. */
  location?: string;
  /** The name for the managed resource group. If not specified, the unique name is automatically generated. */
  name?: string;
}

/** ClusterList represents a list of clusters. */
export interface ClusterList {
  /** The link used to get the next page of operations. */
  nextLink?: string;
  /** The list of clusters. */
  value?: Cluster[];
}

/** RackDefinition represents details regarding the rack. */
export interface RackDefinition {
  /** The zone name used for this rack when created. */
  availabilityZone?: string;
  /** The unordered list of bare metal machine configuration. */
  bareMetalMachineConfigurationData?: BareMetalMachineConfigurationData[];
  /** The resource ID of the network rack that matches this rack definition. */
  networkRackId: string;
  /** The free-form description of the rack's location. */
  rackLocation?: string;
  /** The unique identifier for the rack within Network Cloud cluster. An alternate unique alphanumeric value other than a serial number may be provided if desired. */
  rackSerialNumber: string;
  /** The resource ID of the sku for the rack being added. */
  rackSkuId: string;
  /** The list of storage appliance configuration data for this rack. */
  storageApplianceConfigurationData?: StorageApplianceConfigurationData[];
}

/** BareMetalMachineConfigurationData represents configuration for the bare metal machine. */
export interface BareMetalMachineConfigurationData {
  /**
   * The connection string for the baseboard management controller including IP address and protocol.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly bmcConnectionString?: string;
  /** The credentials of the baseboard management controller on this bare metal machine. */
  bmcCredentials: AdministrativeCredentials;
  /** The MAC address of the BMC for this machine. */
  bmcMacAddress: string;
  /** The MAC address associated with the PXE NIC card. */
  bootMacAddress: string;
  /** The free-form additional information about the machine, e.g. an asset tag. */
  machineDetails?: string;
  /**
   * The user-provided name for the bare metal machine created from this specification.
   * If not provided, the machine name will be generated programmatically.
   */
  machineName?: string;
  /** The slot the physical machine is in the rack based on the BOM configuration. */
  rackSlot: number;
  /** The serial number of the machine. Hardware suppliers may use an alternate value. For example, service tag. */
  serialNumber: string;
}

/** StorageApplianceConfigurationData represents configuration for the storage application. */
export interface StorageApplianceConfigurationData {
  /** The credentials of the administrative interface on this storage appliance. */
  adminCredentials: AdministrativeCredentials;
  /** The slot that storage appliance is in the rack based on the BOM configuration. */
  rackSlot: number;
  /** The serial number of the appliance. */
  serialNumber: string;
  /** The user-provided name for the storage appliance that will be created from this specification. */
  storageApplianceName?: string;
}

/** ClusterAvailableUpgradeVersion represents the various cluster upgrade parameters. */
export interface ClusterAvailableUpgradeVersion {
  /**
   * The indicator of whether the control plane will be impacted during the upgrade.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly controlImpact?: ControlImpact;
  /**
   * The expected duration needed for this upgrade.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly expectedDuration?: string;
  /**
   * The impact description including the specific details and release notes.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly impactDescription?: string;
  /**
   * The last date the version of the platform is supported.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly supportExpiryDate?: string;
  /**
   * The target version this cluster will be upgraded to.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetClusterVersion?: string;
  /**
   * The indicator of whether the workload will be impacted during the upgrade.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly workloadImpact?: WorkloadImpact;
}

/** ClusterCapacity represents various details regarding compute capacity. */
export interface ClusterCapacity {
  /** The remaining appliance-based storage in GB available for workload use. */
  availableApplianceStorageGB?: number;
  /** The remaining number of cores that are available in this cluster for workload use. */
  availableCoreCount?: number;
  /** The remaining machine or host-based storage in GB available for workload use. */
  availableHostStorageGB?: number;
  /** The remaining memory in GB that are available in this cluster for workload use. */
  availableMemoryGB?: number;
  /** The total appliance-based storage in GB supported by this cluster for workload use. */
  totalApplianceStorageGB?: number;
  /** The total number of cores that are supported by this cluster for workload use. */
  totalCoreCount?: number;
  /** The total machine or host-based storage in GB supported by this cluster for workload use. */
  totalHostStorageGB?: number;
  /** The total memory supported by this cluster for workload use. */
  totalMemoryGB?: number;
}

/** ServicePrincipalInformation represents the details of the service principal to be used by the cluster during Arc Appliance installation. */
export interface ServicePrincipalInformation {
  /** The application ID, also known as client ID, of the service principal. */
  applicationId: string;
  /** The password of the service principal. */
  password: string;
  /** The principal ID, also known as the object ID, of the service principal. */
  principalId: string;
  /** The tenant ID, also known as the directory ID, of the tenant in which the service principal is created. */
  tenantId: string;
}

/** ValidationThreshold indicates allowed machine and node hardware and deployment failures. */
export interface ValidationThreshold {
  /** Selection of how the type evaluation is applied to the cluster calculation. */
  grouping: ValidationThresholdGrouping;
  /** Selection of how the threshold should be evaluated. */
  type: ValidationThresholdType;
  /** The numeric threshold value. */
  value: number;
}

/** DefaultCniNetworkList represents a list of default CNI networks. */
export interface DefaultCniNetworkList {
  /** The link used to get the next page of operations. */
  nextLink?: string;
  /** The list of default CNI networks. */
  value?: DefaultCniNetwork[];
}

/** CniBgpConfiguration represents the Calico BGP configuration. */
export interface CniBgpConfiguration {
  /** The list of BgpPeer entities that the Hybrid AKS cluster will peer with in addition to peering that occurs automatically with the switch fabric. */
  bgpPeers?: BgpPeer[];
  /**
   * The list of prefix community advertisement properties. Each prefix community specifies a prefix, and the
   * communities that should be associated with that prefix when it is announced.
   */
  communityAdvertisements?: CommunityAdvertisement[];
  /** The password of the Calico node mesh. It defaults to a randomly-generated string when not provided. */
  nodeMeshPassword?: string;
  /** The subnet blocks in CIDR format for Kubernetes service external IPs to be advertised over BGP. */
  serviceExternalPrefixes?: string[];
  /**
   * The subnet blocks in CIDR format for Kubernetes load balancers. Load balancer IPs will only be advertised if they
   * are within one of these blocks.
   */
  serviceLoadBalancerPrefixes?: string[];
}

/** BgpPeer represents the IP address and ASN(Autonomous System Number) to peer with Hybrid AKS cluster. */
export interface BgpPeer {
  /** The ASN (Autonomous System Number) of the BGP peer. */
  asNumber: number;
  /** The password for this peering neighbor. It defaults to no password if not specified. */
  password?: string;
  /** The IPv4 or IPv6 address to peer with the associated CNI Network. The IP version type will drive a peering with the same version type from the Default CNI Network. For example, IPv4 to IPv4 or IPv6 to IPv6. */
  peerIp: string;
}

/** CommunityAdvertisement represents the prefix and the communities that should be associated with that prefix. */
export interface CommunityAdvertisement {
  /** The list of community strings to announce with this prefix. */
  communities: string[];
  /** The subnet in CIDR format for which properties should be advertised. */
  subnetPrefix: string;
}

/** HybridAksClusterList represents a list of Hybrid AKS clusters. */
export interface HybridAksClusterList {
  /** The link used to get the next page of operations. */
  nextLink?: string;
  /** The list of additional details related to Hybrid AKS clusters. */
  value?: HybridAksCluster[];
}

/** NodeConfiguration contains configuration for a VM associated with a node. */
export interface NodeConfiguration {
  /**
   * The resource ID of the agent pool that contains the nodes in this configuration.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly agentPoolId?: string;
  /**
   * The name of the agent pool that contains the nodes in this configuration.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly agentPoolName?: string;
  /**
   * The number of CPU cores in the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cpuCores?: number;
  /**
   * The root disk size of the virtual machine in GB.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly diskSizeGB?: number;
  /**
   * The memory size of the virtual machine in GB.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly memorySizeGB?: number;
  /**
   * Field deprecated, use agentPoolName instead. This field will be removed in a future version but will reflect the name of the agent pool that contains the nodes in this configuration.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nodePoolName?: string;
  /**
   * The list of nodes that utilize this configuration.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nodes?: Node[];
  /**
   * The number of virtual machines that use this configuration.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vmCount?: number;
  /**
   * The name of the VM size supplied during the creation of the cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vmSize?: string;
}

/** Node denotes the list of node that utilizes configuration. */
export interface Node {
  /**
   * The resource ID of the bare metal machine that hosts this node.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly bareMetalMachineId?: string;
  /**
   * The machine image last used to deploy this node.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly imageId?: string;
  /**
   * The list of network attachments to the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkAttachments?: NetworkAttachment[];
  /**
   * The name of this node, as realized in the Hybrid AKS cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nodeName?: string;
  /**
   * The power state (On | Off) of the node.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly powerState?: HybridAksClusterMachinePowerState;
}

/** NetworkAttachment represents the single network attachment. */
export interface NetworkAttachment {
  /**
   * The resource ID of the associated network attached to the virtual machine.
   * It can be one of cloudServicesNetwork, l3Network, l2Network or trunkedNetwork resources.
   */
  attachedNetworkId: string;
  /**
   * The indicator of whether this is the default gateway.
   * Only one of the attached networks (including the CloudServicesNetwork attachment) for a single machine may be specified as True.
   */
  defaultGateway?: DefaultGateway;
  /**
   * The IP allocation mechanism for the virtual machine.
   * Dynamic and Static are only valid for l3Network which may also specify Disabled.
   * Otherwise, Disabled is the only permitted value.
   */
  ipAllocationMethod: VirtualMachineIPAllocationMethod;
  /**
   * The IPv4 address of the virtual machine.
   *
   * This field is used only if the attached network has IPAllocationType of IPV4 or DualStack.
   *
   * If IPAllocationMethod is:
   * Static - this field must contain a user specified IPv4 address from within the subnet specified in the attached network.
   * Dynamic - this field is read-only, but will be populated with an address from within the subnet specified in the attached network.
   * Disabled - this field will be empty.
   */
  ipv4Address?: string;
  /**
   * The IPv6 address of the virtual machine.
   *
   * This field is used only if the attached network has IPAllocationType of IPV6 or DualStack.
   *
   * If IPAllocationMethod is:
   * Static - this field must contain an IPv6 address range from within the range specified in the attached network.
   * Dynamic - this field is read-only, but will be populated with an range from within the subnet specified in the attached network.
   * Disabled - this field will be empty.
   */
  ipv6Address?: string;
  /**
   * The MAC address of the interface for the virtual machine that corresponds to this network attachment.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly macAddress?: string;
  /**
   * The associated network's interface name.
   * If specified, the network attachment name has a maximum length of 15 characters and must be unique to this virtual machine.
   * If the user doesn’t specify this value, the default interface name of the network resource will be used.
   * For a CloudServicesNetwork resource, this name will be ignored.
   */
  networkAttachmentName?: string;
}

/** L2NetworkList represents a list of L2 networks. */
export interface L2NetworkList {
  /** The link used to get the next page of operations. */
  nextLink?: string;
  /** The list of L2 networks. */
  value?: L2Network[];
}

/** L3NetworkList represents a list of L3 networks. */
export interface L3NetworkList {
  /** The link used to get the next page of operations. */
  nextLink?: string;
  /** The list of L3 networks. */
  value?: L3Network[];
}

/** RackSkuList represents a list of rack SKUs. */
export interface RackSkuList {
  /** The link used to get the next page of operations. */
  nextLink?: string;
  /** The list of Rack SKUs. */
  value?: RackSku[];
}

/** MachineSkuSlot represents a single SKU and rack slot associated with the machine. */
export interface MachineSkuSlot {
  /**
   * The position in the rack for the machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly rackSlot?: number;
  /**
   * The type of bootstrap protocol used.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly bootstrapProtocol?: BootstrapProtocol;
  /**
   * The count of CPU cores for this machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cpuCores?: number;
  /**
   * The count of CPU sockets for this machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cpuSockets?: number;
  /**
   * The list of disks.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly disks?: MachineDisk[];
  /**
   * The generation of the architecture.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly generation?: string;
  /**
   * The hardware version of the machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hardwareVersion?: string;
  /**
   * The maximum amount of memory in GB.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly memoryCapacityGB?: number;
  /**
   * The model of the machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly model?: string;
  /**
   * The list of network interfaces.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkInterfaces?: NetworkInterface[];
  /**
   * The count of SMT and physical core threads for this machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly totalThreads?: number;
  /**
   * The make of the machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vendor?: string;
}

/** Disk represents the properties of the disk. */
export interface MachineDisk {
  /**
   * The maximum amount of storage in GB.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly capacityGB?: number;
  /**
   * The connection type of the rack SKU resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly connection?: MachineSkuDiskConnectionType;
  /**
   * The disk type of rack SKU resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: DiskType;
}

/** NetworkInterface represents properties of the network interface. */
export interface NetworkInterface {
  /**
   * The partial address of Peripheral Component Interconnect (PCI).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly address?: string;
  /**
   * The connection type of the device.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly deviceConnectionType?: DeviceConnectionType;
  /**
   * The model name of the device.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly model?: string;
  /**
   * The physical slot for this device.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly physicalSlot?: number;
  /**
   * The number of ports on the device.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly portCount?: number;
  /**
   * The maximum amount of data in GB that the line card transmits through a port at any given second.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly portSpeed?: number;
  /**
   * The vendor name of the device.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vendor?: string;
}

/** StorageApplianceSkuSlot represents the single SKU and rack slot associated with the storage appliance. */
export interface StorageApplianceSkuSlot {
  /**
   * The position in the rack for the storage appliance.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly rackSlot?: number;
  /**
   * The maximum capacity of the storage appliance.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly capacityGB?: number;
  /**
   * The model of the storage appliance.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly model?: string;
}

/** RackList represents a list of racks. */
export interface RackList {
  /** The link used to get the next page of operations. */
  nextLink?: string;
  /** The list of racks. */
  value?: Rack[];
}

/** StorageApplianceList represents a list of storage appliances. */
export interface StorageApplianceList {
  /** The link used to get the next page of operations. */
  nextLink?: string;
  /** The list of storage appliances. */
  value?: StorageAppliance[];
}

/** TrunkedNetworkList represents a list of trunked networks. */
export interface TrunkedNetworkList {
  /** The link used to get the next page of operations. */
  nextLink?: string;
  /** The list of trunked networks. */
  value?: TrunkedNetwork[];
}

/** VirtualMachineList represents a list of virtual machines. */
export interface VirtualMachineList {
  /** The link used to get the next page of operations. */
  nextLink?: string;
  /** The list of virtual machines. */
  value?: VirtualMachine[];
}

/** VirtualMachinePlacementHint represents a single scheduling hint of the virtual machine. */
export interface VirtualMachinePlacementHint {
  /** The specification of whether this hint supports affinity or anti-affinity with the referenced resources. */
  hintType: VirtualMachinePlacementHintType;
  /** The resource ID of the target object that the placement hints will be checked against, e.g., the bare metal node to host the virtual machine. */
  resourceId: string;
  /** The indicator of whether the hint is a hard or soft requirement during scheduling. */
  schedulingExecution: VirtualMachineSchedulingExecution;
  /** The scope for the virtual machine affinity or anti-affinity placement hint. It should always be "Machine" in the case of node affinity. */
  scope: VirtualMachinePlacementHintPodAffinityScope;
}

/** SshPublicKey represents the public key used to authenticate with the virtual machine through SSH. */
export interface SshPublicKey {
  /** The public ssh key of the user. */
  keyData: string;
}

/** StorageProfile represents information about a disk. */
export interface StorageProfile {
  /** The disk to use with this virtual machine. */
  osDisk: OsDisk;
  /** The resource IDs of volumes that are requested to be attached to the virtual machine. */
  volumeAttachments?: string[];
}

/** OsDisk represents configuration of the boot disk. */
export interface OsDisk {
  /** The strategy for creating the OS disk. */
  createOption?: OsDiskCreateOption;
  /** The strategy for deleting the OS disk. */
  deleteOption?: OsDiskDeleteOption;
  /** The size of the disk in gigabytes. Required if the createOption is Ephemeral. */
  diskSizeGB: number;
}

/** ImageRepositoryCredentials represents the credentials used to login to the image repository. */
export interface ImageRepositoryCredentials {
  /** The password or token used to access an image in the target repository. */
  password: string;
  /** The URL of the authentication server used to validate the repository credentials. */
  registryUrl: string;
  /** The username used to access an image in the target repository. */
  username: string;
}

/** VolumeList represents a list of volumes. */
export interface VolumeList {
  /** The link used to get the next page of operations. */
  nextLink?: string;
  /** The list of volumes. */
  value?: Volume[];
}

/** BareMetalMachinePatchParameters represents the body of the request to patch bare metal machine properties. */
export interface BareMetalMachinePatchParameters {
  /** The Azure resource tags that will replace the existing ones. */
  tags?: { [propertyName: string]: string };
  /**
   * The details provided by the customer during the creation of rack manifests
   * that allows for custom data to be associated with this machine.
   */
  machineDetails?: string;
}

/** BareMetalMachineCordonParameters represents the body of the request to evacuate workloads from node on a bare metal machine. */
export interface BareMetalMachineCordonParameters {
  /** The indicator of whether to evacuate the node workload when the bare metal machine is cordoned. */
  evacuate?: BareMetalMachineEvacuate;
}

/** BareMetalMachinePowerOffParameters represents the body of the request to power off bare metal machine. */
export interface BareMetalMachinePowerOffParameters {
  /** The indicator of whether to skip the graceful OS shutdown and power off the bare metal machine immediately. */
  skipShutdown?: BareMetalMachineSkipShutdown;
}

/** BareMetalMachineReplaceParameters represents the body of the request to physically swap a bare metal machine for another. */
export interface BareMetalMachineReplaceParameters {
  /** The credentials of the baseboard management controller on this bare metal machine. */
  bmcCredentials?: AdministrativeCredentials;
  /** The MAC address of the BMC device. */
  bmcMacAddress?: string;
  /** The MAC address of a NIC connected to the PXE network. */
  bootMacAddress?: string;
  /** The OS-level hostname assigned to this machine. */
  machineName?: string;
  /** The serial number of the bare metal machine. */
  serialNumber?: string;
}

/** BareMetalMachineRunCommandParameters represents the body of the request to execute a script on the bare metal machine. */
export interface BareMetalMachineRunCommandParameters {
  /** The list of string arguments that will be passed to the script in order as separate arguments. */
  arguments?: string[];
  /**
   * The maximum time the script is allowed to run.
   * If the execution time exceeds the maximum, the script will be stopped, any output produced until then will be captured, and the exit code matching a timeout will be returned (252).
   */
  limitTimeSeconds: number;
  /** The base64 encoded script to execute on the bare metal machine. */
  script: string;
}

/** BareMetalMachineRunDataExtractsParameters represents the body of request containing list of curated data extraction commands to run on the bare metal machine. */
export interface BareMetalMachineRunDataExtractsParameters {
  /** The list of curated data extraction commands to be executed directly against the target machine. */
  commands: BareMetalMachineCommandSpecification[];
  /**
   * The maximum time the commands are allowed to run.
   * If the execution time exceeds the maximum, the script will be stopped, any output produced until then will be captured, and the exit code matching a timeout will be returned (252).
   */
  limitTimeSeconds: number;
}

/** BareMetalMachineCommandSpecification represents the command and optional arguments to exercise against the bare metal machine. */
export interface BareMetalMachineCommandSpecification {
  /** The list of string arguments that will be passed to the script in order as separate arguments. */
  arguments?: string[];
  /** The command to execute against the bare metal machine. */
  command: string;
}

/** BareMetalMachineRunReadCommandsParameters represents the body of request containing list of read-only commands to run on the bare metal machine. */
export interface BareMetalMachineRunReadCommandsParameters {
  /** The list of read-only commands to be executed directly against the target machine. */
  commands: BareMetalMachineCommandSpecification[];
  /**
   * The maximum time the commands are allowed to run.
   * If the execution time exceeds the maximum, the script will be stopped, any output produced until then will be captured, and the exit code matching a timeout will be returned (252).
   */
  limitTimeSeconds: number;
}

/** BareMetalMachineValidateHardwareParameters represents the body of the request to validate the physical hardware of a bare metal machine. */
export interface BareMetalMachineValidateHardwareParameters {
  /** The category of hardware validation to perform. */
  validationCategory: BareMetalMachineHardwareValidationCategory;
}

/** CloudServicesNetworkPatchParameters represents the body of the request to patch the cloud services network. */
export interface CloudServicesNetworkPatchParameters {
  /** The Azure resource tags that will replace the existing ones. */
  tags?: { [propertyName: string]: string };
  /** The list of egress endpoints. This allows for connection from a Hybrid AKS cluster to the specified endpoint. */
  additionalEgressEndpoints?: EgressEndpoint[];
  /** The indicator of whether the platform default endpoints are allowed for the egress traffic. */
  enableDefaultEgressEndpoints?: CloudServicesNetworkEnableDefaultEgressEndpoints;
}

/** ClusterManagerPatchParameters represents the body of the request to patch the cluster properties. */
export interface ClusterManagerPatchParameters {
  /** The Azure resource tags that will replace the existing ones. */
  tags?: { [propertyName: string]: string };
}

/** ClusterPatchParameters represents the body of the request to patch the cluster properties. */
export interface ClusterPatchParameters {
  /** The Azure resource tags that will replace the existing ones. */
  tags?: { [propertyName: string]: string };
  /** The rack definition that is intended to reflect only a single rack in a single rack cluster, or an aggregator rack in a multi-rack cluster. */
  aggregatorOrSingleRackDefinition?: RackDefinition;
  /** The customer-provided location information to identify where the cluster resides. */
  clusterLocation?: string;
  /** The service principal to be used by the cluster during Arc Appliance installation. */
  clusterServicePrincipal?: ServicePrincipalInformation;
  /** The validation threshold indicating the allowable failures of compute machines during environment validation and deployment. */
  computeDeploymentThreshold?: ValidationThreshold;
  /**
   * The list of rack definitions for the compute racks in a multi-rack
   * cluster, or an empty list in a single-rack cluster.
   */
  computeRackDefinitions?: RackDefinition[];
}

/** BareMetalMachineKeySetList represents a list of bare metal machine key sets. */
export interface BareMetalMachineKeySetList {
  /** The link used to get the next page of operations. */
  nextLink?: string;
  /** The list of bare metal machine key sets. */
  value?: BareMetalMachineKeySet[];
}

/** KeySetUser represents the properties of the user in the key set. */
export interface KeySetUser {
  /** The Azure Active Directory user name (email name). */
  azureUserName: string;
  /** The free-form description for this user. */
  description?: string;
  /** The SSH public key for this user. */
  sshPublicKey: SshPublicKey;
}

/** KeySetUserStatus represents the status of the key set user. */
export interface KeySetUserStatus {
  /**
   * The Azure Active Directory user name (email name).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly azureUserName?: string;
  /**
   * The indicator of whether the user is currently deployed for access.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: BareMetalMachineKeySetUserSetupStatus;
  /**
   * The additional information describing the current status of this user, if any available.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusMessage?: string;
}

/** BareMetalMachineKeySetPatchParameters represents the body of the request to patch the bare metal machine key set. */
export interface BareMetalMachineKeySetPatchParameters {
  /** The Azure resource tags that will replace the existing ones. */
  tags?: { [propertyName: string]: string };
  /** The date and time after which the users in this key set will be removed from the bare metal machines. */
  expiration?: Date;
  /** The list of IP addresses of jump hosts with management network access from which a login will be allowed for the users. */
  jumpHostsAllowed?: string[];
  /** The unique list of permitted users. */
  userList?: KeySetUser[];
}

/** BmcKeySetList represents a list of baseboard management controller key sets. */
export interface BmcKeySetList {
  /** The link used to get the next page of operations. */
  nextLink?: string;
  /** The list of baseboard management controller key sets. */
  value?: BmcKeySet[];
}

/** BmcKeySetPatchParameters represents the body of the request to patch the baseboard management controller key set. */
export interface BmcKeySetPatchParameters {
  /** The Azure resource tags that will replace the existing ones. */
  tags?: { [propertyName: string]: string };
  /** The date and time after which the users in this key set will be removed from the baseboard management controllers. */
  expiration?: Date;
  /** The unique list of permitted users. */
  userList?: KeySetUser[];
}

/** ClusterDeployParameters represents the body of the request to deploy cluster. */
export interface ClusterDeployParameters {
  /** The names of bare metal machines in the cluster that should be skipped during environment validation. */
  skipValidationsForMachines?: string[];
}

/** ClusterMetricsConfigurationList represents a list of metrics configuration of the cluster. */
export interface ClusterMetricsConfigurationList {
  /** The link used to get the next page of operations. */
  nextLink?: string;
  /** The list of metrics configurations. */
  value?: ClusterMetricsConfiguration[];
}

/** ClusterMetricsConfigurationPatchParameters represents the body of the request to patch the metrics configuration of cluster. */
export interface ClusterMetricsConfigurationPatchParameters {
  /** The Azure resource tags that will replace the existing ones. */
  tags?: { [propertyName: string]: string };
  /** The interval in minutes by which metrics will be collected. */
  collectionInterval?: number;
  /** The list of metric names that have been chosen to be enabled in addition to the core set of enabled metrics. */
  enabledMetrics?: string[];
}

/** ClusterUpdateVersionParameters represents the body of the request to update cluster version. */
export interface ClusterUpdateVersionParameters {
  /** The version to be applied to the cluster during update. */
  targetClusterVersion: string;
}

/** DefaultCniNetworkPatchParameters represents the body of the request to patch the Default CNI network. */
export interface DefaultCniNetworkPatchParameters {
  /** The Azure resource tags that will replace the existing ones. */
  tags?: { [propertyName: string]: string };
}

/** HybridAksClusterPatchParameters represents the body of the request to patch the Hybrid AKS cluster. */
export interface HybridAksClusterPatchParameters {
  /** The Azure resource tags that will replace the existing ones. */
  tags?: { [propertyName: string]: string };
}

/** HybridAksClusterRestartNodeParameters represents the body of the request to restart the node of a Hybrid AKS cluster. */
export interface HybridAksClusterRestartNodeParameters {
  /** The name of the node to restart. */
  nodeName: string;
}

/** L2NetworkPatchParameters represents the body of the request to patch the L2 network. */
export interface L2NetworkPatchParameters {
  /** The Azure resource tags that will replace the existing ones. */
  tags?: { [propertyName: string]: string };
}

/** L3NetworkPatchParameters represents the body of the request to patch the cloud services network. */
export interface L3NetworkPatchParameters {
  /** The Azure resource tags that will replace the existing ones. */
  tags?: { [propertyName: string]: string };
}

/** RackPatchParameters represents the body of the request to patch the rack properties. */
export interface RackPatchParameters {
  /** The Azure resource tags that will replace the existing ones. */
  tags?: { [propertyName: string]: string };
  /** The free-form description of the rack location. (e.g. “DTN Datacenter, Floor 3, Isle 9, Rack 2B”) */
  rackLocation?: string;
  /** The globally unique identifier for the rack. */
  rackSerialNumber?: string;
}

/** StorageAppliancePatchParameters represents the body of the request to patch storage appliance properties. */
export interface StorageAppliancePatchParameters {
  /** The Azure resource tags that will replace the existing ones. */
  tags?: { [propertyName: string]: string };
  /** The serial number for the storage appliance. */
  serialNumber?: string;
}

/** StorageApplianceEnableRemoteVendorManagementParameters represents the body of the request to enable remote vendor management of a storage appliance. */
export interface StorageApplianceEnableRemoteVendorManagementParameters {
  /** Field Deprecated. This field is not used and will be rejected if provided. The list of IPv4 subnets (in CIDR format), IPv6 subnets (in CIDR format), or hostnames that the storage appliance needs accessible in order to turn on the remote vendor management. */
  supportEndpoints?: string[];
}

/** StorageApplianceRunReadCommandsParameters represents the body of request containing list of read-only commands to run for a storage appliance. */
export interface StorageApplianceRunReadCommandsParameters {
  /** The list of read-only commands to run. */
  commands: StorageApplianceCommandSpecification[];
  /**
   * The maximum time the commands are allowed to run.
   * If the execution time exceeds the maximum, the script will be stopped, any output produced until then will be captured, and the exit code matching a timeout will be returned (252).
   */
  limitTimeSeconds: number;
}

/** StorageApplianceCommandSpecification represents the read-only command and optional arguments to execute against a storage appliance. */
export interface StorageApplianceCommandSpecification {
  /** The list of string arguments that will be passed to the script in order as separate arguments. */
  arguments?: string[];
  /** The read-only command to execute against the storage appliance. */
  command: string;
}

/** StorageApplianceValidateHardwareParameters represents the body of the request to validate the physical hardware of a storage appliance. */
export interface StorageApplianceValidateHardwareParameters {
  /** The category of hardware validation to perform. */
  validationCategory: StorageApplianceHardwareValidationCategory;
}

/** TrunkedNetworkPatchParameters represents the body of the request to patch the Trunked network. */
export interface TrunkedNetworkPatchParameters {
  /** The Azure resource tags that will replace the existing ones. */
  tags?: { [propertyName: string]: string };
}

/** VirtualMachinePatchParameters represents the body of the request to patch the virtual machine. */
export interface VirtualMachinePatchParameters {
  /** The Azure resource tags that will replace the existing ones. */
  tags?: { [propertyName: string]: string };
  /** The credentials used to login to the image repository that has access to the specified image. */
  vmImageRepositoryCredentials?: ImageRepositoryCredentials;
}

/** VirtualMachineVolumeParameters represents the body of the request to handle attachment and detachment of volumes for the virtual machine. */
export interface VirtualMachineVolumeParameters {
  /** The resource ID of the volume. */
  volumeId: string;
}

/** ConsoleList represents a list of virtual machine consoles. */
export interface ConsoleList {
  /** The link used to get the next page of operations. */
  nextLink?: string;
  /** The list of virtual machine consoles. */
  value?: Console[];
}

/** ConsolePatchParameters represents the body of the request to patch the virtual machine console. */
export interface ConsolePatchParameters {
  /** The Azure resource tags that will replace the existing ones. */
  tags?: { [propertyName: string]: string };
  /** The credentials used to login to the image repository that has access to the specified image. */
  enabled?: ConsoleEnabled;
  /** The date and time after which the key will be disallowed access. */
  expiration?: Date;
  /** The SSH public key that will be provisioned for user access. The user is expected to have the corresponding SSH private key for logging in. */
  sshPublicKey?: SshPublicKey;
}

/** VirtualMachinePowerOffParameters represents the body of the request to power off virtual machine. */
export interface VirtualMachinePowerOffParameters {
  /** The indicator of whether to skip the graceful OS shutdown and power off the virtual machine immediately. */
  skipShutdown?: SkipShutdown;
}

/** VolumePatchParameters represents the body of the request to patch the volume resource. */
export interface VolumePatchParameters {
  /** The Azure resource tags that will replace the existing ones. */
  tags?: { [propertyName: string]: string };
}

/** TagsParameter represents the resource tags. */
export interface TagsParameter {
  /** The Azure resource tags that will replace the existing ones. */
  tags?: { [propertyName: string]: string };
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export interface TrackedResource extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
}

/** RackSku represents the SKU information of the rack. */
export interface RackSku extends Resource {
  /**
   * The list of machine SKUs and associated rack slot for the compute-dedicated machines in this rack model.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly computeMachines?: MachineSkuSlot[];
  /**
   * The list of machine SKUs and associated rack slot for the control-plane dedicated machines in this rack model.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly controllerMachines?: MachineSkuSlot[];
  /**
   * The free-form text describing the rack.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
  /**
   * The maximum number of compute racks supported by an aggregator rack. 0 if this is a compute rack or a rack for a single rack cluster(rackType="Single").
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly maxClusterSlots?: number;
  /**
   * The provisioning state of the rack SKU resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: RackSkuProvisioningState;
  /**
   * The type of the rack.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly rackType?: RackSkuType;
  /**
   * The list of appliance SKUs and associated rack slot for the storage appliance(s) in this rack model.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly storageAppliances?: StorageApplianceSkuSlot[];
  /**
   * The list of supported SKUs if the rack is an aggregator.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly supportedRackSkuIds?: string[];
}

/** BareMetalMachine represents the physical machine in the rack. */
export interface BareMetalMachine extends TrackedResource {
  /** The extended location of the cluster associated with the resource. */
  extendedLocation: ExtendedLocation;
  /** The connection string for the baseboard management controller including IP address and protocol. */
  bmcConnectionString: string;
  /** The credentials of the baseboard management controller on this bare metal machine. */
  bmcCredentials: AdministrativeCredentials;
  /** The MAC address of the BMC device. */
  bmcMacAddress: string;
  /** The MAC address of a NIC connected to the PXE network. */
  bootMacAddress: string;
  /**
   * The resource ID of the cluster this bare metal machine is associated with.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clusterId?: string;
  /**
   * The cordon status of the bare metal machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cordonStatus?: BareMetalMachineCordonStatus;
  /**
   * The more detailed status of the bare metal machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detailedStatus?: BareMetalMachineDetailedStatus;
  /**
   * The descriptive message about the current detailed status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detailedStatusMessage?: string;
  /**
   * The hardware inventory, including information acquired from the model/sku information and from the ironic inspector.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hardwareInventory?: HardwareInventory;
  /**
   * The details of the latest hardware validation performed for this bare metal machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hardwareValidationStatus?: HardwareValidationStatus;
  /**
   * The list of the resource IDs for the HybridAksClusters that have nodes hosted on this bare metal machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hybridAksClustersAssociatedIds?: string[];
  /**
   * The name of this machine represented by the host object in the Cluster's Kubernetes control plane.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly kubernetesNodeName?: string;
  /**
   * The version of Kubernetes running on this machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly kubernetesVersion?: string;
  /** The custom details provided by the customer. */
  machineDetails: string;
  /** The OS-level hostname assigned to this machine. */
  machineName: string;
  /** The unique internal identifier of the bare metal machine SKU. */
  machineSkuId: string;
  /**
   * The IPv4 address that is assigned to the bare metal machine during the cluster deployment.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly oamIpv4Address?: string;
  /**
   * The IPv6 address that is assigned to the bare metal machine during the cluster deployment.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly oamIpv6Address?: string;
  /**
   * The image that is currently provisioned to the OS disk.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osImage?: string;
  /**
   * The power state derived from the baseboard management controller.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly powerState?: BareMetalMachinePowerState;
  /**
   * The provisioning state of the bare metal machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: BareMetalMachineProvisioningState;
  /** The resource ID of the rack where this bare metal machine resides. */
  rackId: string;
  /** The rack slot in which this bare metal machine is located, ordered from the bottom up i.e. the lowest slot is 1. */
  rackSlot: number;
  /**
   * The indicator of whether the bare metal machine is ready to receive workloads.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly readyState?: BareMetalMachineReadyState;
  /** The serial number of the bare metal machine. */
  serialNumber: string;
  /**
   * The discovered value of the machine's service tag.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly serviceTag?: string;
  /**
   * The list of the resource IDs for the VirtualMachines that are hosted on this bare metal machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly virtualMachinesAssociatedIds?: string[];
}

/**
 * Upon creation, the additional services that are provided by the platform will be allocated and
 * represented in the status of this resource. All resources associated with this cloud services network will be part
 * of the same layer 2 (L2) isolation domain. At least one service network must be created but may be reused across many
 * virtual machines and/or Hybrid AKS clusters.
 */
export interface CloudServicesNetwork extends TrackedResource {
  /** The extended location of the cluster associated with the resource. */
  extendedLocation: ExtendedLocation;
  /** The list of egress endpoints. This allows for connection from a Hybrid AKS cluster to the specified endpoint. */
  additionalEgressEndpoints?: EgressEndpoint[];
  /**
   * The resource ID of the Network Cloud cluster this cloud services network is associated with.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clusterId?: string;
  /**
   * The more detailed status of the cloud services network.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detailedStatus?: CloudServicesNetworkDetailedStatus;
  /**
   * The descriptive message about the current detailed status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detailedStatusMessage?: string;
  /** The indicator of whether the platform default endpoints are allowed for the egress traffic. */
  enableDefaultEgressEndpoints?: CloudServicesNetworkEnableDefaultEgressEndpoints;
  /**
   * The full list of additional and default egress endpoints that are currently enabled.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly enabledEgressEndpoints?: EgressEndpoint[];
  /**
   * The list of Hybrid AKS cluster resource IDs that are associated with this cloud services network.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hybridAksClustersAssociatedIds?: string[];
  /**
   * The name of the interface that will be present in the virtual machine to represent this network.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly interfaceName?: string;
  /**
   * The provisioning state of the cloud services network.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: CloudServicesNetworkProvisioningState;
  /**
   * The list of virtual machine resource IDs, excluding any Hybrid AKS virtual machines, that are currently using this cloud services network.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly virtualMachinesAssociatedIds?: string[];
}

/** ClusterManager represents a control-plane to manage one or more on-premises clusters. */
export interface ClusterManager extends TrackedResource {
  /** The resource ID of the Log Analytics workspace that is used for the logs collection. */
  analyticsWorkspaceId?: string;
  /** Field deprecated, this value will no longer influence the cluster manager allocation process and will be removed in a future version. The Azure availability zones within the region that will be used to support the cluster manager resource. */
  availabilityZones?: string[];
  /**
   * The list of the cluster versions the manager supports. It is used as input in clusterVersion property of a cluster resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clusterVersions?: ClusterAvailableVersion[];
  /**
   * The detailed status that provides additional information about the cluster manager.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detailedStatus?: ClusterManagerDetailedStatus;
  /**
   * The descriptive message about the current detailed status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detailedStatusMessage?: string;
  /** The resource ID of the fabric controller that has one to one mapping with the cluster manager. */
  fabricControllerId: string;
  /** The configuration of the managed resource group associated with the resource. */
  managedResourceGroupConfiguration?: ManagedResourceGroupConfiguration;
  /**
   * The extended location (custom location) that represents the cluster manager's control plane location. This extended location is used when creating cluster and rack manifest resources.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly managerExtendedLocation?: ExtendedLocation;
  /**
   * The provisioning state of the cluster manager.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ClusterManagerProvisioningState;
  /** Field deprecated, this value will no longer influence the cluster manager allocation process and will be removed in a future version. The size of the Azure virtual machines to use for hosting the cluster manager resource. */
  vmSize?: string;
}

/** Cluster represents the on-premises Network Cloud cluster. */
export interface Cluster extends TrackedResource {
  /** The extended location of the cluster manager associated with the cluster. */
  extendedLocation: ExtendedLocation;
  /** The rack definition that is intended to reflect only a single rack in a single rack cluster, or an aggregator rack in a multi-rack cluster. */
  aggregatorOrSingleRackDefinition: RackDefinition;
  /** The resource ID of the Log Analytics Workspace that will be used for storing relevant logs. */
  analyticsWorkspaceId: string;
  /**
   * The list of cluster runtime version upgrades available for this cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly availableUpgradeVersions?: ClusterAvailableUpgradeVersion[];
  /**
   * The capacity supported by this cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clusterCapacity?: ClusterCapacity;
  /**
   * The latest heartbeat status between the cluster manager and the cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clusterConnectionStatus?: ClusterConnectionStatus;
  /**
   * The extended location (custom location) that represents the cluster's control plane location. This extended location is used to route the requests of child objects of the cluster that are handled by the platform operator.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clusterExtendedLocation?: ExtendedLocation;
  /** The customer-provided location information to identify where the cluster resides. */
  clusterLocation?: string;
  /**
   * The latest connectivity status between cluster manager and the cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clusterManagerConnectionStatus?: ClusterManagerConnectionStatus;
  /**
   * The resource ID of the cluster manager that manages this cluster. This is set by the Cluster Manager when the cluster is created.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clusterManagerId?: string;
  /** The service principal to be used by the cluster during Arc Appliance installation. */
  clusterServicePrincipal?: ServicePrincipalInformation;
  /** The type of rack configuration for the cluster. */
  clusterType: ClusterType;
  /** The current runtime version of the cluster. */
  clusterVersion: string;
  /** The validation threshold indicating the allowable failures of compute machines during environment validation and deployment. */
  computeDeploymentThreshold?: ValidationThreshold;
  /**
   * The list of rack definitions for the compute racks in a multi-rack
   * cluster, or an empty list in a single-rack cluster.
   */
  computeRackDefinitions?: RackDefinition[];
  /**
   * The current detailed status of the cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detailedStatus?: ClusterDetailedStatus;
  /**
   * The descriptive message about the detailed status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detailedStatusMessage?: string;
  /**
   * The extended location (custom location) that represents the Hybrid AKS control plane location. This extended location is used when creating provisioned clusters (Hybrid AKS clusters).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hybridAksExtendedLocation?: ExtendedLocation;
  /** The configuration of the managed resource group associated with the resource. */
  managedResourceGroupConfiguration?: ManagedResourceGroupConfiguration;
  /**
   * The count of Manual Action Taken (MAT) events that have not been validated.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly manualActionCount?: number;
  /** The resource ID of the Network Fabric associated with the cluster. */
  networkFabricId: string;
  /**
   * The provisioning state of the cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ClusterProvisioningState;
  /**
   * The support end date of the runtime version of the cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly supportExpiryDate?: string;
  /**
   * The list of workload resource IDs that are hosted within this cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly workloadResourceIds?: string[];
}

/** DefaultCniNetwork represents the user-managed portions of the default CNI (pod) network that is created in support of a Hybrid AKS Cluster. */
export interface DefaultCniNetwork extends TrackedResource {
  /** The extended location of the cluster associated with the resource. */
  extendedLocation: ExtendedLocation;
  /**
   * The resource ID of the Network Cloud cluster this default CNI network is associated with.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clusterId?: string;
  /**
   * The autonomous system number that the fabric expects to peer with, derived from the associated L3 isolation domain.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cniAsNumber?: number;
  /** The Calico BGP configuration. */
  cniBgpConfiguration?: CniBgpConfiguration;
  /**
   * The more detailed status of the default CNI network.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detailedStatus?: DefaultCniNetworkDetailedStatus;
  /**
   * The descriptive message about the current detailed status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detailedStatusMessage?: string;
  /**
   * The L3 isolation fabric BGP peering connectivity information necessary for BGP peering the Hybrid AKS Cluster with the switch fabric.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fabricBgpPeers?: BgpPeer[];
  /**
   * The list of Hybrid AKS cluster resource ID(s) that are associated with this default CNI network.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hybridAksClustersAssociatedIds?: string[];
  /**
   * The name of the interface that will be present in the virtual machine to represent this network.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly interfaceName?: string;
  /** The type of the IP address allocation. */
  ipAllocationType?: IpAllocationType;
  /**
   * The IPV4 prefix (CIDR) assigned to this default CNI network. It is required when the IP allocation type
   * is IPV4 or DualStack.
   */
  ipv4ConnectedPrefix?: string;
  /**
   * The IPV6 prefix (CIDR) assigned to this default CNI network. It is required when the IP allocation type
   * is IPV6 or DualStack.
   */
  ipv6ConnectedPrefix?: string;
  /** The resource ID of the Network Fabric l3IsolationDomain. */
  l3IsolationDomainId: string;
  /**
   * The provisioning state of the default CNI network.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: DefaultCniNetworkProvisioningState;
  /** The VLAN from the l3IsolationDomain that is used for this network. */
  vlan: number;
}

/** The details are specific to the Network Cloud use of the Hybrid AKS cluster. */
export interface HybridAksCluster extends TrackedResource {
  /** The extended location of the cluster associated with the resource. */
  extendedLocation: ExtendedLocation;
  /** The list of resource IDs for the workload networks associated with the Hybrid AKS cluster. It can be any of l2Networks, l3Networks, or trunkedNetworks resources. This field will also contain one cloudServicesNetwork and one defaultCniNetwork. */
  associatedNetworkIds: string[];
  /**
   * The resource ID of the associated cloud services network.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cloudServicesNetworkId?: string;
  /**
   * The resource ID of the Network Cloud cluster hosting the Hybrid AKS cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clusterId?: string;
  /** The number of control plane node VMs. */
  controlPlaneCount: number;
  /**
   * The list of node configurations detailing associated VMs that are part of the control plane nodes of this Hybrid AKS cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly controlPlaneNodes?: NodeConfiguration[];
  /**
   * The resource ID of the associated default CNI network.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly defaultCniNetworkId?: string;
  /**
   * The more detailed status of this Hybrid AKS cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detailedStatus?: HybridAksClusterDetailedStatus;
  /**
   * The descriptive message about the current detailed status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detailedStatusMessage?: string;
  /** The resource ID of the Hybrid AKS cluster that this additional information is for. */
  hybridAksProvisionedClusterId: string;
  /**
   * The provisioning state of the Hybrid AKS cluster resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: HybridAksClusterProvisioningState;
  /**
   * The resource IDs of volumes that are attached to the Hybrid AKS cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly volumes?: string[];
  /** The number of worker node VMs. */
  workerCount: number;
  /**
   * The list of node configurations detailing associated VMs that are part of the worker nodes of this Hybrid AKS cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly workerNodes?: NodeConfiguration[];
}

/** L2Network represents a network that utilizes a single isolation domain set up for layer-2 resources. */
export interface L2Network extends TrackedResource {
  /** The extended location of the cluster associated with the resource. */
  extendedLocation: ExtendedLocation;
  /**
   * The resource ID of the Network Cloud cluster this L2 network is associated with.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clusterId?: string;
  /**
   * The more detailed status of the L2 network.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detailedStatus?: L2NetworkDetailedStatus;
  /**
   * The descriptive message about the current detailed status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detailedStatusMessage?: string;
  /**
   * The list of Hybrid AKS cluster resource ID(s) that are associated with this L2 network.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hybridAksClustersAssociatedIds?: string[];
  /** The network plugin type for Hybrid AKS. */
  hybridAksPluginType?: HybridAksPluginType;
  /** The default interface name for this L2 network in the virtual machine. This name can be overridden by the name supplied in the network attachment configuration of that virtual machine. */
  interfaceName?: string;
  /** The resource ID of the Network Fabric l2IsolationDomain. */
  l2IsolationDomainId: string;
  /**
   * The provisioning state of the L2 network.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: L2NetworkProvisioningState;
  /**
   * The list of virtual machine resource ID(s), excluding any Hybrid AKS virtual machines, that are currently using this L2 network.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly virtualMachinesAssociatedIds?: string[];
}

/** L3Network represents a network that utilizes a single isolation domain set up for layer-3 resources. */
export interface L3Network extends TrackedResource {
  /** The extended location of the cluster associated with the resource. */
  extendedLocation: ExtendedLocation;
  /**
   * The resource ID of the Network Cloud cluster this L3 network is associated with.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clusterId?: string;
  /**
   * The more detailed status of the L3 network.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detailedStatus?: L3NetworkDetailedStatus;
  /**
   * The descriptive message about the current detailed status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detailedStatusMessage?: string;
  /**
   * The list of Hybrid AKS cluster resource IDs that are associated with this L3 network.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hybridAksClustersAssociatedIds?: string[];
  /** The indicator of whether or not to disable IPAM allocation on the network attachment definition injected into the Hybrid AKS Cluster. */
  hybridAksIpamEnabled?: HybridAksIpamEnabled;
  /** The network plugin type for Hybrid AKS. */
  hybridAksPluginType?: HybridAksPluginType;
  /** The default interface name for this L3 network in the virtual machine. This name can be overridden by the name supplied in the network attachment configuration of that virtual machine. */
  interfaceName?: string;
  /** The type of the IP address allocation, defaulted to "DualStack". */
  ipAllocationType?: IpAllocationType;
  /**
   * The IPV4 prefix (CIDR) assigned to this L3 network. Required when the IP allocation type
   * is IPV4 or DualStack.
   */
  ipv4ConnectedPrefix?: string;
  /**
   * The IPV6 prefix (CIDR) assigned to this L3 network. Required when the IP allocation type
   * is IPV6 or DualStack.
   */
  ipv6ConnectedPrefix?: string;
  /** The resource ID of the Network Fabric l3IsolationDomain. */
  l3IsolationDomainId: string;
  /**
   * The provisioning state of the L3 network.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: L3NetworkProvisioningState;
  /**
   * The list of virtual machine resource IDs, excluding any Hybrid AKS virtual machines, that are currently using this L3 network.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly virtualMachinesAssociatedIds?: string[];
  /** The VLAN from the l3IsolationDomain that is used for this network. */
  vlan: number;
}

/** Rack represents the hardware of the rack and is dependent upon the cluster for lifecycle. */
export interface Rack extends TrackedResource {
  /** The extended location of the cluster associated with the resource. */
  extendedLocation: ExtendedLocation;
  /** The value that will be used for machines in this rack to represent the availability zones that can be referenced by Hybrid AKS Clusters for node arrangement. */
  availabilityZone: string;
  /**
   * The resource ID of the cluster the rack is created for. This value is set when the rack is created by the cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clusterId?: string;
  /**
   * The more detailed status of the rack.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detailedStatus?: RackDetailedStatus;
  /**
   * The descriptive message about the current detailed status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detailedStatusMessage?: string;
  /**
   * The provisioning state of the rack resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: RackProvisioningState;
  /** The free-form description of the rack location. (e.g. “DTN Datacenter, Floor 3, Isle 9, Rack 2B”) */
  rackLocation: string;
  /** The unique identifier for the rack within Network Cloud cluster. An alternate unique alphanumeric value other than a serial number may be provided if desired. */
  rackSerialNumber: string;
  /** The SKU for the rack. */
  rackSkuId: string;
}

/** StorageAppliance represents on-premises Network Cloud storage appliance. */
export interface StorageAppliance extends TrackedResource {
  /** The extended location of the cluster associated with the resource. */
  extendedLocation: ExtendedLocation;
  /** The credentials of the administrative interface on this storage appliance. */
  administratorCredentials: AdministrativeCredentials;
  /**
   * The total capacity of the storage appliance.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly capacity?: number;
  /**
   * The amount of storage consumed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly capacityUsed?: number;
  /**
   * The resource ID of the cluster this storage appliance is associated with.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clusterId?: string;
  /**
   * The detailed status of the storage appliance.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detailedStatus?: StorageApplianceDetailedStatus;
  /**
   * The descriptive message about the current detailed status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detailedStatusMessage?: string;
  /**
   * The endpoint for the management interface of the storage appliance.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly managementIpv4Address?: string;
  /**
   * The provisioning state of the storage appliance.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: StorageApplianceProvisioningState;
  /** The resource ID of the rack where this storage appliance resides. */
  rackId: string;
  /** The slot the storage appliance is in the rack based on the BOM configuration. */
  rackSlot: number;
  /**
   * The indicator of whether the storage appliance supports remote vendor management.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly remoteVendorManagementFeature?: RemoteVendorManagementFeature;
  /**
   * The indicator of whether the remote vendor management feature is enabled or disabled, or unsupported if it is an unsupported feature.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly remoteVendorManagementStatus?: RemoteVendorManagementStatus;
  /** The serial number for the storage appliance. */
  serialNumber: string;
  /** The SKU for the storage appliance. */
  storageApplianceSkuId: string;
}

/** TrunkedNetwork represents a network that utilizes multiple isolation domains and specified VLANs to create a trunked network. */
export interface TrunkedNetwork extends TrackedResource {
  /** The extended location of the cluster associated with the resource. */
  extendedLocation: ExtendedLocation;
  /**
   * The resource ID of the Network Cloud cluster this trunked network is associated with.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clusterId?: string;
  /**
   * The more detailed status of the trunked network.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detailedStatus?: TrunkedNetworkDetailedStatus;
  /**
   * The descriptive message about the current detailed status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detailedStatusMessage?: string;
  /**
   * The list of Hybrid AKS cluster resource IDs that are associated with this trunked network.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hybridAksClustersAssociatedIds?: string[];
  /** The network plugin type for Hybrid AKS. */
  hybridAksPluginType?: HybridAksPluginType;
  /** The default interface name for this trunked network in the virtual machine. This name can be overridden by the name supplied in the network attachment configuration of that virtual machine. */
  interfaceName?: string;
  /** The list of resource IDs representing the Network Fabric isolation domains. It can be any combination of l2IsolationDomain and l3IsolationDomain resources. */
  isolationDomainIds: string[];
  /**
   * The provisioning state of the trunked network.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: TrunkedNetworkProvisioningState;
  /**
   * The list of virtual machine resource IDs, excluding any Hybrid AKS virtual machines, that are currently using this trunked network.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly virtualMachinesAssociatedIds?: string[];
  /** The list of vlans that are selected from the isolation domains for trunking. */
  vlans: number[];
}

/** VirtualMachine represents the on-premises Network Cloud virtual machine. */
export interface VirtualMachine extends TrackedResource {
  /** The extended location of the cluster associated with the resource. */
  extendedLocation: ExtendedLocation;
  /** The name of the administrator to which the ssh public keys will be added into the authorized keys. */
  adminUsername: string;
  /**
   * The resource ID of the bare metal machine the virtual machine has landed to.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly bareMetalMachineId?: string;
  /** Selects the boot method for the virtual machine. */
  bootMethod?: VirtualMachineBootMethod;
  /** The cloud service network that provides platform-level services for the virtual machine. */
  cloudServicesNetworkAttachment: NetworkAttachment;
  /**
   * The resource ID of the cluster the virtual machine is created for.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clusterId?: string;
  /** The number of CPU cores in the virtual machine. */
  cpuCores: number;
  /**
   * The more detailed status of the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detailedStatus?: VirtualMachineDetailedStatus;
  /**
   * The descriptive message about the current detailed status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detailedStatusMessage?: string;
  /** Field Deprecated, the value will be ignored if provided. The indicator of whether one of the specified CPU cores is isolated to run the emulator thread for this virtual machine. */
  isolateEmulatorThread?: VirtualMachineIsolateEmulatorThread;
  /** The memory size of the virtual machine in GB. */
  memorySizeGB: number;
  /** The list of network attachments to the virtual machine. */
  networkAttachments?: NetworkAttachment[];
  /** The Base64 encoded cloud-init network data. */
  networkData?: string;
  /** The scheduling hints for the virtual machine. */
  placementHints?: VirtualMachinePlacementHint[];
  /**
   * The power state of the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly powerState?: VirtualMachinePowerState;
  /**
   * The provisioning state of the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: VirtualMachineProvisioningState;
  /** The list of ssh public keys. Each key will be added to the virtual machine using the cloud-init ssh_authorized_keys mechanism for the adminUsername. */
  sshPublicKeys?: SshPublicKey[];
  /** The storage profile that specifies size and other parameters about the disks related to the virtual machine. */
  storageProfile: StorageProfile;
  /** The Base64 encoded cloud-init user data. */
  userData?: string;
  /** Field Deprecated, use virtualizationModel instead. The type of the virtio interface. */
  virtioInterface?: VirtualMachineVirtioInterfaceType;
  /** The type of the device model to use. */
  vmDeviceModel?: VirtualMachineDeviceModelType;
  /** The virtual machine image that is currently provisioned to the OS disk, using the full url and tag notation used to pull the image. */
  vmImage: string;
  /** The credentials used to login to the image repository that has access to the specified image. */
  vmImageRepositoryCredentials?: ImageRepositoryCredentials;
  /**
   * The resource IDs of volumes that are attached to the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly volumes?: string[];
}

/** Volume represents storage made available for use by resources running on the cluster. */
export interface Volume extends TrackedResource {
  /** The extended location of the cluster associated with the resource. */
  extendedLocation: ExtendedLocation;
  /**
   * The list of resource IDs that attach the volume. It may include virtual machines and Hybrid AKS clusters.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly attachedTo?: string[];
  /**
   * The more detailed status of the volume.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detailedStatus?: VolumeDetailedStatus;
  /**
   * The descriptive message about the current detailed status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detailedStatusMessage?: string;
  /**
   * The provisioning state of the volume.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: VolumeProvisioningState;
  /**
   * The unique identifier of the volume.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly serialNumber?: string;
  /** The size of the allocation for this volume in Mebibytes. */
  sizeMiB: number;
}

/** BareMetalMachineKeySet represents the bare metal machine key set. */
export interface BareMetalMachineKeySet extends TrackedResource {
  /** The extended location of the cluster associated with the resource. */
  extendedLocation: ExtendedLocation;
  /** The object ID of Azure Active Directory group that all users in the list must be in for access to be granted. Users that are not in the group will not have access. */
  azureGroupId: string;
  /**
   * The more detailed status of the key set.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detailedStatus?: BareMetalMachineKeySetDetailedStatus;
  /**
   * The descriptive message about the current detailed status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detailedStatusMessage?: string;
  /** The date and time after which the users in this key set will be removed from the bare metal machines. */
  expiration: Date;
  /** The list of IP addresses of jump hosts with management network access from which a login will be allowed for the users. */
  jumpHostsAllowed: string[];
  /**
   * The last time this key set was validated.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastValidation?: Date;
  /** The name of the group that users will be assigned to on the operating system of the machines. */
  osGroupName?: string;
  /** The access level allowed for the users in this key set. */
  privilegeLevel: BareMetalMachineKeySetPrivilegeLevel;
  /**
   * The provisioning state of the bare metal machine key set.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: BareMetalMachineKeySetProvisioningState;
  /** The unique list of permitted users. */
  userList: KeySetUser[];
  /**
   * The status evaluation of each user.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly userListStatus?: KeySetUserStatus[];
}

/** BmcKeySet represents the baseboard management controller key set. */
export interface BmcKeySet extends TrackedResource {
  /** The extended location of the cluster associated with the resource. */
  extendedLocation: ExtendedLocation;
  /** The object ID of Azure Active Directory group that all users in the list must be in for access to be granted. Users that are not in the group will not have access. */
  azureGroupId: string;
  /**
   * The more detailed status of the key set.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detailedStatus?: BmcKeySetDetailedStatus;
  /**
   * The descriptive message about the current detailed status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detailedStatusMessage?: string;
  /** The date and time after which the users in this key set will be removed from the baseboard management controllers. */
  expiration: Date;
  /**
   * The last time this key set was validated.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastValidation?: Date;
  /** The access level allowed for the users in this key set. */
  privilegeLevel: BmcKeySetPrivilegeLevel;
  /**
   * The provisioning state of the baseboard management controller key set.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: BmcKeySetProvisioningState;
  /** The unique list of permitted users. */
  userList: KeySetUser[];
  /**
   * The status evaluation of each user.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly userListStatus?: KeySetUserStatus[];
}

/** ClusterMetricsConfiguration represents the metrics configuration of an on-premises Network Cloud cluster. */
export interface ClusterMetricsConfiguration extends TrackedResource {
  /** The extended location of the cluster associated with the resource. */
  extendedLocation: ExtendedLocation;
  /** The interval in minutes by which metrics will be collected. */
  collectionInterval: number;
  /**
   * The more detailed status of the metrics configuration.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detailedStatus?: ClusterMetricsConfigurationDetailedStatus;
  /**
   * The descriptive message about the current detailed status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detailedStatusMessage?: string;
  /**
   * The list of metrics that are available for the cluster but disabled at the moment.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly disabledMetrics?: string[];
  /** The list of metric names that have been chosen to be enabled in addition to the core set of enabled metrics. */
  enabledMetrics?: string[];
  /**
   * The provisioning state of the metrics configuration.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ClusterMetricsConfigurationProvisioningState;
}

/** Console represents the console of an on-premises Network Cloud virtual machine. */
export interface Console extends TrackedResource {
  /** The extended location of the cluster manager associated with the cluster this virtual machine is created on. */
  extendedLocation: ExtendedLocation;
  /**
   * The more detailed status of the console.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detailedStatus?: ConsoleDetailedStatus;
  /**
   * The descriptive message about the current detailed status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detailedStatusMessage?: string;
  /** The indicator of whether the console access is enabled. */
  enabled: ConsoleEnabled;
  /** The date and time after which the key will be disallowed access. */
  expiration?: Date;
  /**
   * The resource ID of the private link service that is used to provide virtual machine console access.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly privateLinkServiceId?: string;
  /**
   * The provisioning state of the virtual machine console.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ConsoleProvisioningState;
  /** The SSH public key that will be provisioned for user access. The user is expected to have the corresponding SSH private key for logging in. */
  sshPublicKey: SshPublicKey;
  /**
   * The unique identifier for the virtual machine that is used to access the console.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly virtualMachineAccessId?: string;
}

/** Defines headers for BareMetalMachines_createOrUpdate operation. */
export interface BareMetalMachinesCreateOrUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for BareMetalMachines_delete operation. */
export interface BareMetalMachinesDeleteHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for BareMetalMachines_update operation. */
export interface BareMetalMachinesUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for BareMetalMachines_cordon operation. */
export interface BareMetalMachinesCordonHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for BareMetalMachines_powerOff operation. */
export interface BareMetalMachinesPowerOffHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for BareMetalMachines_reimage operation. */
export interface BareMetalMachinesReimageHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for BareMetalMachines_replace operation. */
export interface BareMetalMachinesReplaceHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for BareMetalMachines_restart operation. */
export interface BareMetalMachinesRestartHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for BareMetalMachines_runCommand operation. */
export interface BareMetalMachinesRunCommandHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for BareMetalMachines_runDataExtracts operation. */
export interface BareMetalMachinesRunDataExtractsHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for BareMetalMachines_runReadCommands operation. */
export interface BareMetalMachinesRunReadCommandsHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for BareMetalMachines_start operation. */
export interface BareMetalMachinesStartHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for BareMetalMachines_uncordon operation. */
export interface BareMetalMachinesUncordonHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for BareMetalMachines_validateHardware operation. */
export interface BareMetalMachinesValidateHardwareHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for CloudServicesNetworks_createOrUpdate operation. */
export interface CloudServicesNetworksCreateOrUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for CloudServicesNetworks_delete operation. */
export interface CloudServicesNetworksDeleteHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for CloudServicesNetworks_update operation. */
export interface CloudServicesNetworksUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for ClusterManagers_createOrUpdate operation. */
export interface ClusterManagersCreateOrUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for ClusterManagers_delete operation. */
export interface ClusterManagersDeleteHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for Clusters_createOrUpdate operation. */
export interface ClustersCreateOrUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for Clusters_delete operation. */
export interface ClustersDeleteHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for Clusters_update operation. */
export interface ClustersUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for Clusters_deploy operation. */
export interface ClustersDeployHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for Clusters_updateVersion operation. */
export interface ClustersUpdateVersionHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for DefaultCniNetworks_createOrUpdate operation. */
export interface DefaultCniNetworksCreateOrUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for DefaultCniNetworks_delete operation. */
export interface DefaultCniNetworksDeleteHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for HybridAksClusters_createOrUpdate operation. */
export interface HybridAksClustersCreateOrUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for HybridAksClusters_delete operation. */
export interface HybridAksClustersDeleteHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for HybridAksClusters_restartNode operation. */
export interface HybridAksClustersRestartNodeHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for L2Networks_createOrUpdate operation. */
export interface L2NetworksCreateOrUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for L2Networks_delete operation. */
export interface L2NetworksDeleteHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for L3Networks_createOrUpdate operation. */
export interface L3NetworksCreateOrUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for L3Networks_delete operation. */
export interface L3NetworksDeleteHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for Racks_createOrUpdate operation. */
export interface RacksCreateOrUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for Racks_delete operation. */
export interface RacksDeleteHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for Racks_update operation. */
export interface RacksUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for StorageAppliances_createOrUpdate operation. */
export interface StorageAppliancesCreateOrUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for StorageAppliances_delete operation. */
export interface StorageAppliancesDeleteHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for StorageAppliances_update operation. */
export interface StorageAppliancesUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for StorageAppliances_disableRemoteVendorManagement operation. */
export interface StorageAppliancesDisableRemoteVendorManagementHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for StorageAppliances_enableRemoteVendorManagement operation. */
export interface StorageAppliancesEnableRemoteVendorManagementHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for StorageAppliances_runReadCommands operation. */
export interface StorageAppliancesRunReadCommandsHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for StorageAppliances_validateHardware operation. */
export interface StorageAppliancesValidateHardwareHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for TrunkedNetworks_createOrUpdate operation. */
export interface TrunkedNetworksCreateOrUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for TrunkedNetworks_delete operation. */
export interface TrunkedNetworksDeleteHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for VirtualMachines_createOrUpdate operation. */
export interface VirtualMachinesCreateOrUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for VirtualMachines_delete operation. */
export interface VirtualMachinesDeleteHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for VirtualMachines_update operation. */
export interface VirtualMachinesUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for VirtualMachines_attachVolume operation. */
export interface VirtualMachinesAttachVolumeHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for VirtualMachines_detachVolume operation. */
export interface VirtualMachinesDetachVolumeHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for VirtualMachines_powerOff operation. */
export interface VirtualMachinesPowerOffHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for VirtualMachines_reimage operation. */
export interface VirtualMachinesReimageHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for VirtualMachines_restart operation. */
export interface VirtualMachinesRestartHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for VirtualMachines_start operation. */
export interface VirtualMachinesStartHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for Volumes_createOrUpdate operation. */
export interface VolumesCreateOrUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for Volumes_delete operation. */
export interface VolumesDeleteHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for BareMetalMachineKeySets_createOrUpdate operation. */
export interface BareMetalMachineKeySetsCreateOrUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for BareMetalMachineKeySets_delete operation. */
export interface BareMetalMachineKeySetsDeleteHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for BareMetalMachineKeySets_update operation. */
export interface BareMetalMachineKeySetsUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for BmcKeySets_createOrUpdate operation. */
export interface BmcKeySetsCreateOrUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for BmcKeySets_delete operation. */
export interface BmcKeySetsDeleteHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for BmcKeySets_update operation. */
export interface BmcKeySetsUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for MetricsConfigurations_createOrUpdate operation. */
export interface MetricsConfigurationsCreateOrUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for MetricsConfigurations_delete operation. */
export interface MetricsConfigurationsDeleteHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for MetricsConfigurations_update operation. */
export interface MetricsConfigurationsUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for Consoles_createOrUpdate operation. */
export interface ConsolesCreateOrUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for Consoles_delete operation. */
export interface ConsolesDeleteHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for Consoles_update operation. */
export interface ConsolesUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Known values of {@link Origin} that the service accepts. */
export enum KnownOrigin {
  /** User */
  User = "user",
  /** System */
  System = "system",
  /** UserSystem */
  UserSystem = "user,system"
}

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export type Origin = string;

/** Known values of {@link ActionType} that the service accepts. */
export enum KnownActionType {
  /** Internal */
  Internal = "Internal"
}

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export type ActionType = string;

/** Known values of {@link BareMetalMachineCordonStatus} that the service accepts. */
export enum KnownBareMetalMachineCordonStatus {
  /** Cordoned */
  Cordoned = "Cordoned",
  /** Uncordoned */
  Uncordoned = "Uncordoned"
}

/**
 * Defines values for BareMetalMachineCordonStatus. \
 * {@link KnownBareMetalMachineCordonStatus} can be used interchangeably with BareMetalMachineCordonStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Cordoned** \
 * **Uncordoned**
 */
export type BareMetalMachineCordonStatus = string;

/** Known values of {@link BareMetalMachineDetailedStatus} that the service accepts. */
export enum KnownBareMetalMachineDetailedStatus {
  /** Preparing */
  Preparing = "Preparing",
  /** Error */
  Error = "Error",
  /** Available */
  Available = "Available",
  /** Provisioning */
  Provisioning = "Provisioning",
  /** Provisioned */
  Provisioned = "Provisioned",
  /** Deprovisioning */
  Deprovisioning = "Deprovisioning"
}

/**
 * Defines values for BareMetalMachineDetailedStatus. \
 * {@link KnownBareMetalMachineDetailedStatus} can be used interchangeably with BareMetalMachineDetailedStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Preparing** \
 * **Error** \
 * **Available** \
 * **Provisioning** \
 * **Provisioned** \
 * **Deprovisioning**
 */
export type BareMetalMachineDetailedStatus = string;

/** Known values of {@link BareMetalMachineHardwareValidationResult} that the service accepts. */
export enum KnownBareMetalMachineHardwareValidationResult {
  /** Pass */
  Pass = "Pass",
  /** Fail */
  Fail = "Fail"
}

/**
 * Defines values for BareMetalMachineHardwareValidationResult. \
 * {@link KnownBareMetalMachineHardwareValidationResult} can be used interchangeably with BareMetalMachineHardwareValidationResult,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pass** \
 * **Fail**
 */
export type BareMetalMachineHardwareValidationResult = string;

/** Known values of {@link BareMetalMachinePowerState} that the service accepts. */
export enum KnownBareMetalMachinePowerState {
  /** On */
  On = "On",
  /** Off */
  Off = "Off"
}

/**
 * Defines values for BareMetalMachinePowerState. \
 * {@link KnownBareMetalMachinePowerState} can be used interchangeably with BareMetalMachinePowerState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **On** \
 * **Off**
 */
export type BareMetalMachinePowerState = string;

/** Known values of {@link BareMetalMachineProvisioningState} that the service accepts. */
export enum KnownBareMetalMachineProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** Provisioning */
  Provisioning = "Provisioning",
  /** Accepted */
  Accepted = "Accepted"
}

/**
 * Defines values for BareMetalMachineProvisioningState. \
 * {@link KnownBareMetalMachineProvisioningState} can be used interchangeably with BareMetalMachineProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Provisioning** \
 * **Accepted**
 */
export type BareMetalMachineProvisioningState = string;

/** Known values of {@link BareMetalMachineReadyState} that the service accepts. */
export enum KnownBareMetalMachineReadyState {
  /** True */
  True = "True",
  /** False */
  False = "False"
}

/**
 * Defines values for BareMetalMachineReadyState. \
 * {@link KnownBareMetalMachineReadyState} can be used interchangeably with BareMetalMachineReadyState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **True** \
 * **False**
 */
export type BareMetalMachineReadyState = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link CloudServicesNetworkDetailedStatus} that the service accepts. */
export enum KnownCloudServicesNetworkDetailedStatus {
  /** Error */
  Error = "Error",
  /** Available */
  Available = "Available",
  /** Provisioning */
  Provisioning = "Provisioning"
}

/**
 * Defines values for CloudServicesNetworkDetailedStatus. \
 * {@link KnownCloudServicesNetworkDetailedStatus} can be used interchangeably with CloudServicesNetworkDetailedStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Error** \
 * **Available** \
 * **Provisioning**
 */
export type CloudServicesNetworkDetailedStatus = string;

/** Known values of {@link CloudServicesNetworkEnableDefaultEgressEndpoints} that the service accepts. */
export enum KnownCloudServicesNetworkEnableDefaultEgressEndpoints {
  /** True */
  True = "True",
  /** False */
  False = "False"
}

/**
 * Defines values for CloudServicesNetworkEnableDefaultEgressEndpoints. \
 * {@link KnownCloudServicesNetworkEnableDefaultEgressEndpoints} can be used interchangeably with CloudServicesNetworkEnableDefaultEgressEndpoints,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **True** \
 * **False**
 */
export type CloudServicesNetworkEnableDefaultEgressEndpoints = string;

/** Known values of {@link CloudServicesNetworkProvisioningState} that the service accepts. */
export enum KnownCloudServicesNetworkProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** Provisioning */
  Provisioning = "Provisioning",
  /** Accepted */
  Accepted = "Accepted"
}

/**
 * Defines values for CloudServicesNetworkProvisioningState. \
 * {@link KnownCloudServicesNetworkProvisioningState} can be used interchangeably with CloudServicesNetworkProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Provisioning** \
 * **Accepted**
 */
export type CloudServicesNetworkProvisioningState = string;

/** Known values of {@link ClusterManagerDetailedStatus} that the service accepts. */
export enum KnownClusterManagerDetailedStatus {
  /** Error */
  Error = "Error",
  /** Available */
  Available = "Available",
  /** Provisioning */
  Provisioning = "Provisioning",
  /** ProvisioningFailed */
  ProvisioningFailed = "ProvisioningFailed",
  /** Updating */
  Updating = "Updating",
  /** UpdateFailed */
  UpdateFailed = "UpdateFailed"
}

/**
 * Defines values for ClusterManagerDetailedStatus. \
 * {@link KnownClusterManagerDetailedStatus} can be used interchangeably with ClusterManagerDetailedStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Error** \
 * **Available** \
 * **Provisioning** \
 * **ProvisioningFailed** \
 * **Updating** \
 * **UpdateFailed**
 */
export type ClusterManagerDetailedStatus = string;

/** Known values of {@link ClusterManagerProvisioningState} that the service accepts. */
export enum KnownClusterManagerProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** Provisioning */
  Provisioning = "Provisioning",
  /** Accepted */
  Accepted = "Accepted",
  /** Updating */
  Updating = "Updating"
}

/**
 * Defines values for ClusterManagerProvisioningState. \
 * {@link KnownClusterManagerProvisioningState} can be used interchangeably with ClusterManagerProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Provisioning** \
 * **Accepted** \
 * **Updating**
 */
export type ClusterManagerProvisioningState = string;

/** Known values of {@link ControlImpact} that the service accepts. */
export enum KnownControlImpact {
  /** True */
  True = "True",
  /** False */
  False = "False"
}

/**
 * Defines values for ControlImpact. \
 * {@link KnownControlImpact} can be used interchangeably with ControlImpact,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **True** \
 * **False**
 */
export type ControlImpact = string;

/** Known values of {@link WorkloadImpact} that the service accepts. */
export enum KnownWorkloadImpact {
  /** True */
  True = "True",
  /** False */
  False = "False"
}

/**
 * Defines values for WorkloadImpact. \
 * {@link KnownWorkloadImpact} can be used interchangeably with WorkloadImpact,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **True** \
 * **False**
 */
export type WorkloadImpact = string;

/** Known values of {@link ClusterConnectionStatus} that the service accepts. */
export enum KnownClusterConnectionStatus {
  /** Connected */
  Connected = "Connected",
  /** Timeout */
  Timeout = "Timeout",
  /** Undefined */
  Undefined = "Undefined"
}

/**
 * Defines values for ClusterConnectionStatus. \
 * {@link KnownClusterConnectionStatus} can be used interchangeably with ClusterConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Connected** \
 * **Timeout** \
 * **Undefined**
 */
export type ClusterConnectionStatus = string;

/** Known values of {@link ClusterManagerConnectionStatus} that the service accepts. */
export enum KnownClusterManagerConnectionStatus {
  /** Connected */
  Connected = "Connected",
  /** Unreachable */
  Unreachable = "Unreachable"
}

/**
 * Defines values for ClusterManagerConnectionStatus. \
 * {@link KnownClusterManagerConnectionStatus} can be used interchangeably with ClusterManagerConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Connected** \
 * **Unreachable**
 */
export type ClusterManagerConnectionStatus = string;

/** Known values of {@link ClusterType} that the service accepts. */
export enum KnownClusterType {
  /** SingleRack */
  SingleRack = "SingleRack",
  /** MultiRack */
  MultiRack = "MultiRack"
}

/**
 * Defines values for ClusterType. \
 * {@link KnownClusterType} can be used interchangeably with ClusterType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SingleRack** \
 * **MultiRack**
 */
export type ClusterType = string;

/** Known values of {@link ValidationThresholdGrouping} that the service accepts. */
export enum KnownValidationThresholdGrouping {
  /** PerCluster */
  PerCluster = "PerCluster",
  /** PerRack */
  PerRack = "PerRack"
}

/**
 * Defines values for ValidationThresholdGrouping. \
 * {@link KnownValidationThresholdGrouping} can be used interchangeably with ValidationThresholdGrouping,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PerCluster** \
 * **PerRack**
 */
export type ValidationThresholdGrouping = string;

/** Known values of {@link ValidationThresholdType} that the service accepts. */
export enum KnownValidationThresholdType {
  /** CountSuccess */
  CountSuccess = "CountSuccess",
  /** PercentSuccess */
  PercentSuccess = "PercentSuccess"
}

/**
 * Defines values for ValidationThresholdType. \
 * {@link KnownValidationThresholdType} can be used interchangeably with ValidationThresholdType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CountSuccess** \
 * **PercentSuccess**
 */
export type ValidationThresholdType = string;

/** Known values of {@link ClusterDetailedStatus} that the service accepts. */
export enum KnownClusterDetailedStatus {
  /** PendingDeployment */
  PendingDeployment = "PendingDeployment",
  /** Deploying */
  Deploying = "Deploying",
  /** Running */
  Running = "Running",
  /** Updating */
  Updating = "Updating",
  /** Degraded */
  Degraded = "Degraded",
  /** Deleting */
  Deleting = "Deleting",
  /** Disconnected */
  Disconnected = "Disconnected",
  /** Failed */
  Failed = "Failed"
}

/**
 * Defines values for ClusterDetailedStatus. \
 * {@link KnownClusterDetailedStatus} can be used interchangeably with ClusterDetailedStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PendingDeployment** \
 * **Deploying** \
 * **Running** \
 * **Updating** \
 * **Degraded** \
 * **Deleting** \
 * **Disconnected** \
 * **Failed**
 */
export type ClusterDetailedStatus = string;

/** Known values of {@link ClusterProvisioningState} that the service accepts. */
export enum KnownClusterProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** Accepted */
  Accepted = "Accepted",
  /** Validating */
  Validating = "Validating",
  /** Updating */
  Updating = "Updating"
}

/**
 * Defines values for ClusterProvisioningState. \
 * {@link KnownClusterProvisioningState} can be used interchangeably with ClusterProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Accepted** \
 * **Validating** \
 * **Updating**
 */
export type ClusterProvisioningState = string;

/** Known values of {@link DefaultCniNetworkDetailedStatus} that the service accepts. */
export enum KnownDefaultCniNetworkDetailedStatus {
  /** Error */
  Error = "Error",
  /** Available */
  Available = "Available",
  /** Provisioning */
  Provisioning = "Provisioning"
}

/**
 * Defines values for DefaultCniNetworkDetailedStatus. \
 * {@link KnownDefaultCniNetworkDetailedStatus} can be used interchangeably with DefaultCniNetworkDetailedStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Error** \
 * **Available** \
 * **Provisioning**
 */
export type DefaultCniNetworkDetailedStatus = string;

/** Known values of {@link IpAllocationType} that the service accepts. */
export enum KnownIpAllocationType {
  /** IPV4 */
  IPV4 = "IPV4",
  /** IPV6 */
  IPV6 = "IPV6",
  /** DualStack */
  DualStack = "DualStack"
}

/**
 * Defines values for IpAllocationType. \
 * {@link KnownIpAllocationType} can be used interchangeably with IpAllocationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **IPV4** \
 * **IPV6** \
 * **DualStack**
 */
export type IpAllocationType = string;

/** Known values of {@link DefaultCniNetworkProvisioningState} that the service accepts. */
export enum KnownDefaultCniNetworkProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** Provisioning */
  Provisioning = "Provisioning",
  /** Accepted */
  Accepted = "Accepted"
}

/**
 * Defines values for DefaultCniNetworkProvisioningState. \
 * {@link KnownDefaultCniNetworkProvisioningState} can be used interchangeably with DefaultCniNetworkProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Provisioning** \
 * **Accepted**
 */
export type DefaultCniNetworkProvisioningState = string;

/** Known values of {@link DefaultGateway} that the service accepts. */
export enum KnownDefaultGateway {
  /** True */
  True = "True",
  /** False */
  False = "False"
}

/**
 * Defines values for DefaultGateway. \
 * {@link KnownDefaultGateway} can be used interchangeably with DefaultGateway,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **True** \
 * **False**
 */
export type DefaultGateway = string;

/** Known values of {@link VirtualMachineIPAllocationMethod} that the service accepts. */
export enum KnownVirtualMachineIPAllocationMethod {
  /** Dynamic */
  Dynamic = "Dynamic",
  /** Static */
  Static = "Static",
  /** Disabled */
  Disabled = "Disabled"
}

/**
 * Defines values for VirtualMachineIPAllocationMethod. \
 * {@link KnownVirtualMachineIPAllocationMethod} can be used interchangeably with VirtualMachineIPAllocationMethod,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Dynamic** \
 * **Static** \
 * **Disabled**
 */
export type VirtualMachineIPAllocationMethod = string;

/** Known values of {@link HybridAksClusterMachinePowerState} that the service accepts. */
export enum KnownHybridAksClusterMachinePowerState {
  /** On */
  On = "On",
  /** Off */
  Off = "Off"
}

/**
 * Defines values for HybridAksClusterMachinePowerState. \
 * {@link KnownHybridAksClusterMachinePowerState} can be used interchangeably with HybridAksClusterMachinePowerState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **On** \
 * **Off**
 */
export type HybridAksClusterMachinePowerState = string;

/** Known values of {@link HybridAksClusterDetailedStatus} that the service accepts. */
export enum KnownHybridAksClusterDetailedStatus {
  /** Error */
  Error = "Error",
  /** Available */
  Available = "Available",
  /** Provisioning */
  Provisioning = "Provisioning"
}

/**
 * Defines values for HybridAksClusterDetailedStatus. \
 * {@link KnownHybridAksClusterDetailedStatus} can be used interchangeably with HybridAksClusterDetailedStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Error** \
 * **Available** \
 * **Provisioning**
 */
export type HybridAksClusterDetailedStatus = string;

/** Known values of {@link HybridAksClusterProvisioningState} that the service accepts. */
export enum KnownHybridAksClusterProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled"
}

/**
 * Defines values for HybridAksClusterProvisioningState. \
 * {@link KnownHybridAksClusterProvisioningState} can be used interchangeably with HybridAksClusterProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled**
 */
export type HybridAksClusterProvisioningState = string;

/** Known values of {@link L2NetworkDetailedStatus} that the service accepts. */
export enum KnownL2NetworkDetailedStatus {
  /** Error */
  Error = "Error",
  /** Available */
  Available = "Available",
  /** Provisioning */
  Provisioning = "Provisioning"
}

/**
 * Defines values for L2NetworkDetailedStatus. \
 * {@link KnownL2NetworkDetailedStatus} can be used interchangeably with L2NetworkDetailedStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Error** \
 * **Available** \
 * **Provisioning**
 */
export type L2NetworkDetailedStatus = string;

/** Known values of {@link HybridAksPluginType} that the service accepts. */
export enum KnownHybridAksPluginType {
  /** Dpdk */
  Dpdk = "DPDK",
  /** Sriov */
  Sriov = "SRIOV",
  /** OSDevice */
  OSDevice = "OSDevice"
}

/**
 * Defines values for HybridAksPluginType. \
 * {@link KnownHybridAksPluginType} can be used interchangeably with HybridAksPluginType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **DPDK** \
 * **SRIOV** \
 * **OSDevice**
 */
export type HybridAksPluginType = string;

/** Known values of {@link L2NetworkProvisioningState} that the service accepts. */
export enum KnownL2NetworkProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** Provisioning */
  Provisioning = "Provisioning",
  /** Accepted */
  Accepted = "Accepted"
}

/**
 * Defines values for L2NetworkProvisioningState. \
 * {@link KnownL2NetworkProvisioningState} can be used interchangeably with L2NetworkProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Provisioning** \
 * **Accepted**
 */
export type L2NetworkProvisioningState = string;

/** Known values of {@link L3NetworkDetailedStatus} that the service accepts. */
export enum KnownL3NetworkDetailedStatus {
  /** Error */
  Error = "Error",
  /** Available */
  Available = "Available",
  /** Provisioning */
  Provisioning = "Provisioning"
}

/**
 * Defines values for L3NetworkDetailedStatus. \
 * {@link KnownL3NetworkDetailedStatus} can be used interchangeably with L3NetworkDetailedStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Error** \
 * **Available** \
 * **Provisioning**
 */
export type L3NetworkDetailedStatus = string;

/** Known values of {@link HybridAksIpamEnabled} that the service accepts. */
export enum KnownHybridAksIpamEnabled {
  /** True */
  True = "True",
  /** False */
  False = "False"
}

/**
 * Defines values for HybridAksIpamEnabled. \
 * {@link KnownHybridAksIpamEnabled} can be used interchangeably with HybridAksIpamEnabled,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **True** \
 * **False**
 */
export type HybridAksIpamEnabled = string;

/** Known values of {@link L3NetworkProvisioningState} that the service accepts. */
export enum KnownL3NetworkProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** Provisioning */
  Provisioning = "Provisioning",
  /** Accepted */
  Accepted = "Accepted"
}

/**
 * Defines values for L3NetworkProvisioningState. \
 * {@link KnownL3NetworkProvisioningState} can be used interchangeably with L3NetworkProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Provisioning** \
 * **Accepted**
 */
export type L3NetworkProvisioningState = string;

/** Known values of {@link BootstrapProtocol} that the service accepts. */
export enum KnownBootstrapProtocol {
  /** PXE */
  PXE = "PXE"
}

/**
 * Defines values for BootstrapProtocol. \
 * {@link KnownBootstrapProtocol} can be used interchangeably with BootstrapProtocol,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PXE**
 */
export type BootstrapProtocol = string;

/** Known values of {@link MachineSkuDiskConnectionType} that the service accepts. */
export enum KnownMachineSkuDiskConnectionType {
  /** Pcie */
  Pcie = "PCIE",
  /** Sata */
  Sata = "SATA",
  /** Raid */
  Raid = "RAID",
  /** SAS */
  SAS = "SAS"
}

/**
 * Defines values for MachineSkuDiskConnectionType. \
 * {@link KnownMachineSkuDiskConnectionType} can be used interchangeably with MachineSkuDiskConnectionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PCIE** \
 * **SATA** \
 * **RAID** \
 * **SAS**
 */
export type MachineSkuDiskConnectionType = string;

/** Known values of {@link DiskType} that the service accepts. */
export enum KnownDiskType {
  /** HDD */
  HDD = "HDD",
  /** SSD */
  SSD = "SSD"
}

/**
 * Defines values for DiskType. \
 * {@link KnownDiskType} can be used interchangeably with DiskType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **HDD** \
 * **SSD**
 */
export type DiskType = string;

/** Known values of {@link DeviceConnectionType} that the service accepts. */
export enum KnownDeviceConnectionType {
  /** PCI */
  PCI = "PCI"
}

/**
 * Defines values for DeviceConnectionType. \
 * {@link KnownDeviceConnectionType} can be used interchangeably with DeviceConnectionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PCI**
 */
export type DeviceConnectionType = string;

/** Known values of {@link RackSkuProvisioningState} that the service accepts. */
export enum KnownRackSkuProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded"
}

/**
 * Defines values for RackSkuProvisioningState. \
 * {@link KnownRackSkuProvisioningState} can be used interchangeably with RackSkuProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded**
 */
export type RackSkuProvisioningState = string;

/** Known values of {@link RackSkuType} that the service accepts. */
export enum KnownRackSkuType {
  /** Aggregator */
  Aggregator = "Aggregator",
  /** Compute */
  Compute = "Compute",
  /** Single */
  Single = "Single"
}

/**
 * Defines values for RackSkuType. \
 * {@link KnownRackSkuType} can be used interchangeably with RackSkuType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Aggregator** \
 * **Compute** \
 * **Single**
 */
export type RackSkuType = string;

/** Known values of {@link RackDetailedStatus} that the service accepts. */
export enum KnownRackDetailedStatus {
  /** Error */
  Error = "Error",
  /** Available */
  Available = "Available",
  /** Provisioning */
  Provisioning = "Provisioning"
}

/**
 * Defines values for RackDetailedStatus. \
 * {@link KnownRackDetailedStatus} can be used interchangeably with RackDetailedStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Error** \
 * **Available** \
 * **Provisioning**
 */
export type RackDetailedStatus = string;

/** Known values of {@link RackProvisioningState} that the service accepts. */
export enum KnownRackProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** Provisioning */
  Provisioning = "Provisioning",
  /** Accepted */
  Accepted = "Accepted"
}

/**
 * Defines values for RackProvisioningState. \
 * {@link KnownRackProvisioningState} can be used interchangeably with RackProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Provisioning** \
 * **Accepted**
 */
export type RackProvisioningState = string;

/** Known values of {@link StorageApplianceDetailedStatus} that the service accepts. */
export enum KnownStorageApplianceDetailedStatus {
  /** Error */
  Error = "Error",
  /** Available */
  Available = "Available",
  /** Provisioning */
  Provisioning = "Provisioning"
}

/**
 * Defines values for StorageApplianceDetailedStatus. \
 * {@link KnownStorageApplianceDetailedStatus} can be used interchangeably with StorageApplianceDetailedStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Error** \
 * **Available** \
 * **Provisioning**
 */
export type StorageApplianceDetailedStatus = string;

/** Known values of {@link StorageApplianceProvisioningState} that the service accepts. */
export enum KnownStorageApplianceProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** Provisioning */
  Provisioning = "Provisioning",
  /** Accepted */
  Accepted = "Accepted"
}

/**
 * Defines values for StorageApplianceProvisioningState. \
 * {@link KnownStorageApplianceProvisioningState} can be used interchangeably with StorageApplianceProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Provisioning** \
 * **Accepted**
 */
export type StorageApplianceProvisioningState = string;

/** Known values of {@link RemoteVendorManagementFeature} that the service accepts. */
export enum KnownRemoteVendorManagementFeature {
  /** Supported */
  Supported = "Supported",
  /** Unsupported */
  Unsupported = "Unsupported"
}

/**
 * Defines values for RemoteVendorManagementFeature. \
 * {@link KnownRemoteVendorManagementFeature} can be used interchangeably with RemoteVendorManagementFeature,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Supported** \
 * **Unsupported**
 */
export type RemoteVendorManagementFeature = string;

/** Known values of {@link RemoteVendorManagementStatus} that the service accepts. */
export enum KnownRemoteVendorManagementStatus {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled",
  /** Unsupported */
  Unsupported = "Unsupported"
}

/**
 * Defines values for RemoteVendorManagementStatus. \
 * {@link KnownRemoteVendorManagementStatus} can be used interchangeably with RemoteVendorManagementStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled** \
 * **Unsupported**
 */
export type RemoteVendorManagementStatus = string;

/** Known values of {@link TrunkedNetworkDetailedStatus} that the service accepts. */
export enum KnownTrunkedNetworkDetailedStatus {
  /** Error */
  Error = "Error",
  /** Available */
  Available = "Available",
  /** Provisioning */
  Provisioning = "Provisioning"
}

/**
 * Defines values for TrunkedNetworkDetailedStatus. \
 * {@link KnownTrunkedNetworkDetailedStatus} can be used interchangeably with TrunkedNetworkDetailedStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Error** \
 * **Available** \
 * **Provisioning**
 */
export type TrunkedNetworkDetailedStatus = string;

/** Known values of {@link TrunkedNetworkProvisioningState} that the service accepts. */
export enum KnownTrunkedNetworkProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** Provisioning */
  Provisioning = "Provisioning",
  /** Accepted */
  Accepted = "Accepted"
}

/**
 * Defines values for TrunkedNetworkProvisioningState. \
 * {@link KnownTrunkedNetworkProvisioningState} can be used interchangeably with TrunkedNetworkProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Provisioning** \
 * **Accepted**
 */
export type TrunkedNetworkProvisioningState = string;

/** Known values of {@link VirtualMachineBootMethod} that the service accepts. */
export enum KnownVirtualMachineBootMethod {
  /** Uefi */
  Uefi = "UEFI",
  /** Bios */
  Bios = "BIOS"
}

/**
 * Defines values for VirtualMachineBootMethod. \
 * {@link KnownVirtualMachineBootMethod} can be used interchangeably with VirtualMachineBootMethod,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **UEFI** \
 * **BIOS**
 */
export type VirtualMachineBootMethod = string;

/** Known values of {@link VirtualMachineDetailedStatus} that the service accepts. */
export enum KnownVirtualMachineDetailedStatus {
  /** Error */
  Error = "Error",
  /** Available */
  Available = "Available",
  /** Provisioning */
  Provisioning = "Provisioning"
}

/**
 * Defines values for VirtualMachineDetailedStatus. \
 * {@link KnownVirtualMachineDetailedStatus} can be used interchangeably with VirtualMachineDetailedStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Error** \
 * **Available** \
 * **Provisioning**
 */
export type VirtualMachineDetailedStatus = string;

/** Known values of {@link VirtualMachineIsolateEmulatorThread} that the service accepts. */
export enum KnownVirtualMachineIsolateEmulatorThread {
  /** True */
  True = "True",
  /** False */
  False = "False"
}

/**
 * Defines values for VirtualMachineIsolateEmulatorThread. \
 * {@link KnownVirtualMachineIsolateEmulatorThread} can be used interchangeably with VirtualMachineIsolateEmulatorThread,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **True** \
 * **False**
 */
export type VirtualMachineIsolateEmulatorThread = string;

/** Known values of {@link VirtualMachinePlacementHintType} that the service accepts. */
export enum KnownVirtualMachinePlacementHintType {
  /** Affinity */
  Affinity = "Affinity",
  /** AntiAffinity */
  AntiAffinity = "AntiAffinity"
}

/**
 * Defines values for VirtualMachinePlacementHintType. \
 * {@link KnownVirtualMachinePlacementHintType} can be used interchangeably with VirtualMachinePlacementHintType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Affinity** \
 * **AntiAffinity**
 */
export type VirtualMachinePlacementHintType = string;

/** Known values of {@link VirtualMachineSchedulingExecution} that the service accepts. */
export enum KnownVirtualMachineSchedulingExecution {
  /** Hard */
  Hard = "Hard",
  /** Soft */
  Soft = "Soft"
}

/**
 * Defines values for VirtualMachineSchedulingExecution. \
 * {@link KnownVirtualMachineSchedulingExecution} can be used interchangeably with VirtualMachineSchedulingExecution,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Hard** \
 * **Soft**
 */
export type VirtualMachineSchedulingExecution = string;

/** Known values of {@link VirtualMachinePlacementHintPodAffinityScope} that the service accepts. */
export enum KnownVirtualMachinePlacementHintPodAffinityScope {
  /** Rack */
  Rack = "Rack",
  /** Machine */
  Machine = "Machine"
}

/**
 * Defines values for VirtualMachinePlacementHintPodAffinityScope. \
 * {@link KnownVirtualMachinePlacementHintPodAffinityScope} can be used interchangeably with VirtualMachinePlacementHintPodAffinityScope,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Rack** \
 * **Machine**
 */
export type VirtualMachinePlacementHintPodAffinityScope = string;

/** Known values of {@link VirtualMachinePowerState} that the service accepts. */
export enum KnownVirtualMachinePowerState {
  /** On */
  On = "On",
  /** Off */
  Off = "Off"
}

/**
 * Defines values for VirtualMachinePowerState. \
 * {@link KnownVirtualMachinePowerState} can be used interchangeably with VirtualMachinePowerState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **On** \
 * **Off**
 */
export type VirtualMachinePowerState = string;

/** Known values of {@link VirtualMachineProvisioningState} that the service accepts. */
export enum KnownVirtualMachineProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** Provisioning */
  Provisioning = "Provisioning",
  /** Accepted */
  Accepted = "Accepted"
}

/**
 * Defines values for VirtualMachineProvisioningState. \
 * {@link KnownVirtualMachineProvisioningState} can be used interchangeably with VirtualMachineProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Provisioning** \
 * **Accepted**
 */
export type VirtualMachineProvisioningState = string;

/** Known values of {@link OsDiskCreateOption} that the service accepts. */
export enum KnownOsDiskCreateOption {
  /** Ephemeral */
  Ephemeral = "Ephemeral"
}

/**
 * Defines values for OsDiskCreateOption. \
 * {@link KnownOsDiskCreateOption} can be used interchangeably with OsDiskCreateOption,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Ephemeral**
 */
export type OsDiskCreateOption = string;

/** Known values of {@link OsDiskDeleteOption} that the service accepts. */
export enum KnownOsDiskDeleteOption {
  /** Delete */
  Delete = "Delete"
}

/**
 * Defines values for OsDiskDeleteOption. \
 * {@link KnownOsDiskDeleteOption} can be used interchangeably with OsDiskDeleteOption,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Delete**
 */
export type OsDiskDeleteOption = string;

/** Known values of {@link VirtualMachineVirtioInterfaceType} that the service accepts. */
export enum KnownVirtualMachineVirtioInterfaceType {
  /** Modern */
  Modern = "Modern",
  /** Transitional */
  Transitional = "Transitional"
}

/**
 * Defines values for VirtualMachineVirtioInterfaceType. \
 * {@link KnownVirtualMachineVirtioInterfaceType} can be used interchangeably with VirtualMachineVirtioInterfaceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Modern** \
 * **Transitional**
 */
export type VirtualMachineVirtioInterfaceType = string;

/** Known values of {@link VirtualMachineDeviceModelType} that the service accepts. */
export enum KnownVirtualMachineDeviceModelType {
  /** T1 */
  T1 = "T1",
  /** T2 */
  T2 = "T2"
}

/**
 * Defines values for VirtualMachineDeviceModelType. \
 * {@link KnownVirtualMachineDeviceModelType} can be used interchangeably with VirtualMachineDeviceModelType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **T1** \
 * **T2**
 */
export type VirtualMachineDeviceModelType = string;

/** Known values of {@link VolumeDetailedStatus} that the service accepts. */
export enum KnownVolumeDetailedStatus {
  /** Error */
  Error = "Error",
  /** Active */
  Active = "Active",
  /** Provisioning */
  Provisioning = "Provisioning"
}

/**
 * Defines values for VolumeDetailedStatus. \
 * {@link KnownVolumeDetailedStatus} can be used interchangeably with VolumeDetailedStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Error** \
 * **Active** \
 * **Provisioning**
 */
export type VolumeDetailedStatus = string;

/** Known values of {@link VolumeProvisioningState} that the service accepts. */
export enum KnownVolumeProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** Provisioning */
  Provisioning = "Provisioning",
  /** Accepted */
  Accepted = "Accepted"
}

/**
 * Defines values for VolumeProvisioningState. \
 * {@link KnownVolumeProvisioningState} can be used interchangeably with VolumeProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Provisioning** \
 * **Accepted**
 */
export type VolumeProvisioningState = string;

/** Known values of {@link BareMetalMachineEvacuate} that the service accepts. */
export enum KnownBareMetalMachineEvacuate {
  /** True */
  True = "True",
  /** False */
  False = "False"
}

/**
 * Defines values for BareMetalMachineEvacuate. \
 * {@link KnownBareMetalMachineEvacuate} can be used interchangeably with BareMetalMachineEvacuate,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **True** \
 * **False**
 */
export type BareMetalMachineEvacuate = string;

/** Known values of {@link BareMetalMachineSkipShutdown} that the service accepts. */
export enum KnownBareMetalMachineSkipShutdown {
  /** True */
  True = "True",
  /** False */
  False = "False"
}

/**
 * Defines values for BareMetalMachineSkipShutdown. \
 * {@link KnownBareMetalMachineSkipShutdown} can be used interchangeably with BareMetalMachineSkipShutdown,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **True** \
 * **False**
 */
export type BareMetalMachineSkipShutdown = string;

/** Known values of {@link BareMetalMachineHardwareValidationCategory} that the service accepts. */
export enum KnownBareMetalMachineHardwareValidationCategory {
  /** BasicValidation */
  BasicValidation = "BasicValidation"
}

/**
 * Defines values for BareMetalMachineHardwareValidationCategory. \
 * {@link KnownBareMetalMachineHardwareValidationCategory} can be used interchangeably with BareMetalMachineHardwareValidationCategory,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **BasicValidation**
 */
export type BareMetalMachineHardwareValidationCategory = string;

/** Known values of {@link BareMetalMachineKeySetDetailedStatus} that the service accepts. */
export enum KnownBareMetalMachineKeySetDetailedStatus {
  /** AllActive */
  AllActive = "AllActive",
  /** SomeInvalid */
  SomeInvalid = "SomeInvalid",
  /** AllInvalid */
  AllInvalid = "AllInvalid",
  /** Validating */
  Validating = "Validating"
}

/**
 * Defines values for BareMetalMachineKeySetDetailedStatus. \
 * {@link KnownBareMetalMachineKeySetDetailedStatus} can be used interchangeably with BareMetalMachineKeySetDetailedStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AllActive** \
 * **SomeInvalid** \
 * **AllInvalid** \
 * **Validating**
 */
export type BareMetalMachineKeySetDetailedStatus = string;

/** Known values of {@link BareMetalMachineKeySetPrivilegeLevel} that the service accepts. */
export enum KnownBareMetalMachineKeySetPrivilegeLevel {
  /** Standard */
  Standard = "Standard",
  /** Superuser */
  Superuser = "Superuser"
}

/**
 * Defines values for BareMetalMachineKeySetPrivilegeLevel. \
 * {@link KnownBareMetalMachineKeySetPrivilegeLevel} can be used interchangeably with BareMetalMachineKeySetPrivilegeLevel,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard** \
 * **Superuser**
 */
export type BareMetalMachineKeySetPrivilegeLevel = string;

/** Known values of {@link BareMetalMachineKeySetProvisioningState} that the service accepts. */
export enum KnownBareMetalMachineKeySetProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** Accepted */
  Accepted = "Accepted",
  /** Provisioning */
  Provisioning = "Provisioning"
}

/**
 * Defines values for BareMetalMachineKeySetProvisioningState. \
 * {@link KnownBareMetalMachineKeySetProvisioningState} can be used interchangeably with BareMetalMachineKeySetProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Accepted** \
 * **Provisioning**
 */
export type BareMetalMachineKeySetProvisioningState = string;

/** Known values of {@link BareMetalMachineKeySetUserSetupStatus} that the service accepts. */
export enum KnownBareMetalMachineKeySetUserSetupStatus {
  /** Active */
  Active = "Active",
  /** Invalid */
  Invalid = "Invalid"
}

/**
 * Defines values for BareMetalMachineKeySetUserSetupStatus. \
 * {@link KnownBareMetalMachineKeySetUserSetupStatus} can be used interchangeably with BareMetalMachineKeySetUserSetupStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Active** \
 * **Invalid**
 */
export type BareMetalMachineKeySetUserSetupStatus = string;

/** Known values of {@link BmcKeySetDetailedStatus} that the service accepts. */
export enum KnownBmcKeySetDetailedStatus {
  /** AllActive */
  AllActive = "AllActive",
  /** SomeInvalid */
  SomeInvalid = "SomeInvalid",
  /** AllInvalid */
  AllInvalid = "AllInvalid",
  /** Validating */
  Validating = "Validating"
}

/**
 * Defines values for BmcKeySetDetailedStatus. \
 * {@link KnownBmcKeySetDetailedStatus} can be used interchangeably with BmcKeySetDetailedStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AllActive** \
 * **SomeInvalid** \
 * **AllInvalid** \
 * **Validating**
 */
export type BmcKeySetDetailedStatus = string;

/** Known values of {@link BmcKeySetPrivilegeLevel} that the service accepts. */
export enum KnownBmcKeySetPrivilegeLevel {
  /** ReadOnly */
  ReadOnly = "ReadOnly",
  /** Administrator */
  Administrator = "Administrator"
}

/**
 * Defines values for BmcKeySetPrivilegeLevel. \
 * {@link KnownBmcKeySetPrivilegeLevel} can be used interchangeably with BmcKeySetPrivilegeLevel,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ReadOnly** \
 * **Administrator**
 */
export type BmcKeySetPrivilegeLevel = string;

/** Known values of {@link BmcKeySetProvisioningState} that the service accepts. */
export enum KnownBmcKeySetProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** Accepted */
  Accepted = "Accepted",
  /** Provisioning */
  Provisioning = "Provisioning"
}

/**
 * Defines values for BmcKeySetProvisioningState. \
 * {@link KnownBmcKeySetProvisioningState} can be used interchangeably with BmcKeySetProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Accepted** \
 * **Provisioning**
 */
export type BmcKeySetProvisioningState = string;

/** Known values of {@link ClusterMetricsConfigurationDetailedStatus} that the service accepts. */
export enum KnownClusterMetricsConfigurationDetailedStatus {
  /** Processing */
  Processing = "Processing",
  /** Applied */
  Applied = "Applied",
  /** Error */
  Error = "Error"
}

/**
 * Defines values for ClusterMetricsConfigurationDetailedStatus. \
 * {@link KnownClusterMetricsConfigurationDetailedStatus} can be used interchangeably with ClusterMetricsConfigurationDetailedStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Processing** \
 * **Applied** \
 * **Error**
 */
export type ClusterMetricsConfigurationDetailedStatus = string;

/** Known values of {@link ClusterMetricsConfigurationProvisioningState} that the service accepts. */
export enum KnownClusterMetricsConfigurationProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** Accepted */
  Accepted = "Accepted",
  /** Provisioning */
  Provisioning = "Provisioning"
}

/**
 * Defines values for ClusterMetricsConfigurationProvisioningState. \
 * {@link KnownClusterMetricsConfigurationProvisioningState} can be used interchangeably with ClusterMetricsConfigurationProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Accepted** \
 * **Provisioning**
 */
export type ClusterMetricsConfigurationProvisioningState = string;

/** Known values of {@link StorageApplianceHardwareValidationCategory} that the service accepts. */
export enum KnownStorageApplianceHardwareValidationCategory {
  /** BasicValidation */
  BasicValidation = "BasicValidation"
}

/**
 * Defines values for StorageApplianceHardwareValidationCategory. \
 * {@link KnownStorageApplianceHardwareValidationCategory} can be used interchangeably with StorageApplianceHardwareValidationCategory,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **BasicValidation**
 */
export type StorageApplianceHardwareValidationCategory = string;

/** Known values of {@link ConsoleDetailedStatus} that the service accepts. */
export enum KnownConsoleDetailedStatus {
  /** Ready */
  Ready = "Ready",
  /** Error */
  Error = "Error"
}

/**
 * Defines values for ConsoleDetailedStatus. \
 * {@link KnownConsoleDetailedStatus} can be used interchangeably with ConsoleDetailedStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Ready** \
 * **Error**
 */
export type ConsoleDetailedStatus = string;

/** Known values of {@link ConsoleEnabled} that the service accepts. */
export enum KnownConsoleEnabled {
  /** True */
  True = "True",
  /** False */
  False = "False"
}

/**
 * Defines values for ConsoleEnabled. \
 * {@link KnownConsoleEnabled} can be used interchangeably with ConsoleEnabled,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **True** \
 * **False**
 */
export type ConsoleEnabled = string;

/** Known values of {@link ConsoleProvisioningState} that the service accepts. */
export enum KnownConsoleProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** Provisioning */
  Provisioning = "Provisioning",
  /** Accepted */
  Accepted = "Accepted"
}

/**
 * Defines values for ConsoleProvisioningState. \
 * {@link KnownConsoleProvisioningState} can be used interchangeably with ConsoleProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Provisioning** \
 * **Accepted**
 */
export type ConsoleProvisioningState = string;

/** Known values of {@link SkipShutdown} that the service accepts. */
export enum KnownSkipShutdown {
  /** True */
  True = "True",
  /** False */
  False = "False"
}

/**
 * Defines values for SkipShutdown. \
 * {@link KnownSkipShutdown} can be used interchangeably with SkipShutdown,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **True** \
 * **False**
 */
export type SkipShutdown = string;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface BareMetalMachinesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type BareMetalMachinesListBySubscriptionResponse = BareMetalMachineList;

/** Optional parameters. */
export interface BareMetalMachinesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type BareMetalMachinesListByResourceGroupResponse = BareMetalMachineList;

/** Optional parameters. */
export interface BareMetalMachinesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type BareMetalMachinesGetResponse = BareMetalMachine;

/** Optional parameters. */
export interface BareMetalMachinesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type BareMetalMachinesCreateOrUpdateResponse = BareMetalMachine;

/** Optional parameters. */
export interface BareMetalMachinesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface BareMetalMachinesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** The request body. */
  bareMetalMachineUpdateParameters?: BareMetalMachinePatchParameters;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type BareMetalMachinesUpdateResponse = BareMetalMachine;

/** Optional parameters. */
export interface BareMetalMachinesCordonOptionalParams
  extends coreClient.OperationOptions {
  /** The request body. */
  bareMetalMachineCordonParameters?: BareMetalMachineCordonParameters;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the cordon operation. */
export type BareMetalMachinesCordonResponse = BareMetalMachinesCordonHeaders;

/** Optional parameters. */
export interface BareMetalMachinesPowerOffOptionalParams
  extends coreClient.OperationOptions {
  /** The request body. */
  bareMetalMachinePowerOffParameters?: BareMetalMachinePowerOffParameters;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the powerOff operation. */
export type BareMetalMachinesPowerOffResponse = BareMetalMachinesPowerOffHeaders;

/** Optional parameters. */
export interface BareMetalMachinesReimageOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the reimage operation. */
export type BareMetalMachinesReimageResponse = BareMetalMachinesReimageHeaders;

/** Optional parameters. */
export interface BareMetalMachinesReplaceOptionalParams
  extends coreClient.OperationOptions {
  /** The request body. */
  bareMetalMachineReplaceParameters?: BareMetalMachineReplaceParameters;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the replace operation. */
export type BareMetalMachinesReplaceResponse = BareMetalMachinesReplaceHeaders;

/** Optional parameters. */
export interface BareMetalMachinesRestartOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the restart operation. */
export type BareMetalMachinesRestartResponse = BareMetalMachinesRestartHeaders;

/** Optional parameters. */
export interface BareMetalMachinesRunCommandOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the runCommand operation. */
export type BareMetalMachinesRunCommandResponse = BareMetalMachinesRunCommandHeaders;

/** Optional parameters. */
export interface BareMetalMachinesRunDataExtractsOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the runDataExtracts operation. */
export type BareMetalMachinesRunDataExtractsResponse = BareMetalMachinesRunDataExtractsHeaders;

/** Optional parameters. */
export interface BareMetalMachinesRunReadCommandsOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the runReadCommands operation. */
export type BareMetalMachinesRunReadCommandsResponse = BareMetalMachinesRunReadCommandsHeaders;

/** Optional parameters. */
export interface BareMetalMachinesStartOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the start operation. */
export type BareMetalMachinesStartResponse = BareMetalMachinesStartHeaders;

/** Optional parameters. */
export interface BareMetalMachinesUncordonOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the uncordon operation. */
export type BareMetalMachinesUncordonResponse = BareMetalMachinesUncordonHeaders;

/** Optional parameters. */
export interface BareMetalMachinesValidateHardwareOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the validateHardware operation. */
export type BareMetalMachinesValidateHardwareResponse = BareMetalMachinesValidateHardwareHeaders;

/** Optional parameters. */
export interface BareMetalMachinesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type BareMetalMachinesListBySubscriptionNextResponse = BareMetalMachineList;

/** Optional parameters. */
export interface BareMetalMachinesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type BareMetalMachinesListByResourceGroupNextResponse = BareMetalMachineList;

/** Optional parameters. */
export interface CloudServicesNetworksListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type CloudServicesNetworksListBySubscriptionResponse = CloudServicesNetworkList;

/** Optional parameters. */
export interface CloudServicesNetworksListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type CloudServicesNetworksListByResourceGroupResponse = CloudServicesNetworkList;

/** Optional parameters. */
export interface CloudServicesNetworksGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type CloudServicesNetworksGetResponse = CloudServicesNetwork;

/** Optional parameters. */
export interface CloudServicesNetworksCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type CloudServicesNetworksCreateOrUpdateResponse = CloudServicesNetwork;

/** Optional parameters. */
export interface CloudServicesNetworksDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface CloudServicesNetworksUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** The request body. */
  cloudServicesNetworkUpdateParameters?: CloudServicesNetworkPatchParameters;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type CloudServicesNetworksUpdateResponse = CloudServicesNetwork;

/** Optional parameters. */
export interface CloudServicesNetworksListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type CloudServicesNetworksListBySubscriptionNextResponse = CloudServicesNetworkList;

/** Optional parameters. */
export interface CloudServicesNetworksListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type CloudServicesNetworksListByResourceGroupNextResponse = CloudServicesNetworkList;

/** Optional parameters. */
export interface ClusterManagersListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type ClusterManagersListBySubscriptionResponse = ClusterManagerList;

/** Optional parameters. */
export interface ClusterManagersListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type ClusterManagersListByResourceGroupResponse = ClusterManagerList;

/** Optional parameters. */
export interface ClusterManagersGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ClusterManagersGetResponse = ClusterManager;

/** Optional parameters. */
export interface ClusterManagersCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ClusterManagersCreateOrUpdateResponse = ClusterManager;

/** Optional parameters. */
export interface ClusterManagersDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ClusterManagersUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** The request body. */
  clusterManagerUpdateParameters?: ClusterManagerPatchParameters;
}

/** Contains response data for the update operation. */
export type ClusterManagersUpdateResponse = ClusterManager;

/** Optional parameters. */
export interface ClusterManagersListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type ClusterManagersListBySubscriptionNextResponse = ClusterManagerList;

/** Optional parameters. */
export interface ClusterManagersListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type ClusterManagersListByResourceGroupNextResponse = ClusterManagerList;

/** Optional parameters. */
export interface ClustersListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type ClustersListBySubscriptionResponse = ClusterList;

/** Optional parameters. */
export interface ClustersListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type ClustersListByResourceGroupResponse = ClusterList;

/** Optional parameters. */
export interface ClustersGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ClustersGetResponse = Cluster;

/** Optional parameters. */
export interface ClustersCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ClustersCreateOrUpdateResponse = Cluster;

/** Optional parameters. */
export interface ClustersDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ClustersUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** The request body. */
  clusterUpdateParameters?: ClusterPatchParameters;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type ClustersUpdateResponse = Cluster;

/** Optional parameters. */
export interface ClustersDeployOptionalParams
  extends coreClient.OperationOptions {
  /** The request body. */
  clusterDeployParameters?: ClusterDeployParameters;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the deploy operation. */
export type ClustersDeployResponse = ClustersDeployHeaders;

/** Optional parameters. */
export interface ClustersUpdateVersionOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateVersion operation. */
export type ClustersUpdateVersionResponse = ClustersUpdateVersionHeaders;

/** Optional parameters. */
export interface ClustersListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type ClustersListBySubscriptionNextResponse = ClusterList;

/** Optional parameters. */
export interface ClustersListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type ClustersListByResourceGroupNextResponse = ClusterList;

/** Optional parameters. */
export interface DefaultCniNetworksListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type DefaultCniNetworksListBySubscriptionResponse = DefaultCniNetworkList;

/** Optional parameters. */
export interface DefaultCniNetworksListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type DefaultCniNetworksListByResourceGroupResponse = DefaultCniNetworkList;

/** Optional parameters. */
export interface DefaultCniNetworksGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DefaultCniNetworksGetResponse = DefaultCniNetwork;

/** Optional parameters. */
export interface DefaultCniNetworksCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type DefaultCniNetworksCreateOrUpdateResponse = DefaultCniNetwork;

/** Optional parameters. */
export interface DefaultCniNetworksDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DefaultCniNetworksUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** The request body. */
  defaultCniNetworkUpdateParameters?: DefaultCniNetworkPatchParameters;
}

/** Contains response data for the update operation. */
export type DefaultCniNetworksUpdateResponse = DefaultCniNetwork;

/** Optional parameters. */
export interface DefaultCniNetworksListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type DefaultCniNetworksListBySubscriptionNextResponse = DefaultCniNetworkList;

/** Optional parameters. */
export interface DefaultCniNetworksListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type DefaultCniNetworksListByResourceGroupNextResponse = DefaultCniNetworkList;

/** Optional parameters. */
export interface HybridAksClustersListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type HybridAksClustersListBySubscriptionResponse = HybridAksClusterList;

/** Optional parameters. */
export interface HybridAksClustersListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type HybridAksClustersListByResourceGroupResponse = HybridAksClusterList;

/** Optional parameters. */
export interface HybridAksClustersGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type HybridAksClustersGetResponse = HybridAksCluster;

/** Optional parameters. */
export interface HybridAksClustersCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type HybridAksClustersCreateOrUpdateResponse = HybridAksCluster;

/** Optional parameters. */
export interface HybridAksClustersDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface HybridAksClustersUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** The request body. */
  hybridAksClusterUpdateParameters?: HybridAksClusterPatchParameters;
}

/** Contains response data for the update operation. */
export type HybridAksClustersUpdateResponse = HybridAksCluster;

/** Optional parameters. */
export interface HybridAksClustersRestartNodeOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the restartNode operation. */
export type HybridAksClustersRestartNodeResponse = HybridAksClustersRestartNodeHeaders;

/** Optional parameters. */
export interface HybridAksClustersListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type HybridAksClustersListBySubscriptionNextResponse = HybridAksClusterList;

/** Optional parameters. */
export interface HybridAksClustersListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type HybridAksClustersListByResourceGroupNextResponse = HybridAksClusterList;

/** Optional parameters. */
export interface L2NetworksListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type L2NetworksListBySubscriptionResponse = L2NetworkList;

/** Optional parameters. */
export interface L2NetworksListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type L2NetworksListByResourceGroupResponse = L2NetworkList;

/** Optional parameters. */
export interface L2NetworksGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type L2NetworksGetResponse = L2Network;

/** Optional parameters. */
export interface L2NetworksCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type L2NetworksCreateOrUpdateResponse = L2Network;

/** Optional parameters. */
export interface L2NetworksDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface L2NetworksUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** The request body. */
  l2NetworkUpdateParameters?: L2NetworkPatchParameters;
}

/** Contains response data for the update operation. */
export type L2NetworksUpdateResponse = L2Network;

/** Optional parameters. */
export interface L2NetworksListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type L2NetworksListBySubscriptionNextResponse = L2NetworkList;

/** Optional parameters. */
export interface L2NetworksListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type L2NetworksListByResourceGroupNextResponse = L2NetworkList;

/** Optional parameters. */
export interface L3NetworksListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type L3NetworksListBySubscriptionResponse = L3NetworkList;

/** Optional parameters. */
export interface L3NetworksListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type L3NetworksListByResourceGroupResponse = L3NetworkList;

/** Optional parameters. */
export interface L3NetworksGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type L3NetworksGetResponse = L3Network;

/** Optional parameters. */
export interface L3NetworksCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type L3NetworksCreateOrUpdateResponse = L3Network;

/** Optional parameters. */
export interface L3NetworksDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface L3NetworksUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** The request body. */
  l3NetworkUpdateParameters?: L3NetworkPatchParameters;
}

/** Contains response data for the update operation. */
export type L3NetworksUpdateResponse = L3Network;

/** Optional parameters. */
export interface L3NetworksListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type L3NetworksListBySubscriptionNextResponse = L3NetworkList;

/** Optional parameters. */
export interface L3NetworksListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type L3NetworksListByResourceGroupNextResponse = L3NetworkList;

/** Optional parameters. */
export interface RackSkusListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type RackSkusListBySubscriptionResponse = RackSkuList;

/** Optional parameters. */
export interface RackSkusGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type RackSkusGetResponse = RackSku;

/** Optional parameters. */
export interface RackSkusListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type RackSkusListBySubscriptionNextResponse = RackSkuList;

/** Optional parameters. */
export interface RacksListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type RacksListBySubscriptionResponse = RackList;

/** Optional parameters. */
export interface RacksListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type RacksListByResourceGroupResponse = RackList;

/** Optional parameters. */
export interface RacksGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type RacksGetResponse = Rack;

/** Optional parameters. */
export interface RacksCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type RacksCreateOrUpdateResponse = Rack;

/** Optional parameters. */
export interface RacksDeleteOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface RacksUpdateOptionalParams extends coreClient.OperationOptions {
  /** The request body. */
  rackUpdateParameters?: RackPatchParameters;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type RacksUpdateResponse = Rack;

/** Optional parameters. */
export interface RacksListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type RacksListBySubscriptionNextResponse = RackList;

/** Optional parameters. */
export interface RacksListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type RacksListByResourceGroupNextResponse = RackList;

/** Optional parameters. */
export interface StorageAppliancesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type StorageAppliancesListBySubscriptionResponse = StorageApplianceList;

/** Optional parameters. */
export interface StorageAppliancesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type StorageAppliancesListByResourceGroupResponse = StorageApplianceList;

/** Optional parameters. */
export interface StorageAppliancesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type StorageAppliancesGetResponse = StorageAppliance;

/** Optional parameters. */
export interface StorageAppliancesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type StorageAppliancesCreateOrUpdateResponse = StorageAppliance;

/** Optional parameters. */
export interface StorageAppliancesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface StorageAppliancesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** The request body. */
  storageApplianceUpdateParameters?: StorageAppliancePatchParameters;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type StorageAppliancesUpdateResponse = StorageAppliance;

/** Optional parameters. */
export interface StorageAppliancesDisableRemoteVendorManagementOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the disableRemoteVendorManagement operation. */
export type StorageAppliancesDisableRemoteVendorManagementResponse = StorageAppliancesDisableRemoteVendorManagementHeaders;

/** Optional parameters. */
export interface StorageAppliancesEnableRemoteVendorManagementOptionalParams
  extends coreClient.OperationOptions {
  /** The request body. */
  storageApplianceEnableRemoteVendorManagementParameters?: StorageApplianceEnableRemoteVendorManagementParameters;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the enableRemoteVendorManagement operation. */
export type StorageAppliancesEnableRemoteVendorManagementResponse = StorageAppliancesEnableRemoteVendorManagementHeaders;

/** Optional parameters. */
export interface StorageAppliancesRunReadCommandsOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the runReadCommands operation. */
export type StorageAppliancesRunReadCommandsResponse = StorageAppliancesRunReadCommandsHeaders;

/** Optional parameters. */
export interface StorageAppliancesValidateHardwareOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the validateHardware operation. */
export type StorageAppliancesValidateHardwareResponse = StorageAppliancesValidateHardwareHeaders;

/** Optional parameters. */
export interface StorageAppliancesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type StorageAppliancesListBySubscriptionNextResponse = StorageApplianceList;

/** Optional parameters. */
export interface StorageAppliancesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type StorageAppliancesListByResourceGroupNextResponse = StorageApplianceList;

/** Optional parameters. */
export interface TrunkedNetworksListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type TrunkedNetworksListBySubscriptionResponse = TrunkedNetworkList;

/** Optional parameters. */
export interface TrunkedNetworksListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type TrunkedNetworksListByResourceGroupResponse = TrunkedNetworkList;

/** Optional parameters. */
export interface TrunkedNetworksGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type TrunkedNetworksGetResponse = TrunkedNetwork;

/** Optional parameters. */
export interface TrunkedNetworksCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type TrunkedNetworksCreateOrUpdateResponse = TrunkedNetwork;

/** Optional parameters. */
export interface TrunkedNetworksDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface TrunkedNetworksUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** The request body. */
  trunkedNetworkUpdateParameters?: TrunkedNetworkPatchParameters;
}

/** Contains response data for the update operation. */
export type TrunkedNetworksUpdateResponse = TrunkedNetwork;

/** Optional parameters. */
export interface TrunkedNetworksListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type TrunkedNetworksListBySubscriptionNextResponse = TrunkedNetworkList;

/** Optional parameters. */
export interface TrunkedNetworksListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type TrunkedNetworksListByResourceGroupNextResponse = TrunkedNetworkList;

/** Optional parameters. */
export interface VirtualMachinesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type VirtualMachinesListBySubscriptionResponse = VirtualMachineList;

/** Optional parameters. */
export interface VirtualMachinesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type VirtualMachinesListByResourceGroupResponse = VirtualMachineList;

/** Optional parameters. */
export interface VirtualMachinesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type VirtualMachinesGetResponse = VirtualMachine;

/** Optional parameters. */
export interface VirtualMachinesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type VirtualMachinesCreateOrUpdateResponse = VirtualMachine;

/** Optional parameters. */
export interface VirtualMachinesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** The request body. */
  virtualMachineUpdateParameters?: VirtualMachinePatchParameters;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type VirtualMachinesUpdateResponse = VirtualMachine;

/** Optional parameters. */
export interface VirtualMachinesAttachVolumeOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the attachVolume operation. */
export type VirtualMachinesAttachVolumeResponse = VirtualMachinesAttachVolumeHeaders;

/** Optional parameters. */
export interface VirtualMachinesDetachVolumeOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the detachVolume operation. */
export type VirtualMachinesDetachVolumeResponse = VirtualMachinesDetachVolumeHeaders;

/** Optional parameters. */
export interface VirtualMachinesPowerOffOptionalParams
  extends coreClient.OperationOptions {
  /** The request body. */
  virtualMachinePowerOffParameters?: VirtualMachinePowerOffParameters;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the powerOff operation. */
export type VirtualMachinesPowerOffResponse = VirtualMachinesPowerOffHeaders;

/** Optional parameters. */
export interface VirtualMachinesReimageOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the reimage operation. */
export type VirtualMachinesReimageResponse = VirtualMachinesReimageHeaders;

/** Optional parameters. */
export interface VirtualMachinesRestartOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the restart operation. */
export type VirtualMachinesRestartResponse = VirtualMachinesRestartHeaders;

/** Optional parameters. */
export interface VirtualMachinesStartOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the start operation. */
export type VirtualMachinesStartResponse = VirtualMachinesStartHeaders;

/** Optional parameters. */
export interface VirtualMachinesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type VirtualMachinesListBySubscriptionNextResponse = VirtualMachineList;

/** Optional parameters. */
export interface VirtualMachinesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type VirtualMachinesListByResourceGroupNextResponse = VirtualMachineList;

/** Optional parameters. */
export interface VolumesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type VolumesListBySubscriptionResponse = VolumeList;

/** Optional parameters. */
export interface VolumesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type VolumesListByResourceGroupResponse = VolumeList;

/** Optional parameters. */
export interface VolumesGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type VolumesGetResponse = Volume;

/** Optional parameters. */
export interface VolumesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type VolumesCreateOrUpdateResponse = Volume;

/** Optional parameters. */
export interface VolumesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VolumesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** The request body. */
  volumeUpdateParameters?: VolumePatchParameters;
}

/** Contains response data for the update operation. */
export type VolumesUpdateResponse = Volume;

/** Optional parameters. */
export interface VolumesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type VolumesListBySubscriptionNextResponse = VolumeList;

/** Optional parameters. */
export interface VolumesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type VolumesListByResourceGroupNextResponse = VolumeList;

/** Optional parameters. */
export interface BareMetalMachineKeySetsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type BareMetalMachineKeySetsListByResourceGroupResponse = BareMetalMachineKeySetList;

/** Optional parameters. */
export interface BareMetalMachineKeySetsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type BareMetalMachineKeySetsGetResponse = BareMetalMachineKeySet;

/** Optional parameters. */
export interface BareMetalMachineKeySetsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type BareMetalMachineKeySetsCreateOrUpdateResponse = BareMetalMachineKeySet;

/** Optional parameters. */
export interface BareMetalMachineKeySetsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface BareMetalMachineKeySetsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** The request body. */
  bareMetalMachineKeySetUpdateParameters?: BareMetalMachineKeySetPatchParameters;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type BareMetalMachineKeySetsUpdateResponse = BareMetalMachineKeySet;

/** Optional parameters. */
export interface BareMetalMachineKeySetsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type BareMetalMachineKeySetsListByResourceGroupNextResponse = BareMetalMachineKeySetList;

/** Optional parameters. */
export interface BmcKeySetsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type BmcKeySetsListByResourceGroupResponse = BmcKeySetList;

/** Optional parameters. */
export interface BmcKeySetsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type BmcKeySetsGetResponse = BmcKeySet;

/** Optional parameters. */
export interface BmcKeySetsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type BmcKeySetsCreateOrUpdateResponse = BmcKeySet;

/** Optional parameters. */
export interface BmcKeySetsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface BmcKeySetsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** The request body. */
  bmcKeySetUpdateParameters?: BmcKeySetPatchParameters;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type BmcKeySetsUpdateResponse = BmcKeySet;

/** Optional parameters. */
export interface BmcKeySetsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type BmcKeySetsListByResourceGroupNextResponse = BmcKeySetList;

/** Optional parameters. */
export interface MetricsConfigurationsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type MetricsConfigurationsListByResourceGroupResponse = ClusterMetricsConfigurationList;

/** Optional parameters. */
export interface MetricsConfigurationsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type MetricsConfigurationsGetResponse = ClusterMetricsConfiguration;

/** Optional parameters. */
export interface MetricsConfigurationsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type MetricsConfigurationsCreateOrUpdateResponse = ClusterMetricsConfiguration;

/** Optional parameters. */
export interface MetricsConfigurationsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface MetricsConfigurationsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** The request body. */
  metricsConfigurationUpdateParameters?: ClusterMetricsConfigurationPatchParameters;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type MetricsConfigurationsUpdateResponse = ClusterMetricsConfiguration;

/** Optional parameters. */
export interface MetricsConfigurationsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type MetricsConfigurationsListByResourceGroupNextResponse = ClusterMetricsConfigurationList;

/** Optional parameters. */
export interface ConsolesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type ConsolesListByResourceGroupResponse = ConsoleList;

/** Optional parameters. */
export interface ConsolesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ConsolesGetResponse = Console;

/** Optional parameters. */
export interface ConsolesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ConsolesCreateOrUpdateResponse = Console;

/** Optional parameters. */
export interface ConsolesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ConsolesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** The request body. */
  consoleUpdateParameters?: ConsolePatchParameters;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type ConsolesUpdateResponse = Console;

/** Optional parameters. */
export interface ConsolesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type ConsolesListByResourceGroupNextResponse = ConsoleList;

/** Optional parameters. */
export interface NetworkCloudOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
