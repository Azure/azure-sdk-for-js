/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const BareMetalMachineList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BareMetalMachineList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BareMetalMachine"
            }
          }
        }
      }
    }
  }
};

export const ExtendedLocation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtendedLocation",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AdministrativeCredentials: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AdministrativeCredentials",
    modelProperties: {
      password: {
        constraints: {
          MinLength: 1
        },
        serializedName: "password",
        required: true,
        type: {
          name: "String"
        }
      },
      username: {
        constraints: {
          MinLength: 1
        },
        serializedName: "username",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HardwareInventory: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HardwareInventory",
    modelProperties: {
      additionalHostInformation: {
        serializedName: "additionalHostInformation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      interfaces: {
        serializedName: "interfaces",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HardwareInventoryNetworkInterface"
            }
          }
        }
      },
      nics: {
        serializedName: "nics",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Nic"
            }
          }
        }
      }
    }
  }
};

export const HardwareInventoryNetworkInterface: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HardwareInventoryNetworkInterface",
    modelProperties: {
      linkStatus: {
        serializedName: "linkStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      macAddress: {
        serializedName: "macAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkInterfaceId: {
        serializedName: "networkInterfaceId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Nic: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Nic",
    modelProperties: {
      lldpNeighbor: {
        serializedName: "lldpNeighbor",
        type: {
          name: "Composite",
          className: "LldpNeighbor"
        }
      },
      macAddress: {
        serializedName: "macAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LldpNeighbor: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LldpNeighbor",
    modelProperties: {
      portDescription: {
        serializedName: "portDescription",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      portName: {
        serializedName: "portName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemDescription: {
        serializedName: "systemDescription",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemName: {
        serializedName: "systemName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HardwareValidationStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HardwareValidationStatus",
    modelProperties: {
      lastValidationTime: {
        serializedName: "lastValidationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      result: {
        serializedName: "result",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const CloudServicesNetworkList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudServicesNetworkList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CloudServicesNetwork"
            }
          }
        }
      }
    }
  }
};

export const EgressEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EgressEndpoint",
    modelProperties: {
      category: {
        serializedName: "category",
        required: true,
        type: {
          name: "String"
        }
      },
      endpoints: {
        constraints: {
          MinItems: 1
        },
        serializedName: "endpoints",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EndpointDependency"
            }
          }
        }
      }
    }
  }
};

export const EndpointDependency: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EndpointDependency",
    modelProperties: {
      domainName: {
        serializedName: "domainName",
        required: true,
        type: {
          name: "String"
        }
      },
      port: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        serializedName: "port",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ClusterManagerList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterManagerList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClusterManager"
            }
          }
        }
      }
    }
  }
};

export const ClusterAvailableVersion: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterAvailableVersion",
    modelProperties: {
      supportExpiryDate: {
        serializedName: "supportExpiryDate",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetClusterVersion: {
        serializedName: "targetClusterVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedResourceGroupConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedResourceGroupConfiguration",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      name: {
        constraints: {
          MaxLength: 75
        },
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClusterList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Cluster"
            }
          }
        }
      }
    }
  }
};

export const RackDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RackDefinition",
    modelProperties: {
      availabilityZone: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z0-9]{1,10}$")
        },
        serializedName: "availabilityZone",
        type: {
          name: "String"
        }
      },
      bareMetalMachineConfigurationData: {
        serializedName: "bareMetalMachineConfigurationData",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BareMetalMachineConfigurationData"
            }
          }
        }
      },
      networkRackId: {
        serializedName: "networkRackId",
        required: true,
        type: {
          name: "String"
        }
      },
      rackLocation: {
        constraints: {
          MaxLength: 256
        },
        serializedName: "rackLocation",
        type: {
          name: "String"
        }
      },
      rackSerialNumber: {
        constraints: {
          MaxLength: 64,
          MinLength: 1
        },
        serializedName: "rackSerialNumber",
        required: true,
        type: {
          name: "String"
        }
      },
      rackSkuId: {
        serializedName: "rackSkuId",
        required: true,
        type: {
          name: "String"
        }
      },
      storageApplianceConfigurationData: {
        serializedName: "storageApplianceConfigurationData",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageApplianceConfigurationData"
            }
          }
        }
      }
    }
  }
};

export const BareMetalMachineConfigurationData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BareMetalMachineConfigurationData",
    modelProperties: {
      bmcConnectionString: {
        serializedName: "bmcConnectionString",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      bmcCredentials: {
        serializedName: "bmcCredentials",
        type: {
          name: "Composite",
          className: "AdministrativeCredentials"
        }
      },
      bmcMacAddress: {
        constraints: {
          Pattern: new RegExp("^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$")
        },
        serializedName: "bmcMacAddress",
        required: true,
        type: {
          name: "String"
        }
      },
      bootMacAddress: {
        constraints: {
          Pattern: new RegExp("^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$")
        },
        serializedName: "bootMacAddress",
        required: true,
        type: {
          name: "String"
        }
      },
      machineDetails: {
        constraints: {
          MaxLength: 256
        },
        serializedName: "machineDetails",
        type: {
          name: "String"
        }
      },
      machineName: {
        constraints: {
          Pattern: new RegExp("^([a-zA-Z0-9][a-zA-Z0-9]{0,62}[a-zA-Z0-9])$")
        },
        serializedName: "machineName",
        type: {
          name: "String"
        }
      },
      rackSlot: {
        constraints: {
          InclusiveMaximum: 256,
          InclusiveMinimum: 1
        },
        serializedName: "rackSlot",
        required: true,
        type: {
          name: "Number"
        }
      },
      serialNumber: {
        constraints: {
          MaxLength: 64
        },
        serializedName: "serialNumber",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageApplianceConfigurationData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageApplianceConfigurationData",
    modelProperties: {
      adminCredentials: {
        serializedName: "adminCredentials",
        type: {
          name: "Composite",
          className: "AdministrativeCredentials"
        }
      },
      rackSlot: {
        constraints: {
          InclusiveMaximum: 256,
          InclusiveMinimum: 1
        },
        serializedName: "rackSlot",
        required: true,
        type: {
          name: "Number"
        }
      },
      serialNumber: {
        serializedName: "serialNumber",
        required: true,
        type: {
          name: "String"
        }
      },
      storageApplianceName: {
        constraints: {
          Pattern: new RegExp("^([a-zA-Z0-9][a-zA-Z0-9-_]{0,28}[a-zA-Z0-9])$")
        },
        serializedName: "storageApplianceName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClusterAvailableUpgradeVersion: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterAvailableUpgradeVersion",
    modelProperties: {
      controlImpact: {
        serializedName: "controlImpact",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      expectedDuration: {
        serializedName: "expectedDuration",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      impactDescription: {
        serializedName: "impactDescription",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      supportExpiryDate: {
        serializedName: "supportExpiryDate",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetClusterVersion: {
        serializedName: "targetClusterVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      workloadImpact: {
        serializedName: "workloadImpact",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClusterCapacity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterCapacity",
    modelProperties: {
      availableApplianceStorageGB: {
        serializedName: "availableApplianceStorageGB",
        type: {
          name: "Number"
        }
      },
      availableCoreCount: {
        serializedName: "availableCoreCount",
        type: {
          name: "Number"
        }
      },
      availableHostStorageGB: {
        serializedName: "availableHostStorageGB",
        type: {
          name: "Number"
        }
      },
      availableMemoryGB: {
        serializedName: "availableMemoryGB",
        type: {
          name: "Number"
        }
      },
      totalApplianceStorageGB: {
        serializedName: "totalApplianceStorageGB",
        type: {
          name: "Number"
        }
      },
      totalCoreCount: {
        serializedName: "totalCoreCount",
        type: {
          name: "Number"
        }
      },
      totalHostStorageGB: {
        serializedName: "totalHostStorageGB",
        type: {
          name: "Number"
        }
      },
      totalMemoryGB: {
        serializedName: "totalMemoryGB",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ServicePrincipalInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServicePrincipalInformation",
    modelProperties: {
      applicationId: {
        serializedName: "applicationId",
        required: true,
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        required: true,
        type: {
          name: "String"
        }
      },
      principalId: {
        serializedName: "principalId",
        required: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ValidationThreshold: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ValidationThreshold",
    modelProperties: {
      grouping: {
        serializedName: "grouping",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "value",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DefaultCniNetworkList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DefaultCniNetworkList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DefaultCniNetwork"
            }
          }
        }
      }
    }
  }
};

export const CniBgpConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CniBgpConfiguration",
    modelProperties: {
      bgpPeers: {
        serializedName: "bgpPeers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BgpPeer"
            }
          }
        }
      },
      communityAdvertisements: {
        serializedName: "communityAdvertisements",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CommunityAdvertisement"
            }
          }
        }
      },
      nodeMeshPassword: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z0-9]{0,80}$"),
          MaxLength: 80
        },
        serializedName: "nodeMeshPassword",
        type: {
          name: "String"
        }
      },
      serviceExternalPrefixes: {
        serializedName: "serviceExternalPrefixes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      serviceLoadBalancerPrefixes: {
        serializedName: "serviceLoadBalancerPrefixes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const BgpPeer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BgpPeer",
    modelProperties: {
      asNumber: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 0
        },
        serializedName: "asNumber",
        required: true,
        type: {
          name: "Number"
        }
      },
      password: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z0-9]{0,80}$"),
          MaxLength: 80
        },
        serializedName: "password",
        type: {
          name: "String"
        }
      },
      peerIp: {
        serializedName: "peerIp",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CommunityAdvertisement: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommunityAdvertisement",
    modelProperties: {
      communities: {
        serializedName: "communities",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      subnetPrefix: {
        serializedName: "subnetPrefix",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HybridAksClusterList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HybridAksClusterList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HybridAksCluster"
            }
          }
        }
      }
    }
  }
};

export const NodeConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodeConfiguration",
    modelProperties: {
      agentPoolId: {
        serializedName: "agentPoolId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      agentPoolName: {
        serializedName: "agentPoolName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      cpuCores: {
        serializedName: "cpuCores",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      diskSizeGB: {
        serializedName: "diskSizeGB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      memorySizeGB: {
        serializedName: "memorySizeGB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      nodePoolName: {
        serializedName: "nodePoolName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      nodes: {
        serializedName: "nodes",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Node"
            }
          }
        }
      },
      vmCount: {
        serializedName: "vmCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      vmSize: {
        serializedName: "vmSize",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Node: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Node",
    modelProperties: {
      bareMetalMachineId: {
        serializedName: "bareMetalMachineId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      imageId: {
        serializedName: "imageId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkAttachments: {
        serializedName: "networkAttachments",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkAttachment"
            }
          }
        }
      },
      nodeName: {
        serializedName: "nodeName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      powerState: {
        serializedName: "powerState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkAttachment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkAttachment",
    modelProperties: {
      attachedNetworkId: {
        serializedName: "attachedNetworkId",
        required: true,
        type: {
          name: "String"
        }
      },
      defaultGateway: {
        serializedName: "defaultGateway",
        type: {
          name: "String"
        }
      },
      ipAllocationMethod: {
        serializedName: "ipAllocationMethod",
        required: true,
        type: {
          name: "String"
        }
      },
      ipv4Address: {
        serializedName: "ipv4Address",
        type: {
          name: "String"
        }
      },
      ipv6Address: {
        serializedName: "ipv6Address",
        type: {
          name: "String"
        }
      },
      macAddress: {
        serializedName: "macAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkAttachmentName: {
        constraints: {
          MaxLength: 15
        },
        serializedName: "networkAttachmentName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L2NetworkList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L2NetworkList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "L2Network"
            }
          }
        }
      }
    }
  }
};

export const L3NetworkList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L3NetworkList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "L3Network"
            }
          }
        }
      }
    }
  }
};

export const RackSkuList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RackSkuList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RackSku"
            }
          }
        }
      }
    }
  }
};

export const MachineSkuSlot: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MachineSkuSlot",
    modelProperties: {
      rackSlot: {
        serializedName: "rackSlot",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      bootstrapProtocol: {
        serializedName: "properties.bootstrapProtocol",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      cpuCores: {
        serializedName: "properties.cpuCores",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      cpuSockets: {
        serializedName: "properties.cpuSockets",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      disks: {
        serializedName: "properties.disks",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MachineDisk"
            }
          }
        }
      },
      generation: {
        serializedName: "properties.generation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hardwareVersion: {
        serializedName: "properties.hardwareVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      memoryCapacityGB: {
        serializedName: "properties.memoryCapacityGB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      model: {
        serializedName: "properties.model",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkInterfaces: {
        serializedName: "properties.networkInterfaces",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkInterface"
            }
          }
        }
      },
      totalThreads: {
        serializedName: "properties.totalThreads",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      vendor: {
        serializedName: "properties.vendor",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MachineDisk: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MachineDisk",
    modelProperties: {
      capacityGB: {
        serializedName: "capacityGB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      connection: {
        serializedName: "connection",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkInterface: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkInterface",
    modelProperties: {
      address: {
        serializedName: "address",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      deviceConnectionType: {
        serializedName: "deviceConnectionType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      model: {
        serializedName: "model",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      physicalSlot: {
        serializedName: "physicalSlot",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      portCount: {
        serializedName: "portCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      portSpeed: {
        serializedName: "portSpeed",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      vendor: {
        serializedName: "vendor",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageApplianceSkuSlot: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageApplianceSkuSlot",
    modelProperties: {
      rackSlot: {
        serializedName: "rackSlot",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      capacityGB: {
        serializedName: "properties.capacityGB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      model: {
        serializedName: "properties.model",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RackList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RackList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Rack"
            }
          }
        }
      }
    }
  }
};

export const StorageApplianceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageApplianceList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageAppliance"
            }
          }
        }
      }
    }
  }
};

export const TrunkedNetworkList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrunkedNetworkList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TrunkedNetwork"
            }
          }
        }
      }
    }
  }
};

export const VirtualMachineList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualMachine"
            }
          }
        }
      }
    }
  }
};

export const VirtualMachinePlacementHint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachinePlacementHint",
    modelProperties: {
      hintType: {
        serializedName: "hintType",
        required: true,
        type: {
          name: "String"
        }
      },
      resourceId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "resourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      schedulingExecution: {
        serializedName: "schedulingExecution",
        required: true,
        type: {
          name: "String"
        }
      },
      scope: {
        serializedName: "scope",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SshPublicKey: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SshPublicKey",
    modelProperties: {
      keyData: {
        constraints: {
          MinLength: 1
        },
        serializedName: "keyData",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageProfile",
    modelProperties: {
      osDisk: {
        serializedName: "osDisk",
        type: {
          name: "Composite",
          className: "OsDisk"
        }
      },
      volumeAttachments: {
        serializedName: "volumeAttachments",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const OsDisk: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OsDisk",
    modelProperties: {
      createOption: {
        defaultValue: "Ephemeral",
        serializedName: "createOption",
        type: {
          name: "String"
        }
      },
      deleteOption: {
        defaultValue: "Delete",
        serializedName: "deleteOption",
        type: {
          name: "String"
        }
      },
      diskSizeGB: {
        serializedName: "diskSizeGB",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ImageRepositoryCredentials: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageRepositoryCredentials",
    modelProperties: {
      password: {
        constraints: {
          MinLength: 1
        },
        serializedName: "password",
        required: true,
        type: {
          name: "String"
        }
      },
      registryUrl: {
        serializedName: "registryUrl",
        required: true,
        type: {
          name: "String"
        }
      },
      username: {
        constraints: {
          MinLength: 1
        },
        serializedName: "username",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VolumeList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VolumeList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Volume"
            }
          }
        }
      }
    }
  }
};

export const BareMetalMachinePatchParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BareMetalMachinePatchParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      machineDetails: {
        constraints: {
          MaxLength: 256
        },
        serializedName: "properties.machineDetails",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BareMetalMachineCordonParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BareMetalMachineCordonParameters",
    modelProperties: {
      evacuate: {
        defaultValue: "False",
        serializedName: "evacuate",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BareMetalMachinePowerOffParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BareMetalMachinePowerOffParameters",
    modelProperties: {
      skipShutdown: {
        defaultValue: "False",
        serializedName: "skipShutdown",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BareMetalMachineReplaceParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BareMetalMachineReplaceParameters",
    modelProperties: {
      bmcCredentials: {
        serializedName: "bmcCredentials",
        type: {
          name: "Composite",
          className: "AdministrativeCredentials"
        }
      },
      bmcMacAddress: {
        constraints: {
          Pattern: new RegExp("^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$")
        },
        serializedName: "bmcMacAddress",
        type: {
          name: "String"
        }
      },
      bootMacAddress: {
        constraints: {
          Pattern: new RegExp("^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$")
        },
        serializedName: "bootMacAddress",
        type: {
          name: "String"
        }
      },
      machineName: {
        constraints: {
          Pattern: new RegExp("^([a-zA-Z0-9][a-zA-Z0-9]{0,62}[a-zA-Z0-9])$")
        },
        serializedName: "machineName",
        type: {
          name: "String"
        }
      },
      serialNumber: {
        constraints: {
          MaxLength: 64,
          MinLength: 1
        },
        serializedName: "serialNumber",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BareMetalMachineRunCommandParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BareMetalMachineRunCommandParameters",
    modelProperties: {
      arguments: {
        serializedName: "arguments",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      limitTimeSeconds: {
        constraints: {
          InclusiveMaximum: 14400,
          InclusiveMinimum: 60
        },
        serializedName: "limitTimeSeconds",
        required: true,
        type: {
          name: "Number"
        }
      },
      script: {
        serializedName: "script",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BareMetalMachineRunDataExtractsParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BareMetalMachineRunDataExtractsParameters",
    modelProperties: {
      commands: {
        constraints: {
          MinItems: 1
        },
        serializedName: "commands",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BareMetalMachineCommandSpecification"
            }
          }
        }
      },
      limitTimeSeconds: {
        constraints: {
          InclusiveMaximum: 14400,
          InclusiveMinimum: 60
        },
        serializedName: "limitTimeSeconds",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BareMetalMachineCommandSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BareMetalMachineCommandSpecification",
    modelProperties: {
      arguments: {
        serializedName: "arguments",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      command: {
        serializedName: "command",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BareMetalMachineRunReadCommandsParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BareMetalMachineRunReadCommandsParameters",
    modelProperties: {
      commands: {
        constraints: {
          MinItems: 1
        },
        serializedName: "commands",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BareMetalMachineCommandSpecification"
            }
          }
        }
      },
      limitTimeSeconds: {
        constraints: {
          InclusiveMaximum: 14400,
          InclusiveMinimum: 60
        },
        serializedName: "limitTimeSeconds",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BareMetalMachineValidateHardwareParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BareMetalMachineValidateHardwareParameters",
    modelProperties: {
      validationCategory: {
        serializedName: "validationCategory",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudServicesNetworkPatchParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudServicesNetworkPatchParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      additionalEgressEndpoints: {
        serializedName: "properties.additionalEgressEndpoints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EgressEndpoint"
            }
          }
        }
      },
      enableDefaultEgressEndpoints: {
        serializedName: "properties.enableDefaultEgressEndpoints",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClusterManagerPatchParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterManagerPatchParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const ClusterPatchParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterPatchParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      aggregatorOrSingleRackDefinition: {
        serializedName: "properties.aggregatorOrSingleRackDefinition",
        type: {
          name: "Composite",
          className: "RackDefinition"
        }
      },
      clusterLocation: {
        serializedName: "properties.clusterLocation",
        type: {
          name: "String"
        }
      },
      clusterServicePrincipal: {
        serializedName: "properties.clusterServicePrincipal",
        type: {
          name: "Composite",
          className: "ServicePrincipalInformation"
        }
      },
      computeDeploymentThreshold: {
        serializedName: "properties.computeDeploymentThreshold",
        type: {
          name: "Composite",
          className: "ValidationThreshold"
        }
      },
      computeRackDefinitions: {
        serializedName: "properties.computeRackDefinitions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RackDefinition"
            }
          }
        }
      }
    }
  }
};

export const BareMetalMachineKeySetList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BareMetalMachineKeySetList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BareMetalMachineKeySet"
            }
          }
        }
      }
    }
  }
};

export const KeySetUser: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeySetUser",
    modelProperties: {
      azureUserName: {
        serializedName: "azureUserName",
        required: true,
        type: {
          name: "String"
        }
      },
      description: {
        constraints: {
          MaxLength: 256
        },
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      sshPublicKey: {
        serializedName: "sshPublicKey",
        type: {
          name: "Composite",
          className: "SshPublicKey"
        }
      }
    }
  }
};

export const KeySetUserStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeySetUserStatus",
    modelProperties: {
      azureUserName: {
        serializedName: "azureUserName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      statusMessage: {
        constraints: {
          MaxLength: 256
        },
        serializedName: "statusMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BareMetalMachineKeySetPatchParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BareMetalMachineKeySetPatchParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      expiration: {
        serializedName: "properties.expiration",
        type: {
          name: "DateTime"
        }
      },
      jumpHostsAllowed: {
        serializedName: "properties.jumpHostsAllowed",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      userList: {
        serializedName: "properties.userList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "KeySetUser"
            }
          }
        }
      }
    }
  }
};

export const BmcKeySetList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BmcKeySetList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BmcKeySet"
            }
          }
        }
      }
    }
  }
};

export const BmcKeySetPatchParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BmcKeySetPatchParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      expiration: {
        serializedName: "properties.expiration",
        type: {
          name: "DateTime"
        }
      },
      userList: {
        serializedName: "properties.userList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "KeySetUser"
            }
          }
        }
      }
    }
  }
};

export const ClusterDeployParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterDeployParameters",
    modelProperties: {
      skipValidationsForMachines: {
        serializedName: "skipValidationsForMachines",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ClusterMetricsConfigurationList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterMetricsConfigurationList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClusterMetricsConfiguration"
            }
          }
        }
      }
    }
  }
};

export const ClusterMetricsConfigurationPatchParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterMetricsConfigurationPatchParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      collectionInterval: {
        constraints: {
          InclusiveMaximum: 1440,
          InclusiveMinimum: 1
        },
        serializedName: "properties.collectionInterval",
        type: {
          name: "Number"
        }
      },
      enabledMetrics: {
        serializedName: "properties.enabledMetrics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ClusterUpdateVersionParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterUpdateVersionParameters",
    modelProperties: {
      targetClusterVersion: {
        serializedName: "targetClusterVersion",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DefaultCniNetworkPatchParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DefaultCniNetworkPatchParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const HybridAksClusterPatchParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HybridAksClusterPatchParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const HybridAksClusterRestartNodeParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HybridAksClusterRestartNodeParameters",
    modelProperties: {
      nodeName: {
        serializedName: "nodeName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L2NetworkPatchParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L2NetworkPatchParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const L3NetworkPatchParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L3NetworkPatchParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const RackPatchParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RackPatchParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      rackLocation: {
        constraints: {
          MaxLength: 256
        },
        serializedName: "properties.rackLocation",
        type: {
          name: "String"
        }
      },
      rackSerialNumber: {
        constraints: {
          MaxLength: 64,
          MinLength: 1
        },
        serializedName: "properties.rackSerialNumber",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAppliancePatchParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAppliancePatchParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      serialNumber: {
        serializedName: "properties.serialNumber",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageApplianceEnableRemoteVendorManagementParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageApplianceEnableRemoteVendorManagementParameters",
    modelProperties: {
      supportEndpoints: {
        serializedName: "supportEndpoints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const StorageApplianceRunReadCommandsParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageApplianceRunReadCommandsParameters",
    modelProperties: {
      commands: {
        constraints: {
          MinItems: 1
        },
        serializedName: "commands",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageApplianceCommandSpecification"
            }
          }
        }
      },
      limitTimeSeconds: {
        constraints: {
          InclusiveMaximum: 14400,
          InclusiveMinimum: 60
        },
        serializedName: "limitTimeSeconds",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const StorageApplianceCommandSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageApplianceCommandSpecification",
    modelProperties: {
      arguments: {
        serializedName: "arguments",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      command: {
        serializedName: "command",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageApplianceValidateHardwareParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageApplianceValidateHardwareParameters",
    modelProperties: {
      validationCategory: {
        serializedName: "validationCategory",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrunkedNetworkPatchParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrunkedNetworkPatchParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const VirtualMachinePatchParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachinePatchParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      vmImageRepositoryCredentials: {
        serializedName: "properties.vmImageRepositoryCredentials",
        type: {
          name: "Composite",
          className: "ImageRepositoryCredentials"
        }
      }
    }
  }
};

export const VirtualMachineVolumeParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineVolumeParameters",
    modelProperties: {
      volumeId: {
        serializedName: "volumeId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConsoleList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConsoleList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Console"
            }
          }
        }
      }
    }
  }
};

export const ConsolePatchParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConsolePatchParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "String"
        }
      },
      expiration: {
        serializedName: "properties.expiration",
        type: {
          name: "DateTime"
        }
      },
      sshPublicKey: {
        serializedName: "properties.sshPublicKey",
        type: {
          name: "Composite",
          className: "SshPublicKey"
        }
      }
    }
  }
};

export const VirtualMachinePowerOffParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachinePowerOffParameters",
    modelProperties: {
      skipShutdown: {
        defaultValue: "False",
        serializedName: "skipShutdown",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VolumePatchParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VolumePatchParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const TagsParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TagsParameter",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RackSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RackSku",
    modelProperties: {
      ...Resource.type.modelProperties,
      computeMachines: {
        serializedName: "properties.computeMachines",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MachineSkuSlot"
            }
          }
        }
      },
      controllerMachines: {
        serializedName: "properties.controllerMachines",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MachineSkuSlot"
            }
          }
        }
      },
      description: {
        serializedName: "properties.description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      maxClusterSlots: {
        serializedName: "properties.maxClusterSlots",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      rackType: {
        serializedName: "properties.rackType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      storageAppliances: {
        serializedName: "properties.storageAppliances",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageApplianceSkuSlot"
            }
          }
        }
      },
      supportedRackSkuIds: {
        serializedName: "properties.supportedRackSkuIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const BareMetalMachine: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BareMetalMachine",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      bmcConnectionString: {
        serializedName: "properties.bmcConnectionString",
        required: true,
        type: {
          name: "String"
        }
      },
      bmcCredentials: {
        serializedName: "properties.bmcCredentials",
        type: {
          name: "Composite",
          className: "AdministrativeCredentials"
        }
      },
      bmcMacAddress: {
        constraints: {
          Pattern: new RegExp("^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$")
        },
        serializedName: "properties.bmcMacAddress",
        required: true,
        type: {
          name: "String"
        }
      },
      bootMacAddress: {
        constraints: {
          Pattern: new RegExp("^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$")
        },
        serializedName: "properties.bootMacAddress",
        required: true,
        type: {
          name: "String"
        }
      },
      clusterId: {
        serializedName: "properties.clusterId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      cordonStatus: {
        serializedName: "properties.cordonStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      detailedStatus: {
        serializedName: "properties.detailedStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      detailedStatusMessage: {
        serializedName: "properties.detailedStatusMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hardwareInventory: {
        serializedName: "properties.hardwareInventory",
        type: {
          name: "Composite",
          className: "HardwareInventory"
        }
      },
      hardwareValidationStatus: {
        serializedName: "properties.hardwareValidationStatus",
        type: {
          name: "Composite",
          className: "HardwareValidationStatus"
        }
      },
      hybridAksClustersAssociatedIds: {
        serializedName: "properties.hybridAksClustersAssociatedIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      kubernetesNodeName: {
        serializedName: "properties.kubernetesNodeName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      kubernetesVersion: {
        serializedName: "properties.kubernetesVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      machineDetails: {
        constraints: {
          MaxLength: 256
        },
        serializedName: "properties.machineDetails",
        required: true,
        type: {
          name: "String"
        }
      },
      machineName: {
        constraints: {
          Pattern: new RegExp("^([a-zA-Z0-9][a-zA-Z0-9]{0,62}[a-zA-Z0-9])$")
        },
        serializedName: "properties.machineName",
        required: true,
        type: {
          name: "String"
        }
      },
      machineSkuId: {
        serializedName: "properties.machineSkuId",
        required: true,
        type: {
          name: "String"
        }
      },
      oamIpv4Address: {
        serializedName: "properties.oamIpv4Address",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      oamIpv6Address: {
        serializedName: "properties.oamIpv6Address",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      osImage: {
        serializedName: "properties.osImage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      powerState: {
        serializedName: "properties.powerState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      rackId: {
        serializedName: "properties.rackId",
        required: true,
        type: {
          name: "String"
        }
      },
      rackSlot: {
        constraints: {
          InclusiveMaximum: 256,
          InclusiveMinimum: 1
        },
        serializedName: "properties.rackSlot",
        required: true,
        type: {
          name: "Number"
        }
      },
      readyState: {
        serializedName: "properties.readyState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serialNumber: {
        constraints: {
          MaxLength: 64,
          MinLength: 1
        },
        serializedName: "properties.serialNumber",
        required: true,
        type: {
          name: "String"
        }
      },
      serviceTag: {
        serializedName: "properties.serviceTag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      virtualMachinesAssociatedIds: {
        serializedName: "properties.virtualMachinesAssociatedIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const CloudServicesNetwork: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudServicesNetwork",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      additionalEgressEndpoints: {
        serializedName: "properties.additionalEgressEndpoints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EgressEndpoint"
            }
          }
        }
      },
      clusterId: {
        serializedName: "properties.clusterId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      detailedStatus: {
        serializedName: "properties.detailedStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      detailedStatusMessage: {
        serializedName: "properties.detailedStatusMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      enableDefaultEgressEndpoints: {
        serializedName: "properties.enableDefaultEgressEndpoints",
        type: {
          name: "String"
        }
      },
      enabledEgressEndpoints: {
        serializedName: "properties.enabledEgressEndpoints",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EgressEndpoint"
            }
          }
        }
      },
      hybridAksClustersAssociatedIds: {
        serializedName: "properties.hybridAksClustersAssociatedIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      interfaceName: {
        serializedName: "properties.interfaceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      virtualMachinesAssociatedIds: {
        serializedName: "properties.virtualMachinesAssociatedIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ClusterManager: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterManager",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      analyticsWorkspaceId: {
        serializedName: "properties.analyticsWorkspaceId",
        type: {
          name: "String"
        }
      },
      availabilityZones: {
        serializedName: "properties.availabilityZones",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      clusterVersions: {
        serializedName: "properties.clusterVersions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClusterAvailableVersion"
            }
          }
        }
      },
      detailedStatus: {
        serializedName: "properties.detailedStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      detailedStatusMessage: {
        serializedName: "properties.detailedStatusMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fabricControllerId: {
        serializedName: "properties.fabricControllerId",
        required: true,
        type: {
          name: "String"
        }
      },
      managedResourceGroupConfiguration: {
        serializedName: "properties.managedResourceGroupConfiguration",
        type: {
          name: "Composite",
          className: "ManagedResourceGroupConfiguration"
        }
      },
      managerExtendedLocation: {
        serializedName: "properties.managerExtendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vmSize: {
        serializedName: "properties.vmSize",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Cluster: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Cluster",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      aggregatorOrSingleRackDefinition: {
        serializedName: "properties.aggregatorOrSingleRackDefinition",
        type: {
          name: "Composite",
          className: "RackDefinition"
        }
      },
      analyticsWorkspaceId: {
        serializedName: "properties.analyticsWorkspaceId",
        required: true,
        type: {
          name: "String"
        }
      },
      availableUpgradeVersions: {
        serializedName: "properties.availableUpgradeVersions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClusterAvailableUpgradeVersion"
            }
          }
        }
      },
      clusterCapacity: {
        serializedName: "properties.clusterCapacity",
        type: {
          name: "Composite",
          className: "ClusterCapacity"
        }
      },
      clusterConnectionStatus: {
        serializedName: "properties.clusterConnectionStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      clusterExtendedLocation: {
        serializedName: "properties.clusterExtendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      clusterLocation: {
        constraints: {
          MaxLength: 256
        },
        serializedName: "properties.clusterLocation",
        type: {
          name: "String"
        }
      },
      clusterManagerConnectionStatus: {
        serializedName: "properties.clusterManagerConnectionStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      clusterManagerId: {
        serializedName: "properties.clusterManagerId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      clusterServicePrincipal: {
        serializedName: "properties.clusterServicePrincipal",
        type: {
          name: "Composite",
          className: "ServicePrincipalInformation"
        }
      },
      clusterType: {
        serializedName: "properties.clusterType",
        required: true,
        type: {
          name: "String"
        }
      },
      clusterVersion: {
        serializedName: "properties.clusterVersion",
        required: true,
        type: {
          name: "String"
        }
      },
      computeDeploymentThreshold: {
        serializedName: "properties.computeDeploymentThreshold",
        type: {
          name: "Composite",
          className: "ValidationThreshold"
        }
      },
      computeRackDefinitions: {
        serializedName: "properties.computeRackDefinitions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RackDefinition"
            }
          }
        }
      },
      detailedStatus: {
        serializedName: "properties.detailedStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      detailedStatusMessage: {
        serializedName: "properties.detailedStatusMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hybridAksExtendedLocation: {
        serializedName: "properties.hybridAksExtendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      managedResourceGroupConfiguration: {
        serializedName: "properties.managedResourceGroupConfiguration",
        type: {
          name: "Composite",
          className: "ManagedResourceGroupConfiguration"
        }
      },
      manualActionCount: {
        serializedName: "properties.manualActionCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      networkFabricId: {
        serializedName: "properties.networkFabricId",
        required: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      supportExpiryDate: {
        serializedName: "properties.supportExpiryDate",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      workloadResourceIds: {
        serializedName: "properties.workloadResourceIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DefaultCniNetwork: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DefaultCniNetwork",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      clusterId: {
        serializedName: "properties.clusterId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      cniAsNumber: {
        serializedName: "properties.cniAsNumber",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      cniBgpConfiguration: {
        serializedName: "properties.cniBgpConfiguration",
        type: {
          name: "Composite",
          className: "CniBgpConfiguration"
        }
      },
      detailedStatus: {
        serializedName: "properties.detailedStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      detailedStatusMessage: {
        serializedName: "properties.detailedStatusMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fabricBgpPeers: {
        serializedName: "properties.fabricBgpPeers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BgpPeer"
            }
          }
        }
      },
      hybridAksClustersAssociatedIds: {
        serializedName: "properties.hybridAksClustersAssociatedIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      interfaceName: {
        serializedName: "properties.interfaceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipAllocationType: {
        serializedName: "properties.ipAllocationType",
        type: {
          name: "String"
        }
      },
      ipv4ConnectedPrefix: {
        serializedName: "properties.ipv4ConnectedPrefix",
        type: {
          name: "String"
        }
      },
      ipv6ConnectedPrefix: {
        serializedName: "properties.ipv6ConnectedPrefix",
        type: {
          name: "String"
        }
      },
      l3IsolationDomainId: {
        serializedName: "properties.l3IsolationDomainId",
        required: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vlan: {
        constraints: {
          InclusiveMaximum: 4094,
          InclusiveMinimum: 1
        },
        serializedName: "properties.vlan",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const HybridAksCluster: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HybridAksCluster",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      associatedNetworkIds: {
        serializedName: "properties.associatedNetworkIds",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      cloudServicesNetworkId: {
        serializedName: "properties.cloudServicesNetworkId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      clusterId: {
        serializedName: "properties.clusterId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      controlPlaneCount: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "properties.controlPlaneCount",
        required: true,
        type: {
          name: "Number"
        }
      },
      controlPlaneNodes: {
        serializedName: "properties.controlPlaneNodes",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NodeConfiguration"
            }
          }
        }
      },
      defaultCniNetworkId: {
        serializedName: "properties.defaultCniNetworkId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      detailedStatus: {
        serializedName: "properties.detailedStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      detailedStatusMessage: {
        serializedName: "properties.detailedStatusMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hybridAksProvisionedClusterId: {
        serializedName: "properties.hybridAksProvisionedClusterId",
        required: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      volumes: {
        serializedName: "properties.volumes",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      workerCount: {
        serializedName: "properties.workerCount",
        required: true,
        type: {
          name: "Number"
        }
      },
      workerNodes: {
        serializedName: "properties.workerNodes",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NodeConfiguration"
            }
          }
        }
      }
    }
  }
};

export const L2Network: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L2Network",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      clusterId: {
        serializedName: "properties.clusterId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      detailedStatus: {
        serializedName: "properties.detailedStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      detailedStatusMessage: {
        serializedName: "properties.detailedStatusMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hybridAksClustersAssociatedIds: {
        serializedName: "properties.hybridAksClustersAssociatedIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      hybridAksPluginType: {
        serializedName: "properties.hybridAksPluginType",
        type: {
          name: "String"
        }
      },
      interfaceName: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z0-9@._-]*$"),
          MaxLength: 12
        },
        serializedName: "properties.interfaceName",
        type: {
          name: "String"
        }
      },
      l2IsolationDomainId: {
        serializedName: "properties.l2IsolationDomainId",
        required: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      virtualMachinesAssociatedIds: {
        serializedName: "properties.virtualMachinesAssociatedIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const L3Network: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L3Network",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      clusterId: {
        serializedName: "properties.clusterId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      detailedStatus: {
        serializedName: "properties.detailedStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      detailedStatusMessage: {
        serializedName: "properties.detailedStatusMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hybridAksClustersAssociatedIds: {
        serializedName: "properties.hybridAksClustersAssociatedIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      hybridAksIpamEnabled: {
        defaultValue: "True",
        serializedName: "properties.hybridAksIpamEnabled",
        type: {
          name: "String"
        }
      },
      hybridAksPluginType: {
        serializedName: "properties.hybridAksPluginType",
        type: {
          name: "String"
        }
      },
      interfaceName: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z0-9@._-]*$"),
          MaxLength: 12
        },
        serializedName: "properties.interfaceName",
        type: {
          name: "String"
        }
      },
      ipAllocationType: {
        serializedName: "properties.ipAllocationType",
        type: {
          name: "String"
        }
      },
      ipv4ConnectedPrefix: {
        serializedName: "properties.ipv4ConnectedPrefix",
        type: {
          name: "String"
        }
      },
      ipv6ConnectedPrefix: {
        serializedName: "properties.ipv6ConnectedPrefix",
        type: {
          name: "String"
        }
      },
      l3IsolationDomainId: {
        serializedName: "properties.l3IsolationDomainId",
        required: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      virtualMachinesAssociatedIds: {
        serializedName: "properties.virtualMachinesAssociatedIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      vlan: {
        serializedName: "properties.vlan",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Rack: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Rack",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      availabilityZone: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z0-9]{1,10}$")
        },
        serializedName: "properties.availabilityZone",
        required: true,
        type: {
          name: "String"
        }
      },
      clusterId: {
        serializedName: "properties.clusterId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      detailedStatus: {
        serializedName: "properties.detailedStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      detailedStatusMessage: {
        serializedName: "properties.detailedStatusMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      rackLocation: {
        constraints: {
          MaxLength: 256
        },
        serializedName: "properties.rackLocation",
        required: true,
        type: {
          name: "String"
        }
      },
      rackSerialNumber: {
        constraints: {
          MaxLength: 64,
          MinLength: 1
        },
        serializedName: "properties.rackSerialNumber",
        required: true,
        type: {
          name: "String"
        }
      },
      rackSkuId: {
        serializedName: "properties.rackSkuId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAppliance: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAppliance",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      administratorCredentials: {
        serializedName: "properties.administratorCredentials",
        type: {
          name: "Composite",
          className: "AdministrativeCredentials"
        }
      },
      capacity: {
        serializedName: "properties.capacity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      capacityUsed: {
        serializedName: "properties.capacityUsed",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      clusterId: {
        serializedName: "properties.clusterId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      detailedStatus: {
        serializedName: "properties.detailedStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      detailedStatusMessage: {
        serializedName: "properties.detailedStatusMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      managementIpv4Address: {
        serializedName: "properties.managementIpv4Address",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      rackId: {
        serializedName: "properties.rackId",
        required: true,
        type: {
          name: "String"
        }
      },
      rackSlot: {
        constraints: {
          InclusiveMaximum: 256,
          InclusiveMinimum: 1
        },
        serializedName: "properties.rackSlot",
        required: true,
        type: {
          name: "Number"
        }
      },
      remoteVendorManagementFeature: {
        serializedName: "properties.remoteVendorManagementFeature",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      remoteVendorManagementStatus: {
        serializedName: "properties.remoteVendorManagementStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serialNumber: {
        serializedName: "properties.serialNumber",
        required: true,
        type: {
          name: "String"
        }
      },
      storageApplianceSkuId: {
        serializedName: "properties.storageApplianceSkuId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrunkedNetwork: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrunkedNetwork",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      clusterId: {
        serializedName: "properties.clusterId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      detailedStatus: {
        serializedName: "properties.detailedStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      detailedStatusMessage: {
        serializedName: "properties.detailedStatusMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hybridAksClustersAssociatedIds: {
        serializedName: "properties.hybridAksClustersAssociatedIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      hybridAksPluginType: {
        serializedName: "properties.hybridAksPluginType",
        type: {
          name: "String"
        }
      },
      interfaceName: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z0-9@._-]*$"),
          MaxLength: 12
        },
        serializedName: "properties.interfaceName",
        type: {
          name: "String"
        }
      },
      isolationDomainIds: {
        constraints: {
          MinItems: 1
        },
        serializedName: "properties.isolationDomainIds",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      virtualMachinesAssociatedIds: {
        serializedName: "properties.virtualMachinesAssociatedIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      vlans: {
        constraints: {
          MinItems: 1
        },
        serializedName: "properties.vlans",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    }
  }
};

export const VirtualMachine: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachine",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      adminUsername: {
        constraints: {
          Pattern: new RegExp("^[a-z_][a-z0-9_]{0,31}$"),
          MaxLength: 32,
          MinLength: 1
        },
        serializedName: "properties.adminUsername",
        required: true,
        type: {
          name: "String"
        }
      },
      bareMetalMachineId: {
        serializedName: "properties.bareMetalMachineId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      bootMethod: {
        defaultValue: "UEFI",
        serializedName: "properties.bootMethod",
        type: {
          name: "String"
        }
      },
      cloudServicesNetworkAttachment: {
        serializedName: "properties.cloudServicesNetworkAttachment",
        type: {
          name: "Composite",
          className: "NetworkAttachment"
        }
      },
      clusterId: {
        serializedName: "properties.clusterId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      cpuCores: {
        constraints: {
          InclusiveMinimum: 2
        },
        serializedName: "properties.cpuCores",
        required: true,
        type: {
          name: "Number"
        }
      },
      detailedStatus: {
        serializedName: "properties.detailedStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      detailedStatusMessage: {
        serializedName: "properties.detailedStatusMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isolateEmulatorThread: {
        defaultValue: "True",
        serializedName: "properties.isolateEmulatorThread",
        type: {
          name: "String"
        }
      },
      memorySizeGB: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "properties.memorySizeGB",
        required: true,
        type: {
          name: "Number"
        }
      },
      networkAttachments: {
        serializedName: "properties.networkAttachments",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkAttachment"
            }
          }
        }
      },
      networkData: {
        serializedName: "properties.networkData",
        type: {
          name: "String"
        }
      },
      placementHints: {
        serializedName: "properties.placementHints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualMachinePlacementHint"
            }
          }
        }
      },
      powerState: {
        serializedName: "properties.powerState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sshPublicKeys: {
        serializedName: "properties.sshPublicKeys",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SshPublicKey"
            }
          }
        }
      },
      storageProfile: {
        serializedName: "properties.storageProfile",
        type: {
          name: "Composite",
          className: "StorageProfile"
        }
      },
      userData: {
        serializedName: "properties.userData",
        type: {
          name: "String"
        }
      },
      virtioInterface: {
        defaultValue: "Modern",
        serializedName: "properties.virtioInterface",
        type: {
          name: "String"
        }
      },
      vmDeviceModel: {
        defaultValue: "T2",
        serializedName: "properties.vmDeviceModel",
        type: {
          name: "String"
        }
      },
      vmImage: {
        serializedName: "properties.vmImage",
        required: true,
        type: {
          name: "String"
        }
      },
      vmImageRepositoryCredentials: {
        serializedName: "properties.vmImageRepositoryCredentials",
        type: {
          name: "Composite",
          className: "ImageRepositoryCredentials"
        }
      },
      volumes: {
        serializedName: "properties.volumes",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const Volume: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Volume",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      attachedTo: {
        serializedName: "properties.attachedTo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      detailedStatus: {
        serializedName: "properties.detailedStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      detailedStatusMessage: {
        serializedName: "properties.detailedStatusMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serialNumber: {
        serializedName: "properties.serialNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sizeMiB: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "properties.sizeMiB",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BareMetalMachineKeySet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BareMetalMachineKeySet",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      azureGroupId: {
        serializedName: "properties.azureGroupId",
        required: true,
        type: {
          name: "String"
        }
      },
      detailedStatus: {
        serializedName: "properties.detailedStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      detailedStatusMessage: {
        serializedName: "properties.detailedStatusMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      expiration: {
        serializedName: "properties.expiration",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      jumpHostsAllowed: {
        serializedName: "properties.jumpHostsAllowed",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      lastValidation: {
        serializedName: "properties.lastValidation",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      osGroupName: {
        constraints: {
          Pattern: new RegExp("^([A-Za-z]([A-Za-z0-9]*))$"),
          MaxLength: 32
        },
        serializedName: "properties.osGroupName",
        type: {
          name: "String"
        }
      },
      privilegeLevel: {
        serializedName: "properties.privilegeLevel",
        required: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      userList: {
        serializedName: "properties.userList",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "KeySetUser"
            }
          }
        }
      },
      userListStatus: {
        serializedName: "properties.userListStatus",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "KeySetUserStatus"
            }
          }
        }
      }
    }
  }
};

export const BmcKeySet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BmcKeySet",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      azureGroupId: {
        serializedName: "properties.azureGroupId",
        required: true,
        type: {
          name: "String"
        }
      },
      detailedStatus: {
        serializedName: "properties.detailedStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      detailedStatusMessage: {
        serializedName: "properties.detailedStatusMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      expiration: {
        serializedName: "properties.expiration",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      lastValidation: {
        serializedName: "properties.lastValidation",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      privilegeLevel: {
        serializedName: "properties.privilegeLevel",
        required: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      userList: {
        serializedName: "properties.userList",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "KeySetUser"
            }
          }
        }
      },
      userListStatus: {
        serializedName: "properties.userListStatus",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "KeySetUserStatus"
            }
          }
        }
      }
    }
  }
};

export const ClusterMetricsConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterMetricsConfiguration",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      collectionInterval: {
        constraints: {
          InclusiveMaximum: 1440,
          InclusiveMinimum: 1
        },
        serializedName: "properties.collectionInterval",
        required: true,
        type: {
          name: "Number"
        }
      },
      detailedStatus: {
        serializedName: "properties.detailedStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      detailedStatusMessage: {
        serializedName: "properties.detailedStatusMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      disabledMetrics: {
        serializedName: "properties.disabledMetrics",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      enabledMetrics: {
        serializedName: "properties.enabledMetrics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Console: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Console",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      detailedStatus: {
        serializedName: "properties.detailedStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      detailedStatusMessage: {
        serializedName: "properties.detailedStatusMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        required: true,
        type: {
          name: "String"
        }
      },
      expiration: {
        serializedName: "properties.expiration",
        type: {
          name: "DateTime"
        }
      },
      privateLinkServiceId: {
        serializedName: "properties.privateLinkServiceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sshPublicKey: {
        serializedName: "properties.sshPublicKey",
        type: {
          name: "Composite",
          className: "SshPublicKey"
        }
      },
      virtualMachineAccessId: {
        serializedName: "properties.virtualMachineAccessId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BareMetalMachinesCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BareMetalMachinesCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BareMetalMachinesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BareMetalMachinesDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BareMetalMachinesUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BareMetalMachinesUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BareMetalMachinesCordonHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BareMetalMachinesCordonHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BareMetalMachinesPowerOffHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BareMetalMachinesPowerOffHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BareMetalMachinesReimageHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BareMetalMachinesReimageHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BareMetalMachinesReplaceHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BareMetalMachinesReplaceHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BareMetalMachinesRestartHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BareMetalMachinesRestartHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BareMetalMachinesRunCommandHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BareMetalMachinesRunCommandHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BareMetalMachinesRunDataExtractsHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BareMetalMachinesRunDataExtractsHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BareMetalMachinesRunReadCommandsHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BareMetalMachinesRunReadCommandsHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BareMetalMachinesStartHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BareMetalMachinesStartHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BareMetalMachinesUncordonHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BareMetalMachinesUncordonHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BareMetalMachinesValidateHardwareHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BareMetalMachinesValidateHardwareHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudServicesNetworksCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudServicesNetworksCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudServicesNetworksDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudServicesNetworksDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudServicesNetworksUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudServicesNetworksUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClusterManagersCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterManagersCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClusterManagersDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterManagersDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClustersCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClustersCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClustersDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClustersDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClustersUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClustersUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClustersDeployHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClustersDeployHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClustersUpdateVersionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClustersUpdateVersionHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DefaultCniNetworksCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DefaultCniNetworksCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DefaultCniNetworksDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DefaultCniNetworksDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HybridAksClustersCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HybridAksClustersCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HybridAksClustersDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HybridAksClustersDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HybridAksClustersRestartNodeHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HybridAksClustersRestartNodeHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L2NetworksCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L2NetworksCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L2NetworksDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L2NetworksDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L3NetworksCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L3NetworksCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L3NetworksDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L3NetworksDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RacksCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RacksCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RacksDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RacksDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RacksUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RacksUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAppliancesCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAppliancesCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAppliancesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAppliancesDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAppliancesUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAppliancesUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAppliancesDisableRemoteVendorManagementHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAppliancesDisableRemoteVendorManagementHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAppliancesEnableRemoteVendorManagementHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAppliancesEnableRemoteVendorManagementHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAppliancesRunReadCommandsHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAppliancesRunReadCommandsHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAppliancesValidateHardwareHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAppliancesValidateHardwareHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrunkedNetworksCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrunkedNetworksCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrunkedNetworksDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrunkedNetworksDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachinesCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachinesCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachinesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachinesDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachinesUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachinesUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachinesAttachVolumeHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachinesAttachVolumeHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachinesDetachVolumeHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachinesDetachVolumeHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachinesPowerOffHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachinesPowerOffHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachinesReimageHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachinesReimageHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachinesRestartHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachinesRestartHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachinesStartHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachinesStartHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VolumesCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VolumesCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VolumesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VolumesDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BareMetalMachineKeySetsCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BareMetalMachineKeySetsCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BareMetalMachineKeySetsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BareMetalMachineKeySetsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BareMetalMachineKeySetsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BareMetalMachineKeySetsUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BmcKeySetsCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BmcKeySetsCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BmcKeySetsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BmcKeySetsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BmcKeySetsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BmcKeySetsUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricsConfigurationsCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricsConfigurationsCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricsConfigurationsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricsConfigurationsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricsConfigurationsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricsConfigurationsUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConsolesCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConsolesCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConsolesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConsolesDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConsolesUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConsolesUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};
