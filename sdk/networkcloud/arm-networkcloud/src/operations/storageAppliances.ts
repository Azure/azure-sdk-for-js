/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { StorageAppliances } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { NetworkCloud } from "../networkCloud";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  StorageAppliance,
  StorageAppliancesListBySubscriptionNextOptionalParams,
  StorageAppliancesListBySubscriptionOptionalParams,
  StorageAppliancesListBySubscriptionResponse,
  StorageAppliancesListByResourceGroupNextOptionalParams,
  StorageAppliancesListByResourceGroupOptionalParams,
  StorageAppliancesListByResourceGroupResponse,
  StorageAppliancesGetOptionalParams,
  StorageAppliancesGetResponse,
  StorageAppliancesCreateOrUpdateOptionalParams,
  StorageAppliancesCreateOrUpdateResponse,
  StorageAppliancesDeleteOptionalParams,
  StorageAppliancesUpdateOptionalParams,
  StorageAppliancesUpdateResponse,
  StorageAppliancesDisableRemoteVendorManagementOptionalParams,
  StorageAppliancesDisableRemoteVendorManagementResponse,
  StorageAppliancesEnableRemoteVendorManagementOptionalParams,
  StorageAppliancesEnableRemoteVendorManagementResponse,
  StorageAppliancesRunReadCommandsOptionalParams,
  StorageAppliancesRunReadCommandsResponse,
  StorageAppliancesValidateHardwareOptionalParams,
  StorageAppliancesValidateHardwareResponse,
  StorageAppliancesListBySubscriptionNextResponse,
  StorageAppliancesListByResourceGroupNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing StorageAppliances operations. */
export class StorageAppliancesImpl implements StorageAppliances {
  private readonly client: NetworkCloud;

  /**
   * Initialize a new instance of the class StorageAppliances class.
   * @param client Reference to the service client
   */
  constructor(client: NetworkCloud) {
    this.client = client;
  }

  /**
   * Get a list of storage appliances in the provided subscription.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: StorageAppliancesListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<StorageAppliance> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: StorageAppliancesListBySubscriptionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<StorageAppliance[]> {
    let result: StorageAppliancesListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: StorageAppliancesListBySubscriptionOptionalParams
  ): AsyncIterableIterator<StorageAppliance> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Get a list of storage appliances in the provided resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: StorageAppliancesListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<StorageAppliance> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: StorageAppliancesListByResourceGroupOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<StorageAppliance[]> {
    let result: StorageAppliancesListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: StorageAppliancesListByResourceGroupOptionalParams
  ): AsyncIterableIterator<StorageAppliance> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get a list of storage appliances in the provided subscription.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: StorageAppliancesListBySubscriptionOptionalParams
  ): Promise<StorageAppliancesListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * Get a list of storage appliances in the provided resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: StorageAppliancesListByResourceGroupOptionalParams
  ): Promise<StorageAppliancesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Get properties of the provided storage appliance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageApplianceName The name of the storage appliance.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    storageApplianceName: string,
    options?: StorageAppliancesGetOptionalParams
  ): Promise<StorageAppliancesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, storageApplianceName, options },
      getOperationSpec
    );
  }

  /**
   * Create a new storage appliance or update the properties of the existing one.
   * All customer initiated requests will be rejected as the life cycle of this resource is managed by
   * the system.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageApplianceName The name of the storage appliance.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    storageApplianceName: string,
    options?: StorageAppliancesCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<StorageAppliancesCreateOrUpdateResponse>,
      StorageAppliancesCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<StorageAppliancesCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, storageApplianceName, options },
      createOrUpdateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a new storage appliance or update the properties of the existing one.
   * All customer initiated requests will be rejected as the life cycle of this resource is managed by
   * the system.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageApplianceName The name of the storage appliance.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    storageApplianceName: string,
    options?: StorageAppliancesCreateOrUpdateOptionalParams
  ): Promise<StorageAppliancesCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      storageApplianceName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete the provided storage appliance.
   * All customer initiated requests will be rejected as the life cycle of this resource is managed by
   * the system.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageApplianceName The name of the storage appliance.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    storageApplianceName: string,
    options?: StorageAppliancesDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, storageApplianceName, options },
      deleteOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete the provided storage appliance.
   * All customer initiated requests will be rejected as the life cycle of this resource is managed by
   * the system.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageApplianceName The name of the storage appliance.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    storageApplianceName: string,
    options?: StorageAppliancesDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      storageApplianceName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Patch properties of the provided bare metal machine, or update tags associated with the bare metal
   * machine. Properties and tag updates can be done independently.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageApplianceName The name of the storage appliance.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    storageApplianceName: string,
    options?: StorageAppliancesUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<StorageAppliancesUpdateResponse>,
      StorageAppliancesUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<StorageAppliancesUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, storageApplianceName, options },
      updateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Patch properties of the provided bare metal machine, or update tags associated with the bare metal
   * machine. Properties and tag updates can be done independently.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageApplianceName The name of the storage appliance.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    storageApplianceName: string,
    options?: StorageAppliancesUpdateOptionalParams
  ): Promise<StorageAppliancesUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      storageApplianceName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Disable remote vendor management of the provided storage appliance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageApplianceName The name of the storage appliance.
   * @param options The options parameters.
   */
  async beginDisableRemoteVendorManagement(
    resourceGroupName: string,
    storageApplianceName: string,
    options?: StorageAppliancesDisableRemoteVendorManagementOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<
        StorageAppliancesDisableRemoteVendorManagementResponse
      >,
      StorageAppliancesDisableRemoteVendorManagementResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<StorageAppliancesDisableRemoteVendorManagementResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, storageApplianceName, options },
      disableRemoteVendorManagementOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Disable remote vendor management of the provided storage appliance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageApplianceName The name of the storage appliance.
   * @param options The options parameters.
   */
  async beginDisableRemoteVendorManagementAndWait(
    resourceGroupName: string,
    storageApplianceName: string,
    options?: StorageAppliancesDisableRemoteVendorManagementOptionalParams
  ): Promise<StorageAppliancesDisableRemoteVendorManagementResponse> {
    const poller = await this.beginDisableRemoteVendorManagement(
      resourceGroupName,
      storageApplianceName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Enable remote vendor management of the provided storage appliance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageApplianceName The name of the storage appliance.
   * @param options The options parameters.
   */
  async beginEnableRemoteVendorManagement(
    resourceGroupName: string,
    storageApplianceName: string,
    options?: StorageAppliancesEnableRemoteVendorManagementOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<StorageAppliancesEnableRemoteVendorManagementResponse>,
      StorageAppliancesEnableRemoteVendorManagementResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<StorageAppliancesEnableRemoteVendorManagementResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, storageApplianceName, options },
      enableRemoteVendorManagementOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Enable remote vendor management of the provided storage appliance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageApplianceName The name of the storage appliance.
   * @param options The options parameters.
   */
  async beginEnableRemoteVendorManagementAndWait(
    resourceGroupName: string,
    storageApplianceName: string,
    options?: StorageAppliancesEnableRemoteVendorManagementOptionalParams
  ): Promise<StorageAppliancesEnableRemoteVendorManagementResponse> {
    const poller = await this.beginEnableRemoteVendorManagement(
      resourceGroupName,
      storageApplianceName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Run and retrieve output from read only commands on the provided storage appliance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageApplianceName The name of the storage appliance.
   * @param options The options parameters.
   */
  async beginRunReadCommands(
    resourceGroupName: string,
    storageApplianceName: string,
    options?: StorageAppliancesRunReadCommandsOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<StorageAppliancesRunReadCommandsResponse>,
      StorageAppliancesRunReadCommandsResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<StorageAppliancesRunReadCommandsResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, storageApplianceName, options },
      runReadCommandsOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Run and retrieve output from read only commands on the provided storage appliance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageApplianceName The name of the storage appliance.
   * @param options The options parameters.
   */
  async beginRunReadCommandsAndWait(
    resourceGroupName: string,
    storageApplianceName: string,
    options?: StorageAppliancesRunReadCommandsOptionalParams
  ): Promise<StorageAppliancesRunReadCommandsResponse> {
    const poller = await this.beginRunReadCommands(
      resourceGroupName,
      storageApplianceName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Validate the hardware of the provided storage appliance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageApplianceName The name of the storage appliance.
   * @param options The options parameters.
   */
  async beginValidateHardware(
    resourceGroupName: string,
    storageApplianceName: string,
    options?: StorageAppliancesValidateHardwareOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<StorageAppliancesValidateHardwareResponse>,
      StorageAppliancesValidateHardwareResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<StorageAppliancesValidateHardwareResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, storageApplianceName, options },
      validateHardwareOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Validate the hardware of the provided storage appliance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageApplianceName The name of the storage appliance.
   * @param options The options parameters.
   */
  async beginValidateHardwareAndWait(
    resourceGroupName: string,
    storageApplianceName: string,
    options?: StorageAppliancesValidateHardwareOptionalParams
  ): Promise<StorageAppliancesValidateHardwareResponse> {
    const poller = await this.beginValidateHardware(
      resourceGroupName,
      storageApplianceName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: StorageAppliancesListBySubscriptionNextOptionalParams
  ): Promise<StorageAppliancesListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: StorageAppliancesListByResourceGroupNextOptionalParams
  ): Promise<StorageAppliancesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/storageAppliances",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StorageApplianceList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/storageAppliances",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StorageApplianceList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/storageAppliances/{storageApplianceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StorageAppliance
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageApplianceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/storageAppliances/{storageApplianceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.StorageAppliance
    },
    201: {
      bodyMapper: Mappers.StorageAppliance
    },
    202: {
      bodyMapper: Mappers.StorageAppliance
    },
    204: {
      bodyMapper: Mappers.StorageAppliance
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.storageApplianceParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageApplianceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/storageAppliances/{storageApplianceName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageApplianceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/storageAppliances/{storageApplianceName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.StorageAppliance
    },
    201: {
      bodyMapper: Mappers.StorageAppliance
    },
    202: {
      bodyMapper: Mappers.StorageAppliance
    },
    204: {
      bodyMapper: Mappers.StorageAppliance
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.storageApplianceUpdateParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageApplianceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const disableRemoteVendorManagementOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/storageAppliances/{storageApplianceName}/disableRemoteVendorManagement",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper:
        Mappers.StorageAppliancesDisableRemoteVendorManagementHeaders
    },
    201: {
      headersMapper:
        Mappers.StorageAppliancesDisableRemoteVendorManagementHeaders
    },
    202: {
      headersMapper:
        Mappers.StorageAppliancesDisableRemoteVendorManagementHeaders
    },
    204: {
      headersMapper:
        Mappers.StorageAppliancesDisableRemoteVendorManagementHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageApplianceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const enableRemoteVendorManagementOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/storageAppliances/{storageApplianceName}/enableRemoteVendorManagement",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper:
        Mappers.StorageAppliancesEnableRemoteVendorManagementHeaders
    },
    201: {
      headersMapper:
        Mappers.StorageAppliancesEnableRemoteVendorManagementHeaders
    },
    202: {
      headersMapper:
        Mappers.StorageAppliancesEnableRemoteVendorManagementHeaders
    },
    204: {
      headersMapper:
        Mappers.StorageAppliancesEnableRemoteVendorManagementHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody:
    Parameters.storageApplianceEnableRemoteVendorManagementParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageApplianceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const runReadCommandsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/storageAppliances/{storageApplianceName}/runReadCommands",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.StorageAppliancesRunReadCommandsHeaders
    },
    201: {
      headersMapper: Mappers.StorageAppliancesRunReadCommandsHeaders
    },
    202: {
      headersMapper: Mappers.StorageAppliancesRunReadCommandsHeaders
    },
    204: {
      headersMapper: Mappers.StorageAppliancesRunReadCommandsHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.storageApplianceRunReadCommandsParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageApplianceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const validateHardwareOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/storageAppliances/{storageApplianceName}/validateHardware",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.StorageAppliancesValidateHardwareHeaders
    },
    201: {
      headersMapper: Mappers.StorageAppliancesValidateHardwareHeaders
    },
    202: {
      headersMapper: Mappers.StorageAppliancesValidateHardwareHeaders
    },
    204: {
      headersMapper: Mappers.StorageAppliancesValidateHardwareHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.storageApplianceValidateHardwareParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageApplianceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StorageApplianceList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StorageApplianceList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
