/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { BareMetalMachines } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { NetworkCloud } from "../networkCloud";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  BareMetalMachine,
  BareMetalMachinesListBySubscriptionNextOptionalParams,
  BareMetalMachinesListBySubscriptionOptionalParams,
  BareMetalMachinesListBySubscriptionResponse,
  BareMetalMachinesListByResourceGroupNextOptionalParams,
  BareMetalMachinesListByResourceGroupOptionalParams,
  BareMetalMachinesListByResourceGroupResponse,
  BareMetalMachinesGetOptionalParams,
  BareMetalMachinesGetResponse,
  BareMetalMachinesCreateOrUpdateOptionalParams,
  BareMetalMachinesCreateOrUpdateResponse,
  BareMetalMachinesDeleteOptionalParams,
  BareMetalMachinesUpdateOptionalParams,
  BareMetalMachinesUpdateResponse,
  BareMetalMachinesCordonOptionalParams,
  BareMetalMachinesCordonResponse,
  BareMetalMachinesPowerOffOptionalParams,
  BareMetalMachinesPowerOffResponse,
  BareMetalMachinesReimageOptionalParams,
  BareMetalMachinesReimageResponse,
  BareMetalMachinesReplaceOptionalParams,
  BareMetalMachinesReplaceResponse,
  BareMetalMachinesRestartOptionalParams,
  BareMetalMachinesRestartResponse,
  BareMetalMachineRunCommandParameters,
  BareMetalMachinesRunCommandOptionalParams,
  BareMetalMachinesRunCommandResponse,
  BareMetalMachineRunDataExtractsParameters,
  BareMetalMachinesRunDataExtractsOptionalParams,
  BareMetalMachinesRunDataExtractsResponse,
  BareMetalMachineRunReadCommandsParameters,
  BareMetalMachinesRunReadCommandsOptionalParams,
  BareMetalMachinesRunReadCommandsResponse,
  BareMetalMachinesStartOptionalParams,
  BareMetalMachinesStartResponse,
  BareMetalMachinesUncordonOptionalParams,
  BareMetalMachinesUncordonResponse,
  BareMetalMachineValidateHardwareParameters,
  BareMetalMachinesValidateHardwareOptionalParams,
  BareMetalMachinesValidateHardwareResponse,
  BareMetalMachinesListBySubscriptionNextResponse,
  BareMetalMachinesListByResourceGroupNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing BareMetalMachines operations. */
export class BareMetalMachinesImpl implements BareMetalMachines {
  private readonly client: NetworkCloud;

  /**
   * Initialize a new instance of the class BareMetalMachines class.
   * @param client Reference to the service client
   */
  constructor(client: NetworkCloud) {
    this.client = client;
  }

  /**
   * Get a list of bare metal machines in the provided subscription.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: BareMetalMachinesListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<BareMetalMachine> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: BareMetalMachinesListBySubscriptionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<BareMetalMachine[]> {
    let result: BareMetalMachinesListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: BareMetalMachinesListBySubscriptionOptionalParams
  ): AsyncIterableIterator<BareMetalMachine> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Get a list of bare metal machines in the provided resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: BareMetalMachinesListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<BareMetalMachine> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: BareMetalMachinesListByResourceGroupOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<BareMetalMachine[]> {
    let result: BareMetalMachinesListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: BareMetalMachinesListByResourceGroupOptionalParams
  ): AsyncIterableIterator<BareMetalMachine> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get a list of bare metal machines in the provided subscription.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: BareMetalMachinesListBySubscriptionOptionalParams
  ): Promise<BareMetalMachinesListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * Get a list of bare metal machines in the provided resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: BareMetalMachinesListByResourceGroupOptionalParams
  ): Promise<BareMetalMachinesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Get properties of the provided bare metal machine.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param bareMetalMachineName The name of the bare metal machine.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    bareMetalMachineName: string,
    options?: BareMetalMachinesGetOptionalParams
  ): Promise<BareMetalMachinesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, bareMetalMachineName, options },
      getOperationSpec
    );
  }

  /**
   * Create a new bare metal machine or update the properties of the existing one.
   * All customer initiated requests will be rejected as the life cycle of this resource is managed by
   * the system.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param bareMetalMachineName The name of the bare metal machine.
   * @param bareMetalMachineParameters The request body.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    bareMetalMachineName: string,
    bareMetalMachineParameters: BareMetalMachine,
    options?: BareMetalMachinesCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<BareMetalMachinesCreateOrUpdateResponse>,
      BareMetalMachinesCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<BareMetalMachinesCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        bareMetalMachineName,
        bareMetalMachineParameters,
        options
      },
      spec: createOrUpdateOperationSpec
    });
    const poller = await createHttpPoller<
      BareMetalMachinesCreateOrUpdateResponse,
      OperationState<BareMetalMachinesCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a new bare metal machine or update the properties of the existing one.
   * All customer initiated requests will be rejected as the life cycle of this resource is managed by
   * the system.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param bareMetalMachineName The name of the bare metal machine.
   * @param bareMetalMachineParameters The request body.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    bareMetalMachineName: string,
    bareMetalMachineParameters: BareMetalMachine,
    options?: BareMetalMachinesCreateOrUpdateOptionalParams
  ): Promise<BareMetalMachinesCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      bareMetalMachineName,
      bareMetalMachineParameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete the provided bare metal machine.
   * All customer initiated requests will be rejected as the life cycle of this resource is managed by
   * the system.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param bareMetalMachineName The name of the bare metal machine.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    bareMetalMachineName: string,
    options?: BareMetalMachinesDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, bareMetalMachineName, options },
      spec: deleteOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete the provided bare metal machine.
   * All customer initiated requests will be rejected as the life cycle of this resource is managed by
   * the system.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param bareMetalMachineName The name of the bare metal machine.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    bareMetalMachineName: string,
    options?: BareMetalMachinesDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      bareMetalMachineName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Patch properties of the provided bare metal machine, or update tags associated with the bare metal
   * machine. Properties and tag updates can be done independently.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param bareMetalMachineName The name of the bare metal machine.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    bareMetalMachineName: string,
    options?: BareMetalMachinesUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<BareMetalMachinesUpdateResponse>,
      BareMetalMachinesUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<BareMetalMachinesUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, bareMetalMachineName, options },
      spec: updateOperationSpec
    });
    const poller = await createHttpPoller<
      BareMetalMachinesUpdateResponse,
      OperationState<BareMetalMachinesUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Patch properties of the provided bare metal machine, or update tags associated with the bare metal
   * machine. Properties and tag updates can be done independently.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param bareMetalMachineName The name of the bare metal machine.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    bareMetalMachineName: string,
    options?: BareMetalMachinesUpdateOptionalParams
  ): Promise<BareMetalMachinesUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      bareMetalMachineName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Cordon the provided bare metal machine's Kubernetes node.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param bareMetalMachineName The name of the bare metal machine.
   * @param options The options parameters.
   */
  async beginCordon(
    resourceGroupName: string,
    bareMetalMachineName: string,
    options?: BareMetalMachinesCordonOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<BareMetalMachinesCordonResponse>,
      BareMetalMachinesCordonResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<BareMetalMachinesCordonResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, bareMetalMachineName, options },
      spec: cordonOperationSpec
    });
    const poller = await createHttpPoller<
      BareMetalMachinesCordonResponse,
      OperationState<BareMetalMachinesCordonResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Cordon the provided bare metal machine's Kubernetes node.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param bareMetalMachineName The name of the bare metal machine.
   * @param options The options parameters.
   */
  async beginCordonAndWait(
    resourceGroupName: string,
    bareMetalMachineName: string,
    options?: BareMetalMachinesCordonOptionalParams
  ): Promise<BareMetalMachinesCordonResponse> {
    const poller = await this.beginCordon(
      resourceGroupName,
      bareMetalMachineName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Power off the provided bare metal machine.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param bareMetalMachineName The name of the bare metal machine.
   * @param options The options parameters.
   */
  async beginPowerOff(
    resourceGroupName: string,
    bareMetalMachineName: string,
    options?: BareMetalMachinesPowerOffOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<BareMetalMachinesPowerOffResponse>,
      BareMetalMachinesPowerOffResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<BareMetalMachinesPowerOffResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, bareMetalMachineName, options },
      spec: powerOffOperationSpec
    });
    const poller = await createHttpPoller<
      BareMetalMachinesPowerOffResponse,
      OperationState<BareMetalMachinesPowerOffResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Power off the provided bare metal machine.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param bareMetalMachineName The name of the bare metal machine.
   * @param options The options parameters.
   */
  async beginPowerOffAndWait(
    resourceGroupName: string,
    bareMetalMachineName: string,
    options?: BareMetalMachinesPowerOffOptionalParams
  ): Promise<BareMetalMachinesPowerOffResponse> {
    const poller = await this.beginPowerOff(
      resourceGroupName,
      bareMetalMachineName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Reimage the provided bare metal machine.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param bareMetalMachineName The name of the bare metal machine.
   * @param options The options parameters.
   */
  async beginReimage(
    resourceGroupName: string,
    bareMetalMachineName: string,
    options?: BareMetalMachinesReimageOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<BareMetalMachinesReimageResponse>,
      BareMetalMachinesReimageResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<BareMetalMachinesReimageResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, bareMetalMachineName, options },
      spec: reimageOperationSpec
    });
    const poller = await createHttpPoller<
      BareMetalMachinesReimageResponse,
      OperationState<BareMetalMachinesReimageResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Reimage the provided bare metal machine.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param bareMetalMachineName The name of the bare metal machine.
   * @param options The options parameters.
   */
  async beginReimageAndWait(
    resourceGroupName: string,
    bareMetalMachineName: string,
    options?: BareMetalMachinesReimageOptionalParams
  ): Promise<BareMetalMachinesReimageResponse> {
    const poller = await this.beginReimage(
      resourceGroupName,
      bareMetalMachineName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Replace the provided bare metal machine.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param bareMetalMachineName The name of the bare metal machine.
   * @param options The options parameters.
   */
  async beginReplace(
    resourceGroupName: string,
    bareMetalMachineName: string,
    options?: BareMetalMachinesReplaceOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<BareMetalMachinesReplaceResponse>,
      BareMetalMachinesReplaceResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<BareMetalMachinesReplaceResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, bareMetalMachineName, options },
      spec: replaceOperationSpec
    });
    const poller = await createHttpPoller<
      BareMetalMachinesReplaceResponse,
      OperationState<BareMetalMachinesReplaceResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Replace the provided bare metal machine.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param bareMetalMachineName The name of the bare metal machine.
   * @param options The options parameters.
   */
  async beginReplaceAndWait(
    resourceGroupName: string,
    bareMetalMachineName: string,
    options?: BareMetalMachinesReplaceOptionalParams
  ): Promise<BareMetalMachinesReplaceResponse> {
    const poller = await this.beginReplace(
      resourceGroupName,
      bareMetalMachineName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Restart the provided bare metal machine.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param bareMetalMachineName The name of the bare metal machine.
   * @param options The options parameters.
   */
  async beginRestart(
    resourceGroupName: string,
    bareMetalMachineName: string,
    options?: BareMetalMachinesRestartOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<BareMetalMachinesRestartResponse>,
      BareMetalMachinesRestartResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<BareMetalMachinesRestartResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, bareMetalMachineName, options },
      spec: restartOperationSpec
    });
    const poller = await createHttpPoller<
      BareMetalMachinesRestartResponse,
      OperationState<BareMetalMachinesRestartResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Restart the provided bare metal machine.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param bareMetalMachineName The name of the bare metal machine.
   * @param options The options parameters.
   */
  async beginRestartAndWait(
    resourceGroupName: string,
    bareMetalMachineName: string,
    options?: BareMetalMachinesRestartOptionalParams
  ): Promise<BareMetalMachinesRestartResponse> {
    const poller = await this.beginRestart(
      resourceGroupName,
      bareMetalMachineName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Run the command or the script on the provided bare metal machine. The URL to storage account with
   * the command execution results and the command exit code can be retrieved from the operation status
   * API once available.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param bareMetalMachineName The name of the bare metal machine.
   * @param bareMetalMachineRunCommandParameters The request body.
   * @param options The options parameters.
   */
  async beginRunCommand(
    resourceGroupName: string,
    bareMetalMachineName: string,
    bareMetalMachineRunCommandParameters: BareMetalMachineRunCommandParameters,
    options?: BareMetalMachinesRunCommandOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<BareMetalMachinesRunCommandResponse>,
      BareMetalMachinesRunCommandResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<BareMetalMachinesRunCommandResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        bareMetalMachineName,
        bareMetalMachineRunCommandParameters,
        options
      },
      spec: runCommandOperationSpec
    });
    const poller = await createHttpPoller<
      BareMetalMachinesRunCommandResponse,
      OperationState<BareMetalMachinesRunCommandResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Run the command or the script on the provided bare metal machine. The URL to storage account with
   * the command execution results and the command exit code can be retrieved from the operation status
   * API once available.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param bareMetalMachineName The name of the bare metal machine.
   * @param bareMetalMachineRunCommandParameters The request body.
   * @param options The options parameters.
   */
  async beginRunCommandAndWait(
    resourceGroupName: string,
    bareMetalMachineName: string,
    bareMetalMachineRunCommandParameters: BareMetalMachineRunCommandParameters,
    options?: BareMetalMachinesRunCommandOptionalParams
  ): Promise<BareMetalMachinesRunCommandResponse> {
    const poller = await this.beginRunCommand(
      resourceGroupName,
      bareMetalMachineName,
      bareMetalMachineRunCommandParameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Run one or more data extractions on the provided bare metal machine. The URL to storage account with
   * the command execution results and the command exit code can be retrieved from the operation status
   * API once available.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param bareMetalMachineName The name of the bare metal machine.
   * @param bareMetalMachineRunDataExtractsParameters The request body.
   * @param options The options parameters.
   */
  async beginRunDataExtracts(
    resourceGroupName: string,
    bareMetalMachineName: string,
    bareMetalMachineRunDataExtractsParameters: BareMetalMachineRunDataExtractsParameters,
    options?: BareMetalMachinesRunDataExtractsOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<BareMetalMachinesRunDataExtractsResponse>,
      BareMetalMachinesRunDataExtractsResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<BareMetalMachinesRunDataExtractsResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        bareMetalMachineName,
        bareMetalMachineRunDataExtractsParameters,
        options
      },
      spec: runDataExtractsOperationSpec
    });
    const poller = await createHttpPoller<
      BareMetalMachinesRunDataExtractsResponse,
      OperationState<BareMetalMachinesRunDataExtractsResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Run one or more data extractions on the provided bare metal machine. The URL to storage account with
   * the command execution results and the command exit code can be retrieved from the operation status
   * API once available.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param bareMetalMachineName The name of the bare metal machine.
   * @param bareMetalMachineRunDataExtractsParameters The request body.
   * @param options The options parameters.
   */
  async beginRunDataExtractsAndWait(
    resourceGroupName: string,
    bareMetalMachineName: string,
    bareMetalMachineRunDataExtractsParameters: BareMetalMachineRunDataExtractsParameters,
    options?: BareMetalMachinesRunDataExtractsOptionalParams
  ): Promise<BareMetalMachinesRunDataExtractsResponse> {
    const poller = await this.beginRunDataExtracts(
      resourceGroupName,
      bareMetalMachineName,
      bareMetalMachineRunDataExtractsParameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Run one or more read-only commands on the provided bare metal machine. The URL to storage account
   * with the command execution results and the command exit code can be retrieved from the operation
   * status API once available.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param bareMetalMachineName The name of the bare metal machine.
   * @param bareMetalMachineRunReadCommandsParameters The request body.
   * @param options The options parameters.
   */
  async beginRunReadCommands(
    resourceGroupName: string,
    bareMetalMachineName: string,
    bareMetalMachineRunReadCommandsParameters: BareMetalMachineRunReadCommandsParameters,
    options?: BareMetalMachinesRunReadCommandsOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<BareMetalMachinesRunReadCommandsResponse>,
      BareMetalMachinesRunReadCommandsResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<BareMetalMachinesRunReadCommandsResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        bareMetalMachineName,
        bareMetalMachineRunReadCommandsParameters,
        options
      },
      spec: runReadCommandsOperationSpec
    });
    const poller = await createHttpPoller<
      BareMetalMachinesRunReadCommandsResponse,
      OperationState<BareMetalMachinesRunReadCommandsResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Run one or more read-only commands on the provided bare metal machine. The URL to storage account
   * with the command execution results and the command exit code can be retrieved from the operation
   * status API once available.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param bareMetalMachineName The name of the bare metal machine.
   * @param bareMetalMachineRunReadCommandsParameters The request body.
   * @param options The options parameters.
   */
  async beginRunReadCommandsAndWait(
    resourceGroupName: string,
    bareMetalMachineName: string,
    bareMetalMachineRunReadCommandsParameters: BareMetalMachineRunReadCommandsParameters,
    options?: BareMetalMachinesRunReadCommandsOptionalParams
  ): Promise<BareMetalMachinesRunReadCommandsResponse> {
    const poller = await this.beginRunReadCommands(
      resourceGroupName,
      bareMetalMachineName,
      bareMetalMachineRunReadCommandsParameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Start the provided bare metal machine.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param bareMetalMachineName The name of the bare metal machine.
   * @param options The options parameters.
   */
  async beginStart(
    resourceGroupName: string,
    bareMetalMachineName: string,
    options?: BareMetalMachinesStartOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<BareMetalMachinesStartResponse>,
      BareMetalMachinesStartResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<BareMetalMachinesStartResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, bareMetalMachineName, options },
      spec: startOperationSpec
    });
    const poller = await createHttpPoller<
      BareMetalMachinesStartResponse,
      OperationState<BareMetalMachinesStartResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Start the provided bare metal machine.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param bareMetalMachineName The name of the bare metal machine.
   * @param options The options parameters.
   */
  async beginStartAndWait(
    resourceGroupName: string,
    bareMetalMachineName: string,
    options?: BareMetalMachinesStartOptionalParams
  ): Promise<BareMetalMachinesStartResponse> {
    const poller = await this.beginStart(
      resourceGroupName,
      bareMetalMachineName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Uncordon the provided bare metal machine's Kubernetes node.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param bareMetalMachineName The name of the bare metal machine.
   * @param options The options parameters.
   */
  async beginUncordon(
    resourceGroupName: string,
    bareMetalMachineName: string,
    options?: BareMetalMachinesUncordonOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<BareMetalMachinesUncordonResponse>,
      BareMetalMachinesUncordonResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<BareMetalMachinesUncordonResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, bareMetalMachineName, options },
      spec: uncordonOperationSpec
    });
    const poller = await createHttpPoller<
      BareMetalMachinesUncordonResponse,
      OperationState<BareMetalMachinesUncordonResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Uncordon the provided bare metal machine's Kubernetes node.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param bareMetalMachineName The name of the bare metal machine.
   * @param options The options parameters.
   */
  async beginUncordonAndWait(
    resourceGroupName: string,
    bareMetalMachineName: string,
    options?: BareMetalMachinesUncordonOptionalParams
  ): Promise<BareMetalMachinesUncordonResponse> {
    const poller = await this.beginUncordon(
      resourceGroupName,
      bareMetalMachineName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Validate the hardware of the provided bare metal machine.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param bareMetalMachineName The name of the bare metal machine.
   * @param bareMetalMachineValidateHardwareParameters The request body.
   * @param options The options parameters.
   */
  async beginValidateHardware(
    resourceGroupName: string,
    bareMetalMachineName: string,
    bareMetalMachineValidateHardwareParameters: BareMetalMachineValidateHardwareParameters,
    options?: BareMetalMachinesValidateHardwareOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<BareMetalMachinesValidateHardwareResponse>,
      BareMetalMachinesValidateHardwareResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<BareMetalMachinesValidateHardwareResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        bareMetalMachineName,
        bareMetalMachineValidateHardwareParameters,
        options
      },
      spec: validateHardwareOperationSpec
    });
    const poller = await createHttpPoller<
      BareMetalMachinesValidateHardwareResponse,
      OperationState<BareMetalMachinesValidateHardwareResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Validate the hardware of the provided bare metal machine.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param bareMetalMachineName The name of the bare metal machine.
   * @param bareMetalMachineValidateHardwareParameters The request body.
   * @param options The options parameters.
   */
  async beginValidateHardwareAndWait(
    resourceGroupName: string,
    bareMetalMachineName: string,
    bareMetalMachineValidateHardwareParameters: BareMetalMachineValidateHardwareParameters,
    options?: BareMetalMachinesValidateHardwareOptionalParams
  ): Promise<BareMetalMachinesValidateHardwareResponse> {
    const poller = await this.beginValidateHardware(
      resourceGroupName,
      bareMetalMachineName,
      bareMetalMachineValidateHardwareParameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: BareMetalMachinesListBySubscriptionNextOptionalParams
  ): Promise<BareMetalMachinesListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: BareMetalMachinesListByResourceGroupNextOptionalParams
  ): Promise<BareMetalMachinesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/bareMetalMachines",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BareMetalMachineList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BareMetalMachineList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BareMetalMachine
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.bareMetalMachineName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.BareMetalMachine
    },
    201: {
      bodyMapper: Mappers.BareMetalMachine
    },
    202: {
      bodyMapper: Mappers.BareMetalMachine
    },
    204: {
      bodyMapper: Mappers.BareMetalMachine
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.bareMetalMachineParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.bareMetalMachineName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.bareMetalMachineName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.BareMetalMachine
    },
    201: {
      bodyMapper: Mappers.BareMetalMachine
    },
    202: {
      bodyMapper: Mappers.BareMetalMachine
    },
    204: {
      bodyMapper: Mappers.BareMetalMachine
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.bareMetalMachineUpdateParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.bareMetalMachineName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const cordonOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}/cordon",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.BareMetalMachinesCordonHeaders
    },
    201: {
      headersMapper: Mappers.BareMetalMachinesCordonHeaders
    },
    202: {
      headersMapper: Mappers.BareMetalMachinesCordonHeaders
    },
    204: {
      headersMapper: Mappers.BareMetalMachinesCordonHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.bareMetalMachineCordonParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.bareMetalMachineName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const powerOffOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}/powerOff",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.BareMetalMachinesPowerOffHeaders
    },
    201: {
      headersMapper: Mappers.BareMetalMachinesPowerOffHeaders
    },
    202: {
      headersMapper: Mappers.BareMetalMachinesPowerOffHeaders
    },
    204: {
      headersMapper: Mappers.BareMetalMachinesPowerOffHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.bareMetalMachinePowerOffParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.bareMetalMachineName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const reimageOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}/reimage",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.BareMetalMachinesReimageHeaders
    },
    201: {
      headersMapper: Mappers.BareMetalMachinesReimageHeaders
    },
    202: {
      headersMapper: Mappers.BareMetalMachinesReimageHeaders
    },
    204: {
      headersMapper: Mappers.BareMetalMachinesReimageHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.bareMetalMachineName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const replaceOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}/replace",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.BareMetalMachinesReplaceHeaders
    },
    201: {
      headersMapper: Mappers.BareMetalMachinesReplaceHeaders
    },
    202: {
      headersMapper: Mappers.BareMetalMachinesReplaceHeaders
    },
    204: {
      headersMapper: Mappers.BareMetalMachinesReplaceHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.bareMetalMachineReplaceParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.bareMetalMachineName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const restartOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}/restart",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.BareMetalMachinesRestartHeaders
    },
    201: {
      headersMapper: Mappers.BareMetalMachinesRestartHeaders
    },
    202: {
      headersMapper: Mappers.BareMetalMachinesRestartHeaders
    },
    204: {
      headersMapper: Mappers.BareMetalMachinesRestartHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.bareMetalMachineName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const runCommandOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}/runCommand",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.BareMetalMachinesRunCommandHeaders
    },
    201: {
      headersMapper: Mappers.BareMetalMachinesRunCommandHeaders
    },
    202: {
      headersMapper: Mappers.BareMetalMachinesRunCommandHeaders
    },
    204: {
      headersMapper: Mappers.BareMetalMachinesRunCommandHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.bareMetalMachineRunCommandParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.bareMetalMachineName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const runDataExtractsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}/runDataExtracts",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.BareMetalMachinesRunDataExtractsHeaders
    },
    201: {
      headersMapper: Mappers.BareMetalMachinesRunDataExtractsHeaders
    },
    202: {
      headersMapper: Mappers.BareMetalMachinesRunDataExtractsHeaders
    },
    204: {
      headersMapper: Mappers.BareMetalMachinesRunDataExtractsHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.bareMetalMachineRunDataExtractsParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.bareMetalMachineName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const runReadCommandsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}/runReadCommands",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.BareMetalMachinesRunReadCommandsHeaders
    },
    201: {
      headersMapper: Mappers.BareMetalMachinesRunReadCommandsHeaders
    },
    202: {
      headersMapper: Mappers.BareMetalMachinesRunReadCommandsHeaders
    },
    204: {
      headersMapper: Mappers.BareMetalMachinesRunReadCommandsHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.bareMetalMachineRunReadCommandsParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.bareMetalMachineName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const startOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}/start",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.BareMetalMachinesStartHeaders
    },
    201: {
      headersMapper: Mappers.BareMetalMachinesStartHeaders
    },
    202: {
      headersMapper: Mappers.BareMetalMachinesStartHeaders
    },
    204: {
      headersMapper: Mappers.BareMetalMachinesStartHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.bareMetalMachineName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const uncordonOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}/uncordon",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.BareMetalMachinesUncordonHeaders
    },
    201: {
      headersMapper: Mappers.BareMetalMachinesUncordonHeaders
    },
    202: {
      headersMapper: Mappers.BareMetalMachinesUncordonHeaders
    },
    204: {
      headersMapper: Mappers.BareMetalMachinesUncordonHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.bareMetalMachineName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const validateHardwareOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}/validateHardware",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.BareMetalMachinesValidateHardwareHeaders
    },
    201: {
      headersMapper: Mappers.BareMetalMachinesValidateHardwareHeaders
    },
    202: {
      headersMapper: Mappers.BareMetalMachinesValidateHardwareHeaders
    },
    204: {
      headersMapper: Mappers.BareMetalMachinesValidateHardwareHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.bareMetalMachineValidateHardwareParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.bareMetalMachineName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BareMetalMachineList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BareMetalMachineList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
