/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { KubernetesClusterFeatures } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { NetworkCloud } from "../networkCloud";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  KubernetesClusterFeature,
  KubernetesClusterFeaturesListByKubernetesClusterNextOptionalParams,
  KubernetesClusterFeaturesListByKubernetesClusterOptionalParams,
  KubernetesClusterFeaturesListByKubernetesClusterResponse,
  KubernetesClusterFeaturesGetOptionalParams,
  KubernetesClusterFeaturesGetResponse,
  KubernetesClusterFeaturesCreateOrUpdateOptionalParams,
  KubernetesClusterFeaturesCreateOrUpdateResponse,
  KubernetesClusterFeaturesDeleteOptionalParams,
  KubernetesClusterFeaturesDeleteResponse,
  KubernetesClusterFeaturesUpdateOptionalParams,
  KubernetesClusterFeaturesUpdateResponse,
  KubernetesClusterFeaturesListByKubernetesClusterNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing KubernetesClusterFeatures operations. */
export class KubernetesClusterFeaturesImpl
  implements KubernetesClusterFeatures
{
  private readonly client: NetworkCloud;

  /**
   * Initialize a new instance of the class KubernetesClusterFeatures class.
   * @param client Reference to the service client
   */
  constructor(client: NetworkCloud) {
    this.client = client;
  }

  /**
   * Get a list of features for the provided Kubernetes cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param kubernetesClusterName The name of the Kubernetes cluster.
   * @param options The options parameters.
   */
  public listByKubernetesCluster(
    resourceGroupName: string,
    kubernetesClusterName: string,
    options?: KubernetesClusterFeaturesListByKubernetesClusterOptionalParams,
  ): PagedAsyncIterableIterator<KubernetesClusterFeature> {
    const iter = this.listByKubernetesClusterPagingAll(
      resourceGroupName,
      kubernetesClusterName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByKubernetesClusterPagingPage(
          resourceGroupName,
          kubernetesClusterName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByKubernetesClusterPagingPage(
    resourceGroupName: string,
    kubernetesClusterName: string,
    options?: KubernetesClusterFeaturesListByKubernetesClusterOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<KubernetesClusterFeature[]> {
    let result: KubernetesClusterFeaturesListByKubernetesClusterResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByKubernetesCluster(
        resourceGroupName,
        kubernetesClusterName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByKubernetesClusterNext(
        resourceGroupName,
        kubernetesClusterName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByKubernetesClusterPagingAll(
    resourceGroupName: string,
    kubernetesClusterName: string,
    options?: KubernetesClusterFeaturesListByKubernetesClusterOptionalParams,
  ): AsyncIterableIterator<KubernetesClusterFeature> {
    for await (const page of this.listByKubernetesClusterPagingPage(
      resourceGroupName,
      kubernetesClusterName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Get a list of features for the provided Kubernetes cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param kubernetesClusterName The name of the Kubernetes cluster.
   * @param options The options parameters.
   */
  private _listByKubernetesCluster(
    resourceGroupName: string,
    kubernetesClusterName: string,
    options?: KubernetesClusterFeaturesListByKubernetesClusterOptionalParams,
  ): Promise<KubernetesClusterFeaturesListByKubernetesClusterResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, kubernetesClusterName, options },
      listByKubernetesClusterOperationSpec,
    );
  }

  /**
   * Get properties of the provided the Kubernetes cluster feature.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param kubernetesClusterName The name of the Kubernetes cluster.
   * @param featureName The name of the feature.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    kubernetesClusterName: string,
    featureName: string,
    options?: KubernetesClusterFeaturesGetOptionalParams,
  ): Promise<KubernetesClusterFeaturesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, kubernetesClusterName, featureName, options },
      getOperationSpec,
    );
  }

  /**
   * Create a new Kubernetes cluster feature or update properties of the Kubernetes cluster feature if it
   * exists.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param kubernetesClusterName The name of the Kubernetes cluster.
   * @param featureName The name of the feature.
   * @param kubernetesClusterFeatureParameters The request body.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    kubernetesClusterName: string,
    featureName: string,
    kubernetesClusterFeatureParameters: KubernetesClusterFeature,
    options?: KubernetesClusterFeaturesCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<KubernetesClusterFeaturesCreateOrUpdateResponse>,
      KubernetesClusterFeaturesCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<KubernetesClusterFeaturesCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        kubernetesClusterName,
        featureName,
        kubernetesClusterFeatureParameters,
        options,
      },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      KubernetesClusterFeaturesCreateOrUpdateResponse,
      OperationState<KubernetesClusterFeaturesCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a new Kubernetes cluster feature or update properties of the Kubernetes cluster feature if it
   * exists.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param kubernetesClusterName The name of the Kubernetes cluster.
   * @param featureName The name of the feature.
   * @param kubernetesClusterFeatureParameters The request body.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    kubernetesClusterName: string,
    featureName: string,
    kubernetesClusterFeatureParameters: KubernetesClusterFeature,
    options?: KubernetesClusterFeaturesCreateOrUpdateOptionalParams,
  ): Promise<KubernetesClusterFeaturesCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      kubernetesClusterName,
      featureName,
      kubernetesClusterFeatureParameters,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete the provided Kubernetes cluster feature.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param kubernetesClusterName The name of the Kubernetes cluster.
   * @param featureName The name of the feature.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    kubernetesClusterName: string,
    featureName: string,
    options?: KubernetesClusterFeaturesDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<KubernetesClusterFeaturesDeleteResponse>,
      KubernetesClusterFeaturesDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<KubernetesClusterFeaturesDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, kubernetesClusterName, featureName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      KubernetesClusterFeaturesDeleteResponse,
      OperationState<KubernetesClusterFeaturesDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete the provided Kubernetes cluster feature.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param kubernetesClusterName The name of the Kubernetes cluster.
   * @param featureName The name of the feature.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    kubernetesClusterName: string,
    featureName: string,
    options?: KubernetesClusterFeaturesDeleteOptionalParams,
  ): Promise<KubernetesClusterFeaturesDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      kubernetesClusterName,
      featureName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Patch properties of the provided Kubernetes cluster feature.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param kubernetesClusterName The name of the Kubernetes cluster.
   * @param featureName The name of the feature.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    kubernetesClusterName: string,
    featureName: string,
    options?: KubernetesClusterFeaturesUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<KubernetesClusterFeaturesUpdateResponse>,
      KubernetesClusterFeaturesUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<KubernetesClusterFeaturesUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, kubernetesClusterName, featureName, options },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      KubernetesClusterFeaturesUpdateResponse,
      OperationState<KubernetesClusterFeaturesUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Patch properties of the provided Kubernetes cluster feature.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param kubernetesClusterName The name of the Kubernetes cluster.
   * @param featureName The name of the feature.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    kubernetesClusterName: string,
    featureName: string,
    options?: KubernetesClusterFeaturesUpdateOptionalParams,
  ): Promise<KubernetesClusterFeaturesUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      kubernetesClusterName,
      featureName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * ListByKubernetesClusterNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param kubernetesClusterName The name of the Kubernetes cluster.
   * @param nextLink The nextLink from the previous successful call to the ListByKubernetesCluster
   *                 method.
   * @param options The options parameters.
   */
  private _listByKubernetesClusterNext(
    resourceGroupName: string,
    kubernetesClusterName: string,
    nextLink: string,
    options?: KubernetesClusterFeaturesListByKubernetesClusterNextOptionalParams,
  ): Promise<KubernetesClusterFeaturesListByKubernetesClusterNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, kubernetesClusterName, nextLink, options },
      listByKubernetesClusterNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByKubernetesClusterOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/kubernetesClusters/{kubernetesClusterName}/features",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KubernetesClusterFeatureList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.kubernetesClusterName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/kubernetesClusters/{kubernetesClusterName}/features/{featureName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KubernetesClusterFeature,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.kubernetesClusterName,
    Parameters.featureName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/kubernetesClusters/{kubernetesClusterName}/features/{featureName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.KubernetesClusterFeature,
    },
    201: {
      bodyMapper: Mappers.KubernetesClusterFeature,
    },
    202: {
      bodyMapper: Mappers.KubernetesClusterFeature,
    },
    204: {
      bodyMapper: Mappers.KubernetesClusterFeature,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.kubernetesClusterFeatureParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.kubernetesClusterName,
    Parameters.featureName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/kubernetesClusters/{kubernetesClusterName}/features/{featureName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    201: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    202: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    204: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.kubernetesClusterName,
    Parameters.featureName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/kubernetesClusters/{kubernetesClusterName}/features/{featureName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.KubernetesClusterFeature,
    },
    201: {
      bodyMapper: Mappers.KubernetesClusterFeature,
    },
    202: {
      bodyMapper: Mappers.KubernetesClusterFeature,
    },
    204: {
      bodyMapper: Mappers.KubernetesClusterFeature,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.kubernetesClusterFeatureUpdateParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.kubernetesClusterName,
    Parameters.featureName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listByKubernetesClusterNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KubernetesClusterFeatureList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.kubernetesClusterName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
