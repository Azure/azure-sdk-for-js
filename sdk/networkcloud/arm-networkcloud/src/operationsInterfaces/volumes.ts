/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  Volume,
  VolumesListBySubscriptionOptionalParams,
  VolumesListByResourceGroupOptionalParams,
  VolumesGetOptionalParams,
  VolumesGetResponse,
  VolumesCreateOrUpdateOptionalParams,
  VolumesCreateOrUpdateResponse,
  VolumesDeleteOptionalParams,
  VolumesUpdateOptionalParams,
  VolumesUpdateResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Volumes. */
export interface Volumes {
  /**
   * Get a list of volumes in the provided subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: VolumesListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<Volume>;
  /**
   * Get a list of volumes in the provided resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: VolumesListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<Volume>;
  /**
   * Get properties of the provided volume.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param volumeName The name of the volume.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    volumeName: string,
    options?: VolumesGetOptionalParams
  ): Promise<VolumesGetResponse>;
  /**
   * Create a new volume or update the properties of the existing one.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param volumeName The name of the volume.
   * @param volumeParameters The request body.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    volumeName: string,
    volumeParameters: Volume,
    options?: VolumesCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<VolumesCreateOrUpdateResponse>,
      VolumesCreateOrUpdateResponse
    >
  >;
  /**
   * Create a new volume or update the properties of the existing one.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param volumeName The name of the volume.
   * @param volumeParameters The request body.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    volumeName: string,
    volumeParameters: Volume,
    options?: VolumesCreateOrUpdateOptionalParams
  ): Promise<VolumesCreateOrUpdateResponse>;
  /**
   * Delete the provided volume.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param volumeName The name of the volume.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    volumeName: string,
    options?: VolumesDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Delete the provided volume.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param volumeName The name of the volume.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    volumeName: string,
    options?: VolumesDeleteOptionalParams
  ): Promise<void>;
  /**
   * Update tags associated with the provided volume.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param volumeName The name of the volume.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    volumeName: string,
    options?: VolumesUpdateOptionalParams
  ): Promise<VolumesUpdateResponse>;
}
