/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  ClusterManager,
  ClusterManagersListBySubscriptionOptionalParams,
  ClusterManagersListByResourceGroupOptionalParams,
  ClusterManagersGetOptionalParams,
  ClusterManagersGetResponse,
  ClusterManagersCreateOrUpdateOptionalParams,
  ClusterManagersCreateOrUpdateResponse,
  ClusterManagersDeleteOptionalParams,
  ClusterManagersUpdateOptionalParams,
  ClusterManagersUpdateResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a ClusterManagers. */
export interface ClusterManagers {
  /**
   * Get a list of cluster managers in the provided subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: ClusterManagersListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<ClusterManager>;
  /**
   * Get a list of cluster managers in the provided resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: ClusterManagersListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<ClusterManager>;
  /**
   * Get the properties of the provided cluster manager.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterManagerName The name of the cluster manager.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    clusterManagerName: string,
    options?: ClusterManagersGetOptionalParams
  ): Promise<ClusterManagersGetResponse>;
  /**
   * Create a new cluster manager or update properties of the cluster manager if it exists.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterManagerName The name of the cluster manager.
   * @param clusterManagerParameters The request body.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    clusterManagerName: string,
    clusterManagerParameters: ClusterManager,
    options?: ClusterManagersCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<ClusterManagersCreateOrUpdateResponse>,
      ClusterManagersCreateOrUpdateResponse
    >
  >;
  /**
   * Create a new cluster manager or update properties of the cluster manager if it exists.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterManagerName The name of the cluster manager.
   * @param clusterManagerParameters The request body.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    clusterManagerName: string,
    clusterManagerParameters: ClusterManager,
    options?: ClusterManagersCreateOrUpdateOptionalParams
  ): Promise<ClusterManagersCreateOrUpdateResponse>;
  /**
   * Delete the provided cluster manager.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterManagerName The name of the cluster manager.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    clusterManagerName: string,
    options?: ClusterManagersDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Delete the provided cluster manager.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterManagerName The name of the cluster manager.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    clusterManagerName: string,
    options?: ClusterManagersDeleteOptionalParams
  ): Promise<void>;
  /**
   * Patch properties of the provided cluster manager, or update the tags assigned to the cluster
   * manager. Properties and tag updates can be done independently.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterManagerName The name of the cluster manager.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    clusterManagerName: string,
    options?: ClusterManagersUpdateOptionalParams
  ): Promise<ClusterManagersUpdateResponse>;
}
