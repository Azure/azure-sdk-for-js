/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  Rack,
  RacksListBySubscriptionOptionalParams,
  RacksListByResourceGroupOptionalParams,
  RacksGetOptionalParams,
  RacksGetResponse,
  RacksCreateOrUpdateOptionalParams,
  RacksCreateOrUpdateResponse,
  RacksDeleteOptionalParams,
  RacksUpdateOptionalParams,
  RacksUpdateResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Racks. */
export interface Racks {
  /**
   * Get a list of racks in the provided subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: RacksListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<Rack>;
  /**
   * Get a list of racks in the provided resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: RacksListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<Rack>;
  /**
   * Get properties of the provided rack.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param rackName The name of the rack.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    rackName: string,
    options?: RacksGetOptionalParams
  ): Promise<RacksGetResponse>;
  /**
   * Create a new rack or update properties of the existing one.
   * All customer initiated requests will be rejected as the life cycle of this resource is managed by
   * the system.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param rackName The name of the rack.
   * @param rackParameters The request body.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    rackName: string,
    rackParameters: Rack,
    options?: RacksCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<RacksCreateOrUpdateResponse>,
      RacksCreateOrUpdateResponse
    >
  >;
  /**
   * Create a new rack or update properties of the existing one.
   * All customer initiated requests will be rejected as the life cycle of this resource is managed by
   * the system.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param rackName The name of the rack.
   * @param rackParameters The request body.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    rackName: string,
    rackParameters: Rack,
    options?: RacksCreateOrUpdateOptionalParams
  ): Promise<RacksCreateOrUpdateResponse>;
  /**
   * Delete the provided rack.
   * All customer initiated requests will be rejected as the life cycle of this resource is managed by
   * the system.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param rackName The name of the rack.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    rackName: string,
    options?: RacksDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Delete the provided rack.
   * All customer initiated requests will be rejected as the life cycle of this resource is managed by
   * the system.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param rackName The name of the rack.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    rackName: string,
    options?: RacksDeleteOptionalParams
  ): Promise<void>;
  /**
   * Patch properties of the provided rack, or update the tags associated with the rack. Properties and
   * tag updates can be done independently.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param rackName The name of the rack.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    rackName: string,
    options?: RacksUpdateOptionalParams
  ): Promise<
    SimplePollerLike<OperationState<RacksUpdateResponse>, RacksUpdateResponse>
  >;
  /**
   * Patch properties of the provided rack, or update the tags associated with the rack. Properties and
   * tag updates can be done independently.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param rackName The name of the rack.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    rackName: string,
    options?: RacksUpdateOptionalParams
  ): Promise<RacksUpdateResponse>;
}
