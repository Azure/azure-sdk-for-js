/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  Cluster,
  ClustersListBySubscriptionOptionalParams,
  ClustersListByResourceGroupOptionalParams,
  ClustersGetOptionalParams,
  ClustersGetResponse,
  ClustersCreateOrUpdateOptionalParams,
  ClustersCreateOrUpdateResponse,
  ClustersDeleteOptionalParams,
  ClustersDeleteResponse,
  ClustersUpdateOptionalParams,
  ClustersUpdateResponse,
  ClusterContinueUpdateVersionParameters,
  ClustersContinueUpdateVersionOptionalParams,
  ClustersContinueUpdateVersionResponse,
  ClustersDeployOptionalParams,
  ClustersDeployResponse,
  ClustersScanRuntimeOptionalParams,
  ClustersScanRuntimeResponse,
  ClusterUpdateVersionParameters,
  ClustersUpdateVersionOptionalParams,
  ClustersUpdateVersionResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Clusters. */
export interface Clusters {
  /**
   * Get a list of clusters in the provided subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: ClustersListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<Cluster>;
  /**
   * Get a list of clusters in the provided resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: ClustersListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<Cluster>;
  /**
   * Get properties of the provided cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    clusterName: string,
    options?: ClustersGetOptionalParams,
  ): Promise<ClustersGetResponse>;
  /**
   * Create a new cluster or update the properties of the cluster if it exists.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param clusterParameters The request body.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    clusterName: string,
    clusterParameters: Cluster,
    options?: ClustersCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ClustersCreateOrUpdateResponse>,
      ClustersCreateOrUpdateResponse
    >
  >;
  /**
   * Create a new cluster or update the properties of the cluster if it exists.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param clusterParameters The request body.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    clusterName: string,
    clusterParameters: Cluster,
    options?: ClustersCreateOrUpdateOptionalParams,
  ): Promise<ClustersCreateOrUpdateResponse>;
  /**
   * Delete the provided cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    clusterName: string,
    options?: ClustersDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ClustersDeleteResponse>,
      ClustersDeleteResponse
    >
  >;
  /**
   * Delete the provided cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    clusterName: string,
    options?: ClustersDeleteOptionalParams,
  ): Promise<ClustersDeleteResponse>;
  /**
   * Patch the properties of the provided cluster, or update the tags associated with the cluster.
   * Properties and tag updates can be done independently.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    clusterName: string,
    options?: ClustersUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ClustersUpdateResponse>,
      ClustersUpdateResponse
    >
  >;
  /**
   * Patch the properties of the provided cluster, or update the tags associated with the cluster.
   * Properties and tag updates can be done independently.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    clusterName: string,
    options?: ClustersUpdateOptionalParams,
  ): Promise<ClustersUpdateResponse>;
  /**
   * Trigger the continuation of an update for a cluster with a matching update strategy that has paused
   * after completing a segment of the update.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param clusterContinueUpdateVersionParameters The request body.
   * @param options The options parameters.
   */
  beginContinueUpdateVersion(
    resourceGroupName: string,
    clusterName: string,
    clusterContinueUpdateVersionParameters: ClusterContinueUpdateVersionParameters,
    options?: ClustersContinueUpdateVersionOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ClustersContinueUpdateVersionResponse>,
      ClustersContinueUpdateVersionResponse
    >
  >;
  /**
   * Trigger the continuation of an update for a cluster with a matching update strategy that has paused
   * after completing a segment of the update.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param clusterContinueUpdateVersionParameters The request body.
   * @param options The options parameters.
   */
  beginContinueUpdateVersionAndWait(
    resourceGroupName: string,
    clusterName: string,
    clusterContinueUpdateVersionParameters: ClusterContinueUpdateVersionParameters,
    options?: ClustersContinueUpdateVersionOptionalParams,
  ): Promise<ClustersContinueUpdateVersionResponse>;
  /**
   * Deploy the cluster using the rack configuration provided during creation.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param options The options parameters.
   */
  beginDeploy(
    resourceGroupName: string,
    clusterName: string,
    options?: ClustersDeployOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ClustersDeployResponse>,
      ClustersDeployResponse
    >
  >;
  /**
   * Deploy the cluster using the rack configuration provided during creation.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param options The options parameters.
   */
  beginDeployAndWait(
    resourceGroupName: string,
    clusterName: string,
    options?: ClustersDeployOptionalParams,
  ): Promise<ClustersDeployResponse>;
  /**
   * Triggers the execution of a runtime protection scan to detect and remediate detected issues, in
   * accordance with the cluster configuration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param options The options parameters.
   */
  beginScanRuntime(
    resourceGroupName: string,
    clusterName: string,
    options?: ClustersScanRuntimeOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ClustersScanRuntimeResponse>,
      ClustersScanRuntimeResponse
    >
  >;
  /**
   * Triggers the execution of a runtime protection scan to detect and remediate detected issues, in
   * accordance with the cluster configuration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param options The options parameters.
   */
  beginScanRuntimeAndWait(
    resourceGroupName: string,
    clusterName: string,
    options?: ClustersScanRuntimeOptionalParams,
  ): Promise<ClustersScanRuntimeResponse>;
  /**
   * Update the version of the provided cluster to one of the available supported versions.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param clusterUpdateVersionParameters The request body.
   * @param options The options parameters.
   */
  beginUpdateVersion(
    resourceGroupName: string,
    clusterName: string,
    clusterUpdateVersionParameters: ClusterUpdateVersionParameters,
    options?: ClustersUpdateVersionOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ClustersUpdateVersionResponse>,
      ClustersUpdateVersionResponse
    >
  >;
  /**
   * Update the version of the provided cluster to one of the available supported versions.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param clusterUpdateVersionParameters The request body.
   * @param options The options parameters.
   */
  beginUpdateVersionAndWait(
    resourceGroupName: string,
    clusterName: string,
    clusterUpdateVersionParameters: ClusterUpdateVersionParameters,
    options?: ClustersUpdateVersionOptionalParams,
  ): Promise<ClustersUpdateVersionResponse>;
}
