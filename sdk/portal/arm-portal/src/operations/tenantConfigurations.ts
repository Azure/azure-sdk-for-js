/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { TenantConfigurations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { Portal } from "../portal";
import {
  Configuration,
  TenantConfigurationsListNextOptionalParams,
  TenantConfigurationsListOptionalParams,
  TenantConfigurationsListResponse,
  ConfigurationName,
  TenantConfigurationsGetOptionalParams,
  TenantConfigurationsGetResponse,
  TenantConfigurationsCreateOptionalParams,
  TenantConfigurationsCreateResponse,
  TenantConfigurationsDeleteOptionalParams,
  TenantConfigurationsListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing TenantConfigurations operations. */
export class TenantConfigurationsImpl implements TenantConfigurations {
  private readonly client: Portal;

  /**
   * Initialize a new instance of the class TenantConfigurations class.
   * @param client Reference to the service client
   */
  constructor(client: Portal) {
    this.client = client;
  }

  /**
   * Gets list of the tenant configurations.
   * @param options The options parameters.
   */
  public list(
    options?: TenantConfigurationsListOptionalParams
  ): PagedAsyncIterableIterator<Configuration> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(options, settings);
      }
    };
  }

  private async *listPagingPage(
    options?: TenantConfigurationsListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Configuration[]> {
    let result: TenantConfigurationsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    options?: TenantConfigurationsListOptionalParams
  ): AsyncIterableIterator<Configuration> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets list of the tenant configurations.
   * @param options The options parameters.
   */
  private _list(
    options?: TenantConfigurationsListOptionalParams
  ): Promise<TenantConfigurationsListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Gets the tenant configuration.
   * @param configurationName The configuration name. Value must be 'default'
   * @param options The options parameters.
   */
  get(
    configurationName: ConfigurationName,
    options?: TenantConfigurationsGetOptionalParams
  ): Promise<TenantConfigurationsGetResponse> {
    return this.client.sendOperationRequest(
      { configurationName, options },
      getOperationSpec
    );
  }

  /**
   * Create the tenant configuration. If configuration already exists - update it. User has to be a
   * Tenant Admin for this operation.
   * @param configurationName The configuration name. Value must be 'default'
   * @param tenantConfiguration The parameters required to create or update tenant configuration.
   * @param options The options parameters.
   */
  create(
    configurationName: ConfigurationName,
    tenantConfiguration: Configuration,
    options?: TenantConfigurationsCreateOptionalParams
  ): Promise<TenantConfigurationsCreateResponse> {
    return this.client.sendOperationRequest(
      { configurationName, tenantConfiguration, options },
      createOperationSpec
    );
  }

  /**
   * Delete the tenant configuration. User has to be a Tenant Admin for this operation.
   * @param configurationName The configuration name. Value must be 'default'
   * @param options The options parameters.
   */
  delete(
    configurationName: ConfigurationName,
    options?: TenantConfigurationsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { configurationName, options },
      deleteOperationSpec
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: TenantConfigurationsListNextOptionalParams
  ): Promise<TenantConfigurationsListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Portal/tenantConfigurations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigurationList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Portal/tenantConfigurations/{configurationName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Configuration
    },
    404: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.configurationName],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Portal/tenantConfigurations/{configurationName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Configuration
    },
    201: {
      bodyMapper: Mappers.Configuration
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.tenantConfiguration,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.configurationName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Portal/tenantConfigurations/{configurationName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.configurationName],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigurationList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
