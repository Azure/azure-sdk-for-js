/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const ResourceProviderOperationList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceProviderOperationList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceProviderOperation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceProviderOperation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceProviderOperation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "ResourceProviderOperationDisplay"
        }
      }
    }
  }
};

export const ResourceProviderOperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceProviderOperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDefinition"
        }
      }
    }
  }
};

export const ErrorDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDefinition",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDefinition"
            }
          }
        }
      }
    }
  }
};

export const Dashboard: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Dashboard",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      lenses: {
        serializedName: "properties.lenses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DashboardLens"
            }
          }
        }
      },
      metadata: {
        serializedName: "properties.metadata",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "any" } } }
          }
        }
      }
    }
  }
};

export const DashboardLens: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DashboardLens",
    modelProperties: {
      order: {
        serializedName: "order",
        required: true,
        type: {
          name: "Number"
        }
      },
      parts: {
        serializedName: "parts",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DashboardParts"
            }
          }
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "any" } } }
          }
        }
      }
    }
  }
};

export const DashboardParts: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DashboardParts",
    modelProperties: {
      position: {
        serializedName: "position",
        type: {
          name: "Composite",
          className: "DashboardPartsPosition"
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Composite",
          className: "DashboardPartMetadata"
        }
      }
    }
  }
};

export const DashboardPartsPosition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DashboardPartsPosition",
    modelProperties: {
      x: {
        serializedName: "x",
        required: true,
        type: {
          name: "Number"
        }
      },
      y: {
        serializedName: "y",
        required: true,
        type: {
          name: "Number"
        }
      },
      rowSpan: {
        serializedName: "rowSpan",
        required: true,
        type: {
          name: "Number"
        }
      },
      colSpan: {
        serializedName: "colSpan",
        required: true,
        type: {
          name: "Number"
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "any" } } }
          }
        }
      }
    }
  }
};

export const DashboardPartMetadata: coreClient.CompositeMapper = {
  serializedName: "DashboardPartMetadata",
  type: {
    name: "Composite",
    className: "DashboardPartMetadata",
    uberParent: "DashboardPartMetadata",
    additionalProperties: { type: { name: "Object" } },
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PatchableDashboard: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PatchableDashboard",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      lenses: {
        serializedName: "properties.lenses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DashboardLens"
            }
          }
        }
      },
      metadata: {
        serializedName: "properties.metadata",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "any" } } }
          }
        }
      }
    }
  }
};

export const DashboardListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DashboardListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Dashboard"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConfigurationList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigurationList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Configuration"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ViolationsList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ViolationsList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Violation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Violation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Violation",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      userId: {
        serializedName: "userId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MarkdownPartMetadataSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MarkdownPartMetadataSettings",
    modelProperties: {
      content: {
        serializedName: "content",
        type: {
          name: "Composite",
          className: "MarkdownPartMetadataSettingsContent"
        }
      }
    }
  }
};

export const MarkdownPartMetadataSettingsContent: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MarkdownPartMetadataSettingsContent",
    modelProperties: {
      settings: {
        serializedName: "settings",
        type: {
          name: "Composite",
          className: "MarkdownPartMetadataSettingsContentSettings"
        }
      }
    }
  }
};

export const MarkdownPartMetadataSettingsContentSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MarkdownPartMetadataSettingsContentSettings",
    modelProperties: {
      content: {
        serializedName: "content",
        type: {
          name: "String"
        }
      },
      title: {
        serializedName: "title",
        type: {
          name: "String"
        }
      },
      subtitle: {
        serializedName: "subtitle",
        type: {
          name: "String"
        }
      },
      markdownSource: {
        serializedName: "markdownSource",
        type: {
          name: "Number"
        }
      },
      markdownUri: {
        serializedName: "markdownUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MarkdownPartMetadata: coreClient.CompositeMapper = {
  serializedName: "Extension/HubsExtension/PartType/MarkdownPart",
  type: {
    name: "Composite",
    className: "MarkdownPartMetadata",
    uberParent: "DashboardPartMetadata",
    additionalProperties: { type: { name: "Object" } },
    polymorphicDiscriminator:
      DashboardPartMetadata.type.polymorphicDiscriminator,
    modelProperties: {
      ...DashboardPartMetadata.type.modelProperties,
      inputs: {
        serializedName: "inputs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Dictionary",
              value: { type: { name: "any" } }
            }
          }
        }
      },
      settings: {
        serializedName: "settings",
        type: {
          name: "Composite",
          className: "MarkdownPartMetadataSettings"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const Configuration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Configuration",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      enforcePrivateMarkdownStorage: {
        serializedName: "properties.enforcePrivateMarkdownStorage",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export let discriminators = {
  DashboardPartMetadata: DashboardPartMetadata,
  "DashboardPartMetadata.Extension/HubsExtension/PartType/MarkdownPart": MarkdownPartMetadata
};
