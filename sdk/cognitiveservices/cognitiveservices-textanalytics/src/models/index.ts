/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */


import * as msRest from "@azure/ms-rest-js";

/**
 * An interface representing MultiLanguageInput.
 */
export interface MultiLanguageInput {
  /**
   * This is the 2 letter ISO 639-1 representation of a language. For example, use "en" for
   * English; "es" for Spanish etc.,
   */
  language?: string;
  /**
   * Unique, non-empty document identifier.
   */
  id?: string;
  text?: string;
}

/**
 * An interface representing MultiLanguageBatchInput.
 */
export interface MultiLanguageBatchInput {
  documents?: MultiLanguageInput[];
}

/**
 * An interface representing MatchRecord.
 */
export interface MatchRecord {
  /**
   * (optional) If a well-known item with Wikipedia link is recognized, a decimal number denoting
   * the confidence level of the Wikipedia info will be returned.
   */
  wikipediaScore?: number;
  /**
   * (optional) If an entity type is recognized, a decimal number denoting the confidence level of
   * the entity type will be returned.
   */
  entityTypeScore?: number;
  /**
   * Entity text as appears in the request.
   */
  text?: string;
  /**
   * Start position (in Unicode characters) for the entity match text.
   */
  offset?: number;
  /**
   * Length (in Unicode characters) for the entity match text.
   */
  length?: number;
}

/**
 * An interface representing EntityRecord.
 */
export interface EntityRecord {
  /**
   * Entity formal name.
   */
  name?: string;
  /**
   * List of instances this entity appears in the text.
   */
  matches?: MatchRecord[];
  /**
   * Wikipedia language for which the WikipediaId and WikipediaUrl refers to.
   */
  wikipediaLanguage?: string;
  /**
   * Wikipedia unique identifier of the recognized entity.
   */
  wikipediaId?: string;
  /**
   * URL for the entity's Wikipedia page.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly wikipediaUrl?: string;
  /**
   * Bing unique identifier of the recognized entity. Use in conjunction with the Bing Entity
   * Search API to fetch additional relevant information.
   */
  bingId?: string;
  /**
   * Entity type from Named Entity Recognition model
   */
  type?: string;
  /**
   * Entity sub type from Named Entity Recognition model
   */
  subType?: string;
}

/**
 * An interface representing DocumentStatistics.
 */
export interface DocumentStatistics {
  /**
   * Number of text elements recognized in the document.
   */
  charactersCount?: number;
  /**
   * Number of transactions for the document.
   */
  transactionsCount?: number;
}

/**
 * An interface representing EntitiesBatchResultItem.
 */
export interface EntitiesBatchResultItem {
  /**
   * Unique, non-empty document identifier.
   */
  id?: string;
  /**
   * Recognized entities in the document.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly entities?: EntityRecord[];
  /**
   * (Optional) if showStats=true was specified in the request this field will contain information
   * about the document payload.
   */
  statistics?: DocumentStatistics;
}

/**
 * An interface representing ErrorRecord.
 */
export interface ErrorRecord {
  /**
   * Input document unique identifier the error refers to.
   */
  id?: string;
  /**
   * Error message.
   */
  message?: string;
}

/**
 * An interface representing RequestStatistics.
 */
export interface RequestStatistics {
  /**
   * Number of documents submitted in the request.
   */
  documentsCount?: number;
  /**
   * Number of valid documents. This excludes empty, over-size limit or non-supported languages
   * documents.
   */
  validDocumentsCount?: number;
  /**
   * Number of invalid documents. This includes empty, over-size limit or non-supported languages
   * documents.
   */
  erroneousDocumentsCount?: number;
  /**
   * Number of transactions for the request.
   */
  transactionsCount?: number;
}

/**
 * An interface representing EntitiesBatchResult.
 */
export interface EntitiesBatchResult {
  /**
   * Response by document
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly documents?: EntitiesBatchResultItem[];
  /**
   * Errors and Warnings by document
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ErrorRecord[];
  /**
   * (Optional) if showStats=true was specified in the request this field will contain information
   * about the request payload.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly statistics?: RequestStatistics;
}

/**
 * An interface representing InternalError.
 */
export interface InternalError {
  code?: string;
  message?: string;
  innerError?: InternalError;
}

/**
 * An interface representing ErrorResponse.
 */
export interface ErrorResponse {
  code?: string;
  message?: string;
  target?: string;
  innerError?: InternalError;
}

/**
 * An interface representing KeyPhraseBatchResultItem.
 */
export interface KeyPhraseBatchResultItem {
  /**
   * Unique, non-empty document identifier.
   */
  id?: string;
  /**
   * A list of representative words or phrases. The number of key phrases returned is proportional
   * to the number of words in the input document.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly keyPhrases?: string[];
  /**
   * (Optional) if showStats=true was specified in the request this field will contain information
   * about the document payload.
   */
  statistics?: DocumentStatistics;
}

/**
 * An interface representing KeyPhraseBatchResult.
 */
export interface KeyPhraseBatchResult {
  /**
   * Response by document
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly documents?: KeyPhraseBatchResultItem[];
  /**
   * Errors and Warnings by document
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ErrorRecord[];
  /**
   * =(Optional) if showStats=true was specified in the request this field will contain information
   * about the request payload.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly statistics?: RequestStatistics;
}

/**
 * An interface representing LanguageInput.
 */
export interface LanguageInput {
  countryHint?: string;
  /**
   * Unique, non-empty document identifier.
   */
  id?: string;
  text?: string;
}

/**
 * An interface representing LanguageBatchInput.
 */
export interface LanguageBatchInput {
  documents?: LanguageInput[];
}

/**
 * An interface representing DetectedLanguage.
 */
export interface DetectedLanguage {
  /**
   * Long name of a detected language (e.g. English, French).
   */
  name?: string;
  /**
   * A two letter representation of the detected language according to the ISO 639-1 standard (e.g.
   * en, fr).
   */
  iso6391Name?: string;
  /**
   * A confidence score between 0 and 1. Scores close to 1 indicate 100% certainty that the
   * identified language is true.
   */
  score?: number;
}

/**
 * An interface representing LanguageBatchResultItem.
 */
export interface LanguageBatchResultItem {
  /**
   * Unique, non-empty document identifier.
   */
  id?: string;
  /**
   * A list of extracted languages.
   */
  detectedLanguages?: DetectedLanguage[];
  /**
   * (Optional) if showStats=true was specified in the request this field will contain information
   * about the document payload.
   */
  statistics?: DocumentStatistics;
}

/**
 * An interface representing LanguageBatchResult.
 */
export interface LanguageBatchResult {
  /**
   * Response by document
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly documents?: LanguageBatchResultItem[];
  /**
   * Errors and Warnings by document
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ErrorRecord[];
  /**
   * (Optional) if showStats=true was specified in the request this field will contain information
   * about the request payload.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly statistics?: RequestStatistics;
}

/**
 * An interface representing SentimentBatchResultItem.
 */
export interface SentimentBatchResultItem {
  /**
   * Unique, non-empty document identifier.
   */
  id?: string;
  /**
   * A decimal number between 0 and 1 denoting the sentiment of the document. A score above 0.7
   * usually refers to a positive document while a score below 0.3 normally has a negative
   * connotation. Mid values refer to neutral text.
   */
  score?: number;
  /**
   * (Optional) if showStats=true was specified in the request this field will contain information
   * about the document payload.
   */
  statistics?: DocumentStatistics;
}

/**
 * An interface representing SentimentBatchResult.
 */
export interface SentimentBatchResult {
  /**
   * Response by document
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly documents?: SentimentBatchResultItem[];
  /**
   * Errors and Warnings by document
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ErrorRecord[];
  /**
   * (Optional) if showStats=true was specified in the request this field will contain information
   * about the request payload.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly statistics?: RequestStatistics;
}

/**
 * Optional Parameters.
 */
export interface TextAnalyticsClientDetectLanguageOptionalParams extends msRest.RequestOptionsBase {
  /**
   * (optional) if set to true, response will contain input and document level statistics.
   */
  showStats?: boolean;
  /**
   * Collection of documents to analyze.
   */
  languageBatchInput?: LanguageBatchInput;
}

/**
 * Optional Parameters.
 */
export interface TextAnalyticsClientEntitiesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * (optional) if set to true, response will contain input and document level statistics.
   */
  showStats?: boolean;
  /**
   * Collection of documents to analyze.
   */
  multiLanguageBatchInput?: MultiLanguageBatchInput;
}

/**
 * Optional Parameters.
 */
export interface TextAnalyticsClientKeyPhrasesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * (optional) if set to true, response will contain input and document level statistics.
   */
  showStats?: boolean;
  /**
   * Collection of documents to analyze. Documents can now contain a language field to indicate the
   * text language
   */
  multiLanguageBatchInput?: MultiLanguageBatchInput;
}

/**
 * Optional Parameters.
 */
export interface TextAnalyticsClientSentimentOptionalParams extends msRest.RequestOptionsBase {
  /**
   * (optional) if set to true, response will contain input and document level statistics.
   */
  showStats?: boolean;
  /**
   * Collection of documents to analyze.
   */
  multiLanguageBatchInput?: MultiLanguageBatchInput;
}

/**
 * Contains response data for the detectLanguage operation.
 */
export type DetectLanguageResponse = LanguageBatchResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LanguageBatchResult;
    };
};

/**
 * Contains response data for the entities operation.
 */
export type EntitiesResponse = EntitiesBatchResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EntitiesBatchResult;
    };
};

/**
 * Contains response data for the keyPhrases operation.
 */
export type KeyPhrasesResponse = KeyPhraseBatchResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: KeyPhraseBatchResult;
    };
};

/**
 * Contains response data for the sentiment operation.
 */
export type SentimentResponse = {
  /**
   * The parsed response body.
   */
  body: any;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: any;
    };
};
