"use strict";
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
var msRest = require("@azure/ms-rest-js");
var Mappers = require("../models/permissionsMappers");
var Parameters = require("../models/parameters");
/** Class representing a Permissions. */
var Permissions = /** @class */ (function () {
    /**
     * Create a Permissions.
     * @param {LUISAuthoringClientContext} client Reference to the service client.
     */
    function Permissions(client) {
        this.client = client;
    }
    Permissions.prototype.list = function (appId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            options: options
        }, listOperationSpec, callback);
    };
    Permissions.prototype.add = function (appId, userToAdd, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            userToAdd: userToAdd,
            options: options
        }, addOperationSpec, callback);
    };
    Permissions.prototype.deleteMethod = function (appId, userToDelete, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            userToDelete: userToDelete,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    Permissions.prototype.update = function (appId, collaborators, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            collaborators: collaborators,
            options: options
        }, updateOperationSpec, callback);
    };
    return Permissions;
}());
exports.Permissions = Permissions;
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/permissions",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.UserAccessList
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var addOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/permissions",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId
    ],
    requestBody: {
        parameterPath: "userToAdd",
        mapper: __assign(__assign({}, Mappers.UserCollaborator), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/permissions",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId
    ],
    requestBody: {
        parameterPath: "userToDelete",
        mapper: __assign(__assign({}, Mappers.UserCollaborator), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var updateOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/permissions",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId
    ],
    requestBody: {
        parameterPath: "collaborators",
        mapper: __assign(__assign({}, Mappers.CollaboratorsArray), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
