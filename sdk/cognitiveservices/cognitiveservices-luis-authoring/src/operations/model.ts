/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/modelMappers";
import * as Parameters from "../models/parameters";
import { LUISAuthoringClientContext } from "../lUISAuthoringClientContext";

/** Class representing a Model. */
export class Model {
  private readonly client: LUISAuthoringClientContext;

  /**
   * Create a Model.
   * @param {LUISAuthoringClientContext} client Reference to the service client.
   */
  constructor(client: LUISAuthoringClientContext) {
    this.client = client;
  }

  /**
   * Adds an intent to a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param intentCreateObject A model object containing the name of the new intent.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelAddIntentResponse>
   */
  addIntent(appId: string, versionId: string, intentCreateObject: Models.ModelCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelAddIntentResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param intentCreateObject A model object containing the name of the new intent.
   * @param callback The callback
   */
  addIntent(appId: string, versionId: string, intentCreateObject: Models.ModelCreateObject, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param intentCreateObject A model object containing the name of the new intent.
   * @param options The optional parameters
   * @param callback The callback
   */
  addIntent(appId: string, versionId: string, intentCreateObject: Models.ModelCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  addIntent(appId: string, versionId: string, intentCreateObject: Models.ModelCreateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ModelAddIntentResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        intentCreateObject,
        options
      },
      addIntentOperationSpec,
      callback) as Promise<Models.ModelAddIntentResponse>;
  }

  /**
   * Gets information about the intent models in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelListIntentsResponse>
   */
  listIntents(appId: string, versionId: string, options?: Models.ModelListIntentsOptionalParams): Promise<Models.ModelListIntentsResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param callback The callback
   */
  listIntents(appId: string, versionId: string, callback: msRest.ServiceCallback<Models.IntentClassifier[]>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  listIntents(appId: string, versionId: string, options: Models.ModelListIntentsOptionalParams, callback: msRest.ServiceCallback<Models.IntentClassifier[]>): void;
  listIntents(appId: string, versionId: string, options?: Models.ModelListIntentsOptionalParams | msRest.ServiceCallback<Models.IntentClassifier[]>, callback?: msRest.ServiceCallback<Models.IntentClassifier[]>): Promise<Models.ModelListIntentsResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        options
      },
      listIntentsOperationSpec,
      callback) as Promise<Models.ModelListIntentsResponse>;
  }

  /**
   * Adds an entity extractor to a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityModelCreateObject A model object containing the name of the new entity extractor
   * and its children.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelAddEntityResponse>
   */
  addEntity(appId: string, versionId: string, entityModelCreateObject: Models.EntityModelCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelAddEntityResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityModelCreateObject A model object containing the name of the new entity extractor
   * and its children.
   * @param callback The callback
   */
  addEntity(appId: string, versionId: string, entityModelCreateObject: Models.EntityModelCreateObject, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityModelCreateObject A model object containing the name of the new entity extractor
   * and its children.
   * @param options The optional parameters
   * @param callback The callback
   */
  addEntity(appId: string, versionId: string, entityModelCreateObject: Models.EntityModelCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  addEntity(appId: string, versionId: string, entityModelCreateObject: Models.EntityModelCreateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ModelAddEntityResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityModelCreateObject,
        options
      },
      addEntityOperationSpec,
      callback) as Promise<Models.ModelAddEntityResponse>;
  }

  /**
   * Gets information about all the simple entity models in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelListEntitiesResponse>
   */
  listEntities(appId: string, versionId: string, options?: Models.ModelListEntitiesOptionalParams): Promise<Models.ModelListEntitiesResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param callback The callback
   */
  listEntities(appId: string, versionId: string, callback: msRest.ServiceCallback<Models.NDepthEntityExtractor[]>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  listEntities(appId: string, versionId: string, options: Models.ModelListEntitiesOptionalParams, callback: msRest.ServiceCallback<Models.NDepthEntityExtractor[]>): void;
  listEntities(appId: string, versionId: string, options?: Models.ModelListEntitiesOptionalParams | msRest.ServiceCallback<Models.NDepthEntityExtractor[]>, callback?: msRest.ServiceCallback<Models.NDepthEntityExtractor[]>): Promise<Models.ModelListEntitiesResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        options
      },
      listEntitiesOperationSpec,
      callback) as Promise<Models.ModelListEntitiesResponse>;
  }

  /**
   * Gets information about all the hierarchical entity models in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelListHierarchicalEntitiesResponse>
   */
  listHierarchicalEntities(appId: string, versionId: string, options?: Models.ModelListHierarchicalEntitiesOptionalParams): Promise<Models.ModelListHierarchicalEntitiesResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param callback The callback
   */
  listHierarchicalEntities(appId: string, versionId: string, callback: msRest.ServiceCallback<Models.HierarchicalEntityExtractor[]>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  listHierarchicalEntities(appId: string, versionId: string, options: Models.ModelListHierarchicalEntitiesOptionalParams, callback: msRest.ServiceCallback<Models.HierarchicalEntityExtractor[]>): void;
  listHierarchicalEntities(appId: string, versionId: string, options?: Models.ModelListHierarchicalEntitiesOptionalParams | msRest.ServiceCallback<Models.HierarchicalEntityExtractor[]>, callback?: msRest.ServiceCallback<Models.HierarchicalEntityExtractor[]>): Promise<Models.ModelListHierarchicalEntitiesResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        options
      },
      listHierarchicalEntitiesOperationSpec,
      callback) as Promise<Models.ModelListHierarchicalEntitiesResponse>;
  }

  /**
   * Gets information about all the composite entity models in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelListCompositeEntitiesResponse>
   */
  listCompositeEntities(appId: string, versionId: string, options?: Models.ModelListCompositeEntitiesOptionalParams): Promise<Models.ModelListCompositeEntitiesResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param callback The callback
   */
  listCompositeEntities(appId: string, versionId: string, callback: msRest.ServiceCallback<Models.CompositeEntityExtractor[]>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  listCompositeEntities(appId: string, versionId: string, options: Models.ModelListCompositeEntitiesOptionalParams, callback: msRest.ServiceCallback<Models.CompositeEntityExtractor[]>): void;
  listCompositeEntities(appId: string, versionId: string, options?: Models.ModelListCompositeEntitiesOptionalParams | msRest.ServiceCallback<Models.CompositeEntityExtractor[]>, callback?: msRest.ServiceCallback<Models.CompositeEntityExtractor[]>): Promise<Models.ModelListCompositeEntitiesResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        options
      },
      listCompositeEntitiesOperationSpec,
      callback) as Promise<Models.ModelListCompositeEntitiesResponse>;
  }

  /**
   * Gets information about all the list entity models in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelListClosedListsResponse>
   */
  listClosedLists(appId: string, versionId: string, options?: Models.ModelListClosedListsOptionalParams): Promise<Models.ModelListClosedListsResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param callback The callback
   */
  listClosedLists(appId: string, versionId: string, callback: msRest.ServiceCallback<Models.ClosedListEntityExtractor[]>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  listClosedLists(appId: string, versionId: string, options: Models.ModelListClosedListsOptionalParams, callback: msRest.ServiceCallback<Models.ClosedListEntityExtractor[]>): void;
  listClosedLists(appId: string, versionId: string, options?: Models.ModelListClosedListsOptionalParams | msRest.ServiceCallback<Models.ClosedListEntityExtractor[]>, callback?: msRest.ServiceCallback<Models.ClosedListEntityExtractor[]>): Promise<Models.ModelListClosedListsResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        options
      },
      listClosedListsOperationSpec,
      callback) as Promise<Models.ModelListClosedListsResponse>;
  }

  /**
   * Adds a list entity model to a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param closedListModelCreateObject A model containing the name and words for the new list entity
   * extractor.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelAddClosedListResponse>
   */
  addClosedList(appId: string, versionId: string, closedListModelCreateObject: Models.ClosedListModelCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelAddClosedListResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param closedListModelCreateObject A model containing the name and words for the new list entity
   * extractor.
   * @param callback The callback
   */
  addClosedList(appId: string, versionId: string, closedListModelCreateObject: Models.ClosedListModelCreateObject, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param closedListModelCreateObject A model containing the name and words for the new list entity
   * extractor.
   * @param options The optional parameters
   * @param callback The callback
   */
  addClosedList(appId: string, versionId: string, closedListModelCreateObject: Models.ClosedListModelCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  addClosedList(appId: string, versionId: string, closedListModelCreateObject: Models.ClosedListModelCreateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ModelAddClosedListResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        closedListModelCreateObject,
        options
      },
      addClosedListOperationSpec,
      callback) as Promise<Models.ModelAddClosedListResponse>;
  }

  /**
   * Adds a list of prebuilt entities to a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param prebuiltExtractorNames An array of prebuilt entity extractor names.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelAddPrebuiltResponse>
   */
  addPrebuilt(appId: string, versionId: string, prebuiltExtractorNames: string[], options?: msRest.RequestOptionsBase): Promise<Models.ModelAddPrebuiltResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param prebuiltExtractorNames An array of prebuilt entity extractor names.
   * @param callback The callback
   */
  addPrebuilt(appId: string, versionId: string, prebuiltExtractorNames: string[], callback: msRest.ServiceCallback<Models.PrebuiltEntityExtractor[]>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param prebuiltExtractorNames An array of prebuilt entity extractor names.
   * @param options The optional parameters
   * @param callback The callback
   */
  addPrebuilt(appId: string, versionId: string, prebuiltExtractorNames: string[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PrebuiltEntityExtractor[]>): void;
  addPrebuilt(appId: string, versionId: string, prebuiltExtractorNames: string[], options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PrebuiltEntityExtractor[]>, callback?: msRest.ServiceCallback<Models.PrebuiltEntityExtractor[]>): Promise<Models.ModelAddPrebuiltResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        prebuiltExtractorNames,
        options
      },
      addPrebuiltOperationSpec,
      callback) as Promise<Models.ModelAddPrebuiltResponse>;
  }

  /**
   * Gets information about all the prebuilt entities in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelListPrebuiltsResponse>
   */
  listPrebuilts(appId: string, versionId: string, options?: Models.ModelListPrebuiltsOptionalParams): Promise<Models.ModelListPrebuiltsResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param callback The callback
   */
  listPrebuilts(appId: string, versionId: string, callback: msRest.ServiceCallback<Models.PrebuiltEntityExtractor[]>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  listPrebuilts(appId: string, versionId: string, options: Models.ModelListPrebuiltsOptionalParams, callback: msRest.ServiceCallback<Models.PrebuiltEntityExtractor[]>): void;
  listPrebuilts(appId: string, versionId: string, options?: Models.ModelListPrebuiltsOptionalParams | msRest.ServiceCallback<Models.PrebuiltEntityExtractor[]>, callback?: msRest.ServiceCallback<Models.PrebuiltEntityExtractor[]>): Promise<Models.ModelListPrebuiltsResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        options
      },
      listPrebuiltsOperationSpec,
      callback) as Promise<Models.ModelListPrebuiltsResponse>;
  }

  /**
   * Gets all the available prebuilt entities in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelListPrebuiltEntitiesResponse>
   */
  listPrebuiltEntities(appId: string, versionId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelListPrebuiltEntitiesResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param callback The callback
   */
  listPrebuiltEntities(appId: string, versionId: string, callback: msRest.ServiceCallback<Models.AvailablePrebuiltEntityModel[]>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  listPrebuiltEntities(appId: string, versionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AvailablePrebuiltEntityModel[]>): void;
  listPrebuiltEntities(appId: string, versionId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AvailablePrebuiltEntityModel[]>, callback?: msRest.ServiceCallback<Models.AvailablePrebuiltEntityModel[]>): Promise<Models.ModelListPrebuiltEntitiesResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        options
      },
      listPrebuiltEntitiesOperationSpec,
      callback) as Promise<Models.ModelListPrebuiltEntitiesResponse>;
  }

  /**
   * Gets information about all the intent and entity models in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelListModelsResponse>
   */
  listModels(appId: string, versionId: string, options?: Models.ModelListModelsOptionalParams): Promise<Models.ModelListModelsResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param callback The callback
   */
  listModels(appId: string, versionId: string, callback: msRest.ServiceCallback<Models.ModelInfoResponse[]>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  listModels(appId: string, versionId: string, options: Models.ModelListModelsOptionalParams, callback: msRest.ServiceCallback<Models.ModelInfoResponse[]>): void;
  listModels(appId: string, versionId: string, options?: Models.ModelListModelsOptionalParams | msRest.ServiceCallback<Models.ModelInfoResponse[]>, callback?: msRest.ServiceCallback<Models.ModelInfoResponse[]>): Promise<Models.ModelListModelsResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        options
      },
      listModelsOperationSpec,
      callback) as Promise<Models.ModelListModelsResponse>;
  }

  /**
   * Gets the example utterances for the given intent or entity model in a version of the
   * application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param modelId The ID (GUID) of the model.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelExamplesMethodResponse>
   */
  examplesMethod(appId: string, versionId: string, modelId: string, options?: Models.ModelExamplesMethodOptionalParams): Promise<Models.ModelExamplesMethodResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param modelId The ID (GUID) of the model.
   * @param callback The callback
   */
  examplesMethod(appId: string, versionId: string, modelId: string, callback: msRest.ServiceCallback<Models.LabelTextObject[]>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param modelId The ID (GUID) of the model.
   * @param options The optional parameters
   * @param callback The callback
   */
  examplesMethod(appId: string, versionId: string, modelId: string, options: Models.ModelExamplesMethodOptionalParams, callback: msRest.ServiceCallback<Models.LabelTextObject[]>): void;
  examplesMethod(appId: string, versionId: string, modelId: string, options?: Models.ModelExamplesMethodOptionalParams | msRest.ServiceCallback<Models.LabelTextObject[]>, callback?: msRest.ServiceCallback<Models.LabelTextObject[]>): Promise<Models.ModelExamplesMethodResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        modelId,
        options
      },
      examplesMethodOperationSpec,
      callback) as Promise<Models.ModelExamplesMethodResponse>;
  }

  /**
   * Gets information about the intent model in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param intentId The intent classifier ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelGetIntentResponse>
   */
  getIntent(appId: string, versionId: string, intentId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetIntentResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param intentId The intent classifier ID.
   * @param callback The callback
   */
  getIntent(appId: string, versionId: string, intentId: string, callback: msRest.ServiceCallback<Models.IntentClassifier>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param intentId The intent classifier ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  getIntent(appId: string, versionId: string, intentId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IntentClassifier>): void;
  getIntent(appId: string, versionId: string, intentId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IntentClassifier>, callback?: msRest.ServiceCallback<Models.IntentClassifier>): Promise<Models.ModelGetIntentResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        intentId,
        options
      },
      getIntentOperationSpec,
      callback) as Promise<Models.ModelGetIntentResponse>;
  }

  /**
   * Updates the name of an intent in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param intentId The intent classifier ID.
   * @param modelUpdateObject A model object containing the new intent name.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelUpdateIntentResponse>
   */
  updateIntent(appId: string, versionId: string, intentId: string, modelUpdateObject: Models.ModelUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelUpdateIntentResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param intentId The intent classifier ID.
   * @param modelUpdateObject A model object containing the new intent name.
   * @param callback The callback
   */
  updateIntent(appId: string, versionId: string, intentId: string, modelUpdateObject: Models.ModelUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param intentId The intent classifier ID.
   * @param modelUpdateObject A model object containing the new intent name.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateIntent(appId: string, versionId: string, intentId: string, modelUpdateObject: Models.ModelUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  updateIntent(appId: string, versionId: string, intentId: string, modelUpdateObject: Models.ModelUpdateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelUpdateIntentResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        intentId,
        modelUpdateObject,
        options
      },
      updateIntentOperationSpec,
      callback) as Promise<Models.ModelUpdateIntentResponse>;
  }

  /**
   * Deletes an intent from a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param intentId The intent classifier ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelDeleteIntentResponse>
   */
  deleteIntent(appId: string, versionId: string, intentId: string, options?: Models.ModelDeleteIntentOptionalParams): Promise<Models.ModelDeleteIntentResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param intentId The intent classifier ID.
   * @param callback The callback
   */
  deleteIntent(appId: string, versionId: string, intentId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param intentId The intent classifier ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteIntent(appId: string, versionId: string, intentId: string, options: Models.ModelDeleteIntentOptionalParams, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  deleteIntent(appId: string, versionId: string, intentId: string, options?: Models.ModelDeleteIntentOptionalParams | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelDeleteIntentResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        intentId,
        options
      },
      deleteIntentOperationSpec,
      callback) as Promise<Models.ModelDeleteIntentResponse>;
  }

  /**
   * Gets information about an entity model in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity extractor ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelGetEntityResponse>
   */
  getEntity(appId: string, versionId: string, entityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetEntityResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity extractor ID.
   * @param callback The callback
   */
  getEntity(appId: string, versionId: string, entityId: string, callback: msRest.ServiceCallback<Models.NDepthEntityExtractor>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity extractor ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  getEntity(appId: string, versionId: string, entityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NDepthEntityExtractor>): void;
  getEntity(appId: string, versionId: string, entityId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NDepthEntityExtractor>, callback?: msRest.ServiceCallback<Models.NDepthEntityExtractor>): Promise<Models.ModelGetEntityResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        options
      },
      getEntityOperationSpec,
      callback) as Promise<Models.ModelGetEntityResponse>;
  }

  /**
   * Deletes an entity or a child from a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity extractor or the child entity extractor ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelDeleteEntityResponse>
   */
  deleteEntity(appId: string, versionId: string, entityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeleteEntityResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity extractor or the child entity extractor ID.
   * @param callback The callback
   */
  deleteEntity(appId: string, versionId: string, entityId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity extractor or the child entity extractor ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteEntity(appId: string, versionId: string, entityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  deleteEntity(appId: string, versionId: string, entityId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelDeleteEntityResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        options
      },
      deleteEntityOperationSpec,
      callback) as Promise<Models.ModelDeleteEntityResponse>;
  }

  /**
   * Updates the name of an entity extractor or the name and instanceOf model of a child entity
   * extractor.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity extractor or the child entity extractor ID.
   * @param entityModelUpdateObject A model object containing the name new entity extractor or the
   * name and instance of model of a child entity extractor
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelUpdateEntityChildResponse>
   */
  updateEntityChild(appId: string, versionId: string, entityId: string, entityModelUpdateObject: Models.EntityModelUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelUpdateEntityChildResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity extractor or the child entity extractor ID.
   * @param entityModelUpdateObject A model object containing the name new entity extractor or the
   * name and instance of model of a child entity extractor
   * @param callback The callback
   */
  updateEntityChild(appId: string, versionId: string, entityId: string, entityModelUpdateObject: Models.EntityModelUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity extractor or the child entity extractor ID.
   * @param entityModelUpdateObject A model object containing the name new entity extractor or the
   * name and instance of model of a child entity extractor
   * @param options The optional parameters
   * @param callback The callback
   */
  updateEntityChild(appId: string, versionId: string, entityId: string, entityModelUpdateObject: Models.EntityModelUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  updateEntityChild(appId: string, versionId: string, entityId: string, entityModelUpdateObject: Models.EntityModelUpdateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelUpdateEntityChildResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        entityModelUpdateObject,
        options
      },
      updateEntityChildOperationSpec,
      callback) as Promise<Models.ModelUpdateEntityChildResponse>;
  }

  /**
   * Gets the information of the features used by the intent in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param intentId The intent classifier ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelGetIntentFeaturesResponse>
   */
  getIntentFeatures(appId: string, versionId: string, intentId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetIntentFeaturesResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param intentId The intent classifier ID.
   * @param callback The callback
   */
  getIntentFeatures(appId: string, versionId: string, intentId: string, callback: msRest.ServiceCallback<Models.ModelFeatureInformation[]>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param intentId The intent classifier ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  getIntentFeatures(appId: string, versionId: string, intentId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ModelFeatureInformation[]>): void;
  getIntentFeatures(appId: string, versionId: string, intentId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ModelFeatureInformation[]>, callback?: msRest.ServiceCallback<Models.ModelFeatureInformation[]>): Promise<Models.ModelGetIntentFeaturesResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        intentId,
        options
      },
      getIntentFeaturesOperationSpec,
      callback) as Promise<Models.ModelGetIntentFeaturesResponse>;
  }

  /**
   * Updates the information of the features used by the intent in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param intentId The intent classifier ID.
   * @param featureRelationsUpdateObject A list of feature information objects containing the new
   * feature relations.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelReplaceIntentFeaturesResponse>
   */
  replaceIntentFeatures(appId: string, versionId: string, intentId: string, featureRelationsUpdateObject: Models.ModelFeatureInformation[], options?: msRest.RequestOptionsBase): Promise<Models.ModelReplaceIntentFeaturesResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param intentId The intent classifier ID.
   * @param featureRelationsUpdateObject A list of feature information objects containing the new
   * feature relations.
   * @param callback The callback
   */
  replaceIntentFeatures(appId: string, versionId: string, intentId: string, featureRelationsUpdateObject: Models.ModelFeatureInformation[], callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param intentId The intent classifier ID.
   * @param featureRelationsUpdateObject A list of feature information objects containing the new
   * feature relations.
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceIntentFeatures(appId: string, versionId: string, intentId: string, featureRelationsUpdateObject: Models.ModelFeatureInformation[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  replaceIntentFeatures(appId: string, versionId: string, intentId: string, featureRelationsUpdateObject: Models.ModelFeatureInformation[], options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelReplaceIntentFeaturesResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        intentId,
        featureRelationsUpdateObject,
        options
      },
      replaceIntentFeaturesOperationSpec,
      callback) as Promise<Models.ModelReplaceIntentFeaturesResponse>;
  }

  /**
   * Deletes a relation from the feature relations used by the intent in a version of the
   * application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param intentId The intent classifier ID.
   * @param featureRelationDeleteObject A feature information object containing the feature relation
   * to delete.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelDeleteIntentFeatureResponse>
   */
  deleteIntentFeature(appId: string, versionId: string, intentId: string, featureRelationDeleteObject: Models.ModelFeatureInformation, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeleteIntentFeatureResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param intentId The intent classifier ID.
   * @param featureRelationDeleteObject A feature information object containing the feature relation
   * to delete.
   * @param callback The callback
   */
  deleteIntentFeature(appId: string, versionId: string, intentId: string, featureRelationDeleteObject: Models.ModelFeatureInformation, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param intentId The intent classifier ID.
   * @param featureRelationDeleteObject A feature information object containing the feature relation
   * to delete.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteIntentFeature(appId: string, versionId: string, intentId: string, featureRelationDeleteObject: Models.ModelFeatureInformation, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  deleteIntentFeature(appId: string, versionId: string, intentId: string, featureRelationDeleteObject: Models.ModelFeatureInformation, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelDeleteIntentFeatureResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        intentId,
        featureRelationDeleteObject,
        options
      },
      deleteIntentFeatureOperationSpec,
      callback) as Promise<Models.ModelDeleteIntentFeatureResponse>;
  }

  /**
   * Gets the information of the features used by the entity in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity extractor ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelGetEntityFeaturesResponse>
   */
  getEntityFeatures(appId: string, versionId: string, entityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetEntityFeaturesResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity extractor ID.
   * @param callback The callback
   */
  getEntityFeatures(appId: string, versionId: string, entityId: string, callback: msRest.ServiceCallback<Models.ModelFeatureInformation[]>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity extractor ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  getEntityFeatures(appId: string, versionId: string, entityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ModelFeatureInformation[]>): void;
  getEntityFeatures(appId: string, versionId: string, entityId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ModelFeatureInformation[]>, callback?: msRest.ServiceCallback<Models.ModelFeatureInformation[]>): Promise<Models.ModelGetEntityFeaturesResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        options
      },
      getEntityFeaturesOperationSpec,
      callback) as Promise<Models.ModelGetEntityFeaturesResponse>;
  }

  /**
   * Updates the information of the features used by the entity in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity extractor ID.
   * @param featureRelationsUpdateObject A list of feature information objects containing the new
   * feature relations.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelReplaceEntityFeaturesResponse>
   */
  replaceEntityFeatures(appId: string, versionId: string, entityId: string, featureRelationsUpdateObject: Models.ModelFeatureInformation[], options?: msRest.RequestOptionsBase): Promise<Models.ModelReplaceEntityFeaturesResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity extractor ID.
   * @param featureRelationsUpdateObject A list of feature information objects containing the new
   * feature relations.
   * @param callback The callback
   */
  replaceEntityFeatures(appId: string, versionId: string, entityId: string, featureRelationsUpdateObject: Models.ModelFeatureInformation[], callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity extractor ID.
   * @param featureRelationsUpdateObject A list of feature information objects containing the new
   * feature relations.
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceEntityFeatures(appId: string, versionId: string, entityId: string, featureRelationsUpdateObject: Models.ModelFeatureInformation[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  replaceEntityFeatures(appId: string, versionId: string, entityId: string, featureRelationsUpdateObject: Models.ModelFeatureInformation[], options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelReplaceEntityFeaturesResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        featureRelationsUpdateObject,
        options
      },
      replaceEntityFeaturesOperationSpec,
      callback) as Promise<Models.ModelReplaceEntityFeaturesResponse>;
  }

  /**
   * Deletes a relation from the feature relations used by the entity in a version of the
   * application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity extractor ID.
   * @param featureRelationDeleteObject A feature information object containing the feature relation
   * to delete.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelDeleteEntityFeatureResponse>
   */
  deleteEntityFeature(appId: string, versionId: string, entityId: string, featureRelationDeleteObject: Models.ModelFeatureInformation, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeleteEntityFeatureResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity extractor ID.
   * @param featureRelationDeleteObject A feature information object containing the feature relation
   * to delete.
   * @param callback The callback
   */
  deleteEntityFeature(appId: string, versionId: string, entityId: string, featureRelationDeleteObject: Models.ModelFeatureInformation, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity extractor ID.
   * @param featureRelationDeleteObject A feature information object containing the feature relation
   * to delete.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteEntityFeature(appId: string, versionId: string, entityId: string, featureRelationDeleteObject: Models.ModelFeatureInformation, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  deleteEntityFeature(appId: string, versionId: string, entityId: string, featureRelationDeleteObject: Models.ModelFeatureInformation, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelDeleteEntityFeatureResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        featureRelationDeleteObject,
        options
      },
      deleteEntityFeatureOperationSpec,
      callback) as Promise<Models.ModelDeleteEntityFeatureResponse>;
  }

  /**
   * Gets information about a hierarchical entity in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param hEntityId The hierarchical entity extractor ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelGetHierarchicalEntityResponse>
   */
  getHierarchicalEntity(appId: string, versionId: string, hEntityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetHierarchicalEntityResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param hEntityId The hierarchical entity extractor ID.
   * @param callback The callback
   */
  getHierarchicalEntity(appId: string, versionId: string, hEntityId: string, callback: msRest.ServiceCallback<Models.HierarchicalEntityExtractor>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param hEntityId The hierarchical entity extractor ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  getHierarchicalEntity(appId: string, versionId: string, hEntityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HierarchicalEntityExtractor>): void;
  getHierarchicalEntity(appId: string, versionId: string, hEntityId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HierarchicalEntityExtractor>, callback?: msRest.ServiceCallback<Models.HierarchicalEntityExtractor>): Promise<Models.ModelGetHierarchicalEntityResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        hEntityId,
        options
      },
      getHierarchicalEntityOperationSpec,
      callback) as Promise<Models.ModelGetHierarchicalEntityResponse>;
  }

  /**
   * Updates the name of a hierarchical entity model in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param hEntityId The hierarchical entity extractor ID.
   * @param modelUpdateObject Model containing names of the hierarchical entity.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelUpdateHierarchicalEntityResponse>
   */
  updateHierarchicalEntity(appId: string, versionId: string, hEntityId: string, modelUpdateObject: Models.ModelUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelUpdateHierarchicalEntityResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param hEntityId The hierarchical entity extractor ID.
   * @param modelUpdateObject Model containing names of the hierarchical entity.
   * @param callback The callback
   */
  updateHierarchicalEntity(appId: string, versionId: string, hEntityId: string, modelUpdateObject: Models.ModelUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param hEntityId The hierarchical entity extractor ID.
   * @param modelUpdateObject Model containing names of the hierarchical entity.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateHierarchicalEntity(appId: string, versionId: string, hEntityId: string, modelUpdateObject: Models.ModelUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  updateHierarchicalEntity(appId: string, versionId: string, hEntityId: string, modelUpdateObject: Models.ModelUpdateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelUpdateHierarchicalEntityResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        hEntityId,
        modelUpdateObject,
        options
      },
      updateHierarchicalEntityOperationSpec,
      callback) as Promise<Models.ModelUpdateHierarchicalEntityResponse>;
  }

  /**
   * Deletes a hierarchical entity from a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param hEntityId The hierarchical entity extractor ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelDeleteHierarchicalEntityResponse>
   */
  deleteHierarchicalEntity(appId: string, versionId: string, hEntityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeleteHierarchicalEntityResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param hEntityId The hierarchical entity extractor ID.
   * @param callback The callback
   */
  deleteHierarchicalEntity(appId: string, versionId: string, hEntityId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param hEntityId The hierarchical entity extractor ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteHierarchicalEntity(appId: string, versionId: string, hEntityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  deleteHierarchicalEntity(appId: string, versionId: string, hEntityId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelDeleteHierarchicalEntityResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        hEntityId,
        options
      },
      deleteHierarchicalEntityOperationSpec,
      callback) as Promise<Models.ModelDeleteHierarchicalEntityResponse>;
  }

  /**
   * Gets information about a composite entity in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param cEntityId The composite entity extractor ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelGetCompositeEntityResponse>
   */
  getCompositeEntity(appId: string, versionId: string, cEntityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetCompositeEntityResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param cEntityId The composite entity extractor ID.
   * @param callback The callback
   */
  getCompositeEntity(appId: string, versionId: string, cEntityId: string, callback: msRest.ServiceCallback<Models.CompositeEntityExtractor>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param cEntityId The composite entity extractor ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  getCompositeEntity(appId: string, versionId: string, cEntityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CompositeEntityExtractor>): void;
  getCompositeEntity(appId: string, versionId: string, cEntityId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CompositeEntityExtractor>, callback?: msRest.ServiceCallback<Models.CompositeEntityExtractor>): Promise<Models.ModelGetCompositeEntityResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        cEntityId,
        options
      },
      getCompositeEntityOperationSpec,
      callback) as Promise<Models.ModelGetCompositeEntityResponse>;
  }

  /**
   * Updates a composite entity in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param cEntityId The composite entity extractor ID.
   * @param compositeModelUpdateObject A model object containing the new entity extractor name and
   * children.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelUpdateCompositeEntityResponse>
   */
  updateCompositeEntity(appId: string, versionId: string, cEntityId: string, compositeModelUpdateObject: Models.CompositeEntityModel, options?: msRest.RequestOptionsBase): Promise<Models.ModelUpdateCompositeEntityResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param cEntityId The composite entity extractor ID.
   * @param compositeModelUpdateObject A model object containing the new entity extractor name and
   * children.
   * @param callback The callback
   */
  updateCompositeEntity(appId: string, versionId: string, cEntityId: string, compositeModelUpdateObject: Models.CompositeEntityModel, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param cEntityId The composite entity extractor ID.
   * @param compositeModelUpdateObject A model object containing the new entity extractor name and
   * children.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateCompositeEntity(appId: string, versionId: string, cEntityId: string, compositeModelUpdateObject: Models.CompositeEntityModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  updateCompositeEntity(appId: string, versionId: string, cEntityId: string, compositeModelUpdateObject: Models.CompositeEntityModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelUpdateCompositeEntityResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        cEntityId,
        compositeModelUpdateObject,
        options
      },
      updateCompositeEntityOperationSpec,
      callback) as Promise<Models.ModelUpdateCompositeEntityResponse>;
  }

  /**
   * Deletes a composite entity from a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param cEntityId The composite entity extractor ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelDeleteCompositeEntityResponse>
   */
  deleteCompositeEntity(appId: string, versionId: string, cEntityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeleteCompositeEntityResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param cEntityId The composite entity extractor ID.
   * @param callback The callback
   */
  deleteCompositeEntity(appId: string, versionId: string, cEntityId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param cEntityId The composite entity extractor ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCompositeEntity(appId: string, versionId: string, cEntityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  deleteCompositeEntity(appId: string, versionId: string, cEntityId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelDeleteCompositeEntityResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        cEntityId,
        options
      },
      deleteCompositeEntityOperationSpec,
      callback) as Promise<Models.ModelDeleteCompositeEntityResponse>;
  }

  /**
   * Gets information about a list entity in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param clEntityId The list model ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelGetClosedListResponse>
   */
  getClosedList(appId: string, versionId: string, clEntityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetClosedListResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param clEntityId The list model ID.
   * @param callback The callback
   */
  getClosedList(appId: string, versionId: string, clEntityId: string, callback: msRest.ServiceCallback<Models.ClosedListEntityExtractor>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param clEntityId The list model ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  getClosedList(appId: string, versionId: string, clEntityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ClosedListEntityExtractor>): void;
  getClosedList(appId: string, versionId: string, clEntityId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ClosedListEntityExtractor>, callback?: msRest.ServiceCallback<Models.ClosedListEntityExtractor>): Promise<Models.ModelGetClosedListResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        clEntityId,
        options
      },
      getClosedListOperationSpec,
      callback) as Promise<Models.ModelGetClosedListResponse>;
  }

  /**
   * Updates the list entity in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param clEntityId The list model ID.
   * @param closedListModelUpdateObject The new list entity name and words list.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelUpdateClosedListResponse>
   */
  updateClosedList(appId: string, versionId: string, clEntityId: string, closedListModelUpdateObject: Models.ClosedListModelUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelUpdateClosedListResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param clEntityId The list model ID.
   * @param closedListModelUpdateObject The new list entity name and words list.
   * @param callback The callback
   */
  updateClosedList(appId: string, versionId: string, clEntityId: string, closedListModelUpdateObject: Models.ClosedListModelUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param clEntityId The list model ID.
   * @param closedListModelUpdateObject The new list entity name and words list.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateClosedList(appId: string, versionId: string, clEntityId: string, closedListModelUpdateObject: Models.ClosedListModelUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  updateClosedList(appId: string, versionId: string, clEntityId: string, closedListModelUpdateObject: Models.ClosedListModelUpdateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelUpdateClosedListResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        clEntityId,
        closedListModelUpdateObject,
        options
      },
      updateClosedListOperationSpec,
      callback) as Promise<Models.ModelUpdateClosedListResponse>;
  }

  /**
   * Adds a batch of sublists to an existing list entity in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param clEntityId The list entity model ID.
   * @param closedListModelPatchObject A words list batch.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelPatchClosedListResponse>
   */
  patchClosedList(appId: string, versionId: string, clEntityId: string, closedListModelPatchObject: Models.ClosedListModelPatchObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelPatchClosedListResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param clEntityId The list entity model ID.
   * @param closedListModelPatchObject A words list batch.
   * @param callback The callback
   */
  patchClosedList(appId: string, versionId: string, clEntityId: string, closedListModelPatchObject: Models.ClosedListModelPatchObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param clEntityId The list entity model ID.
   * @param closedListModelPatchObject A words list batch.
   * @param options The optional parameters
   * @param callback The callback
   */
  patchClosedList(appId: string, versionId: string, clEntityId: string, closedListModelPatchObject: Models.ClosedListModelPatchObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  patchClosedList(appId: string, versionId: string, clEntityId: string, closedListModelPatchObject: Models.ClosedListModelPatchObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelPatchClosedListResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        clEntityId,
        closedListModelPatchObject,
        options
      },
      patchClosedListOperationSpec,
      callback) as Promise<Models.ModelPatchClosedListResponse>;
  }

  /**
   * Deletes a list entity model from a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param clEntityId The list entity model ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelDeleteClosedListResponse>
   */
  deleteClosedList(appId: string, versionId: string, clEntityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeleteClosedListResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param clEntityId The list entity model ID.
   * @param callback The callback
   */
  deleteClosedList(appId: string, versionId: string, clEntityId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param clEntityId The list entity model ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteClosedList(appId: string, versionId: string, clEntityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  deleteClosedList(appId: string, versionId: string, clEntityId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelDeleteClosedListResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        clEntityId,
        options
      },
      deleteClosedListOperationSpec,
      callback) as Promise<Models.ModelDeleteClosedListResponse>;
  }

  /**
   * Gets information about a prebuilt entity model in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param prebuiltId The prebuilt entity extractor ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelGetPrebuiltResponse>
   */
  getPrebuilt(appId: string, versionId: string, prebuiltId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetPrebuiltResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param prebuiltId The prebuilt entity extractor ID.
   * @param callback The callback
   */
  getPrebuilt(appId: string, versionId: string, prebuiltId: string, callback: msRest.ServiceCallback<Models.PrebuiltEntityExtractor>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param prebuiltId The prebuilt entity extractor ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPrebuilt(appId: string, versionId: string, prebuiltId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PrebuiltEntityExtractor>): void;
  getPrebuilt(appId: string, versionId: string, prebuiltId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PrebuiltEntityExtractor>, callback?: msRest.ServiceCallback<Models.PrebuiltEntityExtractor>): Promise<Models.ModelGetPrebuiltResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        prebuiltId,
        options
      },
      getPrebuiltOperationSpec,
      callback) as Promise<Models.ModelGetPrebuiltResponse>;
  }

  /**
   * Deletes a prebuilt entity extractor from a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param prebuiltId The prebuilt entity extractor ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelDeletePrebuiltResponse>
   */
  deletePrebuilt(appId: string, versionId: string, prebuiltId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeletePrebuiltResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param prebuiltId The prebuilt entity extractor ID.
   * @param callback The callback
   */
  deletePrebuilt(appId: string, versionId: string, prebuiltId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param prebuiltId The prebuilt entity extractor ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  deletePrebuilt(appId: string, versionId: string, prebuiltId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  deletePrebuilt(appId: string, versionId: string, prebuiltId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelDeletePrebuiltResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        prebuiltId,
        options
      },
      deletePrebuiltOperationSpec,
      callback) as Promise<Models.ModelDeletePrebuiltResponse>;
  }

  /**
   * Deletes a sublist of a specific list entity model from a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param clEntityId The list entity extractor ID.
   * @param subListId The sublist ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelDeleteSubListResponse>
   */
  deleteSubList(appId: string, versionId: string, clEntityId: string, subListId: number, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeleteSubListResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param clEntityId The list entity extractor ID.
   * @param subListId The sublist ID.
   * @param callback The callback
   */
  deleteSubList(appId: string, versionId: string, clEntityId: string, subListId: number, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param clEntityId The list entity extractor ID.
   * @param subListId The sublist ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSubList(appId: string, versionId: string, clEntityId: string, subListId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  deleteSubList(appId: string, versionId: string, clEntityId: string, subListId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelDeleteSubListResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        clEntityId,
        subListId,
        options
      },
      deleteSubListOperationSpec,
      callback) as Promise<Models.ModelDeleteSubListResponse>;
  }

  /**
   * Updates one of the list entity's sublists in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param clEntityId The list entity extractor ID.
   * @param subListId The sublist ID.
   * @param wordListBaseUpdateObject A sublist update object containing the new canonical form and
   * the list of words.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelUpdateSubListResponse>
   */
  updateSubList(appId: string, versionId: string, clEntityId: string, subListId: number, wordListBaseUpdateObject: Models.WordListBaseUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelUpdateSubListResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param clEntityId The list entity extractor ID.
   * @param subListId The sublist ID.
   * @param wordListBaseUpdateObject A sublist update object containing the new canonical form and
   * the list of words.
   * @param callback The callback
   */
  updateSubList(appId: string, versionId: string, clEntityId: string, subListId: number, wordListBaseUpdateObject: Models.WordListBaseUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param clEntityId The list entity extractor ID.
   * @param subListId The sublist ID.
   * @param wordListBaseUpdateObject A sublist update object containing the new canonical form and
   * the list of words.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSubList(appId: string, versionId: string, clEntityId: string, subListId: number, wordListBaseUpdateObject: Models.WordListBaseUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  updateSubList(appId: string, versionId: string, clEntityId: string, subListId: number, wordListBaseUpdateObject: Models.WordListBaseUpdateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelUpdateSubListResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        clEntityId,
        subListId,
        wordListBaseUpdateObject,
        options
      },
      updateSubListOperationSpec,
      callback) as Promise<Models.ModelUpdateSubListResponse>;
  }

  /**
   * Suggests example utterances that would improve the accuracy of the intent model in a version of
   * the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param intentId The intent classifier ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelListIntentSuggestionsResponse>
   */
  listIntentSuggestions(appId: string, versionId: string, intentId: string, options?: Models.ModelListIntentSuggestionsOptionalParams): Promise<Models.ModelListIntentSuggestionsResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param intentId The intent classifier ID.
   * @param callback The callback
   */
  listIntentSuggestions(appId: string, versionId: string, intentId: string, callback: msRest.ServiceCallback<Models.IntentsSuggestionExample[]>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param intentId The intent classifier ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  listIntentSuggestions(appId: string, versionId: string, intentId: string, options: Models.ModelListIntentSuggestionsOptionalParams, callback: msRest.ServiceCallback<Models.IntentsSuggestionExample[]>): void;
  listIntentSuggestions(appId: string, versionId: string, intentId: string, options?: Models.ModelListIntentSuggestionsOptionalParams | msRest.ServiceCallback<Models.IntentsSuggestionExample[]>, callback?: msRest.ServiceCallback<Models.IntentsSuggestionExample[]>): Promise<Models.ModelListIntentSuggestionsResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        intentId,
        options
      },
      listIntentSuggestionsOperationSpec,
      callback) as Promise<Models.ModelListIntentSuggestionsResponse>;
  }

  /**
   * Get suggested example utterances that would improve the accuracy of the entity model in a
   * version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The target entity extractor model to enhance.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelListEntitySuggestionsResponse>
   */
  listEntitySuggestions(appId: string, versionId: string, entityId: string, options?: Models.ModelListEntitySuggestionsOptionalParams): Promise<Models.ModelListEntitySuggestionsResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The target entity extractor model to enhance.
   * @param callback The callback
   */
  listEntitySuggestions(appId: string, versionId: string, entityId: string, callback: msRest.ServiceCallback<Models.EntitiesSuggestionExample[]>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The target entity extractor model to enhance.
   * @param options The optional parameters
   * @param callback The callback
   */
  listEntitySuggestions(appId: string, versionId: string, entityId: string, options: Models.ModelListEntitySuggestionsOptionalParams, callback: msRest.ServiceCallback<Models.EntitiesSuggestionExample[]>): void;
  listEntitySuggestions(appId: string, versionId: string, entityId: string, options?: Models.ModelListEntitySuggestionsOptionalParams | msRest.ServiceCallback<Models.EntitiesSuggestionExample[]>, callback?: msRest.ServiceCallback<Models.EntitiesSuggestionExample[]>): Promise<Models.ModelListEntitySuggestionsResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        options
      },
      listEntitySuggestionsOperationSpec,
      callback) as Promise<Models.ModelListEntitySuggestionsResponse>;
  }

  /**
   * Adds a sublist to an existing list entity in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param clEntityId The list entity extractor ID.
   * @param wordListCreateObject Words list.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelAddSubListResponse>
   */
  addSubList(appId: string, versionId: string, clEntityId: string, wordListCreateObject: Models.WordListObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelAddSubListResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param clEntityId The list entity extractor ID.
   * @param wordListCreateObject Words list.
   * @param callback The callback
   */
  addSubList(appId: string, versionId: string, clEntityId: string, wordListCreateObject: Models.WordListObject, callback: msRest.ServiceCallback<number>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param clEntityId The list entity extractor ID.
   * @param wordListCreateObject Words list.
   * @param options The optional parameters
   * @param callback The callback
   */
  addSubList(appId: string, versionId: string, clEntityId: string, wordListCreateObject: Models.WordListObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number>): void;
  addSubList(appId: string, versionId: string, clEntityId: string, wordListCreateObject: Models.WordListObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<number>, callback?: msRest.ServiceCallback<number>): Promise<Models.ModelAddSubListResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        clEntityId,
        wordListCreateObject,
        options
      },
      addSubListOperationSpec,
      callback) as Promise<Models.ModelAddSubListResponse>;
  }

  /**
   * Adds a customizable prebuilt domain along with all of its intent and entity models in a version
   * of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param prebuiltDomainObject A prebuilt domain create object containing the name of the domain.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelAddCustomPrebuiltDomainResponse>
   */
  addCustomPrebuiltDomain(appId: string, versionId: string, prebuiltDomainObject: Models.PrebuiltDomainCreateBaseObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelAddCustomPrebuiltDomainResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param prebuiltDomainObject A prebuilt domain create object containing the name of the domain.
   * @param callback The callback
   */
  addCustomPrebuiltDomain(appId: string, versionId: string, prebuiltDomainObject: Models.PrebuiltDomainCreateBaseObject, callback: msRest.ServiceCallback<string[]>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param prebuiltDomainObject A prebuilt domain create object containing the name of the domain.
   * @param options The optional parameters
   * @param callback The callback
   */
  addCustomPrebuiltDomain(appId: string, versionId: string, prebuiltDomainObject: Models.PrebuiltDomainCreateBaseObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string[]>): void;
  addCustomPrebuiltDomain(appId: string, versionId: string, prebuiltDomainObject: Models.PrebuiltDomainCreateBaseObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string[]>, callback?: msRest.ServiceCallback<string[]>): Promise<Models.ModelAddCustomPrebuiltDomainResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        prebuiltDomainObject,
        options
      },
      addCustomPrebuiltDomainOperationSpec,
      callback) as Promise<Models.ModelAddCustomPrebuiltDomainResponse>;
  }

  /**
   * Adds a customizable prebuilt intent model to a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param prebuiltDomainModelCreateObject A model object containing the name of the customizable
   * prebuilt intent and the name of the domain to which this model belongs.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelAddCustomPrebuiltIntentResponse>
   */
  addCustomPrebuiltIntent(appId: string, versionId: string, prebuiltDomainModelCreateObject: Models.PrebuiltDomainModelCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelAddCustomPrebuiltIntentResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param prebuiltDomainModelCreateObject A model object containing the name of the customizable
   * prebuilt intent and the name of the domain to which this model belongs.
   * @param callback The callback
   */
  addCustomPrebuiltIntent(appId: string, versionId: string, prebuiltDomainModelCreateObject: Models.PrebuiltDomainModelCreateObject, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param prebuiltDomainModelCreateObject A model object containing the name of the customizable
   * prebuilt intent and the name of the domain to which this model belongs.
   * @param options The optional parameters
   * @param callback The callback
   */
  addCustomPrebuiltIntent(appId: string, versionId: string, prebuiltDomainModelCreateObject: Models.PrebuiltDomainModelCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  addCustomPrebuiltIntent(appId: string, versionId: string, prebuiltDomainModelCreateObject: Models.PrebuiltDomainModelCreateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ModelAddCustomPrebuiltIntentResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        prebuiltDomainModelCreateObject,
        options
      },
      addCustomPrebuiltIntentOperationSpec,
      callback) as Promise<Models.ModelAddCustomPrebuiltIntentResponse>;
  }

  /**
   * Gets information about customizable prebuilt intents added to a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelListCustomPrebuiltIntentsResponse>
   */
  listCustomPrebuiltIntents(appId: string, versionId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelListCustomPrebuiltIntentsResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param callback The callback
   */
  listCustomPrebuiltIntents(appId: string, versionId: string, callback: msRest.ServiceCallback<Models.IntentClassifier[]>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  listCustomPrebuiltIntents(appId: string, versionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IntentClassifier[]>): void;
  listCustomPrebuiltIntents(appId: string, versionId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IntentClassifier[]>, callback?: msRest.ServiceCallback<Models.IntentClassifier[]>): Promise<Models.ModelListCustomPrebuiltIntentsResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        options
      },
      listCustomPrebuiltIntentsOperationSpec,
      callback) as Promise<Models.ModelListCustomPrebuiltIntentsResponse>;
  }

  /**
   * Adds a prebuilt entity model to a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param prebuiltDomainModelCreateObject A model object containing the name of the prebuilt entity
   * and the name of the domain to which this model belongs.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelAddCustomPrebuiltEntityResponse>
   */
  addCustomPrebuiltEntity(appId: string, versionId: string, prebuiltDomainModelCreateObject: Models.PrebuiltDomainModelCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelAddCustomPrebuiltEntityResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param prebuiltDomainModelCreateObject A model object containing the name of the prebuilt entity
   * and the name of the domain to which this model belongs.
   * @param callback The callback
   */
  addCustomPrebuiltEntity(appId: string, versionId: string, prebuiltDomainModelCreateObject: Models.PrebuiltDomainModelCreateObject, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param prebuiltDomainModelCreateObject A model object containing the name of the prebuilt entity
   * and the name of the domain to which this model belongs.
   * @param options The optional parameters
   * @param callback The callback
   */
  addCustomPrebuiltEntity(appId: string, versionId: string, prebuiltDomainModelCreateObject: Models.PrebuiltDomainModelCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  addCustomPrebuiltEntity(appId: string, versionId: string, prebuiltDomainModelCreateObject: Models.PrebuiltDomainModelCreateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ModelAddCustomPrebuiltEntityResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        prebuiltDomainModelCreateObject,
        options
      },
      addCustomPrebuiltEntityOperationSpec,
      callback) as Promise<Models.ModelAddCustomPrebuiltEntityResponse>;
  }

  /**
   * Gets all prebuilt entities used in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelListCustomPrebuiltEntitiesResponse>
   */
  listCustomPrebuiltEntities(appId: string, versionId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelListCustomPrebuiltEntitiesResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param callback The callback
   */
  listCustomPrebuiltEntities(appId: string, versionId: string, callback: msRest.ServiceCallback<Models.EntityExtractor[]>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  listCustomPrebuiltEntities(appId: string, versionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntityExtractor[]>): void;
  listCustomPrebuiltEntities(appId: string, versionId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EntityExtractor[]>, callback?: msRest.ServiceCallback<Models.EntityExtractor[]>): Promise<Models.ModelListCustomPrebuiltEntitiesResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        options
      },
      listCustomPrebuiltEntitiesOperationSpec,
      callback) as Promise<Models.ModelListCustomPrebuiltEntitiesResponse>;
  }

  /**
   * Gets all prebuilt intent and entity model information used in a version of this application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelListCustomPrebuiltModelsResponse>
   */
  listCustomPrebuiltModels(appId: string, versionId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelListCustomPrebuiltModelsResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param callback The callback
   */
  listCustomPrebuiltModels(appId: string, versionId: string, callback: msRest.ServiceCallback<Models.CustomPrebuiltModel[]>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  listCustomPrebuiltModels(appId: string, versionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CustomPrebuiltModel[]>): void;
  listCustomPrebuiltModels(appId: string, versionId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CustomPrebuiltModel[]>, callback?: msRest.ServiceCallback<Models.CustomPrebuiltModel[]>): Promise<Models.ModelListCustomPrebuiltModelsResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        options
      },
      listCustomPrebuiltModelsOperationSpec,
      callback) as Promise<Models.ModelListCustomPrebuiltModelsResponse>;
  }

  /**
   * Deletes a prebuilt domain's models in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param domainName Domain name.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelDeleteCustomPrebuiltDomainResponse>
   */
  deleteCustomPrebuiltDomain(appId: string, versionId: string, domainName: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeleteCustomPrebuiltDomainResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param domainName Domain name.
   * @param callback The callback
   */
  deleteCustomPrebuiltDomain(appId: string, versionId: string, domainName: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param domainName Domain name.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCustomPrebuiltDomain(appId: string, versionId: string, domainName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  deleteCustomPrebuiltDomain(appId: string, versionId: string, domainName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelDeleteCustomPrebuiltDomainResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        domainName,
        options
      },
      deleteCustomPrebuiltDomainOperationSpec,
      callback) as Promise<Models.ModelDeleteCustomPrebuiltDomainResponse>;
  }

  /**
   * Creates a single child in an existing entity model hierarchy in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity extractor ID.
   * @param childEntityModelCreateObject A model object containing the name of the new child model
   * and its children.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelAddEntityChildResponse>
   */
  addEntityChild(appId: string, versionId: string, entityId: string, childEntityModelCreateObject: Models.ChildEntityModelCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelAddEntityChildResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity extractor ID.
   * @param childEntityModelCreateObject A model object containing the name of the new child model
   * and its children.
   * @param callback The callback
   */
  addEntityChild(appId: string, versionId: string, entityId: string, childEntityModelCreateObject: Models.ChildEntityModelCreateObject, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity extractor ID.
   * @param childEntityModelCreateObject A model object containing the name of the new child model
   * and its children.
   * @param options The optional parameters
   * @param callback The callback
   */
  addEntityChild(appId: string, versionId: string, entityId: string, childEntityModelCreateObject: Models.ChildEntityModelCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  addEntityChild(appId: string, versionId: string, entityId: string, childEntityModelCreateObject: Models.ChildEntityModelCreateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ModelAddEntityChildResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        childEntityModelCreateObject,
        options
      },
      addEntityChildOperationSpec,
      callback) as Promise<Models.ModelAddEntityChildResponse>;
  }

  /**
   * Gets information about the child's model contained in an hierarchical entity child model in a
   * version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param hEntityId The hierarchical entity extractor ID.
   * @param hChildId The hierarchical entity extractor child ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelGetHierarchicalEntityChildResponse>
   */
  getHierarchicalEntityChild(appId: string, versionId: string, hEntityId: string, hChildId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetHierarchicalEntityChildResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param hEntityId The hierarchical entity extractor ID.
   * @param hChildId The hierarchical entity extractor child ID.
   * @param callback The callback
   */
  getHierarchicalEntityChild(appId: string, versionId: string, hEntityId: string, hChildId: string, callback: msRest.ServiceCallback<Models.HierarchicalChildEntity>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param hEntityId The hierarchical entity extractor ID.
   * @param hChildId The hierarchical entity extractor child ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  getHierarchicalEntityChild(appId: string, versionId: string, hEntityId: string, hChildId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HierarchicalChildEntity>): void;
  getHierarchicalEntityChild(appId: string, versionId: string, hEntityId: string, hChildId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HierarchicalChildEntity>, callback?: msRest.ServiceCallback<Models.HierarchicalChildEntity>): Promise<Models.ModelGetHierarchicalEntityChildResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        hEntityId,
        hChildId,
        options
      },
      getHierarchicalEntityChildOperationSpec,
      callback) as Promise<Models.ModelGetHierarchicalEntityChildResponse>;
  }

  /**
   * Renames a single child in an existing hierarchical entity model in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param hEntityId The hierarchical entity extractor ID.
   * @param hChildId The hierarchical entity extractor child ID.
   * @param hierarchicalChildModelUpdateObject Model object containing new name of the hierarchical
   * entity child.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelUpdateHierarchicalEntityChildResponse>
   */
  updateHierarchicalEntityChild(appId: string, versionId: string, hEntityId: string, hChildId: string, hierarchicalChildModelUpdateObject: Models.HierarchicalChildModelUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelUpdateHierarchicalEntityChildResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param hEntityId The hierarchical entity extractor ID.
   * @param hChildId The hierarchical entity extractor child ID.
   * @param hierarchicalChildModelUpdateObject Model object containing new name of the hierarchical
   * entity child.
   * @param callback The callback
   */
  updateHierarchicalEntityChild(appId: string, versionId: string, hEntityId: string, hChildId: string, hierarchicalChildModelUpdateObject: Models.HierarchicalChildModelUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param hEntityId The hierarchical entity extractor ID.
   * @param hChildId The hierarchical entity extractor child ID.
   * @param hierarchicalChildModelUpdateObject Model object containing new name of the hierarchical
   * entity child.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateHierarchicalEntityChild(appId: string, versionId: string, hEntityId: string, hChildId: string, hierarchicalChildModelUpdateObject: Models.HierarchicalChildModelUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  updateHierarchicalEntityChild(appId: string, versionId: string, hEntityId: string, hChildId: string, hierarchicalChildModelUpdateObject: Models.HierarchicalChildModelUpdateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelUpdateHierarchicalEntityChildResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        hEntityId,
        hChildId,
        hierarchicalChildModelUpdateObject,
        options
      },
      updateHierarchicalEntityChildOperationSpec,
      callback) as Promise<Models.ModelUpdateHierarchicalEntityChildResponse>;
  }

  /**
   * Deletes a hierarchical entity extractor child in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param hEntityId The hierarchical entity extractor ID.
   * @param hChildId The hierarchical entity extractor child ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelDeleteHierarchicalEntityChildResponse>
   */
  deleteHierarchicalEntityChild(appId: string, versionId: string, hEntityId: string, hChildId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeleteHierarchicalEntityChildResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param hEntityId The hierarchical entity extractor ID.
   * @param hChildId The hierarchical entity extractor child ID.
   * @param callback The callback
   */
  deleteHierarchicalEntityChild(appId: string, versionId: string, hEntityId: string, hChildId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param hEntityId The hierarchical entity extractor ID.
   * @param hChildId The hierarchical entity extractor child ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteHierarchicalEntityChild(appId: string, versionId: string, hEntityId: string, hChildId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  deleteHierarchicalEntityChild(appId: string, versionId: string, hEntityId: string, hChildId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelDeleteHierarchicalEntityChildResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        hEntityId,
        hChildId,
        options
      },
      deleteHierarchicalEntityChildOperationSpec,
      callback) as Promise<Models.ModelDeleteHierarchicalEntityChildResponse>;
  }

  /**
   * Creates a single child in an existing composite entity model in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param cEntityId The composite entity extractor ID.
   * @param compositeChildModelCreateObject A model object containing the name of the new composite
   * child model.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelAddCompositeEntityChildResponse>
   */
  addCompositeEntityChild(appId: string, versionId: string, cEntityId: string, compositeChildModelCreateObject: Models.CompositeChildModelCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelAddCompositeEntityChildResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param cEntityId The composite entity extractor ID.
   * @param compositeChildModelCreateObject A model object containing the name of the new composite
   * child model.
   * @param callback The callback
   */
  addCompositeEntityChild(appId: string, versionId: string, cEntityId: string, compositeChildModelCreateObject: Models.CompositeChildModelCreateObject, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param cEntityId The composite entity extractor ID.
   * @param compositeChildModelCreateObject A model object containing the name of the new composite
   * child model.
   * @param options The optional parameters
   * @param callback The callback
   */
  addCompositeEntityChild(appId: string, versionId: string, cEntityId: string, compositeChildModelCreateObject: Models.CompositeChildModelCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  addCompositeEntityChild(appId: string, versionId: string, cEntityId: string, compositeChildModelCreateObject: Models.CompositeChildModelCreateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ModelAddCompositeEntityChildResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        cEntityId,
        compositeChildModelCreateObject,
        options
      },
      addCompositeEntityChildOperationSpec,
      callback) as Promise<Models.ModelAddCompositeEntityChildResponse>;
  }

  /**
   * Deletes a composite entity extractor child from a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param cEntityId The composite entity extractor ID.
   * @param cChildId The hierarchical entity extractor child ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelDeleteCompositeEntityChildResponse>
   */
  deleteCompositeEntityChild(appId: string, versionId: string, cEntityId: string, cChildId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeleteCompositeEntityChildResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param cEntityId The composite entity extractor ID.
   * @param cChildId The hierarchical entity extractor child ID.
   * @param callback The callback
   */
  deleteCompositeEntityChild(appId: string, versionId: string, cEntityId: string, cChildId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param cEntityId The composite entity extractor ID.
   * @param cChildId The hierarchical entity extractor child ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCompositeEntityChild(appId: string, versionId: string, cEntityId: string, cChildId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  deleteCompositeEntityChild(appId: string, versionId: string, cEntityId: string, cChildId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelDeleteCompositeEntityChildResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        cEntityId,
        cChildId,
        options
      },
      deleteCompositeEntityChildOperationSpec,
      callback) as Promise<Models.ModelDeleteCompositeEntityChildResponse>;
  }

  /**
   * @summary Gets information about the regular expression entity models in a version of the
   * application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelListRegexEntityInfosResponse>
   */
  listRegexEntityInfos(appId: string, versionId: string, options?: Models.ModelListRegexEntityInfosOptionalParams): Promise<Models.ModelListRegexEntityInfosResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param callback The callback
   */
  listRegexEntityInfos(appId: string, versionId: string, callback: msRest.ServiceCallback<Models.RegexEntityExtractor[]>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  listRegexEntityInfos(appId: string, versionId: string, options: Models.ModelListRegexEntityInfosOptionalParams, callback: msRest.ServiceCallback<Models.RegexEntityExtractor[]>): void;
  listRegexEntityInfos(appId: string, versionId: string, options?: Models.ModelListRegexEntityInfosOptionalParams | msRest.ServiceCallback<Models.RegexEntityExtractor[]>, callback?: msRest.ServiceCallback<Models.RegexEntityExtractor[]>): Promise<Models.ModelListRegexEntityInfosResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        options
      },
      listRegexEntityInfosOperationSpec,
      callback) as Promise<Models.ModelListRegexEntityInfosResponse>;
  }

  /**
   * @summary Adds a regular expression entity model to a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param regexEntityExtractorCreateObj A model object containing the name and regex pattern for
   * the new regular expression entity extractor.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelCreateRegexEntityModelResponse>
   */
  createRegexEntityModel(appId: string, versionId: string, regexEntityExtractorCreateObj: Models.RegexModelCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelCreateRegexEntityModelResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param regexEntityExtractorCreateObj A model object containing the name and regex pattern for
   * the new regular expression entity extractor.
   * @param callback The callback
   */
  createRegexEntityModel(appId: string, versionId: string, regexEntityExtractorCreateObj: Models.RegexModelCreateObject, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param regexEntityExtractorCreateObj A model object containing the name and regex pattern for
   * the new regular expression entity extractor.
   * @param options The optional parameters
   * @param callback The callback
   */
  createRegexEntityModel(appId: string, versionId: string, regexEntityExtractorCreateObj: Models.RegexModelCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  createRegexEntityModel(appId: string, versionId: string, regexEntityExtractorCreateObj: Models.RegexModelCreateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ModelCreateRegexEntityModelResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        regexEntityExtractorCreateObj,
        options
      },
      createRegexEntityModelOperationSpec,
      callback) as Promise<Models.ModelCreateRegexEntityModelResponse>;
  }

  /**
   * @summary Get information about the Pattern.Any entity models in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelListPatternAnyEntityInfosResponse>
   */
  listPatternAnyEntityInfos(appId: string, versionId: string, options?: Models.ModelListPatternAnyEntityInfosOptionalParams): Promise<Models.ModelListPatternAnyEntityInfosResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param callback The callback
   */
  listPatternAnyEntityInfos(appId: string, versionId: string, callback: msRest.ServiceCallback<Models.PatternAnyEntityExtractor[]>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  listPatternAnyEntityInfos(appId: string, versionId: string, options: Models.ModelListPatternAnyEntityInfosOptionalParams, callback: msRest.ServiceCallback<Models.PatternAnyEntityExtractor[]>): void;
  listPatternAnyEntityInfos(appId: string, versionId: string, options?: Models.ModelListPatternAnyEntityInfosOptionalParams | msRest.ServiceCallback<Models.PatternAnyEntityExtractor[]>, callback?: msRest.ServiceCallback<Models.PatternAnyEntityExtractor[]>): Promise<Models.ModelListPatternAnyEntityInfosResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        options
      },
      listPatternAnyEntityInfosOperationSpec,
      callback) as Promise<Models.ModelListPatternAnyEntityInfosResponse>;
  }

  /**
   * @summary Adds a pattern.any entity extractor to a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param extractorCreateObject A model object containing the name and explicit list for the new
   * Pattern.Any entity extractor.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelCreatePatternAnyEntityModelResponse>
   */
  createPatternAnyEntityModel(appId: string, versionId: string, extractorCreateObject: Models.PatternAnyModelCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelCreatePatternAnyEntityModelResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param extractorCreateObject A model object containing the name and explicit list for the new
   * Pattern.Any entity extractor.
   * @param callback The callback
   */
  createPatternAnyEntityModel(appId: string, versionId: string, extractorCreateObject: Models.PatternAnyModelCreateObject, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param extractorCreateObject A model object containing the name and explicit list for the new
   * Pattern.Any entity extractor.
   * @param options The optional parameters
   * @param callback The callback
   */
  createPatternAnyEntityModel(appId: string, versionId: string, extractorCreateObject: Models.PatternAnyModelCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  createPatternAnyEntityModel(appId: string, versionId: string, extractorCreateObject: Models.PatternAnyModelCreateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ModelCreatePatternAnyEntityModelResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        extractorCreateObject,
        options
      },
      createPatternAnyEntityModelOperationSpec,
      callback) as Promise<Models.ModelCreatePatternAnyEntityModelResponse>;
  }

  /**
   * @summary Get all roles for an entity in a version of the application
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId entity Id
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelListEntityRolesResponse>
   */
  listEntityRoles(appId: string, versionId: string, entityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelListEntityRolesResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId entity Id
   * @param callback The callback
   */
  listEntityRoles(appId: string, versionId: string, entityId: string, callback: msRest.ServiceCallback<Models.EntityRole[]>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId entity Id
   * @param options The optional parameters
   * @param callback The callback
   */
  listEntityRoles(appId: string, versionId: string, entityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntityRole[]>): void;
  listEntityRoles(appId: string, versionId: string, entityId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EntityRole[]>, callback?: msRest.ServiceCallback<Models.EntityRole[]>): Promise<Models.ModelListEntityRolesResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        options
      },
      listEntityRolesOperationSpec,
      callback) as Promise<Models.ModelListEntityRolesResponse>;
  }

  /**
   * @summary Create an entity role in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity model ID.
   * @param entityRoleCreateObject An entity role object containing the name of role.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelCreateEntityRoleResponse>
   */
  createEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelCreateEntityRoleResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity model ID.
   * @param entityRoleCreateObject An entity role object containing the name of role.
   * @param callback The callback
   */
  createEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity model ID.
   * @param entityRoleCreateObject An entity role object containing the name of role.
   * @param options The optional parameters
   * @param callback The callback
   */
  createEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  createEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ModelCreateEntityRoleResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        entityRoleCreateObject,
        options
      },
      createEntityRoleOperationSpec,
      callback) as Promise<Models.ModelCreateEntityRoleResponse>;
  }

  /**
   * @summary Get a prebuilt entity's roles in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId entity Id
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelListPrebuiltEntityRolesResponse>
   */
  listPrebuiltEntityRoles(appId: string, versionId: string, entityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelListPrebuiltEntityRolesResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId entity Id
   * @param callback The callback
   */
  listPrebuiltEntityRoles(appId: string, versionId: string, entityId: string, callback: msRest.ServiceCallback<Models.EntityRole[]>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId entity Id
   * @param options The optional parameters
   * @param callback The callback
   */
  listPrebuiltEntityRoles(appId: string, versionId: string, entityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntityRole[]>): void;
  listPrebuiltEntityRoles(appId: string, versionId: string, entityId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EntityRole[]>, callback?: msRest.ServiceCallback<Models.EntityRole[]>): Promise<Models.ModelListPrebuiltEntityRolesResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        options
      },
      listPrebuiltEntityRolesOperationSpec,
      callback) as Promise<Models.ModelListPrebuiltEntityRolesResponse>;
  }

  /**
   * @summary Create a role for a prebuilt entity in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity model ID.
   * @param entityRoleCreateObject An entity role object containing the name of role.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelCreatePrebuiltEntityRoleResponse>
   */
  createPrebuiltEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelCreatePrebuiltEntityRoleResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity model ID.
   * @param entityRoleCreateObject An entity role object containing the name of role.
   * @param callback The callback
   */
  createPrebuiltEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity model ID.
   * @param entityRoleCreateObject An entity role object containing the name of role.
   * @param options The optional parameters
   * @param callback The callback
   */
  createPrebuiltEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  createPrebuiltEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ModelCreatePrebuiltEntityRoleResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        entityRoleCreateObject,
        options
      },
      createPrebuiltEntityRoleOperationSpec,
      callback) as Promise<Models.ModelCreatePrebuiltEntityRoleResponse>;
  }

  /**
   * @summary Get all roles for a list entity in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId entity Id
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelListClosedListEntityRolesResponse>
   */
  listClosedListEntityRoles(appId: string, versionId: string, entityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelListClosedListEntityRolesResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId entity Id
   * @param callback The callback
   */
  listClosedListEntityRoles(appId: string, versionId: string, entityId: string, callback: msRest.ServiceCallback<Models.EntityRole[]>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId entity Id
   * @param options The optional parameters
   * @param callback The callback
   */
  listClosedListEntityRoles(appId: string, versionId: string, entityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntityRole[]>): void;
  listClosedListEntityRoles(appId: string, versionId: string, entityId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EntityRole[]>, callback?: msRest.ServiceCallback<Models.EntityRole[]>): Promise<Models.ModelListClosedListEntityRolesResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        options
      },
      listClosedListEntityRolesOperationSpec,
      callback) as Promise<Models.ModelListClosedListEntityRolesResponse>;
  }

  /**
   * @summary Create a role for a list entity in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity model ID.
   * @param entityRoleCreateObject An entity role object containing the name of role.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelCreateClosedListEntityRoleResponse>
   */
  createClosedListEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelCreateClosedListEntityRoleResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity model ID.
   * @param entityRoleCreateObject An entity role object containing the name of role.
   * @param callback The callback
   */
  createClosedListEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity model ID.
   * @param entityRoleCreateObject An entity role object containing the name of role.
   * @param options The optional parameters
   * @param callback The callback
   */
  createClosedListEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  createClosedListEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ModelCreateClosedListEntityRoleResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        entityRoleCreateObject,
        options
      },
      createClosedListEntityRoleOperationSpec,
      callback) as Promise<Models.ModelCreateClosedListEntityRoleResponse>;
  }

  /**
   * @summary Get all roles for a regular expression entity in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId entity Id
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelListRegexEntityRolesResponse>
   */
  listRegexEntityRoles(appId: string, versionId: string, entityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelListRegexEntityRolesResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId entity Id
   * @param callback The callback
   */
  listRegexEntityRoles(appId: string, versionId: string, entityId: string, callback: msRest.ServiceCallback<Models.EntityRole[]>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId entity Id
   * @param options The optional parameters
   * @param callback The callback
   */
  listRegexEntityRoles(appId: string, versionId: string, entityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntityRole[]>): void;
  listRegexEntityRoles(appId: string, versionId: string, entityId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EntityRole[]>, callback?: msRest.ServiceCallback<Models.EntityRole[]>): Promise<Models.ModelListRegexEntityRolesResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        options
      },
      listRegexEntityRolesOperationSpec,
      callback) as Promise<Models.ModelListRegexEntityRolesResponse>;
  }

  /**
   * @summary Create a role for an regular expression entity in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity model ID.
   * @param entityRoleCreateObject An entity role object containing the name of role.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelCreateRegexEntityRoleResponse>
   */
  createRegexEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelCreateRegexEntityRoleResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity model ID.
   * @param entityRoleCreateObject An entity role object containing the name of role.
   * @param callback The callback
   */
  createRegexEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity model ID.
   * @param entityRoleCreateObject An entity role object containing the name of role.
   * @param options The optional parameters
   * @param callback The callback
   */
  createRegexEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  createRegexEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ModelCreateRegexEntityRoleResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        entityRoleCreateObject,
        options
      },
      createRegexEntityRoleOperationSpec,
      callback) as Promise<Models.ModelCreateRegexEntityRoleResponse>;
  }

  /**
   * @summary Get all roles for a composite entity in a version of the application
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param cEntityId The composite entity extractor ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelListCompositeEntityRolesResponse>
   */
  listCompositeEntityRoles(appId: string, versionId: string, cEntityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelListCompositeEntityRolesResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param cEntityId The composite entity extractor ID.
   * @param callback The callback
   */
  listCompositeEntityRoles(appId: string, versionId: string, cEntityId: string, callback: msRest.ServiceCallback<Models.EntityRole[]>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param cEntityId The composite entity extractor ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  listCompositeEntityRoles(appId: string, versionId: string, cEntityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntityRole[]>): void;
  listCompositeEntityRoles(appId: string, versionId: string, cEntityId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EntityRole[]>, callback?: msRest.ServiceCallback<Models.EntityRole[]>): Promise<Models.ModelListCompositeEntityRolesResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        cEntityId,
        options
      },
      listCompositeEntityRolesOperationSpec,
      callback) as Promise<Models.ModelListCompositeEntityRolesResponse>;
  }

  /**
   * @summary Create a role for a composite entity in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param cEntityId The composite entity extractor ID.
   * @param entityRoleCreateObject An entity role object containing the name of role.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelCreateCompositeEntityRoleResponse>
   */
  createCompositeEntityRole(appId: string, versionId: string, cEntityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelCreateCompositeEntityRoleResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param cEntityId The composite entity extractor ID.
   * @param entityRoleCreateObject An entity role object containing the name of role.
   * @param callback The callback
   */
  createCompositeEntityRole(appId: string, versionId: string, cEntityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param cEntityId The composite entity extractor ID.
   * @param entityRoleCreateObject An entity role object containing the name of role.
   * @param options The optional parameters
   * @param callback The callback
   */
  createCompositeEntityRole(appId: string, versionId: string, cEntityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  createCompositeEntityRole(appId: string, versionId: string, cEntityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ModelCreateCompositeEntityRoleResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        cEntityId,
        entityRoleCreateObject,
        options
      },
      createCompositeEntityRoleOperationSpec,
      callback) as Promise<Models.ModelCreateCompositeEntityRoleResponse>;
  }

  /**
   * @summary Get all roles for a Pattern.any entity in a version of the application
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId entity Id
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelListPatternAnyEntityRolesResponse>
   */
  listPatternAnyEntityRoles(appId: string, versionId: string, entityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelListPatternAnyEntityRolesResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId entity Id
   * @param callback The callback
   */
  listPatternAnyEntityRoles(appId: string, versionId: string, entityId: string, callback: msRest.ServiceCallback<Models.EntityRole[]>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId entity Id
   * @param options The optional parameters
   * @param callback The callback
   */
  listPatternAnyEntityRoles(appId: string, versionId: string, entityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntityRole[]>): void;
  listPatternAnyEntityRoles(appId: string, versionId: string, entityId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EntityRole[]>, callback?: msRest.ServiceCallback<Models.EntityRole[]>): Promise<Models.ModelListPatternAnyEntityRolesResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        options
      },
      listPatternAnyEntityRolesOperationSpec,
      callback) as Promise<Models.ModelListPatternAnyEntityRolesResponse>;
  }

  /**
   * @summary Create a role for an Pattern.any entity in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity model ID.
   * @param entityRoleCreateObject An entity role object containing the name of role.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelCreatePatternAnyEntityRoleResponse>
   */
  createPatternAnyEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelCreatePatternAnyEntityRoleResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity model ID.
   * @param entityRoleCreateObject An entity role object containing the name of role.
   * @param callback The callback
   */
  createPatternAnyEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity model ID.
   * @param entityRoleCreateObject An entity role object containing the name of role.
   * @param options The optional parameters
   * @param callback The callback
   */
  createPatternAnyEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  createPatternAnyEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ModelCreatePatternAnyEntityRoleResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        entityRoleCreateObject,
        options
      },
      createPatternAnyEntityRoleOperationSpec,
      callback) as Promise<Models.ModelCreatePatternAnyEntityRoleResponse>;
  }

  /**
   * @summary Get all roles for a hierarchical entity in a version of the application
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param hEntityId The hierarchical entity extractor ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelListHierarchicalEntityRolesResponse>
   */
  listHierarchicalEntityRoles(appId: string, versionId: string, hEntityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelListHierarchicalEntityRolesResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param hEntityId The hierarchical entity extractor ID.
   * @param callback The callback
   */
  listHierarchicalEntityRoles(appId: string, versionId: string, hEntityId: string, callback: msRest.ServiceCallback<Models.EntityRole[]>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param hEntityId The hierarchical entity extractor ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  listHierarchicalEntityRoles(appId: string, versionId: string, hEntityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntityRole[]>): void;
  listHierarchicalEntityRoles(appId: string, versionId: string, hEntityId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EntityRole[]>, callback?: msRest.ServiceCallback<Models.EntityRole[]>): Promise<Models.ModelListHierarchicalEntityRolesResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        hEntityId,
        options
      },
      listHierarchicalEntityRolesOperationSpec,
      callback) as Promise<Models.ModelListHierarchicalEntityRolesResponse>;
  }

  /**
   * @summary Create a role for an hierarchical entity in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param hEntityId The hierarchical entity extractor ID.
   * @param entityRoleCreateObject An entity role object containing the name of role.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelCreateHierarchicalEntityRoleResponse>
   */
  createHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelCreateHierarchicalEntityRoleResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param hEntityId The hierarchical entity extractor ID.
   * @param entityRoleCreateObject An entity role object containing the name of role.
   * @param callback The callback
   */
  createHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param hEntityId The hierarchical entity extractor ID.
   * @param entityRoleCreateObject An entity role object containing the name of role.
   * @param options The optional parameters
   * @param callback The callback
   */
  createHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  createHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ModelCreateHierarchicalEntityRoleResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        hEntityId,
        entityRoleCreateObject,
        options
      },
      createHierarchicalEntityRoleOperationSpec,
      callback) as Promise<Models.ModelCreateHierarchicalEntityRoleResponse>;
  }

  /**
   * @summary Get all roles for a prebuilt entity in a version of the application
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId entity Id
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelListCustomPrebuiltEntityRolesResponse>
   */
  listCustomPrebuiltEntityRoles(appId: string, versionId: string, entityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelListCustomPrebuiltEntityRolesResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId entity Id
   * @param callback The callback
   */
  listCustomPrebuiltEntityRoles(appId: string, versionId: string, entityId: string, callback: msRest.ServiceCallback<Models.EntityRole[]>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId entity Id
   * @param options The optional parameters
   * @param callback The callback
   */
  listCustomPrebuiltEntityRoles(appId: string, versionId: string, entityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntityRole[]>): void;
  listCustomPrebuiltEntityRoles(appId: string, versionId: string, entityId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EntityRole[]>, callback?: msRest.ServiceCallback<Models.EntityRole[]>): Promise<Models.ModelListCustomPrebuiltEntityRolesResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        options
      },
      listCustomPrebuiltEntityRolesOperationSpec,
      callback) as Promise<Models.ModelListCustomPrebuiltEntityRolesResponse>;
  }

  /**
   * @summary Create a role for a prebuilt entity in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity model ID.
   * @param entityRoleCreateObject An entity role object containing the name of role.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelCreateCustomPrebuiltEntityRoleResponse>
   */
  createCustomPrebuiltEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelCreateCustomPrebuiltEntityRoleResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity model ID.
   * @param entityRoleCreateObject An entity role object containing the name of role.
   * @param callback The callback
   */
  createCustomPrebuiltEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity model ID.
   * @param entityRoleCreateObject An entity role object containing the name of role.
   * @param options The optional parameters
   * @param callback The callback
   */
  createCustomPrebuiltEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  createCustomPrebuiltEntityRole(appId: string, versionId: string, entityId: string, entityRoleCreateObject: Models.EntityRoleCreateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ModelCreateCustomPrebuiltEntityRoleResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        entityRoleCreateObject,
        options
      },
      createCustomPrebuiltEntityRoleOperationSpec,
      callback) as Promise<Models.ModelCreateCustomPrebuiltEntityRoleResponse>;
  }

  /**
   * @summary Get the explicit (exception) list of the pattern.any entity in a version of the
   * application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The Pattern.Any entity id.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelGetExplicitListResponse>
   */
  getExplicitList(appId: string, versionId: string, entityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetExplicitListResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The Pattern.Any entity id.
   * @param callback The callback
   */
  getExplicitList(appId: string, versionId: string, entityId: string, callback: msRest.ServiceCallback<Models.ExplicitListItem[]>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The Pattern.Any entity id.
   * @param options The optional parameters
   * @param callback The callback
   */
  getExplicitList(appId: string, versionId: string, entityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExplicitListItem[]>): void;
  getExplicitList(appId: string, versionId: string, entityId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ExplicitListItem[]>, callback?: msRest.ServiceCallback<Models.ExplicitListItem[]>): Promise<Models.ModelGetExplicitListResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        options
      },
      getExplicitListOperationSpec,
      callback) as Promise<Models.ModelGetExplicitListResponse>;
  }

  /**
   * @summary Add a new exception to the explicit list for the Pattern.Any entity in a version of the
   * application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The Pattern.Any entity extractor ID.
   * @param item The new explicit list item.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelAddExplicitListItemResponse>
   */
  addExplicitListItem(appId: string, versionId: string, entityId: string, item: Models.ExplicitListItemCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelAddExplicitListItemResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The Pattern.Any entity extractor ID.
   * @param item The new explicit list item.
   * @param callback The callback
   */
  addExplicitListItem(appId: string, versionId: string, entityId: string, item: Models.ExplicitListItemCreateObject, callback: msRest.ServiceCallback<number>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The Pattern.Any entity extractor ID.
   * @param item The new explicit list item.
   * @param options The optional parameters
   * @param callback The callback
   */
  addExplicitListItem(appId: string, versionId: string, entityId: string, item: Models.ExplicitListItemCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number>): void;
  addExplicitListItem(appId: string, versionId: string, entityId: string, item: Models.ExplicitListItemCreateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<number>, callback?: msRest.ServiceCallback<number>): Promise<Models.ModelAddExplicitListItemResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        item,
        options
      },
      addExplicitListItemOperationSpec,
      callback) as Promise<Models.ModelAddExplicitListItemResponse>;
  }

  /**
   * @summary Gets information about a regular expression entity in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param regexEntityId The regular expression entity model ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelGetRegexEntityEntityInfoResponse>
   */
  getRegexEntityEntityInfo(appId: string, versionId: string, regexEntityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetRegexEntityEntityInfoResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param regexEntityId The regular expression entity model ID.
   * @param callback The callback
   */
  getRegexEntityEntityInfo(appId: string, versionId: string, regexEntityId: string, callback: msRest.ServiceCallback<Models.RegexEntityExtractor>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param regexEntityId The regular expression entity model ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  getRegexEntityEntityInfo(appId: string, versionId: string, regexEntityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RegexEntityExtractor>): void;
  getRegexEntityEntityInfo(appId: string, versionId: string, regexEntityId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RegexEntityExtractor>, callback?: msRest.ServiceCallback<Models.RegexEntityExtractor>): Promise<Models.ModelGetRegexEntityEntityInfoResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        regexEntityId,
        options
      },
      getRegexEntityEntityInfoOperationSpec,
      callback) as Promise<Models.ModelGetRegexEntityEntityInfoResponse>;
  }

  /**
   * @summary Updates the regular expression entity in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param regexEntityId The regular expression entity extractor ID.
   * @param regexEntityUpdateObject An object containing the new entity name and regex pattern.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelUpdateRegexEntityModelResponse>
   */
  updateRegexEntityModel(appId: string, versionId: string, regexEntityId: string, regexEntityUpdateObject: Models.RegexModelUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelUpdateRegexEntityModelResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param regexEntityId The regular expression entity extractor ID.
   * @param regexEntityUpdateObject An object containing the new entity name and regex pattern.
   * @param callback The callback
   */
  updateRegexEntityModel(appId: string, versionId: string, regexEntityId: string, regexEntityUpdateObject: Models.RegexModelUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param regexEntityId The regular expression entity extractor ID.
   * @param regexEntityUpdateObject An object containing the new entity name and regex pattern.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateRegexEntityModel(appId: string, versionId: string, regexEntityId: string, regexEntityUpdateObject: Models.RegexModelUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  updateRegexEntityModel(appId: string, versionId: string, regexEntityId: string, regexEntityUpdateObject: Models.RegexModelUpdateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelUpdateRegexEntityModelResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        regexEntityId,
        regexEntityUpdateObject,
        options
      },
      updateRegexEntityModelOperationSpec,
      callback) as Promise<Models.ModelUpdateRegexEntityModelResponse>;
  }

  /**
   * @summary Deletes a regular expression entity from a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param regexEntityId The regular expression entity extractor ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelDeleteRegexEntityModelResponse>
   */
  deleteRegexEntityModel(appId: string, versionId: string, regexEntityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeleteRegexEntityModelResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param regexEntityId The regular expression entity extractor ID.
   * @param callback The callback
   */
  deleteRegexEntityModel(appId: string, versionId: string, regexEntityId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param regexEntityId The regular expression entity extractor ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteRegexEntityModel(appId: string, versionId: string, regexEntityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  deleteRegexEntityModel(appId: string, versionId: string, regexEntityId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelDeleteRegexEntityModelResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        regexEntityId,
        options
      },
      deleteRegexEntityModelOperationSpec,
      callback) as Promise<Models.ModelDeleteRegexEntityModelResponse>;
  }

  /**
   * @summary Gets information about the Pattern.Any model in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity extractor ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelGetPatternAnyEntityInfoResponse>
   */
  getPatternAnyEntityInfo(appId: string, versionId: string, entityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetPatternAnyEntityInfoResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity extractor ID.
   * @param callback The callback
   */
  getPatternAnyEntityInfo(appId: string, versionId: string, entityId: string, callback: msRest.ServiceCallback<Models.PatternAnyEntityExtractor>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity extractor ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPatternAnyEntityInfo(appId: string, versionId: string, entityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PatternAnyEntityExtractor>): void;
  getPatternAnyEntityInfo(appId: string, versionId: string, entityId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PatternAnyEntityExtractor>, callback?: msRest.ServiceCallback<Models.PatternAnyEntityExtractor>): Promise<Models.ModelGetPatternAnyEntityInfoResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        options
      },
      getPatternAnyEntityInfoOperationSpec,
      callback) as Promise<Models.ModelGetPatternAnyEntityInfoResponse>;
  }

  /**
   * @summary Updates the name and explicit (exception) list of a Pattern.Any entity model in a
   * version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The Pattern.Any entity extractor ID.
   * @param patternAnyUpdateObject An object containing the explicit list of the Pattern.Any entity.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelUpdatePatternAnyEntityModelResponse>
   */
  updatePatternAnyEntityModel(appId: string, versionId: string, entityId: string, patternAnyUpdateObject: Models.PatternAnyModelUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelUpdatePatternAnyEntityModelResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The Pattern.Any entity extractor ID.
   * @param patternAnyUpdateObject An object containing the explicit list of the Pattern.Any entity.
   * @param callback The callback
   */
  updatePatternAnyEntityModel(appId: string, versionId: string, entityId: string, patternAnyUpdateObject: Models.PatternAnyModelUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The Pattern.Any entity extractor ID.
   * @param patternAnyUpdateObject An object containing the explicit list of the Pattern.Any entity.
   * @param options The optional parameters
   * @param callback The callback
   */
  updatePatternAnyEntityModel(appId: string, versionId: string, entityId: string, patternAnyUpdateObject: Models.PatternAnyModelUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  updatePatternAnyEntityModel(appId: string, versionId: string, entityId: string, patternAnyUpdateObject: Models.PatternAnyModelUpdateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelUpdatePatternAnyEntityModelResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        patternAnyUpdateObject,
        options
      },
      updatePatternAnyEntityModelOperationSpec,
      callback) as Promise<Models.ModelUpdatePatternAnyEntityModelResponse>;
  }

  /**
   * @summary Deletes a Pattern.Any entity extractor from a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The Pattern.Any entity extractor ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelDeletePatternAnyEntityModelResponse>
   */
  deletePatternAnyEntityModel(appId: string, versionId: string, entityId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeletePatternAnyEntityModelResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The Pattern.Any entity extractor ID.
   * @param callback The callback
   */
  deletePatternAnyEntityModel(appId: string, versionId: string, entityId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The Pattern.Any entity extractor ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  deletePatternAnyEntityModel(appId: string, versionId: string, entityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  deletePatternAnyEntityModel(appId: string, versionId: string, entityId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelDeletePatternAnyEntityModelResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        options
      },
      deletePatternAnyEntityModelOperationSpec,
      callback) as Promise<Models.ModelDeletePatternAnyEntityModelResponse>;
  }

  /**
   * @summary Get one role for a given entity in a version of the application
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId entity ID.
   * @param roleId entity role ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelGetEntityRoleResponse>
   */
  getEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetEntityRoleResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId entity ID.
   * @param roleId entity role ID.
   * @param callback The callback
   */
  getEntityRole(appId: string, versionId: string, entityId: string, roleId: string, callback: msRest.ServiceCallback<Models.EntityRole>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId entity ID.
   * @param roleId entity role ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  getEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntityRole>): void;
  getEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EntityRole>, callback?: msRest.ServiceCallback<Models.EntityRole>): Promise<Models.ModelGetEntityRoleResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        roleId,
        options
      },
      getEntityRoleOperationSpec,
      callback) as Promise<Models.ModelGetEntityRoleResponse>;
  }

  /**
   * @summary Update a role for a given entity in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity ID.
   * @param roleId The entity role ID.
   * @param entityRoleUpdateObject The new entity role.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelUpdateEntityRoleResponse>
   */
  updateEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelUpdateEntityRoleResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity ID.
   * @param roleId The entity role ID.
   * @param entityRoleUpdateObject The new entity role.
   * @param callback The callback
   */
  updateEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity ID.
   * @param roleId The entity role ID.
   * @param entityRoleUpdateObject The new entity role.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  updateEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelUpdateEntityRoleResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        roleId,
        entityRoleUpdateObject,
        options
      },
      updateEntityRoleOperationSpec,
      callback) as Promise<Models.ModelUpdateEntityRoleResponse>;
  }

  /**
   * @summary Delete an entity role in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity ID.
   * @param roleId The entity role Id.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelDeleteEntityRoleResponse>
   */
  deleteEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeleteEntityRoleResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity ID.
   * @param roleId The entity role Id.
   * @param callback The callback
   */
  deleteEntityRole(appId: string, versionId: string, entityId: string, roleId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity ID.
   * @param roleId The entity role Id.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  deleteEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelDeleteEntityRoleResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        roleId,
        options
      },
      deleteEntityRoleOperationSpec,
      callback) as Promise<Models.ModelDeleteEntityRoleResponse>;
  }

  /**
   * @summary Get one role for a given prebuilt entity in a version of the application
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId entity ID.
   * @param roleId entity role ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelGetPrebuiltEntityRoleResponse>
   */
  getPrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetPrebuiltEntityRoleResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId entity ID.
   * @param roleId entity role ID.
   * @param callback The callback
   */
  getPrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, callback: msRest.ServiceCallback<Models.EntityRole>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId entity ID.
   * @param roleId entity role ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntityRole>): void;
  getPrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EntityRole>, callback?: msRest.ServiceCallback<Models.EntityRole>): Promise<Models.ModelGetPrebuiltEntityRoleResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        roleId,
        options
      },
      getPrebuiltEntityRoleOperationSpec,
      callback) as Promise<Models.ModelGetPrebuiltEntityRoleResponse>;
  }

  /**
   * @summary Update a role for a given prebuilt entity in a version of the application
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity ID.
   * @param roleId The entity role ID.
   * @param entityRoleUpdateObject The new entity role.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelUpdatePrebuiltEntityRoleResponse>
   */
  updatePrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelUpdatePrebuiltEntityRoleResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity ID.
   * @param roleId The entity role ID.
   * @param entityRoleUpdateObject The new entity role.
   * @param callback The callback
   */
  updatePrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity ID.
   * @param roleId The entity role ID.
   * @param entityRoleUpdateObject The new entity role.
   * @param options The optional parameters
   * @param callback The callback
   */
  updatePrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  updatePrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelUpdatePrebuiltEntityRoleResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        roleId,
        entityRoleUpdateObject,
        options
      },
      updatePrebuiltEntityRoleOperationSpec,
      callback) as Promise<Models.ModelUpdatePrebuiltEntityRoleResponse>;
  }

  /**
   * @summary Delete a role in a prebuilt entity in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity ID.
   * @param roleId The entity role Id.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelDeletePrebuiltEntityRoleResponse>
   */
  deletePrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeletePrebuiltEntityRoleResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity ID.
   * @param roleId The entity role Id.
   * @param callback The callback
   */
  deletePrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity ID.
   * @param roleId The entity role Id.
   * @param options The optional parameters
   * @param callback The callback
   */
  deletePrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  deletePrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelDeletePrebuiltEntityRoleResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        roleId,
        options
      },
      deletePrebuiltEntityRoleOperationSpec,
      callback) as Promise<Models.ModelDeletePrebuiltEntityRoleResponse>;
  }

  /**
   * @summary Get one role for a given list entity in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId entity ID.
   * @param roleId entity role ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelGetClosedListEntityRoleResponse>
   */
  getClosedListEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetClosedListEntityRoleResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId entity ID.
   * @param roleId entity role ID.
   * @param callback The callback
   */
  getClosedListEntityRole(appId: string, versionId: string, entityId: string, roleId: string, callback: msRest.ServiceCallback<Models.EntityRole>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId entity ID.
   * @param roleId entity role ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  getClosedListEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntityRole>): void;
  getClosedListEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EntityRole>, callback?: msRest.ServiceCallback<Models.EntityRole>): Promise<Models.ModelGetClosedListEntityRoleResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        roleId,
        options
      },
      getClosedListEntityRoleOperationSpec,
      callback) as Promise<Models.ModelGetClosedListEntityRoleResponse>;
  }

  /**
   * @summary Update a role for a given list entity in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity ID.
   * @param roleId The entity role ID.
   * @param entityRoleUpdateObject The new entity role.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelUpdateClosedListEntityRoleResponse>
   */
  updateClosedListEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelUpdateClosedListEntityRoleResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity ID.
   * @param roleId The entity role ID.
   * @param entityRoleUpdateObject The new entity role.
   * @param callback The callback
   */
  updateClosedListEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity ID.
   * @param roleId The entity role ID.
   * @param entityRoleUpdateObject The new entity role.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateClosedListEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  updateClosedListEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelUpdateClosedListEntityRoleResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        roleId,
        entityRoleUpdateObject,
        options
      },
      updateClosedListEntityRoleOperationSpec,
      callback) as Promise<Models.ModelUpdateClosedListEntityRoleResponse>;
  }

  /**
   * @summary Delete a role for a given list entity in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity ID.
   * @param roleId The entity role Id.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelDeleteClosedListEntityRoleResponse>
   */
  deleteClosedListEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeleteClosedListEntityRoleResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity ID.
   * @param roleId The entity role Id.
   * @param callback The callback
   */
  deleteClosedListEntityRole(appId: string, versionId: string, entityId: string, roleId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity ID.
   * @param roleId The entity role Id.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteClosedListEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  deleteClosedListEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelDeleteClosedListEntityRoleResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        roleId,
        options
      },
      deleteClosedListEntityRoleOperationSpec,
      callback) as Promise<Models.ModelDeleteClosedListEntityRoleResponse>;
  }

  /**
   * @summary Get one role for a given regular expression entity in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId entity ID.
   * @param roleId entity role ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelGetRegexEntityRoleResponse>
   */
  getRegexEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetRegexEntityRoleResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId entity ID.
   * @param roleId entity role ID.
   * @param callback The callback
   */
  getRegexEntityRole(appId: string, versionId: string, entityId: string, roleId: string, callback: msRest.ServiceCallback<Models.EntityRole>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId entity ID.
   * @param roleId entity role ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  getRegexEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntityRole>): void;
  getRegexEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EntityRole>, callback?: msRest.ServiceCallback<Models.EntityRole>): Promise<Models.ModelGetRegexEntityRoleResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        roleId,
        options
      },
      getRegexEntityRoleOperationSpec,
      callback) as Promise<Models.ModelGetRegexEntityRoleResponse>;
  }

  /**
   * @summary Update a role for a given regular expression entity in a version of the application
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity ID.
   * @param roleId The entity role ID.
   * @param entityRoleUpdateObject The new entity role.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelUpdateRegexEntityRoleResponse>
   */
  updateRegexEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelUpdateRegexEntityRoleResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity ID.
   * @param roleId The entity role ID.
   * @param entityRoleUpdateObject The new entity role.
   * @param callback The callback
   */
  updateRegexEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity ID.
   * @param roleId The entity role ID.
   * @param entityRoleUpdateObject The new entity role.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateRegexEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  updateRegexEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelUpdateRegexEntityRoleResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        roleId,
        entityRoleUpdateObject,
        options
      },
      updateRegexEntityRoleOperationSpec,
      callback) as Promise<Models.ModelUpdateRegexEntityRoleResponse>;
  }

  /**
   * @summary Delete a role for a given regular expression in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity ID.
   * @param roleId The entity role Id.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelDeleteRegexEntityRoleResponse>
   */
  deleteRegexEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeleteRegexEntityRoleResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity ID.
   * @param roleId The entity role Id.
   * @param callback The callback
   */
  deleteRegexEntityRole(appId: string, versionId: string, entityId: string, roleId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity ID.
   * @param roleId The entity role Id.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteRegexEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  deleteRegexEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelDeleteRegexEntityRoleResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        roleId,
        options
      },
      deleteRegexEntityRoleOperationSpec,
      callback) as Promise<Models.ModelDeleteRegexEntityRoleResponse>;
  }

  /**
   * @summary Get one role for a given composite entity in a version of the application
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param cEntityId The composite entity extractor ID.
   * @param roleId entity role ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelGetCompositeEntityRoleResponse>
   */
  getCompositeEntityRole(appId: string, versionId: string, cEntityId: string, roleId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetCompositeEntityRoleResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param cEntityId The composite entity extractor ID.
   * @param roleId entity role ID.
   * @param callback The callback
   */
  getCompositeEntityRole(appId: string, versionId: string, cEntityId: string, roleId: string, callback: msRest.ServiceCallback<Models.EntityRole>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param cEntityId The composite entity extractor ID.
   * @param roleId entity role ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  getCompositeEntityRole(appId: string, versionId: string, cEntityId: string, roleId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntityRole>): void;
  getCompositeEntityRole(appId: string, versionId: string, cEntityId: string, roleId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EntityRole>, callback?: msRest.ServiceCallback<Models.EntityRole>): Promise<Models.ModelGetCompositeEntityRoleResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        cEntityId,
        roleId,
        options
      },
      getCompositeEntityRoleOperationSpec,
      callback) as Promise<Models.ModelGetCompositeEntityRoleResponse>;
  }

  /**
   * @summary Update a role for a given composite entity in a version of the application
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param cEntityId The composite entity extractor ID.
   * @param roleId The entity role ID.
   * @param entityRoleUpdateObject The new entity role.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelUpdateCompositeEntityRoleResponse>
   */
  updateCompositeEntityRole(appId: string, versionId: string, cEntityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelUpdateCompositeEntityRoleResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param cEntityId The composite entity extractor ID.
   * @param roleId The entity role ID.
   * @param entityRoleUpdateObject The new entity role.
   * @param callback The callback
   */
  updateCompositeEntityRole(appId: string, versionId: string, cEntityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param cEntityId The composite entity extractor ID.
   * @param roleId The entity role ID.
   * @param entityRoleUpdateObject The new entity role.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateCompositeEntityRole(appId: string, versionId: string, cEntityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  updateCompositeEntityRole(appId: string, versionId: string, cEntityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelUpdateCompositeEntityRoleResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        cEntityId,
        roleId,
        entityRoleUpdateObject,
        options
      },
      updateCompositeEntityRoleOperationSpec,
      callback) as Promise<Models.ModelUpdateCompositeEntityRoleResponse>;
  }

  /**
   * @summary Delete a role for a given composite entity in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param cEntityId The composite entity extractor ID.
   * @param roleId The entity role Id.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelDeleteCompositeEntityRoleResponse>
   */
  deleteCompositeEntityRole(appId: string, versionId: string, cEntityId: string, roleId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeleteCompositeEntityRoleResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param cEntityId The composite entity extractor ID.
   * @param roleId The entity role Id.
   * @param callback The callback
   */
  deleteCompositeEntityRole(appId: string, versionId: string, cEntityId: string, roleId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param cEntityId The composite entity extractor ID.
   * @param roleId The entity role Id.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCompositeEntityRole(appId: string, versionId: string, cEntityId: string, roleId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  deleteCompositeEntityRole(appId: string, versionId: string, cEntityId: string, roleId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelDeleteCompositeEntityRoleResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        cEntityId,
        roleId,
        options
      },
      deleteCompositeEntityRoleOperationSpec,
      callback) as Promise<Models.ModelDeleteCompositeEntityRoleResponse>;
  }

  /**
   * @summary Get one role for a given Pattern.any entity in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId entity ID.
   * @param roleId entity role ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelGetPatternAnyEntityRoleResponse>
   */
  getPatternAnyEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetPatternAnyEntityRoleResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId entity ID.
   * @param roleId entity role ID.
   * @param callback The callback
   */
  getPatternAnyEntityRole(appId: string, versionId: string, entityId: string, roleId: string, callback: msRest.ServiceCallback<Models.EntityRole>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId entity ID.
   * @param roleId entity role ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPatternAnyEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntityRole>): void;
  getPatternAnyEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EntityRole>, callback?: msRest.ServiceCallback<Models.EntityRole>): Promise<Models.ModelGetPatternAnyEntityRoleResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        roleId,
        options
      },
      getPatternAnyEntityRoleOperationSpec,
      callback) as Promise<Models.ModelGetPatternAnyEntityRoleResponse>;
  }

  /**
   * @summary Update a role for a given Pattern.any entity in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity ID.
   * @param roleId The entity role ID.
   * @param entityRoleUpdateObject The new entity role.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelUpdatePatternAnyEntityRoleResponse>
   */
  updatePatternAnyEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelUpdatePatternAnyEntityRoleResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity ID.
   * @param roleId The entity role ID.
   * @param entityRoleUpdateObject The new entity role.
   * @param callback The callback
   */
  updatePatternAnyEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity ID.
   * @param roleId The entity role ID.
   * @param entityRoleUpdateObject The new entity role.
   * @param options The optional parameters
   * @param callback The callback
   */
  updatePatternAnyEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  updatePatternAnyEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelUpdatePatternAnyEntityRoleResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        roleId,
        entityRoleUpdateObject,
        options
      },
      updatePatternAnyEntityRoleOperationSpec,
      callback) as Promise<Models.ModelUpdatePatternAnyEntityRoleResponse>;
  }

  /**
   * @summary Delete a role for a given Pattern.any entity in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity ID.
   * @param roleId The entity role Id.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelDeletePatternAnyEntityRoleResponse>
   */
  deletePatternAnyEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeletePatternAnyEntityRoleResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity ID.
   * @param roleId The entity role Id.
   * @param callback The callback
   */
  deletePatternAnyEntityRole(appId: string, versionId: string, entityId: string, roleId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity ID.
   * @param roleId The entity role Id.
   * @param options The optional parameters
   * @param callback The callback
   */
  deletePatternAnyEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  deletePatternAnyEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelDeletePatternAnyEntityRoleResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        roleId,
        options
      },
      deletePatternAnyEntityRoleOperationSpec,
      callback) as Promise<Models.ModelDeletePatternAnyEntityRoleResponse>;
  }

  /**
   * @summary Get one role for a given hierarchical entity in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param hEntityId The hierarchical entity extractor ID.
   * @param roleId entity role ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelGetHierarchicalEntityRoleResponse>
   */
  getHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, roleId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetHierarchicalEntityRoleResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param hEntityId The hierarchical entity extractor ID.
   * @param roleId entity role ID.
   * @param callback The callback
   */
  getHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, roleId: string, callback: msRest.ServiceCallback<Models.EntityRole>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param hEntityId The hierarchical entity extractor ID.
   * @param roleId entity role ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  getHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, roleId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntityRole>): void;
  getHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, roleId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EntityRole>, callback?: msRest.ServiceCallback<Models.EntityRole>): Promise<Models.ModelGetHierarchicalEntityRoleResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        hEntityId,
        roleId,
        options
      },
      getHierarchicalEntityRoleOperationSpec,
      callback) as Promise<Models.ModelGetHierarchicalEntityRoleResponse>;
  }

  /**
   * @summary Update a role for a given hierarchical entity in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param hEntityId The hierarchical entity extractor ID.
   * @param roleId The entity role ID.
   * @param entityRoleUpdateObject The new entity role.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelUpdateHierarchicalEntityRoleResponse>
   */
  updateHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelUpdateHierarchicalEntityRoleResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param hEntityId The hierarchical entity extractor ID.
   * @param roleId The entity role ID.
   * @param entityRoleUpdateObject The new entity role.
   * @param callback The callback
   */
  updateHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param hEntityId The hierarchical entity extractor ID.
   * @param roleId The entity role ID.
   * @param entityRoleUpdateObject The new entity role.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  updateHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelUpdateHierarchicalEntityRoleResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        hEntityId,
        roleId,
        entityRoleUpdateObject,
        options
      },
      updateHierarchicalEntityRoleOperationSpec,
      callback) as Promise<Models.ModelUpdateHierarchicalEntityRoleResponse>;
  }

  /**
   * @summary Delete a role for a given hierarchical role in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param hEntityId The hierarchical entity extractor ID.
   * @param roleId The entity role Id.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelDeleteHierarchicalEntityRoleResponse>
   */
  deleteHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, roleId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeleteHierarchicalEntityRoleResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param hEntityId The hierarchical entity extractor ID.
   * @param roleId The entity role Id.
   * @param callback The callback
   */
  deleteHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, roleId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param hEntityId The hierarchical entity extractor ID.
   * @param roleId The entity role Id.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, roleId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  deleteHierarchicalEntityRole(appId: string, versionId: string, hEntityId: string, roleId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelDeleteHierarchicalEntityRoleResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        hEntityId,
        roleId,
        options
      },
      deleteHierarchicalEntityRoleOperationSpec,
      callback) as Promise<Models.ModelDeleteHierarchicalEntityRoleResponse>;
  }

  /**
   * @summary Get one role for a given prebuilt entity in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId entity ID.
   * @param roleId entity role ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelGetCustomEntityRoleResponse>
   */
  getCustomEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetCustomEntityRoleResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId entity ID.
   * @param roleId entity role ID.
   * @param callback The callback
   */
  getCustomEntityRole(appId: string, versionId: string, entityId: string, roleId: string, callback: msRest.ServiceCallback<Models.EntityRole>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId entity ID.
   * @param roleId entity role ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  getCustomEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntityRole>): void;
  getCustomEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EntityRole>, callback?: msRest.ServiceCallback<Models.EntityRole>): Promise<Models.ModelGetCustomEntityRoleResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        roleId,
        options
      },
      getCustomEntityRoleOperationSpec,
      callback) as Promise<Models.ModelGetCustomEntityRoleResponse>;
  }

  /**
   * @summary Update a role for a given prebuilt entity in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity ID.
   * @param roleId The entity role ID.
   * @param entityRoleUpdateObject The new entity role.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelUpdateCustomPrebuiltEntityRoleResponse>
   */
  updateCustomPrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelUpdateCustomPrebuiltEntityRoleResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity ID.
   * @param roleId The entity role ID.
   * @param entityRoleUpdateObject The new entity role.
   * @param callback The callback
   */
  updateCustomPrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity ID.
   * @param roleId The entity role ID.
   * @param entityRoleUpdateObject The new entity role.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateCustomPrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  updateCustomPrebuiltEntityRole(appId: string, versionId: string, entityId: string, roleId: string, entityRoleUpdateObject: Models.EntityRoleUpdateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelUpdateCustomPrebuiltEntityRoleResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        roleId,
        entityRoleUpdateObject,
        options
      },
      updateCustomPrebuiltEntityRoleOperationSpec,
      callback) as Promise<Models.ModelUpdateCustomPrebuiltEntityRoleResponse>;
  }

  /**
   * @summary Delete a role for a given prebuilt entity in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity ID.
   * @param roleId The entity role Id.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelDeleteCustomEntityRoleResponse>
   */
  deleteCustomEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeleteCustomEntityRoleResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity ID.
   * @param roleId The entity role Id.
   * @param callback The callback
   */
  deleteCustomEntityRole(appId: string, versionId: string, entityId: string, roleId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The entity ID.
   * @param roleId The entity role Id.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCustomEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  deleteCustomEntityRole(appId: string, versionId: string, entityId: string, roleId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelDeleteCustomEntityRoleResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        roleId,
        options
      },
      deleteCustomEntityRoleOperationSpec,
      callback) as Promise<Models.ModelDeleteCustomEntityRoleResponse>;
  }

  /**
   * @summary Get the explicit (exception) list of the pattern.any entity in a version of the
   * application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The Pattern.Any entity Id.
   * @param itemId The explicit list item Id.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelGetExplicitListItemResponse>
   */
  getExplicitListItem(appId: string, versionId: string, entityId: string, itemId: number, options?: msRest.RequestOptionsBase): Promise<Models.ModelGetExplicitListItemResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The Pattern.Any entity Id.
   * @param itemId The explicit list item Id.
   * @param callback The callback
   */
  getExplicitListItem(appId: string, versionId: string, entityId: string, itemId: number, callback: msRest.ServiceCallback<Models.ExplicitListItem>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The Pattern.Any entity Id.
   * @param itemId The explicit list item Id.
   * @param options The optional parameters
   * @param callback The callback
   */
  getExplicitListItem(appId: string, versionId: string, entityId: string, itemId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExplicitListItem>): void;
  getExplicitListItem(appId: string, versionId: string, entityId: string, itemId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ExplicitListItem>, callback?: msRest.ServiceCallback<Models.ExplicitListItem>): Promise<Models.ModelGetExplicitListItemResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        itemId,
        options
      },
      getExplicitListItemOperationSpec,
      callback) as Promise<Models.ModelGetExplicitListItemResponse>;
  }

  /**
   * @summary Updates an explicit (exception) list item for a Pattern.Any entity in a version of the
   * application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The Pattern.Any entity extractor ID.
   * @param itemId The explicit list item ID.
   * @param item The new explicit list item.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelUpdateExplicitListItemResponse>
   */
  updateExplicitListItem(appId: string, versionId: string, entityId: string, itemId: number, item: Models.ExplicitListItemUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.ModelUpdateExplicitListItemResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The Pattern.Any entity extractor ID.
   * @param itemId The explicit list item ID.
   * @param item The new explicit list item.
   * @param callback The callback
   */
  updateExplicitListItem(appId: string, versionId: string, entityId: string, itemId: number, item: Models.ExplicitListItemUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The Pattern.Any entity extractor ID.
   * @param itemId The explicit list item ID.
   * @param item The new explicit list item.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateExplicitListItem(appId: string, versionId: string, entityId: string, itemId: number, item: Models.ExplicitListItemUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  updateExplicitListItem(appId: string, versionId: string, entityId: string, itemId: number, item: Models.ExplicitListItemUpdateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelUpdateExplicitListItemResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        itemId,
        item,
        options
      },
      updateExplicitListItemOperationSpec,
      callback) as Promise<Models.ModelUpdateExplicitListItemResponse>;
  }

  /**
   * @summary Delete an item from the explicit (exception) list for a Pattern.any entity in a version
   * of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The pattern.any entity id.
   * @param itemId The explicit list item which will be deleted.
   * @param [options] The optional parameters
   * @returns Promise<Models.ModelDeleteExplicitListItemResponse>
   */
  deleteExplicitListItem(appId: string, versionId: string, entityId: string, itemId: number, options?: msRest.RequestOptionsBase): Promise<Models.ModelDeleteExplicitListItemResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The pattern.any entity id.
   * @param itemId The explicit list item which will be deleted.
   * @param callback The callback
   */
  deleteExplicitListItem(appId: string, versionId: string, entityId: string, itemId: number, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param entityId The pattern.any entity id.
   * @param itemId The explicit list item which will be deleted.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteExplicitListItem(appId: string, versionId: string, entityId: string, itemId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  deleteExplicitListItem(appId: string, versionId: string, entityId: string, itemId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.ModelDeleteExplicitListItemResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        entityId,
        itemId,
        options
      },
      deleteExplicitListItemOperationSpec,
      callback) as Promise<Models.ModelDeleteExplicitListItemResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const addIntentOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apps/{appId}/versions/{versionId}/intents",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0
  ],
  requestBody: {
    parameterPath: "intentCreateObject",
    mapper: {
      ...Mappers.ModelCreateObject,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Uuid"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listIntentsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/intents",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0
  ],
  queryParameters: [
    Parameters.skip,
    Parameters.take
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IntentClassifier"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const addEntityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apps/{appId}/versions/{versionId}/entities",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0
  ],
  requestBody: {
    parameterPath: "entityModelCreateObject",
    mapper: {
      ...Mappers.EntityModelCreateObject,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Uuid"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listEntitiesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/entities",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0
  ],
  queryParameters: [
    Parameters.skip,
    Parameters.take
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NDepthEntityExtractor"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listHierarchicalEntitiesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/hierarchicalentities",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0
  ],
  queryParameters: [
    Parameters.skip,
    Parameters.take
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HierarchicalEntityExtractor"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listCompositeEntitiesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/compositeentities",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0
  ],
  queryParameters: [
    Parameters.skip,
    Parameters.take
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CompositeEntityExtractor"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listClosedListsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/closedlists",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0
  ],
  queryParameters: [
    Parameters.skip,
    Parameters.take
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClosedListEntityExtractor"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const addClosedListOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apps/{appId}/versions/{versionId}/closedlists",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0
  ],
  requestBody: {
    parameterPath: "closedListModelCreateObject",
    mapper: {
      ...Mappers.ClosedListModelCreateObject,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Uuid"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const addPrebuiltOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apps/{appId}/versions/{versionId}/prebuilts",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0
  ],
  requestBody: {
    parameterPath: "prebuiltExtractorNames",
    mapper: {
      required: true,
      serializedName: "prebuiltExtractorNames",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "String"
          }
        }
      }
    }
  },
  responses: {
    201: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrebuiltEntityExtractor"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listPrebuiltsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/prebuilts",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0
  ],
  queryParameters: [
    Parameters.skip,
    Parameters.take
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrebuiltEntityExtractor"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listPrebuiltEntitiesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/listprebuilts",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AvailablePrebuiltEntityModel"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listModelsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/models",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0
  ],
  queryParameters: [
    Parameters.skip,
    Parameters.take
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ModelInfoResponse"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const examplesMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/models/{modelId}/examples",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.modelId
  ],
  queryParameters: [
    Parameters.skip,
    Parameters.take
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LabelTextObject"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getIntentOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/intents/{intentId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.intentId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IntentClassifier
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateIntentOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apps/{appId}/versions/{versionId}/intents/{intentId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.intentId
  ],
  requestBody: {
    parameterPath: "modelUpdateObject",
    mapper: {
      ...Mappers.ModelUpdateObject,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteIntentOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apps/{appId}/versions/{versionId}/intents/{intentId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.intentId
  ],
  queryParameters: [
    Parameters.deleteUtterances
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getEntityOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/entities/{entityId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NDepthEntityExtractor
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteEntityOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apps/{appId}/versions/{versionId}/entities/{entityId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateEntityChildOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apps/{appId}/versions/{versionId}/entities/{entityId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId
  ],
  requestBody: {
    parameterPath: "entityModelUpdateObject",
    mapper: {
      ...Mappers.EntityModelUpdateObject,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getIntentFeaturesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/intents/{intentId}/features",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.intentId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ModelFeatureInformation"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const replaceIntentFeaturesOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apps/{appId}/versions/{versionId}/intents/{intentId}/features",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.intentId
  ],
  requestBody: {
    parameterPath: "featureRelationsUpdateObject",
    mapper: {
      required: true,
      serializedName: "featureRelationsUpdateObject",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Composite",
            className: "ModelFeatureInformation"
          }
        }
      }
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteIntentFeatureOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apps/{appId}/versions/{versionId}/intents/{intentId}/features",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.intentId
  ],
  requestBody: {
    parameterPath: "featureRelationDeleteObject",
    mapper: {
      ...Mappers.ModelFeatureInformation,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getEntityFeaturesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/entities/{entityId}/features",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ModelFeatureInformation"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const replaceEntityFeaturesOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apps/{appId}/versions/{versionId}/entities/{entityId}/features",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId
  ],
  requestBody: {
    parameterPath: "featureRelationsUpdateObject",
    mapper: {
      required: true,
      serializedName: "featureRelationsUpdateObject",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Composite",
            className: "ModelFeatureInformation"
          }
        }
      }
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteEntityFeatureOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apps/{appId}/versions/{versionId}/entities/{entityId}/features",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId
  ],
  requestBody: {
    parameterPath: "featureRelationDeleteObject",
    mapper: {
      ...Mappers.ModelFeatureInformation,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getHierarchicalEntityOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.hEntityId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HierarchicalEntityExtractor
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateHierarchicalEntityOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.hEntityId
  ],
  requestBody: {
    parameterPath: "modelUpdateObject",
    mapper: {
      ...Mappers.ModelUpdateObject,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteHierarchicalEntityOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.hEntityId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getCompositeEntityOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.cEntityId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CompositeEntityExtractor
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateCompositeEntityOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.cEntityId
  ],
  requestBody: {
    parameterPath: "compositeModelUpdateObject",
    mapper: {
      ...Mappers.CompositeEntityModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteCompositeEntityOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.cEntityId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getClosedListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/closedlists/{clEntityId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.clEntityId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ClosedListEntityExtractor
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateClosedListOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apps/{appId}/versions/{versionId}/closedlists/{clEntityId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.clEntityId
  ],
  requestBody: {
    parameterPath: "closedListModelUpdateObject",
    mapper: {
      ...Mappers.ClosedListModelUpdateObject,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const patchClosedListOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apps/{appId}/versions/{versionId}/closedlists/{clEntityId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.clEntityId
  ],
  requestBody: {
    parameterPath: "closedListModelPatchObject",
    mapper: {
      ...Mappers.ClosedListModelPatchObject,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteClosedListOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apps/{appId}/versions/{versionId}/closedlists/{clEntityId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.clEntityId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getPrebuiltOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/prebuilts/{prebuiltId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.prebuiltId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PrebuiltEntityExtractor
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deletePrebuiltOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apps/{appId}/versions/{versionId}/prebuilts/{prebuiltId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.prebuiltId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteSubListOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apps/{appId}/versions/{versionId}/closedlists/{clEntityId}/sublists/{subListId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.clEntityId,
    Parameters.subListId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateSubListOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apps/{appId}/versions/{versionId}/closedlists/{clEntityId}/sublists/{subListId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.clEntityId,
    Parameters.subListId
  ],
  requestBody: {
    parameterPath: "wordListBaseUpdateObject",
    mapper: {
      ...Mappers.WordListBaseUpdateObject,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listIntentSuggestionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/intents/{intentId}/suggest",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.intentId
  ],
  queryParameters: [
    Parameters.take,
    Parameters.enableNestedChildren
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IntentsSuggestionExample"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listEntitySuggestionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/entities/{entityId}/suggest",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId
  ],
  queryParameters: [
    Parameters.take,
    Parameters.enableNestedChildren
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EntitiesSuggestionExample"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const addSubListOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apps/{appId}/versions/{versionId}/closedlists/{clEntityId}/sublists",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.clEntityId
  ],
  requestBody: {
    parameterPath: "wordListCreateObject",
    mapper: {
      ...Mappers.WordListObject,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Number"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const addCustomPrebuiltDomainOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apps/{appId}/versions/{versionId}/customprebuiltdomains",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0
  ],
  requestBody: {
    parameterPath: "prebuiltDomainObject",
    mapper: {
      ...Mappers.PrebuiltDomainCreateBaseObject,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Uuid"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const addCustomPrebuiltIntentOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apps/{appId}/versions/{versionId}/customprebuiltintents",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0
  ],
  requestBody: {
    parameterPath: "prebuiltDomainModelCreateObject",
    mapper: {
      ...Mappers.PrebuiltDomainModelCreateObject,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Uuid"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listCustomPrebuiltIntentsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/customprebuiltintents",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IntentClassifier"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const addCustomPrebuiltEntityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apps/{appId}/versions/{versionId}/customprebuiltentities",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0
  ],
  requestBody: {
    parameterPath: "prebuiltDomainModelCreateObject",
    mapper: {
      ...Mappers.PrebuiltDomainModelCreateObject,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Uuid"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listCustomPrebuiltEntitiesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/customprebuiltentities",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EntityExtractor"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listCustomPrebuiltModelsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/customprebuiltmodels",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CustomPrebuiltModel"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteCustomPrebuiltDomainOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apps/{appId}/versions/{versionId}/customprebuiltdomains/{domainName}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.domainName
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const addEntityChildOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apps/{appId}/versions/{versionId}/entities/{entityId}/children",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId
  ],
  requestBody: {
    parameterPath: "childEntityModelCreateObject",
    mapper: {
      ...Mappers.ChildEntityModelCreateObject,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Uuid"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getHierarchicalEntityChildOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/children/{hChildId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.hEntityId,
    Parameters.hChildId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HierarchicalChildEntity
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateHierarchicalEntityChildOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/children/{hChildId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.hEntityId,
    Parameters.hChildId
  ],
  requestBody: {
    parameterPath: "hierarchicalChildModelUpdateObject",
    mapper: {
      ...Mappers.HierarchicalChildModelUpdateObject,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteHierarchicalEntityChildOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/children/{hChildId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.hEntityId,
    Parameters.hChildId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const addCompositeEntityChildOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/children",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.cEntityId
  ],
  requestBody: {
    parameterPath: "compositeChildModelCreateObject",
    mapper: {
      ...Mappers.CompositeChildModelCreateObject,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Uuid"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteCompositeEntityChildOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/children/{cChildId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.cEntityId,
    Parameters.cChildId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listRegexEntityInfosOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/regexentities",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0
  ],
  queryParameters: [
    Parameters.skip,
    Parameters.take
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RegexEntityExtractor"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createRegexEntityModelOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apps/{appId}/versions/{versionId}/regexentities",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0
  ],
  requestBody: {
    parameterPath: "regexEntityExtractorCreateObj",
    mapper: {
      ...Mappers.RegexModelCreateObject,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Uuid"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listPatternAnyEntityInfosOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/patternanyentities",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0
  ],
  queryParameters: [
    Parameters.skip,
    Parameters.take
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PatternAnyEntityExtractor"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createPatternAnyEntityModelOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apps/{appId}/versions/{versionId}/patternanyentities",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0
  ],
  requestBody: {
    parameterPath: "extractorCreateObject",
    mapper: {
      ...Mappers.PatternAnyModelCreateObject,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Uuid"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listEntityRolesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/entities/{entityId}/roles",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EntityRole"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createEntityRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apps/{appId}/versions/{versionId}/entities/{entityId}/roles",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId
  ],
  requestBody: {
    parameterPath: "entityRoleCreateObject",
    mapper: {
      ...Mappers.EntityRoleCreateObject,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Uuid"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listPrebuiltEntityRolesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/prebuilts/{entityId}/roles",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EntityRole"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createPrebuiltEntityRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apps/{appId}/versions/{versionId}/prebuilts/{entityId}/roles",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId
  ],
  requestBody: {
    parameterPath: "entityRoleCreateObject",
    mapper: {
      ...Mappers.EntityRoleCreateObject,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Uuid"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listClosedListEntityRolesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/closedlists/{entityId}/roles",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EntityRole"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createClosedListEntityRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apps/{appId}/versions/{versionId}/closedlists/{entityId}/roles",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId
  ],
  requestBody: {
    parameterPath: "entityRoleCreateObject",
    mapper: {
      ...Mappers.EntityRoleCreateObject,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Uuid"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listRegexEntityRolesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/regexentities/{entityId}/roles",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EntityRole"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createRegexEntityRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apps/{appId}/versions/{versionId}/regexentities/{entityId}/roles",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId
  ],
  requestBody: {
    parameterPath: "entityRoleCreateObject",
    mapper: {
      ...Mappers.EntityRoleCreateObject,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Uuid"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listCompositeEntityRolesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/roles",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.cEntityId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EntityRole"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createCompositeEntityRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/roles",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.cEntityId
  ],
  requestBody: {
    parameterPath: "entityRoleCreateObject",
    mapper: {
      ...Mappers.EntityRoleCreateObject,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Uuid"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listPatternAnyEntityRolesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/roles",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EntityRole"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createPatternAnyEntityRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/roles",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId
  ],
  requestBody: {
    parameterPath: "entityRoleCreateObject",
    mapper: {
      ...Mappers.EntityRoleCreateObject,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Uuid"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listHierarchicalEntityRolesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/roles",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.hEntityId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EntityRole"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createHierarchicalEntityRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/roles",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.hEntityId
  ],
  requestBody: {
    parameterPath: "entityRoleCreateObject",
    mapper: {
      ...Mappers.EntityRoleCreateObject,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Uuid"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listCustomPrebuiltEntityRolesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/customprebuiltentities/{entityId}/roles",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EntityRole"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createCustomPrebuiltEntityRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apps/{appId}/versions/{versionId}/customprebuiltentities/{entityId}/roles",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId
  ],
  requestBody: {
    parameterPath: "entityRoleCreateObject",
    mapper: {
      ...Mappers.EntityRoleCreateObject,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Uuid"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getExplicitListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/explicitlist",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExplicitListItem"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const addExplicitListItemOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/explicitlist",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId
  ],
  requestBody: {
    parameterPath: "item",
    mapper: {
      ...Mappers.ExplicitListItemCreateObject,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Number"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getRegexEntityEntityInfoOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/regexentities/{regexEntityId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.regexEntityId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RegexEntityExtractor
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateRegexEntityModelOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apps/{appId}/versions/{versionId}/regexentities/{regexEntityId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.regexEntityId
  ],
  requestBody: {
    parameterPath: "regexEntityUpdateObject",
    mapper: {
      ...Mappers.RegexModelUpdateObject,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteRegexEntityModelOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apps/{appId}/versions/{versionId}/regexentities/{regexEntityId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.regexEntityId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getPatternAnyEntityInfoOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PatternAnyEntityExtractor
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updatePatternAnyEntityModelOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId
  ],
  requestBody: {
    parameterPath: "patternAnyUpdateObject",
    mapper: {
      ...Mappers.PatternAnyModelUpdateObject,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deletePatternAnyEntityModelOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getEntityRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/entities/{entityId}/roles/{roleId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId,
    Parameters.roleId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EntityRole
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateEntityRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apps/{appId}/versions/{versionId}/entities/{entityId}/roles/{roleId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId,
    Parameters.roleId
  ],
  requestBody: {
    parameterPath: "entityRoleUpdateObject",
    mapper: {
      ...Mappers.EntityRoleUpdateObject,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteEntityRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apps/{appId}/versions/{versionId}/entities/{entityId}/roles/{roleId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId,
    Parameters.roleId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getPrebuiltEntityRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/prebuilts/{entityId}/roles/{roleId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId,
    Parameters.roleId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EntityRole
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updatePrebuiltEntityRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apps/{appId}/versions/{versionId}/prebuilts/{entityId}/roles/{roleId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId,
    Parameters.roleId
  ],
  requestBody: {
    parameterPath: "entityRoleUpdateObject",
    mapper: {
      ...Mappers.EntityRoleUpdateObject,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deletePrebuiltEntityRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apps/{appId}/versions/{versionId}/prebuilts/{entityId}/roles/{roleId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId,
    Parameters.roleId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getClosedListEntityRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/closedlists/{entityId}/roles/{roleId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId,
    Parameters.roleId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EntityRole
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateClosedListEntityRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apps/{appId}/versions/{versionId}/closedlists/{entityId}/roles/{roleId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId,
    Parameters.roleId
  ],
  requestBody: {
    parameterPath: "entityRoleUpdateObject",
    mapper: {
      ...Mappers.EntityRoleUpdateObject,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteClosedListEntityRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apps/{appId}/versions/{versionId}/closedlists/{entityId}/roles/{roleId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId,
    Parameters.roleId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getRegexEntityRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/regexentities/{entityId}/roles/{roleId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId,
    Parameters.roleId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EntityRole
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateRegexEntityRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apps/{appId}/versions/{versionId}/regexentities/{entityId}/roles/{roleId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId,
    Parameters.roleId
  ],
  requestBody: {
    parameterPath: "entityRoleUpdateObject",
    mapper: {
      ...Mappers.EntityRoleUpdateObject,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteRegexEntityRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apps/{appId}/versions/{versionId}/regexentities/{entityId}/roles/{roleId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId,
    Parameters.roleId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getCompositeEntityRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/roles/{roleId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.cEntityId,
    Parameters.roleId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EntityRole
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateCompositeEntityRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/roles/{roleId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.cEntityId,
    Parameters.roleId
  ],
  requestBody: {
    parameterPath: "entityRoleUpdateObject",
    mapper: {
      ...Mappers.EntityRoleUpdateObject,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteCompositeEntityRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/roles/{roleId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.cEntityId,
    Parameters.roleId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getPatternAnyEntityRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/roles/{roleId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId,
    Parameters.roleId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EntityRole
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updatePatternAnyEntityRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/roles/{roleId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId,
    Parameters.roleId
  ],
  requestBody: {
    parameterPath: "entityRoleUpdateObject",
    mapper: {
      ...Mappers.EntityRoleUpdateObject,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deletePatternAnyEntityRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/roles/{roleId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId,
    Parameters.roleId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getHierarchicalEntityRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/roles/{roleId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.hEntityId,
    Parameters.roleId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EntityRole
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateHierarchicalEntityRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/roles/{roleId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.hEntityId,
    Parameters.roleId
  ],
  requestBody: {
    parameterPath: "entityRoleUpdateObject",
    mapper: {
      ...Mappers.EntityRoleUpdateObject,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteHierarchicalEntityRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/roles/{roleId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.hEntityId,
    Parameters.roleId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getCustomEntityRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/customprebuiltentities/{entityId}/roles/{roleId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId,
    Parameters.roleId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EntityRole
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateCustomPrebuiltEntityRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apps/{appId}/versions/{versionId}/customprebuiltentities/{entityId}/roles/{roleId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId,
    Parameters.roleId
  ],
  requestBody: {
    parameterPath: "entityRoleUpdateObject",
    mapper: {
      ...Mappers.EntityRoleUpdateObject,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteCustomEntityRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apps/{appId}/versions/{versionId}/customprebuiltentities/{entityId}/roles/{roleId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId,
    Parameters.roleId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getExplicitListItemOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/explicitlist/{itemId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId,
    Parameters.itemId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExplicitListItem
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateExplicitListItemOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/explicitlist/{itemId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId,
    Parameters.itemId
  ],
  requestBody: {
    parameterPath: "item",
    mapper: {
      ...Mappers.ExplicitListItemUpdateObject,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteExplicitListItemOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/explicitlist/{itemId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.entityId,
    Parameters.itemId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
