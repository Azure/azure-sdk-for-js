"use strict";
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
var msRest = require("@azure/ms-rest-js");
var Mappers = require("../models/modelMappers");
var Parameters = require("../models/parameters");
/** Class representing a Model. */
var Model = /** @class */ (function () {
    /**
     * Create a Model.
     * @param {LUISAuthoringClientContext} client Reference to the service client.
     */
    function Model(client) {
        this.client = client;
    }
    Model.prototype.addIntent = function (appId, versionId, intentCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            intentCreateObject: intentCreateObject,
            options: options
        }, addIntentOperationSpec, callback);
    };
    Model.prototype.listIntents = function (appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            options: options
        }, listIntentsOperationSpec, callback);
    };
    Model.prototype.addEntity = function (appId, versionId, entityModelCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityModelCreateObject: entityModelCreateObject,
            options: options
        }, addEntityOperationSpec, callback);
    };
    Model.prototype.listEntities = function (appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            options: options
        }, listEntitiesOperationSpec, callback);
    };
    Model.prototype.listHierarchicalEntities = function (appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            options: options
        }, listHierarchicalEntitiesOperationSpec, callback);
    };
    Model.prototype.listCompositeEntities = function (appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            options: options
        }, listCompositeEntitiesOperationSpec, callback);
    };
    Model.prototype.listClosedLists = function (appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            options: options
        }, listClosedListsOperationSpec, callback);
    };
    Model.prototype.addClosedList = function (appId, versionId, closedListModelCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            closedListModelCreateObject: closedListModelCreateObject,
            options: options
        }, addClosedListOperationSpec, callback);
    };
    Model.prototype.addPrebuilt = function (appId, versionId, prebuiltExtractorNames, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            prebuiltExtractorNames: prebuiltExtractorNames,
            options: options
        }, addPrebuiltOperationSpec, callback);
    };
    Model.prototype.listPrebuilts = function (appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            options: options
        }, listPrebuiltsOperationSpec, callback);
    };
    Model.prototype.listPrebuiltEntities = function (appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            options: options
        }, listPrebuiltEntitiesOperationSpec, callback);
    };
    Model.prototype.listModels = function (appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            options: options
        }, listModelsOperationSpec, callback);
    };
    Model.prototype.examplesMethod = function (appId, versionId, modelId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            modelId: modelId,
            options: options
        }, examplesMethodOperationSpec, callback);
    };
    Model.prototype.getIntent = function (appId, versionId, intentId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            intentId: intentId,
            options: options
        }, getIntentOperationSpec, callback);
    };
    Model.prototype.updateIntent = function (appId, versionId, intentId, modelUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            intentId: intentId,
            modelUpdateObject: modelUpdateObject,
            options: options
        }, updateIntentOperationSpec, callback);
    };
    Model.prototype.deleteIntent = function (appId, versionId, intentId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            intentId: intentId,
            options: options
        }, deleteIntentOperationSpec, callback);
    };
    Model.prototype.getEntity = function (appId, versionId, entityId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            options: options
        }, getEntityOperationSpec, callback);
    };
    Model.prototype.deleteEntity = function (appId, versionId, entityId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            options: options
        }, deleteEntityOperationSpec, callback);
    };
    Model.prototype.updateEntityChild = function (appId, versionId, entityId, entityModelUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            entityModelUpdateObject: entityModelUpdateObject,
            options: options
        }, updateEntityChildOperationSpec, callback);
    };
    Model.prototype.getIntentFeatures = function (appId, versionId, intentId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            intentId: intentId,
            options: options
        }, getIntentFeaturesOperationSpec, callback);
    };
    Model.prototype.replaceIntentFeatures = function (appId, versionId, intentId, featureRelationsUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            intentId: intentId,
            featureRelationsUpdateObject: featureRelationsUpdateObject,
            options: options
        }, replaceIntentFeaturesOperationSpec, callback);
    };
    Model.prototype.deleteIntentFeature = function (appId, versionId, intentId, featureRelationDeleteObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            intentId: intentId,
            featureRelationDeleteObject: featureRelationDeleteObject,
            options: options
        }, deleteIntentFeatureOperationSpec, callback);
    };
    Model.prototype.getEntityFeatures = function (appId, versionId, entityId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            options: options
        }, getEntityFeaturesOperationSpec, callback);
    };
    Model.prototype.replaceEntityFeatures = function (appId, versionId, entityId, featureRelationsUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            featureRelationsUpdateObject: featureRelationsUpdateObject,
            options: options
        }, replaceEntityFeaturesOperationSpec, callback);
    };
    Model.prototype.deleteEntityFeature = function (appId, versionId, entityId, featureRelationDeleteObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            featureRelationDeleteObject: featureRelationDeleteObject,
            options: options
        }, deleteEntityFeatureOperationSpec, callback);
    };
    Model.prototype.getHierarchicalEntity = function (appId, versionId, hEntityId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            hEntityId: hEntityId,
            options: options
        }, getHierarchicalEntityOperationSpec, callback);
    };
    Model.prototype.updateHierarchicalEntity = function (appId, versionId, hEntityId, modelUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            hEntityId: hEntityId,
            modelUpdateObject: modelUpdateObject,
            options: options
        }, updateHierarchicalEntityOperationSpec, callback);
    };
    Model.prototype.deleteHierarchicalEntity = function (appId, versionId, hEntityId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            hEntityId: hEntityId,
            options: options
        }, deleteHierarchicalEntityOperationSpec, callback);
    };
    Model.prototype.getCompositeEntity = function (appId, versionId, cEntityId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            cEntityId: cEntityId,
            options: options
        }, getCompositeEntityOperationSpec, callback);
    };
    Model.prototype.updateCompositeEntity = function (appId, versionId, cEntityId, compositeModelUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            cEntityId: cEntityId,
            compositeModelUpdateObject: compositeModelUpdateObject,
            options: options
        }, updateCompositeEntityOperationSpec, callback);
    };
    Model.prototype.deleteCompositeEntity = function (appId, versionId, cEntityId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            cEntityId: cEntityId,
            options: options
        }, deleteCompositeEntityOperationSpec, callback);
    };
    Model.prototype.getClosedList = function (appId, versionId, clEntityId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            clEntityId: clEntityId,
            options: options
        }, getClosedListOperationSpec, callback);
    };
    Model.prototype.updateClosedList = function (appId, versionId, clEntityId, closedListModelUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            clEntityId: clEntityId,
            closedListModelUpdateObject: closedListModelUpdateObject,
            options: options
        }, updateClosedListOperationSpec, callback);
    };
    Model.prototype.patchClosedList = function (appId, versionId, clEntityId, closedListModelPatchObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            clEntityId: clEntityId,
            closedListModelPatchObject: closedListModelPatchObject,
            options: options
        }, patchClosedListOperationSpec, callback);
    };
    Model.prototype.deleteClosedList = function (appId, versionId, clEntityId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            clEntityId: clEntityId,
            options: options
        }, deleteClosedListOperationSpec, callback);
    };
    Model.prototype.getPrebuilt = function (appId, versionId, prebuiltId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            prebuiltId: prebuiltId,
            options: options
        }, getPrebuiltOperationSpec, callback);
    };
    Model.prototype.deletePrebuilt = function (appId, versionId, prebuiltId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            prebuiltId: prebuiltId,
            options: options
        }, deletePrebuiltOperationSpec, callback);
    };
    Model.prototype.deleteSubList = function (appId, versionId, clEntityId, subListId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            clEntityId: clEntityId,
            subListId: subListId,
            options: options
        }, deleteSubListOperationSpec, callback);
    };
    Model.prototype.updateSubList = function (appId, versionId, clEntityId, subListId, wordListBaseUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            clEntityId: clEntityId,
            subListId: subListId,
            wordListBaseUpdateObject: wordListBaseUpdateObject,
            options: options
        }, updateSubListOperationSpec, callback);
    };
    Model.prototype.listIntentSuggestions = function (appId, versionId, intentId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            intentId: intentId,
            options: options
        }, listIntentSuggestionsOperationSpec, callback);
    };
    Model.prototype.listEntitySuggestions = function (appId, versionId, entityId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            options: options
        }, listEntitySuggestionsOperationSpec, callback);
    };
    Model.prototype.addSubList = function (appId, versionId, clEntityId, wordListCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            clEntityId: clEntityId,
            wordListCreateObject: wordListCreateObject,
            options: options
        }, addSubListOperationSpec, callback);
    };
    Model.prototype.addCustomPrebuiltDomain = function (appId, versionId, prebuiltDomainObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            prebuiltDomainObject: prebuiltDomainObject,
            options: options
        }, addCustomPrebuiltDomainOperationSpec, callback);
    };
    Model.prototype.addCustomPrebuiltIntent = function (appId, versionId, prebuiltDomainModelCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            prebuiltDomainModelCreateObject: prebuiltDomainModelCreateObject,
            options: options
        }, addCustomPrebuiltIntentOperationSpec, callback);
    };
    Model.prototype.listCustomPrebuiltIntents = function (appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            options: options
        }, listCustomPrebuiltIntentsOperationSpec, callback);
    };
    Model.prototype.addCustomPrebuiltEntity = function (appId, versionId, prebuiltDomainModelCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            prebuiltDomainModelCreateObject: prebuiltDomainModelCreateObject,
            options: options
        }, addCustomPrebuiltEntityOperationSpec, callback);
    };
    Model.prototype.listCustomPrebuiltEntities = function (appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            options: options
        }, listCustomPrebuiltEntitiesOperationSpec, callback);
    };
    Model.prototype.listCustomPrebuiltModels = function (appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            options: options
        }, listCustomPrebuiltModelsOperationSpec, callback);
    };
    Model.prototype.deleteCustomPrebuiltDomain = function (appId, versionId, domainName, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            domainName: domainName,
            options: options
        }, deleteCustomPrebuiltDomainOperationSpec, callback);
    };
    Model.prototype.addEntityChild = function (appId, versionId, entityId, childEntityModelCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            childEntityModelCreateObject: childEntityModelCreateObject,
            options: options
        }, addEntityChildOperationSpec, callback);
    };
    Model.prototype.getHierarchicalEntityChild = function (appId, versionId, hEntityId, hChildId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            hEntityId: hEntityId,
            hChildId: hChildId,
            options: options
        }, getHierarchicalEntityChildOperationSpec, callback);
    };
    Model.prototype.updateHierarchicalEntityChild = function (appId, versionId, hEntityId, hChildId, hierarchicalChildModelUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            hEntityId: hEntityId,
            hChildId: hChildId,
            hierarchicalChildModelUpdateObject: hierarchicalChildModelUpdateObject,
            options: options
        }, updateHierarchicalEntityChildOperationSpec, callback);
    };
    Model.prototype.deleteHierarchicalEntityChild = function (appId, versionId, hEntityId, hChildId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            hEntityId: hEntityId,
            hChildId: hChildId,
            options: options
        }, deleteHierarchicalEntityChildOperationSpec, callback);
    };
    Model.prototype.addCompositeEntityChild = function (appId, versionId, cEntityId, compositeChildModelCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            cEntityId: cEntityId,
            compositeChildModelCreateObject: compositeChildModelCreateObject,
            options: options
        }, addCompositeEntityChildOperationSpec, callback);
    };
    Model.prototype.deleteCompositeEntityChild = function (appId, versionId, cEntityId, cChildId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            cEntityId: cEntityId,
            cChildId: cChildId,
            options: options
        }, deleteCompositeEntityChildOperationSpec, callback);
    };
    Model.prototype.listRegexEntityInfos = function (appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            options: options
        }, listRegexEntityInfosOperationSpec, callback);
    };
    Model.prototype.createRegexEntityModel = function (appId, versionId, regexEntityExtractorCreateObj, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            regexEntityExtractorCreateObj: regexEntityExtractorCreateObj,
            options: options
        }, createRegexEntityModelOperationSpec, callback);
    };
    Model.prototype.listPatternAnyEntityInfos = function (appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            options: options
        }, listPatternAnyEntityInfosOperationSpec, callback);
    };
    Model.prototype.createPatternAnyEntityModel = function (appId, versionId, extractorCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            extractorCreateObject: extractorCreateObject,
            options: options
        }, createPatternAnyEntityModelOperationSpec, callback);
    };
    Model.prototype.listEntityRoles = function (appId, versionId, entityId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            options: options
        }, listEntityRolesOperationSpec, callback);
    };
    Model.prototype.createEntityRole = function (appId, versionId, entityId, entityRoleCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            entityRoleCreateObject: entityRoleCreateObject,
            options: options
        }, createEntityRoleOperationSpec, callback);
    };
    Model.prototype.listPrebuiltEntityRoles = function (appId, versionId, entityId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            options: options
        }, listPrebuiltEntityRolesOperationSpec, callback);
    };
    Model.prototype.createPrebuiltEntityRole = function (appId, versionId, entityId, entityRoleCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            entityRoleCreateObject: entityRoleCreateObject,
            options: options
        }, createPrebuiltEntityRoleOperationSpec, callback);
    };
    Model.prototype.listClosedListEntityRoles = function (appId, versionId, entityId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            options: options
        }, listClosedListEntityRolesOperationSpec, callback);
    };
    Model.prototype.createClosedListEntityRole = function (appId, versionId, entityId, entityRoleCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            entityRoleCreateObject: entityRoleCreateObject,
            options: options
        }, createClosedListEntityRoleOperationSpec, callback);
    };
    Model.prototype.listRegexEntityRoles = function (appId, versionId, entityId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            options: options
        }, listRegexEntityRolesOperationSpec, callback);
    };
    Model.prototype.createRegexEntityRole = function (appId, versionId, entityId, entityRoleCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            entityRoleCreateObject: entityRoleCreateObject,
            options: options
        }, createRegexEntityRoleOperationSpec, callback);
    };
    Model.prototype.listCompositeEntityRoles = function (appId, versionId, cEntityId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            cEntityId: cEntityId,
            options: options
        }, listCompositeEntityRolesOperationSpec, callback);
    };
    Model.prototype.createCompositeEntityRole = function (appId, versionId, cEntityId, entityRoleCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            cEntityId: cEntityId,
            entityRoleCreateObject: entityRoleCreateObject,
            options: options
        }, createCompositeEntityRoleOperationSpec, callback);
    };
    Model.prototype.listPatternAnyEntityRoles = function (appId, versionId, entityId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            options: options
        }, listPatternAnyEntityRolesOperationSpec, callback);
    };
    Model.prototype.createPatternAnyEntityRole = function (appId, versionId, entityId, entityRoleCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            entityRoleCreateObject: entityRoleCreateObject,
            options: options
        }, createPatternAnyEntityRoleOperationSpec, callback);
    };
    Model.prototype.listHierarchicalEntityRoles = function (appId, versionId, hEntityId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            hEntityId: hEntityId,
            options: options
        }, listHierarchicalEntityRolesOperationSpec, callback);
    };
    Model.prototype.createHierarchicalEntityRole = function (appId, versionId, hEntityId, entityRoleCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            hEntityId: hEntityId,
            entityRoleCreateObject: entityRoleCreateObject,
            options: options
        }, createHierarchicalEntityRoleOperationSpec, callback);
    };
    Model.prototype.listCustomPrebuiltEntityRoles = function (appId, versionId, entityId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            options: options
        }, listCustomPrebuiltEntityRolesOperationSpec, callback);
    };
    Model.prototype.createCustomPrebuiltEntityRole = function (appId, versionId, entityId, entityRoleCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            entityRoleCreateObject: entityRoleCreateObject,
            options: options
        }, createCustomPrebuiltEntityRoleOperationSpec, callback);
    };
    Model.prototype.getExplicitList = function (appId, versionId, entityId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            options: options
        }, getExplicitListOperationSpec, callback);
    };
    Model.prototype.addExplicitListItem = function (appId, versionId, entityId, item, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            item: item,
            options: options
        }, addExplicitListItemOperationSpec, callback);
    };
    Model.prototype.getRegexEntityEntityInfo = function (appId, versionId, regexEntityId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            regexEntityId: regexEntityId,
            options: options
        }, getRegexEntityEntityInfoOperationSpec, callback);
    };
    Model.prototype.updateRegexEntityModel = function (appId, versionId, regexEntityId, regexEntityUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            regexEntityId: regexEntityId,
            regexEntityUpdateObject: regexEntityUpdateObject,
            options: options
        }, updateRegexEntityModelOperationSpec, callback);
    };
    Model.prototype.deleteRegexEntityModel = function (appId, versionId, regexEntityId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            regexEntityId: regexEntityId,
            options: options
        }, deleteRegexEntityModelOperationSpec, callback);
    };
    Model.prototype.getPatternAnyEntityInfo = function (appId, versionId, entityId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            options: options
        }, getPatternAnyEntityInfoOperationSpec, callback);
    };
    Model.prototype.updatePatternAnyEntityModel = function (appId, versionId, entityId, patternAnyUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            patternAnyUpdateObject: patternAnyUpdateObject,
            options: options
        }, updatePatternAnyEntityModelOperationSpec, callback);
    };
    Model.prototype.deletePatternAnyEntityModel = function (appId, versionId, entityId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            options: options
        }, deletePatternAnyEntityModelOperationSpec, callback);
    };
    Model.prototype.getEntityRole = function (appId, versionId, entityId, roleId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            roleId: roleId,
            options: options
        }, getEntityRoleOperationSpec, callback);
    };
    Model.prototype.updateEntityRole = function (appId, versionId, entityId, roleId, entityRoleUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            roleId: roleId,
            entityRoleUpdateObject: entityRoleUpdateObject,
            options: options
        }, updateEntityRoleOperationSpec, callback);
    };
    Model.prototype.deleteEntityRole = function (appId, versionId, entityId, roleId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            roleId: roleId,
            options: options
        }, deleteEntityRoleOperationSpec, callback);
    };
    Model.prototype.getPrebuiltEntityRole = function (appId, versionId, entityId, roleId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            roleId: roleId,
            options: options
        }, getPrebuiltEntityRoleOperationSpec, callback);
    };
    Model.prototype.updatePrebuiltEntityRole = function (appId, versionId, entityId, roleId, entityRoleUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            roleId: roleId,
            entityRoleUpdateObject: entityRoleUpdateObject,
            options: options
        }, updatePrebuiltEntityRoleOperationSpec, callback);
    };
    Model.prototype.deletePrebuiltEntityRole = function (appId, versionId, entityId, roleId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            roleId: roleId,
            options: options
        }, deletePrebuiltEntityRoleOperationSpec, callback);
    };
    Model.prototype.getClosedListEntityRole = function (appId, versionId, entityId, roleId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            roleId: roleId,
            options: options
        }, getClosedListEntityRoleOperationSpec, callback);
    };
    Model.prototype.updateClosedListEntityRole = function (appId, versionId, entityId, roleId, entityRoleUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            roleId: roleId,
            entityRoleUpdateObject: entityRoleUpdateObject,
            options: options
        }, updateClosedListEntityRoleOperationSpec, callback);
    };
    Model.prototype.deleteClosedListEntityRole = function (appId, versionId, entityId, roleId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            roleId: roleId,
            options: options
        }, deleteClosedListEntityRoleOperationSpec, callback);
    };
    Model.prototype.getRegexEntityRole = function (appId, versionId, entityId, roleId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            roleId: roleId,
            options: options
        }, getRegexEntityRoleOperationSpec, callback);
    };
    Model.prototype.updateRegexEntityRole = function (appId, versionId, entityId, roleId, entityRoleUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            roleId: roleId,
            entityRoleUpdateObject: entityRoleUpdateObject,
            options: options
        }, updateRegexEntityRoleOperationSpec, callback);
    };
    Model.prototype.deleteRegexEntityRole = function (appId, versionId, entityId, roleId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            roleId: roleId,
            options: options
        }, deleteRegexEntityRoleOperationSpec, callback);
    };
    Model.prototype.getCompositeEntityRole = function (appId, versionId, cEntityId, roleId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            cEntityId: cEntityId,
            roleId: roleId,
            options: options
        }, getCompositeEntityRoleOperationSpec, callback);
    };
    Model.prototype.updateCompositeEntityRole = function (appId, versionId, cEntityId, roleId, entityRoleUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            cEntityId: cEntityId,
            roleId: roleId,
            entityRoleUpdateObject: entityRoleUpdateObject,
            options: options
        }, updateCompositeEntityRoleOperationSpec, callback);
    };
    Model.prototype.deleteCompositeEntityRole = function (appId, versionId, cEntityId, roleId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            cEntityId: cEntityId,
            roleId: roleId,
            options: options
        }, deleteCompositeEntityRoleOperationSpec, callback);
    };
    Model.prototype.getPatternAnyEntityRole = function (appId, versionId, entityId, roleId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            roleId: roleId,
            options: options
        }, getPatternAnyEntityRoleOperationSpec, callback);
    };
    Model.prototype.updatePatternAnyEntityRole = function (appId, versionId, entityId, roleId, entityRoleUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            roleId: roleId,
            entityRoleUpdateObject: entityRoleUpdateObject,
            options: options
        }, updatePatternAnyEntityRoleOperationSpec, callback);
    };
    Model.prototype.deletePatternAnyEntityRole = function (appId, versionId, entityId, roleId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            roleId: roleId,
            options: options
        }, deletePatternAnyEntityRoleOperationSpec, callback);
    };
    Model.prototype.getHierarchicalEntityRole = function (appId, versionId, hEntityId, roleId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            hEntityId: hEntityId,
            roleId: roleId,
            options: options
        }, getHierarchicalEntityRoleOperationSpec, callback);
    };
    Model.prototype.updateHierarchicalEntityRole = function (appId, versionId, hEntityId, roleId, entityRoleUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            hEntityId: hEntityId,
            roleId: roleId,
            entityRoleUpdateObject: entityRoleUpdateObject,
            options: options
        }, updateHierarchicalEntityRoleOperationSpec, callback);
    };
    Model.prototype.deleteHierarchicalEntityRole = function (appId, versionId, hEntityId, roleId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            hEntityId: hEntityId,
            roleId: roleId,
            options: options
        }, deleteHierarchicalEntityRoleOperationSpec, callback);
    };
    Model.prototype.getCustomEntityRole = function (appId, versionId, entityId, roleId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            roleId: roleId,
            options: options
        }, getCustomEntityRoleOperationSpec, callback);
    };
    Model.prototype.updateCustomPrebuiltEntityRole = function (appId, versionId, entityId, roleId, entityRoleUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            roleId: roleId,
            entityRoleUpdateObject: entityRoleUpdateObject,
            options: options
        }, updateCustomPrebuiltEntityRoleOperationSpec, callback);
    };
    Model.prototype.deleteCustomEntityRole = function (appId, versionId, entityId, roleId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            roleId: roleId,
            options: options
        }, deleteCustomEntityRoleOperationSpec, callback);
    };
    Model.prototype.getExplicitListItem = function (appId, versionId, entityId, itemId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            itemId: itemId,
            options: options
        }, getExplicitListItemOperationSpec, callback);
    };
    Model.prototype.updateExplicitListItem = function (appId, versionId, entityId, itemId, item, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            itemId: itemId,
            item: item,
            options: options
        }, updateExplicitListItemOperationSpec, callback);
    };
    Model.prototype.deleteExplicitListItem = function (appId, versionId, entityId, itemId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            itemId: itemId,
            options: options
        }, deleteExplicitListItemOperationSpec, callback);
    };
    return Model;
}());
exports.Model = Model;
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var addIntentOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/intents",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    requestBody: {
        parameterPath: "intentCreateObject",
        mapper: __assign(__assign({}, Mappers.ModelCreateObject), { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listIntentsOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/intents",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    queryParameters: [
        Parameters.skip,
        Parameters.take
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IntentClassifier"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var addEntityOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/entities",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    requestBody: {
        parameterPath: "entityModelCreateObject",
        mapper: __assign(__assign({}, Mappers.EntityModelCreateObject), { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listEntitiesOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/entities",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    queryParameters: [
        Parameters.skip,
        Parameters.take
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NDepthEntityExtractor"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listHierarchicalEntitiesOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/hierarchicalentities",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    queryParameters: [
        Parameters.skip,
        Parameters.take
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HierarchicalEntityExtractor"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listCompositeEntitiesOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/compositeentities",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    queryParameters: [
        Parameters.skip,
        Parameters.take
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CompositeEntityExtractor"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listClosedListsOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/closedlists",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    queryParameters: [
        Parameters.skip,
        Parameters.take
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ClosedListEntityExtractor"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var addClosedListOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/closedlists",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    requestBody: {
        parameterPath: "closedListModelCreateObject",
        mapper: __assign(__assign({}, Mappers.ClosedListModelCreateObject), { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var addPrebuiltOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/prebuilts",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    requestBody: {
        parameterPath: "prebuiltExtractorNames",
        mapper: {
            required: true,
            serializedName: "prebuiltExtractorNames",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "String"
                    }
                }
            }
        }
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrebuiltEntityExtractor"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listPrebuiltsOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/prebuilts",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    queryParameters: [
        Parameters.skip,
        Parameters.take
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrebuiltEntityExtractor"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listPrebuiltEntitiesOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/listprebuilts",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AvailablePrebuiltEntityModel"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listModelsOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/models",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    queryParameters: [
        Parameters.skip,
        Parameters.take
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ModelInfoResponse"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var examplesMethodOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/models/{modelId}/examples",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.modelId
    ],
    queryParameters: [
        Parameters.skip,
        Parameters.take
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LabelTextObject"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getIntentOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/intents/{intentId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.intentId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.IntentClassifier
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var updateIntentOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/intents/{intentId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.intentId
    ],
    requestBody: {
        parameterPath: "modelUpdateObject",
        mapper: __assign(__assign({}, Mappers.ModelUpdateObject), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deleteIntentOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/intents/{intentId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.intentId
    ],
    queryParameters: [
        Parameters.deleteUtterances
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getEntityOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/entities/{entityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.NDepthEntityExtractor
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deleteEntityOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/entities/{entityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var updateEntityChildOperationSpec = {
    httpMethod: "PATCH",
    path: "apps/{appId}/versions/{versionId}/entities/{entityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    requestBody: {
        parameterPath: "entityModelUpdateObject",
        mapper: __assign(__assign({}, Mappers.EntityModelUpdateObject), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getIntentFeaturesOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/intents/{intentId}/features",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.intentId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ModelFeatureInformation"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var replaceIntentFeaturesOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/intents/{intentId}/features",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.intentId
    ],
    requestBody: {
        parameterPath: "featureRelationsUpdateObject",
        mapper: {
            required: true,
            serializedName: "featureRelationsUpdateObject",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Composite",
                        className: "ModelFeatureInformation"
                    }
                }
            }
        }
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deleteIntentFeatureOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/intents/{intentId}/features",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.intentId
    ],
    requestBody: {
        parameterPath: "featureRelationDeleteObject",
        mapper: __assign(__assign({}, Mappers.ModelFeatureInformation), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getEntityFeaturesOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/entities/{entityId}/features",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ModelFeatureInformation"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var replaceEntityFeaturesOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/entities/{entityId}/features",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    requestBody: {
        parameterPath: "featureRelationsUpdateObject",
        mapper: {
            required: true,
            serializedName: "featureRelationsUpdateObject",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Composite",
                        className: "ModelFeatureInformation"
                    }
                }
            }
        }
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deleteEntityFeatureOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/entities/{entityId}/features",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    requestBody: {
        parameterPath: "featureRelationDeleteObject",
        mapper: __assign(__assign({}, Mappers.ModelFeatureInformation), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getHierarchicalEntityOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.hEntityId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.HierarchicalEntityExtractor
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var updateHierarchicalEntityOperationSpec = {
    httpMethod: "PATCH",
    path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.hEntityId
    ],
    requestBody: {
        parameterPath: "modelUpdateObject",
        mapper: __assign(__assign({}, Mappers.ModelUpdateObject), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deleteHierarchicalEntityOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.hEntityId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getCompositeEntityOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.cEntityId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CompositeEntityExtractor
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var updateCompositeEntityOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.cEntityId
    ],
    requestBody: {
        parameterPath: "compositeModelUpdateObject",
        mapper: __assign(__assign({}, Mappers.CompositeEntityModel), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deleteCompositeEntityOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.cEntityId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getClosedListOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/closedlists/{clEntityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.clEntityId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ClosedListEntityExtractor
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var updateClosedListOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/closedlists/{clEntityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.clEntityId
    ],
    requestBody: {
        parameterPath: "closedListModelUpdateObject",
        mapper: __assign(__assign({}, Mappers.ClosedListModelUpdateObject), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var patchClosedListOperationSpec = {
    httpMethod: "PATCH",
    path: "apps/{appId}/versions/{versionId}/closedlists/{clEntityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.clEntityId
    ],
    requestBody: {
        parameterPath: "closedListModelPatchObject",
        mapper: __assign(__assign({}, Mappers.ClosedListModelPatchObject), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deleteClosedListOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/closedlists/{clEntityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.clEntityId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getPrebuiltOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/prebuilts/{prebuiltId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.prebuiltId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PrebuiltEntityExtractor
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deletePrebuiltOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/prebuilts/{prebuiltId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.prebuiltId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deleteSubListOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/closedlists/{clEntityId}/sublists/{subListId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.clEntityId,
        Parameters.subListId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var updateSubListOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/closedlists/{clEntityId}/sublists/{subListId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.clEntityId,
        Parameters.subListId
    ],
    requestBody: {
        parameterPath: "wordListBaseUpdateObject",
        mapper: __assign(__assign({}, Mappers.WordListBaseUpdateObject), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listIntentSuggestionsOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/intents/{intentId}/suggest",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.intentId
    ],
    queryParameters: [
        Parameters.take
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IntentsSuggestionExample"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listEntitySuggestionsOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/entities/{entityId}/suggest",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    queryParameters: [
        Parameters.take
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntitiesSuggestionExample"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var addSubListOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/closedlists/{clEntityId}/sublists",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.clEntityId
    ],
    requestBody: {
        parameterPath: "wordListCreateObject",
        mapper: __assign(__assign({}, Mappers.WordListObject), { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Number"
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var addCustomPrebuiltDomainOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/customprebuiltdomains",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    requestBody: {
        parameterPath: "prebuiltDomainObject",
        mapper: __assign(__assign({}, Mappers.PrebuiltDomainCreateBaseObject), { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Uuid"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var addCustomPrebuiltIntentOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/customprebuiltintents",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    requestBody: {
        parameterPath: "prebuiltDomainModelCreateObject",
        mapper: __assign(__assign({}, Mappers.PrebuiltDomainModelCreateObject), { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listCustomPrebuiltIntentsOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/customprebuiltintents",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IntentClassifier"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var addCustomPrebuiltEntityOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/customprebuiltentities",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    requestBody: {
        parameterPath: "prebuiltDomainModelCreateObject",
        mapper: __assign(__assign({}, Mappers.PrebuiltDomainModelCreateObject), { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listCustomPrebuiltEntitiesOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/customprebuiltentities",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntityExtractor"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listCustomPrebuiltModelsOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/customprebuiltmodels",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CustomPrebuiltModel"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deleteCustomPrebuiltDomainOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/customprebuiltdomains/{domainName}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.domainName
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var addEntityChildOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/entities/{entityId}/children",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    requestBody: {
        parameterPath: "childEntityModelCreateObject",
        mapper: __assign(__assign({}, Mappers.ChildEntityModelCreateObject), { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getHierarchicalEntityChildOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/children/{hChildId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.hEntityId,
        Parameters.hChildId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.HierarchicalChildEntity
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var updateHierarchicalEntityChildOperationSpec = {
    httpMethod: "PATCH",
    path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/children/{hChildId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.hEntityId,
        Parameters.hChildId
    ],
    requestBody: {
        parameterPath: "hierarchicalChildModelUpdateObject",
        mapper: __assign(__assign({}, Mappers.HierarchicalChildModelUpdateObject), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deleteHierarchicalEntityChildOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/children/{hChildId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.hEntityId,
        Parameters.hChildId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var addCompositeEntityChildOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/children",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.cEntityId
    ],
    requestBody: {
        parameterPath: "compositeChildModelCreateObject",
        mapper: __assign(__assign({}, Mappers.CompositeChildModelCreateObject), { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deleteCompositeEntityChildOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/children/{cChildId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.cEntityId,
        Parameters.cChildId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listRegexEntityInfosOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/regexentities",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    queryParameters: [
        Parameters.skip,
        Parameters.take
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RegexEntityExtractor"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var createRegexEntityModelOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/regexentities",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    requestBody: {
        parameterPath: "regexEntityExtractorCreateObj",
        mapper: __assign(__assign({}, Mappers.RegexModelCreateObject), { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listPatternAnyEntityInfosOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/patternanyentities",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    queryParameters: [
        Parameters.skip,
        Parameters.take
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PatternAnyEntityExtractor"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var createPatternAnyEntityModelOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/patternanyentities",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    requestBody: {
        parameterPath: "extractorCreateObject",
        mapper: __assign(__assign({}, Mappers.PatternAnyModelCreateObject), { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listEntityRolesOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/entities/{entityId}/roles",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntityRole"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var createEntityRoleOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/entities/{entityId}/roles",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    requestBody: {
        parameterPath: "entityRoleCreateObject",
        mapper: __assign(__assign({}, Mappers.EntityRoleCreateObject), { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listPrebuiltEntityRolesOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/prebuilts/{entityId}/roles",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntityRole"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var createPrebuiltEntityRoleOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/prebuilts/{entityId}/roles",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    requestBody: {
        parameterPath: "entityRoleCreateObject",
        mapper: __assign(__assign({}, Mappers.EntityRoleCreateObject), { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listClosedListEntityRolesOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/closedlists/{entityId}/roles",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntityRole"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var createClosedListEntityRoleOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/closedlists/{entityId}/roles",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    requestBody: {
        parameterPath: "entityRoleCreateObject",
        mapper: __assign(__assign({}, Mappers.EntityRoleCreateObject), { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listRegexEntityRolesOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/regexentities/{entityId}/roles",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntityRole"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var createRegexEntityRoleOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/regexentities/{entityId}/roles",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    requestBody: {
        parameterPath: "entityRoleCreateObject",
        mapper: __assign(__assign({}, Mappers.EntityRoleCreateObject), { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listCompositeEntityRolesOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/roles",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.cEntityId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntityRole"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var createCompositeEntityRoleOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/roles",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.cEntityId
    ],
    requestBody: {
        parameterPath: "entityRoleCreateObject",
        mapper: __assign(__assign({}, Mappers.EntityRoleCreateObject), { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listPatternAnyEntityRolesOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/roles",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntityRole"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var createPatternAnyEntityRoleOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/roles",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    requestBody: {
        parameterPath: "entityRoleCreateObject",
        mapper: __assign(__assign({}, Mappers.EntityRoleCreateObject), { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listHierarchicalEntityRolesOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/roles",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.hEntityId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntityRole"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var createHierarchicalEntityRoleOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/roles",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.hEntityId
    ],
    requestBody: {
        parameterPath: "entityRoleCreateObject",
        mapper: __assign(__assign({}, Mappers.EntityRoleCreateObject), { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listCustomPrebuiltEntityRolesOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/customprebuiltentities/{entityId}/roles",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntityRole"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var createCustomPrebuiltEntityRoleOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/customprebuiltentities/{entityId}/roles",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    requestBody: {
        parameterPath: "entityRoleCreateObject",
        mapper: __assign(__assign({}, Mappers.EntityRoleCreateObject), { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getExplicitListOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/explicitlist",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ExplicitListItem"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var addExplicitListItemOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/explicitlist",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    requestBody: {
        parameterPath: "item",
        mapper: __assign(__assign({}, Mappers.ExplicitListItemCreateObject), { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Number"
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getRegexEntityEntityInfoOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/regexentities/{regexEntityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.regexEntityId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RegexEntityExtractor
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var updateRegexEntityModelOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/regexentities/{regexEntityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.regexEntityId
    ],
    requestBody: {
        parameterPath: "regexEntityUpdateObject",
        mapper: __assign(__assign({}, Mappers.RegexModelUpdateObject), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deleteRegexEntityModelOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/regexentities/{regexEntityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.regexEntityId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getPatternAnyEntityInfoOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PatternAnyEntityExtractor
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var updatePatternAnyEntityModelOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    requestBody: {
        parameterPath: "patternAnyUpdateObject",
        mapper: __assign(__assign({}, Mappers.PatternAnyModelUpdateObject), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deletePatternAnyEntityModelOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getEntityRoleOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/entities/{entityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.roleId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.EntityRole
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var updateEntityRoleOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/entities/{entityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.roleId
    ],
    requestBody: {
        parameterPath: "entityRoleUpdateObject",
        mapper: __assign(__assign({}, Mappers.EntityRoleUpdateObject), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deleteEntityRoleOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/entities/{entityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.roleId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getPrebuiltEntityRoleOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/prebuilts/{entityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.roleId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.EntityRole
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var updatePrebuiltEntityRoleOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/prebuilts/{entityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.roleId
    ],
    requestBody: {
        parameterPath: "entityRoleUpdateObject",
        mapper: __assign(__assign({}, Mappers.EntityRoleUpdateObject), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deletePrebuiltEntityRoleOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/prebuilts/{entityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.roleId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getClosedListEntityRoleOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/closedlists/{entityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.roleId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.EntityRole
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var updateClosedListEntityRoleOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/closedlists/{entityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.roleId
    ],
    requestBody: {
        parameterPath: "entityRoleUpdateObject",
        mapper: __assign(__assign({}, Mappers.EntityRoleUpdateObject), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deleteClosedListEntityRoleOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/closedlists/{entityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.roleId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getRegexEntityRoleOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/regexentities/{entityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.roleId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.EntityRole
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var updateRegexEntityRoleOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/regexentities/{entityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.roleId
    ],
    requestBody: {
        parameterPath: "entityRoleUpdateObject",
        mapper: __assign(__assign({}, Mappers.EntityRoleUpdateObject), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deleteRegexEntityRoleOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/regexentities/{entityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.roleId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getCompositeEntityRoleOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.cEntityId,
        Parameters.roleId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.EntityRole
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var updateCompositeEntityRoleOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.cEntityId,
        Parameters.roleId
    ],
    requestBody: {
        parameterPath: "entityRoleUpdateObject",
        mapper: __assign(__assign({}, Mappers.EntityRoleUpdateObject), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deleteCompositeEntityRoleOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.cEntityId,
        Parameters.roleId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getPatternAnyEntityRoleOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.roleId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.EntityRole
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var updatePatternAnyEntityRoleOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.roleId
    ],
    requestBody: {
        parameterPath: "entityRoleUpdateObject",
        mapper: __assign(__assign({}, Mappers.EntityRoleUpdateObject), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deletePatternAnyEntityRoleOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.roleId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getHierarchicalEntityRoleOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.hEntityId,
        Parameters.roleId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.EntityRole
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var updateHierarchicalEntityRoleOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.hEntityId,
        Parameters.roleId
    ],
    requestBody: {
        parameterPath: "entityRoleUpdateObject",
        mapper: __assign(__assign({}, Mappers.EntityRoleUpdateObject), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deleteHierarchicalEntityRoleOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.hEntityId,
        Parameters.roleId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getCustomEntityRoleOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/customprebuiltentities/{entityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.roleId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.EntityRole
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var updateCustomPrebuiltEntityRoleOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/customprebuiltentities/{entityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.roleId
    ],
    requestBody: {
        parameterPath: "entityRoleUpdateObject",
        mapper: __assign(__assign({}, Mappers.EntityRoleUpdateObject), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deleteCustomEntityRoleOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/customprebuiltentities/{entityId}/roles/{roleId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.roleId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getExplicitListItemOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/explicitlist/{itemId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.itemId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ExplicitListItem
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var updateExplicitListItemOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/explicitlist/{itemId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.itemId
    ],
    requestBody: {
        parameterPath: "item",
        mapper: __assign(__assign({}, Mappers.ExplicitListItemUpdateObject), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deleteExplicitListItemOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/explicitlist/{itemId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId,
        Parameters.itemId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
