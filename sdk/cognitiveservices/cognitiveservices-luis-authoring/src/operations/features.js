"use strict";
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
var msRest = require("@azure/ms-rest-js");
var Mappers = require("../models/featuresMappers");
var Parameters = require("../models/parameters");
/** Class representing a Features. */
var Features = /** @class */ (function () {
    /**
     * Create a Features.
     * @param {LUISAuthoringClientContext} client Reference to the service client.
     */
    function Features(client) {
        this.client = client;
    }
    Features.prototype.addPhraseList = function (appId, versionId, phraselistCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            phraselistCreateObject: phraselistCreateObject,
            options: options
        }, addPhraseListOperationSpec, callback);
    };
    Features.prototype.listPhraseLists = function (appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            options: options
        }, listPhraseListsOperationSpec, callback);
    };
    Features.prototype.list = function (appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            options: options
        }, listOperationSpec, callback);
    };
    Features.prototype.getPhraseList = function (appId, versionId, phraselistId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            phraselistId: phraselistId,
            options: options
        }, getPhraseListOperationSpec, callback);
    };
    Features.prototype.updatePhraseList = function (appId, versionId, phraselistId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            phraselistId: phraselistId,
            options: options
        }, updatePhraseListOperationSpec, callback);
    };
    Features.prototype.deletePhraseList = function (appId, versionId, phraselistId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            phraselistId: phraselistId,
            options: options
        }, deletePhraseListOperationSpec, callback);
    };
    Features.prototype.addIntentFeature = function (appId, versionId, intentId, featureRelationCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            intentId: intentId,
            featureRelationCreateObject: featureRelationCreateObject,
            options: options
        }, addIntentFeatureOperationSpec, callback);
    };
    Features.prototype.addEntityFeature = function (appId, versionId, entityId, featureRelationCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            entityId: entityId,
            featureRelationCreateObject: featureRelationCreateObject,
            options: options
        }, addEntityFeatureOperationSpec, callback);
    };
    return Features;
}());
exports.Features = Features;
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var addPhraseListOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/phraselists",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    requestBody: {
        parameterPath: "phraselistCreateObject",
        mapper: __assign(__assign({}, Mappers.PhraselistCreateObject), { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Number"
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listPhraseListsOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/phraselists",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    queryParameters: [
        Parameters.skip,
        Parameters.take
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PhraseListFeatureInfo"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/features",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    queryParameters: [
        Parameters.skip,
        Parameters.take
    ],
    responses: {
        200: {
            bodyMapper: Mappers.FeaturesResponseObject
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getPhraseListOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/phraselists/{phraselistId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.phraselistId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PhraseListFeatureInfo
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var updatePhraseListOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/phraselists/{phraselistId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.phraselistId
    ],
    requestBody: {
        parameterPath: [
            "options",
            "phraselistUpdateObject"
        ],
        mapper: Mappers.PhraselistUpdateObject
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deletePhraseListOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/phraselists/{phraselistId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.phraselistId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var addIntentFeatureOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/intents/{intentId}/features",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.intentId
    ],
    requestBody: {
        parameterPath: "featureRelationCreateObject",
        mapper: __assign(__assign({}, Mappers.ModelFeatureInformation), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var addEntityFeatureOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/entities/{entityId}/features",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.entityId
    ],
    requestBody: {
        parameterPath: "featureRelationCreateObject",
        mapper: __assign(__assign({}, Mappers.ModelFeatureInformation), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
