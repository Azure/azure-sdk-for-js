"use strict";
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
var msRest = require("@azure/ms-rest-js");
var Mappers = require("../models/patternMappers");
var Parameters = require("../models/parameters");
/** Class representing a Pattern. */
var Pattern = /** @class */ (function () {
    /**
     * Create a Pattern.
     * @param {LUISAuthoringClientContext} client Reference to the service client.
     */
    function Pattern(client) {
        this.client = client;
    }
    Pattern.prototype.addPattern = function (appId, versionId, pattern, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            pattern: pattern,
            options: options
        }, addPatternOperationSpec, callback);
    };
    Pattern.prototype.listPatterns = function (appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            options: options
        }, listPatternsOperationSpec, callback);
    };
    Pattern.prototype.updatePatterns = function (appId, versionId, patterns, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            patterns: patterns,
            options: options
        }, updatePatternsOperationSpec, callback);
    };
    Pattern.prototype.batchAddPatterns = function (appId, versionId, patterns, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            patterns: patterns,
            options: options
        }, batchAddPatternsOperationSpec, callback);
    };
    Pattern.prototype.deletePatterns = function (appId, versionId, patternIds, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            patternIds: patternIds,
            options: options
        }, deletePatternsOperationSpec, callback);
    };
    Pattern.prototype.updatePattern = function (appId, versionId, patternId, pattern, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            patternId: patternId,
            pattern: pattern,
            options: options
        }, updatePatternOperationSpec, callback);
    };
    Pattern.prototype.deletePattern = function (appId, versionId, patternId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            patternId: patternId,
            options: options
        }, deletePatternOperationSpec, callback);
    };
    Pattern.prototype.listIntentPatterns = function (appId, versionId, intentId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            intentId: intentId,
            options: options
        }, listIntentPatternsOperationSpec, callback);
    };
    return Pattern;
}());
exports.Pattern = Pattern;
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var addPatternOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/patternrule",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    requestBody: {
        parameterPath: "pattern",
        mapper: __assign(__assign({}, Mappers.PatternRuleCreateObject), { required: true })
    },
    responses: {
        201: {
            bodyMapper: Mappers.PatternRuleInfo
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listPatternsOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/patternrules",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    queryParameters: [
        Parameters.skip,
        Parameters.take
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PatternRuleInfo"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var updatePatternsOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/patternrules",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    requestBody: {
        parameterPath: "patterns",
        mapper: {
            required: true,
            serializedName: "patterns",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Composite",
                        className: "PatternRuleUpdateObject"
                    }
                }
            }
        }
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PatternRuleInfo"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var batchAddPatternsOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/patternrules",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    requestBody: {
        parameterPath: "patterns",
        mapper: {
            required: true,
            serializedName: "patterns",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Composite",
                        className: "PatternRuleCreateObject"
                    }
                }
            }
        }
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PatternRuleInfo"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deletePatternsOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/patternrules",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    requestBody: {
        parameterPath: "patternIds",
        mapper: {
            required: true,
            serializedName: "patternIds",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Uuid"
                    }
                }
            }
        }
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var updatePatternOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/versions/{versionId}/patternrules/{patternId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.patternId
    ],
    requestBody: {
        parameterPath: "pattern",
        mapper: __assign(__assign({}, Mappers.PatternRuleUpdateObject), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.PatternRuleInfo
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deletePatternOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}/versions/{versionId}/patternrules/{patternId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.patternId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listIntentPatternsOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/versions/{versionId}/intents/{intentId}/patternrules",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0,
        Parameters.intentId
    ],
    queryParameters: [
        Parameters.skip,
        Parameters.take
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PatternRuleInfo"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
