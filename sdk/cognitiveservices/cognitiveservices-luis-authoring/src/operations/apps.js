"use strict";
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
var msRest = require("@azure/ms-rest-js");
var Mappers = require("../models/appsMappers");
var Parameters = require("../models/parameters");
/** Class representing a Apps. */
var Apps = /** @class */ (function () {
    /**
     * Create a Apps.
     * @param {LUISAuthoringClientContext} client Reference to the service client.
     */
    function Apps(client) {
        this.client = client;
    }
    Apps.prototype.add = function (applicationCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            applicationCreateObject: applicationCreateObject,
            options: options
        }, addOperationSpec, callback);
    };
    Apps.prototype.list = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listOperationSpec, callback);
    };
    Apps.prototype.importMethod = function (luisApp, options, callback) {
        return this.client.sendOperationRequest({
            luisApp: luisApp,
            options: options
        }, importMethodOperationSpec, callback);
    };
    Apps.prototype.listCortanaEndpoints = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listCortanaEndpointsOperationSpec, callback);
    };
    Apps.prototype.listDomains = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listDomainsOperationSpec, callback);
    };
    Apps.prototype.listUsageScenarios = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listUsageScenariosOperationSpec, callback);
    };
    Apps.prototype.listSupportedCultures = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listSupportedCulturesOperationSpec, callback);
    };
    Apps.prototype.downloadQueryLogs = function (appId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            options: options
        }, downloadQueryLogsOperationSpec, callback);
    };
    Apps.prototype.get = function (appId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            options: options
        }, getOperationSpec, callback);
    };
    Apps.prototype.update = function (appId, applicationUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            applicationUpdateObject: applicationUpdateObject,
            options: options
        }, updateOperationSpec, callback);
    };
    Apps.prototype.deleteMethod = function (appId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    Apps.prototype.publish = function (appId, applicationPublishObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            applicationPublishObject: applicationPublishObject,
            options: options
        }, publishOperationSpec, callback);
    };
    Apps.prototype.getSettings = function (appId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            options: options
        }, getSettingsOperationSpec, callback);
    };
    Apps.prototype.updateSettings = function (appId, applicationSettingUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            applicationSettingUpdateObject: applicationSettingUpdateObject,
            options: options
        }, updateSettingsOperationSpec, callback);
    };
    Apps.prototype.getPublishSettings = function (appId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            options: options
        }, getPublishSettingsOperationSpec, callback);
    };
    Apps.prototype.updatePublishSettings = function (appId, publishSettingUpdateObject, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            publishSettingUpdateObject: publishSettingUpdateObject,
            options: options
        }, updatePublishSettingsOperationSpec, callback);
    };
    Apps.prototype.listEndpoints = function (appId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            options: options
        }, listEndpointsOperationSpec, callback);
    };
    Apps.prototype.listAvailableCustomPrebuiltDomains = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listAvailableCustomPrebuiltDomainsOperationSpec, callback);
    };
    Apps.prototype.addCustomPrebuiltDomain = function (prebuiltDomainCreateObject, options, callback) {
        return this.client.sendOperationRequest({
            prebuiltDomainCreateObject: prebuiltDomainCreateObject,
            options: options
        }, addCustomPrebuiltDomainOperationSpec, callback);
    };
    Apps.prototype.listAvailableCustomPrebuiltDomainsForCulture = function (culture, options, callback) {
        return this.client.sendOperationRequest({
            culture: culture,
            options: options
        }, listAvailableCustomPrebuiltDomainsForCultureOperationSpec, callback);
    };
    Apps.prototype.packagePublishedApplicationAsGzip = function (appId, slotName, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            slotName: slotName,
            options: options
        }, packagePublishedApplicationAsGzipOperationSpec, callback);
    };
    Apps.prototype.packageTrainedApplicationAsGzip = function (appId, versionId, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            options: options
        }, packageTrainedApplicationAsGzipOperationSpec, callback);
    };
    return Apps;
}());
exports.Apps = Apps;
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var addOperationSpec = {
    httpMethod: "POST",
    path: "apps/",
    urlParameters: [
        Parameters.endpoint
    ],
    requestBody: {
        parameterPath: "applicationCreateObject",
        mapper: __assign(__assign({}, Mappers.ApplicationCreateObject), { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listOperationSpec = {
    httpMethod: "GET",
    path: "apps/",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.skip,
        Parameters.take
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ApplicationInfoResponse"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var importMethodOperationSpec = {
    httpMethod: "POST",
    path: "apps/import",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.appName
    ],
    requestBody: {
        parameterPath: "luisApp",
        mapper: __assign(__assign({}, Mappers.LuisApp), { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listCortanaEndpointsOperationSpec = {
    httpMethod: "GET",
    path: "apps/assistants",
    urlParameters: [
        Parameters.endpoint
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PersonalAssistantsResponse
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listDomainsOperationSpec = {
    httpMethod: "GET",
    path: "apps/domains",
    urlParameters: [
        Parameters.endpoint
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listUsageScenariosOperationSpec = {
    httpMethod: "GET",
    path: "apps/usagescenarios",
    urlParameters: [
        Parameters.endpoint
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listSupportedCulturesOperationSpec = {
    httpMethod: "GET",
    path: "apps/cultures",
    urlParameters: [
        Parameters.endpoint
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AvailableCulture"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var downloadQueryLogsOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/querylogs",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Stream"
                }
            }
        },
        "default": {}
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ApplicationInfoResponse
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var updateOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId
    ],
    requestBody: {
        parameterPath: "applicationUpdateObject",
        mapper: __assign(__assign({}, Mappers.ApplicationUpdateObject), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "apps/{appId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId
    ],
    queryParameters: [
        Parameters.force
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var publishOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/publish",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId
    ],
    requestBody: {
        parameterPath: "applicationPublishObject",
        mapper: __assign(__assign({}, Mappers.ApplicationPublishObject), { required: true })
    },
    responses: {
        201: {
            bodyMapper: Mappers.ProductionOrStagingEndpointInfo
        },
        207: {
            bodyMapper: Mappers.ProductionOrStagingEndpointInfo
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getSettingsOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/settings",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ApplicationSettings
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var updateSettingsOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/settings",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId
    ],
    requestBody: {
        parameterPath: "applicationSettingUpdateObject",
        mapper: __assign(__assign({}, Mappers.ApplicationSettingUpdateObject), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getPublishSettingsOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/publishsettings",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PublishSettings
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var updatePublishSettingsOperationSpec = {
    httpMethod: "PUT",
    path: "apps/{appId}/publishsettings",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId
    ],
    requestBody: {
        parameterPath: "publishSettingUpdateObject",
        mapper: __assign(__assign({}, Mappers.PublishSettingUpdateObject), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatus
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listEndpointsOperationSpec = {
    httpMethod: "GET",
    path: "apps/{appId}/endpoints",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listAvailableCustomPrebuiltDomainsOperationSpec = {
    httpMethod: "GET",
    path: "apps/customprebuiltdomains",
    urlParameters: [
        Parameters.endpoint
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrebuiltDomain"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var addCustomPrebuiltDomainOperationSpec = {
    httpMethod: "POST",
    path: "apps/customprebuiltdomains",
    urlParameters: [
        Parameters.endpoint
    ],
    requestBody: {
        parameterPath: "prebuiltDomainCreateObject",
        mapper: __assign(__assign({}, Mappers.PrebuiltDomainCreateObject), { required: true })
    },
    responses: {
        201: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Uuid"
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listAvailableCustomPrebuiltDomainsForCultureOperationSpec = {
    httpMethod: "GET",
    path: "apps/customprebuiltdomains/{culture}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.culture
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrebuiltDomain"
                        }
                    }
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var packagePublishedApplicationAsGzipOperationSpec = {
    httpMethod: "GET",
    path: "package/{appId}/slot/{slotName}/gzip",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.slotName
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Stream"
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var packageTrainedApplicationAsGzipOperationSpec = {
    httpMethod: "GET",
    path: "package/{appId}/versions/{versionId}/gzip",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Stream"
                }
            }
        },
        "default": {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
