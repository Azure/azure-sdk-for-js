/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/azureAccountsMappers";
import * as Parameters from "../models/parameters";
import { LUISAuthoringClientContext } from "../lUISAuthoringClientContext";

/** Class representing a AzureAccounts. */
export class AzureAccounts {
  private readonly client: LUISAuthoringClientContext;

  /**
   * Create a AzureAccounts.
   * @param {LUISAuthoringClientContext} client Reference to the service client.
   */
  constructor(client: LUISAuthoringClientContext) {
    this.client = client;
  }

  /**
   * Assigns an Azure account to the application.
   * @summary apps - Assign a LUIS Azure account to an application
   * @param appId The application ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.AzureAccountsAssignToAppResponse>
   */
  assignToApp(appId: string, options?: Models.AzureAccountsAssignToAppOptionalParams): Promise<Models.AzureAccountsAssignToAppResponse>;
  /**
   * @param appId The application ID.
   * @param callback The callback
   */
  assignToApp(appId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  assignToApp(appId: string, options: Models.AzureAccountsAssignToAppOptionalParams, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  assignToApp(appId: string, options?: Models.AzureAccountsAssignToAppOptionalParams | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.AzureAccountsAssignToAppResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        options
      },
      assignToAppOperationSpec,
      callback) as Promise<Models.AzureAccountsAssignToAppResponse>;
  }

  /**
   * Gets the LUIS Azure accounts assigned to the application for the user using his ARM token.
   * @summary apps - Get LUIS Azure accounts assigned to the application
   * @param appId The application ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.AzureAccountsGetAssignedResponse>
   */
  getAssigned(appId: string, options?: Models.AzureAccountsGetAssignedOptionalParams): Promise<Models.AzureAccountsGetAssignedResponse>;
  /**
   * @param appId The application ID.
   * @param callback The callback
   */
  getAssigned(appId: string, callback: msRest.ServiceCallback<Models.AzureAccountInfoObject[]>): void;
  /**
   * @param appId The application ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAssigned(appId: string, options: Models.AzureAccountsGetAssignedOptionalParams, callback: msRest.ServiceCallback<Models.AzureAccountInfoObject[]>): void;
  getAssigned(appId: string, options?: Models.AzureAccountsGetAssignedOptionalParams | msRest.ServiceCallback<Models.AzureAccountInfoObject[]>, callback?: msRest.ServiceCallback<Models.AzureAccountInfoObject[]>): Promise<Models.AzureAccountsGetAssignedResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        options
      },
      getAssignedOperationSpec,
      callback) as Promise<Models.AzureAccountsGetAssignedResponse>;
  }

  /**
   * Removes assigned Azure account from the application.
   * @summary apps - Removes an assigned LUIS Azure account from an application
   * @param appId The application ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.AzureAccountsRemoveFromAppResponse>
   */
  removeFromApp(appId: string, options?: Models.AzureAccountsRemoveFromAppOptionalParams): Promise<Models.AzureAccountsRemoveFromAppResponse>;
  /**
   * @param appId The application ID.
   * @param callback The callback
   */
  removeFromApp(appId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  removeFromApp(appId: string, options: Models.AzureAccountsRemoveFromAppOptionalParams, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  removeFromApp(appId: string, options?: Models.AzureAccountsRemoveFromAppOptionalParams | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.AzureAccountsRemoveFromAppResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        options
      },
      removeFromAppOperationSpec,
      callback) as Promise<Models.AzureAccountsRemoveFromAppResponse>;
  }

  /**
   * Gets the LUIS Azure accounts for the user using his ARM token.
   * @summary user - Get LUIS Azure accounts
   * @param [options] The optional parameters
   * @returns Promise<Models.AzureAccountsListUserLUISAccountsResponse>
   */
  listUserLUISAccounts(options?: Models.AzureAccountsListUserLUISAccountsOptionalParams): Promise<Models.AzureAccountsListUserLUISAccountsResponse>;
  /**
   * @param callback The callback
   */
  listUserLUISAccounts(callback: msRest.ServiceCallback<Models.AzureAccountInfoObject[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listUserLUISAccounts(options: Models.AzureAccountsListUserLUISAccountsOptionalParams, callback: msRest.ServiceCallback<Models.AzureAccountInfoObject[]>): void;
  listUserLUISAccounts(options?: Models.AzureAccountsListUserLUISAccountsOptionalParams | msRest.ServiceCallback<Models.AzureAccountInfoObject[]>, callback?: msRest.ServiceCallback<Models.AzureAccountInfoObject[]>): Promise<Models.AzureAccountsListUserLUISAccountsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listUserLUISAccountsOperationSpec,
      callback) as Promise<Models.AzureAccountsListUserLUISAccountsResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const assignToAppOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apps/{appId}/azureaccounts",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId
  ],
  headerParameters: [
    Parameters.armToken
  ],
  requestBody: {
    parameterPath: [
      "options",
      "azureAccountInfoObject"
    ],
    mapper: Mappers.AzureAccountInfoObject
  },
  responses: {
    201: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getAssignedOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/azureaccounts",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId
  ],
  headerParameters: [
    Parameters.armToken
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureAccountInfoObject"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const removeFromAppOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apps/{appId}/azureaccounts",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId
  ],
  headerParameters: [
    Parameters.armToken
  ],
  requestBody: {
    parameterPath: [
      "options",
      "azureAccountInfoObject"
    ],
    mapper: Mappers.AzureAccountInfoObject
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listUserLUISAccountsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "azureaccounts",
  urlParameters: [
    Parameters.endpoint
  ],
  headerParameters: [
    Parameters.armToken
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureAccountInfoObject"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
