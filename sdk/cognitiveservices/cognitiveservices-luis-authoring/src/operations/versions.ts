/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/versionsMappers";
import * as Parameters from "../models/parameters";
import { LUISAuthoringClientContext } from "../lUISAuthoringClientContext";

/** Class representing a Versions. */
export class Versions {
  private readonly client: LUISAuthoringClientContext;

  /**
   * Create a Versions.
   * @param {LUISAuthoringClientContext} client Reference to the service client.
   */
  constructor(client: LUISAuthoringClientContext) {
    this.client = client;
  }

  /**
   * Creates a new version from the selected version.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param versionCloneObject A model containing the new version ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.VersionsCloneResponse>
   */
  clone(appId: string, versionId: string, versionCloneObject: Models.TaskUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.VersionsCloneResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param versionCloneObject A model containing the new version ID.
   * @param callback The callback
   */
  clone(appId: string, versionId: string, versionCloneObject: Models.TaskUpdateObject, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param versionCloneObject A model containing the new version ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  clone(appId: string, versionId: string, versionCloneObject: Models.TaskUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  clone(appId: string, versionId: string, versionCloneObject: Models.TaskUpdateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.VersionsCloneResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        versionCloneObject,
        options
      },
      cloneOperationSpec,
      callback) as Promise<Models.VersionsCloneResponse>;
  }

  /**
   * Gets a list of versions for this application ID.
   * @param appId The application ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.VersionsListResponse>
   */
  list(appId: string, options?: Models.VersionsListOptionalParams): Promise<Models.VersionsListResponse>;
  /**
   * @param appId The application ID.
   * @param callback The callback
   */
  list(appId: string, callback: msRest.ServiceCallback<Models.VersionInfo[]>): void;
  /**
   * @param appId The application ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(appId: string, options: Models.VersionsListOptionalParams, callback: msRest.ServiceCallback<Models.VersionInfo[]>): void;
  list(appId: string, options?: Models.VersionsListOptionalParams | msRest.ServiceCallback<Models.VersionInfo[]>, callback?: msRest.ServiceCallback<Models.VersionInfo[]>): Promise<Models.VersionsListResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.VersionsListResponse>;
  }

  /**
   * Gets the version information such as date created, last modified date, endpoint URL, count of
   * intents and entities, training and publishing status.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.VersionsGetResponse>
   */
  get(appId: string, versionId: string, options?: msRest.RequestOptionsBase): Promise<Models.VersionsGetResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param callback The callback
   */
  get(appId: string, versionId: string, callback: msRest.ServiceCallback<Models.VersionInfo>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(appId: string, versionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VersionInfo>): void;
  get(appId: string, versionId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VersionInfo>, callback?: msRest.ServiceCallback<Models.VersionInfo>): Promise<Models.VersionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.VersionsGetResponse>;
  }

  /**
   * Updates the name or description of the application version.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param versionUpdateObject A model containing Name and Description of the application.
   * @param [options] The optional parameters
   * @returns Promise<Models.VersionsUpdateResponse>
   */
  update(appId: string, versionId: string, versionUpdateObject: Models.TaskUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.VersionsUpdateResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param versionUpdateObject A model containing Name and Description of the application.
   * @param callback The callback
   */
  update(appId: string, versionId: string, versionUpdateObject: Models.TaskUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param versionUpdateObject A model containing Name and Description of the application.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(appId: string, versionId: string, versionUpdateObject: Models.TaskUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  update(appId: string, versionId: string, versionUpdateObject: Models.TaskUpdateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.VersionsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        versionUpdateObject,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.VersionsUpdateResponse>;
  }

  /**
   * Deletes an application version.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.VersionsDeleteMethodResponse>
   */
  deleteMethod(appId: string, versionId: string, options?: msRest.RequestOptionsBase): Promise<Models.VersionsDeleteMethodResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param callback The callback
   */
  deleteMethod(appId: string, versionId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(appId: string, versionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  deleteMethod(appId: string, versionId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.VersionsDeleteMethodResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        options
      },
      deleteMethodOperationSpec,
      callback) as Promise<Models.VersionsDeleteMethodResponse>;
  }

  /**
   * Exports a LUIS application to JSON format.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.VersionsExportMethodResponse>
   */
  exportMethod(appId: string, versionId: string, options?: msRest.RequestOptionsBase): Promise<Models.VersionsExportMethodResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param callback The callback
   */
  exportMethod(appId: string, versionId: string, callback: msRest.ServiceCallback<Models.LuisApp>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  exportMethod(appId: string, versionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LuisApp>): void;
  exportMethod(appId: string, versionId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LuisApp>, callback?: msRest.ServiceCallback<Models.LuisApp>): Promise<Models.VersionsExportMethodResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        options
      },
      exportMethodOperationSpec,
      callback) as Promise<Models.VersionsExportMethodResponse>;
  }

  /**
   * Imports a new version into a LUIS application.
   * @param appId The application ID.
   * @param luisApp A LUIS application structure.
   * @param [options] The optional parameters
   * @returns Promise<Models.VersionsImportMethodResponse>
   */
  importMethod(appId: string, luisApp: Models.LuisApp, options?: Models.VersionsImportMethodOptionalParams): Promise<Models.VersionsImportMethodResponse>;
  /**
   * @param appId The application ID.
   * @param luisApp A LUIS application structure.
   * @param callback The callback
   */
  importMethod(appId: string, luisApp: Models.LuisApp, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param appId The application ID.
   * @param luisApp A LUIS application structure.
   * @param options The optional parameters
   * @param callback The callback
   */
  importMethod(appId: string, luisApp: Models.LuisApp, options: Models.VersionsImportMethodOptionalParams, callback: msRest.ServiceCallback<string>): void;
  importMethod(appId: string, luisApp: Models.LuisApp, options?: Models.VersionsImportMethodOptionalParams | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.VersionsImportMethodResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        luisApp,
        options
      },
      importMethodOperationSpec,
      callback) as Promise<Models.VersionsImportMethodResponse>;
  }

  /**
   * Deleted an unlabelled utterance in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param utterance The utterance text to delete.
   * @param [options] The optional parameters
   * @returns Promise<Models.VersionsDeleteUnlabelledUtteranceResponse>
   */
  deleteUnlabelledUtterance(appId: string, versionId: string, utterance: string, options?: msRest.RequestOptionsBase): Promise<Models.VersionsDeleteUnlabelledUtteranceResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param utterance The utterance text to delete.
   * @param callback The callback
   */
  deleteUnlabelledUtterance(appId: string, versionId: string, utterance: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param utterance The utterance text to delete.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteUnlabelledUtterance(appId: string, versionId: string, utterance: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  deleteUnlabelledUtterance(appId: string, versionId: string, utterance: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.VersionsDeleteUnlabelledUtteranceResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        utterance,
        options
      },
      deleteUnlabelledUtteranceOperationSpec,
      callback) as Promise<Models.VersionsDeleteUnlabelledUtteranceResponse>;
  }

  /**
   * Imports a new version into a LUIS application.
   * @param appId The application ID.
   * @param luisAppV2 A LUIS application structure.
   * @param [options] The optional parameters
   * @returns Promise<Models.VersionsImportV2AppResponse>
   */
  importV2App(appId: string, luisAppV2: Models.LuisAppV2, options?: Models.VersionsImportV2AppOptionalParams): Promise<Models.VersionsImportV2AppResponse>;
  /**
   * @param appId The application ID.
   * @param luisAppV2 A LUIS application structure.
   * @param callback The callback
   */
  importV2App(appId: string, luisAppV2: Models.LuisAppV2, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param appId The application ID.
   * @param luisAppV2 A LUIS application structure.
   * @param options The optional parameters
   * @param callback The callback
   */
  importV2App(appId: string, luisAppV2: Models.LuisAppV2, options: Models.VersionsImportV2AppOptionalParams, callback: msRest.ServiceCallback<string>): void;
  importV2App(appId: string, luisAppV2: Models.LuisAppV2, options?: Models.VersionsImportV2AppOptionalParams | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.VersionsImportV2AppResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        luisAppV2,
        options
      },
      importV2AppOperationSpec,
      callback) as Promise<Models.VersionsImportV2AppResponse>;
  }

  /**
   * Imports a new version into a LUIS application.
   * @param appId The application ID.
   * @param luisAppLu An LU representing the LUIS application structure.
   * @param [options] The optional parameters
   * @returns Promise<Models.VersionsImportLuFormatResponse>
   */
  importLuFormat(appId: string, luisAppLu: string, options?: Models.VersionsImportLuFormatOptionalParams): Promise<Models.VersionsImportLuFormatResponse>;
  /**
   * @param appId The application ID.
   * @param luisAppLu An LU representing the LUIS application structure.
   * @param callback The callback
   */
  importLuFormat(appId: string, luisAppLu: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param appId The application ID.
   * @param luisAppLu An LU representing the LUIS application structure.
   * @param options The optional parameters
   * @param callback The callback
   */
  importLuFormat(appId: string, luisAppLu: string, options: Models.VersionsImportLuFormatOptionalParams, callback: msRest.ServiceCallback<string>): void;
  importLuFormat(appId: string, luisAppLu: string, options?: Models.VersionsImportLuFormatOptionalParams | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.VersionsImportLuFormatResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        luisAppLu,
        options
      },
      importLuFormatOperationSpec,
      callback) as Promise<Models.VersionsImportLuFormatResponse>;
  }

  /**
   * Exports a LUIS application to text format.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.VersionsExportLuFormatResponse>
   */
  exportLuFormat(appId: string, versionId: string, options?: msRest.RequestOptionsBase): Promise<Models.VersionsExportLuFormatResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param callback The callback
   */
  exportLuFormat(appId: string, versionId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  exportLuFormat(appId: string, versionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  exportLuFormat(appId: string, versionId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.VersionsExportLuFormatResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        options
      },
      exportLuFormatOperationSpec,
      callback) as Promise<Models.VersionsExportLuFormatResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const cloneOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apps/{appId}/versions/{versionId}/clone",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0
  ],
  requestBody: {
    parameterPath: "versionCloneObject",
    mapper: {
      ...Mappers.TaskUpdateObject,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId
  ],
  queryParameters: [
    Parameters.skip,
    Parameters.take
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VersionInfo"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VersionInfo
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apps/{appId}/versions/{versionId}/",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0
  ],
  requestBody: {
    parameterPath: "versionUpdateObject",
    mapper: {
      ...Mappers.TaskUpdateObject,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apps/{appId}/versions/{versionId}/",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const exportMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/export",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LuisApp
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const importMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apps/{appId}/versions/import",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId
  ],
  queryParameters: [
    Parameters.versionId1
  ],
  requestBody: {
    parameterPath: "luisApp",
    mapper: {
      ...Mappers.LuisApp,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteUnlabelledUtteranceOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apps/{appId}/versions/{versionId}/suggest",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0
  ],
  requestBody: {
    parameterPath: "utterance",
    mapper: {
      required: true,
      serializedName: "utterance",
      type: {
        name: "String"
      }
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const importV2AppOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apps/{appId}/versions/import",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId
  ],
  queryParameters: [
    Parameters.versionId1
  ],
  requestBody: {
    parameterPath: "luisAppV2",
    mapper: {
      ...Mappers.LuisAppV2,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const importLuFormatOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apps/{appId}/versions/import",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId
  ],
  queryParameters: [
    Parameters.versionId1
  ],
  requestBody: {
    parameterPath: "luisAppLu",
    mapper: {
      required: true,
      serializedName: "luisAppLu",
      type: {
        name: "String"
      }
    }
  },
  contentType: "text/plain",
  responses: {
    201: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const exportLuFormatOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/export",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0
  ],
  queryParameters: [
    Parameters.format
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      }
    },
    default: {}
  },
  serializer
};
