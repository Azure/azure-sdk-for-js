/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as msRest from "@azure/ms-rest-js";


export const QueryContext: msRest.CompositeMapper = {
  serializedName: "QueryContext",
  type: {
    name: "Composite",
    className: "QueryContext",
    modelProperties: {
      originalQuery: {
        required: true,
        serializedName: "originalQuery",
        type: {
          name: "String"
        }
      },
      alteredQuery: {
        readOnly: true,
        serializedName: "alteredQuery",
        type: {
          name: "String"
        }
      },
      alterationOverrideQuery: {
        readOnly: true,
        serializedName: "alterationOverrideQuery",
        type: {
          name: "String"
        }
      },
      adultIntent: {
        readOnly: true,
        serializedName: "adultIntent",
        type: {
          name: "Boolean"
        }
      },
      askUserForLocation: {
        readOnly: true,
        serializedName: "askUserForLocation",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ResponseBase: msRest.CompositeMapper = {
  serializedName: "ResponseBase",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "_type",
      clientName: "_type"
    },
    uberParent: "ResponseBase",
    className: "ResponseBase",
    modelProperties: {
      _type: {
        required: true,
        serializedName: "_type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Identifiable: msRest.CompositeMapper = {
  serializedName: "Identifiable",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "Identifiable",
    modelProperties: {
      ...ResponseBase.type.modelProperties,
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Response: msRest.CompositeMapper = {
  serializedName: "Response",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "Response",
    modelProperties: {
      ...Identifiable.type.modelProperties,
      contractualRules: {
        readOnly: true,
        serializedName: "contractualRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContractualRulesContractualRule"
            }
          }
        }
      },
      webSearchUrl: {
        readOnly: true,
        serializedName: "webSearchUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Thing: msRest.CompositeMapper = {
  serializedName: "Thing",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "Thing",
    modelProperties: {
      ...Response.type.modelProperties,
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      url: {
        readOnly: true,
        serializedName: "url",
        type: {
          name: "String"
        }
      },
      image: {
        readOnly: true,
        serializedName: "image",
        type: {
          name: "Composite",
          className: "ImageObject"
        }
      },
      description: {
        readOnly: true,
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      entityPresentationInfo: {
        readOnly: true,
        serializedName: "entityPresentationInfo",
        type: {
          name: "Composite",
          className: "EntitiesEntityPresentationInfo"
        }
      },
      bingId: {
        readOnly: true,
        serializedName: "bingId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreativeWork: msRest.CompositeMapper = {
  serializedName: "CreativeWork",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "CreativeWork",
    modelProperties: {
      ...Thing.type.modelProperties,
      thumbnailUrl: {
        readOnly: true,
        serializedName: "thumbnailUrl",
        type: {
          name: "String"
        }
      },
      provider: {
        readOnly: true,
        serializedName: "provider",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Thing"
            }
          }
        }
      },
      text: {
        readOnly: true,
        serializedName: "text",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MediaObject: msRest.CompositeMapper = {
  serializedName: "MediaObject",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "MediaObject",
    modelProperties: {
      ...CreativeWork.type.modelProperties,
      contentUrl: {
        readOnly: true,
        serializedName: "contentUrl",
        type: {
          name: "String"
        }
      },
      hostPageUrl: {
        readOnly: true,
        serializedName: "hostPageUrl",
        type: {
          name: "String"
        }
      },
      width: {
        readOnly: true,
        serializedName: "width",
        type: {
          name: "Number"
        }
      },
      height: {
        readOnly: true,
        serializedName: "height",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ImageObject: msRest.CompositeMapper = {
  serializedName: "ImageObject",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "ImageObject",
    modelProperties: {
      ...MediaObject.type.modelProperties,
      thumbnail: {
        readOnly: true,
        serializedName: "thumbnail",
        type: {
          name: "Composite",
          className: "ImageObject"
        }
      }
    }
  }
};

export const EntitiesEntityPresentationInfo: msRest.CompositeMapper = {
  serializedName: "Entities/EntityPresentationInfo",
  type: {
    name: "Composite",
    className: "EntitiesEntityPresentationInfo",
    modelProperties: {
      entityScenario: {
        required: true,
        serializedName: "entityScenario",
        defaultValue: 'DominantEntity',
        type: {
          name: "String"
        }
      },
      entityTypeHints: {
        readOnly: true,
        serializedName: "entityTypeHints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      entityTypeDisplayHint: {
        readOnly: true,
        serializedName: "entityTypeDisplayHint",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Answer: msRest.CompositeMapper = {
  serializedName: "Answer",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "Answer",
    modelProperties: {
      ...Response.type.modelProperties
    }
  }
};

export const SearchResultsAnswer: msRest.CompositeMapper = {
  serializedName: "SearchResultsAnswer",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "SearchResultsAnswer",
    modelProperties: {
      ...Answer.type.modelProperties,
      queryContext: {
        readOnly: true,
        serializedName: "queryContext",
        type: {
          name: "Composite",
          className: "QueryContext"
        }
      }
    }
  }
};

export const Entities: msRest.CompositeMapper = {
  serializedName: "Entities",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "Entities",
    modelProperties: {
      ...SearchResultsAnswer.type.modelProperties,
      queryScenario: {
        readOnly: true,
        serializedName: "queryScenario",
        defaultValue: 'DominantEntity',
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Thing"
            }
          }
        }
      }
    }
  }
};

export const Places: msRest.CompositeMapper = {
  serializedName: "Places",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "Places",
    modelProperties: {
      ...SearchResultsAnswer.type.modelProperties,
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Thing"
            }
          }
        }
      }
    }
  }
};

export const SearchResponse: msRest.CompositeMapper = {
  serializedName: "SearchResponse",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "SearchResponse",
    modelProperties: {
      ...Response.type.modelProperties,
      queryContext: {
        readOnly: true,
        serializedName: "queryContext",
        type: {
          name: "Composite",
          className: "QueryContext"
        }
      },
      entities: {
        readOnly: true,
        serializedName: "entities",
        type: {
          name: "Composite",
          className: "Entities"
        }
      },
      places: {
        readOnly: true,
        serializedName: "places",
        type: {
          name: "Composite",
          className: "Places"
        }
      }
    }
  }
};

export const ContractualRulesContractualRule: msRest.CompositeMapper = {
  serializedName: "ContractualRules/ContractualRule",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "_type",
      clientName: "_type"
    },
    uberParent: "ContractualRulesContractualRule",
    className: "ContractualRulesContractualRule",
    modelProperties: {
      targetPropertyName: {
        readOnly: true,
        serializedName: "targetPropertyName",
        type: {
          name: "String"
        }
      },
      _type: {
        required: true,
        serializedName: "_type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorModel: msRest.CompositeMapper = {
  serializedName: "Error",
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      code: {
        required: true,
        serializedName: "code",
        defaultValue: 'None',
        type: {
          name: "String"
        }
      },
      subCode: {
        readOnly: true,
        serializedName: "subCode",
        type: {
          name: "String"
        }
      },
      message: {
        required: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      moreDetails: {
        readOnly: true,
        serializedName: "moreDetails",
        type: {
          name: "String"
        }
      },
      parameter: {
        readOnly: true,
        serializedName: "parameter",
        type: {
          name: "String"
        }
      },
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: msRest.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "ErrorResponse",
    modelProperties: {
      ...Response.type.modelProperties,
      errors: {
        required: true,
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorModel"
            }
          }
        }
      }
    }
  }
};

export const Intangible: msRest.CompositeMapper = {
  serializedName: "Intangible",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "Intangible",
    modelProperties: {
      ...Thing.type.modelProperties
    }
  }
};

export const StructuredValue: msRest.CompositeMapper = {
  serializedName: "StructuredValue",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "StructuredValue",
    modelProperties: {
      ...Intangible.type.modelProperties
    }
  }
};

export const PostalAddress: msRest.CompositeMapper = {
  serializedName: "PostalAddress",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "PostalAddress",
    modelProperties: {
      ...StructuredValue.type.modelProperties,
      streetAddress: {
        readOnly: true,
        serializedName: "streetAddress",
        type: {
          name: "String"
        }
      },
      addressLocality: {
        readOnly: true,
        serializedName: "addressLocality",
        type: {
          name: "String"
        }
      },
      addressSubregion: {
        readOnly: true,
        serializedName: "addressSubregion",
        type: {
          name: "String"
        }
      },
      addressRegion: {
        readOnly: true,
        serializedName: "addressRegion",
        type: {
          name: "String"
        }
      },
      postalCode: {
        readOnly: true,
        serializedName: "postalCode",
        type: {
          name: "String"
        }
      },
      postOfficeBoxNumber: {
        readOnly: true,
        serializedName: "postOfficeBoxNumber",
        type: {
          name: "String"
        }
      },
      addressCountry: {
        readOnly: true,
        serializedName: "addressCountry",
        type: {
          name: "String"
        }
      },
      countryIso: {
        readOnly: true,
        serializedName: "countryIso",
        type: {
          name: "String"
        }
      },
      neighborhood: {
        readOnly: true,
        serializedName: "neighborhood",
        type: {
          name: "String"
        }
      },
      addressRegionAbbreviation: {
        readOnly: true,
        serializedName: "addressRegionAbbreviation",
        type: {
          name: "String"
        }
      },
      text: {
        readOnly: true,
        serializedName: "text",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Place: msRest.CompositeMapper = {
  serializedName: "Place",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "Place",
    modelProperties: {
      ...Thing.type.modelProperties,
      address: {
        readOnly: true,
        serializedName: "address",
        type: {
          name: "Composite",
          className: "PostalAddress"
        }
      },
      telephone: {
        readOnly: true,
        serializedName: "telephone",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Organization: msRest.CompositeMapper = {
  serializedName: "Organization",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "Organization",
    modelProperties: {
      ...Thing.type.modelProperties
    }
  }
};

export const LocalBusiness: msRest.CompositeMapper = {
  serializedName: "LocalBusiness",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "LocalBusiness",
    modelProperties: {
      ...Place.type.modelProperties,
      priceRange: {
        readOnly: true,
        serializedName: "priceRange",
        type: {
          name: "String"
        }
      },
      panoramas: {
        readOnly: true,
        serializedName: "panoramas",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ImageObject"
            }
          }
        }
      },
      isPermanentlyClosed: {
        readOnly: true,
        serializedName: "isPermanentlyClosed",
        type: {
          name: "Boolean"
        }
      },
      tagLine: {
        readOnly: true,
        serializedName: "tagLine",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EntertainmentBusiness: msRest.CompositeMapper = {
  serializedName: "EntertainmentBusiness",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "EntertainmentBusiness",
    modelProperties: {
      ...LocalBusiness.type.modelProperties
    }
  }
};

export const MovieTheater: msRest.CompositeMapper = {
  serializedName: "MovieTheater",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "MovieTheater",
    modelProperties: {
      ...EntertainmentBusiness.type.modelProperties,
      screenCount: {
        readOnly: true,
        serializedName: "screenCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ContractualRulesAttribution: msRest.CompositeMapper = {
  serializedName: "ContractualRules/Attribution",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ContractualRulesContractualRule.type.polymorphicDiscriminator,
    uberParent: "ContractualRulesContractualRule",
    className: "ContractualRulesAttribution",
    modelProperties: {
      ...ContractualRulesContractualRule.type.modelProperties,
      mustBeCloseToContent: {
        readOnly: true,
        serializedName: "mustBeCloseToContent",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const CivicStructure: msRest.CompositeMapper = {
  serializedName: "CivicStructure",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "CivicStructure",
    modelProperties: {
      ...Place.type.modelProperties
    }
  }
};

export const TouristAttraction: msRest.CompositeMapper = {
  serializedName: "TouristAttraction",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "TouristAttraction",
    modelProperties: {
      ...Place.type.modelProperties
    }
  }
};

export const Airport: msRest.CompositeMapper = {
  serializedName: "Airport",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "Airport",
    modelProperties: {
      ...CivicStructure.type.modelProperties,
      iataCode: {
        readOnly: true,
        serializedName: "iataCode",
        type: {
          name: "String"
        }
      },
      icaoCode: {
        readOnly: true,
        serializedName: "icaoCode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const License: msRest.CompositeMapper = {
  serializedName: "License",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "License",
    modelProperties: {
      ...CreativeWork.type.modelProperties
    }
  }
};

export const ContractualRulesLicenseAttribution: msRest.CompositeMapper = {
  serializedName: "ContractualRules/LicenseAttribution",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ContractualRulesContractualRule.type.polymorphicDiscriminator,
    uberParent: "ContractualRulesContractualRule",
    className: "ContractualRulesLicenseAttribution",
    modelProperties: {
      ...ContractualRulesAttribution.type.modelProperties,
      license: {
        readOnly: true,
        serializedName: "license",
        type: {
          name: "Composite",
          className: "License"
        }
      },
      licenseNotice: {
        readOnly: true,
        serializedName: "licenseNotice",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContractualRulesLinkAttribution: msRest.CompositeMapper = {
  serializedName: "ContractualRules/LinkAttribution",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ContractualRulesContractualRule.type.polymorphicDiscriminator,
    uberParent: "ContractualRulesContractualRule",
    className: "ContractualRulesLinkAttribution",
    modelProperties: {
      ...ContractualRulesAttribution.type.modelProperties,
      text: {
        required: true,
        serializedName: "text",
        type: {
          name: "String"
        }
      },
      url: {
        required: true,
        serializedName: "url",
        type: {
          name: "String"
        }
      },
      optionalForListDisplay: {
        readOnly: true,
        serializedName: "optionalForListDisplay",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ContractualRulesMediaAttribution: msRest.CompositeMapper = {
  serializedName: "ContractualRules/MediaAttribution",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ContractualRulesContractualRule.type.polymorphicDiscriminator,
    uberParent: "ContractualRulesContractualRule",
    className: "ContractualRulesMediaAttribution",
    modelProperties: {
      ...ContractualRulesAttribution.type.modelProperties,
      url: {
        readOnly: true,
        serializedName: "url",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContractualRulesTextAttribution: msRest.CompositeMapper = {
  serializedName: "ContractualRules/TextAttribution",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ContractualRulesContractualRule.type.polymorphicDiscriminator,
    uberParent: "ContractualRulesContractualRule",
    className: "ContractualRulesTextAttribution",
    modelProperties: {
      ...ContractualRulesAttribution.type.modelProperties,
      text: {
        required: true,
        serializedName: "text",
        type: {
          name: "String"
        }
      },
      optionalForListDisplay: {
        readOnly: true,
        serializedName: "optionalForListDisplay",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const FoodEstablishment: msRest.CompositeMapper = {
  serializedName: "FoodEstablishment",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "FoodEstablishment",
    modelProperties: {
      ...LocalBusiness.type.modelProperties
    }
  }
};

export const LodgingBusiness: msRest.CompositeMapper = {
  serializedName: "LodgingBusiness",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "LodgingBusiness",
    modelProperties: {
      ...LocalBusiness.type.modelProperties
    }
  }
};

export const Restaurant: msRest.CompositeMapper = {
  serializedName: "Restaurant",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "Restaurant",
    modelProperties: {
      ...FoodEstablishment.type.modelProperties,
      acceptsReservations: {
        readOnly: true,
        serializedName: "acceptsReservations",
        type: {
          name: "Boolean"
        }
      },
      reservationUrl: {
        readOnly: true,
        serializedName: "reservationUrl",
        type: {
          name: "String"
        }
      },
      servesCuisine: {
        readOnly: true,
        serializedName: "servesCuisine",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      menuUrl: {
        readOnly: true,
        serializedName: "menuUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Hotel: msRest.CompositeMapper = {
  serializedName: "Hotel",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "Hotel",
    modelProperties: {
      ...LodgingBusiness.type.modelProperties,
      hotelClass: {
        readOnly: true,
        serializedName: "hotelClass",
        type: {
          name: "String"
        }
      },
      amenities: {
        readOnly: true,
        serializedName: "amenities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const discriminators = {
  'ResponseBase.ImageObject' : ImageObject,
  'ResponseBase.Thing' : Thing,
  'ResponseBase.Entities' : Entities,
  'ResponseBase.Places' : Places,
  'ResponseBase.SearchResponse' : SearchResponse,
  'ContractualRules/ContractualRule' : ContractualRulesContractualRule,
  'ResponseBase.Response' : Response,
  'ResponseBase.SearchResultsAnswer' : SearchResultsAnswer,
  'ResponseBase.Identifiable' : Identifiable,
  'ResponseBase.Answer' : Answer,
  'ResponseBase.ErrorResponse' : ErrorResponse,
  'ResponseBase.PostalAddress' : PostalAddress,
  'ResponseBase.Place' : Place,
  'ResponseBase.Organization' : Organization,
  'ResponseBase' : ResponseBase,
  'ResponseBase.CreativeWork' : CreativeWork,
  'ResponseBase.Intangible' : Intangible,
  'ResponseBase.MovieTheater' : MovieTheater,
  'ContractualRulesContractualRule.ContractualRules/Attribution' : ContractualRulesAttribution,
  'ResponseBase.MediaObject' : MediaObject,
  'ResponseBase.CivicStructure' : CivicStructure,
  'ResponseBase.LocalBusiness' : LocalBusiness,
  'ResponseBase.TouristAttraction' : TouristAttraction,
  'ResponseBase.Airport' : Airport,
  'ResponseBase.License' : License,
  'ResponseBase.StructuredValue' : StructuredValue,
  'ResponseBase.EntertainmentBusiness' : EntertainmentBusiness,
  'ContractualRulesContractualRule.ContractualRules/LicenseAttribution' : ContractualRulesLicenseAttribution,
  'ContractualRulesContractualRule.ContractualRules/LinkAttribution' : ContractualRulesLinkAttribution,
  'ContractualRulesContractualRule.ContractualRules/MediaAttribution' : ContractualRulesMediaAttribution,
  'ContractualRulesContractualRule.ContractualRules/TextAttribution' : ContractualRulesTextAttribution,
  'ResponseBase.FoodEstablishment' : FoodEstablishment,
  'ResponseBase.LodgingBusiness' : LodgingBusiness,
  'ResponseBase.Restaurant' : Restaurant,
  'ResponseBase.Hotel' : Hotel

};
