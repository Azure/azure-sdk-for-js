/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/textIndependentMappers";
import * as Parameters from "../models/parameters";
import { SpeakerIdentificationAPIContext } from "../speakerIdentificationAPIContext";

/** Class representing a TextIndependent. */
export class TextIndependent {
  private readonly client: SpeakerIdentificationAPIContext;

  /**
   * Create a TextIndependent.
   * @param {SpeakerIdentificationAPIContext} client Reference to the service client.
   */
  constructor(client: SpeakerIdentificationAPIContext) {
    this.client = client;
  }

  /**
   * Creates a new speaker profile with specified locale.
   * One subscription can create 10,000 speaker profiles at most.
   * @summary Create Profile
   * @param [options] The optional parameters
   * @returns Promise<Models.TextIndependentCreateProfileResponse>
   */
  createProfile(options?: Models.TextIndependentCreateProfileOptionalParams): Promise<Models.TextIndependentCreateProfileResponse>;
  /**
   * @param callback The callback
   */
  createProfile(callback: msRest.ServiceCallback<Models.TiProfileInfo>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  createProfile(options: Models.TextIndependentCreateProfileOptionalParams, callback: msRest.ServiceCallback<Models.TiProfileInfo>): void;
  createProfile(options?: Models.TextIndependentCreateProfileOptionalParams | msRest.ServiceCallback<Models.TiProfileInfo>, callback?: msRest.ServiceCallback<Models.TiProfileInfo>): Promise<Models.TextIndependentCreateProfileResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      createProfileOperationSpec,
      callback) as Promise<Models.TextIndependentCreateProfileResponse>;
  }

  /**
   * Retrieves a set of profiles.
   * Profiles are sorted alphabetically by ProfileId
   * @summary List Profile
   * @param [options] The optional parameters
   * @returns Promise<Models.TextIndependentListProfilesResponse>
   */
  listProfiles(options?: Models.TextIndependentListProfilesOptionalParams): Promise<Models.TextIndependentListProfilesResponse>;
  /**
   * @param callback The callback
   */
  listProfiles(callback: msRest.ServiceCallback<Models.TiProfileInfoList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listProfiles(options: Models.TextIndependentListProfilesOptionalParams, callback: msRest.ServiceCallback<Models.TiProfileInfoList>): void;
  listProfiles(options?: Models.TextIndependentListProfilesOptionalParams | msRest.ServiceCallback<Models.TiProfileInfoList>, callback?: msRest.ServiceCallback<Models.TiProfileInfoList>): Promise<Models.TextIndependentListProfilesResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listProfilesOperationSpec,
      callback) as Promise<Models.TextIndependentListProfilesResponse>;
  }

  /**
   * Retrieves a single profile by ID.
   * @summary Retrieve Single Profile
   * @param profileId Unique identifier for profile id (guid).
   * @param [options] The optional parameters
   * @returns Promise<Models.TextIndependentGetProfileResponse>
   */
  getProfile(profileId: string, options?: msRest.RequestOptionsBase): Promise<Models.TextIndependentGetProfileResponse>;
  /**
   * @param profileId Unique identifier for profile id (guid).
   * @param callback The callback
   */
  getProfile(profileId: string, callback: msRest.ServiceCallback<Models.TiProfileInfo>): void;
  /**
   * @param profileId Unique identifier for profile id (guid).
   * @param options The optional parameters
   * @param callback The callback
   */
  getProfile(profileId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TiProfileInfo>): void;
  getProfile(profileId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TiProfileInfo>, callback?: msRest.ServiceCallback<Models.TiProfileInfo>): Promise<Models.TextIndependentGetProfileResponse> {
    return this.client.sendOperationRequest(
      {
        profileId,
        options
      },
      getProfileOperationSpec,
      callback) as Promise<Models.TextIndependentGetProfileResponse>;
  }

  /**
   * Deletes an existing profile.
   * @summary Delete Profile
   * @param profileId Unique identifier for profile id (guid).
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteProfile(profileId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param profileId Unique identifier for profile id (guid).
   * @param callback The callback
   */
  deleteProfile(profileId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param profileId Unique identifier for profile id (guid).
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteProfile(profileId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteProfile(profileId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        profileId,
        options
      },
      deleteProfileOperationSpec,
      callback);
  }

  /**
   * Resets existing profile to its original creation state. The reset operation does the following:
   * * Updates enrollmentStatus to Enrolling.
   * * Updates lastUpdatedDateTime.
   * * Updates enrollmentsCount to 0.
   * * Updates enrollmentsLength to 0.
   * * Updates enrollmentsSpeechLength to 0.
   * * Updates remainingEnrollmentsSpeechLength to the required number.
   * * Removes all associated enrollments from storage.
   * * Removes chosen passphrase association.
   * * Resets value of modelVersion.
   * @summary Reset Profile
   * @param profileId Unique identifier for profile id (guid).
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  resetProfile(profileId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param profileId Unique identifier for profile id (guid).
   * @param callback The callback
   */
  resetProfile(profileId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param profileId Unique identifier for profile id (guid).
   * @param options The optional parameters
   * @param callback The callback
   */
  resetProfile(profileId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  resetProfile(profileId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        profileId,
        options
      },
      resetProfileOperationSpec,
      callback);
  }

  /**
   * Adds an enrollment to existing profile.
   * If the minimum number of requested enrollment audios is reached, a voice print is created.
   * If the voice print was created before, it gets recreated from all existing enrollment audios
   * including the new one.
   *
   * Limitations:
   * * Minimum audio input length per request is **1 second**
   * * Maximum audio input length per request is **120 seconds**
   * * Minimum total effective speech length (excluding silence and other non-speech frames) for
   * creating a voiceprint is **20 seconds**
   * This limitation can be disabled by setting ignoreMinLength to **true**.
   *
   * * Maximum total audio input length allowed for creating a voiceprint is **300 seconds**
   * * Minimum audio Signal-to-noise ratio (SNR) is **0dB**
   * @summary Enroll Profile
   * @param audioData Binary audio file. Supported formats are audio/wav; codecs=audio/pcm. Supports
   * audio up to 5MB.
   * @param profileId Unique identifier for profile id (guid).
   * @param [options] The optional parameters
   * @returns Promise<Models.TextIndependentCreateEnrollmentResponse>
   */
  createEnrollment(audioData: msRest.HttpRequestBody, profileId: string, options?: Models.TextIndependentCreateEnrollmentOptionalParams): Promise<Models.TextIndependentCreateEnrollmentResponse>;
  /**
   * @param audioData Binary audio file. Supported formats are audio/wav; codecs=audio/pcm. Supports
   * audio up to 5MB.
   * @param profileId Unique identifier for profile id (guid).
   * @param callback The callback
   */
  createEnrollment(audioData: msRest.HttpRequestBody, profileId: string, callback: msRest.ServiceCallback<Models.TiEnrollmentInfo>): void;
  /**
   * @param audioData Binary audio file. Supported formats are audio/wav; codecs=audio/pcm. Supports
   * audio up to 5MB.
   * @param profileId Unique identifier for profile id (guid).
   * @param options The optional parameters
   * @param callback The callback
   */
  createEnrollment(audioData: msRest.HttpRequestBody, profileId: string, options: Models.TextIndependentCreateEnrollmentOptionalParams, callback: msRest.ServiceCallback<Models.TiEnrollmentInfo>): void;
  createEnrollment(audioData: msRest.HttpRequestBody, profileId: string, options?: Models.TextIndependentCreateEnrollmentOptionalParams | msRest.ServiceCallback<Models.TiEnrollmentInfo>, callback?: msRest.ServiceCallback<Models.TiEnrollmentInfo>): Promise<Models.TextIndependentCreateEnrollmentResponse> {
    return this.client.sendOperationRequest(
      {
        audioData,
        profileId,
        options
      },
      createEnrollmentOperationSpec,
      callback) as Promise<Models.TextIndependentCreateEnrollmentResponse>;
  }

  /**
   * Identifies who is speaking in input audio among a list of candidate profiles.
   *
   * Limitations:
   * * Minimum audio input length is **1 second**
   * * Maximum audio input length is **120 seconds**
   * * Minimum candidate speakers count is **1**
   * * Maximum candidate speakers count is **50**
   * * Minimum effective speech length (excluding silence and other non-speech frames) is **4
   * seconds**
   * This limitation can be disabled by setting "ignoreMinLength" to **true**.
   *
   * * Minimum audio Signal-to-noise ratio (SNR) is **0dB**
   * @summary Identify Single Speaker Profile
   * @param profileIds Comma-delimited profile IDs. Maximum supported number is 50 IDs.
   * @param audioData Binary audio file. Supported formats are audio/wav; codecs=audio/pcm. Supports
   * audio up to 5MB.
   * @param [options] The optional parameters
   * @returns Promise<Models.TextIndependentIdentifySingleSpeakerResponse>
   */
  identifySingleSpeaker(profileIds: string, audioData: msRest.HttpRequestBody, options?: Models.TextIndependentIdentifySingleSpeakerOptionalParams): Promise<Models.TextIndependentIdentifySingleSpeakerResponse>;
  /**
   * @param profileIds Comma-delimited profile IDs. Maximum supported number is 50 IDs.
   * @param audioData Binary audio file. Supported formats are audio/wav; codecs=audio/pcm. Supports
   * audio up to 5MB.
   * @param callback The callback
   */
  identifySingleSpeaker(profileIds: string, audioData: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.IdentifiedSingleSpeakerInfo>): void;
  /**
   * @param profileIds Comma-delimited profile IDs. Maximum supported number is 50 IDs.
   * @param audioData Binary audio file. Supported formats are audio/wav; codecs=audio/pcm. Supports
   * audio up to 5MB.
   * @param options The optional parameters
   * @param callback The callback
   */
  identifySingleSpeaker(profileIds: string, audioData: msRest.HttpRequestBody, options: Models.TextIndependentIdentifySingleSpeakerOptionalParams, callback: msRest.ServiceCallback<Models.IdentifiedSingleSpeakerInfo>): void;
  identifySingleSpeaker(profileIds: string, audioData: msRest.HttpRequestBody, options?: Models.TextIndependentIdentifySingleSpeakerOptionalParams | msRest.ServiceCallback<Models.IdentifiedSingleSpeakerInfo>, callback?: msRest.ServiceCallback<Models.IdentifiedSingleSpeakerInfo>): Promise<Models.TextIndependentIdentifySingleSpeakerResponse> {
    return this.client.sendOperationRequest(
      {
        profileIds,
        audioData,
        options
      },
      identifySingleSpeakerOperationSpec,
      callback) as Promise<Models.TextIndependentIdentifySingleSpeakerResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const createProfileOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "text-independent/profiles",
  urlParameters: [
    Parameters.endpoint
  ],
  requestBody: {
    parameterPath: [
      "options",
      "profileInfo"
    ],
    mapper: Mappers.LocaleInfo
  },
  responses: {
    201: {
      bodyMapper: Mappers.TiProfileInfo,
      headersMapper: Mappers.TextIndependentCreateProfileHeaders
    },
    400: {
      bodyMapper: Mappers.ErrorModel,
      headersMapper: Mappers.TextIndependentCreateProfileHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorModel,
      headersMapper: Mappers.TextIndependentCreateProfileHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorModel,
      headersMapper: Mappers.TextIndependentCreateProfileHeaders
    },
    415: {
      bodyMapper: Mappers.ErrorModel,
      headersMapper: Mappers.TextIndependentCreateProfileHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorModel,
      headersMapper: Mappers.TextIndependentCreateProfileHeaders
    },
    500: {
      bodyMapper: Mappers.ErrorModel,
      headersMapper: Mappers.TextIndependentCreateProfileHeaders
    },
    default: {}
  },
  serializer
};

const listProfilesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "text-independent/profiles",
  urlParameters: [
    Parameters.endpoint
  ],
  queryParameters: [
    Parameters.top
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TiProfileInfoList
    },
    400: {
      bodyMapper: Mappers.ErrorModel
    },
    401: {
      bodyMapper: Mappers.ErrorModel
    },
    429: {
      bodyMapper: Mappers.ErrorModel
    },
    500: {
      bodyMapper: Mappers.ErrorModel
    },
    default: {}
  },
  serializer
};

const getProfileOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "text-independent/profiles/{profileId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.profileId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TiProfileInfo
    },
    401: {
      bodyMapper: Mappers.ErrorModel
    },
    404: {
      bodyMapper: Mappers.ErrorModel
    },
    429: {
      bodyMapper: Mappers.ErrorModel
    },
    500: {
      bodyMapper: Mappers.ErrorModel
    },
    default: {}
  },
  serializer
};

const deleteProfileOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "text-independent/profiles/{profileId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.profileId
  ],
  responses: {
    204: {},
    401: {
      bodyMapper: Mappers.ErrorModel
    },
    429: {
      bodyMapper: Mappers.ErrorModel
    },
    500: {
      bodyMapper: Mappers.ErrorModel
    },
    default: {}
  },
  serializer
};

const resetProfileOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "text-independent/profiles/{profileId}/reset",
  urlParameters: [
    Parameters.endpoint,
    Parameters.profileId
  ],
  responses: {
    204: {},
    401: {
      bodyMapper: Mappers.ErrorModel
    },
    404: {
      bodyMapper: Mappers.ErrorModel
    },
    429: {
      bodyMapper: Mappers.ErrorModel
    },
    500: {
      bodyMapper: Mappers.ErrorModel
    },
    default: {}
  },
  serializer
};

const createEnrollmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "text-independent/profiles/{profileId}/enrollments",
  urlParameters: [
    Parameters.endpoint,
    Parameters.profileId
  ],
  queryParameters: [
    Parameters.ignoreMinLength
  ],
  requestBody: {
    parameterPath: "audioData",
    mapper: {
      required: true,
      serializedName: "audioData",
      type: {
        name: "Stream"
      }
    }
  },
  contentType: "audio/wav; codecs=audio/pcm",
  responses: {
    201: {
      bodyMapper: Mappers.TiEnrollmentInfo
    },
    400: {
      bodyMapper: Mappers.ErrorModel
    },
    401: {
      bodyMapper: Mappers.ErrorModel
    },
    403: {
      bodyMapper: Mappers.ErrorModel
    },
    404: {
      bodyMapper: Mappers.ErrorModel
    },
    409: {
      bodyMapper: Mappers.ErrorModel
    },
    415: {
      bodyMapper: Mappers.ErrorModel
    },
    429: {
      bodyMapper: Mappers.ErrorModel
    },
    500: {
      bodyMapper: Mappers.ErrorModel
    },
    default: {}
  },
  serializer
};

const identifySingleSpeakerOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "text-independent/profiles/identifySingleSpeaker",
  urlParameters: [
    Parameters.endpoint
  ],
  queryParameters: [
    Parameters.profileIds,
    Parameters.ignoreMinLength
  ],
  requestBody: {
    parameterPath: "audioData",
    mapper: {
      required: true,
      serializedName: "audioData",
      type: {
        name: "Stream"
      }
    }
  },
  contentType: "audio/wav; codecs=audio/pcm",
  responses: {
    200: {
      bodyMapper: Mappers.IdentifiedSingleSpeakerInfo
    },
    400: {
      bodyMapper: Mappers.ErrorModel
    },
    401: {
      bodyMapper: Mappers.ErrorModel
    },
    415: {
      bodyMapper: Mappers.ErrorModel
    },
    429: {
      bodyMapper: Mappers.ErrorModel
    },
    500: {
      bodyMapper: Mappers.ErrorModel
    },
    default: {}
  },
  serializer
};
