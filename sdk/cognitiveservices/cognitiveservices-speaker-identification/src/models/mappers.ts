/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as msRest from "@azure/ms-rest-js";


export const LocaleInfo: msRest.CompositeMapper = {
  serializedName: "LocaleInfo",
  type: {
    name: "Composite",
    className: "LocaleInfo",
    modelProperties: {
      locale: {
        required: true,
        serializedName: "locale",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TiProfileInfoList: msRest.CompositeMapper = {
  serializedName: "TiProfileInfoList",
  type: {
    name: "Composite",
    className: "TiProfileInfoList",
    modelProperties: {
      profiles: {
        serializedName: "profiles",
        type: {
          name: "Object"
        }
      },
      nextLink: {
        serializedName: "@nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TiProfileInfo: msRest.CompositeMapper = {
  serializedName: "TiProfileInfo",
  type: {
    name: "Composite",
    className: "TiProfileInfo",
    modelProperties: {
      profileId: {
        serializedName: "profileId",
        type: {
          name: "Uuid"
        }
      },
      locale: {
        serializedName: "locale",
        type: {
          name: "String"
        }
      },
      enrollmentStatus: {
        serializedName: "enrollmentStatus",
        type: {
          name: "Enum",
          allowedValues: [
            "Enrolling",
            "Training",
            "Enrolled"
          ]
        }
      },
      createdDateTime: {
        serializedName: "createdDateTime",
        type: {
          name: "String"
        }
      },
      lastUpdatedDateTime: {
        serializedName: "lastUpdatedDateTime",
        type: {
          name: "String"
        }
      },
      enrollmentsCount: {
        serializedName: "enrollmentsCount",
        type: {
          name: "Number"
        }
      },
      enrollmentsLength: {
        serializedName: "enrollmentsLength",
        type: {
          name: "Number"
        }
      },
      enrollmentsSpeechLength: {
        serializedName: "enrollmentsSpeechLength",
        type: {
          name: "Number"
        }
      },
      remainingEnrollmentsSpeechLength: {
        serializedName: "remainingEnrollmentsSpeechLength",
        type: {
          name: "Number"
        }
      },
      modelVersion: {
        serializedName: "modelVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TiEnrollmentInfo: msRest.CompositeMapper = {
  serializedName: "TiEnrollmentInfo",
  type: {
    name: "Composite",
    className: "TiEnrollmentInfo",
    modelProperties: {
      profileId: {
        serializedName: "profileId",
        type: {
          name: "Uuid"
        }
      },
      enrollmentStatus: {
        serializedName: "enrollmentStatus",
        type: {
          name: "Enum",
          allowedValues: [
            "Enrolling",
            "Training",
            "Enrolled"
          ]
        }
      },
      enrollmentsCount: {
        serializedName: "enrollmentsCount",
        type: {
          name: "Number"
        }
      },
      enrollmentsLength: {
        serializedName: "enrollmentsLength",
        type: {
          name: "Number"
        }
      },
      enrollmentsSpeechLength: {
        serializedName: "enrollmentsSpeechLength",
        type: {
          name: "Number"
        }
      },
      remainingEnrollmentsSpeechLength: {
        serializedName: "remainingEnrollmentsSpeechLength",
        type: {
          name: "Number"
        }
      },
      audioLength: {
        serializedName: "audioLength",
        type: {
          name: "Number"
        }
      },
      audioSpeechLength: {
        serializedName: "audioSpeechLength",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const IdentifyInfo: msRest.CompositeMapper = {
  serializedName: "IdentifyInfo",
  type: {
    name: "Composite",
    className: "IdentifyInfo",
    modelProperties: {
      profileId: {
        nullable: false,
        serializedName: "profileId",
        constraints: {
          Pattern: /^([0-9a-fA-F]){8}-?([0-9a-fA-F]){4}-?([0-9a-fA-F]){4}-?([0-9a-fA-F]){4}-?([0-9a-fA-F]){12}$/
        },
        type: {
          name: "Uuid"
        }
      },
      score: {
        serializedName: "score",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const IdentifiedSingleSpeakerInfo: msRest.CompositeMapper = {
  serializedName: "IdentifiedSingleSpeakerInfo",
  type: {
    name: "Composite",
    className: "IdentifiedSingleSpeakerInfo",
    modelProperties: {
      identifiedProfile: {
        serializedName: "identifiedProfile",
        type: {
          name: "Composite",
          className: "IdentifyInfo"
        }
      },
      profilesRanking: {
        serializedName: "profilesRanking",
        type: {
          name: "Object"
        }
      }
    }
  }
};

export const ErrorError: msRest.CompositeMapper = {
  serializedName: "Error_error",
  type: {
    name: "Composite",
    className: "ErrorError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorModel: msRest.CompositeMapper = {
  serializedName: "Error",
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      error: {
        required: true,
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorError"
        }
      }
    }
  }
};

export const TextIndependentCreateProfileHeaders: msRest.CompositeMapper = {
  serializedName: "textindependent-createprofile-headers",
  type: {
    name: "Composite",
    className: "TextIndependentCreateProfileHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};
