/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/runtimeMappers";
import * as Parameters from "../models/parameters";
import { QnAMakerRuntimeClientContext } from "../qnAMakerRuntimeClientContext";

/** Class representing a Runtime. */
export class Runtime {
  private readonly client: QnAMakerRuntimeClientContext;

  /**
   * Create a Runtime.
   * @param {QnAMakerRuntimeClientContext} client Reference to the service client.
   */
  constructor(client: QnAMakerRuntimeClientContext) {
    this.client = client;
  }

  /**
   * @summary GenerateAnswer call to query the knowledgebase.
   * @param kbId Knowledgebase id.
   * @param generateAnswerPayload Post body of the request.
   * @param [options] The optional parameters
   * @returns Promise<Models.RuntimeGenerateAnswerResponse>
   */
  generateAnswer(kbId: string, generateAnswerPayload: Models.QueryDTO, options?: msRest.RequestOptionsBase): Promise<Models.RuntimeGenerateAnswerResponse>;
  /**
   * @param kbId Knowledgebase id.
   * @param generateAnswerPayload Post body of the request.
   * @param callback The callback
   */
  generateAnswer(kbId: string, generateAnswerPayload: Models.QueryDTO, callback: msRest.ServiceCallback<Models.QnASearchResultList>): void;
  /**
   * @param kbId Knowledgebase id.
   * @param generateAnswerPayload Post body of the request.
   * @param options The optional parameters
   * @param callback The callback
   */
  generateAnswer(kbId: string, generateAnswerPayload: Models.QueryDTO, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.QnASearchResultList>): void;
  generateAnswer(kbId: string, generateAnswerPayload: Models.QueryDTO, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.QnASearchResultList>, callback?: msRest.ServiceCallback<Models.QnASearchResultList>): Promise<Models.RuntimeGenerateAnswerResponse> {
    return this.client.sendOperationRequest(
      {
        kbId,
        generateAnswerPayload,
        options
      },
      generateAnswerOperationSpec,
      callback) as Promise<Models.RuntimeGenerateAnswerResponse>;
  }

  /**
   * @summary Train call to add suggestions to the knowledgebase.
   * @param kbId Knowledgebase id.
   * @param trainPayload Post body of the request.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  train(kbId: string, trainPayload: Models.FeedbackRecordsDTO, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param kbId Knowledgebase id.
   * @param trainPayload Post body of the request.
   * @param callback The callback
   */
  train(kbId: string, trainPayload: Models.FeedbackRecordsDTO, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param kbId Knowledgebase id.
   * @param trainPayload Post body of the request.
   * @param options The optional parameters
   * @param callback The callback
   */
  train(kbId: string, trainPayload: Models.FeedbackRecordsDTO, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  train(kbId: string, trainPayload: Models.FeedbackRecordsDTO, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        kbId,
        trainPayload,
        options
      },
      trainOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const generateAnswerOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "knowledgebases/{kbId}/generateAnswer",
  urlParameters: [
    Parameters.runtimeEndpoint,
    Parameters.kbId
  ],
  requestBody: {
    parameterPath: "generateAnswerPayload",
    mapper: {
      ...Mappers.QueryDTO,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.QnASearchResultList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const trainOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "knowledgebases/{kbId}/train",
  urlParameters: [
    Parameters.runtimeEndpoint,
    Parameters.kbId
  ],
  requestBody: {
    parameterPath: "trainPayload",
    mapper: {
      ...Mappers.FeedbackRecordsDTO,
      required: true
    }
  },
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
