/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as msRest from "@azure/ms-rest-js";


export const CreateKbInputDTO: msRest.CompositeMapper = {
  serializedName: "CreateKbInputDTO",
  type: {
    name: "Composite",
    className: "CreateKbInputDTO",
    modelProperties: {
      qnaList: {
        serializedName: "qnaList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QnADTO"
            }
          }
        }
      },
      urls: {
        serializedName: "urls",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      files: {
        serializedName: "files",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FileDTO"
            }
          }
        }
      }
    }
  }
};

export const UpdateKbOperationDTOAdd: msRest.CompositeMapper = {
  serializedName: "UpdateKbOperationDTO_add",
  type: {
    name: "Composite",
    className: "UpdateKbOperationDTOAdd",
    modelProperties: {
      ...CreateKbInputDTO.type.modelProperties
    }
  }
};

export const DeleteKbContentsDTO: msRest.CompositeMapper = {
  serializedName: "DeleteKbContentsDTO",
  type: {
    name: "Composite",
    className: "DeleteKbContentsDTO",
    modelProperties: {
      ids: {
        serializedName: "ids",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      sources: {
        serializedName: "sources",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const UpdateKbOperationDTODelete: msRest.CompositeMapper = {
  serializedName: "UpdateKbOperationDTO_delete",
  type: {
    name: "Composite",
    className: "UpdateKbOperationDTODelete",
    modelProperties: {
      ...DeleteKbContentsDTO.type.modelProperties
    }
  }
};

export const UpdateKbContentsDTO: msRest.CompositeMapper = {
  serializedName: "UpdateKbContentsDTO",
  type: {
    name: "Composite",
    className: "UpdateKbContentsDTO",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      qnaList: {
        serializedName: "qnaList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UpdateQnaDTO"
            }
          }
        }
      },
      urls: {
        serializedName: "urls",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      defaultAnswer: {
        serializedName: "defaultAnswer",
        constraints: {
          MaxLength: 300,
          MinLength: 1
        },
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateKbOperationDTOUpdate: msRest.CompositeMapper = {
  serializedName: "UpdateKbOperationDTO_update",
  type: {
    name: "Composite",
    className: "UpdateKbOperationDTOUpdate",
    modelProperties: {
      ...UpdateKbContentsDTO.type.modelProperties
    }
  }
};

export const UpdateKbOperationDTO: msRest.CompositeMapper = {
  serializedName: "UpdateKbOperationDTO",
  type: {
    name: "Composite",
    className: "UpdateKbOperationDTO",
    modelProperties: {
      add: {
        serializedName: "add",
        type: {
          name: "Composite",
          className: "UpdateKbOperationDTOAdd"
        }
      },
      deleteProperty: {
        serializedName: "delete",
        type: {
          name: "Composite",
          className: "UpdateKbOperationDTODelete"
        }
      },
      update: {
        serializedName: "update",
        type: {
          name: "Composite",
          className: "UpdateKbOperationDTOUpdate"
        }
      },
      enableHierarchicalExtraction: {
        serializedName: "enableHierarchicalExtraction",
        type: {
          name: "Boolean"
        }
      },
      defaultAnswerUsedForExtraction: {
        serializedName: "defaultAnswerUsedForExtraction",
        constraints: {
          MaxLength: 300,
          MinLength: 1
        },
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateQuestionsDTO: msRest.CompositeMapper = {
  serializedName: "UpdateQuestionsDTO",
  type: {
    name: "Composite",
    className: "UpdateQuestionsDTO",
    modelProperties: {
      add: {
        serializedName: "add",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      deleteProperty: {
        serializedName: "delete",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const UpdateQnaDTOQuestions: msRest.CompositeMapper = {
  serializedName: "UpdateQnaDTO_questions",
  type: {
    name: "Composite",
    className: "UpdateQnaDTOQuestions",
    modelProperties: {
      ...UpdateQuestionsDTO.type.modelProperties
    }
  }
};

export const UpdateMetadataDTO: msRest.CompositeMapper = {
  serializedName: "UpdateMetadataDTO",
  type: {
    name: "Composite",
    className: "UpdateMetadataDTO",
    modelProperties: {
      deleteProperty: {
        serializedName: "delete",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataDTO"
            }
          }
        }
      },
      add: {
        serializedName: "add",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataDTO"
            }
          }
        }
      }
    }
  }
};

export const UpdateQnaDTOMetadata: msRest.CompositeMapper = {
  serializedName: "UpdateQnaDTO_metadata",
  type: {
    name: "Composite",
    className: "UpdateQnaDTOMetadata",
    modelProperties: {
      ...UpdateMetadataDTO.type.modelProperties
    }
  }
};

export const UpdateContextDTO: msRest.CompositeMapper = {
  serializedName: "UpdateContextDTO",
  type: {
    name: "Composite",
    className: "UpdateContextDTO",
    modelProperties: {
      promptsToDelete: {
        serializedName: "promptsToDelete",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      promptsToAdd: {
        serializedName: "promptsToAdd",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PromptDTO"
            }
          }
        }
      },
      isContextOnly: {
        serializedName: "isContextOnly",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const UpdateQnaDTOContext: msRest.CompositeMapper = {
  serializedName: "UpdateQnaDTO_context",
  type: {
    name: "Composite",
    className: "UpdateQnaDTOContext",
    modelProperties: {
      ...UpdateContextDTO.type.modelProperties
    }
  }
};

export const UpdateQnaDTO: msRest.CompositeMapper = {
  serializedName: "UpdateQnaDTO",
  type: {
    name: "Composite",
    className: "UpdateQnaDTO",
    modelProperties: {
      id: {
        serializedName: "id",
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      },
      answer: {
        serializedName: "answer",
        type: {
          name: "String"
        }
      },
      source: {
        serializedName: "source",
        constraints: {
          MaxLength: 300
        },
        type: {
          name: "String"
        }
      },
      questions: {
        serializedName: "questions",
        type: {
          name: "Composite",
          className: "UpdateQnaDTOQuestions"
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Composite",
          className: "UpdateQnaDTOMetadata"
        }
      },
      context: {
        serializedName: "context",
        type: {
          name: "Composite",
          className: "UpdateQnaDTOContext"
        }
      }
    }
  }
};

export const MetadataDTO: msRest.CompositeMapper = {
  serializedName: "MetadataDTO",
  type: {
    name: "Composite",
    className: "MetadataDTO",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        constraints: {
          MaxLength: 100,
          MinLength: 1
        },
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "value",
        constraints: {
          MaxLength: 500,
          MinLength: 1
        },
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QnADTO: msRest.CompositeMapper = {
  serializedName: "QnADTO",
  type: {
    name: "Composite",
    className: "QnADTO",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "Number"
        }
      },
      answer: {
        required: true,
        serializedName: "answer",
        constraints: {
          MaxLength: 25000,
          MinLength: 1
        },
        type: {
          name: "String"
        }
      },
      source: {
        serializedName: "source",
        constraints: {
          MaxLength: 300
        },
        type: {
          name: "String"
        }
      },
      questions: {
        required: true,
        serializedName: "questions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataDTO"
            }
          }
        }
      },
      context: {
        serializedName: "context",
        type: {
          name: "Composite",
          className: "QnADTOContext"
        }
      },
      lastUpdatedTimestamp: {
        serializedName: "lastUpdatedTimestamp",
        constraints: {
          MaxLength: 300
        },
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PromptDTOQna: msRest.CompositeMapper = {
  serializedName: "PromptDTO_qna",
  type: {
    name: "Composite",
    className: "PromptDTOQna",
    modelProperties: {
      ...QnADTO.type.modelProperties
    }
  }
};

export const PromptDTO: msRest.CompositeMapper = {
  serializedName: "PromptDTO",
  type: {
    name: "Composite",
    className: "PromptDTO",
    modelProperties: {
      displayOrder: {
        serializedName: "displayOrder",
        type: {
          name: "Number"
        }
      },
      qnaId: {
        serializedName: "qnaId",
        type: {
          name: "Number"
        }
      },
      qna: {
        serializedName: "qna",
        type: {
          name: "Composite",
          className: "PromptDTOQna"
        }
      },
      displayText: {
        serializedName: "displayText",
        constraints: {
          MaxLength: 200
        },
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContextDTO: msRest.CompositeMapper = {
  serializedName: "ContextDTO",
  type: {
    name: "Composite",
    className: "ContextDTO",
    modelProperties: {
      isContextOnly: {
        serializedName: "isContextOnly",
        type: {
          name: "Boolean"
        }
      },
      prompts: {
        serializedName: "prompts",
        constraints: {
          MaxItems: 20
        },
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PromptDTO"
            }
          }
        }
      }
    }
  }
};

export const QnADTOContext: msRest.CompositeMapper = {
  serializedName: "QnADTO_context",
  type: {
    name: "Composite",
    className: "QnADTOContext",
    modelProperties: {
      ...ContextDTO.type.modelProperties
    }
  }
};

export const FileDTO: msRest.CompositeMapper = {
  serializedName: "FileDTO",
  type: {
    name: "Composite",
    className: "FileDTO",
    modelProperties: {
      fileName: {
        required: true,
        serializedName: "fileName",
        constraints: {
          MaxLength: 200,
          MinLength: 1
        },
        type: {
          name: "String"
        }
      },
      fileUri: {
        required: true,
        serializedName: "fileUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QnADocumentsDTO: msRest.CompositeMapper = {
  serializedName: "QnADocumentsDTO",
  type: {
    name: "Composite",
    className: "QnADocumentsDTO",
    modelProperties: {
      qnaDocuments: {
        serializedName: "qnaDocuments",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QnADTO"
            }
          }
        }
      }
    }
  }
};

export const CreateKbDTO: msRest.CompositeMapper = {
  serializedName: "CreateKbDTO",
  type: {
    name: "Composite",
    className: "CreateKbDTO",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        constraints: {
          MaxLength: 100,
          MinLength: 1
        },
        type: {
          name: "String"
        }
      },
      qnaList: {
        serializedName: "qnaList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QnADTO"
            }
          }
        }
      },
      urls: {
        serializedName: "urls",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      files: {
        serializedName: "files",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FileDTO"
            }
          }
        }
      },
      enableHierarchicalExtraction: {
        serializedName: "enableHierarchicalExtraction",
        type: {
          name: "Boolean"
        }
      },
      defaultAnswerUsedForExtraction: {
        serializedName: "defaultAnswerUsedForExtraction",
        constraints: {
          MaxLength: 300,
          MinLength: 1
        },
        type: {
          name: "String"
        }
      },
      language: {
        serializedName: "language",
        constraints: {
          MaxLength: 100,
          MinLength: 1
        },
        type: {
          name: "String"
        }
      },
      enableMultipleLanguages: {
        serializedName: "enableMultipleLanguages",
        type: {
          name: "Boolean"
        }
      },
      defaultAnswer: {
        serializedName: "defaultAnswer",
        constraints: {
          MaxLength: 300,
          MinLength: 1
        },
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReplaceKbDTO: msRest.CompositeMapper = {
  serializedName: "ReplaceKbDTO",
  type: {
    name: "Composite",
    className: "ReplaceKbDTO",
    modelProperties: {
      qnAList: {
        required: true,
        serializedName: "qnAList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QnADTO"
            }
          }
        }
      }
    }
  }
};

export const ErrorModel: msRest.CompositeMapper = {
  serializedName: "Error",
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      code: {
        required: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorModel"
            }
          }
        }
      },
      innerError: {
        serializedName: "innerError",
        type: {
          name: "Composite",
          className: "InnerErrorModel"
        }
      }
    }
  }
};

export const ErrorResponseError: msRest.CompositeMapper = {
  serializedName: "ErrorResponse_error",
  type: {
    name: "Composite",
    className: "ErrorResponseError",
    modelProperties: {
      ...ErrorModel.type.modelProperties
    }
  }
};

export const ErrorResponse: msRest.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorResponseError"
        }
      }
    }
  }
};

export const InnerErrorModel: msRest.CompositeMapper = {
  serializedName: "InnerErrorModel",
  type: {
    name: "Composite",
    className: "InnerErrorModel",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      innerError: {
        serializedName: "innerError",
        type: {
          name: "Composite",
          className: "InnerErrorModel"
        }
      }
    }
  }
};

export const Operation: msRest.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      operationState: {
        serializedName: "operationState",
        type: {
          name: "String"
        }
      },
      createdTimestamp: {
        serializedName: "createdTimestamp",
        type: {
          name: "String"
        }
      },
      lastActionTimestamp: {
        serializedName: "lastActionTimestamp",
        type: {
          name: "String"
        }
      },
      resourceLocation: {
        serializedName: "resourceLocation",
        type: {
          name: "String"
        }
      },
      userId: {
        serializedName: "userId",
        type: {
          name: "String"
        }
      },
      operationId: {
        serializedName: "operationId",
        type: {
          name: "String"
        }
      },
      errorResponse: {
        serializedName: "errorResponse",
        type: {
          name: "Composite",
          className: "ErrorResponse"
        }
      }
    }
  }
};

export const KnowledgebaseDTO: msRest.CompositeMapper = {
  serializedName: "KnowledgebaseDTO",
  type: {
    name: "Composite",
    className: "KnowledgebaseDTO",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      hostName: {
        serializedName: "hostName",
        type: {
          name: "String"
        }
      },
      lastAccessedTimestamp: {
        serializedName: "lastAccessedTimestamp",
        type: {
          name: "String"
        }
      },
      lastChangedTimestamp: {
        serializedName: "lastChangedTimestamp",
        type: {
          name: "String"
        }
      },
      lastPublishedTimestamp: {
        serializedName: "lastPublishedTimestamp",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      userId: {
        serializedName: "userId",
        type: {
          name: "String"
        }
      },
      urls: {
        serializedName: "urls",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      sources: {
        serializedName: "sources",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const KnowledgebasesDTO: msRest.CompositeMapper = {
  serializedName: "KnowledgebasesDTO",
  type: {
    name: "Composite",
    className: "KnowledgebasesDTO",
    modelProperties: {
      knowledgebases: {
        serializedName: "knowledgebases",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "KnowledgebaseDTO"
            }
          }
        }
      }
    }
  }
};

export const ActiveLearningSettingsDTO: msRest.CompositeMapper = {
  serializedName: "ActiveLearningSettingsDTO",
  type: {
    name: "Composite",
    className: "ActiveLearningSettingsDTO",
    modelProperties: {
      enable: {
        serializedName: "enable",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EndpointSettingsDTOActiveLearning: msRest.CompositeMapper = {
  serializedName: "EndpointSettingsDTO_activeLearning",
  type: {
    name: "Composite",
    className: "EndpointSettingsDTOActiveLearning",
    modelProperties: {
      ...ActiveLearningSettingsDTO.type.modelProperties
    }
  }
};

export const EndpointSettingsDTO: msRest.CompositeMapper = {
  serializedName: "EndpointSettingsDTO",
  type: {
    name: "Composite",
    className: "EndpointSettingsDTO",
    modelProperties: {
      activeLearning: {
        serializedName: "activeLearning",
        type: {
          name: "Composite",
          className: "EndpointSettingsDTOActiveLearning"
        }
      }
    }
  }
};

export const AlterationsDTO: msRest.CompositeMapper = {
  serializedName: "AlterationsDTO",
  type: {
    name: "Composite",
    className: "AlterationsDTO",
    modelProperties: {
      alterations: {
        required: true,
        serializedName: "alterations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const WordAlterationsDTO: msRest.CompositeMapper = {
  serializedName: "WordAlterationsDTO",
  type: {
    name: "Composite",
    className: "WordAlterationsDTO",
    modelProperties: {
      wordAlterations: {
        required: true,
        serializedName: "wordAlterations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AlterationsDTO"
            }
          }
        }
      }
    }
  }
};

export const EndpointKeysDTO: msRest.CompositeMapper = {
  serializedName: "EndpointKeysDTO",
  type: {
    name: "Composite",
    className: "EndpointKeysDTO",
    modelProperties: {
      primaryEndpointKey: {
        serializedName: "primaryEndpointKey",
        type: {
          name: "String"
        }
      },
      secondaryEndpointKey: {
        serializedName: "secondaryEndpointKey",
        type: {
          name: "String"
        }
      },
      installedVersion: {
        serializedName: "installedVersion",
        type: {
          name: "String"
        }
      },
      lastStableVersion: {
        serializedName: "lastStableVersion",
        type: {
          name: "String"
        }
      },
      language: {
        serializedName: "language",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QueryContextDTO: msRest.CompositeMapper = {
  serializedName: "QueryContextDTO",
  type: {
    name: "Composite",
    className: "QueryContextDTO",
    modelProperties: {
      previousQnaId: {
        serializedName: "previousQnaId",
        type: {
          name: "Number"
        }
      },
      previousUserQuery: {
        serializedName: "previousUserQuery",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QueryDTOContext: msRest.CompositeMapper = {
  serializedName: "QueryDTO_context",
  type: {
    name: "Composite",
    className: "QueryDTOContext",
    modelProperties: {
      ...QueryContextDTO.type.modelProperties
    }
  }
};

export const AnswerSpanRequestDTO: msRest.CompositeMapper = {
  serializedName: "AnswerSpanRequestDTO",
  type: {
    name: "Composite",
    className: "AnswerSpanRequestDTO",
    modelProperties: {
      enable: {
        serializedName: "enable",
        type: {
          name: "Boolean"
        }
      },
      scoreThreshold: {
        serializedName: "scoreThreshold",
        type: {
          name: "Number"
        }
      },
      topAnswersWithSpan: {
        serializedName: "topAnswersWithSpan",
        constraints: {
          InclusiveMaximum: 10,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const QueryDTOAnswerSpanRequest: msRest.CompositeMapper = {
  serializedName: "QueryDTO_answerSpanRequest",
  type: {
    name: "Composite",
    className: "QueryDTOAnswerSpanRequest",
    modelProperties: {
      ...AnswerSpanRequestDTO.type.modelProperties
    }
  }
};

export const QueryDTO: msRest.CompositeMapper = {
  serializedName: "QueryDTO",
  type: {
    name: "Composite",
    className: "QueryDTO",
    modelProperties: {
      qnaId: {
        serializedName: "qnaId",
        type: {
          name: "String"
        }
      },
      question: {
        serializedName: "question",
        type: {
          name: "String"
        }
      },
      top: {
        serializedName: "top",
        type: {
          name: "Number"
        }
      },
      userId: {
        serializedName: "userId",
        type: {
          name: "String"
        }
      },
      isTest: {
        serializedName: "isTest",
        type: {
          name: "Boolean"
        }
      },
      scoreThreshold: {
        serializedName: "scoreThreshold",
        type: {
          name: "Number"
        }
      },
      context: {
        serializedName: "context",
        type: {
          name: "Composite",
          className: "QueryDTOContext"
        }
      },
      rankerType: {
        serializedName: "rankerType",
        type: {
          name: "String"
        }
      },
      strictFilters: {
        serializedName: "strictFilters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataDTO"
            }
          }
        }
      },
      strictFiltersCompoundOperationType: {
        serializedName: "strictFiltersCompoundOperationType",
        type: {
          name: "String"
        }
      },
      answerSpanRequest: {
        serializedName: "answerSpanRequest",
        type: {
          name: "Composite",
          className: "QueryDTOAnswerSpanRequest"
        }
      }
    }
  }
};

export const QnASearchResultContext: msRest.CompositeMapper = {
  serializedName: "QnASearchResult_context",
  type: {
    name: "Composite",
    className: "QnASearchResultContext",
    modelProperties: {
      ...ContextDTO.type.modelProperties
    }
  }
};

export const AnswerSpanResponseDTO: msRest.CompositeMapper = {
  serializedName: "AnswerSpanResponseDTO",
  type: {
    name: "Composite",
    className: "AnswerSpanResponseDTO",
    modelProperties: {
      text: {
        serializedName: "text",
        type: {
          name: "String"
        }
      },
      score: {
        serializedName: "score",
        type: {
          name: "Number"
        }
      },
      startIndex: {
        serializedName: "startIndex",
        type: {
          name: "Number"
        }
      },
      endIndex: {
        serializedName: "endIndex",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const QnASearchResultAnswerSpan: msRest.CompositeMapper = {
  serializedName: "QnASearchResult_answerSpan",
  type: {
    name: "Composite",
    className: "QnASearchResultAnswerSpan",
    modelProperties: {
      ...AnswerSpanResponseDTO.type.modelProperties
    }
  }
};

export const QnASearchResult: msRest.CompositeMapper = {
  serializedName: "QnASearchResult",
  type: {
    name: "Composite",
    className: "QnASearchResult",
    modelProperties: {
      questions: {
        serializedName: "questions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      answer: {
        serializedName: "answer",
        type: {
          name: "String"
        }
      },
      score: {
        serializedName: "score",
        type: {
          name: "Number"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "Number"
        }
      },
      source: {
        serializedName: "source",
        type: {
          name: "String"
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataDTO"
            }
          }
        }
      },
      context: {
        serializedName: "context",
        type: {
          name: "Composite",
          className: "QnASearchResultContext"
        }
      },
      answerSpan: {
        serializedName: "answerSpan",
        type: {
          name: "Composite",
          className: "QnASearchResultAnswerSpan"
        }
      }
    }
  }
};

export const QnASearchResultList: msRest.CompositeMapper = {
  serializedName: "QnASearchResultList",
  type: {
    name: "Composite",
    className: "QnASearchResultList",
    modelProperties: {
      answers: {
        serializedName: "answers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QnASearchResult"
            }
          }
        }
      }
    }
  }
};

export const FeedbackRecordDTO: msRest.CompositeMapper = {
  serializedName: "FeedbackRecordDTO",
  type: {
    name: "Composite",
    className: "FeedbackRecordDTO",
    modelProperties: {
      userId: {
        serializedName: "userId",
        type: {
          name: "String"
        }
      },
      userQuestion: {
        serializedName: "userQuestion",
        constraints: {
          MaxLength: 1000
        },
        type: {
          name: "String"
        }
      },
      qnaId: {
        serializedName: "qnaId",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const FeedbackRecordsDTO: msRest.CompositeMapper = {
  serializedName: "FeedbackRecordsDTO",
  type: {
    name: "Composite",
    className: "FeedbackRecordsDTO",
    modelProperties: {
      feedbackRecords: {
        serializedName: "feedbackRecords",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FeedbackRecordDTO"
            }
          }
        }
      }
    }
  }
};

export const OperationsGetDetailsHeaders: msRest.CompositeMapper = {
  serializedName: "operations-getdetails-headers",
  type: {
    name: "Composite",
    className: "OperationsGetDetailsHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retryafter",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const KnowledgebaseUpdateHeaders: msRest.CompositeMapper = {
  serializedName: "knowledgebase-update-headers",
  type: {
    name: "Composite",
    className: "KnowledgebaseUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};
