/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */


import * as msRest from "@azure/ms-rest-js";

/**
 * Input to create KB.
 */
export interface CreateKbInputDTO {
  /**
   * List of QNA to be added to the index. Ids are generated by the service and should be omitted.
   */
  qnaList?: QnADTO[];
  /**
   * List of URLs to be added to knowledgebase.
   */
  urls?: string[];
  /**
   * List of files to be added to knowledgebase.
   */
  files?: FileDTO[];
}

/**
 * An instance of CreateKbInputDTO for add operation
 */
export interface UpdateKbOperationDTOAdd extends CreateKbInputDTO {
}

/**
 * PATCH body schema of Delete Operation in UpdateKb
 */
export interface DeleteKbContentsDTO {
  /**
   * List of Qna Ids to be deleted
   */
  ids?: number[];
  /**
   * List of sources to be deleted from knowledgebase.
   */
  sources?: string[];
}

/**
 * An instance of DeleteKbContentsDTO for delete Operation
 */
export interface UpdateKbOperationDTODelete extends DeleteKbContentsDTO {
}

/**
 * PATCH body schema for Update operation in Update Kb
 */
export interface UpdateKbContentsDTO {
  /**
   * Friendly name for the knowledgebase.
   */
  name?: string;
  /**
   * List of Q-A (UpdateQnaDTO) to be added to the knowledgebase.
   */
  qnaList?: UpdateQnaDTO[];
  /**
   * List of existing URLs to be refreshed. The content will be extracted again and re-indexed.
   */
  urls?: string[];
  /**
   * Default answer sent to user if no good match is found in the KB.
   */
  defaultAnswer?: string;
}

/**
 * An instance of UpdateKbContentsDTO for Update Operation
 */
export interface UpdateKbOperationDTOUpdate extends UpdateKbContentsDTO {
}

/**
 * Contains list of QnAs to be updated
 */
export interface UpdateKbOperationDTO {
  /**
   * An instance of CreateKbInputDTO for add operation
   */
  add?: UpdateKbOperationDTOAdd;
  /**
   * An instance of DeleteKbContentsDTO for delete Operation
   */
  deleteProperty?: UpdateKbOperationDTODelete;
  /**
   * An instance of UpdateKbContentsDTO for Update Operation
   */
  update?: UpdateKbOperationDTOUpdate;
  /**
   * Enable hierarchical extraction of Q-A from files and urls. The value set during KB creation
   * will be used if this field is not present.
   */
  enableHierarchicalExtraction?: boolean;
  /**
   * Text string to be used as the answer in any Q-A which has no extracted answer from the
   * document but has a hierarchy. Required when EnableHierarchicalExtraction field is set to True.
   */
  defaultAnswerUsedForExtraction?: string;
}

/**
 * PATCH Body schema for Update Kb which contains list of questions to be added and deleted
 */
export interface UpdateQuestionsDTO {
  /**
   * List of questions to be added
   */
  add?: string[];
  /**
   * List of questions to be deleted.
   */
  deleteProperty?: string[];
}

/**
 * List of questions associated with the answer.
 */
export interface UpdateQnaDTOQuestions extends UpdateQuestionsDTO {
}

/**
 * PATCH Body schema to represent list of Metadata to be updated
 */
export interface UpdateMetadataDTO {
  /**
   * List of Metadata associated with answer to be deleted
   */
  deleteProperty?: MetadataDTO[];
  /**
   * List of metadata associated with answer to be added
   */
  add?: MetadataDTO[];
}

/**
 * List of metadata associated with the answer to be updated
 */
export interface UpdateQnaDTOMetadata extends UpdateMetadataDTO {
}

/**
 * Update Body schema to represent context to be updated
 */
export interface UpdateContextDTO {
  /**
   * List of prompts associated with qna to be deleted
   */
  promptsToDelete?: number[];
  /**
   * List of prompts to be added to the qna.
   */
  promptsToAdd?: PromptDTO[];
  /**
   * To mark if a prompt is relevant only with a previous question or not.
   * true - Do not include this QnA as search result for queries without context
   * false - ignores context and includes this QnA in search result
   */
  isContextOnly?: boolean;
}

/**
 * Context associated with Qna to be updated.
 */
export interface UpdateQnaDTOContext extends UpdateContextDTO {
}

/**
 * PATCH Body schema for Update Qna List
 */
export interface UpdateQnaDTO {
  /**
   * Unique id for the Q-A
   */
  id?: number;
  /**
   * Answer text
   */
  answer?: string;
  /**
   * Source from which Q-A was indexed. eg.
   * https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs
   */
  source?: string;
  /**
   * List of questions associated with the answer.
   */
  questions?: UpdateQnaDTOQuestions;
  /**
   * List of metadata associated with the answer to be updated
   */
  metadata?: UpdateQnaDTOMetadata;
  /**
   * Context associated with Qna to be updated.
   */
  context?: UpdateQnaDTOContext;
}

/**
 * Name - value pair of metadata.
 */
export interface MetadataDTO {
  /**
   * Metadata name.
   */
  name: string;
  /**
   * Metadata value.
   */
  value: string;
}

/**
 * Q-A object.
 */
export interface QnADTO {
  /**
   * Unique id for the Q-A.
   */
  id?: number;
  /**
   * Answer text
   */
  answer: string;
  /**
   * Source from which Q-A was indexed. eg.
   * https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs
   */
  source?: string;
  /**
   * List of questions associated with the answer.
   */
  questions: string[];
  /**
   * List of metadata associated with the answer.
   */
  metadata?: MetadataDTO[];
  /**
   * Context of a QnA
   */
  context?: QnADTOContext;
  /**
   * Timestamp when the QnA was last updated.
   */
  lastUpdatedTimestamp?: string;
}

/**
 * QnADTO - Either QnaId or QnADTO needs to be present in a PromptDTO object
 */
export interface PromptDTOQna extends QnADTO {
}

/**
 * Prompt for an answer.
 */
export interface PromptDTO {
  /**
   * Index of the prompt - used in ordering of the prompts
   */
  displayOrder?: number;
  /**
   * Qna id corresponding to the prompt - if QnaId is present, QnADTO object is ignored.
   */
  qnaId?: number;
  /**
   * QnADTO - Either QnaId or QnADTO needs to be present in a PromptDTO object
   */
  qna?: PromptDTOQna;
  /**
   * Text displayed to represent a follow up question prompt
   */
  displayText?: string;
}

/**
 * Context associated with Qna.
 */
export interface ContextDTO {
  /**
   * To mark if a prompt is relevant only with a previous question or not.
   * true - Do not include this QnA as search result for queries without context
   * false - ignores context and includes this QnA in search result
   */
  isContextOnly?: boolean;
  /**
   * List of prompts associated with the answer.
   */
  prompts?: PromptDTO[];
}

/**
 * Context of a QnA
 */
export interface QnADTOContext extends ContextDTO {
}

/**
 * DTO to hold details of uploaded files.
 */
export interface FileDTO {
  /**
   * File name. Supported file types are ".tsv", ".pdf", ".txt", ".docx", ".xlsx".
   */
  fileName: string;
  /**
   * Public URI of the file.
   */
  fileUri: string;
}

/**
 * List of QnADTO
 */
export interface QnADocumentsDTO {
  /**
   * List of answers.
   */
  qnaDocuments?: QnADTO[];
}

/**
 * Post body schema for CreateKb operation.
 */
export interface CreateKbDTO {
  /**
   * Friendly name for the knowledgebase.
   */
  name: string;
  /**
   * List of Q-A (QnADTO) to be added to the knowledgebase. Q-A Ids are assigned by the service and
   * should be omitted.
   */
  qnaList?: QnADTO[];
  /**
   * List of URLs to be used for extracting Q-A.
   */
  urls?: string[];
  /**
   * List of files from which to Extract Q-A.
   */
  files?: FileDTO[];
  /**
   * Enable hierarchical extraction of Q-A from files and urls. Value to be considered False if
   * this field is not present.
   */
  enableHierarchicalExtraction?: boolean;
  /**
   * Text string to be used as the answer in any Q-A which has no extracted answer from the
   * document but has a hierarchy. Required when EnableHierarchicalExtraction field is set to True.
   */
  defaultAnswerUsedForExtraction?: string;
  /**
   * Language of the knowledgebase. Please find the list of supported languages <a
   * href="https://aka.ms/qnamaker-languages#languages-supported" target="_blank">here</a>.
   */
  language?: string;
  /**
   * Set to true to enable creating KBs in different languages for the same resource.
   */
  enableMultipleLanguages?: boolean;
  /**
   * Default answer sent to user if no good match is found in the KB.
   */
  defaultAnswer?: string;
}

/**
 * Post body schema for Replace KB operation.
 */
export interface ReplaceKbDTO {
  /**
   * List of Q-A (QnADTO) to be added to the knowledgebase. Q-A Ids are assigned by the service and
   * should be omitted.
   */
  qnAList: QnADTO[];
}

/**
 * The error object. As per Microsoft One API guidelines -
 * https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.
 */
export interface ErrorModel {
  /**
   * One of a server-defined set of error codes. Possible values include: 'BadArgument',
   * 'Forbidden', 'NotFound', 'KbNotFound', 'Unauthorized', 'Unspecified', 'EndpointKeysError',
   * 'QuotaExceeded', 'QnaRuntimeError', 'SKULimitExceeded', 'OperationNotFound', 'ServiceError',
   * 'ValidationFailure', 'ExtractionFailure'
   */
  code: ErrorCodeType;
  /**
   * A human-readable representation of the error.
   */
  message?: string;
  /**
   * The target of the error.
   */
  target?: string;
  /**
   * An array of details about specific errors that led to this reported error.
   */
  details?: ErrorModel[];
  /**
   * An object containing more specific information than the current object about the error.
   */
  innerError?: InnerErrorModel;
}

/**
 * The error object.
 */
export interface ErrorResponseError extends ErrorModel {
}

/**
 * Error response. As per Microsoft One API guidelines -
 * https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.
 */
export interface ErrorResponse {
  /**
   * The error object.
   */
  error?: ErrorResponseError;
}

/**
 * An object containing more specific information about the error. As per Microsoft One API
 * guidelines -
 * https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.
 */
export interface InnerErrorModel {
  /**
   * A more specific error code than was provided by the containing error.
   */
  code?: string;
  /**
   * An object containing more specific information than the current object about the error.
   */
  innerError?: InnerErrorModel;
}

/**
 * Record to track long running operation.
 */
export interface Operation {
  /**
   * Operation state. Possible values include: 'Failed', 'NotStarted', 'Running', 'Succeeded'
   */
  operationState?: OperationStateType;
  /**
   * Timestamp when the operation was created.
   */
  createdTimestamp?: string;
  /**
   * Timestamp when the current state was entered.
   */
  lastActionTimestamp?: string;
  /**
   * Relative URI to the target resource location for completed resources.
   */
  resourceLocation?: string;
  /**
   * User Id
   */
  userId?: string;
  /**
   * Operation Id.
   */
  operationId?: string;
  /**
   * Error details in case of failures.
   */
  errorResponse?: ErrorResponse;
}

/**
 * Response schema for CreateKb operation.
 */
export interface KnowledgebaseDTO {
  /**
   * Unique id that identifies a knowledgebase.
   */
  id?: string;
  /**
   * URL host name at which the knowledgebase is hosted.
   */
  hostName?: string;
  /**
   * Time stamp at which the knowledgebase was last accessed (UTC).
   */
  lastAccessedTimestamp?: string;
  /**
   * Time stamp at which the knowledgebase was last modified (UTC).
   */
  lastChangedTimestamp?: string;
  /**
   * Time stamp at which the knowledgebase was last published (UTC).
   */
  lastPublishedTimestamp?: string;
  /**
   * Friendly name of the knowledgebase.
   */
  name?: string;
  /**
   * User who created / owns the knowledgebase.
   */
  userId?: string;
  /**
   * URL sources from which Q-A were extracted and added to the knowledgebase.
   */
  urls?: string[];
  /**
   * Custom sources from which Q-A were extracted or explicitly added to the knowledgebase.
   */
  sources?: string[];
}

/**
 * Collection of knowledgebases owned by a user.
 */
export interface KnowledgebasesDTO {
  /**
   * Collection of knowledgebase records.
   */
  knowledgebases?: KnowledgebaseDTO[];
}

/**
 * Active Learning settings of the endpoint.
 */
export interface ActiveLearningSettingsDTO {
  /**
   * True/False string providing Active Learning
   */
  enable?: string;
}

/**
 * Active Learning settings of the endpoint.
 */
export interface EndpointSettingsDTOActiveLearning extends ActiveLearningSettingsDTO {
}

/**
 * Endpoint settings.
 */
export interface EndpointSettingsDTO {
  /**
   * Active Learning settings of the endpoint.
   */
  activeLearning?: EndpointSettingsDTOActiveLearning;
}

/**
 * Collection of words that are synonyms.
 */
export interface AlterationsDTO {
  /**
   * Words that are synonymous with each other.
   */
  alterations: string[];
}

/**
 * Collection of word alterations.
 */
export interface WordAlterationsDTO {
  /**
   * Collection of word alterations.
   */
  wordAlterations: AlterationsDTO[];
}

/**
 * Schema for EndpointKeys generate/refresh operations.
 */
export interface EndpointKeysDTO {
  /**
   * Primary Access Key.
   */
  primaryEndpointKey?: string;
  /**
   * Secondary Access Key.
   */
  secondaryEndpointKey?: string;
  /**
   * Current version of runtime.
   */
  installedVersion?: string;
  /**
   * Latest version of runtime.
   */
  lastStableVersion?: string;
  /**
   * Language setting of runtime.
   */
  language?: string;
}

/**
 * Context object with previous QnA's information.
 */
export interface QueryContextDTO {
  /**
   * Previous QnA Id - qnaId of the top result.
   */
  previousQnaId?: number;
  /**
   * Previous user query.
   */
  previousUserQuery?: string;
}

/**
 * Context object with previous QnA's information.
 */
export interface QueryDTOContext extends QueryContextDTO {
}

/**
 * To configure Answer span prediction feature.
 */
export interface AnswerSpanRequestDTO {
  /**
   * Enable or Disable Answer Span prediction.
   */
  enable?: boolean;
  /**
   * Minimum threshold score required to include an answer span.
   */
  scoreThreshold?: number;
  /**
   * Number of Top answers to be considered for span prediction.
   */
  topAnswersWithSpan?: number;
}

/**
 * To configure Answer span prediction feature.
 */
export interface QueryDTOAnswerSpanRequest extends AnswerSpanRequestDTO {
}

/**
 * POST body schema to query the knowledgebase.
 */
export interface QueryDTO {
  /**
   * Exact qnaId to fetch from the knowledgebase, this field takes priority over question.
   */
  qnaId?: string;
  /**
   * User question to query against the knowledge base.
   */
  question?: string;
  /**
   * Max number of answers to be returned for the question.
   */
  top?: number;
  /**
   * Unique identifier for the user.
   */
  userId?: string;
  /**
   * Query against the test index.
   */
  isTest?: boolean;
  /**
   * Minimum threshold score for answers.
   */
  scoreThreshold?: number;
  /**
   * Context object with previous QnA's information.
   */
  context?: QueryDTOContext;
  /**
   * Optional field. Set to 'QuestionOnly' for using a question only Ranker.
   */
  rankerType?: string;
  /**
   * Find QnAs that are associated with the given list of metadata.
   */
  strictFilters?: MetadataDTO[];
  /**
   * Optional field. Set to 'OR' for using OR operation for strict filters. Possible values
   * include: 'AND', 'OR'
   */
  strictFiltersCompoundOperationType?: StrictFiltersCompoundOperationType;
  /**
   * To configure Answer span prediction feature.
   */
  answerSpanRequest?: QueryDTOAnswerSpanRequest;
}

/**
 * Context object of the QnA
 */
export interface QnASearchResultContext extends ContextDTO {
}

/**
 * Answer span object of QnA.
 */
export interface AnswerSpanResponseDTO {
  /**
   * Predicted text of answer span.
   */
  text?: string;
  /**
   * Predicted score of answer span.
   */
  score?: number;
  /**
   * Start index of answer span in answer.
   */
  startIndex?: number;
  /**
   * End index of answer span in answer.
   */
  endIndex?: number;
}

/**
 * Answer span object of QnA with respect to user's question.
 */
export interface QnASearchResultAnswerSpan extends AnswerSpanResponseDTO {
}

/**
 * Represents Search Result.
 */
export interface QnASearchResult {
  /**
   * List of questions.
   */
  questions?: string[];
  /**
   * Answer.
   */
  answer?: string;
  /**
   * Search result score.
   */
  score?: number;
  /**
   * Id of the QnA result.
   */
  id?: number;
  /**
   * Source of QnA result.
   */
  source?: string;
  /**
   * List of metadata.
   */
  metadata?: MetadataDTO[];
  /**
   * Context object of the QnA
   */
  context?: QnASearchResultContext;
  /**
   * Answer span object of QnA with respect to user's question.
   */
  answerSpan?: QnASearchResultAnswerSpan;
}

/**
 * Represents List of Question Answers.
 */
export interface QnASearchResultList {
  /**
   * Represents Search Result list.
   */
  answers?: QnASearchResult[];
}

/**
 * Active learning feedback record.
 */
export interface FeedbackRecordDTO {
  /**
   * Unique identifier for the user.
   */
  userId?: string;
  /**
   * The suggested question being provided as feedback.
   */
  userQuestion?: string;
  /**
   * The qnaId for which the suggested question is provided as feedback.
   */
  qnaId?: number;
}

/**
 * Active learning feedback records.
 */
export interface FeedbackRecordsDTO {
  /**
   * List of feedback records.
   */
  feedbackRecords?: FeedbackRecordDTO[];
}

/**
 * Optional Parameters.
 */
export interface KnowledgebaseDownloadOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The source property filter to apply.
   */
  source?: string;
  /**
   * The last changed status property filter to apply.
   */
  changedSince?: string;
}

/**
 * Defines headers for GetDetails operation.
 */
export interface OperationsGetDetailsHeaders {
  /**
   * Indicates how long the client should wait before sending a follow up request. The header will
   * be present only if the operation is running or has not started yet.
   */
  retryAfter: number;
}

/**
 * Defines headers for Update operation.
 */
export interface KnowledgebaseUpdateHeaders {
  /**
   * Relative URI to the target location of the asynchronous operation. Client should poll this
   * resource to get status of the operation.
   */
  location: string;
}

/**
 * Defines values for ErrorCodeType.
 * Possible values include: 'BadArgument', 'Forbidden', 'NotFound', 'KbNotFound', 'Unauthorized',
 * 'Unspecified', 'EndpointKeysError', 'QuotaExceeded', 'QnaRuntimeError', 'SKULimitExceeded',
 * 'OperationNotFound', 'ServiceError', 'ValidationFailure', 'ExtractionFailure'
 * @readonly
 * @enum {string}
 */
export type ErrorCodeType = 'BadArgument' | 'Forbidden' | 'NotFound' | 'KbNotFound' | 'Unauthorized' | 'Unspecified' | 'EndpointKeysError' | 'QuotaExceeded' | 'QnaRuntimeError' | 'SKULimitExceeded' | 'OperationNotFound' | 'ServiceError' | 'ValidationFailure' | 'ExtractionFailure';

/**
 * Defines values for OperationStateType.
 * Possible values include: 'Failed', 'NotStarted', 'Running', 'Succeeded'
 * @readonly
 * @enum {string}
 */
export type OperationStateType = 'Failed' | 'NotStarted' | 'Running' | 'Succeeded';

/**
 * Defines values for StrictFiltersCompoundOperationType.
 * Possible values include: 'AND', 'OR'
 * @readonly
 * @enum {string}
 */
export type StrictFiltersCompoundOperationType = 'AND' | 'OR';

/**
 * Defines values for EnvironmentType.
 * Possible values include: 'Prod', 'Test'
 * @readonly
 * @enum {string}
 */
export type EnvironmentType = 'Prod' | 'Test';

/**
 * Contains response data for the getSettings operation.
 */
export type EndpointSettingsGetSettingsResponse = EndpointSettingsDTO & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EndpointSettingsDTO;
    };
};

/**
 * Contains response data for the getKeys operation.
 */
export type EndpointKeysGetKeysResponse = EndpointKeysDTO & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EndpointKeysDTO;
    };
};

/**
 * Contains response data for the refreshKeys operation.
 */
export type EndpointKeysRefreshKeysResponse = EndpointKeysDTO & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EndpointKeysDTO;
    };
};

/**
 * Contains response data for the get operation.
 */
export type AlterationsGetResponse = WordAlterationsDTO & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WordAlterationsDTO;
    };
};

/**
 * Contains response data for the getAlterationsForKb operation.
 */
export type AlterationsGetAlterationsForKbResponse = WordAlterationsDTO & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WordAlterationsDTO;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type KnowledgebaseListAllResponse = KnowledgebasesDTO & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: KnowledgebasesDTO;
    };
};

/**
 * Contains response data for the getDetails operation.
 */
export type KnowledgebaseGetDetailsResponse = KnowledgebaseDTO & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: KnowledgebaseDTO;
    };
};

/**
 * Contains response data for the update operation.
 */
export type KnowledgebaseUpdateResponse = Operation & KnowledgebaseUpdateHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: KnowledgebaseUpdateHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Operation;
    };
};

/**
 * Contains response data for the create operation.
 */
export type KnowledgebaseCreateResponse = Operation & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Operation;
    };
};

/**
 * Contains response data for the download operation.
 */
export type KnowledgebaseDownloadResponse = QnADocumentsDTO & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: QnADocumentsDTO;
    };
};

/**
 * Contains response data for the generateAnswer operation.
 */
export type KnowledgebaseGenerateAnswerResponse = QnASearchResultList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: QnASearchResultList;
    };
};

/**
 * Contains response data for the getDetails operation.
 */
export type OperationsGetDetailsResponse = Operation & OperationsGetDetailsHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: OperationsGetDetailsHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Operation;
    };
};
