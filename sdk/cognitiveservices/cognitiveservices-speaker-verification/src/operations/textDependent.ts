/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/textDependentMappers";
import * as Parameters from "../models/parameters";
import { SpeakerVerificationAPIContext } from "../speakerVerificationAPIContext";

/** Class representing a TextDependent. */
export class TextDependent {
  private readonly client: SpeakerVerificationAPIContext;

  /**
   * Create a TextDependent.
   * @param {SpeakerVerificationAPIContext} client Reference to the service client.
   */
  constructor(client: SpeakerVerificationAPIContext) {
    this.client = client;
  }

  /**
   * Create a new speaker profile with specified locale.
   * One subscription can create 10,000 speaker profiles at most.
   * @summary Create Profile
   * @param [options] The optional parameters
   * @returns Promise<Models.TextDependentCreateProfileResponse>
   */
  createProfile(options?: Models.TextDependentCreateProfileOptionalParams): Promise<Models.TextDependentCreateProfileResponse>;
  /**
   * @param callback The callback
   */
  createProfile(callback: msRest.ServiceCallback<Models.TdProfileInfo>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  createProfile(options: Models.TextDependentCreateProfileOptionalParams, callback: msRest.ServiceCallback<Models.TdProfileInfo>): void;
  createProfile(options?: Models.TextDependentCreateProfileOptionalParams | msRest.ServiceCallback<Models.TdProfileInfo>, callback?: msRest.ServiceCallback<Models.TdProfileInfo>): Promise<Models.TextDependentCreateProfileResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      createProfileOperationSpec,
      callback) as Promise<Models.TextDependentCreateProfileResponse>;
  }

  /**
   * Retrieves a set of profiles.
   * Profiles are sorted alphabetically by ProfileId
   * @summary List Profiles
   * @param [options] The optional parameters
   * @returns Promise<Models.TextDependentListProfilesResponse>
   */
  listProfiles(options?: Models.TextDependentListProfilesOptionalParams): Promise<Models.TextDependentListProfilesResponse>;
  /**
   * @param callback The callback
   */
  listProfiles(callback: msRest.ServiceCallback<Models.TdProfileInfoList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listProfiles(options: Models.TextDependentListProfilesOptionalParams, callback: msRest.ServiceCallback<Models.TdProfileInfoList>): void;
  listProfiles(options?: Models.TextDependentListProfilesOptionalParams | msRest.ServiceCallback<Models.TdProfileInfoList>, callback?: msRest.ServiceCallback<Models.TdProfileInfoList>): Promise<Models.TextDependentListProfilesResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listProfilesOperationSpec,
      callback) as Promise<Models.TextDependentListProfilesResponse>;
  }

  /**
   * Retrieves a single profile by ID.
   * @summary Retrieve Single Profile
   * @param profileId Unique identifier for profile id (guid).
   * @param [options] The optional parameters
   * @returns Promise<Models.TextDependentGetProfileResponse>
   */
  getProfile(profileId: string, options?: msRest.RequestOptionsBase): Promise<Models.TextDependentGetProfileResponse>;
  /**
   * @param profileId Unique identifier for profile id (guid).
   * @param callback The callback
   */
  getProfile(profileId: string, callback: msRest.ServiceCallback<Models.TdProfileInfo>): void;
  /**
   * @param profileId Unique identifier for profile id (guid).
   * @param options The optional parameters
   * @param callback The callback
   */
  getProfile(profileId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TdProfileInfo>): void;
  getProfile(profileId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TdProfileInfo>, callback?: msRest.ServiceCallback<Models.TdProfileInfo>): Promise<Models.TextDependentGetProfileResponse> {
    return this.client.sendOperationRequest(
      {
        profileId,
        options
      },
      getProfileOperationSpec,
      callback) as Promise<Models.TextDependentGetProfileResponse>;
  }

  /**
   * Deletes an existing profile.
   * @summary Delete Profile
   * @param profileId Unique identifier for profile id (guid).
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteProfile(profileId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param profileId Unique identifier for profile id (guid).
   * @param callback The callback
   */
  deleteProfile(profileId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param profileId Unique identifier for profile id (guid).
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteProfile(profileId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteProfile(profileId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        profileId,
        options
      },
      deleteProfileOperationSpec,
      callback);
  }

  /**
   * Resets existing profile to its original creation state. The reset operation does the following:
   * * Updates enrollmentStatus to Enrolling.
   * * Updates lastUpdatedDateTime.
   * * Updates enrollmentsCount to 0.
   * * Updates enrollmentsLength to 0.
   * * Updates enrollmentsSpeechLength to 0.
   * * Updates remainingEnrollmentsCount to the initial required number.
   * * Removes all associated enrollments from storage.
   * * Removes chosen passphrase association.
   * * Resets value of modelVersion.
   * @summary Reset Profile
   * @param profileId Unique identifier for profile id (guid).
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  resetProfile(profileId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param profileId Unique identifier for profile id (guid).
   * @param callback The callback
   */
  resetProfile(profileId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param profileId Unique identifier for profile id (guid).
   * @param options The optional parameters
   * @param callback The callback
   */
  resetProfile(profileId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  resetProfile(profileId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        profileId,
        options
      },
      resetProfileOperationSpec,
      callback);
  }

  /**
   * Adds an enrollment to existing profile.
   * If the minimum number of requested enrollment audios is reached, a voice print is created.
   * If the voice print was created before, it gets recreated from all existing enrollment audios
   * including the new one.
   *
   * Limitations:
   * * Minimum audio input length per request is **1 second**
   * * Maximum audio input length per request is **10 seconds**
   * * Minimum number of enrollments for creating a voiceprint is **3**
   * * Maximum number of enrollments for creating a voiceprint is **50**
   * * Minimum audio Signal-to-noise ratio (SNR) is **10dB**
   *
   * Constraints:
   * * First enrollment must match an existing passphrase.
   * * All enrollments after the first one, must use the same passphrase used in the first
   * enrollment.
   * @summary Enroll Profile
   * @param audioData Binary audio file. Supported formats are audio/wav; codecs=audio/pcm. Supports
   * audio up to 5MB.
   * @param profileId Unique identifier for profile id (guid).
   * @param [options] The optional parameters
   * @returns Promise<Models.TextDependentCreateEnrollmentResponse>
   */
  createEnrollment(audioData: msRest.HttpRequestBody, profileId: string, options?: msRest.RequestOptionsBase): Promise<Models.TextDependentCreateEnrollmentResponse>;
  /**
   * @param audioData Binary audio file. Supported formats are audio/wav; codecs=audio/pcm. Supports
   * audio up to 5MB.
   * @param profileId Unique identifier for profile id (guid).
   * @param callback The callback
   */
  createEnrollment(audioData: msRest.HttpRequestBody, profileId: string, callback: msRest.ServiceCallback<Models.TdEnrollmentInfo>): void;
  /**
   * @param audioData Binary audio file. Supported formats are audio/wav; codecs=audio/pcm. Supports
   * audio up to 5MB.
   * @param profileId Unique identifier for profile id (guid).
   * @param options The optional parameters
   * @param callback The callback
   */
  createEnrollment(audioData: msRest.HttpRequestBody, profileId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TdEnrollmentInfo>): void;
  createEnrollment(audioData: msRest.HttpRequestBody, profileId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TdEnrollmentInfo>, callback?: msRest.ServiceCallback<Models.TdEnrollmentInfo>): Promise<Models.TextDependentCreateEnrollmentResponse> {
    return this.client.sendOperationRequest(
      {
        audioData,
        profileId,
        options
      },
      createEnrollmentOperationSpec,
      callback) as Promise<Models.TextDependentCreateEnrollmentResponse>;
  }

  /**
   * Verifies existing profiles against input audio.
   *
   * Limitations:
   * * Minimum audio input length per request is **1 second**
   * * Maximum audio input length per request is **10 seconds**
   * * Minimum audio Signal-to-noise ratio (SNR) is **10 dB**
   * @summary Verify Profile
   * @param audioData Binary audio file. Supported formats are audio/wav; codecs=audio/pcm. Supports
   * audio up to 5MB.
   * @param profileId Unique identifier for profile id (guid).
   * @param [options] The optional parameters
   * @returns Promise<Models.TextDependentVerifyProfileResponse>
   */
  verifyProfile(audioData: msRest.HttpRequestBody, profileId: string, options?: msRest.RequestOptionsBase): Promise<Models.TextDependentVerifyProfileResponse>;
  /**
   * @param audioData Binary audio file. Supported formats are audio/wav; codecs=audio/pcm. Supports
   * audio up to 5MB.
   * @param profileId Unique identifier for profile id (guid).
   * @param callback The callback
   */
  verifyProfile(audioData: msRest.HttpRequestBody, profileId: string, callback: msRest.ServiceCallback<Models.RecognitionInfo>): void;
  /**
   * @param audioData Binary audio file. Supported formats are audio/wav; codecs=audio/pcm. Supports
   * audio up to 5MB.
   * @param profileId Unique identifier for profile id (guid).
   * @param options The optional parameters
   * @param callback The callback
   */
  verifyProfile(audioData: msRest.HttpRequestBody, profileId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RecognitionInfo>): void;
  verifyProfile(audioData: msRest.HttpRequestBody, profileId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RecognitionInfo>, callback?: msRest.ServiceCallback<Models.RecognitionInfo>): Promise<Models.TextDependentVerifyProfileResponse> {
    return this.client.sendOperationRequest(
      {
        audioData,
        profileId,
        options
      },
      verifyProfileOperationSpec,
      callback) as Promise<Models.TextDependentVerifyProfileResponse>;
  }

  /**
   * Retrieves list of supported passphrases for a specific locale.
   * @summary Pass Phrases
   * @param locale A combination of language code and country code.
   * @param [options] The optional parameters
   * @returns Promise<Models.TextDependentListPhrasesResponse>
   */
  listPhrases(locale: string, options?: msRest.RequestOptionsBase): Promise<Models.TextDependentListPhrasesResponse>;
  /**
   * @param locale A combination of language code and country code.
   * @param callback The callback
   */
  listPhrases(locale: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param locale A combination of language code and country code.
   * @param options The optional parameters
   * @param callback The callback
   */
  listPhrases(locale: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  listPhrases(locale: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.TextDependentListPhrasesResponse> {
    return this.client.sendOperationRequest(
      {
        locale,
        options
      },
      listPhrasesOperationSpec,
      callback) as Promise<Models.TextDependentListPhrasesResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const createProfileOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "text-dependent/profiles",
  urlParameters: [
    Parameters.endpoint
  ],
  requestBody: {
    parameterPath: [
      "options",
      "profileInfo"
    ],
    mapper: Mappers.LocaleInfo
  },
  responses: {
    201: {
      bodyMapper: Mappers.TdProfileInfo,
      headersMapper: Mappers.TextDependentCreateProfileHeaders
    },
    400: {
      bodyMapper: Mappers.ErrorModel,
      headersMapper: Mappers.TextDependentCreateProfileHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorModel,
      headersMapper: Mappers.TextDependentCreateProfileHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorModel,
      headersMapper: Mappers.TextDependentCreateProfileHeaders
    },
    415: {
      bodyMapper: Mappers.ErrorModel,
      headersMapper: Mappers.TextDependentCreateProfileHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorModel,
      headersMapper: Mappers.TextDependentCreateProfileHeaders
    },
    500: {
      bodyMapper: Mappers.ErrorModel,
      headersMapper: Mappers.TextDependentCreateProfileHeaders
    },
    default: {}
  },
  serializer
};

const listProfilesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "text-dependent/profiles",
  urlParameters: [
    Parameters.endpoint
  ],
  queryParameters: [
    Parameters.top
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TdProfileInfoList
    },
    400: {
      bodyMapper: Mappers.ErrorModel
    },
    401: {
      bodyMapper: Mappers.ErrorModel
    },
    429: {
      bodyMapper: Mappers.ErrorModel
    },
    500: {
      bodyMapper: Mappers.ErrorModel
    },
    default: {}
  },
  serializer
};

const getProfileOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "text-dependent/profiles/{profileId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.profileId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TdProfileInfo
    },
    401: {
      bodyMapper: Mappers.ErrorModel
    },
    404: {
      bodyMapper: Mappers.ErrorModel
    },
    429: {
      bodyMapper: Mappers.ErrorModel
    },
    500: {
      bodyMapper: Mappers.ErrorModel
    },
    default: {}
  },
  serializer
};

const deleteProfileOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "text-dependent/profiles/{profileId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.profileId
  ],
  responses: {
    204: {},
    401: {
      bodyMapper: Mappers.ErrorModel
    },
    429: {
      bodyMapper: Mappers.ErrorModel
    },
    500: {
      bodyMapper: Mappers.ErrorModel
    },
    default: {}
  },
  serializer
};

const resetProfileOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "text-dependent/profiles/{profileId}/reset",
  urlParameters: [
    Parameters.endpoint,
    Parameters.profileId
  ],
  responses: {
    204: {},
    401: {
      bodyMapper: Mappers.ErrorModel
    },
    404: {
      bodyMapper: Mappers.ErrorModel
    },
    429: {
      bodyMapper: Mappers.ErrorModel
    },
    500: {
      bodyMapper: Mappers.ErrorModel
    },
    default: {}
  },
  serializer
};

const createEnrollmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "text-dependent/profiles/{profileId}/enrollments",
  urlParameters: [
    Parameters.endpoint,
    Parameters.profileId
  ],
  requestBody: {
    parameterPath: "audioData",
    mapper: {
      required: true,
      serializedName: "audioData",
      type: {
        name: "Stream"
      }
    }
  },
  contentType: "audio/wav; codecs=audio/pcm",
  responses: {
    201: {
      bodyMapper: Mappers.TdEnrollmentInfo
    },
    400: {
      bodyMapper: Mappers.ErrorModel
    },
    401: {
      bodyMapper: Mappers.ErrorModel
    },
    403: {
      bodyMapper: Mappers.ErrorModel
    },
    404: {
      bodyMapper: Mappers.ErrorModel
    },
    409: {
      bodyMapper: Mappers.ErrorModel
    },
    415: {
      bodyMapper: Mappers.ErrorModel
    },
    429: {
      bodyMapper: Mappers.ErrorModel
    },
    500: {
      bodyMapper: Mappers.ErrorModel
    },
    default: {}
  },
  serializer
};

const verifyProfileOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "text-dependent/profiles/{profileId}/verify",
  urlParameters: [
    Parameters.endpoint,
    Parameters.profileId
  ],
  requestBody: {
    parameterPath: "audioData",
    mapper: {
      required: true,
      serializedName: "audioData",
      type: {
        name: "Stream"
      }
    }
  },
  contentType: "audio/wav; codecs=audio/pcm",
  responses: {
    200: {
      bodyMapper: Mappers.RecognitionInfo
    },
    400: {
      bodyMapper: Mappers.ErrorModel
    },
    401: {
      bodyMapper: Mappers.ErrorModel
    },
    404: {
      bodyMapper: Mappers.ErrorModel
    },
    415: {
      bodyMapper: Mappers.ErrorModel
    },
    429: {
      bodyMapper: Mappers.ErrorModel
    },
    500: {
      bodyMapper: Mappers.ErrorModel
    },
    default: {}
  },
  serializer
};

const listPhrasesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "text-dependent/phrases/{locale}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.locale
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    400: {
      bodyMapper: Mappers.ErrorModel
    },
    401: {
      bodyMapper: Mappers.ErrorModel
    },
    429: {
      bodyMapper: Mappers.ErrorModel
    },
    500: {
      bodyMapper: Mappers.ErrorModel
    },
    default: {}
  },
  serializer
};
