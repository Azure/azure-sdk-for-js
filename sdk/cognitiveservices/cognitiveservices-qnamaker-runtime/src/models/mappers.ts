/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as msRest from "@azure/ms-rest-js";


export const MetadataDTO: msRest.CompositeMapper = {
  serializedName: "MetadataDTO",
  type: {
    name: "Composite",
    className: "MetadataDTO",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        constraints: {
          MaxLength: 100,
          MinLength: 1
        },
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "value",
        constraints: {
          MaxLength: 500,
          MinLength: 1
        },
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContextDTO: msRest.CompositeMapper = {
  serializedName: "ContextDTO",
  type: {
    name: "Composite",
    className: "ContextDTO",
    modelProperties: {
      isContextOnly: {
        serializedName: "isContextOnly",
        type: {
          name: "Boolean"
        }
      },
      prompts: {
        serializedName: "prompts",
        constraints: {
          MaxItems: 20
        },
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PromptDTO"
            }
          }
        }
      }
    }
  }
};

export const QnADTOContext: msRest.CompositeMapper = {
  serializedName: "QnADTO_context",
  type: {
    name: "Composite",
    className: "QnADTOContext",
    modelProperties: {
      ...ContextDTO.type.modelProperties
    }
  }
};

export const QnADTO: msRest.CompositeMapper = {
  serializedName: "QnADTO",
  type: {
    name: "Composite",
    className: "QnADTO",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "Number"
        }
      },
      answer: {
        required: true,
        serializedName: "answer",
        constraints: {
          MaxLength: 25000,
          MinLength: 1
        },
        type: {
          name: "String"
        }
      },
      source: {
        serializedName: "source",
        constraints: {
          MaxLength: 300
        },
        type: {
          name: "String"
        }
      },
      questions: {
        required: true,
        serializedName: "questions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataDTO"
            }
          }
        }
      },
      context: {
        serializedName: "context",
        type: {
          name: "Composite",
          className: "QnADTOContext"
        }
      }
    }
  }
};

export const PromptDTOQna: msRest.CompositeMapper = {
  serializedName: "PromptDTO_qna",
  type: {
    name: "Composite",
    className: "PromptDTOQna",
    modelProperties: {
      ...QnADTO.type.modelProperties
    }
  }
};

export const PromptDTO: msRest.CompositeMapper = {
  serializedName: "PromptDTO",
  type: {
    name: "Composite",
    className: "PromptDTO",
    modelProperties: {
      displayOrder: {
        serializedName: "displayOrder",
        type: {
          name: "Number"
        }
      },
      qnaId: {
        serializedName: "qnaId",
        type: {
          name: "Number"
        }
      },
      qna: {
        serializedName: "qna",
        type: {
          name: "Composite",
          className: "PromptDTOQna"
        }
      },
      displayText: {
        serializedName: "displayText",
        constraints: {
          MaxLength: 200
        },
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorModel: msRest.CompositeMapper = {
  serializedName: "Error",
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      code: {
        required: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorModel"
            }
          }
        }
      },
      innerError: {
        serializedName: "innerError",
        type: {
          name: "Composite",
          className: "InnerErrorModel"
        }
      }
    }
  }
};

export const ErrorResponseError: msRest.CompositeMapper = {
  serializedName: "ErrorResponse_error",
  type: {
    name: "Composite",
    className: "ErrorResponseError",
    modelProperties: {
      ...ErrorModel.type.modelProperties
    }
  }
};

export const ErrorResponse: msRest.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorResponseError"
        }
      }
    }
  }
};

export const InnerErrorModel: msRest.CompositeMapper = {
  serializedName: "InnerErrorModel",
  type: {
    name: "Composite",
    className: "InnerErrorModel",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      innerError: {
        serializedName: "innerError",
        type: {
          name: "Composite",
          className: "InnerErrorModel"
        }
      }
    }
  }
};

export const QueryContextDTO: msRest.CompositeMapper = {
  serializedName: "QueryContextDTO",
  type: {
    name: "Composite",
    className: "QueryContextDTO",
    modelProperties: {
      previousQnaId: {
        serializedName: "previousQnaId",
        type: {
          name: "String"
        }
      },
      previousUserQuery: {
        serializedName: "previousUserQuery",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QueryDTOContext: msRest.CompositeMapper = {
  serializedName: "QueryDTO_context",
  type: {
    name: "Composite",
    className: "QueryDTOContext",
    modelProperties: {
      ...QueryContextDTO.type.modelProperties
    }
  }
};

export const QueryDTO: msRest.CompositeMapper = {
  serializedName: "QueryDTO",
  type: {
    name: "Composite",
    className: "QueryDTO",
    modelProperties: {
      qnaId: {
        serializedName: "qnaId",
        type: {
          name: "String"
        }
      },
      question: {
        serializedName: "question",
        type: {
          name: "String"
        }
      },
      top: {
        serializedName: "top",
        type: {
          name: "Number"
        }
      },
      userId: {
        serializedName: "userId",
        type: {
          name: "String"
        }
      },
      isTest: {
        serializedName: "isTest",
        type: {
          name: "Boolean"
        }
      },
      scoreThreshold: {
        serializedName: "scoreThreshold",
        type: {
          name: "Number"
        }
      },
      context: {
        serializedName: "context",
        type: {
          name: "Composite",
          className: "QueryDTOContext"
        }
      },
      rankerType: {
        serializedName: "rankerType",
        type: {
          name: "String"
        }
      },
      strictFilters: {
        serializedName: "strictFilters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataDTO"
            }
          }
        }
      }
    }
  }
};

export const QnASearchResultContext: msRest.CompositeMapper = {
  serializedName: "QnASearchResult_context",
  type: {
    name: "Composite",
    className: "QnASearchResultContext",
    modelProperties: {
      ...ContextDTO.type.modelProperties
    }
  }
};

export const QnASearchResult: msRest.CompositeMapper = {
  serializedName: "QnASearchResult",
  type: {
    name: "Composite",
    className: "QnASearchResult",
    modelProperties: {
      questions: {
        serializedName: "questions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      answer: {
        serializedName: "answer",
        type: {
          name: "String"
        }
      },
      score: {
        serializedName: "score",
        type: {
          name: "Number"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "Number"
        }
      },
      source: {
        serializedName: "source",
        type: {
          name: "String"
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataDTO"
            }
          }
        }
      },
      context: {
        serializedName: "context",
        type: {
          name: "Composite",
          className: "QnASearchResultContext"
        }
      }
    }
  }
};

export const QnASearchResultList: msRest.CompositeMapper = {
  serializedName: "QnASearchResultList",
  type: {
    name: "Composite",
    className: "QnASearchResultList",
    modelProperties: {
      answers: {
        serializedName: "answers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QnASearchResult"
            }
          }
        }
      }
    }
  }
};

export const FeedbackRecordDTO: msRest.CompositeMapper = {
  serializedName: "FeedbackRecordDTO",
  type: {
    name: "Composite",
    className: "FeedbackRecordDTO",
    modelProperties: {
      userId: {
        serializedName: "userId",
        type: {
          name: "String"
        }
      },
      userQuestion: {
        serializedName: "userQuestion",
        constraints: {
          MaxLength: 1000
        },
        type: {
          name: "String"
        }
      },
      qnaId: {
        serializedName: "qnaId",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const FeedbackRecordsDTO: msRest.CompositeMapper = {
  serializedName: "FeedbackRecordsDTO",
  type: {
    name: "Composite",
    className: "FeedbackRecordsDTO",
    modelProperties: {
      feedbackRecords: {
        serializedName: "feedbackRecords",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FeedbackRecordDTO"
            }
          }
        }
      }
    }
  }
};
