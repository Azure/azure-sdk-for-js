/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/inkRecognizerMappers";
import * as Parameters from "../models/parameters";
import { InkRecognizerClientContext } from "../inkRecognizerClientContext";

/** Class representing a InkRecognizer. */
export class InkRecognizer {
  private readonly client: InkRecognizerClientContext;

  /**
   * Create a InkRecognizer.
   * @param {InkRecognizerClientContext} client Reference to the service client.
   */
  constructor(client: InkRecognizerClientContext) {
    this.client = client;
  }

  /**
   * Ink Recognition operation is used to perform ink layout and recognition of written words and
   * shapes. It allows passing the ink strokes to the service to get the recognition results in the
   * response.
   * @param body The collection of stroke objects to send for analysis
   * @param [options] The optional parameters
   * @returns Promise<Models.InkRecognizerRecognizeResponse>
   */
  recognize(body: Models.AnalysisRequest, options?: Models.InkRecognizerRecognizeOptionalParams): Promise<Models.InkRecognizerRecognizeResponse>;
  /**
   * @param body The collection of stroke objects to send for analysis
   * @param callback The callback
   */
  recognize(body: Models.AnalysisRequest, callback: msRest.ServiceCallback<Models.AnalysisResponse>): void;
  /**
   * @param body The collection of stroke objects to send for analysis
   * @param options The optional parameters
   * @param callback The callback
   */
  recognize(body: Models.AnalysisRequest, options: Models.InkRecognizerRecognizeOptionalParams, callback: msRest.ServiceCallback<Models.AnalysisResponse>): void;
  recognize(body: Models.AnalysisRequest, options?: Models.InkRecognizerRecognizeOptionalParams | msRest.ServiceCallback<Models.AnalysisResponse>, callback?: msRest.ServiceCallback<Models.AnalysisResponse>): Promise<Models.InkRecognizerRecognizeResponse> {
    return this.client.sendOperationRequest(
      {
        body,
        options
      },
      recognizeOperationSpec,
      callback) as Promise<Models.InkRecognizerRecognizeResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const recognizeOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "recognize",
  urlParameters: [
    Parameters.endpoint
  ],
  headerParameters: [
    Parameters.xMsClientRequestId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.AnalysisRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.AnalysisResponse
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
