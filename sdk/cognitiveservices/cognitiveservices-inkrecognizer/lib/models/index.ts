/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";


/**
 * @interface
 * An interface representing DrawingAttributesPatternColor.
 * This shows the components of the color in rgba format
 *
 */
export interface DrawingAttributesPatternColor {
  /**
   * @member {number} [r] The red component of the color
   */
  r?: number;
  /**
   * @member {number} [g] The green component of the color
   */
  g?: number;
  /**
   * @member {number} [b] The blue component of the color
   */
  b?: number;
  /**
   * @member {number} [a] The alpha component of the color
   */
  a?: number;
}

/**
 * @interface
 * An interface representing DrawingAttributesPattern.
 * The properties to use when rendering ink
 *
 */
export interface DrawingAttributesPattern {
  /**
   * @member {number} [width] The width of the stylus used to draw the stroke
   */
  width?: number;
  /**
   * @member {DrawingAttributesPatternColor} [color] This shows the components
   * of the color in rgba format
   */
  color?: DrawingAttributesPatternColor;
  /**
   * @member {number} [height] The height of the stylus used to draw the stroke
   */
  height?: number;
  /**
   * @member {boolean} [fitToCurve] This indicates whether Bezier smoothing is
   * used to render the stroke
   */
  fitToCurve?: boolean;
  /**
   * @member {RasterOp} [rasterOp] Possible values include: 'noOperation',
   * 'copyPen', 'maskPen'
   */
  rasterOp?: RasterOp;
  /**
   * @member {boolean} [ignorePressure] This indicates whether the thickness of
   * a rendered Stroke changes according the amount of pressure applied.
   */
  ignorePressure?: boolean;
  /**
   * @member {Tip} [tip] This specifies the tip to be used to draw a stroke.
   * Possible values include: 'ellipse', 'rectangle'
   */
  tip?: Tip;
}

/**
 * @interface
 * An interface representing PointDetailsPattern.
 * This holds all the properties of one point
 *
 */
export interface PointDetailsPattern {
  /**
   * @member {number} x This represents the x coordinate of the point
   */
  x: number;
  /**
   * @member {number} y This represents the y coordinate of the point
   */
  y: number;
}

/**
 * @interface
 * An interface representing AlternatePatternItem.
 */
export interface AlternatePatternItem {
  /**
   * @member {Leaf} category Possible values include: 'inkDrawing',
   * 'inkBullet', 'inkWord', 'unknown'
   */
  category: Leaf;
  /**
   * @member {PointDetailsPattern[]} [points] Array of point objects that
   * represent points that are relevant to the type of recognition unit. For
   * example, for leaf node of inkDrawing category that represents a triangle,
   * points would include the x,y coordinates of the vertices of the recognized
   * triangle. The points represent the coordinates of points used to create
   * the perfectly drawn shape that is closest to the original input. They may
   * not exactly match.
   */
  points?: PointDetailsPattern[];
  /**
   * @member {number} [rotationAngle] The angular orientation of an object
   * relative to the horizontal axis
   */
  rotationAngle?: number;
  /**
   * @member {number} [confidence] A number between 0 and 1 which indicates the
   * confidence level in the result
   */
  confidence?: number;
  /**
   * @member {string} recognizedString The recognized string from an inkWord or
   * the name of a recognized shape in an inkDrawing object
   */
  recognizedString: string;
}

/**
 * @interface
 * An interface representing RecognitionUnitItemBoundingRectangle.
 * The bounding rectangle of the recognized unit represented by the coordinates
 * of the top left corner (x,y) along with width (w) and height (h) of the
 * rectangle. Note that this rectangle is not rotated. So for  rotated objects
 * such as slanted handwriting, it will cover the entire object. The unit will
 * be matched to the one specified in the original request (mm by default.)
 *
 */
export interface RecognitionUnitItemBoundingRectangle {
  /**
   * @member {number} [topX] This represents the top left x coordinate
   */
  topX?: number;
  /**
   * @member {number} [topY] This represents the top left y coordinate
   */
  topY?: number;
  /**
   * @member {number} [width] This represents width of the bounding rectangle
   */
  width?: number;
  /**
   * @member {number} [height] The represents the height of the bounding
   * rectangle
   */
  height?: number;
}

/**
 * @interface
 * An interface representing RecognitionUnitItem.
 * This represents the recognized entity
 *
 */
export interface RecognitionUnitItem {
  /**
   * @member {number} id The identifier of the recognition unit. This id is
   * used to indicate parent/child relationship between different recognition
   * units.
   */
  id: number;
  /**
   * @member {Category} category Possible values include: 'writingRegion',
   * 'paragraph', 'listItem', 'line', 'inkBullet', 'inkDrawing', 'inkWord',
   * 'unknown'
   */
  category: Category;
  /**
   * @member {AlternatePatternItem[]} [alternates]
   */
  alternates?: AlternatePatternItem[];
  /**
   * @member {PointDetailsPattern} [center] The coordinates (x,y) of the center
   * of the recognition unit.
   */
  center?: PointDetailsPattern;
  /**
   * @member {PointDetailsPattern[]} [points] Array of point objects that
   * represent points that are relevant to the type of recognition unit. For
   * example, for a leaf node of inkDrawing category that represents a
   * triangle, points would include the x, y coordinates of the vertices of the
   * recognized triangle. The points represent the coordinates used to create
   * the perfectly drawn shape that is closest to the original input. They may
   * not exactly match.
   */
  points?: PointDetailsPattern[];
  /**
   * @member {number[]} [childIds] An array of integers representing the
   * identifier of each child of the current recognition unit.
   */
  childIds?: number[];
  /**
   * @member {ClassProperty} classProperty Possible values include:
   * 'container', 'leaf'
   */
  classProperty: ClassProperty;
  /**
   * @member {number} parentId The id of the parent node in the tree structure
   * of the recognition results. parent = 0 indicates that there is no
   * dedicated parent node for this unit.
   */
  parentId: number;
  /**
   * @member {RecognitionUnitItemBoundingRectangle} [boundingRectangle] The
   * bounding rectangle of the recognized unit represented by the coordinates
   * of the top left corner (x,y) along with width (w) and height (h) of the
   * rectangle. Note that this rectangle is not rotated. So for  rotated
   * objects such as slanted handwriting, it will cover the entire object. The
   * unit will be matched to the one specified in the original request (mm by
   * default.)
   */
  boundingRectangle?: RecognitionUnitItemBoundingRectangle;
  /**
   * @member {PointDetailsPattern[]} [rotatedBoundingRectangle] This property
   * provides the rotated bounding rectangle that covers the entire recognized
   * object along the angle of rotation of the object. Note that this is NOT
   * the same as rotating the boundingRectangle by the rotation angle.
   */
  rotatedBoundingRectangle?: PointDetailsPattern[];
  /**
   * @member {number[]} strokeIds This is an array of integers representing the
   * list of stroke Identifier integers from the input request body that belong
   * to this recognition unit.
   */
  strokeIds: number[];
  /**
   * @member {string} [recognizedText] The string represents the text that was
   * recognized. It can be an empty string if the recognizer cannot determine
   * the text.
   */
  recognizedText?: string;
  /**
   * @member {number} [confidence] The class represents the type of the
   * recognition unit. A recognition unit can be a leaf node or a container
   * node. Container nodes typically have leaf nodes as children.
   */
  confidence?: number;
  /**
   * @member {number} [rotationAngle] This represents the angle at which the
   * unit is rotated in degrees with respect to the positive X axis.
   */
  rotationAngle?: number;
  /**
   * @member {Shape} [recognizedObject] Possible values include: 'drawing',
   * 'square', 'rectangle', 'circle', 'ellipse', 'triangle',
   * 'isoscelesTriangle', 'equilateralTriangle', 'rightTriangle',
   * 'quadrilateral', 'diamond', 'trapezoid', 'parallelogram', 'pentagon',
   * 'hexagon', 'blockArrow', 'heart', 'starSimple', 'starCrossed', 'cloud',
   * 'line', 'curve', 'polyLine'
   */
  recognizedObject?: Shape;
}

/**
 * @interface
 * An interface representing Stroke.
 */
export interface Stroke {
  /**
   * @member {number} id This is treated as a unique identifier for each stroke
   * within a request. If the id is repeated within the same request, the
   * service will return an error.
   */
  id: number;
  /**
   * @member {string} [language] The IETF BCP 47 language code (for ex. en-US,
   * en-GB, hi-IN etc.) of the expected language for the handwritten content in
   * this stroke. The response will include results from this language.
   */
  language?: string;
  /**
   * @member {string} points A string of comma separated floating point values
   * that represent the x and y coordinates of points that are part of the
   * stroke. (X1,Y1, X2,Y2â€¦).  It is recommended to have a precision of 8
   * digits after the decimal to obtain most accurate recognition results. The
   * origin (0,0) of the canvas is assumed to be at the top left corner of the
   * canvas
   */
  points: string;
  /**
   * @member {DrawingAttributesPattern} [drawingAttributes]
   */
  drawingAttributes?: DrawingAttributesPattern;
  /**
   * @member {Kind} [kind] This is an optional property which influences the
   * decision about what the stroke kind is between inkWriting and inkDrawing.
   * This property should be set ONLY if the type of user content is known
   * ahead of time. Not setting this value implies the kind is not known ahead
   * of time. Kind represents the type of content the stroke is a part of.
   * Possible values include: 'inkDrawing', 'inkWriting'
   */
  kind?: Kind;
}

/**
 * @interface
 * An interface representing AnalysisResponse.
 * This shows the expected contents of a response from the service
 *
 */
export interface AnalysisResponse {
  /**
   * @member {Unit} [unit] This represents the physical units of the ink
   * strokes. It is up to the application developer to decide how to convert
   * the device specific units to physical units before calling the service.
   * The conversion factor can be different based on the type of the device
   * used. Possible values include: 'mm', 'cm', 'in'
   */
  unit?: Unit;
  /**
   * @member {number} [unitMultiple] This is a scaling factor to be applied to
   * the point coordinates when interpreting them in the physical units
   * specified.
   */
  unitMultiple?: number;
  /**
   * @member {string} [language] This is the language used for recognizing
   * handwriting from the ink strokes in the request. Set this to the userâ€™s
   * preferred language.
   */
  language?: string;
  /**
   * @member {RecognitionUnitItem[]} recognitionUnits
   */
  recognitionUnits: RecognitionUnitItem[];
}

/**
 * @interface
 * An interface representing ErrorModelDetailsItem.
 */
export interface ErrorModelDetailsItem {
  /**
   * @member {string} [code] This represents the error code
   */
  code?: string;
  /**
   * @member {string} [message] This represents the error message
   */
  message?: string;
  /**
   * @member {string} [target] This represents the target of the error message
   */
  target?: string;
}

/**
 * @interface
 * An interface representing ErrorModel.
 */
export interface ErrorModel {
  /**
   * @member {string} code This represents the error code
   */
  code: string;
  /**
   * @member {string} message This represents the error message
   */
  message: string;
  /**
   * @member {string} [target] This represents the target of the error message
   */
  target?: string;
  /**
   * @member {ErrorModelDetailsItem[]} [details] This gives details of the
   * reason(s) for the error
   */
  details?: ErrorModelDetailsItem[];
}

/**
 * @interface
 * An interface representing AnalysisRequest.
 * This shows the expected contents of a request
 *
 */
export interface AnalysisRequest {
  /**
   * @member {Application} [applicationType] This describes the domain of the
   * client application. Possible values include: 'drawing', 'writing', 'mixed'
   */
  applicationType?: Application;
  /**
   * @member {Unit1} [unit] This represents the physical units of the ink
   * strokes. It is up to the application developer to decide how to convert
   * the device specific units to physical units before calling the service.
   * The conversion factor can be different based on the type of the device
   * used. Possible values include: 'mm', 'cm', 'in'
   */
  unit?: Unit1;
  /**
   * @member {number} [unitMultiple] This is a scaling factor to be applied to
   * the point coordinates when interpreting them in the physical units
   * specified.
   */
  unitMultiple?: number;
  /**
   * @member {string} language The IETF BCP 47 language code (for ex. en-US,
   * en-GB, hi-IN etc.) of the expected language for the handwritten content in
   * the ink strokes. The response will include results from this language.
   */
  language: string;
  /**
   * @member {Stroke[]} strokes This is the array of strokes sent for
   * recognition. Best results are produced when the order of strokes added in
   * the array matches the order in which the user created them. Changing the
   * stroke order may produce unexpected results.
   */
  strokes: Stroke[];
}

/**
 * @interface
 * An interface representing InkRecognizerRecognizeOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface InkRecognizerRecognizeOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [xMsClientRequestId] The request id used to uniquely
   * identify each request during troubleshooting. This is an optional
   * parameter useful for correlating logs and other artifacts.
   */
  xMsClientRequestId?: string;
}

/**
 * Defines values for RasterOp.
 * Possible values include: 'noOperation', 'copyPen', 'maskPen'
 * @readonly
 * @enum {string}
 */
export type RasterOp = 'noOperation' | 'copyPen' | 'maskPen';

/**
 * Defines values for Tip.
 * Possible values include: 'ellipse', 'rectangle'
 * @readonly
 * @enum {string}
 */
export type Tip = 'ellipse' | 'rectangle';

/**
 * Defines values for Shape.
 * Possible values include: 'drawing', 'square', 'rectangle', 'circle', 'ellipse', 'triangle',
 * 'isoscelesTriangle', 'equilateralTriangle', 'rightTriangle', 'quadrilateral', 'diamond',
 * 'trapezoid', 'parallelogram', 'pentagon', 'hexagon', 'blockArrow', 'heart', 'starSimple',
 * 'starCrossed', 'cloud', 'line', 'curve', 'polyLine'
 * @readonly
 * @enum {string}
 */
export type Shape = 'drawing' | 'square' | 'rectangle' | 'circle' | 'ellipse' | 'triangle' | 'isoscelesTriangle' | 'equilateralTriangle' | 'rightTriangle' | 'quadrilateral' | 'diamond' | 'trapezoid' | 'parallelogram' | 'pentagon' | 'hexagon' | 'blockArrow' | 'heart' | 'starSimple' | 'starCrossed' | 'cloud' | 'line' | 'curve' | 'polyLine';

/**
 * Defines values for Category.
 * Possible values include: 'writingRegion', 'paragraph', 'listItem', 'line', 'inkBullet',
 * 'inkDrawing', 'inkWord', 'unknown'
 * @readonly
 * @enum {string}
 */
export type Category = 'writingRegion' | 'paragraph' | 'listItem' | 'line' | 'inkBullet' | 'inkDrawing' | 'inkWord' | 'unknown';

/**
 * Defines values for Container.
 * Possible values include: 'writingRegion', 'paragraph', 'listItem', 'line'
 * @readonly
 * @enum {string}
 */
export type Container = 'writingRegion' | 'paragraph' | 'listItem' | 'line';

/**
 * Defines values for Leaf.
 * Possible values include: 'inkDrawing', 'inkBullet', 'inkWord', 'unknown'
 * @readonly
 * @enum {string}
 */
export type Leaf = 'inkDrawing' | 'inkBullet' | 'inkWord' | 'unknown';

/**
 * Defines values for Kind.
 * Possible values include: 'inkDrawing', 'inkWriting'
 * @readonly
 * @enum {string}
 */
export type Kind = 'inkDrawing' | 'inkWriting';

/**
 * Defines values for Unit.
 * Possible values include: 'mm', 'cm', 'in'
 * @readonly
 * @enum {string}
 */
export type Unit = 'mm' | 'cm' | 'in';

/**
 * Defines values for Application.
 * Possible values include: 'drawing', 'writing', 'mixed'
 * @readonly
 * @enum {string}
 */
export type Application = 'drawing' | 'writing' | 'mixed';

/**
 * Defines values for ClassProperty.
 * Possible values include: 'container', 'leaf'
 * @readonly
 * @enum {string}
 */
export type ClassProperty = 'container' | 'leaf';

/**
 * Defines values for Unit1.
 * Possible values include: 'mm', 'cm', 'in'
 * @readonly
 * @enum {string}
 */
export type Unit1 = 'mm' | 'cm' | 'in';

/**
 * Contains response data for the recognize operation.
 */
export type InkRecognizerRecognizeResponse = AnalysisResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AnalysisResponse;
    };
};
