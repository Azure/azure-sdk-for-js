/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const Sku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      },
      size: {
        serializedName: "size",
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "family",
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Identity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Identity",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "SystemAssigned",
            "UserAssigned",
            "SystemAssigned, UserAssigned"
          ]
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserAssignedIdentity" }
          }
        }
      }
    }
  }
};

export const UserAssignedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const AccountProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      endpoint: {
        serializedName: "endpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      internalId: {
        serializedName: "internalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      capabilities: {
        serializedName: "capabilities",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SkuCapability"
            }
          }
        }
      },
      isMigrated: {
        serializedName: "isMigrated",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      migrationToken: {
        serializedName: "migrationToken",
        type: {
          name: "String"
        }
      },
      skuChangeInfo: {
        serializedName: "skuChangeInfo",
        type: {
          name: "Composite",
          className: "SkuChangeInfo"
        }
      },
      customSubDomainName: {
        serializedName: "customSubDomainName",
        type: {
          name: "String"
        }
      },
      networkAcls: {
        serializedName: "networkAcls",
        type: {
          name: "Composite",
          className: "NetworkRuleSet"
        }
      },
      encryption: {
        serializedName: "encryption",
        type: {
          name: "Composite",
          className: "Encryption"
        }
      },
      userOwnedStorage: {
        serializedName: "userOwnedStorage",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UserOwnedStorage"
            }
          }
        }
      },
      privateEndpointConnections: {
        serializedName: "privateEndpointConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      },
      publicNetworkAccess: {
        serializedName: "publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      apiProperties: {
        serializedName: "apiProperties",
        type: {
          name: "Composite",
          className: "ApiProperties"
        }
      },
      dateCreated: {
        serializedName: "dateCreated",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      callRateLimit: {
        serializedName: "callRateLimit",
        type: {
          name: "Composite",
          className: "CallRateLimit"
        }
      },
      dynamicThrottlingEnabled: {
        serializedName: "dynamicThrottlingEnabled",
        type: {
          name: "Boolean"
        }
      },
      quotaLimit: {
        serializedName: "quotaLimit",
        type: {
          name: "Composite",
          className: "QuotaLimit"
        }
      },
      restrictOutboundNetworkAccess: {
        serializedName: "restrictOutboundNetworkAccess",
        type: {
          name: "Boolean"
        }
      },
      allowedFqdnList: {
        serializedName: "allowedFqdnList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      disableLocalAuth: {
        serializedName: "disableLocalAuth",
        type: {
          name: "Boolean"
        }
      },
      endpoints: {
        serializedName: "endpoints",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      restore: {
        serializedName: "restore",
        type: {
          name: "Boolean"
        }
      },
      deletionDate: {
        serializedName: "deletionDate",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      scheduledPurgeDate: {
        serializedName: "scheduledPurgeDate",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuCapability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuCapability",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuChangeInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuChangeInfo",
    modelProperties: {
      countOfDowngrades: {
        serializedName: "countOfDowngrades",
        type: {
          name: "Number"
        }
      },
      countOfUpgradesAfterDowngrades: {
        serializedName: "countOfUpgradesAfterDowngrades",
        type: {
          name: "Number"
        }
      },
      lastChangeDate: {
        serializedName: "lastChangeDate",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkRuleSet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkRuleSet",
    modelProperties: {
      defaultAction: {
        serializedName: "defaultAction",
        type: {
          name: "String"
        }
      },
      ipRules: {
        serializedName: "ipRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpRule"
            }
          }
        }
      },
      virtualNetworkRules: {
        serializedName: "virtualNetworkRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkRule"
            }
          }
        }
      }
    }
  }
};

export const IpRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpRule",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkRule",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      ignoreMissingVnetServiceEndpoint: {
        serializedName: "ignoreMissingVnetServiceEndpoint",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const Encryption: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Encryption",
    modelProperties: {
      keyVaultProperties: {
        serializedName: "keyVaultProperties",
        type: {
          name: "Composite",
          className: "KeyVaultProperties"
        }
      },
      keySource: {
        defaultValue: "Microsoft.KeyVault",
        serializedName: "keySource",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyVaultProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyVaultProperties",
    modelProperties: {
      keyName: {
        serializedName: "keyName",
        type: {
          name: "String"
        }
      },
      keyVersion: {
        serializedName: "keyVersion",
        type: {
          name: "String"
        }
      },
      keyVaultUri: {
        serializedName: "keyVaultUri",
        type: {
          name: "String"
        }
      },
      identityClientId: {
        serializedName: "identityClientId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UserOwnedStorage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserOwnedStorage",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      identityClientId: {
        serializedName: "identityClientId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionProperties",
    modelProperties: {
      privateEndpoint: {
        serializedName: "privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      groupIds: {
        serializedName: "groupIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const PrivateEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpoint",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkServiceConnectionState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionState",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      actionsRequired: {
        serializedName: "actionsRequired",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApiProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApiProperties",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      qnaRuntimeEndpoint: {
        serializedName: "qnaRuntimeEndpoint",
        type: {
          name: "String"
        }
      },
      qnaAzureSearchEndpointKey: {
        serializedName: "qnaAzureSearchEndpointKey",
        type: {
          name: "String"
        }
      },
      qnaAzureSearchEndpointId: {
        serializedName: "qnaAzureSearchEndpointId",
        type: {
          name: "String"
        }
      },
      statisticsEnabled: {
        serializedName: "statisticsEnabled",
        type: {
          name: "Boolean"
        }
      },
      eventHubConnectionString: {
        constraints: {
          Pattern: new RegExp(
            "^( *)Endpoint=sb:\\/\\/(.*);( *)SharedAccessKeyName=(.*);( *)SharedAccessKey=(.*)$"
          ),
          MaxLength: 1000
        },
        serializedName: "eventHubConnectionString",
        type: {
          name: "String"
        }
      },
      storageAccountConnectionString: {
        constraints: {
          Pattern: new RegExp(
            "^(( *)DefaultEndpointsProtocol=(http|https)( *);( *))?AccountName=(.*)AccountKey=(.*)EndpointSuffix=(.*)$"
          ),
          MaxLength: 1000
        },
        serializedName: "storageAccountConnectionString",
        type: {
          name: "String"
        }
      },
      aadClientId: {
        constraints: {
          MaxLength: 500
        },
        serializedName: "aadClientId",
        type: {
          name: "String"
        }
      },
      aadTenantId: {
        constraints: {
          MaxLength: 500
        },
        serializedName: "aadTenantId",
        type: {
          name: "String"
        }
      },
      superUser: {
        constraints: {
          MaxLength: 500
        },
        serializedName: "superUser",
        type: {
          name: "String"
        }
      },
      websiteName: {
        constraints: {
          MaxLength: 500
        },
        serializedName: "websiteName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CallRateLimit: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CallRateLimit",
    modelProperties: {
      count: {
        serializedName: "count",
        type: {
          name: "Number"
        }
      },
      renewalPeriod: {
        serializedName: "renewalPeriod",
        type: {
          name: "Number"
        }
      },
      rules: {
        serializedName: "rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ThrottlingRule"
            }
          }
        }
      }
    }
  }
};

export const ThrottlingRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ThrottlingRule",
    modelProperties: {
      key: {
        serializedName: "key",
        type: {
          name: "String"
        }
      },
      renewalPeriod: {
        serializedName: "renewalPeriod",
        type: {
          name: "Number"
        }
      },
      count: {
        serializedName: "count",
        type: {
          name: "Number"
        }
      },
      minCount: {
        serializedName: "minCount",
        type: {
          name: "Number"
        }
      },
      dynamicThrottlingEnabled: {
        serializedName: "dynamicThrottlingEnabled",
        type: {
          name: "Boolean"
        }
      },
      matchPatterns: {
        serializedName: "matchPatterns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RequestMatchPattern"
            }
          }
        }
      }
    }
  }
};

export const RequestMatchPattern: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RequestMatchPattern",
    modelProperties: {
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      },
      method: {
        serializedName: "method",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QuotaLimit: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QuotaLimit",
    modelProperties: {
      count: {
        serializedName: "count",
        type: {
          name: "Number"
        }
      },
      renewalPeriod: {
        serializedName: "renewalPeriod",
        type: {
          name: "Number"
        }
      },
      rules: {
        serializedName: "rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ThrottlingRule"
            }
          }
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const AccountListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountListResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Account"
            }
          }
        }
      }
    }
  }
};

export const ApiKeys: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApiKeys",
    modelProperties: {
      key1: {
        serializedName: "key1",
        type: {
          name: "String"
        }
      },
      key2: {
        serializedName: "key2",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegenerateKeyParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegenerateKeyParameters",
    modelProperties: {
      keyName: {
        serializedName: "keyName",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Key1", "Key2"]
        }
      }
    }
  }
};

export const ResourceSkuListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceSkuListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceSku"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceSku",
    modelProperties: {
      resourceType: {
        serializedName: "resourceType",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      locations: {
        serializedName: "locations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      restrictions: {
        serializedName: "restrictions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceSkuRestrictions"
            }
          }
        }
      }
    }
  }
};

export const ResourceSkuRestrictions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceSkuRestrictions",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: ["Location", "Zone"]
        }
      },
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      restrictionInfo: {
        serializedName: "restrictionInfo",
        type: {
          name: "Composite",
          className: "ResourceSkuRestrictionInfo"
        }
      },
      reasonCode: {
        serializedName: "reasonCode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceSkuRestrictionInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceSkuRestrictionInfo",
    modelProperties: {
      locations: {
        serializedName: "locations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      zones: {
        serializedName: "zones",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const AccountSkuListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountSkuListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AccountSku"
            }
          }
        }
      }
    }
  }
};

export const AccountSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountSku",
    modelProperties: {
      resourceType: {
        serializedName: "resourceType",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      }
    }
  }
};

export const UsageListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsageListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Usage"
            }
          }
        }
      }
    }
  }
};

export const Usage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Usage",
    modelProperties: {
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "MetricName"
        }
      },
      quotaPeriod: {
        serializedName: "quotaPeriod",
        type: {
          name: "String"
        }
      },
      limit: {
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      currentValue: {
        serializedName: "currentValue",
        type: {
          name: "Number"
        }
      },
      nextResetTime: {
        serializedName: "nextResetTime",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricName: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricName",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      localizedValue: {
        serializedName: "localizedValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AccountModelListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountModelListResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AccountModel"
            }
          }
        }
      }
    }
  }
};

export const DeploymentModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeploymentModel",
    modelProperties: {
      format: {
        serializedName: "format",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      },
      callRateLimit: {
        serializedName: "callRateLimit",
        type: {
          name: "Composite",
          className: "CallRateLimit"
        }
      }
    }
  }
};

export const ModelDeprecationInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ModelDeprecationInfo",
    modelProperties: {
      fineTune: {
        serializedName: "fineTune",
        type: {
          name: "String"
        }
      },
      inference: {
        serializedName: "inference",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckSkuAvailabilityParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckSkuAvailabilityParameter",
    modelProperties: {
      skus: {
        serializedName: "skus",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      },
      typeParam: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuAvailabilityListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuAvailabilityListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SkuAvailability"
            }
          }
        }
      }
    }
  }
};

export const SkuAvailability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuAvailability",
    modelProperties: {
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      skuName: {
        serializedName: "skuName",
        type: {
          name: "String"
        }
      },
      skuAvailable: {
        serializedName: "skuAvailable",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CommitmentTierListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommitmentTierListResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CommitmentTier"
            }
          }
        }
      }
    }
  }
};

export const CommitmentTier: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommitmentTier",
    modelProperties: {
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      skuName: {
        serializedName: "skuName",
        type: {
          name: "String"
        }
      },
      hostingModel: {
        serializedName: "hostingModel",
        type: {
          name: "String"
        }
      },
      planType: {
        serializedName: "planType",
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      },
      maxCount: {
        serializedName: "maxCount",
        type: {
          name: "Number"
        }
      },
      quota: {
        serializedName: "quota",
        type: {
          name: "Composite",
          className: "CommitmentQuota"
        }
      },
      cost: {
        serializedName: "cost",
        type: {
          name: "Composite",
          className: "CommitmentCost"
        }
      }
    }
  }
};

export const CommitmentQuota: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommitmentQuota",
    modelProperties: {
      quantity: {
        serializedName: "quantity",
        type: {
          name: "Number"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CommitmentCost: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommitmentCost",
    modelProperties: {
      commitmentMeterId: {
        serializedName: "commitmentMeterId",
        type: {
          name: "String"
        }
      },
      overageMeterId: {
        serializedName: "overageMeterId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckDomainAvailabilityParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckDomainAvailabilityParameter",
    modelProperties: {
      subdomainName: {
        serializedName: "subdomainName",
        required: true,
        type: {
          name: "String"
        }
      },
      typeParam: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DomainAvailability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DomainAvailability",
    modelProperties: {
      isSubdomainAvailable: {
        serializedName: "isSubdomainAvailable",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      },
      subdomainName: {
        serializedName: "subdomainName",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      }
    }
  }
};

export const PrivateLinkResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource"
            }
          }
        }
      }
    }
  }
};

export const PrivateLinkResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourceProperties",
    modelProperties: {
      groupId: {
        serializedName: "groupId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      requiredMembers: {
        serializedName: "requiredMembers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      requiredZoneNames: {
        serializedName: "requiredZoneNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeploymentListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeploymentListResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Deployment"
            }
          }
        }
      }
    }
  }
};

export const DeploymentProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeploymentProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      model: {
        serializedName: "model",
        type: {
          name: "Composite",
          className: "DeploymentModel"
        }
      },
      scaleSettings: {
        serializedName: "scaleSettings",
        type: {
          name: "Composite",
          className: "DeploymentScaleSettings"
        }
      },
      capabilities: {
        serializedName: "capabilities",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      raiPolicyName: {
        serializedName: "raiPolicyName",
        type: {
          name: "String"
        }
      },
      callRateLimit: {
        serializedName: "callRateLimit",
        type: {
          name: "Composite",
          className: "CallRateLimit"
        }
      }
    }
  }
};

export const DeploymentScaleSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeploymentScaleSettings",
    modelProperties: {
      scaleType: {
        serializedName: "scaleType",
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Number"
        }
      },
      activeCapacity: {
        serializedName: "activeCapacity",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CommitmentPlanListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommitmentPlanListResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CommitmentPlan"
            }
          }
        }
      }
    }
  }
};

export const CommitmentPlanProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommitmentPlanProperties",
    modelProperties: {
      hostingModel: {
        serializedName: "hostingModel",
        type: {
          name: "String"
        }
      },
      planType: {
        serializedName: "planType",
        type: {
          name: "String"
        }
      },
      current: {
        serializedName: "current",
        type: {
          name: "Composite",
          className: "CommitmentPeriod"
        }
      },
      autoRenew: {
        serializedName: "autoRenew",
        type: {
          name: "Boolean"
        }
      },
      next: {
        serializedName: "next",
        type: {
          name: "Composite",
          className: "CommitmentPeriod"
        }
      },
      last: {
        serializedName: "last",
        type: {
          name: "Composite",
          className: "CommitmentPeriod"
        }
      }
    }
  }
};

export const CommitmentPeriod: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommitmentPeriod",
    modelProperties: {
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      },
      count: {
        serializedName: "count",
        type: {
          name: "Number"
        }
      },
      quota: {
        serializedName: "quota",
        type: {
          name: "Composite",
          className: "CommitmentQuota"
        }
      },
      startDate: {
        serializedName: "startDate",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      endDate: {
        serializedName: "endDate",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureEntityResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureEntityResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PrivateLinkResourceProperties"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const AccountModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountModel",
    modelProperties: {
      ...DeploymentModel.type.modelProperties,
      baseModel: {
        serializedName: "baseModel",
        type: {
          name: "Composite",
          className: "DeploymentModel"
        }
      },
      maxCapacity: {
        serializedName: "maxCapacity",
        type: {
          name: "Number"
        }
      },
      capabilities: {
        serializedName: "capabilities",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      deprecation: {
        serializedName: "deprecation",
        type: {
          name: "Composite",
          className: "ModelDeprecationInfo"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const PrivateEndpointConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...AzureEntityResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PrivateEndpointConnectionProperties"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Account: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Account",
    modelProperties: {
      ...AzureEntityResource.type.modelProperties,
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "AccountProperties"
        }
      }
    }
  }
};

export const Deployment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Deployment",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DeploymentProperties"
        }
      }
    }
  }
};

export const CommitmentPlan: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommitmentPlan",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "CommitmentPlanProperties"
        }
      }
    }
  }
};
