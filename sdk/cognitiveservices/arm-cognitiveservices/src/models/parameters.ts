/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter,
} from "@azure/core-client";
import {
  Account as AccountMapper,
  RegenerateKeyParameters as RegenerateKeyParametersMapper,
  CheckSkuAvailabilityParameter as CheckSkuAvailabilityParameterMapper,
  CheckDomainAvailabilityParameter as CheckDomainAvailabilityParameterMapper,
  CalculateModelCapacityParameter as CalculateModelCapacityParameterMapper,
  PrivateEndpointConnection as PrivateEndpointConnectionMapper,
  Deployment as DeploymentMapper,
  PatchResourceTagsAndSku as PatchResourceTagsAndSkuMapper,
  CommitmentPlan as CommitmentPlanMapper,
  CommitmentPlanAccountAssociation as CommitmentPlanAccountAssociationMapper,
  EncryptionScope as EncryptionScopeMapper,
  RaiPolicy as RaiPolicyMapper,
  RaiBlocklist as RaiBlocklistMapper,
  RaiBlocklistItem as RaiBlocklistItemMapper,
  DefenderForAISetting as DefenderForAISettingMapper,
} from "../models/mappers.js";

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String",
    },
  },
};

export const account: OperationParameter = {
  parameterPath: "account",
  mapper: AccountMapper,
};

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String",
    },
  },
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1,
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const accountName: OperationURLParameter = {
  parameterPath: "accountName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"),
      MaxLength: 64,
      MinLength: 2,
    },
    serializedName: "accountName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2024-10-01",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String",
    },
  },
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    constraints: {
      MinLength: 1,
    },
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const keyName: OperationParameter = {
  parameterPath: "keyName",
  mapper: RegenerateKeyParametersMapper,
};

export const filter: OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String",
    },
  },
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const location: OperationURLParameter = {
  parameterPath: "location",
  mapper: {
    serializedName: "location",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const skus: OperationParameter = {
  parameterPath: "skus",
  mapper: CheckSkuAvailabilityParameterMapper,
};

export const kind: OperationParameter = {
  parameterPath: "kind",
  mapper: CheckSkuAvailabilityParameterMapper,
};

export const typeParam: OperationParameter = {
  parameterPath: "typeParam",
  mapper: CheckSkuAvailabilityParameterMapper,
};

export const subdomainName: OperationParameter = {
  parameterPath: "subdomainName",
  mapper: CheckDomainAvailabilityParameterMapper,
};

export const typeParam1: OperationParameter = {
  parameterPath: "typeParam",
  mapper: CheckDomainAvailabilityParameterMapper,
};

export const kind1: OperationParameter = {
  parameterPath: ["options", "kind"],
  mapper: CheckDomainAvailabilityParameterMapper,
};

export const model: OperationParameter = {
  parameterPath: ["options", "model"],
  mapper: CalculateModelCapacityParameterMapper,
};

export const skuName: OperationParameter = {
  parameterPath: ["options", "skuName"],
  mapper: CalculateModelCapacityParameterMapper,
};

export const workloads: OperationParameter = {
  parameterPath: ["options", "workloads"],
  mapper: CalculateModelCapacityParameterMapper,
};

export const modelFormat: OperationQueryParameter = {
  parameterPath: "modelFormat",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"),
    },
    serializedName: "modelFormat",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const modelName: OperationQueryParameter = {
  parameterPath: "modelName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"),
    },
    serializedName: "modelName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const modelVersion: OperationQueryParameter = {
  parameterPath: "modelVersion",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"),
    },
    serializedName: "modelVersion",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const privateEndpointConnectionName: OperationURLParameter = {
  parameterPath: "privateEndpointConnectionName",
  mapper: {
    serializedName: "privateEndpointConnectionName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const properties: OperationParameter = {
  parameterPath: "properties",
  mapper: PrivateEndpointConnectionMapper,
};

export const deploymentName: OperationURLParameter = {
  parameterPath: "deploymentName",
  mapper: {
    serializedName: "deploymentName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const deployment: OperationParameter = {
  parameterPath: "deployment",
  mapper: DeploymentMapper,
};

export const deployment1: OperationParameter = {
  parameterPath: "deployment",
  mapper: PatchResourceTagsAndSkuMapper,
};

export const commitmentPlanName: OperationURLParameter = {
  parameterPath: "commitmentPlanName",
  mapper: {
    serializedName: "commitmentPlanName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const commitmentPlan: OperationParameter = {
  parameterPath: "commitmentPlan",
  mapper: CommitmentPlanMapper,
};

export const commitmentPlanName1: OperationURLParameter = {
  parameterPath: "commitmentPlanName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"),
    },
    serializedName: "commitmentPlanName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const commitmentPlan1: OperationParameter = {
  parameterPath: "commitmentPlan",
  mapper: PatchResourceTagsAndSkuMapper,
};

export const commitmentPlanAssociationName: OperationURLParameter = {
  parameterPath: "commitmentPlanAssociationName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"),
    },
    serializedName: "commitmentPlanAssociationName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const association: OperationParameter = {
  parameterPath: "association",
  mapper: CommitmentPlanAccountAssociationMapper,
};

export const encryptionScopeName: OperationURLParameter = {
  parameterPath: "encryptionScopeName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"),
    },
    serializedName: "encryptionScopeName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const encryptionScope: OperationParameter = {
  parameterPath: "encryptionScope",
  mapper: EncryptionScopeMapper,
};

export const raiPolicyName: OperationURLParameter = {
  parameterPath: "raiPolicyName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"),
    },
    serializedName: "raiPolicyName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const raiPolicy: OperationParameter = {
  parameterPath: "raiPolicy",
  mapper: RaiPolicyMapper,
};

export const raiBlocklistName: OperationURLParameter = {
  parameterPath: "raiBlocklistName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"),
    },
    serializedName: "raiBlocklistName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const raiBlocklist: OperationParameter = {
  parameterPath: "raiBlocklist",
  mapper: RaiBlocklistMapper,
};

export const raiBlocklistItemName: OperationURLParameter = {
  parameterPath: "raiBlocklistItemName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"),
    },
    serializedName: "raiBlocklistItemName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const raiBlocklistItem: OperationParameter = {
  parameterPath: "raiBlocklistItem",
  mapper: RaiBlocklistItemMapper,
};

export const raiBlocklistItems: OperationParameter = {
  parameterPath: "raiBlocklistItems",
  mapper: {
    serializedName: "raiBlocklistItems",
    required: true,
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "Composite",
          className: "RaiBlocklistItemBulkRequest",
        },
      },
    },
  },
};

export const raiBlocklistItemsNames: OperationParameter = {
  parameterPath: "raiBlocklistItemsNames",
  mapper: {
    serializedName: "raiBlocklistItemsNames",
    required: true,
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String",
        },
      },
    },
  },
};

export const filterName: OperationURLParameter = {
  parameterPath: "filterName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"),
    },
    serializedName: "filterName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const nspConfigurationName: OperationURLParameter = {
  parameterPath: "nspConfigurationName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^.*$"),
    },
    serializedName: "nspConfigurationName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const defenderForAISettingName: OperationURLParameter = {
  parameterPath: "defenderForAISettingName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"),
    },
    serializedName: "defenderForAISettingName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const defenderForAISettings: OperationParameter = {
  parameterPath: "defenderForAISettings",
  mapper: DefenderForAISettingMapper,
};
