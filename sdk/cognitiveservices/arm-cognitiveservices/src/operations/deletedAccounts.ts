/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/deletedAccountsMappers";
import * as Parameters from "../models/parameters";
import { CognitiveServicesManagementClientContext } from "../cognitiveServicesManagementClientContext";

/** Class representing a DeletedAccounts. */
export class DeletedAccounts {
  private readonly client: CognitiveServicesManagementClientContext;

  /**
   * Create a DeletedAccounts.
   * @param {CognitiveServicesManagementClientContext} client Reference to the service client.
   */
  constructor(client: CognitiveServicesManagementClientContext) {
    this.client = client;
  }

  /**
   * Returns a Cognitive Services account specified by the parameters.
   * @param location Resource location.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of Cognitive Services account.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeletedAccountsGetResponse>
   */
  get(
    location: string,
    resourceGroupName: string,
    accountName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.DeletedAccountsGetResponse>;
  /**
   * @param location Resource location.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of Cognitive Services account.
   * @param callback The callback
   */
  get(
    location: string,
    resourceGroupName: string,
    accountName: string,
    callback: msRest.ServiceCallback<Models.Account>
  ): void;
  /**
   * @param location Resource location.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of Cognitive Services account.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(
    location: string,
    resourceGroupName: string,
    accountName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.Account>
  ): void;
  get(
    location: string,
    resourceGroupName: string,
    accountName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Account>,
    callback?: msRest.ServiceCallback<Models.Account>
  ): Promise<Models.DeletedAccountsGetResponse> {
    return this.client.sendOperationRequest(
      {
        location,
        resourceGroupName,
        accountName,
        options
      },
      getOperationSpec,
      callback
    ) as Promise<Models.DeletedAccountsGetResponse>;
  }

  /**
   * Deletes a Cognitive Services account from the resource group.
   * @param location Resource location.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of Cognitive Services account.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  purge(
    location: string,
    resourceGroupName: string,
    accountName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRest.RestResponse> {
    return this.beginPurge(location, resourceGroupName, accountName, options).then((lroPoller) =>
      lroPoller.pollUntilFinished()
    );
  }

  /**
   * Returns all the resources of a particular type belonging to a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeletedAccountsListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.DeletedAccountsListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.AccountListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.AccountListResult>
  ): void;
  list(
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AccountListResult>,
    callback?: msRest.ServiceCallback<Models.AccountListResult>
  ): Promise<Models.DeletedAccountsListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback
    ) as Promise<Models.DeletedAccountsListResponse>;
  }

  /**
   * Deletes a Cognitive Services account from the resource group.
   * @param location Resource location.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of Cognitive Services account.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginPurge(
    location: string,
    resourceGroupName: string,
    accountName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        location,
        resourceGroupName,
        accountName,
        options
      },
      beginPurgeOperationSpec,
      options
    );
  }

  /**
   * Returns all the resources of a particular type belonging to a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeletedAccountsListNextResponse>
   */
  listNext(
    nextPageLink: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.DeletedAccountsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.AccountListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(
    nextPageLink: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.AccountListResult>
  ): void;
  listNext(
    nextPageLink: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AccountListResult>,
    callback?: msRest.ServiceCallback<Models.AccountListResult>
  ): Promise<Models.DeletedAccountsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback
    ) as Promise<Models.DeletedAccountsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/locations/{location}/resourceGroups/{resourceGroupName}/deletedAccounts/{accountName}",
  urlParameters: [
    Parameters.location,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.subscriptionId
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.Account
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/deletedAccounts",
  urlParameters: [Parameters.subscriptionId],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.AccountListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginPurgeOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path:
    "subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/locations/{location}/resourceGroups/{resourceGroupName}/deletedAccounts/{accountName}",
  urlParameters: [
    Parameters.location,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.subscriptionId
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [Parameters.nextPageLink],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.AccountListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
