/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { ProjectCapabilityHosts } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { CognitiveServicesManagementClient } from "../cognitiveServicesManagementClient.js";
import { SimplePollerLike, OperationState, createHttpPoller } from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  ProjectCapabilityHostsDeleteOptionalParams,
  ProjectCapabilityHostsDeleteResponse,
  ProjectCapabilityHostsGetOptionalParams,
  ProjectCapabilityHostsGetResponse,
  CapabilityHost,
  ProjectCapabilityHostsCreateOrUpdateOptionalParams,
  ProjectCapabilityHostsCreateOrUpdateResponse,
} from "../models/index.js";

/** Class containing ProjectCapabilityHosts operations. */
export class ProjectCapabilityHostsImpl implements ProjectCapabilityHosts {
  private readonly client: CognitiveServicesManagementClient;

  /**
   * Initialize a new instance of the class ProjectCapabilityHosts class.
   * @param client Reference to the service client
   */
  constructor(client: CognitiveServicesManagementClient) {
    this.client = client;
  }

  /**
   * Delete project capabilityHost.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of Cognitive Services account.
   * @param projectName The name of Cognitive Services account's project.
   * @param capabilityHostName The name of the capability host associated with the Cognitive Services
   *                           Resource
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    accountName: string,
    projectName: string,
    capabilityHostName: string,
    options?: ProjectCapabilityHostsDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ProjectCapabilityHostsDeleteResponse>,
      ProjectCapabilityHostsDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ProjectCapabilityHostsDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        accountName,
        projectName,
        capabilityHostName,
        options,
      },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      ProjectCapabilityHostsDeleteResponse,
      OperationState<ProjectCapabilityHostsDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete project capabilityHost.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of Cognitive Services account.
   * @param projectName The name of Cognitive Services account's project.
   * @param capabilityHostName The name of the capability host associated with the Cognitive Services
   *                           Resource
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    accountName: string,
    projectName: string,
    capabilityHostName: string,
    options?: ProjectCapabilityHostsDeleteOptionalParams,
  ): Promise<ProjectCapabilityHostsDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      accountName,
      projectName,
      capabilityHostName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Get project capabilityHost.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of Cognitive Services account.
   * @param projectName The name of Cognitive Services account's project.
   * @param capabilityHostName The name of the capability host associated with the Cognitive Services
   *                           Resource
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    projectName: string,
    capabilityHostName: string,
    options?: ProjectCapabilityHostsGetOptionalParams,
  ): Promise<ProjectCapabilityHostsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        projectName,
        capabilityHostName,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * Create or update project capabilityHost.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of Cognitive Services account.
   * @param projectName The name of Cognitive Services account's project.
   * @param capabilityHostName The name of the capability host associated with the Cognitive Services
   *                           Resource
   * @param body CapabilityHost definition.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    accountName: string,
    projectName: string,
    capabilityHostName: string,
    body: CapabilityHost,
    options?: ProjectCapabilityHostsCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ProjectCapabilityHostsCreateOrUpdateResponse>,
      ProjectCapabilityHostsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ProjectCapabilityHostsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        accountName,
        projectName,
        capabilityHostName,
        body,
        options,
      },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      ProjectCapabilityHostsCreateOrUpdateResponse,
      OperationState<ProjectCapabilityHostsCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "original-uri",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create or update project capabilityHost.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of Cognitive Services account.
   * @param projectName The name of Cognitive Services account's project.
   * @param capabilityHostName The name of the capability host associated with the Cognitive Services
   *                           Resource
   * @param body CapabilityHost definition.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    accountName: string,
    projectName: string,
    capabilityHostName: string,
    body: CapabilityHost,
    options?: ProjectCapabilityHostsCreateOrUpdateOptionalParams,
  ): Promise<ProjectCapabilityHostsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      accountName,
      projectName,
      capabilityHostName,
      body,
      options,
    );
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/projects/{projectName}/capabilityHosts/{capabilityHostName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.ProjectCapabilityHostsDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.ProjectCapabilityHostsDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.ProjectCapabilityHostsDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.ProjectCapabilityHostsDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.subscriptionId,
    Parameters.projectName,
    Parameters.capabilityHostName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/projects/{projectName}/capabilityHosts/{capabilityHostName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CapabilityHost,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.subscriptionId,
    Parameters.projectName,
    Parameters.capabilityHostName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/projects/{projectName}/capabilityHosts/{capabilityHostName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.CapabilityHost,
    },
    201: {
      bodyMapper: Mappers.CapabilityHost,
    },
    202: {
      bodyMapper: Mappers.CapabilityHost,
    },
    204: {
      bodyMapper: Mappers.CapabilityHost,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.subscriptionId,
    Parameters.projectName,
    Parameters.capabilityHostName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
