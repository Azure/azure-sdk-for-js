/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { DefenderForAISettings } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CognitiveServicesManagementClient } from "../cognitiveServicesManagementClient";
import {
  DefenderForAISetting,
  DefenderForAISettingsListNextOptionalParams,
  DefenderForAISettingsListOptionalParams,
  DefenderForAISettingsListResponse,
  DefenderForAISettingsGetOptionalParams,
  DefenderForAISettingsGetResponse,
  DefenderForAISettingsCreateOrUpdateOptionalParams,
  DefenderForAISettingsCreateOrUpdateResponse,
  DefenderForAISettingsUpdateOptionalParams,
  DefenderForAISettingsUpdateResponse,
  DefenderForAISettingsListNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing DefenderForAISettings operations. */
export class DefenderForAISettingsImpl implements DefenderForAISettings {
  private readonly client: CognitiveServicesManagementClient;

  /**
   * Initialize a new instance of the class DefenderForAISettings class.
   * @param client Reference to the service client
   */
  constructor(client: CognitiveServicesManagementClient) {
    this.client = client;
  }

  /**
   * Lists the Defender for AI settings.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of Cognitive Services account.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    accountName: string,
    options?: DefenderForAISettingsListOptionalParams,
  ): PagedAsyncIterableIterator<DefenderForAISetting> {
    const iter = this.listPagingAll(resourceGroupName, accountName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          accountName,
          options,
          settings,
        );
      },
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    accountName: string,
    options?: DefenderForAISettingsListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<DefenderForAISetting[]> {
    let result: DefenderForAISettingsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(resourceGroupName, accountName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        accountName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    accountName: string,
    options?: DefenderForAISettingsListOptionalParams,
  ): AsyncIterableIterator<DefenderForAISetting> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      accountName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Lists the Defender for AI settings.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of Cognitive Services account.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    accountName: string,
    options?: DefenderForAISettingsListOptionalParams,
  ): Promise<DefenderForAISettingsListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, options },
      listOperationSpec,
    );
  }

  /**
   * Gets the specified Defender for AI setting by name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of Cognitive Services account.
   * @param defenderForAISettingName The name of the defender for AI setting.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    defenderForAISettingName: string,
    options?: DefenderForAISettingsGetOptionalParams,
  ): Promise<DefenderForAISettingsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, defenderForAISettingName, options },
      getOperationSpec,
    );
  }

  /**
   * Creates or Updates the specified Defender for AI setting.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of Cognitive Services account.
   * @param defenderForAISettingName The name of the defender for AI setting.
   * @param defenderForAISettings Properties describing the Defender for AI setting.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    accountName: string,
    defenderForAISettingName: string,
    defenderForAISettings: DefenderForAISetting,
    options?: DefenderForAISettingsCreateOrUpdateOptionalParams,
  ): Promise<DefenderForAISettingsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        defenderForAISettingName,
        defenderForAISettings,
        options,
      },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Updates the specified Defender for AI setting.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of Cognitive Services account.
   * @param defenderForAISettingName The name of the defender for AI setting.
   * @param defenderForAISettings Properties describing the Defender for AI setting.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    accountName: string,
    defenderForAISettingName: string,
    defenderForAISettings: DefenderForAISetting,
    options?: DefenderForAISettingsUpdateOptionalParams,
  ): Promise<DefenderForAISettingsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        defenderForAISettingName,
        defenderForAISettings,
        options,
      },
      updateOperationSpec,
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of Cognitive Services account.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    accountName: string,
    nextLink: string,
    options?: DefenderForAISettingsListNextOptionalParams,
  ): Promise<DefenderForAISettingsListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/defenderForAISettings",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DefenderForAISettingResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.subscriptionId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/defenderForAISettings/{defenderForAISettingName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DefenderForAISetting,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.subscriptionId,
    Parameters.defenderForAISettingName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/defenderForAISettings/{defenderForAISettingName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DefenderForAISetting,
    },
    201: {
      bodyMapper: Mappers.DefenderForAISetting,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.defenderForAISettings,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.subscriptionId,
    Parameters.defenderForAISettingName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/defenderForAISettings/{defenderForAISettingName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.DefenderForAISetting,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.defenderForAISettings,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.subscriptionId,
    Parameters.defenderForAISettingName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DefenderForAISettingResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.subscriptionId,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
