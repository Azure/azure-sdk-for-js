// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import type { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import type { QuotaTiers } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import type { CognitiveServicesManagementClient } from "../cognitiveServicesManagementClient.js";
import type {
  QuotaTier,
  QuotaTiersListBySubscriptionNextOptionalParams,
  QuotaTiersListBySubscriptionOptionalParams,
  QuotaTiersListBySubscriptionResponse,
  QuotaTiersGetOptionalParams,
  QuotaTiersGetResponse,
  QuotaTiersUpdateOptionalParams,
  QuotaTiersUpdateResponse,
  QuotaTiersCreateOrUpdateOptionalParams,
  QuotaTiersCreateOrUpdateResponse,
  QuotaTiersListBySubscriptionNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing QuotaTiers operations. */
export class QuotaTiersImpl implements QuotaTiers {
  private readonly client: CognitiveServicesManagementClient;

  /**
   * Initialize a new instance of the class QuotaTiers class.
   * @param client Reference to the service client
   */
  constructor(client: CognitiveServicesManagementClient) {
    this.client = client;
  }

  /**
   * Returns all the resources of a particular type belonging to a subscription.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: QuotaTiersListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<QuotaTier> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      },
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: QuotaTiersListBySubscriptionOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<QuotaTier[]> {
    let result: QuotaTiersListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      const page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      const page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: QuotaTiersListBySubscriptionOptionalParams,
  ): AsyncIterableIterator<QuotaTier> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Returns all the resources of a particular type belonging to a subscription.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: QuotaTiersListBySubscriptionOptionalParams,
  ): Promise<QuotaTiersListBySubscriptionResponse> {
    return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec);
  }

  /**
   * Gets the Quota Tier information for the given subscription. QuotaTiers is a subscription wide
   * resource type. It holds current tier information.
   * @param defaultParam Default parameter. Leave the value as "default".
   * @param options The options parameters.
   */
  get(defaultParam: string, options?: QuotaTiersGetOptionalParams): Promise<QuotaTiersGetResponse> {
    return this.client.sendOperationRequest({ defaultParam, options }, getOperationSpec);
  }

  /**
   * Update the Quota Tier information for the given subscription. QuotaTiers is a subscription wide
   * resource type. It holds current tier information.
   * @param defaultParam Default parameter. Leave the value as "default".
   * @param tier The parameters to provide for the quota tier resource.
   * @param options The options parameters.
   */
  update(
    defaultParam: string,
    tier: QuotaTier,
    options?: QuotaTiersUpdateOptionalParams,
  ): Promise<QuotaTiersUpdateResponse> {
    return this.client.sendOperationRequest({ defaultParam, tier, options }, updateOperationSpec);
  }

  /**
   * Update the Quota Tier information for the given subscription. QuotaTiers is a subscription wide
   * resource type. It holds current tier information.
   * @param defaultParam Default parameter. Leave the value as "default".
   * @param tier The parameters to provide for the quota tier resource.
   * @param options The options parameters.
   */
  createOrUpdate(
    defaultParam: string,
    tier: QuotaTier,
    options?: QuotaTiersCreateOrUpdateOptionalParams,
  ): Promise<QuotaTiersCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { defaultParam, tier, options },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: QuotaTiersListBySubscriptionNextOptionalParams,
  ): Promise<QuotaTiersListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/quotaTiers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.QuotaTierListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/quotaTiers/{default}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.QuotaTier,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId, Parameters.defaultParam],
  headerParameters: [Parameters.accept],
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/quotaTiers/{default}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.QuotaTier,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.tier,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId, Parameters.defaultParam],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/quotaTiers/{default}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.QuotaTier,
    },
    201: {
      bodyMapper: Mappers.QuotaTier,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated,
    },
  },
  requestBody: Parameters.tier,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId, Parameters.defaultParam],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.QuotaTierListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated,
    },
  },
  urlParameters: [Parameters.$host, Parameters.subscriptionId, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer,
};
