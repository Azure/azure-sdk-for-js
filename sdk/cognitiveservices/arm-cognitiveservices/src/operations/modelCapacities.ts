/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ModelCapacities } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CognitiveServicesManagementClient } from "../cognitiveServicesManagementClient";
import {
  ModelCapacityListResultValueItem,
  ModelCapacitiesListNextOptionalParams,
  ModelCapacitiesListOptionalParams,
  ModelCapacitiesListResponse,
  ModelCapacitiesListNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ModelCapacities operations. */
export class ModelCapacitiesImpl implements ModelCapacities {
  private readonly client: CognitiveServicesManagementClient;

  /**
   * Initialize a new instance of the class ModelCapacities class.
   * @param client Reference to the service client
   */
  constructor(client: CognitiveServicesManagementClient) {
    this.client = client;
  }

  /**
   * List ModelCapacities.
   * @param modelFormat The format of the Model
   * @param modelName The name of the Model
   * @param modelVersion The version of the Model
   * @param options The options parameters.
   */
  public list(
    modelFormat: string,
    modelName: string,
    modelVersion: string,
    options?: ModelCapacitiesListOptionalParams,
  ): PagedAsyncIterableIterator<ModelCapacityListResultValueItem> {
    const iter = this.listPagingAll(
      modelFormat,
      modelName,
      modelVersion,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          modelFormat,
          modelName,
          modelVersion,
          options,
          settings,
        );
      },
    };
  }

  private async *listPagingPage(
    modelFormat: string,
    modelName: string,
    modelVersion: string,
    options?: ModelCapacitiesListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ModelCapacityListResultValueItem[]> {
    let result: ModelCapacitiesListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(modelFormat, modelName, modelVersion, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    modelFormat: string,
    modelName: string,
    modelVersion: string,
    options?: ModelCapacitiesListOptionalParams,
  ): AsyncIterableIterator<ModelCapacityListResultValueItem> {
    for await (const page of this.listPagingPage(
      modelFormat,
      modelName,
      modelVersion,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List ModelCapacities.
   * @param modelFormat The format of the Model
   * @param modelName The name of the Model
   * @param modelVersion The version of the Model
   * @param options The options parameters.
   */
  private _list(
    modelFormat: string,
    modelName: string,
    modelVersion: string,
    options?: ModelCapacitiesListOptionalParams,
  ): Promise<ModelCapacitiesListResponse> {
    return this.client.sendOperationRequest(
      { modelFormat, modelName, modelVersion, options },
      listOperationSpec,
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: ModelCapacitiesListNextOptionalParams,
  ): Promise<ModelCapacitiesListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/modelCapacities",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ModelCapacityListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.modelFormat,
    Parameters.modelName,
    Parameters.modelVersion,
  ],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ModelCapacityListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
