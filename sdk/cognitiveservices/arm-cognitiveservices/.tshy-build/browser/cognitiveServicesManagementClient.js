/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import { AccountsImpl, DeletedAccountsImpl, ResourceSkusImpl, UsagesImpl, OperationsImpl, CommitmentTiersImpl, ModelsImpl, LocationBasedModelCapacitiesImpl, ModelCapacitiesImpl, PrivateEndpointConnectionsImpl, PrivateLinkResourcesImpl, DeploymentsImpl, CommitmentPlansImpl, EncryptionScopesImpl, RaiPoliciesImpl, RaiBlocklistsImpl, RaiBlocklistItemsImpl, RaiContentFiltersImpl, NetworkSecurityPerimeterConfigurationsImpl, DefenderForAISettingsImpl, } from "./operations/index.js";
import * as Parameters from "./models/parameters.js";
import * as Mappers from "./models/mappers.js";
export class CognitiveServicesManagementClient extends coreClient.ServiceClient {
    /**
     * Initializes a new instance of the CognitiveServicesManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials,
        };
        const packageDetails = `azsdk-js-arm-cognitiveservices/7.6.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix,
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline.bearerTokenAuthenticationPolicyName,
            });
            this.pipeline.addPolicy(coreRestPipeline.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient.authorizeRequestOnClaimChallenge,
                },
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2024-10-01";
        this.accounts = new AccountsImpl(this);
        this.deletedAccounts = new DeletedAccountsImpl(this);
        this.resourceSkus = new ResourceSkusImpl(this);
        this.usages = new UsagesImpl(this);
        this.operations = new OperationsImpl(this);
        this.commitmentTiers = new CommitmentTiersImpl(this);
        this.models = new ModelsImpl(this);
        this.locationBasedModelCapacities = new LocationBasedModelCapacitiesImpl(this);
        this.modelCapacities = new ModelCapacitiesImpl(this);
        this.privateEndpointConnections = new PrivateEndpointConnectionsImpl(this);
        this.privateLinkResources = new PrivateLinkResourcesImpl(this);
        this.deployments = new DeploymentsImpl(this);
        this.commitmentPlans = new CommitmentPlansImpl(this);
        this.encryptionScopes = new EncryptionScopesImpl(this);
        this.raiPolicies = new RaiPoliciesImpl(this);
        this.raiBlocklists = new RaiBlocklistsImpl(this);
        this.raiBlocklistItems = new RaiBlocklistItemsImpl(this);
        this.raiContentFilters = new RaiContentFiltersImpl(this);
        this.networkSecurityPerimeterConfigurations =
            new NetworkSecurityPerimeterConfigurationsImpl(this);
        this.defenderForAISettings = new DefenderForAISettingsImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            async sendRequest(request, next) {
                const param = request.url.split("?");
                if (param.length > 1) {
                    const newParams = param[1].split("&").map((item) => {
                        if (item.indexOf("api-version") > -1) {
                            return "api-version=" + apiVersion;
                        }
                        else {
                            return item;
                        }
                    });
                    request.url = param[0] + "?" + newParams.join("&");
                }
                return next(request);
            },
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
    /**
     * Check available SKUs.
     * @param location Resource location.
     * @param skus The SKU of the resource.
     * @param kind The kind (type) of cognitive service account.
     * @param typeParam The Type of the resource.
     * @param options The options parameters.
     */
    checkSkuAvailability(location, skus, kind, typeParam, options) {
        return this.sendOperationRequest({ location, skus, kind, typeParam, options }, checkSkuAvailabilityOperationSpec);
    }
    /**
     * Check whether a domain is available.
     * @param subdomainName The subdomain name to use.
     * @param typeParam The Type of the resource.
     * @param options The options parameters.
     */
    checkDomainAvailability(subdomainName, typeParam, options) {
        return this.sendOperationRequest({ subdomainName, typeParam, options }, checkDomainAvailabilityOperationSpec);
    }
    /**
     * Model capacity calculator.
     * @param options The options parameters.
     */
    calculateModelCapacity(options) {
        return this.sendOperationRequest({ options }, calculateModelCapacityOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const checkSkuAvailabilityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/locations/{location}/checkSkuAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.SkuAvailabilityListResult,
        },
        default: {
            bodyMapper: Mappers.ErrorResponse,
        },
    },
    requestBody: {
        parameterPath: { skus: ["skus"], kind: ["kind"], typeParam: ["typeParam"] },
        mapper: Object.assign(Object.assign({}, Mappers.CheckSkuAvailabilityParameter), { required: true }),
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.location,
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer,
};
const checkDomainAvailabilityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/checkDomainAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.DomainAvailability,
        },
        default: {
            bodyMapper: Mappers.ErrorResponse,
        },
    },
    requestBody: {
        parameterPath: {
            subdomainName: ["subdomainName"],
            typeParam: ["typeParam"],
            kind: ["options", "kind"],
        },
        mapper: Object.assign(Object.assign({}, Mappers.CheckDomainAvailabilityParameter), { required: true }),
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer,
};
const calculateModelCapacityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/calculateModelCapacity",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.CalculateModelCapacityResult,
        },
        default: {
            bodyMapper: Mappers.ErrorResponse,
        },
    },
    requestBody: {
        parameterPath: {
            model: ["options", "model"],
            skuName: ["options", "skuName"],
            workloads: ["options", "workloads"],
        },
        mapper: Object.assign(Object.assign({}, Mappers.CalculateModelCapacityParameter), { required: true }),
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer,
};
//# sourceMappingURL=cognitiveServicesManagementClient.js.map