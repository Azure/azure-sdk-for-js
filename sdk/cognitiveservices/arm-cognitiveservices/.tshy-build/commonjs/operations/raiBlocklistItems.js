"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RaiBlocklistItemsImpl = void 0;
const tslib_1 = require("tslib");
const pagingHelper_js_1 = require("../pagingHelper.js");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
const core_lro_1 = require("@azure/core-lro");
const lroImpl_js_1 = require("../lroImpl.js");
/// <reference lib="esnext.asynciterable" />
/** Class containing RaiBlocklistItems operations. */
class RaiBlocklistItemsImpl {
    /**
     * Initialize a new instance of the class RaiBlocklistItems class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the blocklist items associated with the custom blocklist.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param raiBlocklistName The name of the RaiBlocklist associated with the Cognitive Services Account
     * @param options The options parameters.
     */
    list(resourceGroupName, accountName, raiBlocklistName, options) {
        const iter = this.listPagingAll(resourceGroupName, accountName, raiBlocklistName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, accountName, raiBlocklistName, options, settings);
            },
        };
    }
    listPagingPage(resourceGroupName, accountName, raiBlocklistName, options, settings) {
        return tslib_1.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib_1.__await(this._list(resourceGroupName, accountName, raiBlocklistName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                (0, pagingHelper_js_1.setContinuationToken)(page, continuationToken);
                yield yield tslib_1.__await(page);
            }
            while (continuationToken) {
                result = yield tslib_1.__await(this._listNext(resourceGroupName, accountName, raiBlocklistName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                (0, pagingHelper_js_1.setContinuationToken)(page, continuationToken);
                yield yield tslib_1.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, accountName, raiBlocklistName, options) {
        return tslib_1.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib_1.__asyncValues(this.listPagingPage(resourceGroupName, accountName, raiBlocklistName, options)), _f; _f = yield tslib_1.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib_1.__await(yield* tslib_1.__asyncDelegator(tslib_1.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib_1.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets the blocklist items associated with the custom blocklist.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param raiBlocklistName The name of the RaiBlocklist associated with the Cognitive Services Account
     * @param options The options parameters.
     */
    _list(resourceGroupName, accountName, raiBlocklistName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, raiBlocklistName, options }, listOperationSpec);
    }
    /**
     * Gets the specified custom blocklist Item associated with the custom blocklist.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param raiBlocklistName The name of the RaiBlocklist associated with the Cognitive Services Account
     * @param raiBlocklistItemName The name of the RaiBlocklist Item associated with the custom blocklist
     * @param options The options parameters.
     */
    get(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            accountName,
            raiBlocklistName,
            raiBlocklistItemName,
            options,
        }, getOperationSpec);
    }
    /**
     * Update the state of specified blocklist item associated with the Azure OpenAI account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param raiBlocklistName The name of the RaiBlocklist associated with the Cognitive Services Account
     * @param raiBlocklistItemName The name of the RaiBlocklist Item associated with the custom blocklist
     * @param raiBlocklistItem Properties describing the custom blocklist.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName, raiBlocklistItem, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            accountName,
            raiBlocklistName,
            raiBlocklistItemName,
            raiBlocklistItem,
            options,
        }, createOrUpdateOperationSpec);
    }
    /**
     * Deletes the specified blocklist Item associated with the custom blocklist.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param raiBlocklistName The name of the RaiBlocklist associated with the Cognitive Services Account
     * @param raiBlocklistItemName The name of the RaiBlocklist Item associated with the custom blocklist
     * @param options The options parameters.
     */
    async beginDelete(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName, options) {
        const directSendOperation = async (args, spec) => {
            return this.client.sendOperationRequest(args, spec);
        };
        const sendOperationFn = async (args, spec) => {
            var _a;
            let currentRawResponse = undefined;
            const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
            };
            const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON(),
                },
            };
        };
        const lro = (0, lroImpl_js_1.createLroSpec)({
            sendOperationFn,
            args: {
                resourceGroupName,
                accountName,
                raiBlocklistName,
                raiBlocklistItemName,
                options,
            },
            spec: deleteOperationSpec,
        });
        const poller = await (0, core_lro_1.createHttpPoller)(lro, {
            restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
            intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            resourceLocationConfig: "location",
        });
        await poller.poll();
        return poller;
    }
    /**
     * Deletes the specified blocklist Item associated with the custom blocklist.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param raiBlocklistName The name of the RaiBlocklist associated with the Cognitive Services Account
     * @param raiBlocklistItemName The name of the RaiBlocklist Item associated with the custom blocklist
     * @param options The options parameters.
     */
    async beginDeleteAndWait(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName, options) {
        const poller = await this.beginDelete(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName, options);
        return poller.pollUntilDone();
    }
    /**
     * Batch operation to add blocklist items.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param raiBlocklistName The name of the RaiBlocklist associated with the Cognitive Services Account
     * @param raiBlocklistItems Properties describing the custom blocklist items.
     * @param options The options parameters.
     */
    batchAdd(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItems, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            accountName,
            raiBlocklistName,
            raiBlocklistItems,
            options,
        }, batchAddOperationSpec);
    }
    /**
     * Batch operation to delete blocklist items.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param raiBlocklistName The name of the RaiBlocklist associated with the Cognitive Services Account
     * @param raiBlocklistItemsNames List of RAI Blocklist Items Names.
     * @param options The options parameters.
     */
    batchDelete(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemsNames, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            accountName,
            raiBlocklistName,
            raiBlocklistItemsNames,
            options,
        }, batchDeleteOperationSpec);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The name of Cognitive Services account.
     * @param raiBlocklistName The name of the RaiBlocklist associated with the Cognitive Services Account
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, accountName, raiBlocklistName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, raiBlocklistName, nextLink, options }, listNextOperationSpec);
    }
}
exports.RaiBlocklistItemsImpl = RaiBlocklistItemsImpl;
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/raiBlocklists/{raiBlocklistName}/raiBlocklistItems",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RaiBlockListItemsResult,
        },
        default: {
            bodyMapper: Mappers.ErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId,
        Parameters.raiBlocklistName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/raiBlocklists/{raiBlocklistName}/raiBlocklistItems/{raiBlocklistItemName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RaiBlocklistItem,
        },
        default: {
            bodyMapper: Mappers.ErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId,
        Parameters.raiBlocklistName,
        Parameters.raiBlocklistItemName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/raiBlocklists/{raiBlocklistName}/raiBlocklistItems/{raiBlocklistItemName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.RaiBlocklistItem,
        },
        201: {
            bodyMapper: Mappers.RaiBlocklistItem,
        },
        default: {
            bodyMapper: Mappers.ErrorResponse,
        },
    },
    requestBody: Parameters.raiBlocklistItem,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId,
        Parameters.raiBlocklistName,
        Parameters.raiBlocklistItemName,
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer,
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/raiBlocklists/{raiBlocklistName}/raiBlocklistItems/{raiBlocklistItemName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            headersMapper: Mappers.RaiBlocklistItemsDeleteHeaders,
        },
        201: {
            headersMapper: Mappers.RaiBlocklistItemsDeleteHeaders,
        },
        202: {
            headersMapper: Mappers.RaiBlocklistItemsDeleteHeaders,
        },
        204: {
            headersMapper: Mappers.RaiBlocklistItemsDeleteHeaders,
        },
        default: {
            bodyMapper: Mappers.ErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId,
        Parameters.raiBlocklistName,
        Parameters.raiBlocklistItemName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const batchAddOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/raiBlocklists/{raiBlocklistName}/addRaiBlocklistItems",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.RaiBlocklist,
        },
        default: {
            bodyMapper: Mappers.ErrorResponse,
        },
    },
    requestBody: Parameters.raiBlocklistItems,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId,
        Parameters.raiBlocklistName,
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer,
};
const batchDeleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/raiBlocklists/{raiBlocklistName}/deleteRaiBlocklistItems",
    httpMethod: "POST",
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse,
        },
    },
    requestBody: Parameters.raiBlocklistItemsNames,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId,
        Parameters.raiBlocklistName,
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer,
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RaiBlockListItemsResult,
        },
        default: {
            bodyMapper: Mappers.ErrorResponse,
        },
    },
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId,
        Parameters.nextLink,
        Parameters.raiBlocklistName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
//# sourceMappingURL=raiBlocklistItems.js.map