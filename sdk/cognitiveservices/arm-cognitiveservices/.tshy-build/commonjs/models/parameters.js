"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.defenderForAISettings = exports.defenderForAISettingName = exports.nspConfigurationName = exports.filterName = exports.raiBlocklistItemsNames = exports.raiBlocklistItems = exports.raiBlocklistItem = exports.raiBlocklistItemName = exports.raiBlocklist = exports.raiBlocklistName = exports.raiPolicy = exports.raiPolicyName = exports.encryptionScope = exports.encryptionScopeName = exports.association = exports.commitmentPlanAssociationName = exports.commitmentPlan1 = exports.commitmentPlanName1 = exports.commitmentPlan = exports.commitmentPlanName = exports.deployment1 = exports.deployment = exports.deploymentName = exports.properties = exports.privateEndpointConnectionName = exports.modelVersion = exports.modelName = exports.modelFormat = exports.workloads = exports.skuName = exports.model = exports.kind1 = exports.typeParam1 = exports.subdomainName = exports.typeParam = exports.kind = exports.skus = exports.location = exports.nextLink = exports.filter = exports.keyName = exports.subscriptionId = exports.apiVersion = exports.accountName = exports.resourceGroupName = exports.$host = exports.accept = exports.account = exports.contentType = void 0;
const mappers_js_1 = require("../models/mappers.js");
exports.contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String",
        },
    },
};
exports.account = {
    parameterPath: "account",
    mapper: mappers_js_1.Account,
};
exports.accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String",
        },
    },
};
exports.$host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
exports.resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1,
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.accountName = {
    parameterPath: "accountName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"),
            MaxLength: 64,
            MinLength: 2,
        },
        serializedName: "accountName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2024-10-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String",
        },
    },
};
exports.subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1,
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.keyName = {
    parameterPath: "keyName",
    mapper: mappers_js_1.RegenerateKeyParameters,
};
exports.filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String",
        },
    },
};
exports.nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
exports.location = {
    parameterPath: "location",
    mapper: {
        serializedName: "location",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.skus = {
    parameterPath: "skus",
    mapper: mappers_js_1.CheckSkuAvailabilityParameter,
};
exports.kind = {
    parameterPath: "kind",
    mapper: mappers_js_1.CheckSkuAvailabilityParameter,
};
exports.typeParam = {
    parameterPath: "typeParam",
    mapper: mappers_js_1.CheckSkuAvailabilityParameter,
};
exports.subdomainName = {
    parameterPath: "subdomainName",
    mapper: mappers_js_1.CheckDomainAvailabilityParameter,
};
exports.typeParam1 = {
    parameterPath: "typeParam",
    mapper: mappers_js_1.CheckDomainAvailabilityParameter,
};
exports.kind1 = {
    parameterPath: ["options", "kind"],
    mapper: mappers_js_1.CheckDomainAvailabilityParameter,
};
exports.model = {
    parameterPath: ["options", "model"],
    mapper: mappers_js_1.CalculateModelCapacityParameter,
};
exports.skuName = {
    parameterPath: ["options", "skuName"],
    mapper: mappers_js_1.CalculateModelCapacityParameter,
};
exports.workloads = {
    parameterPath: ["options", "workloads"],
    mapper: mappers_js_1.CalculateModelCapacityParameter,
};
exports.modelFormat = {
    parameterPath: "modelFormat",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"),
        },
        serializedName: "modelFormat",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.modelName = {
    parameterPath: "modelName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"),
        },
        serializedName: "modelName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.modelVersion = {
    parameterPath: "modelVersion",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"),
        },
        serializedName: "modelVersion",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.properties = {
    parameterPath: "properties",
    mapper: mappers_js_1.PrivateEndpointConnection,
};
exports.deploymentName = {
    parameterPath: "deploymentName",
    mapper: {
        serializedName: "deploymentName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.deployment = {
    parameterPath: "deployment",
    mapper: mappers_js_1.Deployment,
};
exports.deployment1 = {
    parameterPath: "deployment",
    mapper: mappers_js_1.PatchResourceTagsAndSku,
};
exports.commitmentPlanName = {
    parameterPath: "commitmentPlanName",
    mapper: {
        serializedName: "commitmentPlanName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.commitmentPlan = {
    parameterPath: "commitmentPlan",
    mapper: mappers_js_1.CommitmentPlan,
};
exports.commitmentPlanName1 = {
    parameterPath: "commitmentPlanName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"),
        },
        serializedName: "commitmentPlanName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.commitmentPlan1 = {
    parameterPath: "commitmentPlan",
    mapper: mappers_js_1.PatchResourceTagsAndSku,
};
exports.commitmentPlanAssociationName = {
    parameterPath: "commitmentPlanAssociationName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"),
        },
        serializedName: "commitmentPlanAssociationName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.association = {
    parameterPath: "association",
    mapper: mappers_js_1.CommitmentPlanAccountAssociation,
};
exports.encryptionScopeName = {
    parameterPath: "encryptionScopeName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"),
        },
        serializedName: "encryptionScopeName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.encryptionScope = {
    parameterPath: "encryptionScope",
    mapper: mappers_js_1.EncryptionScope,
};
exports.raiPolicyName = {
    parameterPath: "raiPolicyName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"),
        },
        serializedName: "raiPolicyName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.raiPolicy = {
    parameterPath: "raiPolicy",
    mapper: mappers_js_1.RaiPolicy,
};
exports.raiBlocklistName = {
    parameterPath: "raiBlocklistName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"),
        },
        serializedName: "raiBlocklistName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.raiBlocklist = {
    parameterPath: "raiBlocklist",
    mapper: mappers_js_1.RaiBlocklist,
};
exports.raiBlocklistItemName = {
    parameterPath: "raiBlocklistItemName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"),
        },
        serializedName: "raiBlocklistItemName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.raiBlocklistItem = {
    parameterPath: "raiBlocklistItem",
    mapper: mappers_js_1.RaiBlocklistItem,
};
exports.raiBlocklistItems = {
    parameterPath: "raiBlocklistItems",
    mapper: {
        serializedName: "raiBlocklistItems",
        required: true,
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "Composite",
                    className: "RaiBlocklistItemBulkRequest",
                },
            },
        },
    },
};
exports.raiBlocklistItemsNames = {
    parameterPath: "raiBlocklistItemsNames",
    mapper: {
        serializedName: "raiBlocklistItemsNames",
        required: true,
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.filterName = {
    parameterPath: "filterName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"),
        },
        serializedName: "filterName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.nspConfigurationName = {
    parameterPath: "nspConfigurationName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^.*$"),
        },
        serializedName: "nspConfigurationName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.defenderForAISettingName = {
    parameterPath: "defenderForAISettingName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"),
        },
        serializedName: "defenderForAISettingName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.defenderForAISettings = {
    parameterPath: "defenderForAISettings",
    mapper: mappers_js_1.DefenderForAISetting,
};
//# sourceMappingURL=parameters.js.map