/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Policy } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PersonalizerBase } from "../personalizerBase";
import {
  PolicyGetOptionalParams,
  PolicyGetResponse,
  PolicyContract,
  PolicyUpdateOptionalParams,
  PolicyUpdateResponse,
  PolicyResetOptionalParams,
  PolicyResetResponse
} from "../models";

/** Class containing Policy operations. */
export class PolicyImpl implements Policy {
  private readonly client: PersonalizerBase;

  /**
   * Initialize a new instance of the class Policy class.
   * @param client Reference to the service client
   */
  constructor(client: PersonalizerBase) {
    this.client = client;
  }

  /**
   * Get the Learning Settings currently used by the Personalizer service.
   * @param options The options parameters.
   */
  get(options?: PolicyGetOptionalParams): Promise<PolicyGetResponse> {
    return this.client.sendOperationRequest({ options }, getOperationSpec);
  }

  /**
   * Update the Learning Settings that the Personalizer service will use to train models.
   * @param policy The learning settings.
   * @param options The options parameters.
   */
  update(
    policy: PolicyContract,
    options?: PolicyUpdateOptionalParams
  ): Promise<PolicyUpdateResponse> {
    return this.client.sendOperationRequest(
      { policy, options },
      updateOperationSpec
    );
  }

  /**
   * Resets the learning settings of the Personalizer service to default.
   * @param options The options parameters.
   */
  reset(options?: PolicyResetOptionalParams): Promise<PolicyResetResponse> {
    return this.client.sendOperationRequest({ options }, resetOperationSpec);
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/configurations/policy",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyContract
    }
  },
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/configurations/policy",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyContract
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.policy,
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const resetOperationSpec: coreClient.OperationSpec = {
  path: "/configurations/policy",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyContract
    }
  },
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
