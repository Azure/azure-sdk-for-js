/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/policyMappers";
import * as Parameters from "../models/parameters";
import { PersonalizerClientContext } from "../personalizerClientContext";

/** Class representing a Policy. */
export class Policy {
  private readonly client: PersonalizerClientContext;

  /**
   * Create a Policy.
   * @param {PersonalizerClientContext} client Reference to the service client.
   */
  constructor(client: PersonalizerClientContext) {
    this.client = client;
  }

  /**
   * Get the Learning settings currently used by the Personalizer service.
   * @summary Get Policy.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyGetResponse>
   */
  get(options?: msRest.RequestOptionsBase): Promise<Models.PolicyGetResponse>;
  /**
   * @param callback The callback
   */
  get(callback: msRest.ServiceCallback<Models.PolicyContract>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PolicyContract>): void;
  get(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PolicyContract>, callback?: msRest.ServiceCallback<Models.PolicyContract>): Promise<Models.PolicyGetResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getOperationSpec,
      callback) as Promise<Models.PolicyGetResponse>;
  }

  /**
   * Update the Learning settings that the Personalizer service will use to train models.
   * @summary Update Policy.
   * @param policy The Learning settings.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyUpdateResponse>
   */
  update(policy: Models.PolicyContract, options?: msRest.RequestOptionsBase): Promise<Models.PolicyUpdateResponse>;
  /**
   * @param policy The Learning settings.
   * @param callback The callback
   */
  update(policy: Models.PolicyContract, callback: msRest.ServiceCallback<Models.PolicyContract>): void;
  /**
   * @param policy The Learning settings.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(policy: Models.PolicyContract, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PolicyContract>): void;
  update(policy: Models.PolicyContract, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PolicyContract>, callback?: msRest.ServiceCallback<Models.PolicyContract>): Promise<Models.PolicyUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        policy,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.PolicyUpdateResponse>;
  }

  /**
   * Resets the Learning settings of the Personalizer service to default.
   * @summary Reset Policy.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyResetResponse>
   */
  reset(options?: msRest.RequestOptionsBase): Promise<Models.PolicyResetResponse>;
  /**
   * @param callback The callback
   */
  reset(callback: msRest.ServiceCallback<Models.PolicyContract>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  reset(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PolicyContract>): void;
  reset(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PolicyContract>, callback?: msRest.ServiceCallback<Models.PolicyContract>): Promise<Models.PolicyResetResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      resetOperationSpec,
      callback) as Promise<Models.PolicyResetResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "configurations/policy",
  urlParameters: [
    Parameters.endpoint
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyContract
    },
    default: {}
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "configurations/policy",
  urlParameters: [
    Parameters.endpoint
  ],
  requestBody: {
    parameterPath: "policy",
    mapper: {
      ...Mappers.PolicyContract,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PolicyContract
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const resetOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "configurations/policy",
  urlParameters: [
    Parameters.endpoint
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyContract
    },
    default: {}
  },
  serializer
};
