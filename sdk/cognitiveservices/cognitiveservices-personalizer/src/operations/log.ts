/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Log } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PersonalizerBase } from "../personalizerBase";
import {
  LogInteractionsOptionalParams,
  LogObservationsOptionalParams,
  LogDeleteOptionalParams,
  LogGetPropertiesOptionalParams,
  LogGetPropertiesResponse
} from "../models";

/** Class containing Log operations. */
export class LogImpl implements Log {
  private readonly client: PersonalizerBase;

  /**
   * Initialize a new instance of the class Log class.
   * @param client Reference to the service client
   */
  constructor(client: PersonalizerBase) {
    this.client = client;
  }

  /**
   * The endpoint is intended to be used from within a SDK for logging interactions and accepts specific
   * format defined in https://github.com/VowpalWabbit/reinforcement_learning. This endpoint should not
   * be used by the customer.
   * @param body Interactions binary payload.
   * @param options The options parameters.
   */
  interactions(
    body: coreRestPipeline.RequestBodyType,
    options?: LogInteractionsOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { body, options },
      interactionsOperationSpec
    );
  }

  /**
   * The endpoint is intended to be used from within a SDK for logging observations and accepts specific
   * format defined in https://github.com/VowpalWabbit/reinforcement_learning. This endpoint should not
   * be used by the customer.
   * @param body Observations binary payload.
   * @param options The options parameters.
   */
  observations(
    body: coreRestPipeline.RequestBodyType,
    options?: LogObservationsOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { body, options },
      observationsOperationSpec
    );
  }

  /**
   * Delete all logs of Rank and Reward calls stored by Personalizer.
   * @param options The options parameters.
   */
  delete(options?: LogDeleteOptionalParams): Promise<void> {
    return this.client.sendOperationRequest({ options }, deleteOperationSpec);
  }

  /**
   * Get properties of the Personalizer logs.
   * @param options The options parameters.
   */
  getProperties(
    options?: LogGetPropertiesOptionalParams
  ): Promise<LogGetPropertiesResponse> {
    return this.client.sendOperationRequest(
      { options },
      getPropertiesOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const interactionsOperationSpec: coreClient.OperationSpec = {
  path: "/logs/interactions",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body1,
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.contentType1, Parameters.accept1],
  mediaType: "binary",
  serializer
};
const observationsOperationSpec: coreClient.OperationSpec = {
  path: "/logs/observations",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body1,
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.contentType1, Parameters.accept1],
  mediaType: "binary",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/logs",
  httpMethod: "DELETE",
  responses: { 204: {} },
  urlParameters: [Parameters.endpoint],
  serializer
};
const getPropertiesOperationSpec: coreClient.OperationSpec = {
  path: "/logs/properties",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LogsProperties
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
