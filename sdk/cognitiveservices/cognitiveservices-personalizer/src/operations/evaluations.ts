/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Evaluations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PersonalizerBase } from "../personalizerBase";
import {
  EvaluationsGetOptionalParams,
  EvaluationsGetResponse,
  EvaluationsDeleteOptionalParams,
  EvaluationsListOptionalParams,
  EvaluationsListResponse,
  EvaluationContract,
  EvaluationsCreateOptionalParams,
  EvaluationsCreateResponse
} from "../models";

/** Class containing Evaluations operations. */
export class EvaluationsImpl implements Evaluations {
  private readonly client: PersonalizerBase;

  /**
   * Initialize a new instance of the class Evaluations class.
   * @param client Reference to the service client
   */
  constructor(client: PersonalizerBase) {
    this.client = client;
  }

  /**
   * Get the Offline Evaluation associated with the Id.
   * @param evaluationId Id of the Offline Evaluation.
   * @param options The options parameters.
   */
  get(
    evaluationId: string,
    options?: EvaluationsGetOptionalParams
  ): Promise<EvaluationsGetResponse> {
    return this.client.sendOperationRequest(
      { evaluationId, options },
      getOperationSpec
    );
  }

  /**
   * Delete the Offline Evaluation associated with the Id.
   * @param evaluationId Id of the Offline Evaluation to delete.
   * @param options The options parameters.
   */
  delete(
    evaluationId: string,
    options?: EvaluationsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { evaluationId, options },
      deleteOperationSpec
    );
  }

  /**
   * List of all Offline Evaluations.
   * @param options The options parameters.
   */
  list(
    options?: EvaluationsListOptionalParams
  ): Promise<EvaluationsListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Submit a new Offline Evaluation job.
   * @param evaluation The Offline Evaluation job definition.
   * @param options The options parameters.
   */
  create(
    evaluation: EvaluationContract,
    options?: EvaluationsCreateOptionalParams
  ): Promise<EvaluationsCreateResponse> {
    return this.client.sendOperationRequest(
      { evaluation, options },
      createOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/evaluations/{evaluationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Evaluation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.evaluationId],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/evaluations/{evaluationId}",
  httpMethod: "DELETE",
  responses: { 204: {} },
  urlParameters: [Parameters.endpoint, Parameters.evaluationId],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/evaluations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Evaluation" } }
        }
      }
    }
  },
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/evaluations",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.Evaluation,
      headersMapper: Mappers.EvaluationsCreateHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.evaluation,
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
