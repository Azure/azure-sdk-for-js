/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { MultiSlotEvents } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PersonalizerBase } from "../personalizerBase";
import {
  MultiSlotRewardRequest,
  MultiSlotEventsRewardOptionalParams,
  MultiSlotEventsActivateOptionalParams
} from "../models";

/** Class containing MultiSlotEvents operations. */
export class MultiSlotEventsImpl implements MultiSlotEvents {
  private readonly client: PersonalizerBase;

  /**
   * Initialize a new instance of the class MultiSlotEvents class.
   * @param client Reference to the service client
   */
  constructor(client: PersonalizerBase) {
    this.client = client;
  }

  /**
   * Report reward that resulted from using the action specified in rewardActionId for the slot.
   * @param eventId The event id this reward applies to.
   * @param body List of slot id and reward values. The reward should be a floating point number,
   *             typically between 0 and 1.
   * @param options The options parameters.
   */
  reward(
    eventId: string,
    body: MultiSlotRewardRequest,
    options?: MultiSlotEventsRewardOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { eventId, body, options },
      rewardOperationSpec
    );
  }

  /**
   * Report that the specified event was actually used or displayed to the user and a rewards should be
   * expected for it.
   * @param eventId The event ID this activation applies to.
   * @param options The options parameters.
   */
  activate(
    eventId: string,
    options?: MultiSlotEventsActivateOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { eventId, options },
      activateOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const rewardOperationSpec: coreClient.OperationSpec = {
  path: "/multislot/events/{eventId}/reward",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body2,
  urlParameters: [Parameters.endpoint, Parameters.eventId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const activateOperationSpec: coreClient.OperationSpec = {
  path: "/multislot/events/{eventId}/activate",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.eventId],
  headerParameters: [Parameters.accept],
  serializer
};
