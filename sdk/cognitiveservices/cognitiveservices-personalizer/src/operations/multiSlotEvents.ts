/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/multiSlotEventsMappers";
import * as Parameters from "../models/parameters";
import { PersonalizerBaseContext } from "../personalizerBaseContext";

/** Class representing a MultiSlotEvents. */
export class MultiSlotEvents {
  private readonly client: PersonalizerBaseContext;

  /**
   * Create a MultiSlotEvents.
   * @param {PersonalizerBaseContext} client Reference to the service client.
   */
  constructor(client: PersonalizerBaseContext) {
    this.client = client;
  }

  /**
   * Report reward that resulted from using the action specified in rewardActionId for the slot.
   * @summary Post multi-slot Rewards.
   * @param eventId The event id this reward applies to.
   * @param body List of slot id and reward values. The reward should be a floating point number,
   * typically between 0 and 1.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  reward(eventId: string, body: Models.MultiSlotRewardRequest, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param eventId The event id this reward applies to.
   * @param body List of slot id and reward values. The reward should be a floating point number,
   * typically between 0 and 1.
   * @param callback The callback
   */
  reward(eventId: string, body: Models.MultiSlotRewardRequest, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param eventId The event id this reward applies to.
   * @param body List of slot id and reward values. The reward should be a floating point number,
   * typically between 0 and 1.
   * @param options The optional parameters
   * @param callback The callback
   */
  reward(eventId: string, body: Models.MultiSlotRewardRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  reward(eventId: string, body: Models.MultiSlotRewardRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        eventId,
        body,
        options
      },
      rewardOperationSpec,
      callback);
  }

  /**
   * Report that the specified event was actually used or displayed to the user and a rewards should
   * be expected for it.
   * @summary Activate multi-slot Event.
   * @param eventId The event ID this activation applies to.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  activate(eventId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param eventId The event ID this activation applies to.
   * @param callback The callback
   */
  activate(eventId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param eventId The event ID this activation applies to.
   * @param options The optional parameters
   * @param callback The callback
   */
  activate(eventId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  activate(eventId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        eventId,
        options
      },
      activateOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const rewardOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "multislot/events/{eventId}/reward",
  urlParameters: [
    Parameters.endpoint,
    Parameters.eventId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.MultiSlotRewardRequest,
      required: true
    }
  },
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const activateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "multislot/events/{eventId}/activate",
  urlParameters: [
    Parameters.endpoint,
    Parameters.eventId
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
