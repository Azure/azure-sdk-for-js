/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/serviceConfigurationOperationsMappers";
import * as Parameters from "../models/parameters";
import { PersonalizerBaseContext } from "../personalizerBaseContext";

/** Class representing a ServiceConfigurationOperations. */
export class ServiceConfigurationOperations {
  private readonly client: PersonalizerBaseContext;

  /**
   * Create a ServiceConfigurationOperations.
   * @param {PersonalizerBaseContext} client Reference to the service client.
   */
  constructor(client: PersonalizerBaseContext) {
    this.client = client;
  }

  /**
   * Update the Personalizer service configuration.
   * @summary Update Service Configuration.
   * @param config The personalizer service configuration.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceConfigurationUpdateResponse>
   */
  update(config: Models.ServiceConfiguration, options?: msRest.RequestOptionsBase): Promise<Models.ServiceConfigurationUpdateResponse>;
  /**
   * @param config The personalizer service configuration.
   * @param callback The callback
   */
  update(config: Models.ServiceConfiguration, callback: msRest.ServiceCallback<Models.ServiceConfiguration>): void;
  /**
   * @param config The personalizer service configuration.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(config: Models.ServiceConfiguration, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ServiceConfiguration>): void;
  update(config: Models.ServiceConfiguration, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ServiceConfiguration>, callback?: msRest.ServiceCallback<Models.ServiceConfiguration>): Promise<Models.ServiceConfigurationUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        config,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.ServiceConfigurationUpdateResponse>;
  }

  /**
   * Get the Personalizer service configuration.
   * @summary Get Service Configuration.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceConfigurationGetResponse>
   */
  get(options?: msRest.RequestOptionsBase): Promise<Models.ServiceConfigurationGetResponse>;
  /**
   * @param callback The callback
   */
  get(callback: msRest.ServiceCallback<Models.ServiceConfiguration>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ServiceConfiguration>): void;
  get(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ServiceConfiguration>, callback?: msRest.ServiceCallback<Models.ServiceConfiguration>): Promise<Models.ServiceConfigurationGetResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ServiceConfigurationGetResponse>;
  }

  /**
   * @summary Apply Learning Settings and model from a pre-existing Offline Evaluation, making them
   * the current online Learning Settings and model and replacing the previous ones.
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  applyFromEvaluation(body: Models.PolicyReferenceContract, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  applyFromEvaluation(body: Models.PolicyReferenceContract, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  applyFromEvaluation(body: Models.PolicyReferenceContract, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  applyFromEvaluation(body: Models.PolicyReferenceContract, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        body,
        options
      },
      applyFromEvaluationOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "configurations/service",
  urlParameters: [
    Parameters.endpoint
  ],
  requestBody: {
    parameterPath: "config",
    mapper: {
      ...Mappers.ServiceConfiguration,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ServiceConfiguration
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "configurations/service",
  urlParameters: [
    Parameters.endpoint
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ServiceConfiguration
    },
    default: {}
  },
  serializer
};

const applyFromEvaluationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "configurations/applyFromEvaluation",
  urlParameters: [
    Parameters.endpoint
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.PolicyReferenceContract,
      required: true
    }
  },
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
