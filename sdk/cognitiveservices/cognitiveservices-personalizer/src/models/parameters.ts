/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { OperationParameter, OperationURLParameter } from "@azure/core-client";
import {
  ServiceConfiguration as ServiceConfigurationMapper,
  PolicyReferenceContract as PolicyReferenceContractMapper,
  PolicyContract as PolicyContractMapper,
  EvaluationContract as EvaluationContractMapper,
  RewardRequest as RewardRequestMapper,
  MultiSlotRewardRequest as MultiSlotRewardRequestMapper,
  MultiSlotRankRequest as MultiSlotRankRequestMapper,
  RankRequest as RankRequestMapper
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const endpoint: OperationURLParameter = {
  parameterPath: "endpoint",
  mapper: {
    serializedName: "Endpoint",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const config: OperationParameter = {
  parameterPath: "config",
  mapper: ServiceConfigurationMapper
};

export const body: OperationParameter = {
  parameterPath: "body",
  mapper: PolicyReferenceContractMapper
};

export const policy: OperationParameter = {
  parameterPath: "policy",
  mapper: PolicyContractMapper
};

export const evaluationId: OperationURLParameter = {
  parameterPath: "evaluationId",
  mapper: {
    constraints: {
      MaxLength: 256
    },
    serializedName: "evaluationId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const evaluation: OperationParameter = {
  parameterPath: "evaluation",
  mapper: EvaluationContractMapper
};

export const reward: OperationParameter = {
  parameterPath: "reward",
  mapper: RewardRequestMapper
};

export const eventId: OperationURLParameter = {
  parameterPath: "eventId",
  mapper: {
    constraints: {
      MaxLength: 256
    },
    serializedName: "eventId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType1: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/octet-stream",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const body1: OperationParameter = {
  parameterPath: "body",
  mapper: {
    serializedName: "body",
    required: true,
    type: {
      name: "Stream"
    }
  }
};

export const accept1: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const accept2: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/octet-stream",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const body2: OperationParameter = {
  parameterPath: "body",
  mapper: MultiSlotRewardRequestMapper
};

export const body3: OperationParameter = {
  parameterPath: "body",
  mapper: MultiSlotRankRequestMapper
};

export const rankRequest: OperationParameter = {
  parameterPath: "rankRequest",
  mapper: RankRequestMapper
};
