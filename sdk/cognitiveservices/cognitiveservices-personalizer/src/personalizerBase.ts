/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import {
  ServiceConfigurationOperationsImpl,
  PolicyImpl,
  EvaluationsImpl,
  EventsImpl,
  LogImpl,
  ModelImpl,
  MultiSlotEventsImpl,
  MultiSlotImpl
} from "./operations";
import {
  ServiceConfigurationOperations,
  Policy,
  Evaluations,
  Events,
  Log,
  Model,
  MultiSlotEvents,
  MultiSlot
} from "./operationsInterfaces";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import {
  PersonalizerBaseOptionalParams,
  RankRequest,
  RankOptionalParams,
  RankOperationResponse
} from "./models";

export class PersonalizerBase extends coreClient.ServiceClient {
  endpoint: string;

  /**
   * Initializes a new instance of the PersonalizerBase class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param endpoint Supported Cognitive Services endpoint.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    endpoint: string,
    options?: PersonalizerBaseOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (endpoint === undefined) {
      throw new Error("'endpoint' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: PersonalizerBaseOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-cognitiveservices-personalizer/1.0.0-beta.1`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      baseUri: options.endpoint || "{Endpoint}/personalizer/v1.1-preview.2"
    };
    super(optionsWithDefaults);
    // Parameter assignments
    this.endpoint = endpoint;
    this.serviceConfigurationOperations = new ServiceConfigurationOperationsImpl(
      this
    );
    this.policy = new PolicyImpl(this);
    this.evaluations = new EvaluationsImpl(this);
    this.events = new EventsImpl(this);
    this.log = new LogImpl(this);
    this.model = new ModelImpl(this);
    this.multiSlotEvents = new MultiSlotEventsImpl(this);
    this.multiSlot = new MultiSlotImpl(this);
  }

  /**
   * Submit a Personalizer rank request. Receives a context and a list of actions. Returns which of the
   * provided actions should be used by your application, in rewardActionId.
   * @param rankRequest A Personalizer Rank request.
   * @param options The options parameters.
   */
  rank(
    rankRequest: RankRequest,
    options?: RankOptionalParams
  ): Promise<RankOperationResponse> {
    return this.sendOperationRequest(
      { rankRequest, options },
      rankOperationSpec
    );
  }

  serviceConfigurationOperations: ServiceConfigurationOperations;
  policy: Policy;
  evaluations: Evaluations;
  events: Events;
  log: Log;
  model: Model;
  multiSlotEvents: MultiSlotEvents;
  multiSlot: MultiSlot;
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const rankOperationSpec: coreClient.OperationSpec = {
  path: "/rank",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.RankResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.rankRequest,
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
