/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { ServiceClientOptions } from "@azure/ms-rest-js";
import * as msRest from "@azure/ms-rest-js";

/**
 * Defines the query context that Bing used for the request.
 */
export interface QueryContext {
  /**
   * Polymorphic Discriminator
   */
  _type: "QueryContext";
  /**
   * The query string as specified in the request.
   */
  originalQuery: string;
  /**
   * The query string used by Bing to perform the query. Bing uses the altered query string if the
   * original query string contained spelling mistakes. For example, if the query string is "saling
   * downwind", the altered query string will be "sailing downwind". This field is included only if
   * the original query string contains a spelling mistake.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly alteredQuery?: string;
  /**
   * AlteredQuery that is formatted for display purpose. The query string in the
   * AlterationDisplayQuery can be html-escaped and can contain hit-highlighting characters
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly alterationDisplayQuery?: string;
  /**
   * The query string to use to force Bing to use the original string. For example, if the query
   * string is "saling downwind", the override query string will be "+saling downwind". Remember to
   * encode the query string which results in "%2Bsaling+downwind". This field is included only if
   * the original query string contains a spelling mistake.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly alterationOverrideQuery?: string;
  /**
   * A Boolean value that indicates whether the specified query has adult intent. The value is true
   * if the query has adult intent; otherwise, false.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly adultIntent?: boolean;
  /**
   * A Boolean value that indicates whether Bing requires the user's location to provide accurate
   * results. If you specified the user's location by using the X-MSEdge-ClientIP and
   * X-Search-Location headers, you can ignore this field. For location aware queries, such as
   * "today's weather" or "restaurants near me" that need the user's location to provide accurate
   * results, this field is set to true. For location aware queries that include the location (for
   * example, "Seattle weather"), this field is set to false. This field is also set to false for
   * queries that are not location aware, such as "best sellers".
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly askUserForLocation?: boolean;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isTransactional?: boolean;
}

/**
 * Defines additional information about an entity such as type hints.
 */
export interface EntitiesEntityPresentationInfo {
  /**
   * Polymorphic Discriminator
   */
  _type: "Entities/EntityPresentationInfo";
  /**
   * The supported scenario. Possible values include: 'DominantEntity', 'DisambiguationItem',
   * 'ListItem'. Default value: 'DominantEntity'.
   */
  entityScenario: EntityScenario;
  /**
   * A list of hints that indicate the entity's type. The list could contain a single hint such as
   * Movie or a list of hints such as Place, LocalBusiness, Restaurant. Each successive hint in the
   * array narrows the entity's type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly entityTypeHints?: EntityType[];
  /**
   * A display version of the entity hint. For example, if entityTypeHints is Artist, this field
   * may be set to American Singer.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly entityTypeDisplayHint?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly query?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly entitySubTypeHints?: string[];
}

/**
 * Contains the possible cases for ResponseBase.
 */
export type ResponseBaseUnion = ResponseBase | IdentifiableUnion;

/**
 * Response base
 */
export interface ResponseBase {
  /**
   * Polymorphic Discriminator
   */
  _type: "ResponseBase";
}

/**
 * Contains the possible cases for Identifiable.
 */
export type IdentifiableUnion = Identifiable | ResponseUnion;

/**
 * Defines the identity of a resource.
 */
export interface Identifiable {
  /**
   * Polymorphic Discriminator
   */
  _type: "Identifiable";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
}

/**
 * Contains the possible cases for Response.
 */
export type ResponseUnion = Response | ThingUnion | SearchResponse | AnswerUnion | ErrorResponse;

/**
 * Defines a response. All schemas that return at the root of the response must inherit from this
 * object.
 */
export interface Response {
  /**
   * Polymorphic Discriminator
   */
  _type: "Response";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL to Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly potentialAction?: ActionUnion[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly immediateAction?: ActionUnion[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly preferredClickthroughUrl?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly adaptiveCard?: string;
}

/**
 * Contains the possible cases for Thing.
 */
export type ThingUnion = Thing | Place | CreativeWorkUnion | IntangibleUnion;

/**
 * Defines a thing.
 */
export interface Thing {
  /**
   * Polymorphic Discriminator
   */
  _type: "Thing";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL to Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly potentialAction?: ActionUnion[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly immediateAction?: ActionUnion[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly preferredClickthroughUrl?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly adaptiveCard?: string;
  /**
   * The name of the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The URL to get more information about the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly url?: string;
  /**
   * Additional information about the entity such as hints that you can use to determine the
   * entity's type. To determine the entity's type, use the entityScenario and entityTypeHint
   * fields.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly entityPresentationInfo?: EntitiesEntityPresentationInfo;
}

/**
 * Contains the possible cases for Answer.
 */
export type AnswerUnion = Answer | SearchResultsAnswerUnion;

/**
 * Defines an answer.
 */
export interface Answer {
  /**
   * Polymorphic Discriminator
   */
  _type: "Answer";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL to Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly potentialAction?: ActionUnion[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly immediateAction?: ActionUnion[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly preferredClickthroughUrl?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly adaptiveCard?: string;
}

/**
 * Contains the possible cases for SearchResultsAnswer.
 */
export type SearchResultsAnswerUnion = SearchResultsAnswer | Places;

/**
 * Defines a search result answer.
 */
export interface SearchResultsAnswer {
  /**
   * Polymorphic Discriminator
   */
  _type: "SearchResultsAnswer";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL to Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly potentialAction?: ActionUnion[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly immediateAction?: ActionUnion[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly preferredClickthroughUrl?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly adaptiveCard?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly queryContext?: QueryContext;
  /**
   * The estimated number of webpages that are relevant to the query. Use this number along with
   * the count and offset query parameters to page the results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly totalEstimatedMatches?: number;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isFamilyFriendly?: boolean;
}

/**
 * Defines a local entity answer.
 */
export interface Places {
  /**
   * Polymorphic Discriminator
   */
  _type: "Places";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL to Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly potentialAction?: ActionUnion[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly immediateAction?: ActionUnion[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly preferredClickthroughUrl?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly adaptiveCard?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly queryContext?: QueryContext;
  /**
   * The estimated number of webpages that are relevant to the query. Use this number along with
   * the count and offset query parameters to page the results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly totalEstimatedMatches?: number;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isFamilyFriendly?: boolean;
  /**
   * A list of local entities, such as restaurants or hotels.
   */
  value: ThingUnion[];
}

/**
 * Defines the top-level object that the response includes when the request succeeds.
 */
export interface SearchResponse {
  /**
   * Polymorphic Discriminator
   */
  _type: "SearchResponse";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL to Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly potentialAction?: ActionUnion[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly immediateAction?: ActionUnion[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly preferredClickthroughUrl?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly adaptiveCard?: string;
  /**
   * An object that contains the query string that Bing used for the request. This object contains
   * the query string as entered by the user. It may also contain an altered query string that Bing
   * used for the query if the query string contained a spelling mistake.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly queryContext?: QueryContext;
  /**
   * A list of local entities such as restaurants or hotels that are relevant to the query.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly places?: Places;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lottery?: SearchResultsAnswerUnion;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly searchResultsConfidenceScore?: number;
}

/**
 * An interface representing GeoCoordinates.
 */
export interface GeoCoordinates {
  /**
   * Polymorphic Discriminator
   */
  _type: "GeoCoordinates";
  latitude: number;
  longitude: number;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly elevation?: number;
}

/**
 * Contains the possible cases for Intangible.
 */
export type IntangibleUnion = Intangible | StructuredValueUnion;

/**
 * A utility class that serves as the umbrella for a number of 'intangible' things such as
 * quantities, structured values, etc.
 */
export interface Intangible {
  /**
   * Polymorphic Discriminator
   */
  _type: "Intangible";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL to Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly potentialAction?: ActionUnion[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly immediateAction?: ActionUnion[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly preferredClickthroughUrl?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly adaptiveCard?: string;
  /**
   * The name of the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The URL to get more information about the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly url?: string;
  /**
   * Additional information about the entity such as hints that you can use to determine the
   * entity's type. To determine the entity's type, use the entityScenario and entityTypeHint
   * fields.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly entityPresentationInfo?: EntitiesEntityPresentationInfo;
}

/**
 * Contains the possible cases for StructuredValue.
 */
export type StructuredValueUnion = StructuredValue | PostalAddress;

/**
 * An interface representing StructuredValue.
 */
export interface StructuredValue {
  /**
   * Polymorphic Discriminator
   */
  _type: "StructuredValue";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL to Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly potentialAction?: ActionUnion[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly immediateAction?: ActionUnion[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly preferredClickthroughUrl?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly adaptiveCard?: string;
  /**
   * The name of the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The URL to get more information about the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly url?: string;
  /**
   * Additional information about the entity such as hints that you can use to determine the
   * entity's type. To determine the entity's type, use the entityScenario and entityTypeHint
   * fields.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly entityPresentationInfo?: EntitiesEntityPresentationInfo;
}

/**
 * Defines a postal address.
 */
export interface PostalAddress {
  /**
   * Polymorphic Discriminator
   */
  _type: "PostalAddress";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL to Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly potentialAction?: ActionUnion[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly immediateAction?: ActionUnion[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly preferredClickthroughUrl?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly adaptiveCard?: string;
  /**
   * The name of the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The URL to get more information about the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly url?: string;
  /**
   * Additional information about the entity such as hints that you can use to determine the
   * entity's type. To determine the entity's type, use the entityScenario and entityTypeHint
   * fields.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly entityPresentationInfo?: EntitiesEntityPresentationInfo;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly streetAddress?: string;
  /**
   * The city where the street address is located. For example, Seattle.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly addressLocality?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly addressSubregion?: string;
  /**
   * The state or province code where the street address is located. This could be the two-letter
   * code. For example, WA, or the full name , Washington.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly addressRegion?: string;
  /**
   * The zip code or postal code where the street address is located. For example, 98052.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly postalCode?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly postOfficeBoxNumber?: string;
  /**
   * The country/region where the street address is located. This could be the two-letter ISO code.
   * For example, US, or the full name, United States.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly addressCountry?: string;
  /**
   * The two letter ISO code of this country. For example, US.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly countryIso?: string;
  /**
   * The neighborhood where the street address is located. For example, Westlake.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly neighborhood?: string;
  /**
   * Region Abbreviation. For example, WA.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly addressRegionAbbreviation?: string;
  /**
   * The complete address. For example, 2100 Westlake Ave N, Bellevue, WA 98052.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly text?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly houseNumber?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly streetName?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly formattingRuleId?: string;
}

/**
 * Defines information about a local entity, such as a restaurant or hotel.
 */
export interface Place {
  /**
   * Polymorphic Discriminator
   */
  _type: "Place";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL to Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly potentialAction?: ActionUnion[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly immediateAction?: ActionUnion[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly preferredClickthroughUrl?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly adaptiveCard?: string;
  /**
   * The name of the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The URL to get more information about the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly url?: string;
  /**
   * Additional information about the entity such as hints that you can use to determine the
   * entity's type. To determine the entity's type, use the entityScenario and entityTypeHint
   * fields.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly entityPresentationInfo?: EntitiesEntityPresentationInfo;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly geo?: GeoCoordinates;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly routablePoint?: GeoCoordinates;
  /**
   * The postal address of where the entity is located
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly address?: PostalAddress;
  /**
   * The entity's telephone number
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly telephone?: string;
}

/**
 * Contains the possible cases for CreativeWork.
 */
export type CreativeWorkUnion = CreativeWork | ActionUnion;

/**
 * The most generic kind of creative work, including books, movies, photographs, software programs,
 * etc.
 */
export interface CreativeWork {
  /**
   * Polymorphic Discriminator
   */
  _type: "CreativeWork";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL to Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly potentialAction?: ActionUnion[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly immediateAction?: ActionUnion[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly preferredClickthroughUrl?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly adaptiveCard?: string;
  /**
   * The name of the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The URL to get more information about the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly url?: string;
  /**
   * Additional information about the entity such as hints that you can use to determine the
   * entity's type. To determine the entity's type, use the entityScenario and entityTypeHint
   * fields.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly entityPresentationInfo?: EntitiesEntityPresentationInfo;
  /**
   * The URL to a thumbnail of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly thumbnailUrl?: string;
  /**
   * For internal use only.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly about?: ThingUnion[];
  /**
   * For internal use only.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly mentions?: ThingUnion[];
  /**
   * The source of the creative work.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provider?: ThingUnion[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly creator?: ThingUnion;
  /**
   * Text content of this creative work
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly text?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly discussionUrl?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commentCount?: number;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly mainEntity?: ThingUnion;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly headLine?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly copyrightHolder?: ThingUnion;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly copyrightYear?: number;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly disclaimer?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isAccessibleForFree?: boolean;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly genre?: string[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isFamilyFriendly?: boolean;
}

/**
 * Contains the possible cases for Action.
 */
export type ActionUnion = Action | SearchAction;

/**
 * Defines an action.
 */
export interface Action {
  /**
   * Polymorphic Discriminator
   */
  _type: "Action";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL to Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly potentialAction?: ActionUnion[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly immediateAction?: ActionUnion[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly preferredClickthroughUrl?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly adaptiveCard?: string;
  /**
   * The name of the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The URL to get more information about the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly url?: string;
  /**
   * Additional information about the entity such as hints that you can use to determine the
   * entity's type. To determine the entity's type, use the entityScenario and entityTypeHint
   * fields.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly entityPresentationInfo?: EntitiesEntityPresentationInfo;
  /**
   * The URL to a thumbnail of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly thumbnailUrl?: string;
  /**
   * For internal use only.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly about?: ThingUnion[];
  /**
   * For internal use only.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly mentions?: ThingUnion[];
  /**
   * The source of the creative work.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provider?: ThingUnion[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly creator?: ThingUnion;
  /**
   * Text content of this creative work
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly text?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly discussionUrl?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commentCount?: number;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly mainEntity?: ThingUnion;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly headLine?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly copyrightHolder?: ThingUnion;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly copyrightYear?: number;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly disclaimer?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isAccessibleForFree?: boolean;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly genre?: string[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isFamilyFriendly?: boolean;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly location?: Place[];
  /**
   * The result produced in the action.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly result?: ThingUnion[];
  /**
   * A display name for the action.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly displayName?: string;
  /**
   * A Boolean representing whether this result is the top action.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isTopAction?: boolean;
  /**
   * Use this URL to get additional data to determine how to take the appropriate action. For
   * example, the serviceUrl might return JSON along with an image URL.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serviceUrl?: string;
}

/**
 * Defines the error that occurred.
 */
export interface ErrorModel {
  /**
   * Polymorphic Discriminator
   */
  _type: "Error";
  /**
   * The error code that identifies the category of error. Possible values include: 'None',
   * 'ServerError', 'InvalidRequest', 'RateLimitExceeded', 'InvalidAuthorization',
   * 'InsufficientAuthorization'. Default value: 'None'.
   */
  code: ErrorCode;
  /**
   * The error code that further helps to identify the error. Possible values include:
   * 'UnexpectedError', 'ResourceError', 'NotImplemented', 'ParameterMissing',
   * 'ParameterInvalidValue', 'HttpNotAllowed', 'Blocked', 'AuthorizationMissing',
   * 'AuthorizationRedundancy', 'AuthorizationDisabled', 'AuthorizationExpired'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly subCode?: ErrorSubCode;
  /**
   * A description of the error.
   */
  message: string;
  /**
   * A description that provides additional information about the error.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly moreDetails?: string;
  /**
   * The parameter in the request that caused the error.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly parameter?: string;
  /**
   * The parameter's value in the request that was not valid.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: string;
}

/**
 * The top-level response that represents a failed request.
 */
export interface ErrorResponse {
  /**
   * Polymorphic Discriminator
   */
  _type: "ErrorResponse";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL to Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly potentialAction?: ActionUnion[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly immediateAction?: ActionUnion[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly preferredClickthroughUrl?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly adaptiveCard?: string;
  /**
   * A list of errors that describe the reasons why the request failed.
   */
  errors: ErrorModel[];
}

/**
 * An interface representing SearchAction.
 */
export interface SearchAction {
  /**
   * Polymorphic Discriminator
   */
  _type: "SearchAction";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL to Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly potentialAction?: ActionUnion[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly immediateAction?: ActionUnion[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly preferredClickthroughUrl?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly adaptiveCard?: string;
  /**
   * The name of the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The URL to get more information about the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly url?: string;
  /**
   * Additional information about the entity such as hints that you can use to determine the
   * entity's type. To determine the entity's type, use the entityScenario and entityTypeHint
   * fields.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly entityPresentationInfo?: EntitiesEntityPresentationInfo;
  /**
   * The URL to a thumbnail of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly thumbnailUrl?: string;
  /**
   * For internal use only.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly about?: ThingUnion[];
  /**
   * For internal use only.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly mentions?: ThingUnion[];
  /**
   * The source of the creative work.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provider?: ThingUnion[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly creator?: ThingUnion;
  /**
   * Text content of this creative work
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly text?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly discussionUrl?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commentCount?: number;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly mainEntity?: ThingUnion;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly headLine?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly copyrightHolder?: ThingUnion;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly copyrightYear?: number;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly disclaimer?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isAccessibleForFree?: boolean;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly genre?: string[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isFamilyFriendly?: boolean;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly location?: Place[];
  /**
   * The result produced in the action.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly result?: ThingUnion[];
  /**
   * A display name for the action.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly displayName?: string;
  /**
   * A Boolean representing whether this result is the top action.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isTopAction?: boolean;
  /**
   * Use this URL to get additional data to determine how to take the appropriate action. For
   * example, the serviceUrl might return JSON along with an image URL.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serviceUrl?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly displayText?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly query?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly richContent?: AnswerUnion[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly formattingRuleId?: string;
}

/**
 * An interface representing LocalSearchClientOptions.
 */
export interface LocalSearchClientOptions extends ServiceClientOptions {
  baseUri?: string;
}

/**
 * Optional Parameters.
 */
export interface LocalSearchOptionalParams extends msRest.RequestOptionsBase {
  /**
   * A comma-delimited list of one or more languages to use for user interface strings. The list is
   * in decreasing order of preference. For additional information, including expected format, see
   * [RFC2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html). This header and the setLang
   * query parameter are mutually exclusive; do not specify both. If you set this header, you must
   * also specify the cc query parameter. Bing will use the first supported language it finds from
   * the list, and combine that language with the cc parameter value to determine the market to
   * return results for. If the list does not include a supported language, Bing will find the
   * closest language and market that supports the request, and may use an aggregated or default
   * market for the results instead of a specified one. You should use this header and the cc query
   * parameter only if you specify multiple languages; otherwise, you should use the mkt and
   * setLang query parameters. A user interface string is a string that's used as a label in a user
   * interface. There are very few user interface strings in the JSON response objects. Any links
   * in the response objects to Bing.com properties will apply the specified language.
   */
  acceptLanguage?: string;
  /**
   * By default, Bing returns cached content, if available. To prevent Bing from returning cached
   * content, set the Pragma header to no-cache (for example, Pragma: no-cache).
   */
  pragma?: string;
  /**
   * The user agent originating the request. Bing uses the user agent to provide mobile users with
   * an optimized experience. Although optional, you are strongly encouraged to always specify this
   * header. The user-agent should be the same string that any commonly used browser would send.
   * For information about user agents, see [RFC
   * 2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).
   */
  userAgent?: string;
  /**
   * Bing uses this header to provide users with consistent behavior across Bing API calls. Bing
   * often flights new features and improvements, and it uses the client ID as a key for assigning
   * traffic on different flights. If you do not use the same client ID for a user across multiple
   * requests, then Bing may assign the user to multiple conflicting flights. Being assigned to
   * multiple conflicting flights can lead to an inconsistent user experience. For example, if the
   * second request has a different flight assignment than the first, the experience may be
   * unexpected. Also, Bing can use the client ID to tailor web results to that client ID’s search
   * history, providing a richer experience for the user. Bing also uses this header to help
   * improve result rankings by analyzing the activity generated by a client ID. The relevance
   * improvements help with better quality of results delivered by Bing APIs and in turn enables
   * higher click-through rates for the API consumer. IMPORTANT: Although optional, you should
   * consider this header required. Persisting the client ID across multiple requests for the same
   * end user and device combination enables 1) the API consumer to receive a consistent user
   * experience, and 2) higher click-through rates via better quality of results from the Bing
   * APIs. Each user that uses your application on the device must have a unique, Bing generated
   * client ID. If you do not include this header in the request, Bing generates an ID and returns
   * it in the X-MSEdge-ClientID response header. The only time that you should NOT include this
   * header in a request is the first time the user uses your app on that device. Use the client ID
   * for each Bing API request that your app makes for this user on the device. Persist the client
   * ID. To persist the ID in a browser app, use a persistent HTTP cookie to ensure the ID is used
   * across all sessions. Do not use a session cookie. For other apps such as mobile apps, use the
   * device's persistent storage to persist the ID. The next time the user uses your app on that
   * device, get the client ID that you persisted. Bing responses may or may not include this
   * header. If the response includes this header, capture the client ID and use it for all
   * subsequent Bing requests for the user on that device. If you include the X-MSEdge-ClientID,
   * you must not include cookies in the request.
   */
  clientId?: string;
  /**
   * The IPv4 or IPv6 address of the client device. The IP address is used to discover the user's
   * location. Bing uses the location information to determine safe search behavior. Although
   * optional, you are encouraged to always specify this header and the X-Search-Location header.
   * Do not obfuscate the address (for example, by changing the last octet to 0). Obfuscating the
   * address results in the location not being anywhere near the device's actual location, which
   * may result in Bing serving erroneous results.
   */
  clientIp?: string;
  /**
   * A semicolon-delimited list of key/value pairs that describe the client's geographical
   * location. Bing uses the location information to determine safe search behavior and to return
   * relevant local content. Specify the key/value pair as <key>:<value>. The following are the
   * keys that you use to specify the user's location. lat (required): The latitude of the client's
   * location, in degrees. The latitude must be greater than or equal to -90.0 and less than or
   * equal to +90.0. Negative values indicate southern latitudes and positive values indicate
   * northern latitudes. long (required): The longitude of the client's location, in degrees. The
   * longitude must be greater than or equal to -180.0 and less than or equal to +180.0. Negative
   * values indicate western longitudes and positive values indicate eastern longitudes. re
   * (required): The radius, in meters, which specifies the horizontal accuracy of the coordinates.
   * Pass the value returned by the device's location service. Typical values might be 22m for
   * GPS/Wi-Fi, 380m for cell tower triangulation, and 18,000m for reverse IP lookup. ts
   * (optional): The UTC UNIX timestamp of when the client was at the location. (The UNIX timestamp
   * is the number of seconds since January 1, 1970.) head (optional): The client's relative
   * heading or direction of travel. Specify the direction of travel as degrees from 0 through 360,
   * counting clockwise relative to true north. Specify this key only if the sp key is nonzero. sp
   * (optional): The horizontal velocity (speed), in meters per second, that the client device is
   * traveling. alt (optional): The altitude of the client device, in meters. are (optional): The
   * radius, in meters, that specifies the vertical accuracy of the coordinates. Specify this key
   * only if you specify the alt key. Although many of the keys are optional, the more information
   * that you provide, the more accurate the location results are. Although optional, you are
   * encouraged to always specify the user's geographical location. Providing the location is
   * especially important if the client's IP address does not accurately reflect the user's
   * physical location (for example, if the client uses VPN). For optimal results, you should
   * include this header and the X-MSEdge-ClientIP header, but at a minimum, you should include
   * this header.
   */
  location?: string;
  /**
   * A 2-character country code of the country where the results come from. This API supports only
   * the United States market. If you specify this query parameter, it must be set to us. If you
   * set this parameter, you must also specify the Accept-Language header. Bing uses the first
   * supported language it finds from the languages list, and combine that language with the
   * country code that you specify to determine the market to return results for. If the languages
   * list does not include a supported language, Bing finds the closest language and market that
   * supports the request, or it may use an aggregated or default market for the results instead of
   * a specified one. You should use this query parameter and the Accept-Language query parameter
   * only if you specify multiple languages; otherwise, you should use the mkt and setLang query
   * parameters. This parameter and the mkt query parameter are mutually exclusive—do not specify
   * both.
   */
  countryCode?: string;
  /**
   * The market where the results come from. You are strongly encouraged to always specify the
   * market, if known. Specifying the market helps Bing route the request and return an appropriate
   * and optimal response. This parameter and the cc query parameter are mutually exclusive—do not
   * specify both. Default value: 'en-us'.
   */
  market?: string;
  /**
   * comma-delimited list of business categories to search for. Supported categories can be
   * high-level such as EatDrink, Shop, SeeDo.
   */
  localCategories?: string;
  /**
   * Preferred location to search around, expressed as Latitude, longitude and radius in meters.
   * For example 47.61503,-122.1719,5000. Note that circular view should only be used to indicate a
   * search around a point on the map, not as an approximation for a view port of a map rectangle.
   */
  localCircularView?: string;
  /**
   * Preferred bounding box for results, specified in NW_latitude, NW_Longitude, SE_Latitude,
   * SE_Longitude format. For example 47.64,-122.13,47.63,-122.12. These values are lat, long pairs
   * for the Northwest corner and the Southeast corner of a rectangle.
   */
  localMapView?: string;
  /**
   * Preferred number of results to return. If not specified, then Bing returns 1-20 of the most
   * relevant results.
   */
  count?: string;
  /**
   * First result to return. zero-based. default is 0.
   */
  first?: string;
  /**
   * The media type to use for the response. The following are the possible case-insensitive
   * values: JSON, JSONLD. The default is JSON. If you specify JSONLD, the response body includes
   * JSON-LD objects that contain the search results.
   */
  responseFormat?: ResponseFormat[];
  /**
   * A filter used to filter adult content. Off: Return webpages with adult text, images, or
   * videos. Moderate: Return webpages with adult text, but not adult images or videos. Strict: Do
   * not return webpages with adult text, images, or videos. The default is Moderate. If the
   * request comes from a market that Bing's adult policy requires that safeSearch is set to
   * Strict, Bing ignores the safeSearch value and uses Strict. If you use the site: query
   * operator, there is the chance that the response may contain adult content regardless of what
   * the safeSearch query parameter is set to. Use site: only if you are aware of the content on
   * the site and your scenario supports the possibility of adult content. Possible values include:
   * 'Off', 'Moderate', 'Strict'
   */
  safeSearch?: SafeSearch;
  /**
   * The language to use for user interface strings. Specify the language using the ISO 639-1
   * 2-letter language code. For example, the language code for English is EN. The default is EN
   * (English). Although optional, you should always specify the language. Typically, you set
   * setLang to the same language specified by mkt unless the user wants the user interface strings
   * displayed in a different language. This parameter and the Accept-Language header are mutually
   * exclusive; do not specify both. A user interface string is a string that's used as a label in
   * a user interface. There are few user interface strings in the JSON response objects. Also, any
   * links to Bing.com properties in the response objects apply the specified language.
   */
  setLang?: string;
}

/**
 * Defines values for EntityScenario.
 * Possible values include: 'DominantEntity', 'DisambiguationItem', 'ListItem'
 * @readonly
 * @enum {string}
 */
export type EntityScenario = 'DominantEntity' | 'DisambiguationItem' | 'ListItem';

/**
 * Defines values for EntityType.
 * Possible values include: 'Place', 'LocalBusiness', 'Restaurant', 'Hotel'
 * @readonly
 * @enum {string}
 */
export type EntityType = 'Place' | 'LocalBusiness' | 'Restaurant' | 'Hotel';

/**
 * Defines values for ErrorCode.
 * Possible values include: 'None', 'ServerError', 'InvalidRequest', 'RateLimitExceeded',
 * 'InvalidAuthorization', 'InsufficientAuthorization'
 * @readonly
 * @enum {string}
 */
export type ErrorCode = 'None' | 'ServerError' | 'InvalidRequest' | 'RateLimitExceeded' | 'InvalidAuthorization' | 'InsufficientAuthorization';

/**
 * Defines values for ErrorSubCode.
 * Possible values include: 'UnexpectedError', 'ResourceError', 'NotImplemented',
 * 'ParameterMissing', 'ParameterInvalidValue', 'HttpNotAllowed', 'Blocked',
 * 'AuthorizationMissing', 'AuthorizationRedundancy', 'AuthorizationDisabled',
 * 'AuthorizationExpired'
 * @readonly
 * @enum {string}
 */
export type ErrorSubCode = 'UnexpectedError' | 'ResourceError' | 'NotImplemented' | 'ParameterMissing' | 'ParameterInvalidValue' | 'HttpNotAllowed' | 'Blocked' | 'AuthorizationMissing' | 'AuthorizationRedundancy' | 'AuthorizationDisabled' | 'AuthorizationExpired';

/**
 * Defines values for ResponseFormat.
 * Possible values include: 'Json', 'JsonLd'
 * @readonly
 * @enum {string}
 */
export type ResponseFormat = 'Json' | 'JsonLd';

/**
 * Defines values for SafeSearch.
 * Possible values include: 'Off', 'Moderate', 'Strict'
 * @readonly
 * @enum {string}
 */
export type SafeSearch = 'Off' | 'Moderate' | 'Strict';

/**
 * Contains response data for the search operation.
 */
export type LocalSearchResponse = SearchResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SearchResponse;
    };
};
