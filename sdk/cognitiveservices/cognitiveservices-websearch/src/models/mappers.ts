/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as msRest from "@azure/ms-rest-js";


export const QueryContext: msRest.CompositeMapper = {
  serializedName: "QueryContext",
  type: {
    name: "Composite",
    className: "QueryContext",
    modelProperties: {
      originalQuery: {
        required: true,
        serializedName: "originalQuery",
        type: {
          name: "String"
        }
      },
      alteredQuery: {
        readOnly: true,
        serializedName: "alteredQuery",
        type: {
          name: "String"
        }
      },
      alterationOverrideQuery: {
        readOnly: true,
        serializedName: "alterationOverrideQuery",
        type: {
          name: "String"
        }
      },
      adultIntent: {
        readOnly: true,
        serializedName: "adultIntent",
        type: {
          name: "Boolean"
        }
      },
      askUserForLocation: {
        readOnly: true,
        serializedName: "askUserForLocation",
        type: {
          name: "Boolean"
        }
      },
      isTransactional: {
        readOnly: true,
        serializedName: "isTransactional",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const WebMetaTag: msRest.CompositeMapper = {
  serializedName: "Web/MetaTag",
  type: {
    name: "Composite",
    className: "WebMetaTag",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      content: {
        readOnly: true,
        serializedName: "content",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResponseBase: msRest.CompositeMapper = {
  serializedName: "ResponseBase",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "_type",
      clientName: "_type"
    },
    uberParent: "ResponseBase",
    className: "ResponseBase",
    modelProperties: {
      _type: {
        required: true,
        serializedName: "_type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Identifiable: msRest.CompositeMapper = {
  serializedName: "Identifiable",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "Identifiable",
    modelProperties: {
      ...ResponseBase.type.modelProperties,
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Response: msRest.CompositeMapper = {
  serializedName: "Response",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "Response",
    modelProperties: {
      ...Identifiable.type.modelProperties,
      webSearchUrl: {
        readOnly: true,
        serializedName: "webSearchUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Thing: msRest.CompositeMapper = {
  serializedName: "Thing",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "Thing",
    modelProperties: {
      ...Response.type.modelProperties,
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      url: {
        readOnly: true,
        serializedName: "url",
        type: {
          name: "String"
        }
      },
      image: {
        readOnly: true,
        serializedName: "image",
        type: {
          name: "Composite",
          className: "ImageObject"
        }
      },
      description: {
        readOnly: true,
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      bingId: {
        readOnly: true,
        serializedName: "bingId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreativeWork: msRest.CompositeMapper = {
  serializedName: "CreativeWork",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "CreativeWork",
    modelProperties: {
      ...Thing.type.modelProperties,
      thumbnailUrl: {
        readOnly: true,
        serializedName: "thumbnailUrl",
        type: {
          name: "String"
        }
      },
      provider: {
        readOnly: true,
        serializedName: "provider",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Thing"
            }
          }
        }
      },
      text: {
        readOnly: true,
        serializedName: "text",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MediaObject: msRest.CompositeMapper = {
  serializedName: "MediaObject",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "MediaObject",
    modelProperties: {
      ...CreativeWork.type.modelProperties,
      contentUrl: {
        readOnly: true,
        serializedName: "contentUrl",
        type: {
          name: "String"
        }
      },
      hostPageUrl: {
        readOnly: true,
        serializedName: "hostPageUrl",
        type: {
          name: "String"
        }
      },
      width: {
        readOnly: true,
        serializedName: "width",
        type: {
          name: "Number"
        }
      },
      height: {
        readOnly: true,
        serializedName: "height",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ImageObject: msRest.CompositeMapper = {
  serializedName: "ImageObject",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "ImageObject",
    modelProperties: {
      ...MediaObject.type.modelProperties,
      thumbnail: {
        readOnly: true,
        serializedName: "thumbnail",
        type: {
          name: "Composite",
          className: "ImageObject"
        }
      }
    }
  }
};

export const WebPage: msRest.CompositeMapper = {
  serializedName: "WebPage",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "WebPage",
    modelProperties: {
      ...CreativeWork.type.modelProperties,
      displayUrl: {
        readOnly: true,
        serializedName: "displayUrl",
        type: {
          name: "String"
        }
      },
      snippet: {
        readOnly: true,
        serializedName: "snippet",
        type: {
          name: "String"
        }
      },
      deepLinks: {
        readOnly: true,
        serializedName: "deepLinks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WebPage"
            }
          }
        }
      },
      dateLastCrawled: {
        readOnly: true,
        serializedName: "dateLastCrawled",
        type: {
          name: "String"
        }
      },
      searchTags: {
        readOnly: true,
        serializedName: "searchTags",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WebMetaTag"
            }
          }
        }
      },
      primaryImageOfPage: {
        readOnly: true,
        serializedName: "primaryImageOfPage",
        type: {
          name: "Composite",
          className: "ImageObject"
        }
      }
    }
  }
};

export const Answer: msRest.CompositeMapper = {
  serializedName: "Answer",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "Answer",
    modelProperties: {
      ...Response.type.modelProperties,
      followUpQueries: {
        readOnly: true,
        serializedName: "followUpQueries",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Query"
            }
          }
        }
      }
    }
  }
};

export const SearchResultsAnswer: msRest.CompositeMapper = {
  serializedName: "SearchResultsAnswer",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "SearchResultsAnswer",
    modelProperties: {
      ...Answer.type.modelProperties,
      queryContext: {
        readOnly: true,
        serializedName: "queryContext",
        type: {
          name: "Composite",
          className: "QueryContext"
        }
      },
      totalEstimatedMatches: {
        readOnly: true,
        serializedName: "totalEstimatedMatches",
        type: {
          name: "Number"
        }
      },
      isFamilyFriendly: {
        readOnly: true,
        serializedName: "isFamilyFriendly",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const WebWebAnswer: msRest.CompositeMapper = {
  serializedName: "Web/WebAnswer",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "WebWebAnswer",
    modelProperties: {
      ...SearchResultsAnswer.type.modelProperties,
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WebPage"
            }
          }
        }
      },
      someResultsRemoved: {
        readOnly: true,
        serializedName: "someResultsRemoved",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const Query: msRest.CompositeMapper = {
  serializedName: "Query",
  type: {
    name: "Composite",
    className: "Query",
    modelProperties: {
      text: {
        required: true,
        serializedName: "text",
        type: {
          name: "String"
        }
      },
      displayText: {
        readOnly: true,
        serializedName: "displayText",
        type: {
          name: "String"
        }
      },
      webSearchUrl: {
        readOnly: true,
        serializedName: "webSearchUrl",
        type: {
          name: "String"
        }
      },
      searchLink: {
        readOnly: true,
        serializedName: "searchLink",
        type: {
          name: "String"
        }
      },
      thumbnail: {
        readOnly: true,
        serializedName: "thumbnail",
        type: {
          name: "Composite",
          className: "ImageObject"
        }
      }
    }
  }
};

export const Images: msRest.CompositeMapper = {
  serializedName: "Images",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "Images",
    modelProperties: {
      ...SearchResultsAnswer.type.modelProperties,
      nextOffset: {
        readOnly: true,
        serializedName: "nextOffset",
        type: {
          name: "Number"
        }
      },
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ImageObject"
            }
          }
        }
      },
      queryExpansions: {
        readOnly: true,
        serializedName: "queryExpansions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Query"
            }
          }
        }
      },
      similarTerms: {
        readOnly: true,
        serializedName: "similarTerms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Query"
            }
          }
        }
      },
      relatedSearches: {
        readOnly: true,
        serializedName: "relatedSearches",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Query"
            }
          }
        }
      }
    }
  }
};

export const Article: msRest.CompositeMapper = {
  serializedName: "Article",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "Article",
    modelProperties: {
      ...CreativeWork.type.modelProperties,
      wordCount: {
        readOnly: true,
        serializedName: "wordCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const NewsArticle: msRest.CompositeMapper = {
  serializedName: "NewsArticle",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "NewsArticle",
    modelProperties: {
      ...Article.type.modelProperties
    }
  }
};

export const News: msRest.CompositeMapper = {
  serializedName: "News",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "News",
    modelProperties: {
      ...SearchResultsAnswer.type.modelProperties,
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NewsArticle"
            }
          }
        }
      },
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RelatedSearchesRelatedSearchAnswer: msRest.CompositeMapper = {
  serializedName: "RelatedSearches/RelatedSearchAnswer",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "RelatedSearchesRelatedSearchAnswer",
    modelProperties: {
      ...SearchResultsAnswer.type.modelProperties,
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Query"
            }
          }
        }
      }
    }
  }
};

export const SpellSuggestions: msRest.CompositeMapper = {
  serializedName: "SpellSuggestions",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "SpellSuggestions",
    modelProperties: {
      ...SearchResultsAnswer.type.modelProperties,
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Query"
            }
          }
        }
      }
    }
  }
};

export const TimeZoneTimeZoneInformation: msRest.CompositeMapper = {
  serializedName: "TimeZone/TimeZoneInformation",
  type: {
    name: "Composite",
    className: "TimeZoneTimeZoneInformation",
    modelProperties: {
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      time: {
        required: true,
        serializedName: "time",
        type: {
          name: "String"
        }
      },
      utcOffset: {
        required: true,
        serializedName: "utcOffset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TimeZone: msRest.CompositeMapper = {
  serializedName: "TimeZone",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "TimeZone",
    modelProperties: {
      ...SearchResultsAnswer.type.modelProperties,
      primaryCityTime: {
        required: true,
        serializedName: "primaryCityTime",
        type: {
          name: "Composite",
          className: "TimeZoneTimeZoneInformation"
        }
      },
      otherCityTimes: {
        readOnly: true,
        serializedName: "otherCityTimes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TimeZoneTimeZoneInformation"
            }
          }
        }
      }
    }
  }
};

export const VideoObject: msRest.CompositeMapper = {
  serializedName: "VideoObject",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "VideoObject",
    modelProperties: {
      ...MediaObject.type.modelProperties,
      motionThumbnailUrl: {
        readOnly: true,
        serializedName: "motionThumbnailUrl",
        type: {
          name: "String"
        }
      },
      motionThumbnailId: {
        readOnly: true,
        serializedName: "motionThumbnailId",
        type: {
          name: "String"
        }
      },
      embedHtml: {
        readOnly: true,
        serializedName: "embedHtml",
        type: {
          name: "String"
        }
      },
      allowHttpsEmbed: {
        readOnly: true,
        serializedName: "allowHttpsEmbed",
        type: {
          name: "Boolean"
        }
      },
      viewCount: {
        readOnly: true,
        serializedName: "viewCount",
        type: {
          name: "Number"
        }
      },
      thumbnail: {
        readOnly: true,
        serializedName: "thumbnail",
        type: {
          name: "Composite",
          className: "ImageObject"
        }
      },
      videoId: {
        readOnly: true,
        serializedName: "videoId",
        type: {
          name: "String"
        }
      },
      allowMobileEmbed: {
        readOnly: true,
        serializedName: "allowMobileEmbed",
        type: {
          name: "Boolean"
        }
      },
      isSuperfresh: {
        readOnly: true,
        serializedName: "isSuperfresh",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const Videos: msRest.CompositeMapper = {
  serializedName: "Videos",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "Videos",
    modelProperties: {
      ...SearchResultsAnswer.type.modelProperties,
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VideoObject"
            }
          }
        }
      },
      nextOffset: {
        readOnly: true,
        serializedName: "nextOffset",
        type: {
          name: "Number"
        }
      },
      queryExpansions: {
        readOnly: true,
        serializedName: "queryExpansions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Query"
            }
          }
        }
      },
      relatedSearches: {
        readOnly: true,
        serializedName: "relatedSearches",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Query"
            }
          }
        }
      }
    }
  }
};

export const Computation: msRest.CompositeMapper = {
  serializedName: "Computation",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "Computation",
    modelProperties: {
      ...Answer.type.modelProperties,
      expression: {
        required: true,
        serializedName: "expression",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RankingRankingItem: msRest.CompositeMapper = {
  serializedName: "Ranking/RankingItem",
  type: {
    name: "Composite",
    className: "RankingRankingItem",
    modelProperties: {
      answerType: {
        required: true,
        serializedName: "answerType",
        defaultValue: 'WebPages',
        type: {
          name: "String"
        }
      },
      resultIndex: {
        readOnly: true,
        serializedName: "resultIndex",
        type: {
          name: "Number"
        }
      },
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "Composite",
          className: "Identifiable"
        }
      },
      htmlIndex: {
        readOnly: true,
        serializedName: "htmlIndex",
        type: {
          name: "Number"
        }
      },
      textualIndex: {
        readOnly: true,
        serializedName: "textualIndex",
        type: {
          name: "Number"
        }
      },
      screenshotIndex: {
        readOnly: true,
        serializedName: "screenshotIndex",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RankingRankingGroup: msRest.CompositeMapper = {
  serializedName: "Ranking/RankingGroup",
  type: {
    name: "Composite",
    className: "RankingRankingGroup",
    modelProperties: {
      items: {
        required: true,
        serializedName: "items",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RankingRankingItem"
            }
          }
        }
      }
    }
  }
};

export const RankingRankingResponse: msRest.CompositeMapper = {
  serializedName: "Ranking/RankingResponse",
  type: {
    name: "Composite",
    className: "RankingRankingResponse",
    modelProperties: {
      pole: {
        readOnly: true,
        serializedName: "pole",
        type: {
          name: "Composite",
          className: "RankingRankingGroup"
        }
      },
      mainline: {
        readOnly: true,
        serializedName: "mainline",
        type: {
          name: "Composite",
          className: "RankingRankingGroup"
        }
      },
      sidebar: {
        readOnly: true,
        serializedName: "sidebar",
        type: {
          name: "Composite",
          className: "RankingRankingGroup"
        }
      }
    }
  }
};

export const SearchResponse: msRest.CompositeMapper = {
  serializedName: "SearchResponse",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "SearchResponse",
    modelProperties: {
      ...Response.type.modelProperties,
      queryContext: {
        readOnly: true,
        serializedName: "queryContext",
        type: {
          name: "Composite",
          className: "QueryContext"
        }
      },
      webPages: {
        readOnly: true,
        serializedName: "webPages",
        type: {
          name: "Composite",
          className: "WebWebAnswer"
        }
      },
      images: {
        readOnly: true,
        serializedName: "images",
        type: {
          name: "Composite",
          className: "Images"
        }
      },
      news: {
        readOnly: true,
        serializedName: "news",
        type: {
          name: "Composite",
          className: "News"
        }
      },
      relatedSearches: {
        readOnly: true,
        serializedName: "relatedSearches",
        type: {
          name: "Composite",
          className: "RelatedSearchesRelatedSearchAnswer"
        }
      },
      spellSuggestions: {
        readOnly: true,
        serializedName: "spellSuggestions",
        type: {
          name: "Composite",
          className: "SpellSuggestions"
        }
      },
      timeZone: {
        readOnly: true,
        serializedName: "timeZone",
        type: {
          name: "Composite",
          className: "TimeZone"
        }
      },
      videos: {
        readOnly: true,
        serializedName: "videos",
        type: {
          name: "Composite",
          className: "Videos"
        }
      },
      computation: {
        readOnly: true,
        serializedName: "computation",
        type: {
          name: "Composite",
          className: "Computation"
        }
      },
      rankingResponse: {
        readOnly: true,
        serializedName: "rankingResponse",
        type: {
          name: "Composite",
          className: "RankingRankingResponse"
        }
      }
    }
  }
};

export const Places: msRest.CompositeMapper = {
  serializedName: "Places",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "Places",
    modelProperties: {
      ...SearchResultsAnswer.type.modelProperties,
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Thing"
            }
          }
        }
      }
    }
  }
};

export const ErrorModel: msRest.CompositeMapper = {
  serializedName: "Error",
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      code: {
        required: true,
        serializedName: "code",
        defaultValue: 'None',
        type: {
          name: "String"
        }
      },
      subCode: {
        readOnly: true,
        serializedName: "subCode",
        type: {
          name: "String"
        }
      },
      message: {
        required: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      moreDetails: {
        readOnly: true,
        serializedName: "moreDetails",
        type: {
          name: "String"
        }
      },
      parameter: {
        readOnly: true,
        serializedName: "parameter",
        type: {
          name: "String"
        }
      },
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: msRest.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "ErrorResponse",
    modelProperties: {
      ...Response.type.modelProperties,
      errors: {
        required: true,
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorModel"
            }
          }
        }
      }
    }
  }
};

export const WebWebGrouping: msRest.CompositeMapper = {
  serializedName: "Web/WebGrouping",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "_type",
      clientName: "_type"
    },
    uberParent: "WebWebGrouping",
    className: "WebWebGrouping",
    modelProperties: {
      webPages: {
        required: true,
        serializedName: "webPages",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WebPage"
            }
          }
        }
      },
      _type: {
        required: true,
        serializedName: "_type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Intangible: msRest.CompositeMapper = {
  serializedName: "Intangible",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "Intangible",
    modelProperties: {
      ...Thing.type.modelProperties
    }
  }
};

export const StructuredValue: msRest.CompositeMapper = {
  serializedName: "StructuredValue",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "StructuredValue",
    modelProperties: {
      ...Intangible.type.modelProperties
    }
  }
};

export const discriminators = {
  'ResponseBase.ImageObject' : ImageObject,
  'ResponseBase.WebPage' : WebPage,
  'ResponseBase.Web/WebAnswer' : WebWebAnswer,
  'ResponseBase.Images' : Images,
  'ResponseBase.NewsArticle' : NewsArticle,
  'ResponseBase.News' : News,
  'ResponseBase.RelatedSearches/RelatedSearchAnswer' : RelatedSearchesRelatedSearchAnswer,
  'ResponseBase.SpellSuggestions' : SpellSuggestions,
  'ResponseBase.TimeZone' : TimeZone,
  'ResponseBase.VideoObject' : VideoObject,
  'ResponseBase.Videos' : Videos,
  'ResponseBase.Computation' : Computation,
  'ResponseBase.Identifiable' : Identifiable,
  'ResponseBase.SearchResponse' : SearchResponse,
  'ResponseBase.Response' : Response,
  'ResponseBase.Thing' : Thing,
  'ResponseBase.Places' : Places,
  'ResponseBase.SearchResultsAnswer' : SearchResultsAnswer,
  'ResponseBase.Answer' : Answer,
  'ResponseBase.ErrorResponse' : ErrorResponse,
  'Web/WebGrouping' : WebWebGrouping,
  'ResponseBase' : ResponseBase,
  'ResponseBase.CreativeWork' : CreativeWork,
  'ResponseBase.Intangible' : Intangible,
  'ResponseBase.MediaObject' : MediaObject,
  'ResponseBase.Article' : Article,
  'ResponseBase.StructuredValue' : StructuredValue

};
