/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { AnomalyDetectorClientContext } from "./anomalyDetectorClientContext";

class AnomalyDetectorClient extends AnomalyDetectorClientContext {
  /**
   * Initializes a new instance of the AnomalyDetectorClient class.
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
   * https://westus2.api.cognitive.microsoft.com).
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials, endpoint: string, options?: msRest.ServiceClientOptions) {
    super(credentials, endpoint, options);
  }

  /**
   * This operation generates a model with an entire series, each point is detected with the same
   * model. With this method, points before and after a certain point are used to determine whether
   * it is an anomaly. The entire detection can give user an overall status of the time series.
   * @summary Detect anomalies for the entire series in batch.
   * @param body Time series points and period if needed. Advanced model parameters can also be set
   * in the request.
   * @param [options] The optional parameters
   * @returns Promise<Models.DetectEntireSeriesResponse>
   */
  detectEntireSeries(body: Models.DetectRequest, options?: msRest.RequestOptionsBase): Promise<Models.DetectEntireSeriesResponse>;
  /**
   * @param body Time series points and period if needed. Advanced model parameters can also be set
   * in the request.
   * @param callback The callback
   */
  detectEntireSeries(body: Models.DetectRequest, callback: msRest.ServiceCallback<Models.EntireDetectResponse>): void;
  /**
   * @param body Time series points and period if needed. Advanced model parameters can also be set
   * in the request.
   * @param options The optional parameters
   * @param callback The callback
   */
  detectEntireSeries(body: Models.DetectRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntireDetectResponse>): void;
  detectEntireSeries(body: Models.DetectRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EntireDetectResponse>, callback?: msRest.ServiceCallback<Models.EntireDetectResponse>): Promise<Models.DetectEntireSeriesResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      detectEntireSeriesOperationSpec,
      callback) as Promise<Models.DetectEntireSeriesResponse>;
  }

  /**
   * This operation generates a model using points before the latest one. With this method, only
   * historical points are used to determine whether the target point is an anomaly. The latest point
   * detecting operation matches the scenario of real-time monitoring of business metrics.
   * @summary Detect anomaly status of the latest point in time series.
   * @param body Time series points and period if needed. Advanced model parameters can also be set
   * in the request.
   * @param [options] The optional parameters
   * @returns Promise<Models.DetectLastPointResponse>
   */
  detectLastPoint(body: Models.DetectRequest, options?: msRest.RequestOptionsBase): Promise<Models.DetectLastPointResponse>;
  /**
   * @param body Time series points and period if needed. Advanced model parameters can also be set
   * in the request.
   * @param callback The callback
   */
  detectLastPoint(body: Models.DetectRequest, callback: msRest.ServiceCallback<Models.LastDetectResponse>): void;
  /**
   * @param body Time series points and period if needed. Advanced model parameters can also be set
   * in the request.
   * @param options The optional parameters
   * @param callback The callback
   */
  detectLastPoint(body: Models.DetectRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LastDetectResponse>): void;
  detectLastPoint(body: Models.DetectRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LastDetectResponse>, callback?: msRest.ServiceCallback<Models.LastDetectResponse>): Promise<Models.DetectLastPointResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      detectLastPointOperationSpec,
      callback) as Promise<Models.DetectLastPointResponse>;
  }

  /**
   * Evaluate change point score of every series point
   * @summary Detect change point for the entire series
   * @param body Time series points and granularity is needed. Advanced model parameters can also be
   * set in the request if needed.
   * @param [options] The optional parameters
   * @returns Promise<Models.DetectChangePointResponse>
   */
  detectChangePoint(body: Models.ChangePointDetectRequest, options?: msRest.RequestOptionsBase): Promise<Models.DetectChangePointResponse>;
  /**
   * @param body Time series points and granularity is needed. Advanced model parameters can also be
   * set in the request if needed.
   * @param callback The callback
   */
  detectChangePoint(body: Models.ChangePointDetectRequest, callback: msRest.ServiceCallback<Models.ChangePointDetectResponse>): void;
  /**
   * @param body Time series points and granularity is needed. Advanced model parameters can also be
   * set in the request if needed.
   * @param options The optional parameters
   * @param callback The callback
   */
  detectChangePoint(body: Models.ChangePointDetectRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ChangePointDetectResponse>): void;
  detectChangePoint(body: Models.ChangePointDetectRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ChangePointDetectResponse>, callback?: msRest.ServiceCallback<Models.ChangePointDetectResponse>): Promise<Models.DetectChangePointResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      detectChangePointOperationSpec,
      callback) as Promise<Models.DetectChangePointResponse>;
  }

  /**
   * Create and train a multivariate anomaly detection model. The request must include a source
   * parameter to indicate an externally accessible Azure storage Uri (preferably a Shared Access
   * Signature Uri). All time-series used in generate the model must be zipped into one single file.
   * Each time-series will be in a single CSV file in which the first column is timestamp and the
   * second column is value.
   * @summary Train a Multivariate Anomaly Detection Model
   * @param modelRequest Training request
   * @param [options] The optional parameters
   * @returns Promise<Models.TrainMultivariateModelResponse>
   */
  trainMultivariateModel(modelRequest: Models.ModelInfo, options?: msRest.RequestOptionsBase): Promise<Models.TrainMultivariateModelResponse>;
  /**
   * @param modelRequest Training request
   * @param callback The callback
   */
  trainMultivariateModel(modelRequest: Models.ModelInfo, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param modelRequest Training request
   * @param options The optional parameters
   * @param callback The callback
   */
  trainMultivariateModel(modelRequest: Models.ModelInfo, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  trainMultivariateModel(modelRequest: Models.ModelInfo, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.TrainMultivariateModelResponse> {
    return this.sendOperationRequest(
      {
        modelRequest,
        options
      },
      trainMultivariateModelOperationSpec,
      callback) as Promise<Models.TrainMultivariateModelResponse>;
  }

  /**
   * Get detailed information of multivariate model, including the training status and variables used
   * in the model.
   * @summary Get Multivariate Model
   * @param modelId Model identifier.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetMultivariateModelResponse>
   */
  getMultivariateModel(modelId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetMultivariateModelResponse>;
  /**
   * @param modelId Model identifier.
   * @param callback The callback
   */
  getMultivariateModel(modelId: string, callback: msRest.ServiceCallback<Models.Model>): void;
  /**
   * @param modelId Model identifier.
   * @param options The optional parameters
   * @param callback The callback
   */
  getMultivariateModel(modelId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Model>): void;
  getMultivariateModel(modelId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Model>, callback?: msRest.ServiceCallback<Models.Model>): Promise<Models.GetMultivariateModelResponse> {
    return this.sendOperationRequest(
      {
        modelId,
        options
      },
      getMultivariateModelOperationSpec,
      callback) as Promise<Models.GetMultivariateModelResponse>;
  }

  /**
   * Delete an existing multivariate model according to the modelId
   * @summary Delete Multivariate Model
   * @param modelId Model identifier.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMultivariateModel(modelId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param modelId Model identifier.
   * @param callback The callback
   */
  deleteMultivariateModel(modelId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param modelId Model identifier.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMultivariateModel(modelId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMultivariateModel(modelId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        modelId,
        options
      },
      deleteMultivariateModelOperationSpec,
      callback);
  }

  /**
   * Submit detection multivariate anomaly task with the trained model of modelId, the input schema
   * should be the same with the training request. Thus request will be complete asynchronously and
   * will return a resultId for querying the detection result.The request should be a source link to
   * indicate an externally accessible Azure storage Uri (preferably a Shared Access Signature Uri).
   * All time-series used in generate the model must be zipped into one single file. Each time-series
   * will be as follows: the first column is timestamp and the second column is value.
   * @summary Detect Multivariate Anomaly
   * @param detectionRequest Detect anomaly request
   * @param modelId Model identifier.
   * @param [options] The optional parameters
   * @returns Promise<Models.DetectAnomalyResponse>
   */
  detectAnomaly(detectionRequest: Models.DetectionRequest, modelId: string, options?: msRest.RequestOptionsBase): Promise<Models.DetectAnomalyResponse>;
  /**
   * @param detectionRequest Detect anomaly request
   * @param modelId Model identifier.
   * @param callback The callback
   */
  detectAnomaly(detectionRequest: Models.DetectionRequest, modelId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param detectionRequest Detect anomaly request
   * @param modelId Model identifier.
   * @param options The optional parameters
   * @param callback The callback
   */
  detectAnomaly(detectionRequest: Models.DetectionRequest, modelId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  detectAnomaly(detectionRequest: Models.DetectionRequest, modelId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.DetectAnomalyResponse> {
    return this.sendOperationRequest(
      {
        detectionRequest,
        modelId,
        options
      },
      detectAnomalyOperationSpec,
      callback) as Promise<Models.DetectAnomalyResponse>;
  }

  /**
   * Get multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync
   * api
   * @summary Get Multivariate Anomaly Detection Result
   * @param resultId Result identifier.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDetectionResultResponse>
   */
  getDetectionResult(resultId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetDetectionResultResponse>;
  /**
   * @param resultId Result identifier.
   * @param callback The callback
   */
  getDetectionResult(resultId: string, callback: msRest.ServiceCallback<Models.DetectionResult>): void;
  /**
   * @param resultId Result identifier.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDetectionResult(resultId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DetectionResult>): void;
  getDetectionResult(resultId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DetectionResult>, callback?: msRest.ServiceCallback<Models.DetectionResult>): Promise<Models.GetDetectionResultResponse> {
    return this.sendOperationRequest(
      {
        resultId,
        options
      },
      getDetectionResultOperationSpec,
      callback) as Promise<Models.GetDetectionResultResponse>;
  }

  /**
   * Export multivariate anomaly detection model based on modelId
   * @summary Export Multivariate Anomaly Detection Model as Zip file
   * @param modelId Model identifier.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExportModelResponse>
   */
  exportModel(modelId: string, options?: msRest.RequestOptionsBase): Promise<Models.ExportModelResponse>;
  /**
   * @param modelId Model identifier.
   * @param callback The callback
   */
  exportModel(modelId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param modelId Model identifier.
   * @param options The optional parameters
   * @param callback The callback
   */
  exportModel(modelId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  exportModel(modelId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.ExportModelResponse> {
    return this.sendOperationRequest(
      {
        modelId,
        options
      },
      exportModelOperationSpec,
      callback) as Promise<Models.ExportModelResponse>;
  }

  /**
   * List models of a subscription
   * @summary List Multivariate Models
   * @param [options] The optional parameters
   * @returns Promise<Models.ListMultivariateModelResponse>
   */
  listMultivariateModel(options?: Models.AnomalyDetectorClientListMultivariateModelOptionalParams): Promise<Models.ListMultivariateModelResponse>;
  /**
   * @param callback The callback
   */
  listMultivariateModel(callback: msRest.ServiceCallback<Models.ModelList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listMultivariateModel(options: Models.AnomalyDetectorClientListMultivariateModelOptionalParams, callback: msRest.ServiceCallback<Models.ModelList>): void;
  listMultivariateModel(options?: Models.AnomalyDetectorClientListMultivariateModelOptionalParams | msRest.ServiceCallback<Models.ModelList>, callback?: msRest.ServiceCallback<Models.ModelList>): Promise<Models.ListMultivariateModelResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listMultivariateModelOperationSpec,
      callback) as Promise<Models.ListMultivariateModelResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const detectEntireSeriesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "timeseries/entire/detect",
  urlParameters: [
    Parameters.endpoint
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.DetectRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.EntireDetectResponse
    },
    default: {
      bodyMapper: Mappers.AnomalyDetectorError
    }
  },
  serializer
};

const detectLastPointOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "timeseries/last/detect",
  urlParameters: [
    Parameters.endpoint
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.DetectRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.LastDetectResponse
    },
    default: {
      bodyMapper: Mappers.AnomalyDetectorError
    }
  },
  serializer
};

const detectChangePointOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "timeseries/changepoint/detect",
  urlParameters: [
    Parameters.endpoint
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.ChangePointDetectRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ChangePointDetectResponse
    },
    default: {
      bodyMapper: Mappers.AnomalyDetectorError
    }
  },
  serializer
};

const trainMultivariateModelOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "multivariate/models",
  urlParameters: [
    Parameters.endpoint
  ],
  requestBody: {
    parameterPath: "modelRequest",
    mapper: {
      ...Mappers.ModelInfo,
      required: true
    }
  },
  responses: {
    201: {
      headersMapper: Mappers.TrainMultivariateModelHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.TrainMultivariateModelHeaders
    }
  },
  serializer
};

const getMultivariateModelOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "multivariate/models/{modelId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.modelId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Model
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMultivariateModelOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "multivariate/models/{modelId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.modelId
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const detectAnomalyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "multivariate/models/{modelId}/detect",
  urlParameters: [
    Parameters.endpoint,
    Parameters.modelId
  ],
  requestBody: {
    parameterPath: "detectionRequest",
    mapper: {
      ...Mappers.DetectionRequest,
      required: true
    }
  },
  responses: {
    201: {
      headersMapper: Mappers.DetectAnomalyHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.DetectAnomalyHeaders
    }
  },
  serializer
};

const getDetectionResultOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "multivariate/results/{resultId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.resultId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DetectionResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const exportModelOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "multivariate/models/{modelId}/export",
  urlParameters: [
    Parameters.endpoint,
    Parameters.modelId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      },
      headersMapper: Mappers.ExportModelHeaders
    },
    default: {}
  },
  serializer
};

const listMultivariateModelOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "multivariate/models",
  urlParameters: [
    Parameters.endpoint
  ],
  queryParameters: [
    Parameters.skip,
    Parameters.top
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ModelList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

export {
  AnomalyDetectorClient,
  AnomalyDetectorClientContext,
  Models as AnomalyDetectorModels,
  Mappers as AnomalyDetectorMappers
};
