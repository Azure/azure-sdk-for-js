/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { AnomalyDetectorClientContext } from "./anomalyDetectorClientContext";

class AnomalyDetectorClient extends AnomalyDetectorClientContext {
  /**
   * Initializes a new instance of the AnomalyDetectorClient class.
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
   * https://westus2.api.cognitive.microsoft.com).
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials, endpoint: string, options?: msRest.ServiceClientOptions) {
    super(credentials, endpoint, options);
  }

  /**
   * This operation generates a model using an entire series, each point is detected with the same
   * model. With this method, points before and after a certain point are used to determine whether
   * it is an anomaly. The entire detection can give user an overall status of the time series.
   * @summary Detect anomalies for the entire series in batch.
   * @param body Time series points and period if needed. Advanced model parameters can also be set
   * in the request.
   * @param [options] The optional parameters
   * @returns Promise<Models.DetectEntireSeriesResponse>
   */
  detectEntireSeries(body: Models.DetectRequest, options?: msRest.RequestOptionsBase): Promise<Models.DetectEntireSeriesResponse>;
  /**
   * @param body Time series points and period if needed. Advanced model parameters can also be set
   * in the request.
   * @param callback The callback
   */
  detectEntireSeries(body: Models.DetectRequest, callback: msRest.ServiceCallback<Models.EntireDetectResponse>): void;
  /**
   * @param body Time series points and period if needed. Advanced model parameters can also be set
   * in the request.
   * @param options The optional parameters
   * @param callback The callback
   */
  detectEntireSeries(body: Models.DetectRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EntireDetectResponse>): void;
  detectEntireSeries(body: Models.DetectRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EntireDetectResponse>, callback?: msRest.ServiceCallback<Models.EntireDetectResponse>): Promise<Models.DetectEntireSeriesResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      detectEntireSeriesOperationSpec,
      callback) as Promise<Models.DetectEntireSeriesResponse>;
  }

  /**
   * This operation generates a model using points before the latest one. With this method, only
   * historical points are used to determine whether the target point is an anomaly. The latest point
   * detecting operation matches the scenario of real-time monitoring of business metrics.
   * @summary Detect anomaly status of the latest point in time series.
   * @param body Time series points and period if needed. Advanced model parameters can also be set
   * in the request.
   * @param [options] The optional parameters
   * @returns Promise<Models.DetectLastPointResponse>
   */
  detectLastPoint(body: Models.DetectRequest, options?: msRest.RequestOptionsBase): Promise<Models.DetectLastPointResponse>;
  /**
   * @param body Time series points and period if needed. Advanced model parameters can also be set
   * in the request.
   * @param callback The callback
   */
  detectLastPoint(body: Models.DetectRequest, callback: msRest.ServiceCallback<Models.LastDetectResponse>): void;
  /**
   * @param body Time series points and period if needed. Advanced model parameters can also be set
   * in the request.
   * @param options The optional parameters
   * @param callback The callback
   */
  detectLastPoint(body: Models.DetectRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LastDetectResponse>): void;
  detectLastPoint(body: Models.DetectRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LastDetectResponse>, callback?: msRest.ServiceCallback<Models.LastDetectResponse>): Promise<Models.DetectLastPointResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      detectLastPointOperationSpec,
      callback) as Promise<Models.DetectLastPointResponse>;
  }

  /**
   * Evaluate change point score of every series point
   * @summary Detect change point for the entire series
   * @param body Time series points and granularity is needed. Advanced model parameters can also be
   * set in the request if needed.
   * @param [options] The optional parameters
   * @returns Promise<Models.DetectChangePointResponse>
   */
  detectChangePoint(body: Models.ChangePointDetectRequest, options?: msRest.RequestOptionsBase): Promise<Models.DetectChangePointResponse>;
  /**
   * @param body Time series points and granularity is needed. Advanced model parameters can also be
   * set in the request if needed.
   * @param callback The callback
   */
  detectChangePoint(body: Models.ChangePointDetectRequest, callback: msRest.ServiceCallback<Models.ChangePointDetectResponse>): void;
  /**
   * @param body Time series points and granularity is needed. Advanced model parameters can also be
   * set in the request if needed.
   * @param options The optional parameters
   * @param callback The callback
   */
  detectChangePoint(body: Models.ChangePointDetectRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ChangePointDetectResponse>): void;
  detectChangePoint(body: Models.ChangePointDetectRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ChangePointDetectResponse>, callback?: msRest.ServiceCallback<Models.ChangePointDetectResponse>): Promise<Models.DetectChangePointResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      detectChangePointOperationSpec,
      callback) as Promise<Models.DetectChangePointResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const detectEntireSeriesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "timeseries/entire/detect",
  urlParameters: [
    Parameters.endpoint
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.DetectRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.EntireDetectResponse
    },
    default: {
      bodyMapper: Mappers.AnomalyDetectorError
    }
  },
  serializer
};

const detectLastPointOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "timeseries/last/detect",
  urlParameters: [
    Parameters.endpoint
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.DetectRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.LastDetectResponse
    },
    default: {
      bodyMapper: Mappers.AnomalyDetectorError
    }
  },
  serializer
};

const detectChangePointOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "timeseries/changepoint/detect",
  urlParameters: [
    Parameters.endpoint
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.ChangePointDetectRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ChangePointDetectResponse
    },
    default: {
      bodyMapper: Mappers.AnomalyDetectorError
    }
  },
  serializer
};

export {
  AnomalyDetectorClient,
  AnomalyDetectorClientContext,
  Models as AnomalyDetectorModels,
  Mappers as AnomalyDetectorMappers
};
