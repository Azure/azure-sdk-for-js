/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as msRest from "@azure/ms-rest-js";


export const AnomalyDetectorError: msRest.CompositeMapper = {
  serializedName: "AnomalyDetectorError",
  type: {
    name: "Composite",
    className: "AnomalyDetectorError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "Object"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TimeSeriesPoint: msRest.CompositeMapper = {
  serializedName: "TimeSeriesPoint",
  type: {
    name: "Composite",
    className: "TimeSeriesPoint",
    modelProperties: {
      timestamp: {
        serializedName: "timestamp",
        type: {
          name: "DateTime"
        }
      },
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DetectRequest: msRest.CompositeMapper = {
  serializedName: "DetectRequest",
  type: {
    name: "Composite",
    className: "DetectRequest",
    modelProperties: {
      series: {
        required: true,
        serializedName: "series",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TimeSeriesPoint"
            }
          }
        }
      },
      granularity: {
        nullable: false,
        serializedName: "granularity",
        type: {
          name: "Enum",
          allowedValues: [
            "yearly",
            "monthly",
            "weekly",
            "daily",
            "hourly",
            "minutely",
            "secondly",
            "microsecond",
            "none"
          ]
        }
      },
      customInterval: {
        serializedName: "customInterval",
        type: {
          name: "Number"
        }
      },
      period: {
        serializedName: "period",
        type: {
          name: "Number"
        }
      },
      maxAnomalyRatio: {
        serializedName: "maxAnomalyRatio",
        type: {
          name: "Number"
        }
      },
      sensitivity: {
        serializedName: "sensitivity",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const EntireDetectResponse: msRest.CompositeMapper = {
  serializedName: "EntireDetectResponse",
  type: {
    name: "Composite",
    className: "EntireDetectResponse",
    modelProperties: {
      period: {
        required: true,
        serializedName: "period",
        type: {
          name: "Number"
        }
      },
      expectedValues: {
        required: true,
        serializedName: "expectedValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      upperMargins: {
        required: true,
        serializedName: "upperMargins",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      lowerMargins: {
        required: true,
        serializedName: "lowerMargins",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      isAnomaly: {
        required: true,
        serializedName: "isAnomaly",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Boolean"
            }
          }
        }
      },
      isNegativeAnomaly: {
        required: true,
        serializedName: "isNegativeAnomaly",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Boolean"
            }
          }
        }
      },
      isPositiveAnomaly: {
        required: true,
        serializedName: "isPositiveAnomaly",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Boolean"
            }
          }
        }
      }
    }
  }
};

export const LastDetectResponse: msRest.CompositeMapper = {
  serializedName: "LastDetectResponse",
  type: {
    name: "Composite",
    className: "LastDetectResponse",
    modelProperties: {
      period: {
        required: true,
        serializedName: "period",
        type: {
          name: "Number"
        }
      },
      suggestedWindow: {
        required: true,
        serializedName: "suggestedWindow",
        type: {
          name: "Number"
        }
      },
      expectedValue: {
        required: true,
        serializedName: "expectedValue",
        type: {
          name: "Number"
        }
      },
      upperMargin: {
        required: true,
        serializedName: "upperMargin",
        type: {
          name: "Number"
        }
      },
      lowerMargin: {
        required: true,
        serializedName: "lowerMargin",
        type: {
          name: "Number"
        }
      },
      isAnomaly: {
        required: true,
        serializedName: "isAnomaly",
        type: {
          name: "Boolean"
        }
      },
      isNegativeAnomaly: {
        required: true,
        serializedName: "isNegativeAnomaly",
        type: {
          name: "Boolean"
        }
      },
      isPositiveAnomaly: {
        required: true,
        serializedName: "isPositiveAnomaly",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ChangePointDetectRequest: msRest.CompositeMapper = {
  serializedName: "ChangePointDetectRequest",
  type: {
    name: "Composite",
    className: "ChangePointDetectRequest",
    modelProperties: {
      series: {
        required: true,
        serializedName: "series",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TimeSeriesPoint"
            }
          }
        }
      },
      granularity: {
        required: true,
        nullable: false,
        serializedName: "granularity",
        type: {
          name: "Enum",
          allowedValues: [
            "yearly",
            "monthly",
            "weekly",
            "daily",
            "hourly",
            "minutely",
            "secondly",
            "microsecond",
            "none"
          ]
        }
      },
      customInterval: {
        serializedName: "customInterval",
        type: {
          name: "Number"
        }
      },
      period: {
        serializedName: "period",
        type: {
          name: "Number"
        }
      },
      stableTrendWindow: {
        serializedName: "stableTrendWindow",
        type: {
          name: "Number"
        }
      },
      threshold: {
        serializedName: "threshold",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ChangePointDetectResponse: msRest.CompositeMapper = {
  serializedName: "ChangePointDetectResponse",
  type: {
    name: "Composite",
    className: "ChangePointDetectResponse",
    modelProperties: {
      period: {
        readOnly: true,
        serializedName: "period",
        type: {
          name: "Number"
        }
      },
      isChangePoint: {
        serializedName: "isChangePoint",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Boolean"
            }
          }
        }
      },
      confidenceScores: {
        serializedName: "confidenceScores",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    }
  }
};

export const AlignPolicy: msRest.CompositeMapper = {
  serializedName: "AlignPolicy",
  type: {
    name: "Composite",
    className: "AlignPolicy",
    modelProperties: {
      alignMode: {
        serializedName: "alignMode",
        type: {
          name: "Enum",
          allowedValues: [
            "Inner",
            "Outer"
          ]
        }
      },
      fillNAMethod: {
        serializedName: "fillNAMethod",
        type: {
          name: "Enum",
          allowedValues: [
            "Previous",
            "Subsequent",
            "Linear",
            "Zero",
            "Pad",
            "NotFill"
          ]
        }
      },
      paddingValue: {
        serializedName: "paddingValue",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ErrorResponse: msRest.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      code: {
        required: true,
        nullable: false,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        required: true,
        nullable: false,
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ModelState: msRest.CompositeMapper = {
  serializedName: "ModelState",
  type: {
    name: "Composite",
    className: "ModelState",
    modelProperties: {
      epochIds: {
        serializedName: "epochIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      trainLosses: {
        serializedName: "trainLosses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      validationLosses: {
        serializedName: "validationLosses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      latenciesInSeconds: {
        serializedName: "latenciesInSeconds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    }
  }
};

export const VariableState: msRest.CompositeMapper = {
  serializedName: "VariableState",
  type: {
    name: "Composite",
    className: "VariableState",
    modelProperties: {
      variable: {
        serializedName: "variable",
        type: {
          name: "String"
        }
      },
      filledNARatio: {
        serializedName: "filledNARatio",
        constraints: {
          InclusiveMaximum: 1,
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      },
      effectiveCount: {
        serializedName: "effectiveCount",
        type: {
          name: "Number"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      errors: {
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorResponse"
            }
          }
        }
      }
    }
  }
};

export const DiagnosticsInfo: msRest.CompositeMapper = {
  serializedName: "DiagnosticsInfo",
  type: {
    name: "Composite",
    className: "DiagnosticsInfo",
    modelProperties: {
      modelState: {
        serializedName: "modelState",
        type: {
          name: "Composite",
          className: "ModelState"
        }
      },
      variableStates: {
        serializedName: "variableStates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VariableState"
            }
          }
        }
      }
    }
  }
};

export const ModelInfo: msRest.CompositeMapper = {
  serializedName: "ModelInfo",
  type: {
    name: "Composite",
    className: "ModelInfo",
    modelProperties: {
      slidingWindow: {
        serializedName: "slidingWindow",
        type: {
          name: "Number"
        }
      },
      alignPolicy: {
        serializedName: "alignPolicy",
        type: {
          name: "Composite",
          className: "AlignPolicy"
        }
      },
      source: {
        required: true,
        serializedName: "source",
        type: {
          name: "String"
        }
      },
      startTime: {
        required: true,
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        required: true,
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      displayName: {
        serializedName: "displayName",
        constraints: {
          MaxLength: 24
        },
        type: {
          name: "String"
        }
      },
      status: {
        nullable: false,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "CREATED",
            "RUNNING",
            "READY",
            "FAILED"
          ]
        }
      },
      errors: {
        readOnly: true,
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorResponse"
            }
          }
        }
      },
      diagnosticsInfo: {
        serializedName: "diagnosticsInfo",
        type: {
          name: "Composite",
          className: "DiagnosticsInfo"
        }
      }
    }
  }
};

export const Model: msRest.CompositeMapper = {
  serializedName: "Model",
  type: {
    name: "Composite",
    className: "Model",
    modelProperties: {
      modelId: {
        required: true,
        serializedName: "modelId",
        type: {
          name: "Uuid"
        }
      },
      createdTime: {
        required: true,
        serializedName: "createdTime",
        type: {
          name: "DateTime"
        }
      },
      lastUpdatedTime: {
        required: true,
        serializedName: "lastUpdatedTime",
        type: {
          name: "DateTime"
        }
      },
      modelInfo: {
        serializedName: "modelInfo",
        type: {
          name: "Composite",
          className: "ModelInfo"
        }
      }
    }
  }
};

export const ModelSnapshot: msRest.CompositeMapper = {
  serializedName: "ModelSnapshot",
  type: {
    name: "Composite",
    className: "ModelSnapshot",
    modelProperties: {
      modelId: {
        required: true,
        serializedName: "modelId",
        type: {
          name: "Uuid"
        }
      },
      createdTime: {
        required: true,
        serializedName: "createdTime",
        type: {
          name: "DateTime"
        }
      },
      lastUpdatedTime: {
        required: true,
        serializedName: "lastUpdatedTime",
        type: {
          name: "DateTime"
        }
      },
      status: {
        required: true,
        nullable: false,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "CREATED",
            "RUNNING",
            "READY",
            "FAILED"
          ]
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      variablesCount: {
        required: true,
        serializedName: "variablesCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ModelList: msRest.CompositeMapper = {
  serializedName: "ModelList",
  type: {
    name: "Composite",
    className: "ModelList",
    modelProperties: {
      modelsProperty: {
        required: true,
        serializedName: "models",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ModelSnapshot"
            }
          }
        }
      },
      currentCount: {
        required: true,
        nullable: false,
        serializedName: "currentCount",
        type: {
          name: "Number"
        }
      },
      maxCount: {
        required: true,
        nullable: false,
        serializedName: "maxCount",
        type: {
          name: "Number"
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DetectionRequest: msRest.CompositeMapper = {
  serializedName: "DetectionRequest",
  type: {
    name: "Composite",
    className: "DetectionRequest",
    modelProperties: {
      source: {
        required: true,
        serializedName: "source",
        type: {
          name: "String"
        }
      },
      startTime: {
        required: true,
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        required: true,
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const DetectionResultSummary: msRest.CompositeMapper = {
  serializedName: "DetectionResultSummary",
  type: {
    name: "Composite",
    className: "DetectionResultSummary",
    modelProperties: {
      status: {
        required: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "CREATED",
            "RUNNING",
            "READY",
            "FAILED"
          ]
        }
      },
      errors: {
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorResponse"
            }
          }
        }
      },
      variableStates: {
        serializedName: "variableStates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VariableState"
            }
          }
        }
      },
      setupInfo: {
        required: true,
        serializedName: "setupInfo",
        type: {
          name: "Composite",
          className: "DetectionRequest"
        }
      }
    }
  }
};

export const AnomalyContributor: msRest.CompositeMapper = {
  serializedName: "AnomalyContributor",
  type: {
    name: "Composite",
    className: "AnomalyContributor",
    modelProperties: {
      contributionScore: {
        serializedName: "contributionScore",
        constraints: {
          InclusiveMaximum: 2,
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      },
      variable: {
        serializedName: "variable",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AnomalyValue: msRest.CompositeMapper = {
  serializedName: "AnomalyValue",
  type: {
    name: "Composite",
    className: "AnomalyValue",
    modelProperties: {
      contributors: {
        serializedName: "contributors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AnomalyContributor"
            }
          }
        }
      },
      isAnomaly: {
        required: true,
        serializedName: "isAnomaly",
        type: {
          name: "Boolean"
        }
      },
      severity: {
        required: true,
        serializedName: "severity",
        constraints: {
          InclusiveMaximum: 1,
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      },
      score: {
        serializedName: "score",
        constraints: {
          InclusiveMaximum: 2,
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AnomalyState: msRest.CompositeMapper = {
  serializedName: "AnomalyState",
  type: {
    name: "Composite",
    className: "AnomalyState",
    modelProperties: {
      timestamp: {
        required: true,
        serializedName: "timestamp",
        type: {
          name: "DateTime"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Composite",
          className: "AnomalyValue"
        }
      },
      errors: {
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorResponse"
            }
          }
        }
      }
    }
  }
};

export const DetectionResult: msRest.CompositeMapper = {
  serializedName: "DetectionResult",
  type: {
    name: "Composite",
    className: "DetectionResult",
    modelProperties: {
      resultId: {
        required: true,
        serializedName: "resultId",
        type: {
          name: "Uuid"
        }
      },
      summary: {
        required: true,
        serializedName: "summary",
        type: {
          name: "Composite",
          className: "DetectionResultSummary"
        }
      },
      results: {
        required: true,
        serializedName: "results",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AnomalyState"
            }
          }
        }
      }
    }
  }
};

export const TrainMultivariateModelHeaders: msRest.CompositeMapper = {
  serializedName: "trainmultivariatemodel-headers",
  type: {
    name: "Composite",
    className: "TrainMultivariateModelHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DetectAnomalyHeaders: msRest.CompositeMapper = {
  serializedName: "detectanomaly-headers",
  type: {
    name: "Composite",
    className: "DetectAnomalyHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExportModelHeaders: msRest.CompositeMapper = {
  serializedName: "exportmodel-headers",
  type: {
    name: "Composite",
    className: "ExportModelHeaders",
    modelProperties: {
      contentType: {
        serializedName: "content-type",
        type: {
          name: "String"
        }
      }
    }
  }
};
