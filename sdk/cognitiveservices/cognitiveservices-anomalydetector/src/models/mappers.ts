/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as msRest from "@azure/ms-rest-js";


export const APIError: msRest.CompositeMapper = {
  serializedName: "APIError",
  type: {
    name: "Composite",
    className: "APIError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "Object"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Point: msRest.CompositeMapper = {
  serializedName: "Point",
  type: {
    name: "Composite",
    className: "Point",
    modelProperties: {
      timestamp: {
        required: true,
        serializedName: "timestamp",
        type: {
          name: "DateTime"
        }
      },
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Request: msRest.CompositeMapper = {
  serializedName: "Request",
  type: {
    name: "Composite",
    className: "Request",
    modelProperties: {
      series: {
        required: true,
        serializedName: "series",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Point"
            }
          }
        }
      },
      granularity: {
        required: true,
        nullable: false,
        serializedName: "granularity",
        type: {
          name: "Enum",
          allowedValues: [
            "yearly",
            "monthly",
            "weekly",
            "daily",
            "hourly",
            "minutely"
          ]
        }
      },
      customInterval: {
        serializedName: "customInterval",
        type: {
          name: "Number"
        }
      },
      period: {
        serializedName: "period",
        type: {
          name: "Number"
        }
      },
      maxAnomalyRatio: {
        serializedName: "maxAnomalyRatio",
        type: {
          name: "Number"
        }
      },
      sensitivity: {
        serializedName: "sensitivity",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const EntireDetectResponse: msRest.CompositeMapper = {
  serializedName: "EntireDetectResponse",
  type: {
    name: "Composite",
    className: "EntireDetectResponse",
    modelProperties: {
      period: {
        required: true,
        serializedName: "period",
        type: {
          name: "Number"
        }
      },
      expectedValues: {
        required: true,
        serializedName: "expectedValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      upperMargins: {
        required: true,
        serializedName: "upperMargins",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      lowerMargins: {
        required: true,
        serializedName: "lowerMargins",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      isAnomaly: {
        required: true,
        serializedName: "isAnomaly",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Boolean"
            }
          }
        }
      },
      isNegativeAnomaly: {
        required: true,
        serializedName: "isNegativeAnomaly",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Boolean"
            }
          }
        }
      },
      isPositiveAnomaly: {
        required: true,
        serializedName: "isPositiveAnomaly",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Boolean"
            }
          }
        }
      }
    }
  }
};

export const LastDetectResponse: msRest.CompositeMapper = {
  serializedName: "LastDetectResponse",
  type: {
    name: "Composite",
    className: "LastDetectResponse",
    modelProperties: {
      period: {
        required: true,
        serializedName: "period",
        type: {
          name: "Number"
        }
      },
      suggestedWindow: {
        required: true,
        serializedName: "suggestedWindow",
        type: {
          name: "Number"
        }
      },
      expectedValue: {
        required: true,
        serializedName: "expectedValue",
        type: {
          name: "Number"
        }
      },
      upperMargin: {
        required: true,
        serializedName: "upperMargin",
        type: {
          name: "Number"
        }
      },
      lowerMargin: {
        required: true,
        serializedName: "lowerMargin",
        type: {
          name: "Number"
        }
      },
      isAnomaly: {
        required: true,
        serializedName: "isAnomaly",
        type: {
          name: "Boolean"
        }
      },
      isNegativeAnomaly: {
        required: true,
        serializedName: "isNegativeAnomaly",
        type: {
          name: "Boolean"
        }
      },
      isPositiveAnomaly: {
        required: true,
        serializedName: "isPositiveAnomaly",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const TimeSeries: msRest.CompositeMapper = {
  serializedName: "TimeSeries",
  type: {
    name: "Composite",
    className: "TimeSeries",
    modelProperties: {
      seriesId: {
        required: true,
        serializedName: "seriesId",
        type: {
          name: "String"
        }
      },
      granularity: {
        required: true,
        nullable: false,
        serializedName: "granularity",
        type: {
          name: "Enum",
          allowedValues: [
            "yearly",
            "monthly",
            "weekly",
            "daily",
            "hourly",
            "minutely"
          ]
        }
      },
      dimensions: {
        serializedName: "dimensions",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      customInterval: {
        serializedName: "customInterval",
        type: {
          name: "Number"
        }
      },
      retentionDurationInHours: {
        serializedName: "retentionDurationInHours",
        type: {
          name: "Number"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TimeSeriesCreateRequest: msRest.CompositeMapper = {
  serializedName: "TimeSeriesCreateRequest",
  type: {
    name: "Composite",
    className: "TimeSeriesCreateRequest",
    modelProperties: {
      granularity: {
        required: true,
        nullable: false,
        serializedName: "granularity",
        type: {
          name: "Enum",
          allowedValues: [
            "yearly",
            "monthly",
            "weekly",
            "daily",
            "hourly",
            "minutely"
          ]
        }
      },
      dimensions: {
        serializedName: "dimensions",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      customInterval: {
        serializedName: "customInterval",
        type: {
          name: "Number"
        }
      },
      retentionDurationInHours: {
        serializedName: "retentionDurationInHours",
        type: {
          name: "Number"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TimeSeriesList: msRest.CompositeMapper = {
  serializedName: "TimeSeriesList",
  type: {
    name: "Composite",
    className: "TimeSeriesList",
    modelProperties: {
      series: {
        required: true,
        serializedName: "series",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TimeSeries"
            }
          }
        }
      },
      next: {
        serializedName: "next",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TimeSeriesGroup: msRest.CompositeMapper = {
  serializedName: "TimeSeriesGroup",
  type: {
    name: "Composite",
    className: "TimeSeriesGroup",
    modelProperties: {
      groupId: {
        required: true,
        serializedName: "groupId",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      granularity: {
        required: true,
        nullable: false,
        serializedName: "granularity",
        type: {
          name: "Enum",
          allowedValues: [
            "yearly",
            "monthly",
            "weekly",
            "daily",
            "hourly",
            "minutely"
          ]
        }
      },
      customInterval: {
        serializedName: "customInterval",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const TimeSeriesGroupCreateRequest: msRest.CompositeMapper = {
  serializedName: "TimeSeriesGroupCreateRequest",
  type: {
    name: "Composite",
    className: "TimeSeriesGroupCreateRequest",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      granularity: {
        required: true,
        nullable: false,
        serializedName: "granularity",
        type: {
          name: "Enum",
          allowedValues: [
            "yearly",
            "monthly",
            "weekly",
            "daily",
            "hourly",
            "minutely"
          ]
        }
      },
      customInterval: {
        serializedName: "customInterval",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const TimeSeriesGroupList: msRest.CompositeMapper = {
  serializedName: "TimeSeriesGroupList",
  type: {
    name: "Composite",
    className: "TimeSeriesGroupList",
    modelProperties: {
      groups: {
        required: true,
        serializedName: "groups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TimeSeriesGroup"
            }
          }
        }
      },
      next: {
        serializedName: "next",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InconsistencyDetectRequest: msRest.CompositeMapper = {
  serializedName: "InconsistencyDetectRequest",
  type: {
    name: "Composite",
    className: "InconsistencyDetectRequest",
    modelProperties: {
      begin: {
        required: true,
        serializedName: "begin",
        type: {
          name: "DateTime"
        }
      },
      end: {
        required: true,
        serializedName: "end",
        type: {
          name: "DateTime"
        }
      },
      epsilon: {
        serializedName: "epsilon",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Inconsistency: msRest.CompositeMapper = {
  serializedName: "Inconsistency",
  type: {
    name: "Composite",
    className: "Inconsistency",
    modelProperties: {
      inconsistentSeriesIds: {
        required: true,
        serializedName: "inconsistentSeriesIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      confidenceScores: {
        required: true,
        serializedName: "confidenceScores",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      begin: {
        required: true,
        serializedName: "begin",
        type: {
          name: "DateTime"
        }
      },
      end: {
        required: true,
        serializedName: "end",
        type: {
          name: "DateTime"
        }
      },
      epsilon: {
        serializedName: "epsilon",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const InconsistencyQueryRequest: msRest.CompositeMapper = {
  serializedName: "InconsistencyQueryRequest",
  type: {
    name: "Composite",
    className: "InconsistencyQueryRequest",
    modelProperties: {
      begin: {
        required: true,
        serializedName: "begin",
        type: {
          name: "DateTime"
        }
      },
      end: {
        required: true,
        serializedName: "end",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ChangePointDetectRequest: msRest.CompositeMapper = {
  serializedName: "ChangePointDetectRequest",
  type: {
    name: "Composite",
    className: "ChangePointDetectRequest",
    modelProperties: {
      series: {
        required: true,
        serializedName: "series",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Point"
            }
          }
        }
      },
      granularity: {
        required: true,
        nullable: false,
        serializedName: "granularity",
        type: {
          name: "Enum",
          allowedValues: [
            "yearly",
            "monthly",
            "weekly",
            "daily",
            "hourly",
            "minutely"
          ]
        }
      },
      customInterval: {
        serializedName: "customInterval",
        type: {
          name: "Number"
        }
      },
      period: {
        serializedName: "period",
        type: {
          name: "Number"
        }
      },
      stableTrendWindow: {
        serializedName: "stableTrendWindow",
        type: {
          name: "Number"
        }
      },
      threshold: {
        serializedName: "threshold",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ChangePointDetectResponse: msRest.CompositeMapper = {
  serializedName: "ChangePointDetectResponse",
  type: {
    name: "Composite",
    className: "ChangePointDetectResponse",
    modelProperties: {
      period: {
        required: true,
        serializedName: "period",
        type: {
          name: "Number"
        }
      },
      isChangePoint: {
        required: true,
        serializedName: "isChangePoint",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Boolean"
            }
          }
        }
      },
      confidenceScores: {
        required: true,
        serializedName: "confidenceScores",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    }
  }
};

export const ChangePointDetectInTimeRangeRequest: msRest.CompositeMapper = {
  serializedName: "ChangePointDetectInTimeRangeRequest",
  type: {
    name: "Composite",
    className: "ChangePointDetectInTimeRangeRequest",
    modelProperties: {
      begin: {
        required: true,
        serializedName: "begin",
        type: {
          name: "DateTime"
        }
      },
      end: {
        required: true,
        serializedName: "end",
        type: {
          name: "DateTime"
        }
      },
      period: {
        serializedName: "period",
        type: {
          name: "Number"
        }
      },
      stableTrendWindow: {
        serializedName: "stableTrendWindow",
        type: {
          name: "Number"
        }
      },
      threshold: {
        serializedName: "threshold",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ChangePointDetectInTimeRangeResponse: msRest.CompositeMapper = {
  serializedName: "ChangePointDetectInTimeRangeResponse",
  type: {
    name: "Composite",
    className: "ChangePointDetectInTimeRangeResponse",
    modelProperties: {
      period: {
        required: true,
        serializedName: "period",
        type: {
          name: "Number"
        }
      },
      isChangePoint: {
        required: true,
        serializedName: "isChangePoint",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Boolean"
            }
          }
        }
      },
      confidenceScores: {
        required: true,
        serializedName: "confidenceScores",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      timestamps: {
        required: true,
        serializedName: "timestamps",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTime"
            }
          }
        }
      }
    }
  }
};

export const TimeSeriesQueryRequest: msRest.CompositeMapper = {
  serializedName: "TimeSeriesQueryRequest",
  type: {
    name: "Composite",
    className: "TimeSeriesQueryRequest",
    modelProperties: {
      begin: {
        required: true,
        serializedName: "begin",
        type: {
          name: "DateTime"
        }
      },
      end: {
        required: true,
        serializedName: "end",
        type: {
          name: "DateTime"
        }
      },
      fields: {
        required: true,
        serializedName: "fields",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "isAnomaly",
                "isChangePoint",
                "isPositiveAnomaly",
                "isNegativeAnomaly",
                "value",
                "expectedValue",
                "upperMargin",
                "lowerMargin",
                "period"
              ]
            }
          }
        }
      }
    }
  }
};

export const TimeSeriesQueryResponse: msRest.CompositeMapper = {
  serializedName: "TimeSeriesQueryResponse",
  type: {
    name: "Composite",
    className: "TimeSeriesQueryResponse",
    modelProperties: {
      timestamps: {
        required: true,
        serializedName: "timestamps",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTime"
            }
          }
        }
      },
      fieldValues: {
        required: true,
        serializedName: "fieldValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Object"
                }
              }
            }
          }
        }
      }
    }
  }
};

export const AnomalyDetectInTimeRangeRequest: msRest.CompositeMapper = {
  serializedName: "AnomalyDetectInTimeRangeRequest",
  type: {
    name: "Composite",
    className: "AnomalyDetectInTimeRangeRequest",
    modelProperties: {
      begin: {
        required: true,
        serializedName: "begin",
        type: {
          name: "DateTime"
        }
      },
      end: {
        required: true,
        serializedName: "end",
        type: {
          name: "DateTime"
        }
      },
      period: {
        serializedName: "period",
        type: {
          name: "Number"
        }
      },
      maxAnomalyRatio: {
        serializedName: "maxAnomalyRatio",
        type: {
          name: "Number"
        }
      },
      sensitivity: {
        serializedName: "sensitivity",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AnomalyDetectInTimeRangeReponse: msRest.CompositeMapper = {
  serializedName: "AnomalyDetectInTimeRangeReponse",
  type: {
    name: "Composite",
    className: "AnomalyDetectInTimeRangeReponse",
    modelProperties: {
      period: {
        required: true,
        serializedName: "period",
        type: {
          name: "Number"
        }
      },
      timestamps: {
        required: true,
        serializedName: "timestamps",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTime"
            }
          }
        }
      },
      values: {
        required: true,
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      expectedValues: {
        required: true,
        serializedName: "expectedValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      upperMargins: {
        required: true,
        serializedName: "upperMargins",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      lowerMargins: {
        required: true,
        serializedName: "lowerMargins",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      isAnomaly: {
        required: true,
        serializedName: "isAnomaly",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Boolean"
            }
          }
        }
      },
      isNegativeAnomaly: {
        required: true,
        serializedName: "isNegativeAnomaly",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Boolean"
            }
          }
        }
      },
      isPositiveAnomaly: {
        required: true,
        serializedName: "isPositiveAnomaly",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Boolean"
            }
          }
        }
      }
    }
  }
};

export const LabelRequest: msRest.CompositeMapper = {
  serializedName: "LabelRequest",
  type: {
    name: "Composite",
    className: "LabelRequest",
    modelProperties: {
      begin: {
        required: true,
        serializedName: "begin",
        type: {
          name: "DateTime"
        }
      },
      end: {
        required: true,
        serializedName: "end",
        type: {
          name: "DateTime"
        }
      },
      type: {
        required: true,
        nullable: false,
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "changePoint",
            "Anomaly"
          ]
        }
      },
      value: {
        required: true,
        nullable: false,
        serializedName: "value",
        type: {
          name: "Enum",
          allowedValues: [
            "true",
            "false"
          ]
        }
      }
    }
  }
};
