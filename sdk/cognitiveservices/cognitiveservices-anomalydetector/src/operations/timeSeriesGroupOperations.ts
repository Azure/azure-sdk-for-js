/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/timeSeriesGroupOperationsMappers";
import * as Parameters from "../models/parameters";
import { AnomalyDetectorClientContext } from "../anomalyDetectorClientContext";

/** Class representing a TimeSeriesGroupOperations. */
export class TimeSeriesGroupOperations {
  private readonly client: AnomalyDetectorClientContext;

  /**
   * Create a TimeSeriesGroupOperations.
   * @param {AnomalyDetectorClientContext} client Reference to the service client.
   */
  constructor(client: AnomalyDetectorClientContext) {
    this.client = client;
  }

  /**
   * This operation fetches detailed information about the specified time series group.
   * @summary Get meta information of the specified time series group.
   * @param timeSeriesGroupId Unique id for time series group.
   * @param [options] The optional parameters
   * @returns Promise<Models.TimeSeriesGroupGetResponse>
   */
  get(timeSeriesGroupId: string, options?: msRest.RequestOptionsBase): Promise<Models.TimeSeriesGroupGetResponse>;
  /**
   * @param timeSeriesGroupId Unique id for time series group.
   * @param callback The callback
   */
  get(timeSeriesGroupId: string, callback: msRest.ServiceCallback<Models.TimeSeriesGroup>): void;
  /**
   * @param timeSeriesGroupId Unique id for time series group.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(timeSeriesGroupId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TimeSeriesGroup>): void;
  get(timeSeriesGroupId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TimeSeriesGroup>, callback?: msRest.ServiceCallback<Models.TimeSeriesGroup>): Promise<Models.TimeSeriesGroupGetResponse> {
    return this.client.sendOperationRequest(
      {
        timeSeriesGroupId,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.TimeSeriesGroupGetResponse>;
  }

  /**
   * Create a time series group.
   * @summary Create a time series group.
   * @param timeSeriesGroupId Unique id for time series group.
   * @param body GroupId and granularity are needed to create a time series group
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  create(timeSeriesGroupId: string, body: Models.TimeSeriesGroupCreateRequest, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param timeSeriesGroupId Unique id for time series group.
   * @param body GroupId and granularity are needed to create a time series group
   * @param callback The callback
   */
  create(timeSeriesGroupId: string, body: Models.TimeSeriesGroupCreateRequest, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param timeSeriesGroupId Unique id for time series group.
   * @param body GroupId and granularity are needed to create a time series group
   * @param options The optional parameters
   * @param callback The callback
   */
  create(timeSeriesGroupId: string, body: Models.TimeSeriesGroupCreateRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  create(timeSeriesGroupId: string, body: Models.TimeSeriesGroupCreateRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        timeSeriesGroupId,
        body,
        options
      },
      createOperationSpec,
      callback);
  }

  /**
   * Delete a time series group.
   * @summary Delete a time series group.
   * @param timeSeriesGroupId Unique id for time series group.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(timeSeriesGroupId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param timeSeriesGroupId Unique id for time series group.
   * @param callback The callback
   */
  deleteMethod(timeSeriesGroupId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param timeSeriesGroupId Unique id for time series group.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(timeSeriesGroupId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(timeSeriesGroupId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        timeSeriesGroupId,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * List time series groups page by page using the "next" field. It means that all time series
   * groups have been returned when the "next" field is null.
   * @summary List time series groups.
   * @param [options] The optional parameters
   * @returns Promise<Models.TimeSeriesGroupListResponse>
   */
  list(options?: Models.TimeSeriesGroupListOptionalParams): Promise<Models.TimeSeriesGroupListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.TimeSeriesGroupList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: Models.TimeSeriesGroupListOptionalParams, callback: msRest.ServiceCallback<Models.TimeSeriesGroupList>): void;
  list(options?: Models.TimeSeriesGroupListOptionalParams | msRest.ServiceCallback<Models.TimeSeriesGroupList>, callback?: msRest.ServiceCallback<Models.TimeSeriesGroupList>): Promise<Models.TimeSeriesGroupListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.TimeSeriesGroupListResponse>;
  }

  /**
   * This operation helps detect the inconsistent series among a group series with similar trend.
   * @summary Detect inconsistent time series from a group of similar time series.
   * @param timeSeriesGroupId Unique id for time series group.
   * @param body Timestamp is necessary, and a parameter called epsilon is needed to tune the result.
   * Epsilon should be within 0 and 1.
   * @param [options] The optional parameters
   * @returns Promise<Models.TimeSeriesGroupInconsistencyDetectResponse>
   */
  inconsistencyDetect(timeSeriesGroupId: string, body: Models.InconsistencyDetectRequest, options?: msRest.RequestOptionsBase): Promise<Models.TimeSeriesGroupInconsistencyDetectResponse>;
  /**
   * @param timeSeriesGroupId Unique id for time series group.
   * @param body Timestamp is necessary, and a parameter called epsilon is needed to tune the result.
   * Epsilon should be within 0 and 1.
   * @param callback The callback
   */
  inconsistencyDetect(timeSeriesGroupId: string, body: Models.InconsistencyDetectRequest, callback: msRest.ServiceCallback<Models.Inconsistency>): void;
  /**
   * @param timeSeriesGroupId Unique id for time series group.
   * @param body Timestamp is necessary, and a parameter called epsilon is needed to tune the result.
   * Epsilon should be within 0 and 1.
   * @param options The optional parameters
   * @param callback The callback
   */
  inconsistencyDetect(timeSeriesGroupId: string, body: Models.InconsistencyDetectRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Inconsistency>): void;
  inconsistencyDetect(timeSeriesGroupId: string, body: Models.InconsistencyDetectRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Inconsistency>, callback?: msRest.ServiceCallback<Models.Inconsistency>): Promise<Models.TimeSeriesGroupInconsistencyDetectResponse> {
    return this.client.sendOperationRequest(
      {
        timeSeriesGroupId,
        body,
        options
      },
      inconsistencyDetectOperationSpec,
      callback) as Promise<Models.TimeSeriesGroupInconsistencyDetectResponse>;
  }

  /**
   * This operation helps query properties of one group, for example the inconsistent series among a
   * group series with similar trend.
   * @summary Query time series properties from a group of similar time series.
   * @param timeSeriesGroupId Unique id for time series group.
   * @param body Start time and end time is necessary.
   * @param [options] The optional parameters
   * @returns Promise<Models.TimeSeriesGroupInconsistencyQueryResponse>
   */
  inconsistencyQuery(timeSeriesGroupId: string, body: Models.InconsistencyQueryRequest, options?: msRest.RequestOptionsBase): Promise<Models.TimeSeriesGroupInconsistencyQueryResponse>;
  /**
   * @param timeSeriesGroupId Unique id for time series group.
   * @param body Start time and end time is necessary.
   * @param callback The callback
   */
  inconsistencyQuery(timeSeriesGroupId: string, body: Models.InconsistencyQueryRequest, callback: msRest.ServiceCallback<Models.Inconsistency[]>): void;
  /**
   * @param timeSeriesGroupId Unique id for time series group.
   * @param body Start time and end time is necessary.
   * @param options The optional parameters
   * @param callback The callback
   */
  inconsistencyQuery(timeSeriesGroupId: string, body: Models.InconsistencyQueryRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Inconsistency[]>): void;
  inconsistencyQuery(timeSeriesGroupId: string, body: Models.InconsistencyQueryRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Inconsistency[]>, callback?: msRest.ServiceCallback<Models.Inconsistency[]>): Promise<Models.TimeSeriesGroupInconsistencyQueryResponse> {
    return this.client.sendOperationRequest(
      {
        timeSeriesGroupId,
        body,
        options
      },
      inconsistencyQueryOperationSpec,
      callback) as Promise<Models.TimeSeriesGroupInconsistencyQueryResponse>;
  }

  /**
   * List TimeSeries that belongs to a TimeSeriesGroup. One TimeSeriesGroup could have multiple
   * TimeSeries.
   * @summary List TimeSeries that belongs to a TimeSeriesGroup.
   * @param timeSeriesGroupId Unique id for time series group.
   * @param [options] The optional parameters
   * @returns Promise<Models.TimeSeriesGroupListSeriesResponse>
   */
  listSeries(timeSeriesGroupId: string, options?: Models.TimeSeriesGroupListSeriesOptionalParams): Promise<Models.TimeSeriesGroupListSeriesResponse>;
  /**
   * @param timeSeriesGroupId Unique id for time series group.
   * @param callback The callback
   */
  listSeries(timeSeriesGroupId: string, callback: msRest.ServiceCallback<Models.TimeSeriesList>): void;
  /**
   * @param timeSeriesGroupId Unique id for time series group.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSeries(timeSeriesGroupId: string, options: Models.TimeSeriesGroupListSeriesOptionalParams, callback: msRest.ServiceCallback<Models.TimeSeriesList>): void;
  listSeries(timeSeriesGroupId: string, options?: Models.TimeSeriesGroupListSeriesOptionalParams | msRest.ServiceCallback<Models.TimeSeriesList>, callback?: msRest.ServiceCallback<Models.TimeSeriesList>): Promise<Models.TimeSeriesGroupListSeriesResponse> {
    return this.client.sendOperationRequest(
      {
        timeSeriesGroupId,
        options
      },
      listSeriesOperationSpec,
      callback) as Promise<Models.TimeSeriesGroupListSeriesResponse>;
  }

  /**
   * Add a TimeSeries to TimeSeriesGroup.
   * @summary Add a TimeSeries to TimeSeriesGroup.
   * @param timeSeriesGroupId Unique id for time series group.
   * @param timeSeriesId Unique id for time series.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  addTimeSeries(timeSeriesGroupId: string, timeSeriesId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param timeSeriesGroupId Unique id for time series group.
   * @param timeSeriesId Unique id for time series.
   * @param callback The callback
   */
  addTimeSeries(timeSeriesGroupId: string, timeSeriesId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param timeSeriesGroupId Unique id for time series group.
   * @param timeSeriesId Unique id for time series.
   * @param options The optional parameters
   * @param callback The callback
   */
  addTimeSeries(timeSeriesGroupId: string, timeSeriesId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  addTimeSeries(timeSeriesGroupId: string, timeSeriesId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        timeSeriesGroupId,
        timeSeriesId,
        options
      },
      addTimeSeriesOperationSpec,
      callback);
  }

  /**
   * Remove a TimeSeries from TimeSeriesGroup.
   * @summary Remove a TimeSeries from TimeSeriesGroup.
   * @param timeSeriesGroupId Unique id for time series group.
   * @param timeSeriesId Unique id for time series.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteTimeSeries(timeSeriesGroupId: string, timeSeriesId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param timeSeriesGroupId Unique id for time series group.
   * @param timeSeriesId Unique id for time series.
   * @param callback The callback
   */
  deleteTimeSeries(timeSeriesGroupId: string, timeSeriesId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param timeSeriesGroupId Unique id for time series group.
   * @param timeSeriesId Unique id for time series.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteTimeSeries(timeSeriesGroupId: string, timeSeriesId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteTimeSeries(timeSeriesGroupId: string, timeSeriesId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        timeSeriesGroupId,
        timeSeriesId,
        options
      },
      deleteTimeSeriesOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "timeseriesgroups/{timeSeriesGroupId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.timeSeriesGroupId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TimeSeriesGroup
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "timeseriesgroups/{timeSeriesGroupId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.timeSeriesGroupId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.TimeSeriesGroupCreateRequest,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "timeseriesgroups/{timeSeriesGroupId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.timeSeriesGroupId
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "timeseriesgroups",
  urlParameters: [
    Parameters.endpoint
  ],
  queryParameters: [
    Parameters.next
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TimeSeriesGroupList
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const inconsistencyDetectOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "timeseriesgroups/{timeSeriesGroupId}/inconsistency/detect",
  urlParameters: [
    Parameters.endpoint,
    Parameters.timeSeriesGroupId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.InconsistencyDetectRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Inconsistency
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const inconsistencyQueryOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "timeseriesgroups/{timeSeriesGroupId}/inconsistency/query",
  urlParameters: [
    Parameters.endpoint,
    Parameters.timeSeriesGroupId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.InconsistencyQueryRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Inconsistency"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const listSeriesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "timeseriesgroups/{timeSeriesGroupId}/timeseries",
  urlParameters: [
    Parameters.endpoint,
    Parameters.timeSeriesGroupId
  ],
  queryParameters: [
    Parameters.next
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TimeSeriesList
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const addTimeSeriesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "timeseriesgroups/{timeSeriesGroupId}/timeseries/{timeSeriesId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.timeSeriesGroupId,
    Parameters.timeSeriesId
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const deleteTimeSeriesOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "timeseriesgroups/{timeSeriesGroupId}/timeseries/{timeSeriesId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.timeSeriesGroupId,
    Parameters.timeSeriesId
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};
