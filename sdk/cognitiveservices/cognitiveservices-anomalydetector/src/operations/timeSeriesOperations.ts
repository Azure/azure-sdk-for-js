/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/timeSeriesOperationsMappers";
import * as Parameters from "../models/parameters";
import { AnomalyDetectorClientContext } from "../anomalyDetectorClientContext";

/** Class representing a TimeSeriesOperations. */
export class TimeSeriesOperations {
  private readonly client: AnomalyDetectorClientContext;

  /**
   * Create a TimeSeriesOperations.
   * @param {AnomalyDetectorClientContext} client Reference to the service client.
   */
  constructor(client: AnomalyDetectorClientContext) {
    this.client = client;
  }

  /**
   * corresponds to create series, get series meta with timeseries id.
   * @summary Get meta information of the specified timeseries.
   * @param timeSeriesId Unique id for time series.
   * @param [options] The optional parameters
   * @returns Promise<Models.TimeSeriesGetResponse>
   */
  get(timeSeriesId: string, options?: msRest.RequestOptionsBase): Promise<Models.TimeSeriesGetResponse>;
  /**
   * @param timeSeriesId Unique id for time series.
   * @param callback The callback
   */
  get(timeSeriesId: string, callback: msRest.ServiceCallback<Models.TimeSeries>): void;
  /**
   * @param timeSeriesId Unique id for time series.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(timeSeriesId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TimeSeries>): void;
  get(timeSeriesId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TimeSeries>, callback?: msRest.ServiceCallback<Models.TimeSeries>): Promise<Models.TimeSeriesGetResponse> {
    return this.client.sendOperationRequest(
      {
        timeSeriesId,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.TimeSeriesGetResponse>;
  }

  /**
   * Create series, user need to provide timeSeriesId and granularity, if the series has dimension or
   * name, description can be provided through the interface.
   * @summary Creat a timeseries.
   * @param timeSeriesId Unique id for time series.
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  create(timeSeriesId: string, body: Models.TimeSeriesCreateRequest, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param timeSeriesId Unique id for time series.
   * @param body
   * @param callback The callback
   */
  create(timeSeriesId: string, body: Models.TimeSeriesCreateRequest, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param timeSeriesId Unique id for time series.
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  create(timeSeriesId: string, body: Models.TimeSeriesCreateRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  create(timeSeriesId: string, body: Models.TimeSeriesCreateRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        timeSeriesId,
        body,
        options
      },
      createOperationSpec,
      callback);
  }

  /**
   * Delete the specified timeseries.
   * @summary Delete the specified timeseries.
   * @param timeSeriesId Unique id for time series.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(timeSeriesId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param timeSeriesId Unique id for time series.
   * @param callback The callback
   */
  deleteMethod(timeSeriesId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param timeSeriesId Unique id for time series.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(timeSeriesId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(timeSeriesId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        timeSeriesId,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * List time series of each unique user.
   * @summary List time series of each unique user.
   * @param [options] The optional parameters
   * @returns Promise<Models.TimeSeriesListResponse>
   */
  list(options?: Models.TimeSeriesListOptionalParams): Promise<Models.TimeSeriesListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.TimeSeriesList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: Models.TimeSeriesListOptionalParams, callback: msRest.ServiceCallback<Models.TimeSeriesList>): void;
  list(options?: Models.TimeSeriesListOptionalParams | msRest.ServiceCallback<Models.TimeSeriesList>, callback?: msRest.ServiceCallback<Models.TimeSeriesList>): Promise<Models.TimeSeriesListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.TimeSeriesListResponse>;
  }

  /**
   * Insert or replace timeseries data for specified timeSeriesId. Note that this interface only
   * stores data and do not detect these data.
   * @param timeSeriesId Unique id for time series.
   * @param body Request body for writing timeseries.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  write(timeSeriesId: string, body: Models.Point[], options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param timeSeriesId Unique id for time series.
   * @param body Request body for writing timeseries.
   * @param callback The callback
   */
  write(timeSeriesId: string, body: Models.Point[], callback: msRest.ServiceCallback<void>): void;
  /**
   * @param timeSeriesId Unique id for time series.
   * @param body Request body for writing timeseries.
   * @param options The optional parameters
   * @param callback The callback
   */
  write(timeSeriesId: string, body: Models.Point[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  write(timeSeriesId: string, body: Models.Point[], options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        timeSeriesId,
        body,
        options
      },
      writeOperationSpec,
      callback);
  }

  /**
   * This operation can be used in streaming monitoring scenario, when user would like to monitor a
   * time series, the user only need to provide a time range, last detect API will check where last
   * detection ends and will return detection results between last detection and the end time
   * @summary Detect anomaly status on a given timestamp
   * @param timeSeriesId Unique id for time series.
   * @param body Timestamp is required in the request. Advanced model parameters (period,
   * sensitivity, maxAnomalyRatio) can also be set in the request.
   * @param [options] The optional parameters
   * @returns Promise<Models.TimeSeriesDetectOnTimestampResponse>
   */
  detectOnTimestamp(timeSeriesId: string, body: Models.AnomalyDetectOnTimestampRequest, options?: msRest.RequestOptionsBase): Promise<Models.TimeSeriesDetectOnTimestampResponse>;
  /**
   * @param timeSeriesId Unique id for time series.
   * @param body Timestamp is required in the request. Advanced model parameters (period,
   * sensitivity, maxAnomalyRatio) can also be set in the request.
   * @param callback The callback
   */
  detectOnTimestamp(timeSeriesId: string, body: Models.AnomalyDetectOnTimestampRequest, callback: msRest.ServiceCallback<Models.AnomalyDetectOnTimestampResponse>): void;
  /**
   * @param timeSeriesId Unique id for time series.
   * @param body Timestamp is required in the request. Advanced model parameters (period,
   * sensitivity, maxAnomalyRatio) can also be set in the request.
   * @param options The optional parameters
   * @param callback The callback
   */
  detectOnTimestamp(timeSeriesId: string, body: Models.AnomalyDetectOnTimestampRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AnomalyDetectOnTimestampResponse>): void;
  detectOnTimestamp(timeSeriesId: string, body: Models.AnomalyDetectOnTimestampRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AnomalyDetectOnTimestampResponse>, callback?: msRest.ServiceCallback<Models.AnomalyDetectOnTimestampResponse>): Promise<Models.TimeSeriesDetectOnTimestampResponse> {
    return this.client.sendOperationRequest(
      {
        timeSeriesId,
        body,
        options
      },
      detectOnTimestampOperationSpec,
      callback) as Promise<Models.TimeSeriesDetectOnTimestampResponse>;
  }

  /**
   * Evaluate change point score of every series point between start and end.
   * @summary Detect change point for the interval series
   * @param timeSeriesId Unique id for time series.
   * @param body Timestamp is needed. Advanced model parameters can also be set in the request if
   * needed.
   * @param [options] The optional parameters
   * @returns Promise<Models.TimeSeriesChangePointDetectOnTimestampResponse>
   */
  changePointDetectOnTimestamp(timeSeriesId: string, body: Models.ChangePointDetectOnTimestampRequest, options?: msRest.RequestOptionsBase): Promise<Models.TimeSeriesChangePointDetectOnTimestampResponse>;
  /**
   * @param timeSeriesId Unique id for time series.
   * @param body Timestamp is needed. Advanced model parameters can also be set in the request if
   * needed.
   * @param callback The callback
   */
  changePointDetectOnTimestamp(timeSeriesId: string, body: Models.ChangePointDetectOnTimestampRequest, callback: msRest.ServiceCallback<Models.ChangePointDetectOnTimestampResponse>): void;
  /**
   * @param timeSeriesId Unique id for time series.
   * @param body Timestamp is needed. Advanced model parameters can also be set in the request if
   * needed.
   * @param options The optional parameters
   * @param callback The callback
   */
  changePointDetectOnTimestamp(timeSeriesId: string, body: Models.ChangePointDetectOnTimestampRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ChangePointDetectOnTimestampResponse>): void;
  changePointDetectOnTimestamp(timeSeriesId: string, body: Models.ChangePointDetectOnTimestampRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ChangePointDetectOnTimestampResponse>, callback?: msRest.ServiceCallback<Models.ChangePointDetectOnTimestampResponse>): Promise<Models.TimeSeriesChangePointDetectOnTimestampResponse> {
    return this.client.sendOperationRequest(
      {
        timeSeriesId,
        body,
        options
      },
      changePointDetectOnTimestampOperationSpec,
      callback) as Promise<Models.TimeSeriesChangePointDetectOnTimestampResponse>;
  }

  /**
   * This operation is used for users to label Anomaly or ChangePoint states of a certain time stamp,
   * these label will be used for regenerate detection model
   * @summary Label API is used for users to label detection status of a certain time stamp of a time
   * series
   * @param timeSeriesId Unique id for time series.
   * @param body In Label request, user can set Anomaly|ChangePoint state (true, false, unknown) for
   * a time range
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  label(timeSeriesId: string, body: Models.LabelRequest, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param timeSeriesId Unique id for time series.
   * @param body In Label request, user can set Anomaly|ChangePoint state (true, false, unknown) for
   * a time range
   * @param callback The callback
   */
  label(timeSeriesId: string, body: Models.LabelRequest, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param timeSeriesId Unique id for time series.
   * @param body In Label request, user can set Anomaly|ChangePoint state (true, false, unknown) for
   * a time range
   * @param options The optional parameters
   * @param callback The callback
   */
  label(timeSeriesId: string, body: Models.LabelRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  label(timeSeriesId: string, body: Models.LabelRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        timeSeriesId,
        body,
        options
      },
      labelOperationSpec,
      callback);
  }

  /**
   * Query timeseries with required field in each timestamp.
   * @param timeSeriesId Unique id for time series.
   * @param body Request body for querying timeseries.
   * @param [options] The optional parameters
   * @returns Promise<Models.TimeSeriesQueryResponse2>
   */
  query(timeSeriesId: string, body: Models.TimeSeriesQueryRequest, options?: msRest.RequestOptionsBase): Promise<Models.TimeSeriesQueryResponse2>;
  /**
   * @param timeSeriesId Unique id for time series.
   * @param body Request body for querying timeseries.
   * @param callback The callback
   */
  query(timeSeriesId: string, body: Models.TimeSeriesQueryRequest, callback: msRest.ServiceCallback<Models.TimeSeriesQueryResponse>): void;
  /**
   * @param timeSeriesId Unique id for time series.
   * @param body Request body for querying timeseries.
   * @param options The optional parameters
   * @param callback The callback
   */
  query(timeSeriesId: string, body: Models.TimeSeriesQueryRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TimeSeriesQueryResponse>): void;
  query(timeSeriesId: string, body: Models.TimeSeriesQueryRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TimeSeriesQueryResponse>, callback?: msRest.ServiceCallback<Models.TimeSeriesQueryResponse>): Promise<Models.TimeSeriesQueryResponse2> {
    return this.client.sendOperationRequest(
      {
        timeSeriesId,
        body,
        options
      },
      queryOperationSpec,
      callback) as Promise<Models.TimeSeriesQueryResponse2>;
  }

  /**
   * List TimeSeriesGroups that a TimeSeries belongs to. One TimeSeries could belong to multiple
   * TimeSeriesGroups.
   * @summary List TimeSeriesGroups that a TimeSeries belongs to.
   * @param timeSeriesId Unique id for time series.
   * @param [options] The optional parameters
   * @returns Promise<Models.TimeSeriesListGroupsResponse>
   */
  listGroups(timeSeriesId: string, options?: Models.TimeSeriesListGroupsOptionalParams): Promise<Models.TimeSeriesListGroupsResponse>;
  /**
   * @param timeSeriesId Unique id for time series.
   * @param callback The callback
   */
  listGroups(timeSeriesId: string, callback: msRest.ServiceCallback<Models.TimeSeriesGroupList>): void;
  /**
   * @param timeSeriesId Unique id for time series.
   * @param options The optional parameters
   * @param callback The callback
   */
  listGroups(timeSeriesId: string, options: Models.TimeSeriesListGroupsOptionalParams, callback: msRest.ServiceCallback<Models.TimeSeriesGroupList>): void;
  listGroups(timeSeriesId: string, options?: Models.TimeSeriesListGroupsOptionalParams | msRest.ServiceCallback<Models.TimeSeriesGroupList>, callback?: msRest.ServiceCallback<Models.TimeSeriesGroupList>): Promise<Models.TimeSeriesListGroupsResponse> {
    return this.client.sendOperationRequest(
      {
        timeSeriesId,
        options
      },
      listGroupsOperationSpec,
      callback) as Promise<Models.TimeSeriesListGroupsResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "timeseries/{timeSeriesId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.timeSeriesId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TimeSeries
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "timeseries/{timeSeriesId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.timeSeriesId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.TimeSeriesCreateRequest,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "timeseries/{timeSeriesId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.timeSeriesId
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "timeseries",
  urlParameters: [
    Parameters.endpoint
  ],
  queryParameters: [
    Parameters.next
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TimeSeriesList
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const writeOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "timeseries/{timeSeriesId}/write",
  urlParameters: [
    Parameters.endpoint,
    Parameters.timeSeriesId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Composite",
            className: "Point"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const detectOnTimestampOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "timeseries/{timeSeriesId}/detect",
  urlParameters: [
    Parameters.endpoint,
    Parameters.timeSeriesId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.AnomalyDetectOnTimestampRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.AnomalyDetectOnTimestampResponse
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const changePointDetectOnTimestampOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "timeseries/{timeSeriesId}/changepoint/detect",
  urlParameters: [
    Parameters.endpoint,
    Parameters.timeSeriesId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.ChangePointDetectOnTimestampRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ChangePointDetectOnTimestampResponse
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const labelOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "timeseries/{timeSeriesId}/label",
  urlParameters: [
    Parameters.endpoint,
    Parameters.timeSeriesId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.LabelRequest,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const queryOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "timeseries/{timeSeriesId}/query",
  urlParameters: [
    Parameters.endpoint,
    Parameters.timeSeriesId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.TimeSeriesQueryRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.TimeSeriesQueryResponse
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const listGroupsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "timeseries/{timeSeriesId}/timeseriesgroups",
  urlParameters: [
    Parameters.endpoint,
    Parameters.timeSeriesId
  ],
  queryParameters: [
    Parameters.next
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TimeSeriesGroupList
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};
