/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  PersonGroupCreateOptionalParams,
  PersonGroupDeleteOptionalParams,
  PersonGroupGetOptionalParams,
  PersonGroupGetResponse,
  PersonGroupUpdateOptionalParams,
  PersonGroupGetTrainingStatusOptionalParams,
  PersonGroupGetTrainingStatusResponse,
  PersonGroupListOptionalParams,
  PersonGroupListResponse,
  PersonGroupTrainOptionalParams
} from "../models";

/** Interface representing a PersonGroupOperations. */
export interface PersonGroupOperations {
  /**
   * Create a new person group with specified personGroupId, name, user-provided userData and
   * recognitionModel.
   * <br /> A person group is the container of the uploaded person data, including face recognition
   * features.
   * <br /> After creation, use [PersonGroup Person -
   * Create](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/create) to add persons into
   * the group, and then call [PersonGroup -
   * Train](https://docs.microsoft.com/rest/api/faceapi/persongroup/train) to get this group ready for
   * [Face - Identify](https://docs.microsoft.com/rest/api/faceapi/face/identify).
   * <br /> No image will be stored. Only the person's extracted face features and userData will be
   * stored on server until [PersonGroup Person -
   * Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/delete) or [PersonGroup -
   * Delete](https://docs.microsoft.com/rest/api/faceapi/persongroup/delete) is called.
   * <br/>'recognitionModel' should be specified to associate with this person group. The default value
   * for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify
   * the model you need in this parameter. New faces that are added to an existing person group will use
   * the recognition model that's already associated with the collection. Existing face features in a
   * person group can't be updated to features extracted by another version of recognition model.
   *
   * Person group quota:
   * * Free-tier subscription quota: 1,000 person groups. Each holds up to 1,000 persons.
   * * S0-tier subscription quota: 1,000,000 person groups. Each holds up to 10,000 persons.
   * * to handle larger scale face identification problem, please consider using
   * [LargePersonGroup](https://docs.microsoft.com/rest/api/faceapi/largepersongroup).
   * @param personGroupId Id referencing a particular person group.
   * @param name User defined name, maximum length is 128.
   * @param options The options parameters.
   */
  create(
    personGroupId: string,
    name: string,
    options?: PersonGroupCreateOptionalParams
  ): Promise<void>;
  /**
   * Delete an existing person group. Persisted face features of all people in the person group will also
   * be deleted.
   * @param personGroupId Id referencing a particular person group.
   * @param options The options parameters.
   */
  delete(
    personGroupId: string,
    options?: PersonGroupDeleteOptionalParams
  ): Promise<void>;
  /**
   * Retrieve person group name, userData and recognitionModel. To get person information under this
   * personGroup, use [PersonGroup Person -
   * List](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/list).
   * @param personGroupId Id referencing a particular person group.
   * @param options The options parameters.
   */
  get(
    personGroupId: string,
    options?: PersonGroupGetOptionalParams
  ): Promise<PersonGroupGetResponse>;
  /**
   * Update an existing person group's display name and userData. The properties which does not appear in
   * request body will not be updated.
   * @param personGroupId Id referencing a particular person group.
   * @param options The options parameters.
   */
  update(
    personGroupId: string,
    options?: PersonGroupUpdateOptionalParams
  ): Promise<void>;
  /**
   * Retrieve the training status of a person group (completed or ongoing).
   * @param personGroupId Id referencing a particular person group.
   * @param options The options parameters.
   */
  getTrainingStatus(
    personGroupId: string,
    options?: PersonGroupGetTrainingStatusOptionalParams
  ): Promise<PersonGroupGetTrainingStatusResponse>;
  /**
   * List person groups’ personGroupId, name, userData and recognitionModel.<br />
   * * Person groups are stored in alphabetical order of personGroupId.
   * * "start" parameter (string, optional) is a user-provided personGroupId value that returned entries
   * have larger ids by string comparison. "start" set to empty to indicate return from the first item.
   * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000
   * entries can be returned in one call. To fetch more, you can specify "start" with the last returned
   * entry’s Id of the current call.
   * <br />
   * For example, total 5 person groups: "group1", ..., "group5".
   * <br /> "start=&top=" will return all 5 groups.
   * <br /> "start=&top=2" will return "group1", "group2".
   * <br /> "start=group2&top=3" will return "group3", "group4", "group5".
   *
   * @param options The options parameters.
   */
  list(
    options?: PersonGroupListOptionalParams
  ): Promise<PersonGroupListResponse>;
  /**
   * Queue a person group training task, the training task may not be started immediately.
   * @param personGroupId Id referencing a particular person group.
   * @param options The options parameters.
   */
  train(
    personGroupId: string,
    options?: PersonGroupTrainOptionalParams
  ): Promise<void>;
}
