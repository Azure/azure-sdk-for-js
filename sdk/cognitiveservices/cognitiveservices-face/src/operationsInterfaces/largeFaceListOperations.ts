/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreRestPipeline from "@azure/core-rest-pipeline";
import {
  LargeFaceListCreateOptionalParams,
  LargeFaceListGetOptionalParams,
  LargeFaceListGetResponse,
  LargeFaceListUpdateOptionalParams,
  LargeFaceListDeleteOptionalParams,
  LargeFaceListGetTrainingStatusOptionalParams,
  LargeFaceListGetTrainingStatusResponse,
  LargeFaceListListOptionalParams,
  LargeFaceListListResponse,
  LargeFaceListTrainOptionalParams,
  LargeFaceListDeleteFaceOptionalParams,
  LargeFaceListGetFaceOptionalParams,
  LargeFaceListGetFaceResponse,
  LargeFaceListUpdateFaceOptionalParams,
  LargeFaceListAddFaceFromUrlOptionalParams,
  LargeFaceListAddFaceFromUrlResponse,
  LargeFaceListListFacesOptionalParams,
  LargeFaceListListFacesResponse,
  LargeFaceListAddFaceFromStreamOptionalParams,
  LargeFaceListAddFaceFromStreamResponse
} from "../models";

/** Interface representing a LargeFaceListOperations. */
export interface LargeFaceListOperations {
  /**
   * Create an empty large face list with user-specified largeFaceListId, name, an optional userData and
   * recognitionModel.
   * <br /> Large face list is a list of faces, up to 1,000,000 faces, and used by [Face - Find
   * Similar](https://docs.microsoft.com/rest/api/faceapi/face/findsimilar).
   * <br /> After creation, user should use [LargeFaceList Face -
   * Add](https://docs.microsoft.com/rest/api/faceapi/largefacelist/addfacefromurl) to import the faces
   * and [LargeFaceList - Train](https://docs.microsoft.com/rest/api/faceapi/largefacelist/train) to make
   * it ready for [Face - Find Similar](https://docs.microsoft.com/rest/api/faceapi/face/findsimilar). No
   * image will be stored. Only the extracted face features are stored on server until [LargeFaceList -
   * Delete](https://docs.microsoft.com/rest/api/faceapi/largefacelist/delete) is called.
   * <br /> Find Similar is used for scenario like finding celebrity-like faces, similar face filtering,
   * or as a light way face identification. But if the actual use is to identify person, please use
   * [PersonGroup](https://docs.microsoft.com/rest/api/faceapi/persongroup) /
   * [LargePersonGroup](https://docs.microsoft.com/rest/api/faceapi/largepersongroup) and [Face -
   * Identify](https://docs.microsoft.com/rest/api/faceapi/face/identify).
   * <br/>'recognitionModel' should be specified to associate with this large face list. The default
   * value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly
   * specify the model you need in this parameter. New faces that are added to an existing large face
   * list will use the recognition model that's already associated with the collection. Existing face
   * features in a large face list can't be updated to features extracted by another version of
   * recognition model. Please refer to [Specify a recognition
   * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model).
   *
   * Large face list quota:
   * * Free-tier subscription quota: 64 large face lists.
   * * S0-tier subscription quota: 1,000,000 large face lists.
   * @param largeFaceListId Id referencing a particular large face list.
   * @param name User defined name, maximum length is 128.
   * @param options The options parameters.
   */
  create(
    largeFaceListId: string,
    name: string,
    options?: LargeFaceListCreateOptionalParams
  ): Promise<void>;
  /**
   * Retrieve a large face list’s largeFaceListId, name, userData and recognitionModel.
   * @param largeFaceListId Id referencing a particular large face list.
   * @param options The options parameters.
   */
  get(
    largeFaceListId: string,
    options?: LargeFaceListGetOptionalParams
  ): Promise<LargeFaceListGetResponse>;
  /**
   * Update information of a large face list.
   * @param largeFaceListId Id referencing a particular large face list.
   * @param options The options parameters.
   */
  update(
    largeFaceListId: string,
    options?: LargeFaceListUpdateOptionalParams
  ): Promise<void>;
  /**
   * Delete a specified large face list.
   * @param largeFaceListId Id referencing a particular large face list.
   * @param options The options parameters.
   */
  delete(
    largeFaceListId: string,
    options?: LargeFaceListDeleteOptionalParams
  ): Promise<void>;
  /**
   * Retrieve the training status of a large face list (completed or ongoing).
   * @param largeFaceListId Id referencing a particular large face list.
   * @param options The options parameters.
   */
  getTrainingStatus(
    largeFaceListId: string,
    options?: LargeFaceListGetTrainingStatusOptionalParams
  ): Promise<LargeFaceListGetTrainingStatusResponse>;
  /**
   * List large face lists’ information of largeFaceListId, name, userData and recognitionModel. <br />
   * To get face information inside largeFaceList use [LargeFaceList Face -
   * Get](https://docs.microsoft.com/rest/api/faceapi/largefacelist/getface)<br />
   * * Large face lists are stored in alphabetical order of largeFaceListId.
   * * "start" parameter (string, optional) is a user-provided largeFaceListId value that returned
   * entries have larger ids by string comparison. "start" set to empty to indicate return from the first
   * item.
   * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000
   * entries can be returned in one call. To fetch more, you can specify "start" with the last returned
   * entry’s Id of the current call.
   * <br />
   * For example, total 5 large person lists: "list1", ..., "list5".
   * <br /> "start=&top=" will return all 5 lists.
   * <br /> "start=&top=2" will return "list1", "list2".
   * <br /> "start=list2&top=3" will return "list3", "list4", "list5".
   *
   * @param options The options parameters.
   */
  list(
    options?: LargeFaceListListOptionalParams
  ): Promise<LargeFaceListListResponse>;
  /**
   * Queue a large face list training task, the training task may not be started immediately.
   * @param largeFaceListId Id referencing a particular large face list.
   * @param options The options parameters.
   */
  train(
    largeFaceListId: string,
    options?: LargeFaceListTrainOptionalParams
  ): Promise<void>;
  /**
   * Delete a face from a large face list by specified largeFaceListId and persistedFaceId.
   * <br /> Adding/deleting faces to/from a same large face list are processed sequentially and to/from
   * different large face lists are in parallel.
   * @param largeFaceListId Id referencing a particular large face list.
   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
   * @param options The options parameters.
   */
  deleteFace(
    largeFaceListId: string,
    persistedFaceId: string,
    options?: LargeFaceListDeleteFaceOptionalParams
  ): Promise<void>;
  /**
   * Retrieve information about a persisted face (specified by persistedFaceId and its belonging
   * largeFaceListId).
   * @param largeFaceListId Id referencing a particular large face list.
   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
   * @param options The options parameters.
   */
  getFace(
    largeFaceListId: string,
    persistedFaceId: string,
    options?: LargeFaceListGetFaceOptionalParams
  ): Promise<LargeFaceListGetFaceResponse>;
  /**
   * Update a persisted face's userData field.
   * @param largeFaceListId Id referencing a particular large face list.
   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
   * @param options The options parameters.
   */
  updateFace(
    largeFaceListId: string,
    persistedFaceId: string,
    options?: LargeFaceListUpdateFaceOptionalParams
  ): Promise<void>;
  /**
   * Add a face to a specified large face list, up to 1,000,000 faces.
   * <br /> To deal with an image contains multiple faces, input face can be specified as an image with a
   * targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be
   * stored. Only the extracted face feature will be stored on server until [LargeFaceList Face -
   * Delete](https://docs.microsoft.com/rest/api/faceapi/largefacelist/deleteface) or [LargeFaceList -
   * Delete](https://docs.microsoft.com/rest/api/faceapi/largefacelist/delete) is called.
   * <br /> Note persistedFaceId is different from faceId generated by [Face -
   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl).
   * * Higher face image quality means better recognition precision. Please consider high-quality faces:
   * frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
   * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is
   * from 1KB to 6MB.
   * * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an
   * error. If the provided "targetFace" rectangle is not returned from [Face -
   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl), there’s no guarantee to
   * detect and add the face successfully.
   * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will
   * cause failures.
   * * Adding/deleting faces to/from a same face list are processed sequentially and to/from different
   * face lists are in parallel.
   * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels.
   * Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face
   * size.
   * * Different 'detectionModel' values can be provided. To use and compare different detection models,
   * please refer to [How to specify a detection
   * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
   *
   * Quota:
   * * Free-tier subscription quota: 1,000 faces per large face list.
   * * S0-tier subscription quota: 1,000,000 faces per large face list.
   * @param largeFaceListId Id referencing a particular large face list.
   * @param url Publicly reachable URL of an image
   * @param options The options parameters.
   */
  addFaceFromUrl(
    largeFaceListId: string,
    url: string,
    options?: LargeFaceListAddFaceFromUrlOptionalParams
  ): Promise<LargeFaceListAddFaceFromUrlResponse>;
  /**
   * List all faces in a large face list, and retrieve face information (including userData and
   * persistedFaceIds of registered faces of the face).
   * @param largeFaceListId Id referencing a particular large face list.
   * @param options The options parameters.
   */
  listFaces(
    largeFaceListId: string,
    options?: LargeFaceListListFacesOptionalParams
  ): Promise<LargeFaceListListFacesResponse>;
  /**
   * Add a face to a specified large face list, up to 1,000,000 faces.
   * <br /> To deal with an image contains multiple faces, input face can be specified as an image with a
   * targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be
   * stored. Only the extracted face feature will be stored on server until [LargeFaceList Face -
   * Delete](https://docs.microsoft.com/rest/api/faceapi/largefacelist/deleteface) or [LargeFaceList -
   * Delete](https://docs.microsoft.com/rest/api/faceapi/largefacelist/delete) is called.
   * <br /> Note persistedFaceId is different from faceId generated by [Face -
   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl).
   * * Higher face image quality means better recognition precision. Please consider high-quality faces:
   * frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
   * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is
   * from 1KB to 6MB.
   * * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an
   * error. If the provided "targetFace" rectangle is not returned from [Face -
   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl), there’s no guarantee to
   * detect and add the face successfully.
   * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will
   * cause failures.
   * * Adding/deleting faces to/from a same face list are processed sequentially and to/from different
   * face lists are in parallel.
   * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels.
   * Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face
   * size.
   * * Different 'detectionModel' values can be provided. To use and compare different detection models,
   * please refer to [How to specify a detection
   * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).
   *
   * Quota:
   * * Free-tier subscription quota: 1,000 faces per large face list.
   * * S0-tier subscription quota: 1,000,000 faces per large face list.
   * @param largeFaceListId Id referencing a particular large face list.
   * @param image An image stream.
   * @param options The options parameters.
   */
  addFaceFromStream(
    largeFaceListId: string,
    image: coreRestPipeline.RequestBodyType,
    options?: LargeFaceListAddFaceFromStreamOptionalParams
  ): Promise<LargeFaceListAddFaceFromStreamResponse>;
}
