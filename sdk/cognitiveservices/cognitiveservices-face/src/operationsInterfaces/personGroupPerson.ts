/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreRestPipeline from "@azure/core-rest-pipeline";
import {
  PersonGroupPersonCreateOptionalParams,
  PersonGroupPersonCreateResponse,
  PersonGroupPersonListOptionalParams,
  PersonGroupPersonListResponse,
  PersonGroupPersonDeleteOptionalParams,
  PersonGroupPersonGetOptionalParams,
  PersonGroupPersonGetResponse,
  PersonGroupPersonUpdateOptionalParams,
  PersonGroupPersonDeleteFaceOptionalParams,
  PersonGroupPersonGetFaceOptionalParams,
  PersonGroupPersonGetFaceResponse,
  PersonGroupPersonUpdateFaceOptionalParams,
  PersonGroupPersonAddFaceFromUrlOptionalParams,
  PersonGroupPersonAddFaceFromUrlResponse,
  PersonGroupPersonAddFaceFromStreamOptionalParams,
  PersonGroupPersonAddFaceFromStreamResponse
} from "../models";

/** Interface representing a PersonGroupPerson. */
export interface PersonGroupPerson {
  /**
   * Create a new person in a specified person group.
   * @param personGroupId Id referencing a particular person group.
   * @param options The options parameters.
   */
  create(
    personGroupId: string,
    options?: PersonGroupPersonCreateOptionalParams
  ): Promise<PersonGroupPersonCreateResponse>;
  /**
   * List all persons in a person group, and retrieve person information (including personId, name,
   * userData and persistedFaceIds of registered faces of the person).
   * @param personGroupId Id referencing a particular person group.
   * @param options The options parameters.
   */
  list(
    personGroupId: string,
    options?: PersonGroupPersonListOptionalParams
  ): Promise<PersonGroupPersonListResponse>;
  /**
   * Delete an existing person from a person group. The persistedFaceId, userData, person name and face
   * feature in the person entry will all be deleted.
   * @param personGroupId Id referencing a particular person group.
   * @param personId Id referencing a particular person.
   * @param options The options parameters.
   */
  delete(
    personGroupId: string,
    personId: string,
    options?: PersonGroupPersonDeleteOptionalParams
  ): Promise<void>;
  /**
   * Retrieve a person's information, including registered persisted faces, name and userData.
   * @param personGroupId Id referencing a particular person group.
   * @param personId Id referencing a particular person.
   * @param options The options parameters.
   */
  get(
    personGroupId: string,
    personId: string,
    options?: PersonGroupPersonGetOptionalParams
  ): Promise<PersonGroupPersonGetResponse>;
  /**
   * Update name or userData of a person.
   * @param personGroupId Id referencing a particular person group.
   * @param personId Id referencing a particular person.
   * @param options The options parameters.
   */
  update(
    personGroupId: string,
    personId: string,
    options?: PersonGroupPersonUpdateOptionalParams
  ): Promise<void>;
  /**
   * Delete a face from a person in a person group by specified personGroupId, personId and
   * persistedFaceId.
   * <br /> Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting
   * faces to/from different persons are processed in parallel.
   * @param personGroupId Id referencing a particular person group.
   * @param personId Id referencing a particular person.
   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
   * @param options The options parameters.
   */
  deleteFace(
    personGroupId: string,
    personId: string,
    persistedFaceId: string,
    options?: PersonGroupPersonDeleteFaceOptionalParams
  ): Promise<void>;
  /**
   * Retrieve information about a persisted face (specified by persistedFaceId, personId and its
   * belonging personGroupId).
   * @param personGroupId Id referencing a particular person group.
   * @param personId Id referencing a particular person.
   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
   * @param options The options parameters.
   */
  getFace(
    personGroupId: string,
    personId: string,
    persistedFaceId: string,
    options?: PersonGroupPersonGetFaceOptionalParams
  ): Promise<PersonGroupPersonGetFaceResponse>;
  /**
   * Add a face to a person into a person group for face identification or verification. To deal with an
   * image contains multiple faces, input face can be specified as an image with a targetFace rectangle.
   * It returns a persistedFaceId representing the added face. No image will be stored. Only the
   * extracted face feature will be stored on server until [PersonGroup PersonFace -
   * Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/deleteface), [PersonGroup
   * Person - Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/delete) or
   * [PersonGroup - Delete](https://docs.microsoft.com/rest/api/faceapi/persongroup/delete) is called.
   * <br /> Note persistedFaceId is different from faceId generated by [Face -
   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl).
   * * Higher face image quality means better recognition precision. Please consider high-quality faces:
   * frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
   * * Each person entry can hold up to 248 faces.
   * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is
   * from 1KB to 6MB.
   * * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an
   * error. If the provided "targetFace" rectangle is not returned from [Face -
   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl), there’s no guarantee to
   * detect and add the face successfully.
   * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will
   * cause failures.
   * * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces
   * to/from different persons are processed in parallel.
   * @param personGroupId Id referencing a particular person group.
   * @param personId Id referencing a particular person.
   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
   * @param options The options parameters.
   */
  updateFace(
    personGroupId: string,
    personId: string,
    persistedFaceId: string,
    options?: PersonGroupPersonUpdateFaceOptionalParams
  ): Promise<void>;
  /**
   * Add a face to a person into a person group for face identification or verification. To deal with an
   * image contains multiple faces, input face can be specified as an image with a targetFace rectangle.
   * It returns a persistedFaceId representing the added face. No image will be stored. Only the
   * extracted face feature will be stored on server until [PersonGroup PersonFace -
   * Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/deleteface), [PersonGroup
   * Person - Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/delete) or
   * [PersonGroup - Delete](https://docs.microsoft.com/rest/api/faceapi/persongroup/delete) is called.
   * <br /> Note persistedFaceId is different from faceId generated by [Face -
   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl).
   * *   Higher face image quality means better recognition precision. Please consider high-quality
   * faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
   * *   Each person entry can hold up to 248 faces.
   * *   JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is
   * from 1KB to 6MB.
   * *   "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an
   * error. If the provided "targetFace" rectangle is not returned from [Face -
   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl), there’s no guarantee to
   * detect and add the face successfully.
   * *   Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions
   * will cause failures.
   * *   Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting
   * faces to/from different persons are processed in parallel.
   * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels.
   * Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face
   * size.
   * * Different 'detectionModel' values can be provided. To use and compare different detection models,
   * please refer to [How to specify a detection
   * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).
   * @param personGroupId Id referencing a particular person group.
   * @param personId Id referencing a particular person.
   * @param url Publicly reachable URL of an image
   * @param options The options parameters.
   */
  addFaceFromUrl(
    personGroupId: string,
    personId: string,
    url: string,
    options?: PersonGroupPersonAddFaceFromUrlOptionalParams
  ): Promise<PersonGroupPersonAddFaceFromUrlResponse>;
  /**
   * Add a face to a person into a person group for face identification or verification. To deal with an
   * image contains multiple faces, input face can be specified as an image with a targetFace rectangle.
   * It returns a persistedFaceId representing the added face. No image will be stored. Only the
   * extracted face feature will be stored on server until [PersonGroup PersonFace -
   * Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/deleteface), [PersonGroup
   * Person - Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/delete) or
   * [PersonGroup - Delete](https://docs.microsoft.com/rest/api/faceapi/persongroup/delete) is called.
   * <br /> Note persistedFaceId is different from faceId generated by [Face -
   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl).
   * *   Higher face image quality means better recognition precision. Please consider high-quality
   * faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
   * *   Each person entry can hold up to 248 faces.
   * *   JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is
   * from 1KB to 6MB.
   * *   "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an
   * error. If the provided "targetFace" rectangle is not returned from [Face -
   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl), there’s no guarantee to
   * detect and add the face successfully.
   * *   Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions
   * will cause failures.
   * *   Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting
   * faces to/from different persons are processed in parallel.
   * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels.
   * Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face
   * size.
   * * Different 'detectionModel' values can be provided. To use and compare different detection models,
   * please refer to [How to specify a detection
   * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).
   * @param personGroupId Id referencing a particular person group.
   * @param personId Id referencing a particular person.
   * @param image An image stream.
   * @param options The options parameters.
   */
  addFaceFromStream(
    personGroupId: string,
    personId: string,
    image: coreRestPipeline.RequestBodyType,
    options?: PersonGroupPersonAddFaceFromStreamOptionalParams
  ): Promise<PersonGroupPersonAddFaceFromStreamResponse>;
}
