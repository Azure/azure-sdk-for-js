/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreRestPipeline from "@azure/core-rest-pipeline";
import {
  LargePersonGroupPersonCreateOptionalParams,
  LargePersonGroupPersonCreateResponse,
  LargePersonGroupPersonListOptionalParams,
  LargePersonGroupPersonListResponse,
  LargePersonGroupPersonDeleteOptionalParams,
  LargePersonGroupPersonGetOptionalParams,
  LargePersonGroupPersonGetResponse,
  LargePersonGroupPersonUpdateOptionalParams,
  LargePersonGroupPersonDeleteFaceOptionalParams,
  LargePersonGroupPersonGetFaceOptionalParams,
  LargePersonGroupPersonGetFaceResponse,
  LargePersonGroupPersonUpdateFaceOptionalParams,
  LargePersonGroupPersonAddFaceFromUrlOptionalParams,
  LargePersonGroupPersonAddFaceFromUrlResponse,
  LargePersonGroupPersonAddFaceFromStreamOptionalParams,
  LargePersonGroupPersonAddFaceFromStreamResponse
} from "../models";

/** Interface representing a LargePersonGroupPerson. */
export interface LargePersonGroupPerson {
  /**
   * Create a new person in a specified large person group.
   * @param largePersonGroupId Id referencing a particular large person group.
   * @param options The options parameters.
   */
  create(
    largePersonGroupId: string,
    options?: LargePersonGroupPersonCreateOptionalParams
  ): Promise<LargePersonGroupPersonCreateResponse>;
  /**
   * List all persons in a large person group, and retrieve person information (including personId, name,
   * userData and persistedFaceIds of registered faces of the person).
   * @param largePersonGroupId Id referencing a particular large person group.
   * @param options The options parameters.
   */
  list(
    largePersonGroupId: string,
    options?: LargePersonGroupPersonListOptionalParams
  ): Promise<LargePersonGroupPersonListResponse>;
  /**
   * Delete an existing person from a large person group. The persistedFaceId, userData, person name and
   * face feature in the person entry will all be deleted.
   * @param largePersonGroupId Id referencing a particular large person group.
   * @param personId Id referencing a particular person.
   * @param options The options parameters.
   */
  delete(
    largePersonGroupId: string,
    personId: string,
    options?: LargePersonGroupPersonDeleteOptionalParams
  ): Promise<void>;
  /**
   * Retrieve a person's name and userData, and the persisted faceIds representing the registered person
   * face feature.
   * @param largePersonGroupId Id referencing a particular large person group.
   * @param personId Id referencing a particular person.
   * @param options The options parameters.
   */
  get(
    largePersonGroupId: string,
    personId: string,
    options?: LargePersonGroupPersonGetOptionalParams
  ): Promise<LargePersonGroupPersonGetResponse>;
  /**
   * Update name or userData of a person.
   * @param largePersonGroupId Id referencing a particular large person group.
   * @param personId Id referencing a particular person.
   * @param options The options parameters.
   */
  update(
    largePersonGroupId: string,
    personId: string,
    options?: LargePersonGroupPersonUpdateOptionalParams
  ): Promise<void>;
  /**
   * Delete a face from a person in a large person group by specified largePersonGroupId, personId and
   * persistedFaceId.
   * <br /> Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting
   * faces to/from different persons are processed in parallel.
   * @param largePersonGroupId Id referencing a particular large person group.
   * @param personId Id referencing a particular person.
   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
   * @param options The options parameters.
   */
  deleteFace(
    largePersonGroupId: string,
    personId: string,
    persistedFaceId: string,
    options?: LargePersonGroupPersonDeleteFaceOptionalParams
  ): Promise<void>;
  /**
   * Retrieve information about a persisted face (specified by persistedFaceId, personId and its
   * belonging largePersonGroupId).
   * @param largePersonGroupId Id referencing a particular large person group.
   * @param personId Id referencing a particular person.
   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
   * @param options The options parameters.
   */
  getFace(
    largePersonGroupId: string,
    personId: string,
    persistedFaceId: string,
    options?: LargePersonGroupPersonGetFaceOptionalParams
  ): Promise<LargePersonGroupPersonGetFaceResponse>;
  /**
   * Update a person persisted face's userData field.
   * @param largePersonGroupId Id referencing a particular large person group.
   * @param personId Id referencing a particular person.
   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
   * @param options The options parameters.
   */
  updateFace(
    largePersonGroupId: string,
    personId: string,
    persistedFaceId: string,
    options?: LargePersonGroupPersonUpdateFaceOptionalParams
  ): Promise<void>;
  /**
   * Add a face to a person into a large person group for face identification or verification. To deal
   * with an image contains multiple faces, input face can be specified as an image with a targetFace
   * rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only
   * the extracted face feature will be stored on server until [LargePersonGroup PersonFace -
   * Delete](https://docs.microsoft.com/rest/api/faceapi/largepersongroupperson/deleteface),
   * [LargePersonGroup Person -
   * Delete](https://docs.microsoft.com/rest/api/faceapi/largepersongroupperson/delete) or
   * [LargePersonGroup - Delete](https://docs.microsoft.com/rest/api/faceapi/largepersongroup/delete) is
   * called.
   * <br /> Note persistedFaceId is different from faceId generated by [Face -
   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl).
   * * Higher face image quality means better recognition precision. Please consider high-quality faces:
   * frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
   * * Each person entry can hold up to 248 faces.
   * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is
   * from 1KB to 6MB.
   * * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an
   * error. If the provided "targetFace" rectangle is not returned from [Face -
   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl), there’s no guarantee to
   * detect and add the face successfully.
   * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will
   * cause failures.
   * * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces
   * to/from different persons are processed in parallel.
   * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels.
   * Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face
   * size.
   * * Different 'detectionModel' values can be provided. To use and compare different detection models,
   * please refer to [How to specify a detection
   * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
   * @param largePersonGroupId Id referencing a particular large person group.
   * @param personId Id referencing a particular person.
   * @param url Publicly reachable URL of an image
   * @param options The options parameters.
   */
  addFaceFromUrl(
    largePersonGroupId: string,
    personId: string,
    url: string,
    options?: LargePersonGroupPersonAddFaceFromUrlOptionalParams
  ): Promise<LargePersonGroupPersonAddFaceFromUrlResponse>;
  /**
   * Add a face to a person into a large person group for face identification or verification. To deal
   * with an image contains multiple faces, input face can be specified as an image with a targetFace
   * rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only
   * the extracted face feature will be stored on server until [LargePersonGroup PersonFace -
   * Delete](https://docs.microsoft.com/rest/api/faceapi/largepersongroupperson/deleteface),
   * [LargePersonGroup Person -
   * Delete](https://docs.microsoft.com/rest/api/faceapi/largepersongroupperson/delete) or
   * [LargePersonGroup - Delete](https://docs.microsoft.com/rest/api/faceapi/largepersongroup/delete) is
   * called.
   * <br /> Note persistedFaceId is different from faceId generated by [Face -
   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl).
   * * Higher face image quality means better recognition precision. Please consider high-quality faces:
   * frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
   * * Each person entry can hold up to 248 faces.
   * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is
   * from 1KB to 6MB.
   * * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an
   * error. If the provided "targetFace" rectangle is not returned from [Face -
   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl), there’s no guarantee to
   * detect and add the face successfully.
   * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will
   * cause failures.
   * * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces
   * to/from different persons are processed in parallel.
   * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels.
   * Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face
   * size.
   * * Different 'detectionModel' values can be provided. To use and compare different detection models,
   * please refer to [How to specify a detection
   * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).
   * @param largePersonGroupId Id referencing a particular large person group.
   * @param personId Id referencing a particular person.
   * @param image An image stream.
   * @param options The options parameters.
   */
  addFaceFromStream(
    largePersonGroupId: string,
    personId: string,
    image: coreRestPipeline.RequestBodyType,
    options?: LargePersonGroupPersonAddFaceFromStreamOptionalParams
  ): Promise<LargePersonGroupPersonAddFaceFromStreamResponse>;
}
