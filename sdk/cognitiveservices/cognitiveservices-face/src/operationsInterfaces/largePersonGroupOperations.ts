/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  LargePersonGroupCreateOptionalParams,
  LargePersonGroupDeleteOptionalParams,
  LargePersonGroupGetOptionalParams,
  LargePersonGroupGetResponse,
  LargePersonGroupUpdateOptionalParams,
  LargePersonGroupGetTrainingStatusOptionalParams,
  LargePersonGroupGetTrainingStatusResponse,
  LargePersonGroupListOptionalParams,
  LargePersonGroupListResponse,
  LargePersonGroupTrainOptionalParams
} from "../models";

/** Interface representing a LargePersonGroupOperations. */
export interface LargePersonGroupOperations {
  /**
   * Create a new large person group with user-specified largePersonGroupId, name, an optional userData
   * and recognitionModel.
   * <br /> A large person group is the container of the uploaded person data, including face recognition
   * feature, and up to 1,000,000
   * people.
   * <br /> After creation, use [LargePersonGroup Person -
   * Create](https://docs.microsoft.com/rest/api/faceapi/largepersongroupperson/create) to add person
   * into the group, and call [LargePersonGroup -
   * Train](https://docs.microsoft.com/rest/api/faceapi/largepersongroup/train) to get this group ready
   * for [Face - Identify](https://docs.microsoft.com/rest/api/faceapi/face/identify).
   * <br /> No image will be stored. Only the person's extracted face features and userData will be
   * stored on server until [LargePersonGroup Person -
   * Delete](https://docs.microsoft.com/rest/api/faceapi/largepersongroupperson/delete) or
   * [LargePersonGroup - Delete](https://docs.microsoft.com/rest/api/faceapi/largepersongroup/delete) is
   * called.
   * <br/>'recognitionModel' should be specified to associate with this large person group. The default
   * value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly
   * specify the model you need in this parameter. New faces that are added to an existing large person
   * group will use the recognition model that's already associated with the collection. Existing face
   * features in a large person group can't be updated to features extracted by another version of
   * recognition model. Please refer to [Specify a face recognition
   * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model).
   *
   * Large person group quota:
   * * Free-tier subscription quota: 1,000 large person groups.
   * * S0-tier subscription quota: 1,000,000 large person groups.
   * @param largePersonGroupId Id referencing a particular large person group.
   * @param name User defined name, maximum length is 128.
   * @param options The options parameters.
   */
  create(
    largePersonGroupId: string,
    name: string,
    options?: LargePersonGroupCreateOptionalParams
  ): Promise<void>;
  /**
   * Delete an existing large person group. Persisted face features of all people in the large person
   * group will also be deleted.
   * @param largePersonGroupId Id referencing a particular large person group.
   * @param options The options parameters.
   */
  delete(
    largePersonGroupId: string,
    options?: LargePersonGroupDeleteOptionalParams
  ): Promise<void>;
  /**
   * Retrieve the information of a large person group, including its name, userData and recognitionModel.
   * This API returns large person group information only, use [LargePersonGroup Person -
   * List](https://docs.microsoft.com/rest/api/faceapi/largepersongroupperson/list) instead to retrieve
   * person information under the large person group.
   *
   * @param largePersonGroupId Id referencing a particular large person group.
   * @param options The options parameters.
   */
  get(
    largePersonGroupId: string,
    options?: LargePersonGroupGetOptionalParams
  ): Promise<LargePersonGroupGetResponse>;
  /**
   * Update an existing large person group's display name and userData. The properties which does not
   * appear in request body will not be updated.
   * @param largePersonGroupId Id referencing a particular large person group.
   * @param options The options parameters.
   */
  update(
    largePersonGroupId: string,
    options?: LargePersonGroupUpdateOptionalParams
  ): Promise<void>;
  /**
   * Retrieve the training status of a large person group (completed or ongoing).
   * @param largePersonGroupId Id referencing a particular large person group.
   * @param options The options parameters.
   */
  getTrainingStatus(
    largePersonGroupId: string,
    options?: LargePersonGroupGetTrainingStatusOptionalParams
  ): Promise<LargePersonGroupGetTrainingStatusResponse>;
  /**
   * List all existing large person groups’ largePersonGroupId, name, userData and recognitionModel.<br
   * />
   * * Large person groups are stored in alphabetical order of largePersonGroupId.
   * * "start" parameter (string, optional) is a user-provided largePersonGroupId value that returned
   * entries have larger ids by string comparison. "start" set to empty to indicate return from the first
   * item.
   * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000
   * entries can be returned in one call. To fetch more, you can specify "start" with the last returned
   * entry’s Id of the current call.
   * <br />
   * For example, total 5 large person groups: "group1", ..., "group5".
   * <br /> "start=&top=" will return all 5 groups.
   * <br /> "start=&top=2" will return "group1", "group2".
   * <br /> "start=group2&top=3" will return "group3", "group4", "group5".
   *
   * @param options The options parameters.
   */
  list(
    options?: LargePersonGroupListOptionalParams
  ): Promise<LargePersonGroupListResponse>;
  /**
   * Queue a large person group training task, the training task may not be started immediately.
   * @param largePersonGroupId Id referencing a particular large person group.
   * @param options The options parameters.
   */
  train(
    largePersonGroupId: string,
    options?: LargePersonGroupTrainOptionalParams
  ): Promise<void>;
}
