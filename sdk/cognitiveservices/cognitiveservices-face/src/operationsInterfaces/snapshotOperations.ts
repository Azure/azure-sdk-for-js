/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  SnapshotObjectType,
  SnapshotTakeOptionalParams,
  SnapshotTakeResponse,
  SnapshotListOptionalParams,
  SnapshotListResponse,
  SnapshotGetOptionalParams,
  SnapshotGetResponse,
  SnapshotUpdateOptionalParams,
  SnapshotDeleteOptionalParams,
  SnapshotApplyOptionalParams,
  SnapshotApplyResponse,
  SnapshotGetOperationStatusOptionalParams,
  SnapshotGetOperationStatusResponse
} from "../models";

/** Interface representing a SnapshotOperations. */
export interface SnapshotOperations {
  /**
   * Submit an operation to take a snapshot of face list, large face list, person group or large person
   * group, with user-specified snapshot type, source object id, apply scope and an optional user
   * data.<br />
   * The snapshot interfaces are for users to backup and restore their face data from one face
   * subscription to another, inside same region or across regions. The workflow contains two phases,
   * user first calls Snapshot - Take to create a copy of the source object and store it as a snapshot,
   * then calls Snapshot - Apply to paste the snapshot to target subscription. The snapshots are stored
   * in a centralized location (per Azure instance), so that they can be applied cross accounts and
   * regions.<br />
   * Taking snapshot is an asynchronous operation. An operation id can be obtained from the
   * "Operation-Location" field in response header, to be used in OperationStatus - Get for tracking the
   * progress of creating the snapshot. The snapshot id will be included in the "resourceLocation" field
   * in OperationStatus - Get response when the operation status is "succeeded".<br />
   * Snapshot taking time depends on the number of person and face entries in the source object. It could
   * be in seconds, or up to several hours for 1,000,000 persons with multiple faces.<br />
   * Snapshots will be automatically expired and cleaned in 48 hours after it is created by Snapshot -
   * Take. User can delete the snapshot using Snapshot - Delete by themselves any time before
   * expiration.<br />
   * Taking snapshot for a certain object will not block any other operations against the object. All
   * read-only operations (Get/List and Identify/FindSimilar/Verify) can be conducted as usual. For all
   * writable operations, including Add/Update/Delete the source object or its persons/faces and Train,
   * they are not blocked but not recommended because writable updates may not be reflected on the
   * snapshot during its taking. After snapshot taking is completed, all readable and writable operations
   * can work as normal. Snapshot will also include the training results of the source object, which
   * means target subscription the snapshot applied to does not need re-train the target object before
   * calling Identify/FindSimilar.<br />
   * * Free-tier subscription quota: 100 take operations per month.
   * * S0-tier subscription quota: 100 take operations per day.
   * @param objectId User specified source object id to take snapshot from.
   * @param applyScope User specified array of target Face subscription ids for the snapshot. For each
   *                   snapshot, only subscriptions included in the applyScope of Snapshot - Take can apply it.
   * @param typeParam User specified type for the source object to take snapshot from. Currently
   *                  FaceList, PersonGroup, LargeFaceList and LargePersonGroup are supported.
   * @param options The options parameters.
   */
  take(
    objectId: string,
    applyScope: string[],
    typeParam: SnapshotObjectType,
    options?: SnapshotTakeOptionalParams
  ): Promise<SnapshotTakeResponse>;
  /**
   * List all accessible snapshots with related information, including snapshots that were taken by the
   * user, or snapshots to be applied to the user (subscription id was included in the applyScope in
   * Snapshot - Take).
   * @param options The options parameters.
   */
  list(options?: SnapshotListOptionalParams): Promise<SnapshotListResponse>;
  /**
   * Retrieve information about a snapshot. Snapshot is only accessible to the source subscription who
   * took it, and target subscriptions included in the applyScope in Snapshot - Take.
   * @param snapshotId Id referencing a particular snapshot.
   * @param options The options parameters.
   */
  get(
    snapshotId: string,
    options?: SnapshotGetOptionalParams
  ): Promise<SnapshotGetResponse>;
  /**
   * Update the information of a snapshot. Only the source subscription who took the snapshot can update
   * the snapshot.
   * @param snapshotId Id referencing a particular snapshot.
   * @param options The options parameters.
   */
  update(
    snapshotId: string,
    options?: SnapshotUpdateOptionalParams
  ): Promise<void>;
  /**
   * Delete an existing snapshot according to the snapshotId. All object data and information in the
   * snapshot will also be deleted. Only the source subscription who took the snapshot can delete the
   * snapshot. If the user does not delete a snapshot with this API, the snapshot will still be
   * automatically deleted in 48 hours after creation.
   * @param snapshotId Id referencing a particular snapshot.
   * @param options The options parameters.
   */
  delete(
    snapshotId: string,
    options?: SnapshotDeleteOptionalParams
  ): Promise<void>;
  /**
   * Submit an operation to apply a snapshot to current subscription. For each snapshot, only
   * subscriptions included in the applyScope of Snapshot - Take can apply it.<br />
   * The snapshot interfaces are for users to backup and restore their face data from one face
   * subscription to another, inside same region or across regions. The workflow contains two phases,
   * user first calls Snapshot - Take to create a copy of the source object and store it as a snapshot,
   * then calls Snapshot - Apply to paste the snapshot to target subscription. The snapshots are stored
   * in a centralized location (per Azure instance), so that they can be applied cross accounts and
   * regions.<br />
   * Applying snapshot is an asynchronous operation. An operation id can be obtained from the
   * "Operation-Location" field in response header, to be used in OperationStatus - Get for tracking the
   * progress of applying the snapshot. The target object id will be included in the "resourceLocation"
   * field in OperationStatus - Get response when the operation status is "succeeded".<br />
   * Snapshot applying time depends on the number of person and face entries in the snapshot object. It
   * could be in seconds, or up to 1 hour for 1,000,000 persons with multiple faces.<br />
   * Snapshots will be automatically expired and cleaned in 48 hours after it is created by Snapshot -
   * Take. So the target subscription is required to apply the snapshot in 48 hours since its
   * creation.<br />
   * Applying a snapshot will not block any other operations against the target object, however it is not
   * recommended because the correctness cannot be guaranteed during snapshot applying. After snapshot
   * applying is completed, all operations towards the target object can work as normal. Snapshot also
   * includes the training results of the source object, which means target subscription the snapshot
   * applied to does not need re-train the target object before calling Identify/FindSimilar.<br />
   * One snapshot can be applied multiple times in parallel, while currently only CreateNew apply mode is
   * supported, which means the apply operation will fail if target subscription already contains an
   * object of same type and using the same objectId. Users can specify the "objectId" in request body to
   * avoid such conflicts.<br />
   * * Free-tier subscription quota: 100 apply operations per month.
   * * S0-tier subscription quota: 100 apply operations per day.
   * @param snapshotId Id referencing a particular snapshot.
   * @param objectId User specified target object id to be created from the snapshot.
   * @param options The options parameters.
   */
  apply(
    snapshotId: string,
    objectId: string,
    options?: SnapshotApplyOptionalParams
  ): Promise<SnapshotApplyResponse>;
  /**
   * Retrieve the status of a take/apply snapshot operation.
   * @param operationId Id referencing a particular take/apply snapshot operation.
   * @param options The options parameters.
   */
  getOperationStatus(
    operationId: string,
    options?: SnapshotGetOperationStatusOptionalParams
  ): Promise<SnapshotGetOperationStatusResponse>;
}
