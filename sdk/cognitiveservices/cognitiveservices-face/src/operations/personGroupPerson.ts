/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/personGroupPersonMappers";
import * as Parameters from "../models/parameters";
import { FaceClientContext } from "../faceClientContext";

/** Class representing a PersonGroupPerson. */
export class PersonGroupPerson {
  private readonly client: FaceClientContext;

  /**
   * Create a PersonGroupPerson.
   * @param {FaceClientContext} client Reference to the service client.
   */
  constructor(client: FaceClientContext) {
    this.client = client;
  }

  /**
   * Create a new person in a specified person group.
   * @param personGroupId Id referencing a particular person group.
   * @param [options] The optional parameters
   * @returns Promise<Models.PersonGroupPersonCreateResponse>
   */
  create(personGroupId: string, options?: Models.PersonGroupPersonCreateOptionalParams): Promise<Models.PersonGroupPersonCreateResponse>;
  /**
   * @param personGroupId Id referencing a particular person group.
   * @param callback The callback
   */
  create(personGroupId: string, callback: msRest.ServiceCallback<Models.Person>): void;
  /**
   * @param personGroupId Id referencing a particular person group.
   * @param options The optional parameters
   * @param callback The callback
   */
  create(personGroupId: string, options: Models.PersonGroupPersonCreateOptionalParams, callback: msRest.ServiceCallback<Models.Person>): void;
  create(personGroupId: string, options?: Models.PersonGroupPersonCreateOptionalParams | msRest.ServiceCallback<Models.Person>, callback?: msRest.ServiceCallback<Models.Person>): Promise<Models.PersonGroupPersonCreateResponse> {
    return this.client.sendOperationRequest(
      {
        personGroupId,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.PersonGroupPersonCreateResponse>;
  }

  /**
   * List all persons in a person group, and retrieve person information (including personId, name,
   * userData and persistedFaceIds of registered faces of the person).
   * @param personGroupId Id referencing a particular person group.
   * @param [options] The optional parameters
   * @returns Promise<Models.PersonGroupPersonListResponse>
   */
  list(personGroupId: string, options?: Models.PersonGroupPersonListOptionalParams): Promise<Models.PersonGroupPersonListResponse>;
  /**
   * @param personGroupId Id referencing a particular person group.
   * @param callback The callback
   */
  list(personGroupId: string, callback: msRest.ServiceCallback<Models.Person[]>): void;
  /**
   * @param personGroupId Id referencing a particular person group.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(personGroupId: string, options: Models.PersonGroupPersonListOptionalParams, callback: msRest.ServiceCallback<Models.Person[]>): void;
  list(personGroupId: string, options?: Models.PersonGroupPersonListOptionalParams | msRest.ServiceCallback<Models.Person[]>, callback?: msRest.ServiceCallback<Models.Person[]>): Promise<Models.PersonGroupPersonListResponse> {
    return this.client.sendOperationRequest(
      {
        personGroupId,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.PersonGroupPersonListResponse>;
  }

  /**
   * Delete an existing person from a person group. The persistedFaceId, userData, person name and
   * face feature in the person entry will all be deleted.
   * @param personGroupId Id referencing a particular person group.
   * @param personId Id referencing a particular person.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(personGroupId: string, personId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param personGroupId Id referencing a particular person group.
   * @param personId Id referencing a particular person.
   * @param callback The callback
   */
  deleteMethod(personGroupId: string, personId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param personGroupId Id referencing a particular person group.
   * @param personId Id referencing a particular person.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(personGroupId: string, personId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(personGroupId: string, personId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        personGroupId,
        personId,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Retrieve a person's information, including registered persisted faces, name and userData.
   * @param personGroupId Id referencing a particular person group.
   * @param personId Id referencing a particular person.
   * @param [options] The optional parameters
   * @returns Promise<Models.PersonGroupPersonGetResponse>
   */
  get(personGroupId: string, personId: string, options?: msRest.RequestOptionsBase): Promise<Models.PersonGroupPersonGetResponse>;
  /**
   * @param personGroupId Id referencing a particular person group.
   * @param personId Id referencing a particular person.
   * @param callback The callback
   */
  get(personGroupId: string, personId: string, callback: msRest.ServiceCallback<Models.Person>): void;
  /**
   * @param personGroupId Id referencing a particular person group.
   * @param personId Id referencing a particular person.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(personGroupId: string, personId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Person>): void;
  get(personGroupId: string, personId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Person>, callback?: msRest.ServiceCallback<Models.Person>): Promise<Models.PersonGroupPersonGetResponse> {
    return this.client.sendOperationRequest(
      {
        personGroupId,
        personId,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.PersonGroupPersonGetResponse>;
  }

  /**
   * Update name or userData of a person.
   * @param personGroupId Id referencing a particular person group.
   * @param personId Id referencing a particular person.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  update(personGroupId: string, personId: string, options?: Models.PersonGroupPersonUpdateOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param personGroupId Id referencing a particular person group.
   * @param personId Id referencing a particular person.
   * @param callback The callback
   */
  update(personGroupId: string, personId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param personGroupId Id referencing a particular person group.
   * @param personId Id referencing a particular person.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(personGroupId: string, personId: string, options: Models.PersonGroupPersonUpdateOptionalParams, callback: msRest.ServiceCallback<void>): void;
  update(personGroupId: string, personId: string, options?: Models.PersonGroupPersonUpdateOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        personGroupId,
        personId,
        options
      },
      updateOperationSpec,
      callback);
  }

  /**
   * Delete a face from a person in a person group by specified personGroupId, personId and
   * persistedFaceId.
   * <br /> Adding/deleting faces to/from a same person will be processed sequentially.
   * Adding/deleting faces to/from different persons are processed in parallel.
   * @param personGroupId Id referencing a particular person group.
   * @param personId Id referencing a particular person.
   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteFace(personGroupId: string, personId: string, persistedFaceId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param personGroupId Id referencing a particular person group.
   * @param personId Id referencing a particular person.
   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
   * @param callback The callback
   */
  deleteFace(personGroupId: string, personId: string, persistedFaceId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param personGroupId Id referencing a particular person group.
   * @param personId Id referencing a particular person.
   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteFace(personGroupId: string, personId: string, persistedFaceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteFace(personGroupId: string, personId: string, persistedFaceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        personGroupId,
        personId,
        persistedFaceId,
        options
      },
      deleteFaceOperationSpec,
      callback);
  }

  /**
   * Retrieve information about a persisted face (specified by persistedFaceId, personId and its
   * belonging personGroupId).
   * @param personGroupId Id referencing a particular person group.
   * @param personId Id referencing a particular person.
   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
   * @param [options] The optional parameters
   * @returns Promise<Models.PersonGroupPersonGetFaceResponse>
   */
  getFace(personGroupId: string, personId: string, persistedFaceId: string, options?: msRest.RequestOptionsBase): Promise<Models.PersonGroupPersonGetFaceResponse>;
  /**
   * @param personGroupId Id referencing a particular person group.
   * @param personId Id referencing a particular person.
   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
   * @param callback The callback
   */
  getFace(personGroupId: string, personId: string, persistedFaceId: string, callback: msRest.ServiceCallback<Models.PersistedFace>): void;
  /**
   * @param personGroupId Id referencing a particular person group.
   * @param personId Id referencing a particular person.
   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
   * @param options The optional parameters
   * @param callback The callback
   */
  getFace(personGroupId: string, personId: string, persistedFaceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PersistedFace>): void;
  getFace(personGroupId: string, personId: string, persistedFaceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PersistedFace>, callback?: msRest.ServiceCallback<Models.PersistedFace>): Promise<Models.PersonGroupPersonGetFaceResponse> {
    return this.client.sendOperationRequest(
      {
        personGroupId,
        personId,
        persistedFaceId,
        options
      },
      getFaceOperationSpec,
      callback) as Promise<Models.PersonGroupPersonGetFaceResponse>;
  }

  /**
   * Add a face to a person into a person group for face identification or verification. To deal with
   * an image contains multiple faces, input face can be specified as an image with a targetFace
   * rectangle. It returns a persistedFaceId representing the added face. No image will be stored.
   * Only the extracted face feature will be stored on server until [PersonGroup PersonFace -
   * Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/deleteface), [PersonGroup
   * Person - Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/delete) or
   * [PersonGroup - Delete](https://docs.microsoft.com/rest/api/faceapi/persongroup/delete) is
   * called.
   * <br /> Note persistedFaceId is different from faceId generated by [Face -
   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl).
   * * Higher face image quality means better recognition precision. Please consider high-quality
   * faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
   * * Each person entry can hold up to 248 faces.
   * * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is
   * from 1KB to 6MB.
   * * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an
   * error. If the provided "targetFace" rectangle is not returned from [Face -
   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl), there’s no guarantee to
   * detect and add the face successfully.
   * * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions
   * will cause failures.
   * * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting
   * faces to/from different persons are processed in parallel.
   * @param personGroupId Id referencing a particular person group.
   * @param personId Id referencing a particular person.
   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateFace(personGroupId: string, personId: string, persistedFaceId: string, options?: Models.PersonGroupPersonUpdateFaceOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param personGroupId Id referencing a particular person group.
   * @param personId Id referencing a particular person.
   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
   * @param callback The callback
   */
  updateFace(personGroupId: string, personId: string, persistedFaceId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param personGroupId Id referencing a particular person group.
   * @param personId Id referencing a particular person.
   * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateFace(personGroupId: string, personId: string, persistedFaceId: string, options: Models.PersonGroupPersonUpdateFaceOptionalParams, callback: msRest.ServiceCallback<void>): void;
  updateFace(personGroupId: string, personId: string, persistedFaceId: string, options?: Models.PersonGroupPersonUpdateFaceOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        personGroupId,
        personId,
        persistedFaceId,
        options
      },
      updateFaceOperationSpec,
      callback);
  }

  /**
   * Add a face to a person into a person group for face identification or verification. To deal with
   * an image contains multiple faces, input face can be specified as an image with a targetFace
   * rectangle. It returns a persistedFaceId representing the added face. No image will be stored.
   * Only the extracted face feature will be stored on server until [PersonGroup PersonFace -
   * Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/deleteface), [PersonGroup
   * Person - Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/delete) or
   * [PersonGroup - Delete](https://docs.microsoft.com/rest/api/faceapi/persongroup/delete) is
   * called.
   * <br /> Note persistedFaceId is different from faceId generated by [Face -
   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl).
   * *   Higher face image quality means better recognition precision. Please consider high-quality
   * faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
   * *   Each person entry can hold up to 248 faces.
   * *   JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size
   * is from 1KB to 6MB.
   * *   "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as
   * an error. If the provided "targetFace" rectangle is not returned from [Face -
   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl), there’s no guarantee to
   * detect and add the face successfully.
   * *   Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions
   * will cause failures.
   * *   Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting
   * faces to/from different persons are processed in parallel.
   * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels.
   * Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum
   * face size.
   * * Different 'detectionModel' values can be provided. To use and compare different detection
   * models, please refer to [How to specify a detection
   * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).
   * @param personGroupId Id referencing a particular person group.
   * @param personId Id referencing a particular person.
   * @param url Publicly reachable URL of an image
   * @param [options] The optional parameters
   * @returns Promise<Models.PersonGroupPersonAddFaceFromUrlResponse>
   */
  addFaceFromUrl(personGroupId: string, personId: string, url: string, options?: Models.PersonGroupPersonAddFaceFromUrlOptionalParams): Promise<Models.PersonGroupPersonAddFaceFromUrlResponse>;
  /**
   * @param personGroupId Id referencing a particular person group.
   * @param personId Id referencing a particular person.
   * @param url Publicly reachable URL of an image
   * @param callback The callback
   */
  addFaceFromUrl(personGroupId: string, personId: string, url: string, callback: msRest.ServiceCallback<Models.PersistedFace>): void;
  /**
   * @param personGroupId Id referencing a particular person group.
   * @param personId Id referencing a particular person.
   * @param url Publicly reachable URL of an image
   * @param options The optional parameters
   * @param callback The callback
   */
  addFaceFromUrl(personGroupId: string, personId: string, url: string, options: Models.PersonGroupPersonAddFaceFromUrlOptionalParams, callback: msRest.ServiceCallback<Models.PersistedFace>): void;
  addFaceFromUrl(personGroupId: string, personId: string, url: string, options?: Models.PersonGroupPersonAddFaceFromUrlOptionalParams | msRest.ServiceCallback<Models.PersistedFace>, callback?: msRest.ServiceCallback<Models.PersistedFace>): Promise<Models.PersonGroupPersonAddFaceFromUrlResponse> {
    return this.client.sendOperationRequest(
      {
        personGroupId,
        personId,
        url,
        options
      },
      addFaceFromUrlOperationSpec,
      callback) as Promise<Models.PersonGroupPersonAddFaceFromUrlResponse>;
  }

  /**
   * Add a face to a person into a person group for face identification or verification. To deal with
   * an image contains multiple faces, input face can be specified as an image with a targetFace
   * rectangle. It returns a persistedFaceId representing the added face. No image will be stored.
   * Only the extracted face feature will be stored on server until [PersonGroup PersonFace -
   * Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/deleteface), [PersonGroup
   * Person - Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/delete) or
   * [PersonGroup - Delete](https://docs.microsoft.com/rest/api/faceapi/persongroup/delete) is
   * called.
   * <br /> Note persistedFaceId is different from faceId generated by [Face -
   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl).
   * *   Higher face image quality means better recognition precision. Please consider high-quality
   * faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
   * *   Each person entry can hold up to 248 faces.
   * *   JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size
   * is from 1KB to 6MB.
   * *   "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as
   * an error. If the provided "targetFace" rectangle is not returned from [Face -
   * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl), there’s no guarantee to
   * detect and add the face successfully.
   * *   Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions
   * will cause failures.
   * *   Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting
   * faces to/from different persons are processed in parallel.
   * * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels.
   * Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum
   * face size.
   * * Different 'detectionModel' values can be provided. To use and compare different detection
   * models, please refer to [How to specify a detection
   * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).
   * @param personGroupId Id referencing a particular person group.
   * @param personId Id referencing a particular person.
   * @param image An image stream.
   * @param [options] The optional parameters
   * @returns Promise<Models.PersonGroupPersonAddFaceFromStreamResponse>
   */
  addFaceFromStream(personGroupId: string, personId: string, image: msRest.HttpRequestBody, options?: Models.PersonGroupPersonAddFaceFromStreamOptionalParams): Promise<Models.PersonGroupPersonAddFaceFromStreamResponse>;
  /**
   * @param personGroupId Id referencing a particular person group.
   * @param personId Id referencing a particular person.
   * @param image An image stream.
   * @param callback The callback
   */
  addFaceFromStream(personGroupId: string, personId: string, image: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.PersistedFace>): void;
  /**
   * @param personGroupId Id referencing a particular person group.
   * @param personId Id referencing a particular person.
   * @param image An image stream.
   * @param options The optional parameters
   * @param callback The callback
   */
  addFaceFromStream(personGroupId: string, personId: string, image: msRest.HttpRequestBody, options: Models.PersonGroupPersonAddFaceFromStreamOptionalParams, callback: msRest.ServiceCallback<Models.PersistedFace>): void;
  addFaceFromStream(personGroupId: string, personId: string, image: msRest.HttpRequestBody, options?: Models.PersonGroupPersonAddFaceFromStreamOptionalParams | msRest.ServiceCallback<Models.PersistedFace>, callback?: msRest.ServiceCallback<Models.PersistedFace>): Promise<Models.PersonGroupPersonAddFaceFromStreamResponse> {
    return this.client.sendOperationRequest(
      {
        personGroupId,
        personId,
        image,
        options
      },
      addFaceFromStreamOperationSpec,
      callback) as Promise<Models.PersonGroupPersonAddFaceFromStreamResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "persongroups/{personGroupId}/persons",
  urlParameters: [
    Parameters.endpoint,
    Parameters.personGroupId
  ],
  requestBody: {
    parameterPath: {
      name: [
        "options",
        "name"
      ],
      userData: [
        "options",
        "userData"
      ]
    },
    mapper: {
      ...Mappers.NameAndUserDataContract,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Person
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "persongroups/{personGroupId}/persons",
  urlParameters: [
    Parameters.endpoint,
    Parameters.personGroupId
  ],
  queryParameters: [
    Parameters.start0,
    Parameters.top0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Person"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "persongroups/{personGroupId}/persons/{personId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.personGroupId,
    Parameters.personId
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "persongroups/{personGroupId}/persons/{personId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.personGroupId,
    Parameters.personId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Person
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "persongroups/{personGroupId}/persons/{personId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.personGroupId,
    Parameters.personId
  ],
  requestBody: {
    parameterPath: {
      name: [
        "options",
        "name"
      ],
      userData: [
        "options",
        "userData"
      ]
    },
    mapper: {
      ...Mappers.NameAndUserDataContract,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const deleteFaceOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "persongroups/{personGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.personGroupId,
    Parameters.personId,
    Parameters.persistedFaceId
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const getFaceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "persongroups/{personGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.personGroupId,
    Parameters.personId,
    Parameters.persistedFaceId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PersistedFace
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const updateFaceOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "persongroups/{personGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.personGroupId,
    Parameters.personId,
    Parameters.persistedFaceId
  ],
  requestBody: {
    parameterPath: {
      userData: [
        "options",
        "userData"
      ]
    },
    mapper: {
      ...Mappers.UpdateFaceRequest,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const addFaceFromUrlOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "persongroups/{personGroupId}/persons/{personId}/persistedfaces",
  urlParameters: [
    Parameters.endpoint,
    Parameters.personGroupId,
    Parameters.personId
  ],
  queryParameters: [
    Parameters.userData,
    Parameters.targetFace,
    Parameters.detectionModel
  ],
  requestBody: {
    parameterPath: {
      url: "url"
    },
    mapper: {
      ...Mappers.ImageUrl,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PersistedFace
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const addFaceFromStreamOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "persongroups/{personGroupId}/persons/{personId}/persistedfaces",
  urlParameters: [
    Parameters.endpoint,
    Parameters.personGroupId,
    Parameters.personId
  ],
  queryParameters: [
    Parameters.userData,
    Parameters.targetFace,
    Parameters.detectionModel
  ],
  requestBody: {
    parameterPath: "image",
    mapper: {
      required: true,
      serializedName: "Image",
      type: {
        name: "Stream"
      }
    }
  },
  contentType: "application/octet-stream",
  responses: {
    200: {
      bodyMapper: Mappers.PersistedFace
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};
