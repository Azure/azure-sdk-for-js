/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import {
  FaceImpl,
  PersonGroupPersonImpl,
  PersonGroupOperationsImpl,
  FaceListOperationsImpl,
  LargePersonGroupPersonImpl,
  LargePersonGroupOperationsImpl,
  LargeFaceListOperationsImpl,
  SnapshotOperationsImpl
} from "./operations";
import {
  Face,
  PersonGroupPerson,
  PersonGroupOperations,
  FaceListOperations,
  LargePersonGroupPerson,
  LargePersonGroupOperations,
  LargeFaceListOperations,
  SnapshotOperations
} from "./operationsInterfaces";
import { FaceClientOptionalParams } from "./models";

export class FaceClient extends coreClient.ServiceClient {
  endpoint: string;

  /**
   * Initializes a new instance of the FaceClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
   *                 https://westus.api.cognitive.microsoft.com).
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    endpoint: string,
    options?: FaceClientOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (endpoint === undefined) {
      throw new Error("'endpoint' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: FaceClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-cognitiveservices-face/1.0.0-beta.1`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      baseUri: options.endpoint || "{Endpoint}/face/v1.0"
    };
    super(optionsWithDefaults);
    // Parameter assignments
    this.endpoint = endpoint;
    this.face = new FaceImpl(this);
    this.personGroupPerson = new PersonGroupPersonImpl(this);
    this.personGroupOperations = new PersonGroupOperationsImpl(this);
    this.faceListOperations = new FaceListOperationsImpl(this);
    this.largePersonGroupPerson = new LargePersonGroupPersonImpl(this);
    this.largePersonGroupOperations = new LargePersonGroupOperationsImpl(this);
    this.largeFaceListOperations = new LargeFaceListOperationsImpl(this);
    this.snapshotOperations = new SnapshotOperationsImpl(this);
  }

  face: Face;
  personGroupPerson: PersonGroupPerson;
  personGroupOperations: PersonGroupOperations;
  faceListOperations: FaceListOperations;
  largePersonGroupPerson: LargePersonGroupPerson;
  largePersonGroupOperations: LargePersonGroupOperations;
  largeFaceListOperations: LargeFaceListOperations;
  snapshotOperations: SnapshotOperations;
}
