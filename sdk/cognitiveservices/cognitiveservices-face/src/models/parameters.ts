/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  FindSimilarRequest as FindSimilarRequestMapper,
  GroupRequest as GroupRequestMapper,
  IdentifyRequest as IdentifyRequestMapper,
  VerifyFaceToFaceRequest as VerifyFaceToFaceRequestMapper,
  ImageUrl as ImageUrlMapper,
  VerifyFaceToPersonRequest as VerifyFaceToPersonRequestMapper,
  NameAndUserDataContract as NameAndUserDataContractMapper,
  UpdateFaceRequest as UpdateFaceRequestMapper,
  MetaDataContract as MetaDataContractMapper,
  TakeSnapshotRequest as TakeSnapshotRequestMapper,
  UpdateSnapshotRequest as UpdateSnapshotRequestMapper,
  ApplySnapshotRequest as ApplySnapshotRequestMapper
} from "../models/mappers";

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const faceId: OperationParameter = {
  parameterPath: "faceId",
  mapper: FindSimilarRequestMapper
};

export const faceListId: OperationParameter = {
  parameterPath: ["options", "faceListId"],
  mapper: FindSimilarRequestMapper
};

export const largeFaceListId: OperationParameter = {
  parameterPath: ["options", "largeFaceListId"],
  mapper: FindSimilarRequestMapper
};

export const faceIds: OperationParameter = {
  parameterPath: ["options", "faceIds"],
  mapper: FindSimilarRequestMapper
};

export const maxNumOfCandidatesReturned: OperationParameter = {
  parameterPath: ["options", "maxNumOfCandidatesReturned"],
  mapper: FindSimilarRequestMapper
};

export const mode: OperationParameter = {
  parameterPath: ["options", "mode"],
  mapper: FindSimilarRequestMapper
};

export const endpoint: OperationURLParameter = {
  parameterPath: "endpoint",
  mapper: {
    serializedName: "Endpoint",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const faceIds1: OperationParameter = {
  parameterPath: "faceIds",
  mapper: GroupRequestMapper
};

export const faceIds2: OperationParameter = {
  parameterPath: "faceIds",
  mapper: IdentifyRequestMapper
};

export const personGroupId: OperationParameter = {
  parameterPath: ["options", "personGroupId"],
  mapper: IdentifyRequestMapper
};

export const largePersonGroupId: OperationParameter = {
  parameterPath: ["options", "largePersonGroupId"],
  mapper: IdentifyRequestMapper
};

export const maxNumOfCandidatesReturned1: OperationParameter = {
  parameterPath: ["options", "maxNumOfCandidatesReturned"],
  mapper: IdentifyRequestMapper
};

export const confidenceThreshold: OperationParameter = {
  parameterPath: ["options", "confidenceThreshold"],
  mapper: IdentifyRequestMapper
};

export const faceId1: OperationParameter = {
  parameterPath: "faceId1",
  mapper: VerifyFaceToFaceRequestMapper
};

export const faceId2: OperationParameter = {
  parameterPath: "faceId2",
  mapper: VerifyFaceToFaceRequestMapper
};

export const url: OperationParameter = {
  parameterPath: "url",
  mapper: ImageUrlMapper
};

export const returnFaceId: OperationQueryParameter = {
  parameterPath: ["options", "returnFaceId"],
  mapper: {
    defaultValue: true,
    serializedName: "returnFaceId",
    type: {
      name: "Boolean"
    }
  }
};

export const returnFaceLandmarks: OperationQueryParameter = {
  parameterPath: ["options", "returnFaceLandmarks"],
  mapper: {
    defaultValue: false,
    serializedName: "returnFaceLandmarks",
    type: {
      name: "Boolean"
    }
  }
};

export const returnFaceAttributes: OperationQueryParameter = {
  parameterPath: ["options", "returnFaceAttributes"],
  mapper: {
    serializedName: "returnFaceAttributes",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "Enum",
          allowedValues: [
            "age",
            "gender",
            "headPose",
            "smile",
            "facialHair",
            "glasses",
            "emotion",
            "hair",
            "makeup",
            "occlusion",
            "accessories",
            "blur",
            "exposure",
            "noise",
            "mask",
            "qualityForRecognition"
          ]
        }
      }
    }
  },
  collectionFormat: "CSV"
};

export const recognitionModel: OperationQueryParameter = {
  parameterPath: ["options", "recognitionModel"],
  mapper: {
    serializedName: "recognitionModel",
    type: {
      name: "String"
    }
  }
};

export const returnRecognitionModel: OperationQueryParameter = {
  parameterPath: ["options", "returnRecognitionModel"],
  mapper: {
    defaultValue: false,
    serializedName: "returnRecognitionModel",
    type: {
      name: "Boolean"
    }
  }
};

export const detectionModel: OperationQueryParameter = {
  parameterPath: ["options", "detectionModel"],
  mapper: {
    defaultValue: "detection_01",
    serializedName: "detectionModel",
    type: {
      name: "String"
    }
  }
};

export const faceIdTimeToLive: OperationQueryParameter = {
  parameterPath: ["options", "faceIdTimeToLive"],
  mapper: {
    defaultValue: 86400,
    constraints: {
      InclusiveMaximum: 86400,
      InclusiveMinimum: 60
    },
    serializedName: "faceIdTimeToLive",
    type: {
      name: "Number"
    }
  }
};

export const faceId1: OperationParameter = {
  parameterPath: "faceId",
  mapper: VerifyFaceToPersonRequestMapper
};

export const personGroupId1: OperationParameter = {
  parameterPath: ["options", "personGroupId"],
  mapper: VerifyFaceToPersonRequestMapper
};

export const largePersonGroupId1: OperationParameter = {
  parameterPath: ["options", "largePersonGroupId"],
  mapper: VerifyFaceToPersonRequestMapper
};

export const personId: OperationParameter = {
  parameterPath: "personId",
  mapper: VerifyFaceToPersonRequestMapper
};

export const contentType1: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/octet-stream",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const image: OperationParameter = {
  parameterPath: "image",
  mapper: {
    serializedName: "image",
    required: true,
    type: {
      name: "Stream"
    }
  }
};

export const accept1: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const name: OperationParameter = {
  parameterPath: ["options", "name"],
  mapper: NameAndUserDataContractMapper
};

export const userData: OperationParameter = {
  parameterPath: ["options", "userData"],
  mapper: NameAndUserDataContractMapper
};

export const personGroupId2: OperationURLParameter = {
  parameterPath: "personGroupId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-z0-9-_]+$"),
      MaxLength: 64
    },
    serializedName: "personGroupId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const start: OperationQueryParameter = {
  parameterPath: ["options", "start"],
  mapper: {
    serializedName: "start",
    type: {
      name: "String"
    }
  }
};

export const top: OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    constraints: {
      InclusiveMaximum: 1000,
      InclusiveMinimum: 1
    },
    serializedName: "top",
    type: {
      name: "Number"
    }
  }
};

export const personId1: OperationURLParameter = {
  parameterPath: "personId",
  mapper: {
    serializedName: "personId",
    required: true,
    type: {
      name: "Uuid"
    }
  }
};

export const persistedFaceId: OperationURLParameter = {
  parameterPath: "persistedFaceId",
  mapper: {
    serializedName: "persistedFaceId",
    required: true,
    type: {
      name: "Uuid"
    }
  }
};

export const userData1: OperationParameter = {
  parameterPath: ["options", "userData"],
  mapper: UpdateFaceRequestMapper
};

export const userData2: OperationQueryParameter = {
  parameterPath: ["options", "userData"],
  mapper: {
    constraints: {
      MaxLength: 1024
    },
    serializedName: "userData",
    type: {
      name: "String"
    }
  }
};

export const targetFace: OperationQueryParameter = {
  parameterPath: ["options", "targetFace"],
  mapper: {
    serializedName: "targetFace",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "Number"
        }
      }
    }
  },
  collectionFormat: "CSV"
};

export const name1: OperationParameter = {
  parameterPath: "name",
  mapper: MetaDataContractMapper
};

export const userData3: OperationParameter = {
  parameterPath: ["options", "userData"],
  mapper: MetaDataContractMapper
};

export const recognitionModel1: OperationParameter = {
  parameterPath: ["options", "recognitionModel"],
  mapper: MetaDataContractMapper
};

export const start1: OperationQueryParameter = {
  parameterPath: ["options", "start"],
  mapper: {
    constraints: {
      MaxLength: 64
    },
    serializedName: "start",
    type: {
      name: "String"
    }
  }
};

export const top1: OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    defaultValue: 1000,
    constraints: {
      InclusiveMaximum: 1000,
      InclusiveMinimum: 1
    },
    serializedName: "top",
    type: {
      name: "Number"
    }
  }
};

export const faceListId1: OperationURLParameter = {
  parameterPath: "faceListId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-z0-9-_]+$"),
      MaxLength: 64
    },
    serializedName: "faceListId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const largePersonGroupId2: OperationURLParameter = {
  parameterPath: "largePersonGroupId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-z0-9-_]+$"),
      MaxLength: 64
    },
    serializedName: "largePersonGroupId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const largeFaceListId1: OperationURLParameter = {
  parameterPath: "largeFaceListId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-z0-9-_]+$"),
      MaxLength: 64
    },
    serializedName: "largeFaceListId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const typeParam: OperationParameter = {
  parameterPath: "typeParam",
  mapper: TakeSnapshotRequestMapper
};

export const objectId: OperationParameter = {
  parameterPath: "objectId",
  mapper: TakeSnapshotRequestMapper
};

export const applyScope: OperationParameter = {
  parameterPath: "applyScope",
  mapper: TakeSnapshotRequestMapper
};

export const userData4: OperationParameter = {
  parameterPath: ["options", "userData"],
  mapper: TakeSnapshotRequestMapper
};

export const typeParam1: OperationQueryParameter = {
  parameterPath: ["options", "typeParam"],
  mapper: {
    serializedName: "type",
    type: {
      name: "Enum",
      allowedValues: [
        "FaceList",
        "LargeFaceList",
        "LargePersonGroup",
        "PersonGroup"
      ]
    }
  }
};

export const applyScope1: OperationQueryParameter = {
  parameterPath: ["options", "applyScope"],
  mapper: {
    serializedName: "applyScope",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "Uuid"
        }
      }
    }
  },
  collectionFormat: "CSV"
};

export const snapshotId: OperationURLParameter = {
  parameterPath: "snapshotId",
  mapper: {
    serializedName: "snapshotId",
    required: true,
    type: {
      name: "Uuid"
    }
  }
};

export const applyScope2: OperationParameter = {
  parameterPath: ["options", "applyScope"],
  mapper: UpdateSnapshotRequestMapper
};

export const userData5: OperationParameter = {
  parameterPath: ["options", "userData"],
  mapper: UpdateSnapshotRequestMapper
};

export const objectId1: OperationParameter = {
  parameterPath: "objectId",
  mapper: ApplySnapshotRequestMapper
};

export const mode1: OperationParameter = {
  parameterPath: ["options", "mode"],
  mapper: ApplySnapshotRequestMapper
};

export const operationId: OperationURLParameter = {
  parameterPath: "operationId",
  mapper: {
    serializedName: "operationId",
    required: true,
    type: {
      name: "Uuid"
    }
  }
};
