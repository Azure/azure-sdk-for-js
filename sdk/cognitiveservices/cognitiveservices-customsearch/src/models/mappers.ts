/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as msRest from "@azure/ms-rest-js";


export const QueryContext: msRest.CompositeMapper = {
  serializedName: "QueryContext",
  type: {
    name: "Composite",
    className: "QueryContext",
    modelProperties: {
      originalQuery: {
        required: true,
        serializedName: "originalQuery",
        type: {
          name: "String"
        }
      },
      alteredQuery: {
        readOnly: true,
        serializedName: "alteredQuery",
        type: {
          name: "String"
        }
      },
      alterationOverrideQuery: {
        readOnly: true,
        serializedName: "alterationOverrideQuery",
        type: {
          name: "String"
        }
      },
      adultIntent: {
        readOnly: true,
        serializedName: "adultIntent",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const WebMetaTag: msRest.CompositeMapper = {
  serializedName: "WebMetaTag",
  type: {
    name: "Composite",
    className: "WebMetaTag",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      content: {
        readOnly: true,
        serializedName: "content",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResponseBase: msRest.CompositeMapper = {
  serializedName: "ResponseBase",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "_type",
      clientName: "_type"
    },
    uberParent: "ResponseBase",
    className: "ResponseBase",
    modelProperties: {
      _type: {
        required: true,
        serializedName: "_type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Identifiable: msRest.CompositeMapper = {
  serializedName: "Identifiable",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "Identifiable",
    modelProperties: {
      ...ResponseBase.type.modelProperties,
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Response: msRest.CompositeMapper = {
  serializedName: "Response",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "Response",
    modelProperties: {
      ...Identifiable.type.modelProperties,
      webSearchUrl: {
        readOnly: true,
        serializedName: "webSearchUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Thing: msRest.CompositeMapper = {
  serializedName: "Thing",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "Thing",
    modelProperties: {
      ...Response.type.modelProperties,
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      url: {
        readOnly: true,
        serializedName: "url",
        type: {
          name: "String"
        }
      },
      description: {
        readOnly: true,
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      bingId: {
        readOnly: true,
        serializedName: "bingId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreativeWork: msRest.CompositeMapper = {
  serializedName: "CreativeWork",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "CreativeWork",
    modelProperties: {
      ...Thing.type.modelProperties,
      thumbnailUrl: {
        readOnly: true,
        serializedName: "thumbnailUrl",
        type: {
          name: "String"
        }
      },
      provider: {
        readOnly: true,
        serializedName: "provider",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Thing"
            }
          }
        }
      },
      text: {
        readOnly: true,
        serializedName: "text",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WebPage: msRest.CompositeMapper = {
  serializedName: "WebPage",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "WebPage",
    modelProperties: {
      ...CreativeWork.type.modelProperties,
      displayUrl: {
        readOnly: true,
        serializedName: "displayUrl",
        type: {
          name: "String"
        }
      },
      snippet: {
        readOnly: true,
        serializedName: "snippet",
        type: {
          name: "String"
        }
      },
      deepLinks: {
        readOnly: true,
        serializedName: "deepLinks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WebPage"
            }
          }
        }
      },
      dateLastCrawled: {
        readOnly: true,
        serializedName: "dateLastCrawled",
        type: {
          name: "String"
        }
      },
      searchTags: {
        readOnly: true,
        serializedName: "searchTags",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WebMetaTag"
            }
          }
        }
      }
    }
  }
};

export const Answer: msRest.CompositeMapper = {
  serializedName: "Answer",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "Answer",
    modelProperties: {
      ...Response.type.modelProperties,
      followUpQueries: {
        readOnly: true,
        serializedName: "followUpQueries",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Query"
            }
          }
        }
      }
    }
  }
};

export const SearchResultsAnswer: msRest.CompositeMapper = {
  serializedName: "SearchResultsAnswer",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "SearchResultsAnswer",
    modelProperties: {
      ...Answer.type.modelProperties,
      queryContext: {
        readOnly: true,
        serializedName: "queryContext",
        type: {
          name: "Composite",
          className: "QueryContext"
        }
      },
      totalEstimatedMatches: {
        readOnly: true,
        serializedName: "totalEstimatedMatches",
        type: {
          name: "Number"
        }
      },
      isFamilyFriendly: {
        readOnly: true,
        serializedName: "isFamilyFriendly",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const WebWebAnswer: msRest.CompositeMapper = {
  serializedName: "Web/WebAnswer",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "WebWebAnswer",
    modelProperties: {
      ...SearchResultsAnswer.type.modelProperties,
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WebPage"
            }
          }
        }
      },
      someResultsRemoved: {
        readOnly: true,
        serializedName: "someResultsRemoved",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SearchResponse: msRest.CompositeMapper = {
  serializedName: "SearchResponse",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "SearchResponse",
    modelProperties: {
      ...Response.type.modelProperties,
      queryContext: {
        readOnly: true,
        serializedName: "queryContext",
        type: {
          name: "Composite",
          className: "QueryContext"
        }
      },
      webPages: {
        readOnly: true,
        serializedName: "webPages",
        type: {
          name: "Composite",
          className: "WebWebAnswer"
        }
      }
    }
  }
};

export const ErrorModel: msRest.CompositeMapper = {
  serializedName: "Error",
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      code: {
        required: true,
        serializedName: "code",
        defaultValue: 'None',
        type: {
          name: "String"
        }
      },
      subCode: {
        readOnly: true,
        serializedName: "subCode",
        type: {
          name: "String"
        }
      },
      message: {
        required: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      moreDetails: {
        readOnly: true,
        serializedName: "moreDetails",
        type: {
          name: "String"
        }
      },
      parameter: {
        readOnly: true,
        serializedName: "parameter",
        type: {
          name: "String"
        }
      },
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: msRest.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
    uberParent: "ResponseBase",
    className: "ErrorResponse",
    modelProperties: {
      ...Response.type.modelProperties,
      errors: {
        required: true,
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorModel"
            }
          }
        }
      }
    }
  }
};

export const Query: msRest.CompositeMapper = {
  serializedName: "Query",
  type: {
    name: "Composite",
    className: "Query",
    modelProperties: {
      text: {
        required: true,
        serializedName: "text",
        type: {
          name: "String"
        }
      },
      displayText: {
        readOnly: true,
        serializedName: "displayText",
        type: {
          name: "String"
        }
      },
      webSearchUrl: {
        readOnly: true,
        serializedName: "webSearchUrl",
        type: {
          name: "String"
        }
      },
      searchLink: {
        readOnly: true,
        serializedName: "searchLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const discriminators = {
  'ResponseBase.WebPage' : WebPage,
  'ResponseBase.Web/WebAnswer' : WebWebAnswer,
  'ResponseBase.SearchResponse' : SearchResponse,
  'ResponseBase.Response' : Response,
  'ResponseBase.SearchResultsAnswer' : SearchResultsAnswer,
  'ResponseBase.Identifiable' : Identifiable,
  'ResponseBase.ErrorResponse' : ErrorResponse,
  'ResponseBase.Answer' : Answer,
  'ResponseBase.Thing' : Thing,
  'ResponseBase.CreativeWork' : CreativeWork,
  'ResponseBase' : ResponseBase

};
