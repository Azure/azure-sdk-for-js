/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { FormRecognizerClientContext } from "./formRecognizerClientContext";

class FormRecognizerClient extends FormRecognizerClientContext {
  /**
   * Initializes a new instance of the FormRecognizerClient class.
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
   * https://westus2.api.cognitive.microsoft.com).
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials, endpoint: string, options?: msRest.ServiceClientOptions) {
    super(credentials, endpoint, options);
  }

  /**
   * Create and train a custom model. The train request must include a source parameter that is
   * either an externally accessible Azure Storage blob container Uri (preferably a Shared Access
   * Signature Uri) or valid path to a data folder in a locally mounted drive. When local paths are
   * specified, they must follow the Linux/Unix path format and be an absolute path rooted to the
   * input mount configuration
   * setting value e.g., if '{Mounts:Input}' configuration setting value is '/input' then a valid
   * source path would be '/input/contosodataset'. All data to be trained is expected to be directly
   * under the source folder. Subfolders are not supported. Models are trained using documents that
   * are of the following content type - 'application/pdf', 'image/jpeg' and 'image/png'."
   * Other type of content is ignored.
   * @summary Train Model
   * @param trainRequest Request object for training.
   * @param [options] The optional parameters
   * @returns Promise<Models.TrainCustomModelResponse>
   */
  trainCustomModel(trainRequest: Models.TrainRequest, options?: msRest.RequestOptionsBase): Promise<Models.TrainCustomModelResponse>;
  /**
   * @param trainRequest Request object for training.
   * @param callback The callback
   */
  trainCustomModel(trainRequest: Models.TrainRequest, callback: msRest.ServiceCallback<Models.TrainResult>): void;
  /**
   * @param trainRequest Request object for training.
   * @param options The optional parameters
   * @param callback The callback
   */
  trainCustomModel(trainRequest: Models.TrainRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TrainResult>): void;
  trainCustomModel(trainRequest: Models.TrainRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TrainResult>, callback?: msRest.ServiceCallback<Models.TrainResult>): Promise<Models.TrainCustomModelResponse> {
    return this.sendOperationRequest(
      {
        trainRequest,
        options
      },
      trainCustomModelOperationSpec,
      callback) as Promise<Models.TrainCustomModelResponse>;
  }

  /**
   * Retrieve the keys that were
   * extracted during the training of the specified model.
   * @summary Get Keys
   * @param id Model identifier.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetExtractedKeysResponse>
   */
  getExtractedKeys(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetExtractedKeysResponse>;
  /**
   * @param id Model identifier.
   * @param callback The callback
   */
  getExtractedKeys(id: string, callback: msRest.ServiceCallback<Models.KeysResult>): void;
  /**
   * @param id Model identifier.
   * @param options The optional parameters
   * @param callback The callback
   */
  getExtractedKeys(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.KeysResult>): void;
  getExtractedKeys(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.KeysResult>, callback?: msRest.ServiceCallback<Models.KeysResult>): Promise<Models.GetExtractedKeysResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getExtractedKeysOperationSpec,
      callback) as Promise<Models.GetExtractedKeysResponse>;
  }

  /**
   * Get information about all trained custom models
   * @summary Get Models
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCustomModelsResponse>
   */
  getCustomModels(options?: msRest.RequestOptionsBase): Promise<Models.GetCustomModelsResponse>;
  /**
   * @param callback The callback
   */
  getCustomModels(callback: msRest.ServiceCallback<Models.ModelsResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getCustomModels(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ModelsResult>): void;
  getCustomModels(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ModelsResult>, callback?: msRest.ServiceCallback<Models.ModelsResult>): Promise<Models.GetCustomModelsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getCustomModelsOperationSpec,
      callback) as Promise<Models.GetCustomModelsResponse>;
  }

  /**
   * Get information about a model.
   * @summary Get Model
   * @param id Model identifier.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCustomModelResponse>
   */
  getCustomModel(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetCustomModelResponse>;
  /**
   * @param id Model identifier.
   * @param callback The callback
   */
  getCustomModel(id: string, callback: msRest.ServiceCallback<Models.ModelResult>): void;
  /**
   * @param id Model identifier.
   * @param options The optional parameters
   * @param callback The callback
   */
  getCustomModel(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ModelResult>): void;
  getCustomModel(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ModelResult>, callback?: msRest.ServiceCallback<Models.ModelResult>): Promise<Models.GetCustomModelResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getCustomModelOperationSpec,
      callback) as Promise<Models.GetCustomModelResponse>;
  }

  /**
   * Delete model artifacts.
   * @summary Delete Model
   * @param id The identifier of the model to delete.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteCustomModel(id: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param id The identifier of the model to delete.
   * @param callback The callback
   */
  deleteCustomModel(id: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param id The identifier of the model to delete.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCustomModel(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteCustomModel(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      deleteCustomModelOperationSpec,
      callback);
  }

  /**
   * Extract key-value pairs from a given document. The input document must be of one of the
   * supported content types - 'application/pdf', 'image/jpeg' or 'image/png'. A success response is
   * returned in JSON.
   * @summary Analyze Form
   * @param id Model Identifier to analyze the document with.
   * @param formStream A pdf document or image (jpg,png) file to analyze.
   * @param [options] The optional parameters
   * @returns Promise<Models.AnalyzeWithCustomModelResponse>
   */
  analyzeWithCustomModel(id: string, formStream: msRest.HttpRequestBody, options?: Models.FormRecognizerClientAnalyzeWithCustomModelOptionalParams): Promise<Models.AnalyzeWithCustomModelResponse>;
  /**
   * @param id Model Identifier to analyze the document with.
   * @param formStream A pdf document or image (jpg,png) file to analyze.
   * @param callback The callback
   */
  analyzeWithCustomModel(id: string, formStream: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.AnalyzeResult>): void;
  /**
   * @param id Model Identifier to analyze the document with.
   * @param formStream A pdf document or image (jpg,png) file to analyze.
   * @param options The optional parameters
   * @param callback The callback
   */
  analyzeWithCustomModel(id: string, formStream: msRest.HttpRequestBody, options: Models.FormRecognizerClientAnalyzeWithCustomModelOptionalParams, callback: msRest.ServiceCallback<Models.AnalyzeResult>): void;
  analyzeWithCustomModel(id: string, formStream: msRest.HttpRequestBody, options?: Models.FormRecognizerClientAnalyzeWithCustomModelOptionalParams | msRest.ServiceCallback<Models.AnalyzeResult>, callback?: msRest.ServiceCallback<Models.AnalyzeResult>): Promise<Models.AnalyzeWithCustomModelResponse> {
    return this.sendOperationRequest(
      {
        id,
        formStream,
        options
      },
      analyzeWithCustomModelOperationSpec,
      callback) as Promise<Models.AnalyzeWithCustomModelResponse>;
  }

  /**
   * Batch Read Receipt operation. The response contains a field called 'Operation-Location', which
   * contains the URL that you must use for your 'Get Read Receipt Result' operation.
   * @param url Publicly reachable URL of an image.
   * @param [options] The optional parameters
   * @returns Promise<Models.BatchReadReceiptResponse>
   */
  batchReadReceipt(url: string, options?: msRest.RequestOptionsBase): Promise<Models.BatchReadReceiptResponse>;
  /**
   * @param url Publicly reachable URL of an image.
   * @param callback The callback
   */
  batchReadReceipt(url: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param url Publicly reachable URL of an image.
   * @param options The optional parameters
   * @param callback The callback
   */
  batchReadReceipt(url: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  batchReadReceipt(url: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.BatchReadReceiptResponse> {
    return this.sendOperationRequest(
      {
        url,
        options
      },
      batchReadReceiptOperationSpec,
      callback) as Promise<Models.BatchReadReceiptResponse>;
  }

  /**
   * This interface is used for getting the analysis results of a 'Batch Read Receipt' operation. The
   * URL to this interface should be retrieved from the 'Operation-Location' field returned from the
   * 'Batch Read Receipt' operation.
   * @param operationId Id of read operation returned in the response of a 'Batch Read Receipt'
   * operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetReadReceiptResultResponse>
   */
  getReadReceiptResult(operationId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetReadReceiptResultResponse>;
  /**
   * @param operationId Id of read operation returned in the response of a 'Batch Read Receipt'
   * operation.
   * @param callback The callback
   */
  getReadReceiptResult(operationId: string, callback: msRest.ServiceCallback<Models.ReadReceiptResult>): void;
  /**
   * @param operationId Id of read operation returned in the response of a 'Batch Read Receipt'
   * operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getReadReceiptResult(operationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ReadReceiptResult>): void;
  getReadReceiptResult(operationId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ReadReceiptResult>, callback?: msRest.ServiceCallback<Models.ReadReceiptResult>): Promise<Models.GetReadReceiptResultResponse> {
    return this.sendOperationRequest(
      {
        operationId,
        options
      },
      getReadReceiptResultOperationSpec,
      callback) as Promise<Models.GetReadReceiptResultResponse>;
  }

  /**
   * Read Receipt operation. When you use the 'Batch Read Receipt' interface, the response contains a
   * field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must
   * use for your 'Get Read Receipt Result' operation.
   * @param image An image stream.
   * @param [options] The optional parameters
   * @returns Promise<Models.BatchReadReceiptInStreamResponse>
   */
  batchReadReceiptInStream(image: msRest.HttpRequestBody, options?: msRest.RequestOptionsBase): Promise<Models.BatchReadReceiptInStreamResponse>;
  /**
   * @param image An image stream.
   * @param callback The callback
   */
  batchReadReceiptInStream(image: msRest.HttpRequestBody, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param image An image stream.
   * @param options The optional parameters
   * @param callback The callback
   */
  batchReadReceiptInStream(image: msRest.HttpRequestBody, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  batchReadReceiptInStream(image: msRest.HttpRequestBody, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.BatchReadReceiptInStreamResponse> {
    return this.sendOperationRequest(
      {
        image,
        options
      },
      batchReadReceiptInStreamOperationSpec,
      callback) as Promise<Models.BatchReadReceiptInStreamResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const trainCustomModelOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "custom/train",
  urlParameters: [
    Parameters.endpoint
  ],
  requestBody: {
    parameterPath: "trainRequest",
    mapper: {
      ...Mappers.TrainRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.TrainResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getExtractedKeysOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "custom/models/{id}/keys",
  urlParameters: [
    Parameters.endpoint,
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.KeysResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getCustomModelsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "custom/models",
  urlParameters: [
    Parameters.endpoint
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ModelsResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getCustomModelOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "custom/models/{id}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ModelResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteCustomModelOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "custom/models/{id}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.id
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const analyzeWithCustomModelOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "custom/models/{id}/analyze",
  urlParameters: [
    Parameters.endpoint,
    Parameters.id
  ],
  queryParameters: [
    Parameters.keys
  ],
  formDataParameters: [
    Parameters.formStream
  ],
  contentType: "multipart/form-data",
  responses: {
    200: {
      bodyMapper: Mappers.AnalyzeResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const batchReadReceiptOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "prebuilt/receipt/asyncBatchAnalyze",
  urlParameters: [
    Parameters.endpoint
  ],
  requestBody: {
    parameterPath: {
      url: "url"
    },
    mapper: {
      ...Mappers.ImageUrl,
      required: true
    }
  },
  responses: {
    202: {
      headersMapper: Mappers.BatchReadReceiptHeaders
    },
    default: {
      bodyMapper: Mappers.ComputerVisionError
    }
  },
  serializer
};

const getReadReceiptResultOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "prebuilt/receipt/operations/{operationId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.operationId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ReadReceiptResult
    },
    default: {
      bodyMapper: Mappers.ComputerVisionError
    }
  },
  serializer
};

const batchReadReceiptInStreamOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "prebuilt/receipt/asyncBatchAnalyze",
  urlParameters: [
    Parameters.endpoint
  ],
  requestBody: {
    parameterPath: "image",
    mapper: {
      required: true,
      serializedName: "Image",
      type: {
        name: "Stream"
      }
    }
  },
  contentType: "application/octet-stream",
  responses: {
    202: {
      headersMapper: Mappers.BatchReadReceiptInStreamHeaders
    },
    default: {
      bodyMapper: Mappers.ComputerVisionError
    }
  },
  serializer
};

export {
  FormRecognizerClient,
  FormRecognizerClientContext,
  Models as FormRecognizerModels,
  Mappers as FormRecognizerMappers
};
