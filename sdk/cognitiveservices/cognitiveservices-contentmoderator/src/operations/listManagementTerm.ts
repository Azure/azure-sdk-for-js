/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/listManagementTermMappers";
import * as Parameters from "../models/parameters";
import { ContentModeratorClientContext } from "../contentModeratorClientContext";

/** Class representing a ListManagementTerm. */
export class ListManagementTerm {
  private readonly client: ContentModeratorClientContext;

  /**
   * Create a ListManagementTerm.
   * @param {ContentModeratorClientContext} client Reference to the service client.
   */
  constructor(client: ContentModeratorClientContext) {
    this.client = client;
  }

  /**
   * Add a term to the term list with list Id equal to list Id passed.
   * @param listId List Id of the image list.
   * @param term Term to be deleted
   * @param language Language of the terms.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  addTerm(listId: string, term: string, language: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param listId List Id of the image list.
   * @param term Term to be deleted
   * @param language Language of the terms.
   * @param callback The callback
   */
  addTerm(listId: string, term: string, language: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param listId List Id of the image list.
   * @param term Term to be deleted
   * @param language Language of the terms.
   * @param options The optional parameters
   * @param callback The callback
   */
  addTerm(listId: string, term: string, language: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  addTerm(listId: string, term: string, language: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        listId,
        term,
        language,
        options
      },
      addTermOperationSpec,
      callback);
  }

  /**
   * Deletes a term from the list with list Id equal to the list Id passed.
   * @param listId List Id of the image list.
   * @param term Term to be deleted
   * @param language Language of the terms.
   * @param [options] The optional parameters
   * @returns Promise<Models.ListManagementTermDeleteTermResponse>
   */
  deleteTerm(listId: string, term: string, language: string, options?: msRest.RequestOptionsBase): Promise<Models.ListManagementTermDeleteTermResponse>;
  /**
   * @param listId List Id of the image list.
   * @param term Term to be deleted
   * @param language Language of the terms.
   * @param callback The callback
   */
  deleteTerm(listId: string, term: string, language: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param listId List Id of the image list.
   * @param term Term to be deleted
   * @param language Language of the terms.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteTerm(listId: string, term: string, language: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  deleteTerm(listId: string, term: string, language: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ListManagementTermDeleteTermResponse> {
    return this.client.sendOperationRequest(
      {
        listId,
        term,
        language,
        options
      },
      deleteTermOperationSpec,
      callback) as Promise<Models.ListManagementTermDeleteTermResponse>;
  }

  /**
   * Gets all terms from the list with list Id equal to the list Id passed.
   * @param listId List Id of the image list.
   * @param language Language of the terms.
   * @param [options] The optional parameters
   * @returns Promise<Models.ListManagementTermGetAllTermsResponse>
   */
  getAllTerms(listId: string, language: string, options?: Models.ListManagementTermGetAllTermsOptionalParams): Promise<Models.ListManagementTermGetAllTermsResponse>;
  /**
   * @param listId List Id of the image list.
   * @param language Language of the terms.
   * @param callback The callback
   */
  getAllTerms(listId: string, language: string, callback: msRest.ServiceCallback<Models.Terms>): void;
  /**
   * @param listId List Id of the image list.
   * @param language Language of the terms.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllTerms(listId: string, language: string, options: Models.ListManagementTermGetAllTermsOptionalParams, callback: msRest.ServiceCallback<Models.Terms>): void;
  getAllTerms(listId: string, language: string, options?: Models.ListManagementTermGetAllTermsOptionalParams | msRest.ServiceCallback<Models.Terms>, callback?: msRest.ServiceCallback<Models.Terms>): Promise<Models.ListManagementTermGetAllTermsResponse> {
    return this.client.sendOperationRequest(
      {
        listId,
        language,
        options
      },
      getAllTermsOperationSpec,
      callback) as Promise<Models.ListManagementTermGetAllTermsResponse>;
  }

  /**
   * Deletes all terms from the list with list Id equal to the list Id passed.
   * @param listId List Id of the image list.
   * @param language Language of the terms.
   * @param [options] The optional parameters
   * @returns Promise<Models.ListManagementTermDeleteAllTermsResponse>
   */
  deleteAllTerms(listId: string, language: string, options?: msRest.RequestOptionsBase): Promise<Models.ListManagementTermDeleteAllTermsResponse>;
  /**
   * @param listId List Id of the image list.
   * @param language Language of the terms.
   * @param callback The callback
   */
  deleteAllTerms(listId: string, language: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param listId List Id of the image list.
   * @param language Language of the terms.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAllTerms(listId: string, language: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  deleteAllTerms(listId: string, language: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ListManagementTermDeleteAllTermsResponse> {
    return this.client.sendOperationRequest(
      {
        listId,
        language,
        options
      },
      deleteAllTermsOperationSpec,
      callback) as Promise<Models.ListManagementTermDeleteAllTermsResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const addTermOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "contentmoderator/lists/v1.0/termlists/{listId}/terms/{term}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.listId1,
    Parameters.term
  ],
  queryParameters: [
    Parameters.language0
  ],
  responses: {
    201: {},
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const deleteTermOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "contentmoderator/lists/v1.0/termlists/{listId}/terms/{term}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.listId1,
    Parameters.term
  ],
  queryParameters: [
    Parameters.language0
  ],
  responses: {
    204: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const getAllTermsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "contentmoderator/lists/v1.0/termlists/{listId}/terms",
  urlParameters: [
    Parameters.endpoint,
    Parameters.listId1
  ],
  queryParameters: [
    Parameters.language0,
    Parameters.offset,
    Parameters.limit
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Terms
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const deleteAllTermsOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "contentmoderator/lists/v1.0/termlists/{listId}/terms",
  urlParameters: [
    Parameters.endpoint,
    Parameters.listId1
  ],
  queryParameters: [
    Parameters.language0
  ],
  responses: {
    204: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};
