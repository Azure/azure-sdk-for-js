/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/textModerationMappers";
import * as Parameters from "../models/parameters";
import { ContentModeratorClientContext } from "../contentModeratorClientContext";

/** Class representing a TextModeration. */
export class TextModeration {
  private readonly client: ContentModeratorClientContext;

  /**
   * Create a TextModeration.
   * @param {ContentModeratorClientContext} client Reference to the service client.
   */
  constructor(client: ContentModeratorClientContext) {
    this.client = client;
  }

  /**
   * Detects profanity in more than 100 languages and match against custom and shared blocklists.
   * @summary Detect profanity and match against custom and shared blocklists
   * @param textContentType The content type. Possible values include: 'text/plain', 'text/html',
   * 'text/xml', 'text/markdown'
   * @param textContent Content to screen.
   * @param [options] The optional parameters
   * @returns Promise<Models.TextModerationScreenTextResponse>
   */
  screenText(textContentType: Models.TextContentType, textContent: msRest.HttpRequestBody, options?: Models.TextModerationScreenTextOptionalParams): Promise<Models.TextModerationScreenTextResponse>;
  /**
   * @param textContentType The content type. Possible values include: 'text/plain', 'text/html',
   * 'text/xml', 'text/markdown'
   * @param textContent Content to screen.
   * @param callback The callback
   */
  screenText(textContentType: Models.TextContentType, textContent: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.Screen>): void;
  /**
   * @param textContentType The content type. Possible values include: 'text/plain', 'text/html',
   * 'text/xml', 'text/markdown'
   * @param textContent Content to screen.
   * @param options The optional parameters
   * @param callback The callback
   */
  screenText(textContentType: Models.TextContentType, textContent: msRest.HttpRequestBody, options: Models.TextModerationScreenTextOptionalParams, callback: msRest.ServiceCallback<Models.Screen>): void;
  screenText(textContentType: Models.TextContentType, textContent: msRest.HttpRequestBody, options?: Models.TextModerationScreenTextOptionalParams | msRest.ServiceCallback<Models.Screen>, callback?: msRest.ServiceCallback<Models.Screen>): Promise<Models.TextModerationScreenTextResponse> {
    return this.client.sendOperationRequest(
      {
        textContentType,
        textContent,
        options
      },
      screenTextOperationSpec,
      callback) as Promise<Models.TextModerationScreenTextResponse>;
  }

  /**
   * This operation will detect the language of given input content. Returns the <a
   * href="http://www-01.sil.org/iso639-3/codes.asp">ISO 639-3 code</a> for the predominant language
   * comprising the submitted text. Over 110 languages supported.
   * @param textContentType The content type. Possible values include: 'text/plain', 'text/html',
   * 'text/xml', 'text/markdown'
   * @param textContent Content to screen.
   * @param [options] The optional parameters
   * @returns Promise<Models.TextModerationDetectLanguageResponse>
   */
  detectLanguage(textContentType: Models.TextContentType1, textContent: msRest.HttpRequestBody, options?: msRest.RequestOptionsBase): Promise<Models.TextModerationDetectLanguageResponse>;
  /**
   * @param textContentType The content type. Possible values include: 'text/plain', 'text/html',
   * 'text/xml', 'text/markdown'
   * @param textContent Content to screen.
   * @param callback The callback
   */
  detectLanguage(textContentType: Models.TextContentType1, textContent: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.DetectedLanguage>): void;
  /**
   * @param textContentType The content type. Possible values include: 'text/plain', 'text/html',
   * 'text/xml', 'text/markdown'
   * @param textContent Content to screen.
   * @param options The optional parameters
   * @param callback The callback
   */
  detectLanguage(textContentType: Models.TextContentType1, textContent: msRest.HttpRequestBody, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DetectedLanguage>): void;
  detectLanguage(textContentType: Models.TextContentType1, textContent: msRest.HttpRequestBody, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DetectedLanguage>, callback?: msRest.ServiceCallback<Models.DetectedLanguage>): Promise<Models.TextModerationDetectLanguageResponse> {
    return this.client.sendOperationRequest(
      {
        textContentType,
        textContent,
        options
      },
      detectLanguageOperationSpec,
      callback) as Promise<Models.TextModerationDetectLanguageResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const screenTextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "contentmoderator/moderate/v1.0/ProcessText/Screen/",
  urlParameters: [
    Parameters.endpoint
  ],
  queryParameters: [
    Parameters.language1,
    Parameters.autocorrect,
    Parameters.pII,
    Parameters.listId0,
    Parameters.classify
  ],
  headerParameters: [
    Parameters.textContentType
  ],
  requestBody: {
    parameterPath: "textContent",
    mapper: {
      required: true,
      serializedName: "Text Content",
      type: {
        name: "Stream"
      }
    }
  },
  contentType: "text/plain",
  responses: {
    200: {
      bodyMapper: Mappers.Screen
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const detectLanguageOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "contentmoderator/moderate/v1.0/ProcessText/DetectLanguage",
  urlParameters: [
    Parameters.endpoint
  ],
  headerParameters: [
    Parameters.textContentType
  ],
  requestBody: {
    parameterPath: "textContent",
    mapper: {
      required: true,
      serializedName: "Text Content",
      type: {
        name: "Stream"
      }
    }
  },
  contentType: "text/plain",
  responses: {
    200: {
      bodyMapper: Mappers.DetectedLanguage
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};
