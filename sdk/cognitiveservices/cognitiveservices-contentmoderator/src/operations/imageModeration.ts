/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/imageModerationMappers";
import * as Parameters from "../models/parameters";
import { ContentModeratorClientContext } from "../contentModeratorClientContext";

/** Class representing a ImageModeration. */
export class ImageModeration {
  private readonly client: ContentModeratorClientContext;

  /**
   * Create a ImageModeration.
   * @param {ContentModeratorClientContext} client Reference to the service client.
   */
  constructor(client: ContentModeratorClientContext) {
    this.client = client;
  }

  /**
   * Returns the list of faces found.
   * @param [options] The optional parameters
   * @returns Promise<Models.ImageModerationFindFacesResponse>
   */
  findFaces(options?: Models.ImageModerationFindFacesOptionalParams): Promise<Models.ImageModerationFindFacesResponse>;
  /**
   * @param callback The callback
   */
  findFaces(callback: msRest.ServiceCallback<Models.FoundFaces>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  findFaces(options: Models.ImageModerationFindFacesOptionalParams, callback: msRest.ServiceCallback<Models.FoundFaces>): void;
  findFaces(options?: Models.ImageModerationFindFacesOptionalParams | msRest.ServiceCallback<Models.FoundFaces>, callback?: msRest.ServiceCallback<Models.FoundFaces>): Promise<Models.ImageModerationFindFacesResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      findFacesOperationSpec,
      callback) as Promise<Models.ImageModerationFindFacesResponse>;
  }

  /**
   * Returns any text found in the image for the language specified. If no language is specified in
   * input then the detection defaults to English.
   * @param language Language of the terms.
   * @param [options] The optional parameters
   * @returns Promise<Models.ImageModerationOCRMethodResponse>
   */
  oCRMethod(language: string, options?: Models.ImageModerationOCRMethodOptionalParams): Promise<Models.ImageModerationOCRMethodResponse>;
  /**
   * @param language Language of the terms.
   * @param callback The callback
   */
  oCRMethod(language: string, callback: msRest.ServiceCallback<Models.OCR>): void;
  /**
   * @param language Language of the terms.
   * @param options The optional parameters
   * @param callback The callback
   */
  oCRMethod(language: string, options: Models.ImageModerationOCRMethodOptionalParams, callback: msRest.ServiceCallback<Models.OCR>): void;
  oCRMethod(language: string, options?: Models.ImageModerationOCRMethodOptionalParams | msRest.ServiceCallback<Models.OCR>, callback?: msRest.ServiceCallback<Models.OCR>): Promise<Models.ImageModerationOCRMethodResponse> {
    return this.client.sendOperationRequest(
      {
        language,
        options
      },
      oCRMethodOperationSpec,
      callback) as Promise<Models.ImageModerationOCRMethodResponse>;
  }

  /**
   * Returns probabilities of the image containing racy or adult content.
   * @param [options] The optional parameters
   * @returns Promise<Models.ImageModerationEvaluateMethodResponse>
   */
  evaluateMethod(options?: Models.ImageModerationEvaluateMethodOptionalParams): Promise<Models.ImageModerationEvaluateMethodResponse>;
  /**
   * @param callback The callback
   */
  evaluateMethod(callback: msRest.ServiceCallback<Models.Evaluate>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  evaluateMethod(options: Models.ImageModerationEvaluateMethodOptionalParams, callback: msRest.ServiceCallback<Models.Evaluate>): void;
  evaluateMethod(options?: Models.ImageModerationEvaluateMethodOptionalParams | msRest.ServiceCallback<Models.Evaluate>, callback?: msRest.ServiceCallback<Models.Evaluate>): Promise<Models.ImageModerationEvaluateMethodResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      evaluateMethodOperationSpec,
      callback) as Promise<Models.ImageModerationEvaluateMethodResponse>;
  }

  /**
   * Fuzzily match an image against one of your custom Image Lists. You can create and manage your
   * custom image lists using <a
   * href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe">this</a> API.
   *
   * Returns ID and tags of matching image.<br/>
   * <br/>
   * Note: Refresh Index must be run on the corresponding Image List before additions and removals
   * are reflected in the response.
   * @param [options] The optional parameters
   * @returns Promise<Models.ImageModerationMatchMethodResponse>
   */
  matchMethod(options?: Models.ImageModerationMatchMethodOptionalParams): Promise<Models.ImageModerationMatchMethodResponse>;
  /**
   * @param callback The callback
   */
  matchMethod(callback: msRest.ServiceCallback<Models.MatchResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  matchMethod(options: Models.ImageModerationMatchMethodOptionalParams, callback: msRest.ServiceCallback<Models.MatchResponse>): void;
  matchMethod(options?: Models.ImageModerationMatchMethodOptionalParams | msRest.ServiceCallback<Models.MatchResponse>, callback?: msRest.ServiceCallback<Models.MatchResponse>): Promise<Models.ImageModerationMatchMethodResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      matchMethodOperationSpec,
      callback) as Promise<Models.ImageModerationMatchMethodResponse>;
  }

  /**
   * Returns the list of faces found.
   * @param imageStream The image file.
   * @param [options] The optional parameters
   * @returns Promise<Models.ImageModerationFindFacesFileInputResponse>
   */
  findFacesFileInput(imageStream: msRest.HttpRequestBody, options?: Models.ImageModerationFindFacesFileInputOptionalParams): Promise<Models.ImageModerationFindFacesFileInputResponse>;
  /**
   * @param imageStream The image file.
   * @param callback The callback
   */
  findFacesFileInput(imageStream: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.FoundFaces>): void;
  /**
   * @param imageStream The image file.
   * @param options The optional parameters
   * @param callback The callback
   */
  findFacesFileInput(imageStream: msRest.HttpRequestBody, options: Models.ImageModerationFindFacesFileInputOptionalParams, callback: msRest.ServiceCallback<Models.FoundFaces>): void;
  findFacesFileInput(imageStream: msRest.HttpRequestBody, options?: Models.ImageModerationFindFacesFileInputOptionalParams | msRest.ServiceCallback<Models.FoundFaces>, callback?: msRest.ServiceCallback<Models.FoundFaces>): Promise<Models.ImageModerationFindFacesFileInputResponse> {
    return this.client.sendOperationRequest(
      {
        imageStream,
        options
      },
      findFacesFileInputOperationSpec,
      callback) as Promise<Models.ImageModerationFindFacesFileInputResponse>;
  }

  /**
   * Returns the list of faces found.
   * @param contentType The content type.
   * @param imageUrl The image url.
   * @param [options] The optional parameters
   * @returns Promise<Models.ImageModerationFindFacesUrlInputResponse>
   */
  findFacesUrlInput(contentType: string, imageUrl: Models.ImageUrl, options?: Models.ImageModerationFindFacesUrlInputOptionalParams): Promise<Models.ImageModerationFindFacesUrlInputResponse>;
  /**
   * @param contentType The content type.
   * @param imageUrl The image url.
   * @param callback The callback
   */
  findFacesUrlInput(contentType: string, imageUrl: Models.ImageUrl, callback: msRest.ServiceCallback<Models.FoundFaces>): void;
  /**
   * @param contentType The content type.
   * @param imageUrl The image url.
   * @param options The optional parameters
   * @param callback The callback
   */
  findFacesUrlInput(contentType: string, imageUrl: Models.ImageUrl, options: Models.ImageModerationFindFacesUrlInputOptionalParams, callback: msRest.ServiceCallback<Models.FoundFaces>): void;
  findFacesUrlInput(contentType: string, imageUrl: Models.ImageUrl, options?: Models.ImageModerationFindFacesUrlInputOptionalParams | msRest.ServiceCallback<Models.FoundFaces>, callback?: msRest.ServiceCallback<Models.FoundFaces>): Promise<Models.ImageModerationFindFacesUrlInputResponse> {
    return this.client.sendOperationRequest(
      {
        contentType,
        imageUrl,
        options
      },
      findFacesUrlInputOperationSpec,
      callback) as Promise<Models.ImageModerationFindFacesUrlInputResponse>;
  }

  /**
   * Returns any text found in the image for the language specified. If no language is specified in
   * input then the detection defaults to English.
   * @param language Language of the terms.
   * @param contentType The content type.
   * @param imageUrl The image url.
   * @param [options] The optional parameters
   * @returns Promise<Models.ImageModerationOCRUrlInputResponse>
   */
  oCRUrlInput(language: string, contentType: string, imageUrl: Models.ImageUrl, options?: Models.ImageModerationOCRUrlInputOptionalParams): Promise<Models.ImageModerationOCRUrlInputResponse>;
  /**
   * @param language Language of the terms.
   * @param contentType The content type.
   * @param imageUrl The image url.
   * @param callback The callback
   */
  oCRUrlInput(language: string, contentType: string, imageUrl: Models.ImageUrl, callback: msRest.ServiceCallback<Models.OCR>): void;
  /**
   * @param language Language of the terms.
   * @param contentType The content type.
   * @param imageUrl The image url.
   * @param options The optional parameters
   * @param callback The callback
   */
  oCRUrlInput(language: string, contentType: string, imageUrl: Models.ImageUrl, options: Models.ImageModerationOCRUrlInputOptionalParams, callback: msRest.ServiceCallback<Models.OCR>): void;
  oCRUrlInput(language: string, contentType: string, imageUrl: Models.ImageUrl, options?: Models.ImageModerationOCRUrlInputOptionalParams | msRest.ServiceCallback<Models.OCR>, callback?: msRest.ServiceCallback<Models.OCR>): Promise<Models.ImageModerationOCRUrlInputResponse> {
    return this.client.sendOperationRequest(
      {
        language,
        contentType,
        imageUrl,
        options
      },
      oCRUrlInputOperationSpec,
      callback) as Promise<Models.ImageModerationOCRUrlInputResponse>;
  }

  /**
   * Returns any text found in the image for the language specified. If no language is specified in
   * input then the detection defaults to English.
   * @param language Language of the terms.
   * @param imageStream The image file.
   * @param [options] The optional parameters
   * @returns Promise<Models.ImageModerationOCRFileInputResponse>
   */
  oCRFileInput(language: string, imageStream: msRest.HttpRequestBody, options?: Models.ImageModerationOCRFileInputOptionalParams): Promise<Models.ImageModerationOCRFileInputResponse>;
  /**
   * @param language Language of the terms.
   * @param imageStream The image file.
   * @param callback The callback
   */
  oCRFileInput(language: string, imageStream: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.OCR>): void;
  /**
   * @param language Language of the terms.
   * @param imageStream The image file.
   * @param options The optional parameters
   * @param callback The callback
   */
  oCRFileInput(language: string, imageStream: msRest.HttpRequestBody, options: Models.ImageModerationOCRFileInputOptionalParams, callback: msRest.ServiceCallback<Models.OCR>): void;
  oCRFileInput(language: string, imageStream: msRest.HttpRequestBody, options?: Models.ImageModerationOCRFileInputOptionalParams | msRest.ServiceCallback<Models.OCR>, callback?: msRest.ServiceCallback<Models.OCR>): Promise<Models.ImageModerationOCRFileInputResponse> {
    return this.client.sendOperationRequest(
      {
        language,
        imageStream,
        options
      },
      oCRFileInputOperationSpec,
      callback) as Promise<Models.ImageModerationOCRFileInputResponse>;
  }

  /**
   * Returns probabilities of the image containing racy or adult content.
   * @param imageStream The image file.
   * @param [options] The optional parameters
   * @returns Promise<Models.ImageModerationEvaluateFileInputResponse>
   */
  evaluateFileInput(imageStream: msRest.HttpRequestBody, options?: Models.ImageModerationEvaluateFileInputOptionalParams): Promise<Models.ImageModerationEvaluateFileInputResponse>;
  /**
   * @param imageStream The image file.
   * @param callback The callback
   */
  evaluateFileInput(imageStream: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.Evaluate>): void;
  /**
   * @param imageStream The image file.
   * @param options The optional parameters
   * @param callback The callback
   */
  evaluateFileInput(imageStream: msRest.HttpRequestBody, options: Models.ImageModerationEvaluateFileInputOptionalParams, callback: msRest.ServiceCallback<Models.Evaluate>): void;
  evaluateFileInput(imageStream: msRest.HttpRequestBody, options?: Models.ImageModerationEvaluateFileInputOptionalParams | msRest.ServiceCallback<Models.Evaluate>, callback?: msRest.ServiceCallback<Models.Evaluate>): Promise<Models.ImageModerationEvaluateFileInputResponse> {
    return this.client.sendOperationRequest(
      {
        imageStream,
        options
      },
      evaluateFileInputOperationSpec,
      callback) as Promise<Models.ImageModerationEvaluateFileInputResponse>;
  }

  /**
   * Returns probabilities of the image containing racy or adult content.
   * @param contentType The content type of the payload being sent to the server. Example: 'application/json'
   * @param imageUrl The image url. Example: { value: 'https://yourdomain.com/sample.jpg', dataRepresentation: 'URL' }
   * @param [options] The optional parameters
   * @returns Promise<Models.ImageModerationEvaluateUrlInputResponse>
   */
  evaluateUrlInput(contentType: string, imageUrl: Models.ImageUrl, options?: Models.ImageModerationEvaluateUrlInputOptionalParams): Promise<Models.ImageModerationEvaluateUrlInputResponse>;
  /**
   * @param contentType The content type returned. Example: 'application/json'
   * @param imageUrl The image url. Example: { value: 'https://yourdomain.com/sample.jpg', dataRepresentation: 'URL' }
   * @param callback The callback
   */
  evaluateUrlInput(contentType: string, imageUrl: Models.ImageUrl, callback: msRest.ServiceCallback<Models.Evaluate>): void;
  /**
   * @param contentType The content type returned. Example: 'application/json'
   * @param imageUrl The image url. Example: { value: 'https://yourdomain.com/sample.jpg', dataRepresentation: 'URL' }
   * @param options The optional parameters
   * @param callback The callback
   */
  evaluateUrlInput(contentType: string, imageUrl: Models.ImageUrl, options: Models.ImageModerationEvaluateUrlInputOptionalParams, callback: msRest.ServiceCallback<Models.Evaluate>): void;
  evaluateUrlInput(contentType: string, imageUrl: Models.ImageUrl, options?: Models.ImageModerationEvaluateUrlInputOptionalParams | msRest.ServiceCallback<Models.Evaluate>, callback?: msRest.ServiceCallback<Models.Evaluate>): Promise<Models.ImageModerationEvaluateUrlInputResponse> {
    return this.client.sendOperationRequest(
      {
        contentType,
        imageUrl,
        options
      },
      evaluateUrlInputOperationSpec,
      callback) as Promise<Models.ImageModerationEvaluateUrlInputResponse>;
  }

  /**
   * Fuzzily match an image against one of your custom Image Lists. You can create and manage your
   * custom image lists using <a
   * href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe">this</a> API.
   *
   * Returns ID and tags of matching image.<br/>
   * <br/>
   * Note: Refresh Index must be run on the corresponding Image List before additions and removals
   * are reflected in the response.
   * @param contentType The content type.
   * @param imageUrl The image url.
   * @param [options] The optional parameters
   * @returns Promise<Models.ImageModerationMatchUrlInputResponse>
   */
  matchUrlInput(contentType: string, imageUrl: Models.ImageUrl, options?: Models.ImageModerationMatchUrlInputOptionalParams): Promise<Models.ImageModerationMatchUrlInputResponse>;
  /**
   * @param contentType The content type.
   * @param imageUrl The image url.
   * @param callback The callback
   */
  matchUrlInput(contentType: string, imageUrl: Models.ImageUrl, callback: msRest.ServiceCallback<Models.MatchResponse>): void;
  /**
   * @param contentType The content type.
   * @param imageUrl The image url.
   * @param options The optional parameters
   * @param callback The callback
   */
  matchUrlInput(contentType: string, imageUrl: Models.ImageUrl, options: Models.ImageModerationMatchUrlInputOptionalParams, callback: msRest.ServiceCallback<Models.MatchResponse>): void;
  matchUrlInput(contentType: string, imageUrl: Models.ImageUrl, options?: Models.ImageModerationMatchUrlInputOptionalParams | msRest.ServiceCallback<Models.MatchResponse>, callback?: msRest.ServiceCallback<Models.MatchResponse>): Promise<Models.ImageModerationMatchUrlInputResponse> {
    return this.client.sendOperationRequest(
      {
        contentType,
        imageUrl,
        options
      },
      matchUrlInputOperationSpec,
      callback) as Promise<Models.ImageModerationMatchUrlInputResponse>;
  }

  /**
   * Fuzzily match an image against one of your custom Image Lists. You can create and manage your
   * custom image lists using <a
   * href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe">this</a> API.
   *
   * Returns ID and tags of matching image.<br/>
   * <br/>
   * Note: Refresh Index must be run on the corresponding Image List before additions and removals
   * are reflected in the response.
   * @param imageStream The image file.
   * @param [options] The optional parameters
   * @returns Promise<Models.ImageModerationMatchFileInputResponse>
   */
  matchFileInput(imageStream: msRest.HttpRequestBody, options?: Models.ImageModerationMatchFileInputOptionalParams): Promise<Models.ImageModerationMatchFileInputResponse>;
  /**
   * @param imageStream The image file.
   * @param callback The callback
   */
  matchFileInput(imageStream: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.MatchResponse>): void;
  /**
   * @param imageStream The image file.
   * @param options The optional parameters
   * @param callback The callback
   */
  matchFileInput(imageStream: msRest.HttpRequestBody, options: Models.ImageModerationMatchFileInputOptionalParams, callback: msRest.ServiceCallback<Models.MatchResponse>): void;
  matchFileInput(imageStream: msRest.HttpRequestBody, options?: Models.ImageModerationMatchFileInputOptionalParams | msRest.ServiceCallback<Models.MatchResponse>, callback?: msRest.ServiceCallback<Models.MatchResponse>): Promise<Models.ImageModerationMatchFileInputResponse> {
    return this.client.sendOperationRequest(
      {
        imageStream,
        options
      },
      matchFileInputOperationSpec,
      callback) as Promise<Models.ImageModerationMatchFileInputResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const findFacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "contentmoderator/moderate/v1.0/ProcessImage/FindFaces",
  urlParameters: [
    Parameters.endpoint
  ],
  queryParameters: [
    Parameters.cacheImage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FoundFaces
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const oCRMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "contentmoderator/moderate/v1.0/ProcessImage/OCR",
  urlParameters: [
    Parameters.endpoint
  ],
  queryParameters: [
    Parameters.language0,
    Parameters.cacheImage,
    Parameters.enhanced
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OCR
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const evaluateMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "contentmoderator/moderate/v1.0/ProcessImage/Evaluate",
  urlParameters: [
    Parameters.endpoint
  ],
  queryParameters: [
    Parameters.cacheImage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Evaluate
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const matchMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "contentmoderator/moderate/v1.0/ProcessImage/Match",
  urlParameters: [
    Parameters.endpoint
  ],
  queryParameters: [
    Parameters.listId0,
    Parameters.cacheImage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MatchResponse
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const findFacesFileInputOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "contentmoderator/moderate/v1.0/ProcessImage/FindFaces",
  urlParameters: [
    Parameters.endpoint
  ],
  queryParameters: [
    Parameters.cacheImage
  ],
  requestBody: {
    parameterPath: "imageStream",
    mapper: {
      required: true,
      serializedName: "ImageStream",
      type: {
        name: "Stream"
      }
    }
  },
  contentType: "image/gif",
  responses: {
    200: {
      bodyMapper: Mappers.FoundFaces
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const findFacesUrlInputOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "contentmoderator/moderate/v1.0/ProcessImage/FindFaces",
  urlParameters: [
    Parameters.endpoint
  ],
  queryParameters: [
    Parameters.cacheImage
  ],
  headerParameters: [
    Parameters.contentType0
  ],
  requestBody: {
    parameterPath: "imageUrl",
    mapper: {
      ...Mappers.ImageUrl,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.FoundFaces
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const oCRUrlInputOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "contentmoderator/moderate/v1.0/ProcessImage/OCR",
  urlParameters: [
    Parameters.endpoint
  ],
  queryParameters: [
    Parameters.language0,
    Parameters.cacheImage,
    Parameters.enhanced
  ],
  headerParameters: [
    Parameters.contentType0
  ],
  requestBody: {
    parameterPath: "imageUrl",
    mapper: {
      ...Mappers.ImageUrl,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OCR
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const oCRFileInputOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "contentmoderator/moderate/v1.0/ProcessImage/OCR",
  urlParameters: [
    Parameters.endpoint
  ],
  queryParameters: [
    Parameters.language0,
    Parameters.cacheImage,
    Parameters.enhanced
  ],
  requestBody: {
    parameterPath: "imageStream",
    mapper: {
      required: true,
      serializedName: "ImageStream",
      type: {
        name: "Stream"
      }
    }
  },
  contentType: "image/gif",
  responses: {
    200: {
      bodyMapper: Mappers.OCR
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const evaluateFileInputOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "contentmoderator/moderate/v1.0/ProcessImage/Evaluate",
  urlParameters: [
    Parameters.endpoint
  ],
  queryParameters: [
    Parameters.cacheImage
  ],
  requestBody: {
    parameterPath: "imageStream",
    mapper: {
      required: true,
      serializedName: "ImageStream",
      type: {
        name: "Stream"
      }
    }
  },
  contentType: "image/gif",
  responses: {
    200: {
      bodyMapper: Mappers.Evaluate
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const evaluateUrlInputOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "contentmoderator/moderate/v1.0/ProcessImage/Evaluate",
  urlParameters: [
    Parameters.endpoint
  ],
  queryParameters: [
    Parameters.cacheImage
  ],
  headerParameters: [
    Parameters.contentType0
  ],
  requestBody: {
    parameterPath: "imageUrl",
    mapper: {
      ...Mappers.ImageUrl,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Evaluate
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const matchUrlInputOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "contentmoderator/moderate/v1.0/ProcessImage/Match",
  urlParameters: [
    Parameters.endpoint
  ],
  queryParameters: [
    Parameters.listId0,
    Parameters.cacheImage
  ],
  headerParameters: [
    Parameters.contentType0
  ],
  requestBody: {
    parameterPath: "imageUrl",
    mapper: {
      ...Mappers.ImageUrl,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.MatchResponse
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const matchFileInputOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "contentmoderator/moderate/v1.0/ProcessImage/Match",
  urlParameters: [
    Parameters.endpoint
  ],
  queryParameters: [
    Parameters.listId0,
    Parameters.cacheImage
  ],
  requestBody: {
    parameterPath: "imageStream",
    mapper: {
      required: true,
      serializedName: "ImageStream",
      type: {
        name: "Stream"
      }
    }
  },
  contentType: "image/gif",
  responses: {
    200: {
      bodyMapper: Mappers.MatchResponse
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};
