"use strict";
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
var msRest = require("@azure/ms-rest-js");
var Mappers = require("../models/predictionOperationsMappers");
var Parameters = require("../models/parameters");
/** Class representing a PredictionOperations. */
var PredictionOperations = /** @class */ (function () {
    /**
     * Create a PredictionOperations.
     * @param {LUISRuntimeClientContext} client Reference to the service client.
     */
    function PredictionOperations(client) {
        this.client = client;
    }
    PredictionOperations.prototype.getVersionPrediction = function (appId, versionId, predictionRequest, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            versionId: versionId,
            predictionRequest: predictionRequest,
            options: options
        }, getVersionPredictionOperationSpec, callback);
    };
    PredictionOperations.prototype.getSlotPrediction = function (appId, slotName, predictionRequest, options, callback) {
        return this.client.sendOperationRequest({
            appId: appId,
            slotName: slotName,
            predictionRequest: predictionRequest,
            options: options
        }, getSlotPredictionOperationSpec, callback);
    };
    return PredictionOperations;
}());
exports.PredictionOperations = PredictionOperations;
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getVersionPredictionOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/versions/{versionId}/predict",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.versionId
    ],
    queryParameters: [
        Parameters.verbose,
        Parameters.showAllIntents,
        Parameters.log
    ],
    requestBody: {
        parameterPath: "predictionRequest",
        mapper: __assign({}, Mappers.PredictionRequest, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.PredictionResponse
        },
        "default": {
            bodyMapper: Mappers.ErrorModel
        }
    },
    serializer: serializer
};
var getSlotPredictionOperationSpec = {
    httpMethod: "POST",
    path: "apps/{appId}/slots/{slotName}/predict",
    urlParameters: [
        Parameters.endpoint,
        Parameters.appId,
        Parameters.slotName
    ],
    queryParameters: [
        Parameters.verbose,
        Parameters.showAllIntents,
        Parameters.log
    ],
    requestBody: {
        parameterPath: "predictionRequest",
        mapper: __assign({}, Mappers.PredictionRequest, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.PredictionResponse
        },
        "default": {
            bodyMapper: Mappers.ErrorModel
        }
    },
    serializer: serializer
};
