/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";


/**
 * @interface
 * An interface representing PredictionRequestOptions.
 * The custom options for the prediction request.
 *
 */
export interface PredictionRequestOptions {
  /**
   * @member {Date} [datetimeReference] The reference DateTime used for
   * predicting datetime entities.
   */
  datetimeReference?: Date;
  /**
   * @member {boolean} [overridePredictions] Whether to make the external
   * entities resolution override the predictions if an overlap occurs.
   */
  overridePredictions?: boolean;
}

/**
 * @interface
 * An interface representing ExternalEntity.
 * Defines a user perdicted entity that extends an already existing one.
 *
 */
export interface ExternalEntity {
  /**
   * @member {string} entityName The name of the entity to extend.
   */
  entityName: string;
  /**
   * @member {number} startIndex The start character index of the predicted
   * entity.
   */
  startIndex: number;
  /**
   * @member {number} entityLength The length of the predicted entity.
   */
  entityLength: number;
  /**
   * @member {any} [resolution] A user supplied custom resolution to return as
   * the entity's prediction.
   */
  resolution?: any;
}

/**
 * @interface
 * An interface representing RequestList.
 * Defines a sub-list to append to an existing list entity.
 *
 */
export interface RequestList {
  /**
   * @member {string} [name] The name of the sub-list.
   */
  name?: string;
  /**
   * @member {string} canonicalForm The canonical form of the sub-list.
   */
  canonicalForm: string;
  /**
   * @member {string[]} [synonyms] The synonyms of the canonical form.
   */
  synonyms?: string[];
}

/**
 * @interface
 * An interface representing DynamicList.
 * Defines an extension for a list entity.
 *
 */
export interface DynamicList {
  /**
   * @member {string} listEntityName The name of the list entity to extend.
   */
  listEntityName: string;
  /**
   * @member {RequestList[]} requestLists The lists to append on the extended
   * list entity.
   */
  requestLists: RequestList[];
}

/**
 * @interface
 * An interface representing PredictionRequest.
 * Represents the prediction request parameters.
 *
 */
export interface PredictionRequest {
  /**
   * @member {string} query The query to predict
   */
  query: string;
  /**
   * @member {PredictionRequestOptions} [options] The custom options defined
   * for this request.
   */
  options?: PredictionRequestOptions;
  /**
   * @member {ExternalEntity[]} [externalEntities] The externally predicted
   * entities for this request
   */
  externalEntities?: ExternalEntity[];
  /**
   * @member {DynamicList[]} [dynamicLists] The dynamically created list
   * entities for this request
   */
  dynamicLists?: DynamicList[];
}

/**
 * @interface
 * An interface representing Intent.
 * Represents an intent prediction.
 *
 */
export interface Intent {
  /**
   * @member {number} [score] The score of the fired intent.
   */
  score?: number;
  /**
   * @member {Prediction} [childApp] The prediction of the dispatched
   * application.
   */
  childApp?: Prediction;
}

/**
 * @interface
 * An interface representing Sentiment.
 * The result of the sentiment analaysis.
 *
 */
export interface Sentiment {
  /**
   * @member {number} score The sentiment score of the query.
   */
  score: number;
  /**
   * @member {string} [label] The label of the sentiment analysis result.
   */
  label?: string;
}

/**
 * @interface
 * An interface representing Prediction.
 * Represents the prediction of a query.
 *
 */
export interface Prediction {
  /**
   * @member {string} normalizedQuery The query after pre-processing and
   * normalization.
   */
  normalizedQuery: string;
  /**
   * @member {string} [alteredQuery] The query after spell checking. Only set
   * if spell check was enabled and a spelling mistake was found.
   */
  alteredQuery?: string;
  /**
   * @member {string} topIntent The name of the top scoring intent.
   */
  topIntent: string;
  /**
   * @member {{ [propertyName: string]: Intent }} intents A dictionary
   * representing the intents that fired.
   */
  intents: { [propertyName: string]: Intent };
  /**
   * @member {{ [propertyName: string]: any }} entities The dictionary
   * representing the entities that fired.
   */
  entities: { [propertyName: string]: any };
  /**
   * @member {Sentiment} [sentiment] The result of the sentiment analysis.
   */
  sentiment?: Sentiment;
}

/**
 * @interface
 * An interface representing PredictionResponse.
 * Represents the prediction response.
 *
 */
export interface PredictionResponse {
  /**
   * @member {string} query The query used in the prediction.
   */
  query: string;
  /**
   * @member {Prediction} prediction The prediction of the requested query.
   */
  prediction: Prediction;
}

/**
 * @interface
 * An interface representing ErrorBody.
 * Represents the definition of the error that occurred.
 *
 */
export interface ErrorBody {
  /**
   * @member {string} code The error code.
   */
  code: string;
  /**
   * @member {string} message The error message.
   */
  message: string;
}

/**
 * @interface
 * An interface representing ErrorModel.
 * Represents the error that occurred.
 *
 */
export interface ErrorModel {
  /**
   * @member {ErrorBody} error
   */
  error: ErrorBody;
}

/**
 * @interface
 * An interface representing PredictionGetVersionPredictionOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface PredictionGetVersionPredictionOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {boolean} [verbose] Indicates whether to get extra metadata for
   * the entities predictions or not.
   */
  verbose?: boolean;
  /**
   * @member {boolean} [showAllIntents] Indicates whether to return all the
   * intents in the response or just the top intent.
   */
  showAllIntents?: boolean;
  /**
   * @member {boolean} [log] Indicates whether to log the endpoint query or
   * not.
   */
  log?: boolean;
}

/**
 * @interface
 * An interface representing PredictionGetSlotPredictionOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface PredictionGetSlotPredictionOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {boolean} [verbose] Indicates whether to get extra metadata for
   * the entities predictions or not.
   */
  verbose?: boolean;
  /**
   * @member {boolean} [showAllIntents] Indicates whether to return all the
   * intents in the response or just the top intent.
   */
  showAllIntents?: boolean;
  /**
   * @member {boolean} [log] Indicates whether to log the endpoint query or
   * not.
   */
  log?: boolean;
}

/**
 * Contains response data for the getVersionPrediction operation.
 */
export type PredictionGetVersionPredictionResponse = PredictionResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PredictionResponse;
    };
};

/**
 * Contains response data for the getSlotPrediction operation.
 */
export type PredictionGetSlotPredictionResponse = PredictionResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PredictionResponse;
    };
};
