/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { ServiceClientOptions } from "@azure/ms-rest-js";
import * as msRest from "@azure/ms-rest-js";

/**
 * Contains the possible cases for ResponseBase.
 */
export type ResponseBaseUnion = ResponseBase | IdentifiableUnion;

/**
 * Response base
 */
export interface ResponseBase {
  /**
   * Polymorphic Discriminator
   */
  _type: "ResponseBase";
}

/**
 * Contains the possible cases for Identifiable.
 */
export type IdentifiableUnion = Identifiable | ResponseUnion;

/**
 * Defines the identity of a resource.
 */
export interface Identifiable {
  /**
   * Polymorphic Discriminator
   */
  _type: "Identifiable";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
}

/**
 * Contains the possible cases for Response.
 */
export type ResponseUnion = Response | AnswerUnion | ThingUnion | ErrorResponse | RecognizedEntity | RecognizedEntityRegion | ImageInsights | TrendingImages;

/**
 * Defines a response. All schemas that could be returned at the root of a response should inherit
 * from this
 */
export interface Response {
  /**
   * Polymorphic Discriminator
   */
  _type: "Response";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL To Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
}

/**
 * Contains the possible cases for Thing.
 */
export type ThingUnion = Thing | Organization | OfferUnion | CreativeWorkUnion | Person | IntangibleUnion;

/**
 * Defines a thing.
 */
export interface Thing {
  /**
   * Polymorphic Discriminator
   */
  _type: "Thing";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL To Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
  /**
   * The name of the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The URL to get more information about the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly url?: string;
  /**
   * An image of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly image?: ImageObject;
  /**
   * A short description of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly description?: string;
  /**
   * An alias for the item
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly alternateName?: string;
  /**
   * An ID that uniquely identifies this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly bingId?: string;
}

/**
 * Defines an organization.
 */
export interface Organization {
  /**
   * Polymorphic Discriminator
   */
  _type: "Organization";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL To Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
  /**
   * The name of the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The URL to get more information about the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly url?: string;
  /**
   * An image of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly image?: ImageObject;
  /**
   * A short description of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly description?: string;
  /**
   * An alias for the item
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly alternateName?: string;
  /**
   * An ID that uniquely identifies this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly bingId?: string;
}

/**
 * Contains the possible cases for PropertiesItem.
 */
export type PropertiesItemUnion = PropertiesItem | RatingUnion;

/**
 * Defines an item.
 */
export interface PropertiesItem {
  /**
   * Polymorphic Discriminator
   */
  _type: "Properties/Item";
  /**
   * Text representation of an item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly text?: string;
}

/**
 * Contains the possible cases for Rating.
 */
export type RatingUnion = Rating | AggregateRating;

/**
 * Defines a rating.
 */
export interface Rating {
  /**
   * Polymorphic Discriminator
   */
  _type: "Rating";
  /**
   * Text representation of an item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly text?: string;
  /**
   * The mean (average) rating. The possible values are 1.0 through 5.0.
   */
  ratingValue: number;
  /**
   * The highest rated review. The possible values are 1.0 through 5.0.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly bestRating?: number;
}

/**
 * Defines the metrics that indicate how well an item was rated by others.
 */
export interface AggregateRating {
  /**
   * Polymorphic Discriminator
   */
  _type: "AggregateRating";
  /**
   * Text representation of an item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly text?: string;
  /**
   * The mean (average) rating. The possible values are 1.0 through 5.0.
   */
  ratingValue: number;
  /**
   * The highest rated review. The possible values are 1.0 through 5.0.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly bestRating?: number;
  /**
   * The number of times the recipe has been rated or reviewed.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly reviewCount?: number;
}

/**
 * Contains the possible cases for Offer.
 */
export type OfferUnion = Offer | AggregateOffer;

/**
 * Defines a merchant's offer.
 */
export interface Offer {
  /**
   * Polymorphic Discriminator
   */
  _type: "Offer";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL To Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
  /**
   * The name of the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The URL to get more information about the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly url?: string;
  /**
   * An image of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly image?: ImageObject;
  /**
   * A short description of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly description?: string;
  /**
   * An alias for the item
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly alternateName?: string;
  /**
   * An ID that uniquely identifies this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly bingId?: string;
  /**
   * Seller for this offer
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly seller?: Organization;
  /**
   * The item's price.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly price?: number;
  /**
   * The monetary currency. For example, USD. Possible values include: 'USD', 'CAD', 'GBP', 'EUR',
   * 'COP', 'JPY', 'CNY', 'AUD', 'INR', 'AED', 'AFN', 'ALL', 'AMD', 'ANG', 'AOA', 'ARS', 'AWG',
   * 'AZN', 'BAM', 'BBD', 'BDT', 'BGN', 'BHD', 'BIF', 'BMD', 'BND', 'BOB', 'BOV', 'BRL', 'BSD',
   * 'BTN', 'BWP', 'BYR', 'BZD', 'CDF', 'CHE', 'CHF', 'CHW', 'CLF', 'CLP', 'COU', 'CRC', 'CUC',
   * 'CUP', 'CVE', 'CZK', 'DJF', 'DKK', 'DOP', 'DZD', 'EGP', 'ERN', 'ETB', 'FJD', 'FKP', 'GEL',
   * 'GHS', 'GIP', 'GMD', 'GNF', 'GTQ', 'GYD', 'HKD', 'HNL', 'HRK', 'HTG', 'HUF', 'IDR', 'ILS',
   * 'IQD', 'IRR', 'ISK', 'JMD', 'JOD', 'KES', 'KGS', 'KHR', 'KMF', 'KPW', 'KRW', 'KWD', 'KYD',
   * 'KZT', 'LAK', 'LBP', 'LKR', 'LRD', 'LSL', 'LYD', 'MAD', 'MDL', 'MGA', 'MKD', 'MMK', 'MNT',
   * 'MOP', 'MRO', 'MUR', 'MVR', 'MWK', 'MXN', 'MXV', 'MYR', 'MZN', 'NAD', 'NGN', 'NIO', 'NOK',
   * 'NPR', 'NZD', 'OMR', 'PAB', 'PEN', 'PGK', 'PHP', 'PKR', 'PLN', 'PYG', 'QAR', 'RON', 'RSD',
   * 'RUB', 'RWF', 'SAR', 'SBD', 'SCR', 'SDG', 'SEK', 'SGD', 'SHP', 'SLL', 'SOS', 'SRD', 'SSP',
   * 'STD', 'SYP', 'SZL', 'THB', 'TJS', 'TMT', 'TND', 'TOP', 'TRY', 'TTD', 'TWD', 'TZS', 'UAH',
   * 'UGX', 'UYU', 'UZS', 'VEF', 'VND', 'VUV', 'WST', 'XAF', 'XCD', 'XOF', 'XPF', 'YER', 'ZAR',
   * 'ZMW'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**.
   * Default value: 'USD'.
   */
  readonly priceCurrency?: Currency;
  /**
   * The item's availability. The following are the possible values: Discontinued, InStock,
   * InStoreOnly, LimitedAvailability, OnlineOnly, OutOfStock, PreOrder, SoldOut. Possible values
   * include: 'Discontinued', 'InStock', 'InStoreOnly', 'LimitedAvailability', 'OnlineOnly',
   * 'OutOfStock', 'PreOrder', 'SoldOut'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly availability?: ItemAvailability;
  /**
   * An aggregated rating that indicates how well the product has been rated by others.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly aggregateRating?: AggregateRating;
  /**
   * The last date that the offer was updated. The date is in the form YYYY-MM-DD.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastUpdated?: string;
}

/**
 * Defines a list of offers from merchants that are related to the image.
 */
export interface AggregateOffer {
  /**
   * Polymorphic Discriminator
   */
  _type: "AggregateOffer";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL To Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
  /**
   * The name of the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The URL to get more information about the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly url?: string;
  /**
   * An image of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly image?: ImageObject;
  /**
   * A short description of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly description?: string;
  /**
   * An alias for the item
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly alternateName?: string;
  /**
   * An ID that uniquely identifies this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly bingId?: string;
  /**
   * Seller for this offer
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly seller?: Organization;
  /**
   * The item's price.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly price?: number;
  /**
   * The monetary currency. For example, USD. Possible values include: 'USD', 'CAD', 'GBP', 'EUR',
   * 'COP', 'JPY', 'CNY', 'AUD', 'INR', 'AED', 'AFN', 'ALL', 'AMD', 'ANG', 'AOA', 'ARS', 'AWG',
   * 'AZN', 'BAM', 'BBD', 'BDT', 'BGN', 'BHD', 'BIF', 'BMD', 'BND', 'BOB', 'BOV', 'BRL', 'BSD',
   * 'BTN', 'BWP', 'BYR', 'BZD', 'CDF', 'CHE', 'CHF', 'CHW', 'CLF', 'CLP', 'COU', 'CRC', 'CUC',
   * 'CUP', 'CVE', 'CZK', 'DJF', 'DKK', 'DOP', 'DZD', 'EGP', 'ERN', 'ETB', 'FJD', 'FKP', 'GEL',
   * 'GHS', 'GIP', 'GMD', 'GNF', 'GTQ', 'GYD', 'HKD', 'HNL', 'HRK', 'HTG', 'HUF', 'IDR', 'ILS',
   * 'IQD', 'IRR', 'ISK', 'JMD', 'JOD', 'KES', 'KGS', 'KHR', 'KMF', 'KPW', 'KRW', 'KWD', 'KYD',
   * 'KZT', 'LAK', 'LBP', 'LKR', 'LRD', 'LSL', 'LYD', 'MAD', 'MDL', 'MGA', 'MKD', 'MMK', 'MNT',
   * 'MOP', 'MRO', 'MUR', 'MVR', 'MWK', 'MXN', 'MXV', 'MYR', 'MZN', 'NAD', 'NGN', 'NIO', 'NOK',
   * 'NPR', 'NZD', 'OMR', 'PAB', 'PEN', 'PGK', 'PHP', 'PKR', 'PLN', 'PYG', 'QAR', 'RON', 'RSD',
   * 'RUB', 'RWF', 'SAR', 'SBD', 'SCR', 'SDG', 'SEK', 'SGD', 'SHP', 'SLL', 'SOS', 'SRD', 'SSP',
   * 'STD', 'SYP', 'SZL', 'THB', 'TJS', 'TMT', 'TND', 'TOP', 'TRY', 'TTD', 'TWD', 'TZS', 'UAH',
   * 'UGX', 'UYU', 'UZS', 'VEF', 'VND', 'VUV', 'WST', 'XAF', 'XCD', 'XOF', 'XPF', 'YER', 'ZAR',
   * 'ZMW'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**.
   * Default value: 'USD'.
   */
  readonly priceCurrency?: Currency;
  /**
   * The item's availability. The following are the possible values: Discontinued, InStock,
   * InStoreOnly, LimitedAvailability, OnlineOnly, OutOfStock, PreOrder, SoldOut. Possible values
   * include: 'Discontinued', 'InStock', 'InStoreOnly', 'LimitedAvailability', 'OnlineOnly',
   * 'OutOfStock', 'PreOrder', 'SoldOut'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly availability?: ItemAvailability;
  /**
   * An aggregated rating that indicates how well the product has been rated by others.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly aggregateRating?: AggregateRating;
  /**
   * The last date that the offer was updated. The date is in the form YYYY-MM-DD.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastUpdated?: string;
  /**
   * A list of offers from merchants that have offerings related to the image.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly offers?: OfferUnion[];
}

/**
 * Defines a count of the number of websites where you can shop or perform other actions related to
 * the image.
 */
export interface ImagesImageMetadata {
  /**
   * The number of websites that offer goods of the products seen in the image.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly shoppingSourcesCount?: number;
  /**
   * The number of websites that offer recipes of the food seen in the image.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly recipeSourcesCount?: number;
  /**
   * A summary of the online offers of products found in the image. For example, if the image is of
   * a dress, the offer might identify the lowest price and the number of offers found. Only
   * visually similar products insights include this field. The offer includes the following
   * fields: Name, AggregateRating, OfferCount, and LowPrice.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly aggregateOffer?: AggregateOffer;
}

/**
 * Contains the possible cases for CreativeWork.
 */
export type CreativeWorkUnion = CreativeWork | MediaObjectUnion | Recipe | WebPageUnion;

/**
 * The most generic kind of creative work, including books, movies, photographs, software programs,
 * etc.
 */
export interface CreativeWork {
  /**
   * Polymorphic Discriminator
   */
  _type: "CreativeWork";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL To Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
  /**
   * The name of the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The URL to get more information about the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly url?: string;
  /**
   * An image of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly image?: ImageObject;
  /**
   * A short description of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly description?: string;
  /**
   * An alias for the item
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly alternateName?: string;
  /**
   * An ID that uniquely identifies this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly bingId?: string;
  /**
   * The URL to a thumbnail of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly thumbnailUrl?: string;
  /**
   * The source of the creative work.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provider?: ThingUnion[];
  /**
   * The date on which the CreativeWork was published.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly datePublished?: string;
  /**
   * Text content of this creative work
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly text?: string;
}

/**
 * Contains the possible cases for MediaObject.
 */
export type MediaObjectUnion = MediaObject | ImageObject;

/**
 * Defines a media object.
 */
export interface MediaObject {
  /**
   * Polymorphic Discriminator
   */
  _type: "MediaObject";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL To Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
  /**
   * The name of the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The URL to get more information about the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly url?: string;
  /**
   * An image of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly image?: ImageObject;
  /**
   * A short description of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly description?: string;
  /**
   * An alias for the item
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly alternateName?: string;
  /**
   * An ID that uniquely identifies this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly bingId?: string;
  /**
   * The URL to a thumbnail of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly thumbnailUrl?: string;
  /**
   * The source of the creative work.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provider?: ThingUnion[];
  /**
   * The date on which the CreativeWork was published.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly datePublished?: string;
  /**
   * Text content of this creative work
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly text?: string;
  /**
   * Original URL to retrieve the source (file) for the media object (e.g the source URL for the
   * image).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly contentUrl?: string;
  /**
   * URL of the page that hosts the media object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly hostPageUrl?: string;
  /**
   * Size of the media object content (use format "value unit" e.g "1024 B").
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly contentSize?: string;
  /**
   * Encoding format (e.g mp3, mp4, jpeg, etc).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly encodingFormat?: string;
  /**
   * Display URL of the page that hosts the media object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly hostPageDisplayUrl?: string;
  /**
   * The width of the source media object, in pixels.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly width?: number;
  /**
   * The height of the source media object, in pixels.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly height?: number;
}

/**
 * Defines an image
 */
export interface ImageObject {
  /**
   * Polymorphic Discriminator
   */
  _type: "ImageObject";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL To Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
  /**
   * The name of the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The URL to get more information about the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly url?: string;
  /**
   * An image of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly image?: ImageObject;
  /**
   * A short description of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly description?: string;
  /**
   * An alias for the item
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly alternateName?: string;
  /**
   * An ID that uniquely identifies this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly bingId?: string;
  /**
   * The URL to a thumbnail of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly thumbnailUrl?: string;
  /**
   * The source of the creative work.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provider?: ThingUnion[];
  /**
   * The date on which the CreativeWork was published.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly datePublished?: string;
  /**
   * Text content of this creative work
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly text?: string;
  /**
   * Original URL to retrieve the source (file) for the media object (e.g the source URL for the
   * image).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly contentUrl?: string;
  /**
   * URL of the page that hosts the media object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly hostPageUrl?: string;
  /**
   * Size of the media object content (use format "value unit" e.g "1024 B").
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly contentSize?: string;
  /**
   * Encoding format (e.g mp3, mp4, jpeg, etc).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly encodingFormat?: string;
  /**
   * Display URL of the page that hosts the media object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly hostPageDisplayUrl?: string;
  /**
   * The width of the source media object, in pixels.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly width?: number;
  /**
   * The height of the source media object, in pixels.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly height?: number;
  /**
   * The URL to a thumbnail of the image
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly thumbnail?: ImageObject;
  /**
   * The token that you use in a subsequent call to the Image Search API to get additional
   * information about the image. For information about using this token, see the insightsToken
   * query parameter.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly imageInsightsToken?: string;
  /**
   * A count of the number of websites where you can shop or perform other actions related to the
   * image. For example, if the image is of an apple pie, this object includes a count of the
   * number of websites where you can buy an apple pie. To indicate the number of offers in your
   * UX, include badging such as a shopping cart icon that contains the count. When the user clicks
   * on the icon, use imageInsightsToken to get the list of websites.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly insightsMetadata?: ImagesImageMetadata;
  /**
   * Unique Id for the image
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly imageId?: string;
  /**
   * A three-byte hexadecimal number that represents the color that dominates the image. Use the
   * color as the temporary background in your client until the image is loaded.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly accentColor?: string;
  /**
   * Visual representation of the image. Used for getting more sizes
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly visualWords?: string;
}

/**
 * Defines a search query.
 */
export interface Query {
  /**
   * The query string. Use this string as the query term in a new search request.
   */
  text: string;
  /**
   * The display version of the query term. This version of the query term may contain special
   * characters that highlight the search term found in the query string. The string contains the
   * highlighting characters only if the query enabled hit highlighting
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly displayText?: string;
  /**
   * The URL that takes the user to the Bing search results page for the query.Only related search
   * results include this field.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
  /**
   * The URL that you use to get the results of the related search. Before using the URL, you must
   * append query parameters as appropriate and include the Ocp-Apim-Subscription-Key header. Use
   * this URL if you're displaying the results in your own user interface. Otherwise, use the
   * webSearchUrl URL.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly searchLink?: string;
  /**
   * The URL to a thumbnail of a related image.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly thumbnail?: ImageObject;
}

/**
 * Defines the pivot segment.
 */
export interface PivotSuggestions {
  /**
   * The segment from the original query to pivot on.
   */
  pivot: string;
  /**
   * A list of suggested queries for the pivot.
   */
  suggestions: Query[];
}

/**
 * Contains the possible cases for Answer.
 */
export type AnswerUnion = Answer | SearchResultsAnswerUnion;

/**
 * Defines an answer.
 */
export interface Answer {
  /**
   * Polymorphic Discriminator
   */
  _type: "Answer";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL To Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
}

/**
 * Contains the possible cases for SearchResultsAnswer.
 */
export type SearchResultsAnswerUnion = SearchResultsAnswer | Images;

/**
 * Defines a search result answer.
 */
export interface SearchResultsAnswer {
  /**
   * Polymorphic Discriminator
   */
  _type: "SearchResultsAnswer";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL To Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
  /**
   * The estimated number of webpages that are relevant to the query. Use this number along with
   * the count and offset query parameters to page the results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly totalEstimatedMatches?: number;
}

/**
 * Defines an image answer
 */
export interface Images {
  /**
   * Polymorphic Discriminator
   */
  _type: "Images";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL To Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
  /**
   * The estimated number of webpages that are relevant to the query. Use this number along with
   * the count and offset query parameters to page the results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly totalEstimatedMatches?: number;
  /**
   * Used as part of deduping. Tells client the next offset that client should use in the next
   * pagination request
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextOffset?: number;
  /**
   * A list of image objects that are relevant to the query. If there are no results, the List is
   * empty.
   */
  value: ImageObject[];
  /**
   * A list of expanded queries that narrows the original query. For example, if the query was
   * Microsoft Surface, the expanded queries might be: Microsoft Surface Pro 3, Microsoft Surface
   * RT, Microsoft Surface Phone, and Microsoft Surface Hub.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly queryExpansions?: Query[];
  /**
   * A list of segments in the original query. For example, if the query was Red Flowers, Bing
   * might segment the query into Red and Flowers. The Flowers pivot may contain query suggestions
   * such as Red Peonies and Red Daisies, and the Red pivot may contain query suggestions such as
   * Green Flowers and Yellow Flowers.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly pivotSuggestions?: PivotSuggestions[];
  /**
   * A list of terms that are similar in meaning to the user's query term.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly similarTerms?: Query[];
}

/**
 * Defines the error that occurred.
 */
export interface ErrorModel {
  /**
   * The error code that identifies the category of error. Possible values include: 'None',
   * 'ServerError', 'InvalidRequest', 'RateLimitExceeded', 'InvalidAuthorization',
   * 'InsufficientAuthorization'. Default value: 'None'.
   */
  code: ErrorCode;
  /**
   * The error code that further helps to identify the error. Possible values include:
   * 'UnexpectedError', 'ResourceError', 'NotImplemented', 'ParameterMissing',
   * 'ParameterInvalidValue', 'HttpNotAllowed', 'Blocked', 'AuthorizationMissing',
   * 'AuthorizationRedundancy', 'AuthorizationDisabled', 'AuthorizationExpired'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly subCode?: ErrorSubCode;
  /**
   * A description of the error.
   */
  message: string;
  /**
   * A description that provides additional information about the error.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly moreDetails?: string;
  /**
   * The parameter in the request that caused the error.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly parameter?: string;
  /**
   * The parameter's value in the request that was not valid.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: string;
}

/**
 * The top-level response that represents a failed request.
 */
export interface ErrorResponse {
  /**
   * Polymorphic Discriminator
   */
  _type: "ErrorResponse";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL To Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
  /**
   * A list of errors that describe the reasons why the request failed.
   */
  errors: ErrorModel[];
}

/**
 * Defines an image's caption.
 */
export interface ImageInsightsImageCaption {
  /**
   * A caption about the image.
   */
  caption: string;
  /**
   * The URL to the website where the caption was found. You must attribute the caption to the
   * source. For example, by displaying the domain name from the URL next to the caption and using
   * the URL to link to the source website.
   */
  dataSourceUrl: string;
  /**
   * A list of entities found in the caption. Use the contents of the Query object to find the
   * entity in the caption and create a link. The link takes the user to images of the entity.
   */
  relatedSearches: Query[];
}

/**
 * Contains the possible cases for WebPage.
 */
export type WebPageUnion = WebPage | CollectionPageUnion;

/**
 * Defines a webpage that is relevant to the query.
 */
export interface WebPage {
  /**
   * Polymorphic Discriminator
   */
  _type: "WebPage";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL To Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
  /**
   * The name of the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The URL to get more information about the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly url?: string;
  /**
   * An image of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly image?: ImageObject;
  /**
   * A short description of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly description?: string;
  /**
   * An alias for the item
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly alternateName?: string;
  /**
   * An ID that uniquely identifies this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly bingId?: string;
  /**
   * The URL to a thumbnail of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly thumbnailUrl?: string;
  /**
   * The source of the creative work.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provider?: ThingUnion[];
  /**
   * The date on which the CreativeWork was published.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly datePublished?: string;
  /**
   * Text content of this creative work
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly text?: string;
}

/**
 * Contains the possible cases for CollectionPage.
 */
export type CollectionPageUnion = CollectionPage | ImageGallery;

/**
 * Defines a link to a webpage that contains a collection.
 */
export interface CollectionPage {
  /**
   * Polymorphic Discriminator
   */
  _type: "CollectionPage";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL To Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
  /**
   * The name of the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The URL to get more information about the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly url?: string;
  /**
   * An image of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly image?: ImageObject;
  /**
   * A short description of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly description?: string;
  /**
   * An alias for the item
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly alternateName?: string;
  /**
   * An ID that uniquely identifies this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly bingId?: string;
  /**
   * The URL to a thumbnail of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly thumbnailUrl?: string;
  /**
   * The source of the creative work.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provider?: ThingUnion[];
  /**
   * The date on which the CreativeWork was published.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly datePublished?: string;
  /**
   * Text content of this creative work
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly text?: string;
}

/**
 * Defines a link to a webpage that contains a collection of related images.
 */
export interface ImageGallery {
  /**
   * Polymorphic Discriminator
   */
  _type: "ImageGallery";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL To Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
  /**
   * The name of the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The URL to get more information about the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly url?: string;
  /**
   * An image of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly image?: ImageObject;
  /**
   * A short description of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly description?: string;
  /**
   * An alias for the item
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly alternateName?: string;
  /**
   * An ID that uniquely identifies this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly bingId?: string;
  /**
   * The URL to a thumbnail of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly thumbnailUrl?: string;
  /**
   * The source of the creative work.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provider?: ThingUnion[];
  /**
   * The date on which the CreativeWork was published.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly datePublished?: string;
  /**
   * Text content of this creative work
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly text?: string;
  /**
   * The publisher or social network where the images were found. You must attribute the publisher
   * as the source where the collection was found.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly source?: string;
  /**
   * The number of related images found in the collection.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly imagesCount?: number;
  /**
   * The number of users on the social network that follow the creator.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly followersCount?: number;
}

/**
 * Defines a list of webpages that contain related images.
 */
export interface RelatedCollectionsModule {
  /**
   * A list of webpages that contain related images.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: ImageGallery[];
}

/**
 * Defines a list of images.
 */
export interface ImagesModule {
  /**
   * A list of images.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: ImageObject[];
}

/**
 * Defines a list of related searches.
 */
export interface RelatedSearchesModule {
  /**
   * A list of related searches.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: Query[];
}

/**
 * Defines a cooking recipe.
 */
export interface Recipe {
  /**
   * Polymorphic Discriminator
   */
  _type: "Recipe";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL To Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
  /**
   * The name of the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The URL to get more information about the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly url?: string;
  /**
   * An image of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly image?: ImageObject;
  /**
   * A short description of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly description?: string;
  /**
   * An alias for the item
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly alternateName?: string;
  /**
   * An ID that uniquely identifies this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly bingId?: string;
  /**
   * The URL to a thumbnail of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly thumbnailUrl?: string;
  /**
   * The source of the creative work.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provider?: ThingUnion[];
  /**
   * The date on which the CreativeWork was published.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly datePublished?: string;
  /**
   * Text content of this creative work
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly text?: string;
  /**
   * The amount of time the food takes to cook. For example, PT25M. For information about the time
   * format, see http://en.wikipedia.org/wiki/ISO_8601#Durations.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly cookTime?: string;
  /**
   * The amount of time required to prepare the ingredients. For example, PT15M. For information
   * about the time format, see http://en.wikipedia.org/wiki/ISO_8601#Durations.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly prepTime?: string;
  /**
   * The total amount of time it takes to prepare and cook the recipe. For example, PT45M. For
   * information about the time format, see http://en.wikipedia.org/wiki/ISO_8601#Durations.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly totalTime?: string;
}

/**
 * Defines a list of recipes.
 */
export interface RecipesModule {
  /**
   * A list of recipes.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: Recipe[];
}

/**
 * Contains the possible cases for Intangible.
 */
export type IntangibleUnion = Intangible | StructuredValueUnion;

/**
 * A utility class that serves as the umbrella for a number of 'intangible' things such as
 * quantities, structured values, etc.
 */
export interface Intangible {
  /**
   * Polymorphic Discriminator
   */
  _type: "Intangible";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL To Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
  /**
   * The name of the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The URL to get more information about the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly url?: string;
  /**
   * An image of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly image?: ImageObject;
  /**
   * A short description of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly description?: string;
  /**
   * An alias for the item
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly alternateName?: string;
  /**
   * An ID that uniquely identifies this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly bingId?: string;
}

/**
 * Contains the possible cases for StructuredValue.
 */
export type StructuredValueUnion = StructuredValue | NormalizedRectangle;

/**
 * An interface representing StructuredValue.
 */
export interface StructuredValue {
  /**
   * Polymorphic Discriminator
   */
  _type: "StructuredValue";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL To Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
  /**
   * The name of the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The URL to get more information about the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly url?: string;
  /**
   * An image of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly image?: ImageObject;
  /**
   * A short description of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly description?: string;
  /**
   * An alias for the item
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly alternateName?: string;
  /**
   * An ID that uniquely identifies this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly bingId?: string;
}

/**
 * Defines a region of an image. The region is defined by the coordinates of the top, left corner
 * and bottom, right corner of the region. The coordinates are fractional values of the original
 * image's width and height in the range 0.0 through 1.0.
 */
export interface NormalizedRectangle {
  /**
   * Polymorphic Discriminator
   */
  _type: "NormalizedRectangle";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL To Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
  /**
   * The name of the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The URL to get more information about the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly url?: string;
  /**
   * An image of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly image?: ImageObject;
  /**
   * A short description of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly description?: string;
  /**
   * An alias for the item
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly alternateName?: string;
  /**
   * An ID that uniquely identifies this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly bingId?: string;
  /**
   * The left coordinate.
   */
  left: number;
  /**
   * The top coordinate
   */
  top: number;
  /**
   * The right coordinate
   */
  right: number;
  /**
   * The bottom coordinate
   */
  bottom: number;
}

/**
 * Defines a recognized entity.
 */
export interface RecognizedEntity {
  /**
   * Polymorphic Discriminator
   */
  _type: "RecognizedEntity";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL To Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
  /**
   * The entity that was recognized. The following are the possible entity objects: Person
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly entity?: ThingUnion;
  /**
   * The confidence that Bing has that the entity in the image matches this entity. The confidence
   * ranges from 0.0 through 1.0 with 1.0 being very confident.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly matchConfidence?: number;
}

/**
 * Defines a region of the image where an entity was found and a list of entities that might match
 * it.
 */
export interface RecognizedEntityRegion {
  /**
   * Polymorphic Discriminator
   */
  _type: "RecognizedEntityRegion";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL To Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
  /**
   * A region of the image that contains an entity. The values of the rectangle are relative to the
   * width and height of the original image and are in the range 0.0 through 1.0. For example, if
   * the image is 300x200 and the region's top, left corner is at point (10, 20) and the bottom,
   * right corner is at point (290, 150), then the normalized rectangle is: Left =
   * 0.0333333333333333, Top = 0.1, Right = 0.9666666666666667, Bottom = 0.75. For people, the
   * region represents the person's face.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly region?: NormalizedRectangle;
  /**
   * A list of entities that Bing believes match the entity found in the region. The entities are
   * in descending order of confidence (see the matchConfidence field of RecognizedEntity).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly matchingEntities?: RecognizedEntity[];
}

/**
 * Defines a group of previously recognized entities.
 */
export interface RecognizedEntityGroup {
  /**
   * The regions of the image that contain entities.
   */
  recognizedEntityRegions: RecognizedEntityRegion[];
  /**
   * The name of the group where images of the entity were also found. The following are possible
   * groups. CelebRecognitionAnnotations: Similar to CelebrityAnnotations but provides a higher
   * probability of an accurate match. CelebrityAnnotations: Contains celebrities such as actors,
   * politicians, athletes, and historical figures.
   */
  name: string;
}

/**
 * Defines a list of previously recognized entities.
 */
export interface RecognizedEntitiesModule {
  /**
   * A list of recognized entities.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: RecognizedEntityGroup[];
}

/**
 * Defines a characteristic of the content found in the image.
 */
export interface InsightsTag {
  /**
   * The name of the characteristic. For example, cat, kitty, calico cat.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
}

/**
 * Defines the characteristics of content found in an image.
 */
export interface ImageTagsModule {
  /**
   * A list of tags that describe the characteristics of the content found in the image. For
   * example, if the image is of a musical artist, the list might include Female, Dress, and Music
   * to indicate the person is female music artist that's wearing a dress.
   */
  value: InsightsTag[];
}

/**
 * The top-level object that the response includes when an image insights request succeeds. For
 * information about requesting image insights, see the
 * [insightsToken](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#insightstoken)
 * query parameter. The modules query parameter affects the fields that Bing includes in the
 * response. If you set
 * [modules](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#modulesrequested)
 * to only Caption, then this object includes only the imageCaption field.
 */
export interface ImageInsights {
  /**
   * Polymorphic Discriminator
   */
  _type: "ImageInsights";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL To Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
  /**
   * A token that you use in a subsequent call to the Image Search API to get more information
   * about the image. For information about using this token, see the insightsToken query
   * parameter. This token has the same usage as the token in the Image object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly imageInsightsToken?: string;
  /**
   * The query term that best represents the image. Clicking the link in the Query object, takes
   * the user to a webpage with more pictures of the image.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly bestRepresentativeQuery?: Query;
  /**
   * The caption to use for the image.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly imageCaption?: ImageInsightsImageCaption;
  /**
   * A list of links to webpages that contain related images.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly relatedCollections?: RelatedCollectionsModule;
  /**
   * A list of webpages that contain the image. To access the webpage, use the URL in the image's
   * hostPageUrl field.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly pagesIncluding?: ImagesModule;
  /**
   * A list of merchants that offer items related to the image. For example, if the image is of an
   * apple pie, the list contains merchants that are selling apple pies.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly shoppingSources?: AggregateOffer;
  /**
   * A list of related queries made by others.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly relatedSearches?: RelatedSearchesModule;
  /**
   * A list of recipes related to the image. For example, if the image is of an apple pie, the list
   * contains recipes for making an apple pie.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly recipes?: RecipesModule;
  /**
   * A list of images that are visually similar to the original image. For example, if the
   * specified image is of a sunset over a body of water, the list of similar images are of a
   * sunset over a body of water. If the specified image is of a person, similar images might be of
   * the same person or they might be of persons dressed similarly or in a similar setting. The
   * criteria for similarity continues to evolve.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly visuallySimilarImages?: ImagesModule;
  /**
   * A list of images that contain products that are visually similar to products found in the
   * original image. For example, if the specified image contains a dress, the list of similar
   * images contain a dress. The image provides summary information about offers that Bing found
   * online for the product.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly visuallySimilarProducts?: ImagesModule;
  /**
   * A list of groups that contain images of entities that match the entity found in the specified
   * image. For example, the response might include images from the general celebrity group if the
   * entity was recognized in that group.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly recognizedEntityGroups?: RecognizedEntitiesModule;
  /**
   * A list of characteristics of the content found in the image. For example, if the image is of a
   * person, the tags might indicate the person's gender and the type of clothes they're wearing.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly imageTags?: ImageTagsModule;
}

/**
 * Defines an image tile.
 */
export interface TrendingImagesTile {
  /**
   * A query that returns a Bing search results page with more images of the subject. For example,
   * if the category is Popular People Searches, then the thumbnail is of a popular person. The
   * query would return a Bing search results page with more images of that person.
   */
  query: Query;
  /**
   * The image's thumbnail.
   */
  image: ImageObject;
}

/**
 * Defines the category of trending images.
 */
export interface TrendingImagesCategory {
  /**
   * The name of the image category. For example, Popular People Searches.
   */
  title: string;
  /**
   * A list of images that are trending in the category. Each tile contains an image and a URL that
   * returns more images of the subject. For example, if the category is Popular People Searches,
   * the image is of a popular person and the URL would return more images of that person.
   */
  tiles: TrendingImagesTile[];
}

/**
 * The top-level object that the response includes when a trending images request succeeds.
 */
export interface TrendingImages {
  /**
   * Polymorphic Discriminator
   */
  _type: "TrendingImages";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL To Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
  /**
   * A list that identifies categories of images and a list of trending images in that category.
   */
  categories: TrendingImagesCategory[];
}

/**
 * Defines a person.
 */
export interface Person {
  /**
   * Polymorphic Discriminator
   */
  _type: "Person";
  /**
   * A String identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The URL that returns this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly readLink?: string;
  /**
   * The URL To Bing's search result for this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webSearchUrl?: string;
  /**
   * The name of the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The URL to get more information about the thing represented by this object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly url?: string;
  /**
   * An image of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly image?: ImageObject;
  /**
   * A short description of the item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly description?: string;
  /**
   * An alias for the item
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly alternateName?: string;
  /**
   * An ID that uniquely identifies this item.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly bingId?: string;
  /**
   * The person's job title.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly jobTitle?: string;
  /**
   * The URL of the person's twitter profile.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly twitterProfile?: string;
}

/**
 * An interface representing ImageSearchClientOptions.
 */
export interface ImageSearchClientOptions extends ServiceClientOptions {
  /**
   * Supported Cognitive Services endpoints (protocol and hostname, for example:
   * "https://westus.api.cognitive.microsoft.com", "https://api.cognitive.microsoft.com"). Default
   * value: 'https://api.cognitive.microsoft.com'.
   */
  endpoint?: string;
}

/**
 * Optional Parameters.
 */
export interface ImagesSearchOptionalParams extends msRest.RequestOptionsBase {
  /**
   * A comma-delimited list of one or more languages to use for user interface strings. The list is
   * in decreasing order of preference. For additional information, including expected format, see
   * [RFC2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html). This header and the
   * [setLang](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#setlang)
   * query parameter are mutually exclusive; do not specify both. If you set this header, you must
   * also specify the
   * [cc](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#cc)
   * query parameter. To determine the market to return results for, Bing uses the first supported
   * language it finds from the list and combines it with the cc parameter value. If the list does
   * not include a supported language, Bing finds the closest language and market that supports the
   * request or it uses an aggregated or default market for the results. To determine the market
   * that Bing used, see the BingAPIs-Market header. Use this header and the cc query parameter
   * only if you specify multiple languages. Otherwise, use the
   * [mkt](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#mkt)
   * and
   * [setLang](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#setlang)
   * query parameters. A user interface string is a string that's used as a label in a user
   * interface. There are few user interface strings in the JSON response objects. Any links to
   * Bing.com properties in the response objects apply the specified language.
   */
  acceptLanguage?: string;
  /**
   * The user agent originating the request. Bing uses the user agent to provide mobile users with
   * an optimized experience. Although optional, you are encouraged to always specify this header.
   * The user-agent should be the same string that any commonly used browser sends. For information
   * about user agents, see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html). The
   * following are examples of user-agent strings. Windows Phone: Mozilla/5.0 (compatible; MSIE
   * 10.0; Windows Phone 8.0; Trident/6.0; IEMobile/10.0; ARM; Touch; NOKIA; Lumia 822). Android:
   * Mozilla / 5.0 (Linux; U; Android 2.3.5; en - us; SCH - I500 Build / GINGERBREAD) AppleWebKit /
   * 533.1 (KHTML; like Gecko) Version / 4.0 Mobile Safari / 533.1. iPhone: Mozilla / 5.0 (iPhone;
   * CPU iPhone OS 6_1 like Mac OS X) AppleWebKit / 536.26 (KHTML; like Gecko) Mobile / 10B142
   * iPhone4; 1 BingWeb / 3.03.1428.20120423. PC: Mozilla / 5.0 (Windows NT 6.3; WOW64; Trident /
   * 7.0; Touch; rv:11.0) like Gecko. iPad: Mozilla / 5.0 (iPad; CPU OS 7_0 like Mac OS X)
   * AppleWebKit / 537.51.1 (KHTML, like Gecko) Version / 7.0 Mobile / 11A465 Safari / 9537.53
   */
  userAgent?: string;
  /**
   * Bing uses this header to provide users with consistent behavior across Bing API calls. Bing
   * often flights new features and improvements, and it uses the client ID as a key for assigning
   * traffic on different flights. If you do not use the same client ID for a user across multiple
   * requests, then Bing may assign the user to multiple conflicting flights. Being assigned to
   * multiple conflicting flights can lead to an inconsistent user experience. For example, if the
   * second request has a different flight assignment than the first, the experience may be
   * unexpected. Also, Bing can use the client ID to tailor web results to that client ID’s search
   * history, providing a richer experience for the user. Bing also uses this header to help
   * improve result rankings by analyzing the activity generated by a client ID. The relevance
   * improvements help with better quality of results delivered by Bing APIs and in turn enables
   * higher click-through rates for the API consumer. IMPORTANT: Although optional, you should
   * consider this header required. Persisting the client ID across multiple requests for the same
   * end user and device combination enables 1) the API consumer to receive a consistent user
   * experience, and 2) higher click-through rates via better quality of results from the Bing
   * APIs. Each user that uses your application on the device must have a unique, Bing generated
   * client ID. If you do not include this header in the request, Bing generates an ID and returns
   * it in the X-MSEdge-ClientID response header. The only time that you should NOT include this
   * header in a request is the first time the user uses your app on that device. Use the client ID
   * for each Bing API request that your app makes for this user on the device. Persist the client
   * ID. To persist the ID in a browser app, use a persistent HTTP cookie to ensure the ID is used
   * across all sessions. Do not use a session cookie. For other apps such as mobile apps, use the
   * device's persistent storage to persist the ID. The next time the user uses your app on that
   * device, get the client ID that you persisted. Bing responses may or may not include this
   * header. If the response includes this header, capture the client ID and use it for all
   * subsequent Bing requests for the user on that device. If you include the X-MSEdge-ClientID,
   * you must not include cookies in the request.
   */
  clientId?: string;
  /**
   * The IPv4 or IPv6 address of the client device. The IP address is used to discover the user's
   * location. Bing uses the location information to determine safe search behavior. Although
   * optional, you are encouraged to always specify this header and the X-Search-Location header.
   * Do not obfuscate the address (for example, by changing the last octet to 0). Obfuscating the
   * address results in the location not being anywhere near the device's actual location, which
   * may result in Bing serving erroneous results.
   */
  clientIp?: string;
  /**
   * A semicolon-delimited list of key/value pairs that describe the client's geographical
   * location. Bing uses the location information to determine safe search behavior and to return
   * relevant local content. Specify the key/value pair as <key>:<value>. The following are the
   * keys that you use to specify the user's location. lat (required): The latitude of the client's
   * location, in degrees. The latitude must be greater than or equal to -90.0 and less than or
   * equal to +90.0. Negative values indicate southern latitudes and positive values indicate
   * northern latitudes. long (required): The longitude of the client's location, in degrees. The
   * longitude must be greater than or equal to -180.0 and less than or equal to +180.0. Negative
   * values indicate western longitudes and positive values indicate eastern longitudes. re
   * (required): The radius, in meters, which specifies the horizontal accuracy of the coordinates.
   * Pass the value returned by the device's location service. Typical values might be 22m for
   * GPS/Wi-Fi, 380m for cell tower triangulation, and 18,000m for reverse IP lookup. ts
   * (optional): The UTC UNIX timestamp of when the client was at the location. (The UNIX timestamp
   * is the number of seconds since January 1, 1970.) head (optional): The client's relative
   * heading or direction of travel. Specify the direction of travel as degrees from 0 through 360,
   * counting clockwise relative to true north. Specify this key only if the sp key is nonzero. sp
   * (optional): The horizontal velocity (speed), in meters per second, that the client device is
   * traveling. alt (optional): The altitude of the client device, in meters. are (optional): The
   * radius, in meters, that specifies the vertical accuracy of the coordinates. Specify this key
   * only if you specify the alt key. Although many of the keys are optional, the more information
   * that you provide, the more accurate the location results are. Although optional, you are
   * encouraged to always specify the user's geographical location. Providing the location is
   * especially important if the client's IP address does not accurately reflect the user's
   * physical location (for example, if the client uses VPN). For optimal results, you should
   * include this header and the X-MSEdge-ClientIP header, but at a minimum, you should include
   * this header.
   */
  location?: string;
  /**
   * Filter images by the following aspect ratios. All: Do not filter by aspect.Specifying this
   * value is the same as not specifying the aspect parameter. Square: Return images with standard
   * aspect ratio. Wide: Return images with wide screen aspect ratio. Tall: Return images with tall
   * aspect ratio. Possible values include: 'All', 'Square', 'Wide', 'Tall'
   */
  aspect?: ImageAspect;
  /**
   * Filter images by the following color options. ColorOnly: Return color images. Monochrome:
   * Return black and white images. Return images with one of the following dominant colors: Black,
   * Blue, Brown, Gray, Green, Orange, Pink, Purple, Red, Teal, White, Yellow. Possible values
   * include: 'ColorOnly', 'Monochrome', 'Black', 'Blue', 'Brown', 'Gray', 'Green', 'Orange',
   * 'Pink', 'Purple', 'Red', 'Teal', 'White', 'Yellow'
   */
  color?: ImageColor;
  /**
   * A 2-character country code of the country where the results come from. For a list of possible
   * values, see [Market
   * Codes](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#market-codes).
   * If you set this parameter, you must also specify the
   * [Accept-Language](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#acceptlanguage)
   * header. Bing uses the first supported language it finds from the languages list, and combine
   * that language with the country code that you specify to determine the market to return results
   * for. If the languages list does not include a supported language, Bing finds the closest
   * language and market that supports the request, or it may use an aggregated or default market
   * for the results instead of a specified one. You should use this query parameter and the
   * Accept-Language query parameter only if you specify multiple languages; otherwise, you should
   * use the mkt and setLang query parameters. This parameter and the
   * [mkt](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#mkt)
   * query parameter are mutually exclusive—do not specify both.
   */
  countryCode?: string;
  /**
   * The number of images to return in the response. The actual number delivered may be less than
   * requested. The default is 35. The maximum value is 150. You use this parameter along with the
   * offset parameter to page results.For example, if your user interface displays 20 images per
   * page, set count to 20 and offset to 0 to get the first page of results.For each subsequent
   * page, increment offset by 20 (for example, 0, 20, 40). Use this parameter only with the Image
   * Search API.Do not specify this parameter when calling the Insights, Trending Images, or Web
   * Search APIs.
   */
  count?: number;
  /**
   * Filter images by the following discovery options. Day: Return images discovered by Bing within
   * the last 24 hours. Week: Return images discovered by Bing within the last 7 days. Month:
   * Return images discovered by Bing within the last 30 days. Possible values include: 'Day',
   * 'Week', 'Month'
   */
  freshness?: Freshness;
  /**
   * Filter images that have the specified height, in pixels. You may use this filter with the size
   * filter to return small images that have a height of 150 pixels.
   */
  height?: number;
  /**
   * An ID that uniquely identifies an image. Use this parameter to ensure that the specified image
   * is the first image in the list of images that Bing returns. The
   * [Image](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#image)
   * object's imageId field contains the ID that you set this parameter to.
   */
  id?: string;
  /**
   * Filter images by the following content types. Face: Return images that show only a person's
   * face. Portrait: Return images that show only a person's head and shoulders. Possible values
   * include: 'Face', 'Portrait'
   */
  imageContent?: ImageContent;
  /**
   * Filter images by the following image types. AnimatedGif: Return only animated GIFs. Clipart:
   * Return only clip art images. Line: Return only line drawings. Photo: Return only
   * photographs(excluding line drawings, animated Gifs, and clip art). Shopping: Return only
   * images that contain items where Bing knows of a merchant that is selling the items. This
   * option is valid in the en - US market only.Transparent: Return only images with a transparent
   * background. Possible values include: 'AnimatedGif', 'Clipart', 'Line', 'Photo', 'Shopping',
   * 'Transparent'
   */
  imageType?: ImageType;
  /**
   * Filter images by the following license types. All: Do not filter by license type.Specifying
   * this value is the same as not specifying the license parameter. Any: Return images that are
   * under any license type. The response doesn't include images that do not specify a license or
   * the license is unknown. Public: Return images where the creator has waived their exclusive
   * rights, to the fullest extent allowed by law. Share: Return images that may be shared with
   * others. Changing or editing the image might not be allowed. Also, modifying, sharing, and
   * using the image for commercial purposes might not be allowed. Typically, this option returns
   * the most images. ShareCommercially: Return images that may be shared with others for personal
   * or commercial purposes. Changing or editing the image might not be allowed. Modify: Return
   * images that may be modified, shared, and used. Changing or editing the image might not be
   * allowed. Modifying, sharing, and using the image for commercial purposes might not be allowed.
   * ModifyCommercially: Return images that may be modified, shared, and used for personal or
   * commercial purposes. Typically, this option returns the fewest images. For more information
   * about these license types, see [Filter Images By License
   * Type](http://go.microsoft.com/fwlink/?LinkId=309768). Possible values include: 'All', 'Any',
   * 'Public', 'Share', 'ShareCommercially', 'Modify', 'ModifyCommercially'
   */
  license?: ImageLicense;
  /**
   * The market where the results come from. Typically, mkt is the country where the user is making
   * the request from. However, it could be a different country if the user is not located in a
   * country where Bing delivers results. The market must be in the form <language code>-<country
   * code>. For example, en-US. The string is case insensitive. For a list of possible market
   * values, see [Market
   * Codes](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#market-codes).
   * NOTE: If known, you are encouraged to always specify the market. Specifying the market helps
   * Bing route the request and return an appropriate and optimal response. If you specify a market
   * that is not listed in [Market
   * Codes](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#market-codes),
   * Bing uses a best fit market code based on an internal mapping that is subject to change. This
   * parameter and the
   * [cc](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#cc)
   * query parameter are mutually exclusive—do not specify both.
   */
  market?: string;
  /**
   * Filter images that are less than or equal to the specified file size. The maximum file size
   * that you may specify is 520,192 bytes. If you specify a larger value, the API uses 520,192. It
   * is possible that the response may include images that are slightly larger than the specified
   * maximum. You may specify this filter and minFileSize to filter images within a range of file
   * sizes.
   */
  maxFileSize?: number;
  /**
   * Filter images that have a height that is less than or equal to the specified height. Specify
   * the height in pixels. You may specify this filter and minHeight to filter images within a
   * range of heights. This filter and the height filter are mutually exclusive.
   */
  maxHeight?: number;
  /**
   * Filter images that have a width that is less than or equal to the specified width. Specify the
   * width in pixels. You may specify this filter and maxWidth to filter images within a range of
   * widths. This filter and the width filter are mutually exclusive.
   */
  maxWidth?: number;
  /**
   * Filter images that are greater than or equal to the specified file size. The maximum file size
   * that you may specify is 520,192 bytes. If you specify a larger value, the API uses 520,192. It
   * is possible that the response may include images that are slightly smaller than the specified
   * minimum. You may specify this filter and maxFileSize to filter images within a range of file
   * sizes.
   */
  minFileSize?: number;
  /**
   * Filter images that have a height that is greater than or equal to the specified height.
   * Specify the height in pixels. You may specify this filter and maxHeight to filter images
   * within a range of heights. This filter and the height filter are mutually exclusive.
   */
  minHeight?: number;
  /**
   * Filter images that have a width that is greater than or equal to the specified width. Specify
   * the width in pixels. You may specify this filter and maxWidth to filter images within a range
   * of widths. This filter and the width filter are mutually exclusive.
   */
  minWidth?: number;
  /**
   * The zero-based offset that indicates the number of images to skip before returning images. The
   * default is 0. The offset should be less than
   * ([totalEstimatedMatches](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#totalestimatedmatches)
   * - count). Use this parameter along with the count parameter to page results. For example, if
   * your user interface displays 20 images per page, set count to 20 and offset to 0 to get the
   * first page of results. For each subsequent page, increment offset by 20 (for example, 0, 20,
   * 40). It is possible for multiple pages to include some overlap in results. To prevent
   * duplicates, see
   * [nextOffset](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#nextoffset).
   * Use this parameter only with the Image API. Do not specify this parameter when calling the
   * Trending Images API or the Web Search API.
   */
  offset?: number;
  /**
   * Filter images for adult content. The following are the possible filter values. Off: May return
   * images with adult content. If the request is through the Image Search API, the response
   * includes thumbnail images that are clear (non-fuzzy). However, if the request is through the
   * Web Search API, the response includes thumbnail images that are pixelated (fuzzy). Moderate:
   * If the request is through the Image Search API, the response doesn't include images with adult
   * content. If the request is through the Web Search API, the response may include images with
   * adult content (the thumbnail images are pixelated (fuzzy)). Strict: Do not return images with
   * adult content. The default is Moderate. If the request comes from a market that Bing's adult
   * policy requires that safeSearch is set to Strict, Bing ignores the safeSearch value and uses
   * Strict. If you use the site: query operator, there is the chance that the response may contain
   * adult content regardless of what the safeSearch query parameter is set to. Use site: only if
   * you are aware of the content on the site and your scenario supports the possibility of adult
   * content. Possible values include: 'Off', 'Moderate', 'Strict'
   */
  safeSearch?: SafeSearch;
  /**
   * Filter images by the following sizes. All: Do not filter by size. Specifying this value is the
   * same as not specifying the size parameter. Small: Return images that are less than 200x200
   * pixels. Medium: Return images that are greater than or equal to 200x200 pixels but less than
   * 500x500 pixels. Large: Return images that are 500x500 pixels or larger. Wallpaper: Return
   * wallpaper images. You may use this parameter along with the height or width parameters. For
   * example, you may use height and size to request small images that are 150 pixels tall.
   * Possible values include: 'All', 'Small', 'Medium', 'Large', 'Wallpaper'
   */
  size?: ImageSize;
  /**
   * The language to use for user interface strings. Specify the language using the ISO 639-1
   * 2-letter language code. For example, the language code for English is EN. The default is EN
   * (English). Although optional, you should always specify the language. Typically, you set
   * setLang to the same language specified by mkt unless the user wants the user interface strings
   * displayed in a different language. This parameter and the
   * [Accept-Language](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#acceptlanguage)
   * header are mutually exclusive; do not specify both. A user interface string is a string that's
   * used as a label in a user interface. There are few user interface strings in the JSON response
   * objects. Also, any links to Bing.com properties in the response objects apply the specified
   * language.
   */
  setLang?: string;
  /**
   * Filter images that have the specified width, in pixels. You may use this filter with the size
   * filter to return small images that have a width of 150 pixels.
   */
  width?: number;
}

/**
 * Optional Parameters.
 */
export interface ImagesDetailsOptionalParams extends msRest.RequestOptionsBase {
  /**
   * A comma-delimited list of one or more languages to use for user interface strings. The list is
   * in decreasing order of preference. For additional information, including expected format, see
   * [RFC2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html). This header and the
   * [setLang](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#setlang)
   * query parameter are mutually exclusive; do not specify both. If you set this header, you must
   * also specify the
   * [cc](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#cc)
   * query parameter. To determine the market to return results for, Bing uses the first supported
   * language it finds from the list and combines it with the cc parameter value. If the list does
   * not include a supported language, Bing finds the closest language and market that supports the
   * request or it uses an aggregated or default market for the results. To determine the market
   * that Bing used, see the BingAPIs-Market header. Use this header and the cc query parameter
   * only if you specify multiple languages. Otherwise, use the
   * [mkt](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#mkt)
   * and
   * [setLang](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#setlang)
   * query parameters. A user interface string is a string that's used as a label in a user
   * interface. There are few user interface strings in the JSON response objects. Any links to
   * Bing.com properties in the response objects apply the specified language.
   */
  acceptLanguage?: string;
  /**
   * Optional request header. If you set the
   * [modules](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#modulesrequested)
   * query parameter to RecognizedEntities, you may specify the binary of an image in the body of a
   * POST request. If you specify the image in the body of a POST request, you must specify this
   * header and set its value to multipart/form-data. The maximum image size is 1 MB.
   */
  contentType?: string;
  /**
   * The user agent originating the request. Bing uses the user agent to provide mobile users with
   * an optimized experience. Although optional, you are encouraged to always specify this header.
   * The user-agent should be the same string that any commonly used browser sends. For information
   * about user agents, see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html). The
   * following are examples of user-agent strings. Windows Phone: Mozilla/5.0 (compatible; MSIE
   * 10.0; Windows Phone 8.0; Trident/6.0; IEMobile/10.0; ARM; Touch; NOKIA; Lumia 822). Android:
   * Mozilla / 5.0 (Linux; U; Android 2.3.5; en - us; SCH - I500 Build / GINGERBREAD) AppleWebKit /
   * 533.1 (KHTML; like Gecko) Version / 4.0 Mobile Safari / 533.1. iPhone: Mozilla / 5.0 (iPhone;
   * CPU iPhone OS 6_1 like Mac OS X) AppleWebKit / 536.26 (KHTML; like Gecko) Mobile / 10B142
   * iPhone4; 1 BingWeb / 3.03.1428.20120423. PC: Mozilla / 5.0 (Windows NT 6.3; WOW64; Trident /
   * 7.0; Touch; rv:11.0) like Gecko. iPad: Mozilla / 5.0 (iPad; CPU OS 7_0 like Mac OS X)
   * AppleWebKit / 537.51.1 (KHTML, like Gecko) Version / 7.0 Mobile / 11A465 Safari / 9537.53
   */
  userAgent?: string;
  /**
   * Bing uses this header to provide users with consistent behavior across Bing API calls. Bing
   * often flights new features and improvements, and it uses the client ID as a key for assigning
   * traffic on different flights. If you do not use the same client ID for a user across multiple
   * requests, then Bing may assign the user to multiple conflicting flights. Being assigned to
   * multiple conflicting flights can lead to an inconsistent user experience. For example, if the
   * second request has a different flight assignment than the first, the experience may be
   * unexpected. Also, Bing can use the client ID to tailor web results to that client ID’s search
   * history, providing a richer experience for the user. Bing also uses this header to help
   * improve result rankings by analyzing the activity generated by a client ID. The relevance
   * improvements help with better quality of results delivered by Bing APIs and in turn enables
   * higher click-through rates for the API consumer. IMPORTANT: Although optional, you should
   * consider this header required. Persisting the client ID across multiple requests for the same
   * end user and device combination enables 1) the API consumer to receive a consistent user
   * experience, and 2) higher click-through rates via better quality of results from the Bing
   * APIs. Each user that uses your application on the device must have a unique, Bing generated
   * client ID. If you do not include this header in the request, Bing generates an ID and returns
   * it in the X-MSEdge-ClientID response header. The only time that you should NOT include this
   * header in a request is the first time the user uses your app on that device. Use the client ID
   * for each Bing API request that your app makes for this user on the device. Persist the client
   * ID. To persist the ID in a browser app, use a persistent HTTP cookie to ensure the ID is used
   * across all sessions. Do not use a session cookie. For other apps such as mobile apps, use the
   * device's persistent storage to persist the ID. The next time the user uses your app on that
   * device, get the client ID that you persisted. Bing responses may or may not include this
   * header. If the response includes this header, capture the client ID and use it for all
   * subsequent Bing requests for the user on that device. If you include the X-MSEdge-ClientID,
   * you must not include cookies in the request.
   */
  clientId?: string;
  /**
   * The IPv4 or IPv6 address of the client device. The IP address is used to discover the user's
   * location. Bing uses the location information to determine safe search behavior. Although
   * optional, you are encouraged to always specify this header and the X-Search-Location header.
   * Do not obfuscate the address (for example, by changing the last octet to 0). Obfuscating the
   * address results in the location not being anywhere near the device's actual location, which
   * may result in Bing serving erroneous results.
   */
  clientIp?: string;
  /**
   * A semicolon-delimited list of key/value pairs that describe the client's geographical
   * location. Bing uses the location information to determine safe search behavior and to return
   * relevant local content. Specify the key/value pair as <key>:<value>. The following are the
   * keys that you use to specify the user's location. lat (required): The latitude of the client's
   * location, in degrees. The latitude must be greater than or equal to -90.0 and less than or
   * equal to +90.0. Negative values indicate southern latitudes and positive values indicate
   * northern latitudes. long (required): The longitude of the client's location, in degrees. The
   * longitude must be greater than or equal to -180.0 and less than or equal to +180.0. Negative
   * values indicate western longitudes and positive values indicate eastern longitudes. re
   * (required): The radius, in meters, which specifies the horizontal accuracy of the coordinates.
   * Pass the value returned by the device's location service. Typical values might be 22m for
   * GPS/Wi-Fi, 380m for cell tower triangulation, and 18,000m for reverse IP lookup. ts
   * (optional): The UTC UNIX timestamp of when the client was at the location. (The UNIX timestamp
   * is the number of seconds since January 1, 1970.) head (optional): The client's relative
   * heading or direction of travel. Specify the direction of travel as degrees from 0 through 360,
   * counting clockwise relative to true north. Specify this key only if the sp key is nonzero. sp
   * (optional): The horizontal velocity (speed), in meters per second, that the client device is
   * traveling. alt (optional): The altitude of the client device, in meters. are (optional): The
   * radius, in meters, that specifies the vertical accuracy of the coordinates. Specify this key
   * only if you specify the alt key. Although many of the keys are optional, the more information
   * that you provide, the more accurate the location results are. Although optional, you are
   * encouraged to always specify the user's geographical location. Providing the location is
   * especially important if the client's IP address does not accurately reflect the user's
   * physical location (for example, if the client uses VPN). For optimal results, you should
   * include this header and the X-MSEdge-ClientIP header, but at a minimum, you should include
   * this header.
   */
  location?: string;
  /**
   * The bottom coordinate of the region to crop. The coordinate is a fractional value of the
   * original image's height and is measured from the top, left corner of the image. Specify the
   * coordinate as a value from 0.0 through 1.0. Use this parameter only with the Insights API. Do
   * not specify this parameter when calling the Images, Trending Images, or Web Search APIs.
   */
  cropBottom?: number;
  /**
   * The left coordinate of the region to crop. The coordinate is a fractional value of the
   * original image's height and is measured from the top, left corner of the image. Specify the
   * coordinate as a value from 0.0 through 1.0. Use this parameter only with the Insights API. Do
   * not specify this parameter when calling the Images, Trending Images, or Web Search APIs.
   */
  cropLeft?: number;
  /**
   * The right coordinate of the region to crop. The coordinate is a fractional value of the
   * original image's height and is measured from the top, left corner of the image. Specify the
   * coordinate as a value from 0.0 through 1.0. Use this parameter only with the Insights API. Do
   * not specify this parameter when calling the Images, Trending Images, or Web Search APIs.
   */
  cropRight?: number;
  /**
   * The top coordinate of the region to crop. The coordinate is a fractional value of the original
   * image's height and is measured from the top, left corner of the image. Specify the coordinate
   * as a value from 0.0 through 1.0. Use this parameter only with the Insights API. Do not specify
   * this parameter when calling the Images, Trending Images, or Web Search APIs.
   */
  cropTop?: number;
  /**
   * The crop type to use when cropping the image based on the coordinates specified in the cal,
   * cat, car, and cab parameters. The following are the possible values. 0: Rectangular (default).
   * Use this parameter only with the Insights API. Do not specify this parameter when calling the
   * Images, Trending Images, or Web Search APIs. Possible values include: 'Rectangular'
   */
  cropType?: ImageCropType;
  /**
   * A 2-character country code of the country where the results come from. For a list of possible
   * values, see [Market
   * Codes](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#market-codes).
   * If you set this parameter, you must also specify the
   * [Accept-Language](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#acceptlanguage)
   * header. Bing uses the first supported language it finds from the languages list, and combine
   * that language with the country code that you specify to determine the market to return results
   * for. If the languages list does not include a supported language, Bing finds the closest
   * language and market that supports the request, or it may use an aggregated or default market
   * for the results instead of a specified one. You should use this query parameter and the
   * Accept-Language query parameter only if you specify multiple languages; otherwise, you should
   * use the mkt and setLang query parameters. This parameter and the
   * [mkt](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#mkt)
   * query parameter are mutually exclusive—do not specify both.
   */
  countryCode?: string;
  /**
   * An ID that uniquely identifies an image. Use this parameter to ensure that the specified image
   * is the first image in the list of images that Bing returns. The
   * [Image](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#image)
   * object's imageId field contains the ID that you set this parameter to.
   */
  id?: string;
  /**
   * The URL of an image that you want to get insights of. Use this parameter as an alternative to
   * using the insightsToken parameter to specify the image. You may also specify the image by
   * placing the binary of the image in the body of a POST request. If you use the binary option,
   * see the
   * [Content-Type](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#contenttype)
   * header. The maximum supported image size is 1 MB. Use this parameter only with the Insights
   * API. Do not specify this parameter when calling the Images, Trending Images, or Web Search
   * APIs.
   */
  imageUrl?: string;
  /**
   * An image token. The
   * [Image](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#image)
   * object's
   * [imageInsightsToken](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#image-imageinsightstoken)
   * contains the token. Specify this parameter to get additional information about an image, such
   * as a caption or shopping source. For a list of the additional information about an image that
   * you can get, see the
   * [modules](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#modulesrequested)
   * query parameter. Use this parameter only with the Insights API. Do not specify this parameter
   * when calling the Images, Trending Images, or Web Search APIs.
   */
  insightsToken?: string;
  /**
   * A comma-delimited list of insights to request. The following are the possible case-insensitive
   * values. All: Return all insights, if available, except RecognizedEntities. BRQ: Best
   * representative query. The query term that best describes the image. Caption: A caption that
   * provides information about the image. If the caption contains entities, the response may
   * include links to images of those entities. Collections: A list of related images. Recipes: A
   * list of recipes for cooking the food shown in the images. PagesIncluding: A list of webpages
   * that include the image. RecognizedEntities: A list of entities (people) that were recognized
   * in the image. NOTE: You may not specify this module with any other module. If you specify it
   * with other modules, the response doesn't include recognized entities. RelatedSearches: A list
   * of related searches made by others. ShoppingSources: A list of merchants where you can buy
   * related offerings. SimilarImages: A list of images that are visually similar to the original
   * image. SimilarProducts: A list of images that contain a product that is similar to a product
   * found in the original image. Tags: Provides characteristics of the type of content found in
   * the image. For example, if the image is of a person, the tags might indicate the person's
   * gender and type of clothes they're wearing. If you specify a module and there is no data for
   * the module, the response object doesn't include the related field. For example, if you specify
   * Caption and it does not exist, the response doesn't include the imageCaption field. To include
   * related searches, the request must include the original query string. Although the original
   * query string is not required for similar images or products, you should always include it
   * because it can help improve relevance and the results. Use this parameter only with the
   * Insights API. Do not specify this parameter when calling the Images, Trending Images, or Web
   * Search APIs.
   */
  modules?: ImageInsightModule[];
  /**
   * The market where the results come from. Typically, mkt is the country where the user is making
   * the request from. However, it could be a different country if the user is not located in a
   * country where Bing delivers results. The market must be in the form <language code>-<country
   * code>. For example, en-US. The string is case insensitive. For a list of possible market
   * values, see [Market
   * Codes](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#market-codes).
   * NOTE: If known, you are encouraged to always specify the market. Specifying the market helps
   * Bing route the request and return an appropriate and optimal response. If you specify a market
   * that is not listed in [Market
   * Codes](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#market-codes),
   * Bing uses a best fit market code based on an internal mapping that is subject to change. This
   * parameter and the
   * [cc](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#cc)
   * query parameter are mutually exclusive—do not specify both.
   */
  market?: string;
  /**
   * Filter images for adult content. The following are the possible filter values. Off: May return
   * images with adult content. If the request is through the Image Search API, the response
   * includes thumbnail images that are clear (non-fuzzy). However, if the request is through the
   * Web Search API, the response includes thumbnail images that are pixelated (fuzzy). Moderate:
   * If the request is through the Image Search API, the response doesn't include images with adult
   * content. If the request is through the Web Search API, the response may include images with
   * adult content (the thumbnail images are pixelated (fuzzy)). Strict: Do not return images with
   * adult content. The default is Moderate. If the request comes from a market that Bing's adult
   * policy requires that safeSearch is set to Strict, Bing ignores the safeSearch value and uses
   * Strict. If you use the site: query operator, there is the chance that the response may contain
   * adult content regardless of what the safeSearch query parameter is set to. Use site: only if
   * you are aware of the content on the site and your scenario supports the possibility of adult
   * content. Possible values include: 'Off', 'Moderate', 'Strict'
   */
  safeSearch?: SafeSearch;
  /**
   * The language to use for user interface strings. Specify the language using the ISO 639-1
   * 2-letter language code. For example, the language code for English is EN. The default is EN
   * (English). Although optional, you should always specify the language. Typically, you set
   * setLang to the same language specified by mkt unless the user wants the user interface strings
   * displayed in a different language. This parameter and the
   * [Accept-Language](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#acceptlanguage)
   * header are mutually exclusive; do not specify both. A user interface string is a string that's
   * used as a label in a user interface. There are few user interface strings in the JSON response
   * objects. Also, any links to Bing.com properties in the response objects apply the specified
   * language.
   */
  setLang?: string;
}

/**
 * Optional Parameters.
 */
export interface ImagesTrendingOptionalParams extends msRest.RequestOptionsBase {
  /**
   * A comma-delimited list of one or more languages to use for user interface strings. The list is
   * in decreasing order of preference. For additional information, including expected format, see
   * [RFC2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html). This header and the
   * [setLang](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#setlang)
   * query parameter are mutually exclusive; do not specify both. If you set this header, you must
   * also specify the
   * [cc](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#cc)
   * query parameter. To determine the market to return results for, Bing uses the first supported
   * language it finds from the list and combines it with the cc parameter value. If the list does
   * not include a supported language, Bing finds the closest language and market that supports the
   * request or it uses an aggregated or default market for the results. To determine the market
   * that Bing used, see the BingAPIs-Market header. Use this header and the cc query parameter
   * only if you specify multiple languages. Otherwise, use the
   * [mkt](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#mkt)
   * and
   * [setLang](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#setlang)
   * query parameters. A user interface string is a string that's used as a label in a user
   * interface. There are few user interface strings in the JSON response objects. Any links to
   * Bing.com properties in the response objects apply the specified language.
   */
  acceptLanguage?: string;
  /**
   * The user agent originating the request. Bing uses the user agent to provide mobile users with
   * an optimized experience. Although optional, you are encouraged to always specify this header.
   * The user-agent should be the same string that any commonly used browser sends. For information
   * about user agents, see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html). The
   * following are examples of user-agent strings. Windows Phone: Mozilla/5.0 (compatible; MSIE
   * 10.0; Windows Phone 8.0; Trident/6.0; IEMobile/10.0; ARM; Touch; NOKIA; Lumia 822). Android:
   * Mozilla / 5.0 (Linux; U; Android 2.3.5; en - us; SCH - I500 Build / GINGERBREAD) AppleWebKit /
   * 533.1 (KHTML; like Gecko) Version / 4.0 Mobile Safari / 533.1. iPhone: Mozilla / 5.0 (iPhone;
   * CPU iPhone OS 6_1 like Mac OS X) AppleWebKit / 536.26 (KHTML; like Gecko) Mobile / 10B142
   * iPhone4; 1 BingWeb / 3.03.1428.20120423. PC: Mozilla / 5.0 (Windows NT 6.3; WOW64; Trident /
   * 7.0; Touch; rv:11.0) like Gecko. iPad: Mozilla / 5.0 (iPad; CPU OS 7_0 like Mac OS X)
   * AppleWebKit / 537.51.1 (KHTML, like Gecko) Version / 7.0 Mobile / 11A465 Safari / 9537.53
   */
  userAgent?: string;
  /**
   * Bing uses this header to provide users with consistent behavior across Bing API calls. Bing
   * often flights new features and improvements, and it uses the client ID as a key for assigning
   * traffic on different flights. If you do not use the same client ID for a user across multiple
   * requests, then Bing may assign the user to multiple conflicting flights. Being assigned to
   * multiple conflicting flights can lead to an inconsistent user experience. For example, if the
   * second request has a different flight assignment than the first, the experience may be
   * unexpected. Also, Bing can use the client ID to tailor web results to that client ID’s search
   * history, providing a richer experience for the user. Bing also uses this header to help
   * improve result rankings by analyzing the activity generated by a client ID. The relevance
   * improvements help with better quality of results delivered by Bing APIs and in turn enables
   * higher click-through rates for the API consumer. IMPORTANT: Although optional, you should
   * consider this header required. Persisting the client ID across multiple requests for the same
   * end user and device combination enables 1) the API consumer to receive a consistent user
   * experience, and 2) higher click-through rates via better quality of results from the Bing
   * APIs. Each user that uses your application on the device must have a unique, Bing generated
   * client ID. If you do not include this header in the request, Bing generates an ID and returns
   * it in the X-MSEdge-ClientID response header. The only time that you should NOT include this
   * header in a request is the first time the user uses your app on that device. Use the client ID
   * for each Bing API request that your app makes for this user on the device. Persist the client
   * ID. To persist the ID in a browser app, use a persistent HTTP cookie to ensure the ID is used
   * across all sessions. Do not use a session cookie. For other apps such as mobile apps, use the
   * device's persistent storage to persist the ID. The next time the user uses your app on that
   * device, get the client ID that you persisted. Bing responses may or may not include this
   * header. If the response includes this header, capture the client ID and use it for all
   * subsequent Bing requests for the user on that device. If you include the X-MSEdge-ClientID,
   * you must not include cookies in the request.
   */
  clientId?: string;
  /**
   * The IPv4 or IPv6 address of the client device. The IP address is used to discover the user's
   * location. Bing uses the location information to determine safe search behavior. Although
   * optional, you are encouraged to always specify this header and the X-Search-Location header.
   * Do not obfuscate the address (for example, by changing the last octet to 0). Obfuscating the
   * address results in the location not being anywhere near the device's actual location, which
   * may result in Bing serving erroneous results.
   */
  clientIp?: string;
  /**
   * A semicolon-delimited list of key/value pairs that describe the client's geographical
   * location. Bing uses the location information to determine safe search behavior and to return
   * relevant local content. Specify the key/value pair as <key>:<value>. The following are the
   * keys that you use to specify the user's location. lat (required): The latitude of the client's
   * location, in degrees. The latitude must be greater than or equal to -90.0 and less than or
   * equal to +90.0. Negative values indicate southern latitudes and positive values indicate
   * northern latitudes. long (required): The longitude of the client's location, in degrees. The
   * longitude must be greater than or equal to -180.0 and less than or equal to +180.0. Negative
   * values indicate western longitudes and positive values indicate eastern longitudes. re
   * (required): The radius, in meters, which specifies the horizontal accuracy of the coordinates.
   * Pass the value returned by the device's location service. Typical values might be 22m for
   * GPS/Wi-Fi, 380m for cell tower triangulation, and 18,000m for reverse IP lookup. ts
   * (optional): The UTC UNIX timestamp of when the client was at the location. (The UNIX timestamp
   * is the number of seconds since January 1, 1970.) head (optional): The client's relative
   * heading or direction of travel. Specify the direction of travel as degrees from 0 through 360,
   * counting clockwise relative to true north. Specify this key only if the sp key is nonzero. sp
   * (optional): The horizontal velocity (speed), in meters per second, that the client device is
   * traveling. alt (optional): The altitude of the client device, in meters. are (optional): The
   * radius, in meters, that specifies the vertical accuracy of the coordinates. Specify this key
   * only if you specify the alt key. Although many of the keys are optional, the more information
   * that you provide, the more accurate the location results are. Although optional, you are
   * encouraged to always specify the user's geographical location. Providing the location is
   * especially important if the client's IP address does not accurately reflect the user's
   * physical location (for example, if the client uses VPN). For optimal results, you should
   * include this header and the X-MSEdge-ClientIP header, but at a minimum, you should include
   * this header.
   */
  location?: string;
  /**
   * A 2-character country code of the country where the results come from. This API supports only
   * the United States, Canada, Australia, and China markets. If you specify this query parameter,
   * it must be set to us, ca, au, or cn. If you set this parameter, you must also specify the
   * Accept-Language header. Bing uses the first supported language it finds from the languages
   * list, and combine that language with the country code that you specify to determine the market
   * to return results for. If the languages list does not include a supported language, Bing finds
   * the closest language and market that supports the request, or it may use an aggregated or
   * default market for the results instead of a specified one. You should use this query parameter
   * and the Accept-Language query parameter only if you specify multiple languages; otherwise, you
   * should use the mkt and setLang query parameters. This parameter and the mkt query parameter
   * are mutually exclusive—do not specify both.
   */
  countryCode?: string;
  /**
   * The market where the results come from. Typically, mkt is the country where the user is making
   * the request from. However, it could be a different country if the user is not located in a
   * country where Bing delivers results. The market must be in the form <language code>-<country
   * code>. For example, en-US. The string is case insensitive. For a list of possible market
   * values, see [Market
   * Codes](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#market-codes).
   * NOTE: If known, you are encouraged to always specify the market. Specifying the market helps
   * Bing route the request and return an appropriate and optimal response. If you specify a market
   * that is not listed in [Market
   * Codes](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#market-codes),
   * Bing uses a best fit market code based on an internal mapping that is subject to change. This
   * parameter and the
   * [cc](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#cc)
   * query parameter are mutually exclusive—do not specify both.
   */
  market?: string;
  /**
   * Filter images for adult content. The following are the possible filter values. Off: May return
   * images with adult content. If the request is through the Image Search API, the response
   * includes thumbnail images that are clear (non-fuzzy). However, if the request is through the
   * Web Search API, the response includes thumbnail images that are pixelated (fuzzy). Moderate:
   * If the request is through the Image Search API, the response doesn't include images with adult
   * content. If the request is through the Web Search API, the response may include images with
   * adult content (the thumbnail images are pixelated (fuzzy)). Strict: Do not return images with
   * adult content. The default is Moderate. If the request comes from a market that Bing's adult
   * policy requires that safeSearch is set to Strict, Bing ignores the safeSearch value and uses
   * Strict. If you use the site: query operator, there is the chance that the response may contain
   * adult content regardless of what the safeSearch query parameter is set to. Use site: only if
   * you are aware of the content on the site and your scenario supports the possibility of adult
   * content. Possible values include: 'Off', 'Moderate', 'Strict'
   */
  safeSearch?: SafeSearch;
  /**
   * The language to use for user interface strings. Specify the language using the ISO 639-1
   * 2-letter language code. For example, the language code for English is EN. The default is EN
   * (English). Although optional, you should always specify the language. Typically, you set
   * setLang to the same language specified by mkt unless the user wants the user interface strings
   * displayed in a different language. This parameter and the
   * [Accept-Language](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#acceptlanguage)
   * header are mutually exclusive; do not specify both. A user interface string is a string that's
   * used as a label in a user interface. There are few user interface strings in the JSON response
   * objects. Also, any links to Bing.com properties in the response objects apply the specified
   * language.
   */
  setLang?: string;
}

/**
 * Defines values for Currency.
 * Possible values include: 'USD', 'CAD', 'GBP', 'EUR', 'COP', 'JPY', 'CNY', 'AUD', 'INR', 'AED',
 * 'AFN', 'ALL', 'AMD', 'ANG', 'AOA', 'ARS', 'AWG', 'AZN', 'BAM', 'BBD', 'BDT', 'BGN', 'BHD',
 * 'BIF', 'BMD', 'BND', 'BOB', 'BOV', 'BRL', 'BSD', 'BTN', 'BWP', 'BYR', 'BZD', 'CDF', 'CHE',
 * 'CHF', 'CHW', 'CLF', 'CLP', 'COU', 'CRC', 'CUC', 'CUP', 'CVE', 'CZK', 'DJF', 'DKK', 'DOP',
 * 'DZD', 'EGP', 'ERN', 'ETB', 'FJD', 'FKP', 'GEL', 'GHS', 'GIP', 'GMD', 'GNF', 'GTQ', 'GYD',
 * 'HKD', 'HNL', 'HRK', 'HTG', 'HUF', 'IDR', 'ILS', 'IQD', 'IRR', 'ISK', 'JMD', 'JOD', 'KES',
 * 'KGS', 'KHR', 'KMF', 'KPW', 'KRW', 'KWD', 'KYD', 'KZT', 'LAK', 'LBP', 'LKR', 'LRD', 'LSL',
 * 'LYD', 'MAD', 'MDL', 'MGA', 'MKD', 'MMK', 'MNT', 'MOP', 'MRO', 'MUR', 'MVR', 'MWK', 'MXN',
 * 'MXV', 'MYR', 'MZN', 'NAD', 'NGN', 'NIO', 'NOK', 'NPR', 'NZD', 'OMR', 'PAB', 'PEN', 'PGK',
 * 'PHP', 'PKR', 'PLN', 'PYG', 'QAR', 'RON', 'RSD', 'RUB', 'RWF', 'SAR', 'SBD', 'SCR', 'SDG',
 * 'SEK', 'SGD', 'SHP', 'SLL', 'SOS', 'SRD', 'SSP', 'STD', 'SYP', 'SZL', 'THB', 'TJS', 'TMT',
 * 'TND', 'TOP', 'TRY', 'TTD', 'TWD', 'TZS', 'UAH', 'UGX', 'UYU', 'UZS', 'VEF', 'VND', 'VUV',
 * 'WST', 'XAF', 'XCD', 'XOF', 'XPF', 'YER', 'ZAR', 'ZMW'
 * @readonly
 * @enum {string}
 */
export type Currency = 'USD' | 'CAD' | 'GBP' | 'EUR' | 'COP' | 'JPY' | 'CNY' | 'AUD' | 'INR' | 'AED' | 'AFN' | 'ALL' | 'AMD' | 'ANG' | 'AOA' | 'ARS' | 'AWG' | 'AZN' | 'BAM' | 'BBD' | 'BDT' | 'BGN' | 'BHD' | 'BIF' | 'BMD' | 'BND' | 'BOB' | 'BOV' | 'BRL' | 'BSD' | 'BTN' | 'BWP' | 'BYR' | 'BZD' | 'CDF' | 'CHE' | 'CHF' | 'CHW' | 'CLF' | 'CLP' | 'COU' | 'CRC' | 'CUC' | 'CUP' | 'CVE' | 'CZK' | 'DJF' | 'DKK' | 'DOP' | 'DZD' | 'EGP' | 'ERN' | 'ETB' | 'FJD' | 'FKP' | 'GEL' | 'GHS' | 'GIP' | 'GMD' | 'GNF' | 'GTQ' | 'GYD' | 'HKD' | 'HNL' | 'HRK' | 'HTG' | 'HUF' | 'IDR' | 'ILS' | 'IQD' | 'IRR' | 'ISK' | 'JMD' | 'JOD' | 'KES' | 'KGS' | 'KHR' | 'KMF' | 'KPW' | 'KRW' | 'KWD' | 'KYD' | 'KZT' | 'LAK' | 'LBP' | 'LKR' | 'LRD' | 'LSL' | 'LYD' | 'MAD' | 'MDL' | 'MGA' | 'MKD' | 'MMK' | 'MNT' | 'MOP' | 'MRO' | 'MUR' | 'MVR' | 'MWK' | 'MXN' | 'MXV' | 'MYR' | 'MZN' | 'NAD' | 'NGN' | 'NIO' | 'NOK' | 'NPR' | 'NZD' | 'OMR' | 'PAB' | 'PEN' | 'PGK' | 'PHP' | 'PKR' | 'PLN' | 'PYG' | 'QAR' | 'RON' | 'RSD' | 'RUB' | 'RWF' | 'SAR' | 'SBD' | 'SCR' | 'SDG' | 'SEK' | 'SGD' | 'SHP' | 'SLL' | 'SOS' | 'SRD' | 'SSP' | 'STD' | 'SYP' | 'SZL' | 'THB' | 'TJS' | 'TMT' | 'TND' | 'TOP' | 'TRY' | 'TTD' | 'TWD' | 'TZS' | 'UAH' | 'UGX' | 'UYU' | 'UZS' | 'VEF' | 'VND' | 'VUV' | 'WST' | 'XAF' | 'XCD' | 'XOF' | 'XPF' | 'YER' | 'ZAR' | 'ZMW';

/**
 * Defines values for ItemAvailability.
 * Possible values include: 'Discontinued', 'InStock', 'InStoreOnly', 'LimitedAvailability',
 * 'OnlineOnly', 'OutOfStock', 'PreOrder', 'SoldOut'
 * @readonly
 * @enum {string}
 */
export type ItemAvailability = 'Discontinued' | 'InStock' | 'InStoreOnly' | 'LimitedAvailability' | 'OnlineOnly' | 'OutOfStock' | 'PreOrder' | 'SoldOut';

/**
 * Defines values for ErrorCode.
 * Possible values include: 'None', 'ServerError', 'InvalidRequest', 'RateLimitExceeded',
 * 'InvalidAuthorization', 'InsufficientAuthorization'
 * @readonly
 * @enum {string}
 */
export type ErrorCode = 'None' | 'ServerError' | 'InvalidRequest' | 'RateLimitExceeded' | 'InvalidAuthorization' | 'InsufficientAuthorization';

/**
 * Defines values for ErrorSubCode.
 * Possible values include: 'UnexpectedError', 'ResourceError', 'NotImplemented',
 * 'ParameterMissing', 'ParameterInvalidValue', 'HttpNotAllowed', 'Blocked',
 * 'AuthorizationMissing', 'AuthorizationRedundancy', 'AuthorizationDisabled',
 * 'AuthorizationExpired'
 * @readonly
 * @enum {string}
 */
export type ErrorSubCode = 'UnexpectedError' | 'ResourceError' | 'NotImplemented' | 'ParameterMissing' | 'ParameterInvalidValue' | 'HttpNotAllowed' | 'Blocked' | 'AuthorizationMissing' | 'AuthorizationRedundancy' | 'AuthorizationDisabled' | 'AuthorizationExpired';

/**
 * Defines values for ImageAspect.
 * Possible values include: 'All', 'Square', 'Wide', 'Tall'
 * @readonly
 * @enum {string}
 */
export type ImageAspect = 'All' | 'Square' | 'Wide' | 'Tall';

/**
 * Defines values for ImageColor.
 * Possible values include: 'ColorOnly', 'Monochrome', 'Black', 'Blue', 'Brown', 'Gray', 'Green',
 * 'Orange', 'Pink', 'Purple', 'Red', 'Teal', 'White', 'Yellow'
 * @readonly
 * @enum {string}
 */
export type ImageColor = 'ColorOnly' | 'Monochrome' | 'Black' | 'Blue' | 'Brown' | 'Gray' | 'Green' | 'Orange' | 'Pink' | 'Purple' | 'Red' | 'Teal' | 'White' | 'Yellow';

/**
 * Defines values for Freshness.
 * Possible values include: 'Day', 'Week', 'Month'
 * @readonly
 * @enum {string}
 */
export type Freshness = 'Day' | 'Week' | 'Month';

/**
 * Defines values for ImageContent.
 * Possible values include: 'Face', 'Portrait'
 * @readonly
 * @enum {string}
 */
export type ImageContent = 'Face' | 'Portrait';

/**
 * Defines values for ImageType.
 * Possible values include: 'AnimatedGif', 'Clipart', 'Line', 'Photo', 'Shopping', 'Transparent'
 * @readonly
 * @enum {string}
 */
export type ImageType = 'AnimatedGif' | 'Clipart' | 'Line' | 'Photo' | 'Shopping' | 'Transparent';

/**
 * Defines values for ImageLicense.
 * Possible values include: 'All', 'Any', 'Public', 'Share', 'ShareCommercially', 'Modify',
 * 'ModifyCommercially'
 * @readonly
 * @enum {string}
 */
export type ImageLicense = 'All' | 'Any' | 'Public' | 'Share' | 'ShareCommercially' | 'Modify' | 'ModifyCommercially';

/**
 * Defines values for SafeSearch.
 * Possible values include: 'Off', 'Moderate', 'Strict'
 * @readonly
 * @enum {string}
 */
export type SafeSearch = 'Off' | 'Moderate' | 'Strict';

/**
 * Defines values for ImageSize.
 * Possible values include: 'All', 'Small', 'Medium', 'Large', 'Wallpaper'
 * @readonly
 * @enum {string}
 */
export type ImageSize = 'All' | 'Small' | 'Medium' | 'Large' | 'Wallpaper';

/**
 * Defines values for ImageCropType.
 * Possible values include: 'Rectangular'
 * @readonly
 * @enum {string}
 */
export type ImageCropType = 'Rectangular';

/**
 * Defines values for ImageInsightModule.
 * Possible values include: 'All', 'BRQ', 'Caption', 'Collections', 'Recipes', 'PagesIncluding',
 * 'RecognizedEntities', 'RelatedSearches', 'ShoppingSources', 'SimilarImages', 'SimilarProducts',
 * 'Tags'
 * @readonly
 * @enum {string}
 */
export type ImageInsightModule = 'All' | 'BRQ' | 'Caption' | 'Collections' | 'Recipes' | 'PagesIncluding' | 'RecognizedEntities' | 'RelatedSearches' | 'ShoppingSources' | 'SimilarImages' | 'SimilarProducts' | 'Tags';

/**
 * Contains response data for the search operation.
 */
export type ImagesSearchResponse = Images & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Images;
    };
};

/**
 * Contains response data for the details operation.
 */
export type ImagesDetailsResponse = ImageInsights & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImageInsights;
    };
};

/**
 * Contains response data for the trending operation.
 */
export type ImagesTrendingResponse = TrendingImages & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TrendingImages;
    };
};
