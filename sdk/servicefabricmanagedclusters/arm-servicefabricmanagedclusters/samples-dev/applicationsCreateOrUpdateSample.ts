/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import {
  ApplicationResource,
  ServiceFabricManagedClustersManagementClient,
} from "@azure/arm-servicefabricmanagedclusters";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";

dotenv.config();

/**
 * This sample demonstrates how to Create or update a Service Fabric managed application resource with the specified name.
 *
 * @summary Create or update a Service Fabric managed application resource with the specified name.
 * x-ms-original-file: specification/servicefabricmanagedclusters/resource-manager/Microsoft.ServiceFabric/preview/2024-06-01-preview/examples/ApplicationPutOperation_example_max.json
 */
async function putAnApplicationWithMaximumParameters() {
  const subscriptionId =
    process.env["SERVICEFABRICMANAGEDCLUSTERS_SUBSCRIPTION_ID"] ||
    "00000000-0000-0000-0000-000000000000";
  const resourceGroupName =
    process.env["SERVICEFABRICMANAGEDCLUSTERS_RESOURCE_GROUP"] || "resRg";
  const clusterName = "myCluster";
  const applicationName = "myApp";
  const parameters: ApplicationResource = {
    location: "eastus",
    parameters: { param1: "value1" },
    tags: { a: "b" },
    upgradePolicy: {
      applicationHealthPolicy: {
        considerWarningAsError: true,
        defaultServiceTypeHealthPolicy: {
          maxPercentUnhealthyPartitionsPerService: 0,
          maxPercentUnhealthyReplicasPerPartition: 0,
          maxPercentUnhealthyServices: 0,
        },
        maxPercentUnhealthyDeployedApplications: 0,
        serviceTypeHealthPolicyMap: {
          service1: {
            maxPercentUnhealthyPartitionsPerService: 30,
            maxPercentUnhealthyReplicasPerPartition: 30,
            maxPercentUnhealthyServices: 30,
          },
        },
      },
      forceRestart: false,
      instanceCloseDelayDuration: 600,
      recreateApplication: false,
      rollingUpgradeMonitoringPolicy: {
        failureAction: "Rollback",
        healthCheckRetryTimeout: "00:10:00",
        healthCheckStableDuration: "00:05:00",
        healthCheckWaitDuration: "00:02:00",
        upgradeDomainTimeout: "00:15:00",
        upgradeTimeout: "01:00:00",
      },
      upgradeMode: "UnmonitoredAuto",
      upgradeReplicaSetCheckTimeout: 3600,
    },
    version:
      "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/managedclusters/myCluster/applicationTypes/myAppType/versions/1.0",
  };
  const credential = new DefaultAzureCredential();
  const client = new ServiceFabricManagedClustersManagementClient(
    credential,
    subscriptionId,
  );
  const result = await client.applications.beginCreateOrUpdateAndWait(
    resourceGroupName,
    clusterName,
    applicationName,
    parameters,
  );
  console.log(result);
}

/**
 * This sample demonstrates how to Create or update a Service Fabric managed application resource with the specified name.
 *
 * @summary Create or update a Service Fabric managed application resource with the specified name.
 * x-ms-original-file: specification/servicefabricmanagedclusters/resource-manager/Microsoft.ServiceFabric/preview/2024-06-01-preview/examples/ApplicationPutOperation_example_min.json
 */
async function putAnApplicationWithMinimumParameters() {
  const subscriptionId =
    process.env["SERVICEFABRICMANAGEDCLUSTERS_SUBSCRIPTION_ID"] ||
    "00000000-0000-0000-0000-000000000000";
  const resourceGroupName =
    process.env["SERVICEFABRICMANAGEDCLUSTERS_RESOURCE_GROUP"] || "resRg";
  const clusterName = "myCluster";
  const applicationName = "myApp";
  const parameters: ApplicationResource = {
    location: "eastus",
    version:
      "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/managedclusters/myCluster/applicationTypes/myAppType/versions/1.0",
  };
  const credential = new DefaultAzureCredential();
  const client = new ServiceFabricManagedClustersManagementClient(
    credential,
    subscriptionId,
  );
  const result = await client.applications.beginCreateOrUpdateAndWait(
    resourceGroupName,
    clusterName,
    applicationName,
    parameters,
  );
  console.log(result);
}

async function main() {
  putAnApplicationWithMaximumParameters();
  putAnApplicationWithMinimumParameters();
}

main().catch(console.error);
