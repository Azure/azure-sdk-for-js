/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  ApplicationResource,
  ApplicationsListOptionalParams,
  ApplicationsReadUpgradeOptionalParams,
  ApplicationsReadUpgradeResponse,
  ApplicationsStartRollbackOptionalParams,
  ApplicationsStartRollbackResponse,
  RuntimeResumeApplicationUpgradeParameters,
  ApplicationsResumeUpgradeOptionalParams,
  ApplicationsResumeUpgradeResponse,
  ApplicationsGetOptionalParams,
  ApplicationsGetResponse,
  ApplicationsCreateOrUpdateOptionalParams,
  ApplicationsCreateOrUpdateResponse,
  ApplicationUpdateParameters,
  ApplicationsUpdateOptionalParams,
  ApplicationsUpdateResponse,
  ApplicationsDeleteOptionalParams,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Applications. */
export interface Applications {
  /**
   * Gets all managed application resources created or in the process of being created in the Service
   * Fabric cluster resource.
   * @param resourceGroupName The name of the resource group.
   * @param clusterName The name of the cluster resource.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    clusterName: string,
    options?: ApplicationsListOptionalParams,
  ): PagedAsyncIterableIterator<ApplicationResource>;
  /**
   * Get the status of the latest application upgrade. It will query the cluster to find the status of
   * the latest application upgrade.
   * @param resourceGroupName The name of the resource group.
   * @param clusterName The name of the cluster resource.
   * @param applicationName The name of the application resource.
   * @param options The options parameters.
   */
  beginReadUpgrade(
    resourceGroupName: string,
    clusterName: string,
    applicationName: string,
    options?: ApplicationsReadUpgradeOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ApplicationsReadUpgradeResponse>,
      ApplicationsReadUpgradeResponse
    >
  >;
  /**
   * Get the status of the latest application upgrade. It will query the cluster to find the status of
   * the latest application upgrade.
   * @param resourceGroupName The name of the resource group.
   * @param clusterName The name of the cluster resource.
   * @param applicationName The name of the application resource.
   * @param options The options parameters.
   */
  beginReadUpgradeAndWait(
    resourceGroupName: string,
    clusterName: string,
    applicationName: string,
    options?: ApplicationsReadUpgradeOptionalParams,
  ): Promise<ApplicationsReadUpgradeResponse>;
  /**
   * Send a request to start a rollback of the current application upgrade. This will start rolling back
   * the application to the previous version.
   * @param resourceGroupName The name of the resource group.
   * @param clusterName The name of the cluster resource.
   * @param applicationName The name of the application resource.
   * @param options The options parameters.
   */
  beginStartRollback(
    resourceGroupName: string,
    clusterName: string,
    applicationName: string,
    options?: ApplicationsStartRollbackOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ApplicationsStartRollbackResponse>,
      ApplicationsStartRollbackResponse
    >
  >;
  /**
   * Send a request to start a rollback of the current application upgrade. This will start rolling back
   * the application to the previous version.
   * @param resourceGroupName The name of the resource group.
   * @param clusterName The name of the cluster resource.
   * @param applicationName The name of the application resource.
   * @param options The options parameters.
   */
  beginStartRollbackAndWait(
    resourceGroupName: string,
    clusterName: string,
    applicationName: string,
    options?: ApplicationsStartRollbackOptionalParams,
  ): Promise<ApplicationsStartRollbackResponse>;
  /**
   * Send a request to resume the current application upgrade. This will resume the application upgrade
   * from where it was paused.
   * @param resourceGroupName The name of the resource group.
   * @param clusterName The name of the cluster resource.
   * @param applicationName The name of the application resource.
   * @param parameters The parameters for resuming an application upgrade.
   * @param options The options parameters.
   */
  beginResumeUpgrade(
    resourceGroupName: string,
    clusterName: string,
    applicationName: string,
    parameters: RuntimeResumeApplicationUpgradeParameters,
    options?: ApplicationsResumeUpgradeOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ApplicationsResumeUpgradeResponse>,
      ApplicationsResumeUpgradeResponse
    >
  >;
  /**
   * Send a request to resume the current application upgrade. This will resume the application upgrade
   * from where it was paused.
   * @param resourceGroupName The name of the resource group.
   * @param clusterName The name of the cluster resource.
   * @param applicationName The name of the application resource.
   * @param parameters The parameters for resuming an application upgrade.
   * @param options The options parameters.
   */
  beginResumeUpgradeAndWait(
    resourceGroupName: string,
    clusterName: string,
    applicationName: string,
    parameters: RuntimeResumeApplicationUpgradeParameters,
    options?: ApplicationsResumeUpgradeOptionalParams,
  ): Promise<ApplicationsResumeUpgradeResponse>;
  /**
   * Get a Service Fabric managed application resource created or in the process of being created in the
   * Service Fabric cluster resource.
   * @param resourceGroupName The name of the resource group.
   * @param clusterName The name of the cluster resource.
   * @param applicationName The name of the application resource.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    clusterName: string,
    applicationName: string,
    options?: ApplicationsGetOptionalParams,
  ): Promise<ApplicationsGetResponse>;
  /**
   * Create or update a Service Fabric managed application resource with the specified name.
   * @param resourceGroupName The name of the resource group.
   * @param clusterName The name of the cluster resource.
   * @param applicationName The name of the application resource.
   * @param parameters The application resource.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    clusterName: string,
    applicationName: string,
    parameters: ApplicationResource,
    options?: ApplicationsCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ApplicationsCreateOrUpdateResponse>,
      ApplicationsCreateOrUpdateResponse
    >
  >;
  /**
   * Create or update a Service Fabric managed application resource with the specified name.
   * @param resourceGroupName The name of the resource group.
   * @param clusterName The name of the cluster resource.
   * @param applicationName The name of the application resource.
   * @param parameters The application resource.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    clusterName: string,
    applicationName: string,
    parameters: ApplicationResource,
    options?: ApplicationsCreateOrUpdateOptionalParams,
  ): Promise<ApplicationsCreateOrUpdateResponse>;
  /**
   * Updates the tags of an application resource of a given managed cluster.
   * @param resourceGroupName The name of the resource group.
   * @param clusterName The name of the cluster resource.
   * @param applicationName The name of the application resource.
   * @param parameters The application resource updated tags.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    clusterName: string,
    applicationName: string,
    parameters: ApplicationUpdateParameters,
    options?: ApplicationsUpdateOptionalParams,
  ): Promise<ApplicationsUpdateResponse>;
  /**
   * Delete a Service Fabric managed application resource with the specified name.
   * @param resourceGroupName The name of the resource group.
   * @param clusterName The name of the cluster resource.
   * @param applicationName The name of the application resource.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    clusterName: string,
    applicationName: string,
    options?: ApplicationsDeleteOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Delete a Service Fabric managed application resource with the specified name.
   * @param resourceGroupName The name of the resource group.
   * @param clusterName The name of the cluster resource.
   * @param applicationName The name of the application resource.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    clusterName: string,
    applicationName: string,
    options?: ApplicationsDeleteOptionalParams,
  ): Promise<void>;
}
