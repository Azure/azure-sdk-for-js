/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export type PartitionUnion =
  | Partition
  | NamedPartitionScheme
  | SingletonPartitionScheme
  | UniformInt64RangePartitionScheme;
export type ServicePlacementPolicyUnion =
  | ServicePlacementPolicy
  | ServicePlacementInvalidDomainPolicy
  | ServicePlacementNonPartiallyPlaceServicePolicy
  | ServicePlacementPreferPrimaryDomainPolicy
  | ServicePlacementRequiredDomainPolicy
  | ServicePlacementRequireDomainDistributionPolicy;
export type ScalingMechanismUnion =
  | ScalingMechanism
  | AddRemoveIncrementalNamedPartitionScalingMechanism
  | PartitionInstanceCountScaleMechanism;
export type ScalingTriggerUnion =
  | ScalingTrigger
  | AveragePartitionLoadScalingTrigger
  | AverageServiceLoadScalingTrigger;
export type ServiceResourcePropertiesUnion =
  | ServiceResourceProperties
  | StatefulServiceProperties
  | StatelessServiceProperties;

/** The resource model definition for proxy-only resource. */
export interface ProxyResource {
  /**
   * Azure resource identifier.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Azure resource name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Azure resource type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Resource location depends on the parent resource. */
  location?: string;
  /** Azure resource tags. */
  tags?: { [propertyName: string]: string };
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: string;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: string;
  /** The timestamp of resource last modification (UTC). */
  lastModifiedAt?: Date;
}

/** The structure of the error. */
export interface ErrorModel {
  /** The error details. */
  error?: ErrorModelError;
}

/** The error details. */
export interface ErrorModelError {
  /** The error code. */
  code?: string;
  /** The error message. */
  message?: string;
}

/** Application type update request */
export interface ApplicationTypeUpdateParameters {
  /** Application type update parameters */
  tags?: { [propertyName: string]: string };
}

/** The list of application type names. */
export interface ApplicationTypeResourceList {
  value?: ApplicationTypeResource[];
  /**
   * URL to get the next set of application type list results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Application type version update request */
export interface ApplicationTypeVersionUpdateParameters {
  /** Application type version update parameters */
  tags?: { [propertyName: string]: string };
}

/** The list of application type version resources for the specified application type name resource. */
export interface ApplicationTypeVersionResourceList {
  value?: ApplicationTypeVersionResource[];
  /**
   * URL to get the next set of application type version list results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Parameters for Resume Upgrade action. The upgrade domain name must be specified. */
export interface RuntimeResumeApplicationUpgradeParameters {
  /** The upgrade domain name. Expected to be the next upgrade domain if the application is upgrading. */
  upgradeDomainName?: string;
}

/** Describes the managed identities for an Azure resource. */
export interface ManagedIdentity {
  /**
   * The principal id of the managed identity. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant id of the managed identity. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** The type of managed identity for the resource. */
  type?: ManagedIdentityType;
  /**
   * The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
   *
   */
  userAssignedIdentities?: { [propertyName: string]: UserAssignedIdentity };
}

export interface UserAssignedIdentity {
  /**
   * The principal id of user assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The client id of user assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clientId?: string;
}

/** Describes the policy for a monitored application upgrade. */
export interface ApplicationUpgradePolicy {
  /**
   * Defines a health policy used to evaluate the health of an application or one of its children entities.
   *
   */
  applicationHealthPolicy?: ApplicationHealthPolicy;
  /** If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data). */
  forceRestart?: boolean;
  /** The policy used for monitoring the application upgrade */
  rollingUpgradeMonitoringPolicy?: RollingUpgradeMonitoringPolicy;
  /** Duration in seconds, to wait before a stateless instance is closed, to allow the active requests to drain gracefully. This would be effective when the instance is closing during the application/cluster upgrade, only for those instances which have a non-zero delay duration configured in the service description. */
  instanceCloseDelayDuration?: number;
  /** The mode used to monitor health during a rolling upgrade. The values are Monitored, and UnmonitoredAuto. */
  upgradeMode?: RollingUpgradeMode;
  /** The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer). */
  upgradeReplicaSetCheckTimeout?: number;
  /** Determines whether the application should be recreated on update. If value=true, the rest of the upgrade policy parameters are not allowed. */
  recreateApplication?: boolean;
}

/**
 * Defines a health policy used to evaluate the health of an application or one of its children entities.
 *
 */
export interface ApplicationHealthPolicy {
  /** Indicates whether warnings are treated with the same severity as errors. */
  considerWarningAsError: boolean;
  /**
   * The maximum allowed percentage of unhealthy deployed applications. Allowed values are Byte values from zero to 100.
   * The percentage represents the maximum tolerated percentage of deployed applications that can be unhealthy before the application is considered in error.
   * This is calculated by dividing the number of unhealthy deployed applications over the number of nodes where the application is currently deployed on in the cluster.
   * The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
   *
   */
  maxPercentUnhealthyDeployedApplications: number;
  /** The health policy used by default to evaluate the health of a service type. */
  defaultServiceTypeHealthPolicy?: ServiceTypeHealthPolicy;
  /** The map with service type health policy per service type name. The map is empty by default. */
  serviceTypeHealthPolicyMap?: {
    [propertyName: string]: ServiceTypeHealthPolicy;
  };
}

/**
 * Represents the health policy used to evaluate the health of services belonging to a service type.
 *
 */
export interface ServiceTypeHealthPolicy {
  /**
   * The maximum allowed percentage of unhealthy services.
   *
   * The percentage represents the maximum tolerated percentage of services that can be unhealthy before the application is considered in error.
   * If the percentage is respected but there is at least one unhealthy service, the health is evaluated as Warning.
   * This is calculated by dividing the number of unhealthy services of the specific service type over the total number of services of the specific service type.
   * The computation rounds up to tolerate one failure on small numbers of services.
   *
   */
  maxPercentUnhealthyServices: number;
  /**
   * The maximum allowed percentage of unhealthy partitions per service.
   *
   * The percentage represents the maximum tolerated percentage of partitions that can be unhealthy before the service is considered in error.
   * If the percentage is respected but there is at least one unhealthy partition, the health is evaluated as Warning.
   * The percentage is calculated by dividing the number of unhealthy partitions over the total number of partitions in the service.
   * The computation rounds up to tolerate one failure on small numbers of partitions.
   *
   */
  maxPercentUnhealthyPartitionsPerService: number;
  /**
   * The maximum allowed percentage of unhealthy replicas per partition.
   *
   * The percentage represents the maximum tolerated percentage of replicas that can be unhealthy before the partition is considered in error.
   * If the percentage is respected but there is at least one unhealthy replica, the health is evaluated as Warning.
   * The percentage is calculated by dividing the number of unhealthy replicas over the total number of replicas in the partition.
   * The computation rounds up to tolerate one failure on small numbers of replicas.
   *
   */
  maxPercentUnhealthyReplicasPerPartition: number;
}

/** The policy used for monitoring the application upgrade */
export interface RollingUpgradeMonitoringPolicy {
  /** The compensating action to perform when a Monitored upgrade encounters monitoring policy or health policy violations. Invalid indicates the failure action is invalid. Rollback specifies that the upgrade will start rolling back automatically. Manual indicates that the upgrade will switch to UnmonitoredManual upgrade mode. */
  failureAction: FailureAction;
  /** The amount of time to wait after completing an upgrade domain before applying health policies. It is interpreted as a string representing an ISO 8601 duration with following format "hh:mm:ss.fff". */
  healthCheckWaitDuration: string;
  /** The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is interpreted as a string representing an ISO 8601 duration with following format "hh:mm:ss.fff". */
  healthCheckStableDuration: string;
  /** The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is interpreted as a string representing an ISO 8601 duration with following format "hh:mm:ss.fff". */
  healthCheckRetryTimeout: string;
  /** The amount of time the overall upgrade has to complete before FailureAction is executed. Cannot be larger than 12 hours. It is interpreted as a string representing an ISO 8601 duration with following format "hh:mm:ss.fff". */
  upgradeTimeout: string;
  /** The amount of time each upgrade domain has to complete before FailureAction is executed. Cannot be larger than 12 hours. It is interpreted as a string representing an ISO 8601 duration with following format "hh:mm:ss.fff". */
  upgradeDomainTimeout: string;
}

export interface ApplicationUserAssignedIdentity {
  /** The friendly name of user assigned identity. */
  name: string;
  /** The principal id of user assigned identity. */
  principalId: string;
}

/** Application update request */
export interface ApplicationUpdateParameters {
  /** Application update parameters */
  tags?: { [propertyName: string]: string };
}

/** The list of application resources. */
export interface ApplicationResourceList {
  value?: ApplicationResource[];
  /**
   * URL to get the next set of application list results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Describes how the service is partitioned. */
export interface Partition {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  partitionScheme: "Named" | "Singleton" | "UniformInt64Range";
}

/** The common service resource properties. */
export interface ServiceResourcePropertiesBase {
  /** The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor == blue)". */
  placementConstraints?: string;
  /** A list that describes the correlation of the service with other services. */
  correlationScheme?: ServiceCorrelation[];
  /** The service load metrics is given as an array of ServiceLoadMetric objects. */
  serviceLoadMetrics?: ServiceLoadMetric[];
  /** A list that describes the correlation of the service with other services. */
  servicePlacementPolicies?: ServicePlacementPolicyUnion[];
  /** Specifies the move cost for the service. */
  defaultMoveCost?: MoveCost;
  /** Scaling policies for this service. */
  scalingPolicies?: ScalingPolicy[];
}

/** Creates a particular correlation between services. */
export interface ServiceCorrelation {
  /** The ServiceCorrelationScheme which describes the relationship between this service and the service specified via ServiceName. */
  scheme: ServiceCorrelationScheme;
  /** The Arm Resource ID of the service that the correlation relationship is established with. */
  serviceName: string;
}

/** Specifies a metric to load balance a service during runtime. */
export interface ServiceLoadMetric {
  /** The name of the metric. If the service chooses to report load during runtime, the load metric name should match the name that is specified in Name exactly. Note that metric names are case sensitive. */
  name: string;
  /** The service load metric relative weight, compared to other metrics configured for this service, as a number. */
  weight?: ServiceLoadMetricWeight;
  /** Used only for Stateful services. The default amount of load, as a number, that this service creates for this metric when it is a Primary replica. */
  primaryDefaultLoad?: number;
  /** Used only for Stateful services. The default amount of load, as a number, that this service creates for this metric when it is a Secondary replica. */
  secondaryDefaultLoad?: number;
  /** Used only for Stateless services. The default amount of load, as a number, that this service creates for this metric. */
  defaultLoad?: number;
}

/** Describes the policy to be used for placement of a Service Fabric service. */
export interface ServicePlacementPolicy {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type:
    | "InvalidDomain"
    | "NonPartiallyPlaceService"
    | "PreferredPrimaryDomain"
    | "RequiredDomain"
    | "RequiredDomainDistribution";
}

/** Specifies a metric to load balance a service during runtime. */
export interface ScalingPolicy {
  /** Specifies the mechanism associated with this scaling policy */
  scalingMechanism: ScalingMechanismUnion;
  /** Specifies the trigger associated with this scaling policy. */
  scalingTrigger: ScalingTriggerUnion;
}

/** Describes the mechanism for performing a scaling operation. */
export interface ScalingMechanism {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "AddRemoveIncrementalNamedPartition" | "ScalePartitionInstanceCount";
}

/** Describes the trigger for performing a scaling operation. */
export interface ScalingTrigger {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "AveragePartitionLoadTrigger" | "AverageServiceLoadTrigger";
}

/** Service update request */
export interface ServiceUpdateParameters {
  /** Service update parameters */
  tags?: { [propertyName: string]: string };
}

/** The list of service resources. */
export interface ServiceResourceList {
  value?: ServiceResource[];
  /**
   * URL to get the next set of service list results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Managed Cluster list results */
export interface ManagedClusterListResult {
  value?: ManagedCluster[];
  /** The URL to use for getting the next set of results. */
  nextLink?: string;
}

/** Describes a load balancing rule. */
export interface LoadBalancingRule {
  /** The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values are between 1 and 65534. */
  frontendPort: number;
  /** The port used for internal connections on the endpoint. Acceptable values are between 1 and 65535. */
  backendPort: number;
  /** The reference to the transport protocol used by the load balancing rule. */
  protocol: Protocol;
  /** The prob port used by the load balancing rule. Acceptable values are between 1 and 65535. */
  probePort?: number;
  /** the reference to the load balancer probe used by the load balancing rule. */
  probeProtocol: ProbeProtocol;
  /** The probe request path. Only supported for HTTP/HTTPS probes. */
  probeRequestPath?: string;
  /** The load distribution policy for this rule. */
  loadDistribution?: string;
}

/** Describes a network security rule. */
export interface NetworkSecurityRule {
  /** Network security rule name. */
  name: string;
  /** Network security rule description. */
  description?: string;
  /** Network protocol this rule applies to. */
  protocol: NsgProtocol;
  /** The CIDR or source IP ranges. */
  sourceAddressPrefixes?: string[];
  /** The destination address prefixes. CIDR or destination IP ranges. */
  destinationAddressPrefixes?: string[];
  /** The source port ranges. */
  sourcePortRanges?: string[];
  /** The destination port ranges. */
  destinationPortRanges?: string[];
  /** The CIDR or source IP range. Asterisk '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used. If this is an ingress rule, specifies where network traffic originates from. */
  sourceAddressPrefix?: string;
  /** The destination address prefix. CIDR or destination IP range. Asterisk '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used. */
  destinationAddressPrefix?: string;
  /** The source port or range. Integer or range between 0 and 65535. Asterisk '*' can also be used to match all ports. */
  sourcePortRange?: string;
  /** he destination port or range. Integer or range between 0 and 65535. Asterisk '*' can also be used to match all ports. */
  destinationPortRange?: string;
  /** The network traffic is allowed or denied. */
  access: Access;
  /** The priority of the rule. The value can be in the range 1000 to 3000. Values outside this range are reserved for Service Fabric ManagerCluster Resource Provider. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule. */
  priority: number;
  /** Network security rule direction. */
  direction: Direction;
}

/** Client certificate definition. */
export interface ClientCertificate {
  /** Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster. */
  isAdmin: boolean;
  /** Certificate thumbprint. */
  thumbprint?: string;
  /** Certificate common name. */
  commonName?: string;
  /** Issuer thumbprint for the certificate. Only used together with CommonName. */
  issuerThumbprint?: string;
}

/** The settings to enable AAD authentication on the cluster. */
export interface AzureActiveDirectory {
  /** Azure active directory tenant id. */
  tenantId?: string;
  /** Azure active directory cluster application id. */
  clusterApplication?: string;
  /** Azure active directory client application id. */
  clientApplication?: string;
}

/** Describes a section in the fabric settings of the cluster. */
export interface SettingsSectionDescription {
  /** The section name of the fabric settings. */
  name: string;
  /** The collection of parameters in the section. */
  parameters: SettingsParameterDescription[];
}

/** Describes a parameter in fabric settings of the cluster. */
export interface SettingsParameterDescription {
  /** The parameter name of fabric setting. */
  name: string;
  /** The parameter value of fabric setting. */
  value: string;
}

/** The policy used to clean up unused versions. When the policy is not specified explicitly, the default unused application versions to keep will be 3. */
export interface ApplicationTypeVersionsCleanupPolicy {
  /** Number of unused versions per application type to keep. */
  maxUnusedVersionsToKeep: number;
}

/** The IP tag associated with the public IP address. */
export interface IpTag {
  /** IP tag type. Example: FirstPartyUsage. */
  ipTagType: string;
  /** IP tag associated with the public IP. Example: SQL, Storage etc. */
  tag: string;
}

/** Describes a Subnet. */
export interface Subnet {
  /** Subnet name. */
  name: string;
  /** Indicates wether to enable Ipv6 or not. If not provided, it will take the same configuration as the cluster. */
  enableIpv6?: boolean;
  /** Enable or Disable apply network policies on private end point in the subnet. */
  privateEndpointNetworkPolicies?: PrivateEndpointNetworkPolicies;
  /** Enable or Disable apply network policies on private link service in the subnet. */
  privateLinkServiceNetworkPolicies?: PrivateLinkServiceNetworkPolicies;
  /** Full resource id for the network security group. */
  networkSecurityGroupId?: string;
}

/** The service endpoint properties. */
export interface ServiceEndpoint {
  /** The type of the endpoint service. */
  service: string;
  /** A list of locations. */
  locations?: string[];
}

/** Describes the policy used when upgrading the cluster. */
export interface ClusterUpgradePolicy {
  /** If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data). */
  forceRestart?: boolean;
  /** The cluster health policy defines a health policy used to evaluate the health of the cluster during a cluster upgrade. */
  healthPolicy?: ClusterHealthPolicy;
  /** The cluster delta health policy defines a health policy used to evaluate the health of the cluster during a cluster upgrade. */
  deltaHealthPolicy?: ClusterUpgradeDeltaHealthPolicy;
  /** The cluster monitoring policy describes the parameters for monitoring an upgrade in Monitored mode. */
  monitoringPolicy?: ClusterMonitoringPolicy;
  /**
   * The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues.
   * When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues.
   * The timeout is reset at the start of each upgrade domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
   * This value must be between 00:00:00 and 49710.06:28:15 (unsigned 32 bit integer for seconds)
   *
   */
  upgradeReplicaSetCheckTimeout?: string;
}

/**
 * Defines a health policy used to evaluate the health of the cluster or of a cluster node.
 *
 */
export interface ClusterHealthPolicy {
  /**
   * The maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of nodes to be unhealthy, this value would be 10.
   *
   * The percentage represents the maximum tolerated percentage of nodes that can be unhealthy before the cluster is considered in error.
   * If the percentage is respected but there is at least one unhealthy node, the health is evaluated as Warning.
   * The percentage is calculated by dividing the number of unhealthy nodes over the total number of nodes in the cluster.
   * The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
   *
   * In large clusters, some nodes will always be down or out for repairs, so this percentage should be configured to tolerate that.
   *
   */
  maxPercentUnhealthyNodes: number;
  /**
   * The maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10.
   *
   * The percentage represents the maximum tolerated percentage of applications that can be unhealthy before the cluster is considered in error.
   * If the percentage is respected but there is at least one unhealthy application, the health is evaluated as Warning.
   * This is calculated by dividing the number of unhealthy applications over the total number of application instances in the cluster, excluding applications of application types that are included in the ApplicationTypeHealthPolicyMap.
   * The computation rounds up to tolerate one failure on small numbers of applications. Default percentage is zero.
   *
   */
  maxPercentUnhealthyApplications: number;
}

/** Describes the delta health policies for the cluster upgrade. */
export interface ClusterUpgradeDeltaHealthPolicy {
  /**
   * The maximum allowed percentage of nodes health degradation allowed during cluster upgrades.
   * The delta is measured between the state of the nodes at the beginning of upgrade and the state of the nodes at the time of the health evaluation.
   * The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits.
   *
   */
  maxPercentDeltaUnhealthyNodes: number;
  /**
   * The maximum allowed percentage of upgrade domain nodes health degradation allowed during cluster upgrades.
   * The delta is measured between the state of the upgrade domain nodes at the beginning of upgrade and the state of the upgrade domain nodes at the time of the health evaluation.
   * The check is performed after every upgrade domain upgrade completion for all completed upgrade domains to make sure the state of the upgrade domains is within tolerated limits.
   *
   */
  maxPercentUpgradeDomainDeltaUnhealthyNodes?: number;
  /**
   * The maximum allowed percentage of applications health degradation allowed during cluster upgrades.
   * The delta is measured between the state of the applications at the beginning of upgrade and the state of the applications at the time of the health evaluation.
   * The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. System services are not included in this.
   * NOTE: This value will overwrite the value specified in properties.UpgradeDescription.HealthPolicy.MaxPercentUnhealthyApplications
   *
   */
  maxPercentDeltaUnhealthyApplications?: number;
}

/** Describes the monitoring policies for the cluster upgrade. */
export interface ClusterMonitoringPolicy {
  /** The length of time to wait after completing an upgrade domain before performing health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format. */
  healthCheckWaitDuration: string;
  /** The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format. */
  healthCheckStableDuration: string;
  /** The amount of time to retry health evaluation when the application or cluster is unhealthy before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format. */
  healthCheckRetryTimeout: string;
  /** The amount of time the overall upgrade has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format. */
  upgradeTimeout: string;
  /** The amount of time each upgrade domain has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format. */
  upgradeDomainTimeout: string;
}

/** Service Fabric managed cluster Sku definition */
export interface Sku {
  /** Sku Name. */
  name: SkuName;
}

/** The resource model definition. */
export interface Resource {
  /**
   * Azure resource identifier.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Azure resource name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Azure resource type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Azure resource location. */
  location: string;
  /** Azure resource tags. */
  tags?: { [propertyName: string]: string };
  /**
   * Azure resource etag.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly etag?: string;
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Managed cluster update request */
export interface ManagedClusterUpdateParameters {
  /** Managed cluster update parameters */
  tags?: { [propertyName: string]: string };
}

/** Describes the result of the request to list Managed VM Sizes for Service Fabric Managed Clusters. */
export interface ManagedAzResiliencyStatus {
  /** List of Managed VM Sizes for Service Fabric Managed Clusters. */
  baseResourceStatus?: ResourceAzStatus[];
  /**
   * URL to get the next set of Managed VM Sizes if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isClusterZoneResilient?: boolean;
}

/** Describes Az Resiliency status of Base resources */
export interface ResourceAzStatus {
  /**
   * VM Size properties.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceName?: string;
  /**
   * VM Size id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceType?: string;
  /**
   * VM Size name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isZoneResilient?: boolean;
  /**
   * Zone resiliency status details for the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: string;
}

/** Describes the maintenance window status of the Service Fabric Managed Cluster. */
export interface ManagedMaintenanceWindowStatus {
  /**
   * If maintenance window is enabled on this cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isWindowEnabled?: boolean;
  /**
   * Indicates if the region is ready to configure maintenance windows.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isRegionReady?: boolean;
  /**
   * If maintenance window is active.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isWindowActive?: boolean;
  /**
   * If updates can be applied.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly canApplyUpdates?: boolean;
  /**
   * Last window update time in UTC.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastWindowStatusUpdateAtUTC?: Date;
  /**
   * Last window start time in UTC.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastWindowStartTimeUTC?: Date;
  /**
   * Last window end time in UTC.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastWindowEndTimeUTC?: Date;
}

/** The result of the Service Fabric runtime versions */
export interface ManagedClusterCodeVersionResult {
  /** The identification of the result */
  id?: string;
  /** The name of the result */
  name?: string;
  /** The result resource type */
  type?: string;
  /** The Service Fabric runtime version of the cluster. */
  clusterCodeVersion?: string;
  /** The date of expiry of support of the version. */
  supportExpiryUtc?: string;
  /** Cluster operating system, the default will be Windows */
  osType?: OsType;
}

/** Describes the result of the request to list Managed VM Sizes for Service Fabric Managed Clusters. */
export interface ManagedVMSizesResult {
  /** List of Managed VM Sizes for Service Fabric Managed Clusters. */
  value?: ManagedVMSize[];
  /**
   * URL to get the next set of Managed VM Sizes if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Describes a VM Sizes. */
export interface ManagedVMSize {
  /**
   * VM Size properties.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly properties?: VMSize;
  /**
   * VM Size id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * VM Size name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * VM Size type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** VM Sizes properties. */
export interface VMSize {
  /**
   * VM Size name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly size?: string;
}

/** Long running operation result. */
export interface LongRunningOperationResult {
  /** The name of the operation. */
  name?: string;
  /** The start time of the operation. */
  startTime?: Date;
  /** The end time of the operation. */
  endTime?: Date;
  /** The completion percentage of the operation. */
  percentComplete?: number;
  /** The status of the operation. */
  status?: string;
  /** The operation error. */
  error?: ErrorModelError;
}

/** Describes the result of the request to list Service Fabric resource provider operations. */
export interface OperationListResult {
  /** List of operations supported by the Service Fabric resource provider. */
  value?: OperationResult[];
  /**
   * URL to get the next set of operation list results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Available operation list result */
export interface OperationResult {
  /** The name of the operation. */
  name?: string;
  /** Indicates whether the operation is a data action */
  isDataAction?: boolean;
  /** The object that represents the operation. */
  display?: AvailableOperationDisplay;
  /** Origin result */
  origin?: string;
  /** The URL to use for getting the next set of results. */
  nextLink?: string;
}

/** Operation supported by the Service Fabric resource provider */
export interface AvailableOperationDisplay {
  /** The name of the provider. */
  provider?: string;
  /** The resource on which the operation is performed */
  resource?: string;
  /** The operation that can be performed. */
  operation?: string;
  /** Operation description */
  description?: string;
}

/** Node type list results */
export interface NodeTypeListResult {
  /** The list of node types. */
  value?: NodeType[];
  /** The URL to use for getting the next set of results. */
  nextLink?: string;
}

/** Port range details */
export interface EndpointRangeDescription {
  /** Starting port of a range of ports */
  startPort: number;
  /** End port of a range of ports */
  endPort: number;
}

/** Specifies set of certificates that should be installed onto the virtual machines. */
export interface VaultSecretGroup {
  /** The relative URL of the Key Vault containing all of the certificates in VaultCertificates. */
  sourceVault: SubResource;
  /** The list of key vault references in SourceVault which contain certificates. */
  vaultCertificates: VaultCertificate[];
}

/** Azure resource identifier. */
export interface SubResource {
  /** Azure resource identifier. */
  id?: string;
}

/** Describes a single certificate reference in a Key Vault, and where the certificate should reside on the VM. */
export interface VaultCertificate {
  /** This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be It is the Base64 encoding of the following JSON Object which is encoded in UTF-8: <br><br> {<br>  "data":"<Base64-encoded-certificate>",<br>  "dataType":"pfx",<br>  "password":"<pfx-file-password>"<br>} */
  certificateUrl: string;
  /** For Windows VMs, specifies the certificate store on the Virtual Machine to which the certificate should be added. The specified certificate store is implicitly in the LocalMachine account. <br><br>For Linux VMs, the certificate file is placed under the /var/lib/waagent directory, with the file name <UppercaseThumbprint>.crt for the X509 certificate file and <UppercaseThumbprint>.prv for private key. Both of these files are .pem formatted. */
  certificateStore: string;
}

/** Specifies set of extensions that should be installed onto the virtual machines. */
export interface VmssExtension {
  /** The name of the extension. */
  name: string;
  /** The name of the extension handler publisher. */
  publisher: string;
  /** Specifies the type of the extension; an example is "CustomScriptExtension". */
  type: string;
  /** Specifies the version of the script handler. */
  typeHandlerVersion: string;
  /** Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true. */
  autoUpgradeMinorVersion?: boolean;
  /** Json formatted public settings for the extension. */
  settings?: Record<string, unknown>;
  /** The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all. */
  protectedSettings?: Record<string, unknown>;
  /** If a value is provided and is different from the previous value, the extension handler will be forced to update even if the extension configuration has not changed. */
  forceUpdateTag?: string;
  /** Collection of extension names after which this extension needs to be provisioned. */
  provisionAfterExtensions?: string[];
  /**
   * The provisioning state, which only appears in the response.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available. */
  enableAutomaticUpgrade?: boolean;
  /** Indicates the setup order for the extension. */
  setupOrder?: VmssExtensionSetupOrder[];
}

/** Identities for the virtual machine scale set under the node type. */
export interface VmManagedIdentity {
  /** The list of user identities associated with the virtual machine scale set under the node type. Each entry will be an ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'. */
  userAssignedIdentities?: string[];
}

/** Describes the frontend configurations for the node type. */
export interface FrontendConfiguration {
  /** The IP address type of this frontend configuration. If omitted the default value is IPv4. */
  ipAddressType?: IPAddressType;
  /** The resource Id of the Load Balancer backend address pool that the VM instances of the node type are associated with. The format of the resource Id is '/subscriptions/<subscriptionId>/resourceGroups/<resourceGroupName>/providers/Microsoft.Network/loadBalancers/<loadBalancerName>/backendAddressPools/<backendAddressPoolName>'. */
  loadBalancerBackendAddressPoolId?: string;
  /** The resource Id of the Load Balancer inbound NAT pool that the VM instances of the node type are associated with. The format of the resource Id is '/subscriptions/<subscriptionId>/resourceGroups/<resourceGroupName>/providers/Microsoft.Network/loadBalancers/<loadBalancerName>/inboundNatPools/<inboundNatPoolName>'. */
  loadBalancerInboundNatPoolId?: string;
  /** The resource Id of application gateway backend address pool. The format of the resource Id is '/subscriptions/<subscriptionId>/resourceGroups/<resourceGroupName>/providers/Microsoft.Network/applicationGateways/<applicationGatewayName>/backendAddressPools/<backendAddressPoolName>'. */
  applicationGatewayBackendAddressPoolId?: string;
}

/** Managed data disk description. */
export interface VmssDataDisk {
  /** Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM. Lun 0 is reserved for the service fabric data disk. */
  lun: number;
  /** Disk size for each vm in the node type in GBs. */
  diskSizeGB: number;
  /** Managed data disk type. Specifies the storage account type for the managed disk */
  diskType: DiskType;
  /** Managed data disk letter. It can not use the reserved letter C or D and it can not change after created. */
  diskLetter: string;
}

/** Provides information about NAT configuration on the default public Load Balancer for the node type. */
export interface NodeTypeNatConfig {
  /** The internal port for the NAT configuration. */
  backendPort?: number;
  /** The port range start for the external endpoint. */
  frontendPortRangeStart?: number;
  /** The port range end for the external endpoint. */
  frontendPortRangeEnd?: number;
}

/** Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use. In the Azure portal, find the marketplace image that you want to use and then click Want to deploy programmatically, Get Started ->. Enter any required information and then click Save. */
export interface VmImagePlan {
  /** The plan ID. */
  name?: string;
  /** Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element. */
  product?: string;
  /** The promotion code. */
  promotionCode?: string;
  /** The publisher ID. */
  publisher?: string;
}

/** Specifies the settings for a network interface to attach to the node type. */
export interface AdditionalNetworkInterfaceConfiguration {
  /** Name of the network interface. */
  name: string;
  /** Specifies whether the network interface is accelerated networking-enabled. */
  enableAcceleratedNetworking?: boolean;
  /** Specifies the DSCP configuration to apply to the network interface. */
  dscpConfiguration?: SubResource;
  /** Specifies the IP configurations of the network interface. */
  ipConfigurations: IpConfiguration[];
}

/** Specifies an IP configuration of the network interface. */
export interface IpConfiguration {
  /** Name of the network interface. */
  name: string;
  /** Specifies an array of references to backend address pools of application gateways. A node type can reference backend address pools of multiple application gateways. Multiple node types cannot use the same application gateway. */
  applicationGatewayBackendAddressPools?: SubResource[];
  /** Specifies an array of references to backend address pools of load balancers. A node type can reference backend address pools of one public and one internal load balancer. Multiple node types cannot use the same basic sku load balancer.	 */
  loadBalancerBackendAddressPools?: SubResource[];
  /** Specifies an array of references to inbound Nat pools of the load balancers. A node type can reference inbound nat pools of one public and one internal load balancer. Multiple node types cannot use the same basic sku load balancer. */
  loadBalancerInboundNatPools?: SubResource[];
  /** Specifies the subnet of the network interface. */
  subnet?: SubResource;
  /** Specifies whether the IP configuration's private IP is IPv4 or IPv6. Default is IPv4. */
  privateIPAddressVersion?: PrivateIPAddressVersion;
  /** The public IP address configuration of the network interface. */
  publicIPAddressConfiguration?: IpConfigurationPublicIPAddressConfiguration;
}

/** The public IP address configuration of the network interface. */
export interface IpConfigurationPublicIPAddressConfiguration {
  /** Name of the network interface. */
  name: string;
  /** Specifies the list of IP tags associated with the public IP address. */
  ipTags?: IpTag[];
  /** Specifies whether the IP configuration's public IP is IPv4 or IPv6. Default is IPv4. */
  publicIPAddressVersion?: PublicIPAddressVersion;
}

/** Specifies the gallery application that should be made available to the underlying VMSS. */
export interface VmApplication {
  /** Optional, Specifies the uri to an azure blob that will replace the default configuration for the package if provided. */
  configurationReference?: string;
  /** If set to true, when a new Gallery Application version is available in PIR/SIG, it will be automatically updated for the underlying VMSS. */
  enableAutomaticUpgrade?: boolean;
  /** Optional, Specifies the order in which the packages have to be installed. */
  order?: number;
  /** Specifies the GalleryApplicationVersion resource id on the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{application}/versions/{version}. */
  packageReferenceId: string;
  /** Optional, Specifies a passthrough value for more generic context. Accepts a JSON-formatted string e.g. '{"Tag1":"Value1","Tag2":"Value2"}'. */
  vmGalleryTags?: string;
  /** Optional, If true, any failure for any operation in the VmApplication will fail the deployment. */
  treatFailureAsDeploymentFailure?: boolean;
}

/** Describes a node type sku. */
export interface NodeTypeSku {
  /** The sku name. <br /><br />Name is internally generated and is used in auto-scale scenarios.<br /> Property does not allow to be changed to other values than generated.<br /> To avoid deployment errors please omit the property. */
  name?: string;
  /** Specifies the tier of the node type. <br /><br /> Possible Values:<br /> **Standard** */
  tier?: string;
  /** The number of nodes in the node type.<br /><br />If present in request it will override properties.vmInstanceCount. */
  capacity: number;
}

/** The resource model definition for proxy-only resource. */
export interface ManagedProxyResource {
  /**
   * Azure resource identifier.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Azure resource name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Azure resource type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Azure resource tags. */
  tags?: { [propertyName: string]: string };
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Parameters for Node type action. If nodes are not specified on the parameters, the operation will be performed in all nodes of the node type one upgrade domain at a time. */
export interface NodeTypeActionParameters {
  /** List of node names from the node type. */
  nodes?: string[];
  /** Force the action to go through. */
  force?: boolean;
  /** Specifies the way the operation will be performed. */
  updateType?: UpdateType;
}

/** Node type available sku list results */
export interface NodeTypeListSkuResult {
  /** The list of available node type SKUs. */
  value?: NodeTypeAvailableSku[];
  /** The URL to use for getting the next set of results. */
  nextLink?: string;
}

/** Defines the type of sku available for a node type */
export interface NodeTypeAvailableSku {
  /**
   * The type of resource the sku applies to.  <br /><br />Value: Microsoft.ServiceFabric/managedClusters/nodeTypes.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceType?: string;
  /**
   * The supported SKU for a for node type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sku?: NodeTypeSupportedSku;
  /**
   * Provides information about how the node count can be scaled.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly capacity?: NodeTypeSkuCapacity;
}

/** Describes a node type supported sku. */
export interface NodeTypeSupportedSku {
  /**
   * The sku name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Specifies the tier of the node type. <br /><br /> Possible Values:<br /> **Standard**
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tier?: string;
}

/** Provides information about how node type can be scaled. */
export interface NodeTypeSkuCapacity {
  /**
   * Lowest permitted node count in a node type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly minimum?: number;
  /**
   * Highest permitted node count in a node type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly maximum?: number;
  /**
   * Default node count in a node type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly default?: number;
  /**
   * Node type capacity scale type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly scaleType?: NodeTypeSkuScaleType;
}

/** Node type update request */
export interface NodeTypeUpdateParameters {
  /** Node type update parameters */
  tags?: { [propertyName: string]: string };
  /** The node type sku. */
  sku?: NodeTypeSku;
}

/** The application type name resource */
export interface ApplicationTypeResource extends ProxyResource {
  /**
   * The current deployment or provisioning state, which only appears in the response.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
}

/** An application type version resource for the specified application type name resource. */
export interface ApplicationTypeVersionResource extends ProxyResource {
  /**
   * The current deployment or provisioning state, which only appears in the response
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** The URL to the application package */
  appPackageUrl?: string;
}

/** The application resource. */
export interface ApplicationResource extends ProxyResource {
  /** Describes the managed identities for an Azure resource. */
  identity?: ManagedIdentity;
  /**
   * The current deployment or provisioning state, which only appears in the response
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The version of the application type as defined in the application manifest.
   * This name must be the full Arm Resource ID for the referenced application type version.
   *
   */
  version?: string;
  /** List of application parameters with overridden values from their default values specified in the application manifest. */
  parameters?: { [propertyName: string]: string };
  /** Describes the policy for a monitored application upgrade. */
  upgradePolicy?: ApplicationUpgradePolicy;
  /** List of user assigned identities for the application, each mapped to a friendly name. */
  managedIdentities?: ApplicationUserAssignedIdentity[];
}

/** The service resource. */
export interface ServiceResource extends ProxyResource {
  /** The service resource properties. */
  properties?: ServiceResourcePropertiesUnion;
}

/** Describes the named partition scheme of the service. */
export interface NamedPartitionScheme extends Partition {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  partitionScheme: "Named";
  /** Array for the names of the partitions. */
  names: string[];
}

/** SingletonPartitionScheme */
export interface SingletonPartitionScheme extends Partition {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  partitionScheme: "Singleton";
}

/** Describes a partitioning scheme where an integer range is allocated evenly across a number of partitions. */
export interface UniformInt64RangePartitionScheme extends Partition {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  partitionScheme: "UniformInt64Range";
  /** The number of partitions. */
  count: number;
  /**
   * The lower bound of the partition key range that
   * should be split between the partition ‘Count’
   *
   */
  lowKey: number;
  /**
   * The upper bound of the partition key range that
   * should be split between the partition ‘Count’
   *
   */
  highKey: number;
}

/** The service resource properties. */
export interface ServiceResourceProperties
  extends ServiceResourcePropertiesBase {
  /**
   * The current deployment or provisioning state, which only appears in the response
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** The kind of service (Stateless or Stateful). */
  serviceKind: ServiceKind;
  /** The name of the service type */
  serviceTypeName: string;
  /** Describes how the service is partitioned. */
  partitionDescription: PartitionUnion;
  /** The activation Mode of the service package */
  servicePackageActivationMode?: ServicePackageActivationMode;
  /**
   * Dns name used for the service. If this is specified, then the DNS name can be used to return the IP addresses of service endpoints for application layer protocols (e.g., HTTP).
   * When updating serviceDnsName, old name may be temporarily resolvable. However, rely on new name.
   * When removing serviceDnsName, removed name may temporarily be resolvable. Do not rely on the name being unresolvable.
   *
   */
  serviceDnsName?: string;
}

/** Describes the policy to be used for placement of a Service Fabric service where a particular fault or upgrade domain should not be used for placement of the instances or replicas of that service. */
export interface ServicePlacementInvalidDomainPolicy
  extends ServicePlacementPolicy {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "InvalidDomain";
  /** The name of the domain that should not be used for placement. */
  domainName: string;
}

/** ServicePlacementNonPartiallyPlaceServicePolicy */
export interface ServicePlacementNonPartiallyPlaceServicePolicy
  extends ServicePlacementPolicy {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "NonPartiallyPlaceService";
}

/**
 * Describes the policy to be used for placement of a Service Fabric service where the service's
 * Primary replicas should optimally be placed in a particular domain.
 *
 * This placement policy is usually used with fault domains in scenarios where the Service Fabric
 * cluster is geographically distributed in order to indicate that a service's primary replica should
 * be located in a particular fault domain, which in geo-distributed scenarios usually aligns with regional
 * or datacenter boundaries. Note that since this is an optimization it is possible that the Primary replica
 * may not end up located in this domain due to failures, capacity limits, or other constraints.
 *
 */
export interface ServicePlacementPreferPrimaryDomainPolicy
  extends ServicePlacementPolicy {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "PreferredPrimaryDomain";
  /** The name of the domain that should used for placement as per this policy. */
  domainName: string;
}

/** Describes the policy to be used for placement of a Service Fabric service where the instances or replicas of that service must be placed in a particular domain. */
export interface ServicePlacementRequiredDomainPolicy
  extends ServicePlacementPolicy {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "RequiredDomain";
  /** The name of the domain that should used for placement as per this policy. */
  domainName: string;
}

/**
 * Describes the policy to be used for placement of a Service Fabric service where two replicas
 * from the same partition should never be placed in the same fault or upgrade domain.
 *
 * While this is not common it can expose the service to an increased risk of concurrent failures
 * due to unplanned outages or other cases of subsequent/concurrent failures. As an example, consider
 * a case where replicas are deployed across different data center, with one replica per location.
 * In the event that one of the datacenters goes offline, normally the replica that was placed in that
 * datacenter will be packed into one of the remaining datacenters. If this is not desirable then this
 * policy should be set.
 *
 */
export interface ServicePlacementRequireDomainDistributionPolicy
  extends ServicePlacementPolicy {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "RequiredDomainDistribution";
  /** The name of the domain that should used for placement as per this policy. */
  domainName: string;
}

/** Represents a scaling mechanism for adding or removing named partitions of a stateless service. Partition names are in the format '0','1'...'N-1'. */
export interface AddRemoveIncrementalNamedPartitionScalingMechanism
  extends ScalingMechanism {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "AddRemoveIncrementalNamedPartition";
  /** Minimum number of named partitions of the service. */
  minPartitionCount: number;
  /** Maximum number of named partitions of the service. */
  maxPartitionCount: number;
  /** The number of instances to add or remove during a scaling operation. */
  scaleIncrement: number;
}

/** Represents a scaling mechanism for adding or removing instances of stateless service partition. */
export interface PartitionInstanceCountScaleMechanism extends ScalingMechanism {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "ScalePartitionInstanceCount";
  /** Minimum number of instances of the partition. */
  minInstanceCount: number;
  /** Maximum number of instances of the partition. */
  maxInstanceCount: number;
  /** The number of instances to add or remove during a scaling operation. */
  scaleIncrement: number;
}

/** Represents a scaling trigger related to an average load of a metric/resource of a partition. */
export interface AveragePartitionLoadScalingTrigger extends ScalingTrigger {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "AveragePartitionLoadTrigger";
  /** The name of the metric for which usage should be tracked. */
  metricName: string;
  /** The lower limit of the load below which a scale in operation should be performed. */
  lowerLoadThreshold: number;
  /** The upper limit of the load beyond which a scale out operation should be performed. */
  upperLoadThreshold: number;
  /** The period in seconds on which a decision is made whether to scale or not. This property should come in ISO 8601 format "hh:mm:ss". */
  scaleInterval: string;
}

/** Represents a scaling policy related to an average load of a metric/resource of a service. */
export interface AverageServiceLoadScalingTrigger extends ScalingTrigger {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "AverageServiceLoadTrigger";
  /** The name of the metric for which usage should be tracked. */
  metricName: string;
  /** The lower limit of the load below which a scale in operation should be performed. */
  lowerLoadThreshold: number;
  /** The upper limit of the load beyond which a scale out operation should be performed. */
  upperLoadThreshold: number;
  /** The period in seconds on which a decision is made whether to scale or not. This property should come in ISO 8601 format "hh:mm:ss". */
  scaleInterval: string;
  /** Flag determines whether only the load of primary replica should be considered for scaling. If set to true, then trigger will only consider the load of primary replicas of stateful service. If set to false, trigger will consider load of all replicas. This parameter cannot be set to true for stateless service. */
  useOnlyPrimaryLoad: boolean;
}

/**
 * The managed cluster resource
 *
 */
export interface ManagedCluster extends Resource {
  /** The sku of the managed cluster */
  sku: Sku;
  /** The cluster dns name. */
  dnsName?: string;
  /**
   * The fully qualified domain name associated with the public load balancer of the cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fqdn?: string;
  /**
   * The IPv4 address associated with the public load balancer of the cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipv4Address?: string;
  /**
   * A service generated unique identifier for the cluster resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clusterId?: string;
  /**
   * The current state of the cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clusterState?: ClusterState;
  /**
   * List of thumbprints of the cluster certificates.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clusterCertificateThumbprints?: string[];
  /** The port used for client connections to the cluster. */
  clientConnectionPort?: number;
  /** The port used for HTTP connections to the cluster. */
  httpGatewayConnectionPort?: number;
  /** VM admin user name. */
  adminUserName?: string;
  /**
   * VM admin user password.
   * This value contains a credential. Consider obscuring before showing to users
   */
  adminPassword?: string;
  /** Load balancing rules that are applied to the public load balancer of the cluster. */
  loadBalancingRules?: LoadBalancingRule[];
  /** Setting this to true enables RDP access to the VM. The default NSG rule opens RDP port to Internet which can be overridden with custom Network Security Rules. The default value for this setting is false. */
  allowRdpAccess?: boolean;
  /** Custom Network Security Rules that are applied to the Virtual Network of the cluster. */
  networkSecurityRules?: NetworkSecurityRule[];
  /** Client certificates that are allowed to manage the cluster. */
  clients?: ClientCertificate[];
  /** The AAD authentication settings of the cluster. */
  azureActiveDirectory?: AzureActiveDirectory;
  /** The list of custom fabric settings to configure the cluster. */
  fabricSettings?: SettingsSectionDescription[];
  /**
   * The provisioning state of the managed cluster resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ManagedResourceProvisioningState;
  /** The Service Fabric runtime version of the cluster. This property is required when **clusterUpgradeMode** is set to 'Manual'. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**. */
  clusterCodeVersion?: string;
  /**
   * The upgrade mode of the cluster when new Service Fabric runtime version is available.
   *
   */
  clusterUpgradeMode?: ClusterUpgradeMode;
  /** Indicates when new cluster runtime version upgrades will be applied after they are released. By default is Wave0. Only applies when **clusterUpgradeMode** is set to 'Automatic'. */
  clusterUpgradeCadence?: ClusterUpgradeCadence;
  /** List of add-on features to enable on the cluster. */
  addonFeatures?: ManagedClusterAddOnFeature[];
  /** Setting this to true enables automatic OS upgrade for the node types that are created using any platform OS image with version 'latest'. The default value for this setting is false. */
  enableAutoOSUpgrade?: boolean;
  /** Indicates if the cluster has zone resiliency. */
  zonalResiliency?: boolean;
  /** The policy used to clean up unused versions. */
  applicationTypeVersionsCleanupPolicy?: ApplicationTypeVersionsCleanupPolicy;
  /** Setting this to true creates IPv6 address space for the default VNet used by the cluster. This setting cannot be changed once the cluster is created. The default value for this setting is false. */
  enableIpv6?: boolean;
  /** If specified, the node types for the cluster are created in this subnet instead of the default VNet. The **networkSecurityRules** specified for the cluster are also applied to this subnet. This setting cannot be changed once the cluster is created. */
  subnetId?: string;
  /** The list of IP tags associated with the default public IP address of the cluster. */
  ipTags?: IpTag[];
  /**
   * IPv6 address for the cluster if IPv6 is enabled.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipv6Address?: string;
  /** Setting this to true will link the IPv4 address as the ServicePublicIP of the IPv6 address. It can only be set to True if IPv6 is enabled on the cluster. */
  enableServicePublicIP?: boolean;
  /** Auxiliary subnets for the cluster. */
  auxiliarySubnets?: Subnet[];
  /** Service endpoints for subnets in the cluster. */
  serviceEndpoints?: ServiceEndpoint[];
  /** Indicates the update mode for Cross Az clusters. */
  zonalUpdateMode?: ZonalUpdateMode;
  /** For new clusters, this parameter indicates that it uses Bring your own VNet, but the subnet is specified at node type level; and for such clusters, the subnetId property is required for node types. */
  useCustomVnet?: boolean;
  /** Specify the resource id of a public IPv4 prefix that the load balancer will allocate a public IPv4 address from. This setting cannot be changed once the cluster is created. */
  publicIPPrefixId?: string;
  /** Specify the resource id of a public IPv6 prefix that the load balancer will allocate a public IPv6 address from. This setting cannot be changed once the cluster is created. */
  publicIPv6PrefixId?: string;
  /** Specify the resource id of a DDoS network protection plan that will be associated with the virtual network of the cluster. */
  ddosProtectionPlanId?: string;
  /** The policy to use when upgrading the cluster. */
  upgradeDescription?: ClusterUpgradePolicy;
  /** The port used for token-auth based HTTPS connections to the cluster. Cannot be set to the same port as HttpGatewayEndpoint. */
  httpGatewayTokenAuthConnectionPort?: number;
  /** If true, token-based authentication is not allowed on the HttpGatewayEndpoint. This is required to support TLS versions 1.3 and above. If token-based authentication is used, HttpGatewayTokenAuthConnectionPort must be defined. */
  enableHttpGatewayExclusiveAuthMode?: boolean;
  /** This property is the entry point to using a public CA cert for your cluster cert. It specifies the level of reuse allowed for the custom FQDN created, matching the subject of the public CA cert. */
  autoGeneratedDomainNameLabelScope?: AutoGeneratedDomainNameLabelScope;
  /** If using autoGeneratedDomainNameLabelScope, this is the fully qualified domain name using SFMC's domain, pointing to the public load balancer of the cluster. */
  customFqdn?: string;
}

/** Describes a node type in the cluster, each node type represents sub set of nodes in the cluster. */
export interface NodeType extends ManagedProxyResource {
  /** The node type sku. */
  sku?: NodeTypeSku;
  /** Indicates the Service Fabric system services for the cluster will run on this node type. This setting cannot be changed once the node type is created. */
  isPrimary?: boolean;
  /** The number of nodes in the node type. <br /><br />**Values:** <br />-1 - Use when auto scale rules are configured or sku.capacity is defined <br /> 0 - Not supported <br /> >0 - Use for manual scale. */
  vmInstanceCount?: number;
  /** Disk size for the managed disk attached to the vms on the node type in GBs. */
  dataDiskSizeGB?: number;
  /** Managed data disk type. Specifies the storage account type for the managed disk */
  dataDiskType?: DiskType;
  /** Managed data disk letter. It can not use the reserved letter C or D and it can not change after created. */
  dataDiskLetter?: string;
  /** The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run. */
  placementProperties?: { [propertyName: string]: string };
  /** The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has. */
  capacities?: { [propertyName: string]: string };
  /** The range of ports from which cluster assigned port to Service Fabric applications. */
  applicationPorts?: EndpointRangeDescription;
  /** The range of ephemeral ports that nodes in this node type should be configured with. */
  ephemeralPorts?: EndpointRangeDescription;
  /** The size of virtual machines in the pool. All virtual machines in a pool are the same size. For example, Standard_D3. */
  vmSize?: string;
  /** The publisher of the Azure Virtual Machines Marketplace image. For example, Canonical or MicrosoftWindowsServer. */
  vmImagePublisher?: string;
  /** The offer type of the Azure Virtual Machines Marketplace image. For example, UbuntuServer or WindowsServer. */
  vmImageOffer?: string;
  /** The SKU of the Azure Virtual Machines Marketplace image. For example, 14.04.0-LTS or 2012-R2-Datacenter. */
  vmImageSku?: string;
  /** The version of the Azure Virtual Machines Marketplace image. A value of 'latest' can be specified to select the latest version of an image. If omitted, the default is 'latest'. */
  vmImageVersion?: string;
  /** The secrets to install in the virtual machines. */
  vmSecrets?: VaultSecretGroup[];
  /** Set of extensions that should be installed onto the virtual machines. */
  vmExtensions?: VmssExtension[];
  /** Identities to assign to the virtual machine scale set under the node type. */
  vmManagedIdentity?: VmManagedIdentity;
  /** Indicates if the node type can only host Stateless workloads. */
  isStateless?: boolean;
  /** Indicates if scale set associated with the node type can be composed of multiple placement groups. */
  multiplePlacementGroups?: boolean;
  /** Indicates the node type uses its own frontend configurations instead of the default one for the cluster. This setting can only be specified for non-primary node types and can not be added or removed after the node type is created. */
  frontendConfigurations?: FrontendConfiguration[];
  /** The Network Security Rules for this node type. This setting can only be specified for node types that are configured with frontend configurations. */
  networkSecurityRules?: NetworkSecurityRule[];
  /** Additional managed data disks. */
  additionalDataDisks?: VmssDataDisk[];
  /** Enable or disable the Host Encryption for the virtual machines on the node type. This will enable the encryption for all the disks including Resource/Temp disk at host itself. Default: The Encryption at host will be disabled unless this property is set to true for the resource. */
  enableEncryptionAtHost?: boolean;
  /**
   * The provisioning state of the node type resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ManagedResourceProvisioningState;
  /** Specifies whether the network interface is accelerated networking-enabled. */
  enableAcceleratedNetworking?: boolean;
  /** Specifies whether the use public load balancer. If not specified and the node type doesn't have its own frontend configuration, it will be attached to the default load balancer. If the node type uses its own Load balancer and useDefaultPublicLoadBalancer is true, then the frontend has to be an Internal Load Balancer. If the node type uses its own Load balancer and useDefaultPublicLoadBalancer is false or not set, then the custom load balancer must include a public load balancer to provide outbound connectivity. */
  useDefaultPublicLoadBalancer?: boolean;
  /** Specifies whether to use the temporary disk for the service fabric data root, in which case no managed data disk will be attached and the temporary disk will be used. It is only allowed for stateless node types. */
  useTempDataDisk?: boolean;
  /** Specifies whether the node type should be overprovisioned. It is only allowed for stateless node types. */
  enableOverProvisioning?: boolean;
  /** Specifies the availability zones where the node type would span across. If the cluster is not spanning across availability zones, initiates az migration for the cluster. */
  zones?: string[];
  /** Indicates whether the node type will be Spot Virtual Machines. Azure will allocate the VMs if there is capacity available and the VMs can be evicted at any time. */
  isSpotVM?: boolean;
  /** Specifies the full host group resource Id. This property is used for deploying on azure dedicated hosts. */
  hostGroupId?: string;
  /** Indicates whether to use ephemeral os disk. The sku selected on the vmSize property needs to support this feature. */
  useEphemeralOSDisk?: boolean;
  /** Indicates the time duration after which the platform will not try to restore the VMSS SPOT instances specified as ISO 8601. */
  spotRestoreTimeout?: string;
  /** Specifies the eviction policy for virtual machines in a SPOT node type. Default is Delete. */
  evictionPolicy?: EvictionPolicyType;
  /** Indicates the resource id of the vm image. This parameter is used for custom vm image. */
  vmImageResourceId?: string;
  /** Indicates the resource id of the subnet for the node type. */
  subnetId?: string;
  /** Specifies the actions to be performed on the vms before bootstrapping the service fabric runtime. */
  vmSetupActions?: VmSetupAction[];
  /** Specifies the security type of the nodeType. Only Standard and TrustedLaunch are currently supported */
  securityType?: SecurityType;
  /** Specifies whether secure boot should be enabled on the nodeType. Can only be used with TrustedLaunch SecurityType */
  secureBootEnabled?: boolean;
  /** Specifies whether each node is allocated its own public IPv4 address. This is only supported on secondary node types with custom Load Balancers. */
  enableNodePublicIP?: boolean;
  /** Specifies whether each node is allocated its own public IPv6 address. This is only supported on secondary node types with custom Load Balancers. */
  enableNodePublicIPv6?: boolean;
  /** Indicates the resource id of the vm shared galleries image. This parameter is used for custom vm image. */
  vmSharedGalleryImageId?: string;
  /** Specifies the resource id of a NAT Gateway to attach to the subnet of this node type. Node type must use custom load balancer. */
  natGatewayId?: string;
  /** Specifies the NAT configuration on default public Load Balancer for the node type. This is only supported for node types use the default public Load Balancer. */
  natConfigurations?: NodeTypeNatConfig[];
  /** Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use. In the Azure portal, find the marketplace image that you want to use and then click Want to deploy programmatically, Get Started ->. Enter any required information and then click Save. */
  vmImagePlan?: VmImagePlan;
  /** Specifies the service artifact reference id used to set same image version for all virtual machines in the scale set when using 'latest' image version. */
  serviceArtifactReferenceId?: string;
  /** Specifies the resource id of the DSCP configuration to apply to the node type network interface. */
  dscpConfigurationId?: string;
  /** Specifies the settings for any additional secondary network interfaces to attach to the node type. */
  additionalNetworkInterfaceConfigurations?: AdditionalNetworkInterfaceConfiguration[];
  /** Specifies the computer name prefix. Limited to 9 characters. If specified, allows for a longer name to be specified for the node type name. */
  computerNamePrefix?: string;
  /** Specifies the gallery applications that should be made available to the underlying VMSS. */
  vmApplications?: VmApplication[];
}

/** The properties of a stateful service resource. */
export interface StatefulServiceProperties extends ServiceResourceProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  serviceKind: "Stateful";
  /** A flag indicating whether this is a persistent service which stores states on the local disk. If it is then the value of this property is true, if not it is false. */
  hasPersistedState?: boolean;
  /** The target replica set size as a number. */
  targetReplicaSetSize?: number;
  /** The minimum replica set size as a number. */
  minReplicaSetSize?: number;
  /** The duration between when a replica goes down and when a new replica is created, represented in ISO 8601 format "hh:mm:ss". */
  replicaRestartWaitDuration?: string;
  /** The maximum duration for which a partition is allowed to be in a state of quorum loss, represented in ISO 8601 format "hh:mm:ss". */
  quorumLossWaitDuration?: string;
  /** The definition on how long StandBy replicas should be maintained before being removed, represented in ISO 8601 format "hh:mm:ss". */
  standByReplicaKeepDuration?: string;
  /** The duration for which replicas can stay InBuild before reporting that build is stuck, represented in ISO 8601 format "hh:mm:ss". */
  servicePlacementTimeLimit?: string;
}

/** The properties of a stateless service resource. */
export interface StatelessServiceProperties extends ServiceResourceProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  serviceKind: "Stateless";
  /** The instance count. */
  instanceCount: number;
  /** MinInstanceCount is the minimum number of instances that must be up to meet the EnsureAvailability safety check during operations like upgrade or deactivate node. The actual number that is used is max( MinInstanceCount, ceil( MinInstancePercentage/100.0 * InstanceCount) ). Note, if InstanceCount is set to -1, during MinInstanceCount computation -1 is first converted into the number of nodes on which the instances are allowed to be placed according to the placement constraints on the service. */
  minInstanceCount?: number;
  /** MinInstancePercentage is the minimum percentage of InstanceCount that must be up to meet the EnsureAvailability safety check during operations like upgrade or deactivate node. The actual number that is used is max( MinInstanceCount, ceil( MinInstancePercentage/100.0 * InstanceCount) ). Note, if InstanceCount is set to -1, during MinInstancePercentage computation, -1 is first converted into the number of nodes on which the instances are allowed to be placed according to the placement constraints on the service. */
  minInstancePercentage?: number;
}

/** Defines headers for ApplicationTypeVersions_createOrUpdate operation. */
export interface ApplicationTypeVersionsCreateOrUpdateHeaders {
  /** The URL to get the status of an ongoing long-running operation. */
  azureAsyncOperation?: string;
  /** The URL to get the status of a completed long-running operation. */
  location?: string;
}

/** Defines headers for ApplicationTypeVersions_delete operation. */
export interface ApplicationTypeVersionsDeleteHeaders {
  /** The URL to get the status of an ongoing long-running operation. */
  azureAsyncOperation?: string;
  /** The URL to get the status of a completed long-running operation. */
  location?: string;
}

/** Defines headers for Applications_readUpgrade operation. */
export interface ApplicationsReadUpgradeHeaders {
  /** The URL to get the status of an ongoing long-running operation. */
  azureAsyncOperation?: string;
  /** The URL to get the status of a completed long-running operation. */
  location?: string;
}

/** Defines headers for Applications_startRollback operation. */
export interface ApplicationsStartRollbackHeaders {
  /** The URL to get the status of an ongoing long-running operation. */
  azureAsyncOperation?: string;
  /** The URL to get the status of a completed long-running operation. */
  location?: string;
}

/** Defines headers for Applications_resumeUpgrade operation. */
export interface ApplicationsResumeUpgradeHeaders {
  /** The URL to get the status of an ongoing long-running operation. */
  azureAsyncOperation?: string;
  /** The URL to get the status of a completed long-running operation. */
  location?: string;
}

/** Defines headers for Applications_createOrUpdate operation. */
export interface ApplicationsCreateOrUpdateHeaders {
  /** The URL to get the status of an ongoing long-running operation. */
  azureAsyncOperation?: string;
  /** The URL to get the status of a completed long-running operation. */
  location?: string;
}

/** Defines headers for Applications_delete operation. */
export interface ApplicationsDeleteHeaders {
  /** The URL to get the status of an ongoing long-running operation. */
  azureAsyncOperation?: string;
  /** The URL to get the status of a completed long-running operation. */
  location?: string;
}

/** Defines headers for Services_createOrUpdate operation. */
export interface ServicesCreateOrUpdateHeaders {
  /** The URL to get the status of an ongoing long-running operation. */
  azureAsyncOperation?: string;
  /** The URL to get the status of a completed long-running operation. */
  location?: string;
}

/** Defines headers for Services_delete operation. */
export interface ServicesDeleteHeaders {
  /** The URL to get the status of an ongoing long-running operation. */
  azureAsyncOperation?: string;
  /** The URL to get the status of a completed long-running operation. */
  location?: string;
}

/** Defines headers for ManagedClusters_createOrUpdate operation. */
export interface ManagedClustersCreateOrUpdateHeaders {
  /** The URL to get the status of an ongoing long-running operation. */
  azureAsyncOperation?: string;
  /** The URL to get the status of a completed long-running operation. */
  location?: string;
}

/** Defines headers for ManagedClusters_delete operation. */
export interface ManagedClustersDeleteHeaders {
  /** The URL to get the status of an ongoing long-running operation. */
  azureAsyncOperation?: string;
  /** The URL to get the status of a completed long-running operation. */
  location?: string;
}

/** Defines headers for OperationResults_get operation. */
export interface OperationResultsGetHeaders {
  /** The URL to get the status of a completed long-running operation. */
  location?: string;
}

/** Defines headers for NodeTypes_restart operation. */
export interface NodeTypesRestartHeaders {
  /** The URL to get the status of an ongoing long-running operation. */
  azureAsyncOperation?: string;
  /** The URL to get the status of a completed long-running operation. */
  location?: string;
}

/** Defines headers for NodeTypes_reimage operation. */
export interface NodeTypesReimageHeaders {
  /** The URL to get the status of an ongoing long-running operation. */
  azureAsyncOperation?: string;
  /** The URL to get the status of a completed long-running operation. */
  location?: string;
}

/** Defines headers for NodeTypes_deleteNode operation. */
export interface NodeTypesDeleteNodeHeaders {
  /** The URL to get the status of an ongoing long-running operation. */
  azureAsyncOperation?: string;
  /** The URL to get the status of a completed long-running operation. */
  location?: string;
}

/** Defines headers for NodeTypes_createOrUpdate operation. */
export interface NodeTypesCreateOrUpdateHeaders {
  /** The URL to get the status of an ongoing long-running operation. */
  azureAsyncOperation?: string;
  /** The URL to get the status of a completed long-running operation. */
  location?: string;
}

/** Defines headers for NodeTypes_delete operation. */
export interface NodeTypesDeleteHeaders {
  /** The URL to get the status of an ongoing long-running operation. */
  azureAsyncOperation?: string;
  /** The URL to get the status of a completed long-running operation. */
  location?: string;
}

/** Known values of {@link FailureAction} that the service accepts. */
export enum KnownFailureAction {
  /** The upgrade will start rolling back automatically. The value is 0 */
  Rollback = "Rollback",
  /** The upgrade will switch to UnmonitoredManual upgrade mode. The value is 1 */
  Manual = "Manual",
}

/**
 * Defines values for FailureAction. \
 * {@link KnownFailureAction} can be used interchangeably with FailureAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Rollback**: The upgrade will start rolling back automatically. The value is 0 \
 * **Manual**: The upgrade will switch to UnmonitoredManual upgrade mode. The value is 1
 */
export type FailureAction = string;

/** Known values of {@link RollingUpgradeMode} that the service accepts. */
export enum KnownRollingUpgradeMode {
  /** The upgrade will stop after completing each upgrade domain and automatically monitor health before proceeding. The value is 0. */
  Monitored = "Monitored",
  /** The upgrade will proceed automatically without performing any health monitoring. The value is 1. */
  UnmonitoredAuto = "UnmonitoredAuto",
}

/**
 * Defines values for RollingUpgradeMode. \
 * {@link KnownRollingUpgradeMode} can be used interchangeably with RollingUpgradeMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Monitored**: The upgrade will stop after completing each upgrade domain and automatically monitor health before proceeding. The value is 0. \
 * **UnmonitoredAuto**: The upgrade will proceed automatically without performing any health monitoring. The value is 1.
 */
export type RollingUpgradeMode = string;

/** Known values of {@link ServiceKind} that the service accepts. */
export enum KnownServiceKind {
  /** Does not use Service Fabric to make its state highly available or reliable. The value is 0. */
  Stateless = "Stateless",
  /** Uses Service Fabric to make its state or part of its state highly available and reliable. The value is 1. */
  Stateful = "Stateful",
}

/**
 * Defines values for ServiceKind. \
 * {@link KnownServiceKind} can be used interchangeably with ServiceKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Stateless**: Does not use Service Fabric to make its state highly available or reliable. The value is 0. \
 * **Stateful**: Uses Service Fabric to make its state or part of its state highly available and reliable. The value is 1.
 */
export type ServiceKind = string;

/** Known values of {@link PartitionScheme} that the service accepts. */
export enum KnownPartitionScheme {
  /** Indicates that the partition is based on string names, and is a SingletonPartitionScheme object, The value is 0. */
  Singleton = "Singleton",
  /** Indicates that the partition is based on Int64 key ranges, and is a UniformInt64RangePartitionScheme object. The value is 1. */
  UniformInt64Range = "UniformInt64Range",
  /** Indicates that the partition is based on string names, and is a NamedPartitionScheme object. The value is 2. */
  Named = "Named",
}

/**
 * Defines values for PartitionScheme. \
 * {@link KnownPartitionScheme} can be used interchangeably with PartitionScheme,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Singleton**: Indicates that the partition is based on string names, and is a SingletonPartitionScheme object, The value is 0. \
 * **UniformInt64Range**: Indicates that the partition is based on Int64 key ranges, and is a UniformInt64RangePartitionScheme object. The value is 1. \
 * **Named**: Indicates that the partition is based on string names, and is a NamedPartitionScheme object. The value is 2.
 */
export type PartitionScheme = string;

/** Known values of {@link ServicePackageActivationMode} that the service accepts. */
export enum KnownServicePackageActivationMode {
  /** Indicates the application package activation mode will use shared process. */
  SharedProcess = "SharedProcess",
  /** Indicates the application package activation mode will use exclusive process. */
  ExclusiveProcess = "ExclusiveProcess",
}

/**
 * Defines values for ServicePackageActivationMode. \
 * {@link KnownServicePackageActivationMode} can be used interchangeably with ServicePackageActivationMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SharedProcess**: Indicates the application package activation mode will use shared process. \
 * **ExclusiveProcess**: Indicates the application package activation mode will use exclusive process.
 */
export type ServicePackageActivationMode = string;

/** Known values of {@link ServiceCorrelationScheme} that the service accepts. */
export enum KnownServiceCorrelationScheme {
  /** Aligned affinity ensures that the primaries of the partitions of the affinitized services are collocated on the same nodes. This is the default and is the same as selecting the Affinity scheme. The value is 0. */
  AlignedAffinity = "AlignedAffinity",
  /** Non-Aligned affinity guarantees that all replicas of each service will be placed on the same nodes. Unlike Aligned Affinity, this does not guarantee that replicas of particular role will be collocated. The value is 1. */
  NonAlignedAffinity = "NonAlignedAffinity",
}

/**
 * Defines values for ServiceCorrelationScheme. \
 * {@link KnownServiceCorrelationScheme} can be used interchangeably with ServiceCorrelationScheme,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AlignedAffinity**: Aligned affinity ensures that the primaries of the partitions of the affinitized services are collocated on the same nodes. This is the default and is the same as selecting the Affinity scheme. The value is 0. \
 * **NonAlignedAffinity**: Non-Aligned affinity guarantees that all replicas of each service will be placed on the same nodes. Unlike Aligned Affinity, this does not guarantee that replicas of particular role will be collocated. The value is 1.
 */
export type ServiceCorrelationScheme = string;

/** Known values of {@link ServiceLoadMetricWeight} that the service accepts. */
export enum KnownServiceLoadMetricWeight {
  /** Disables resource balancing for this metric. This value is zero. */
  Zero = "Zero",
  /** Specifies the metric weight of the service load as Low. The value is 1. */
  Low = "Low",
  /** Specifies the metric weight of the service load as Medium. The value is 2. */
  Medium = "Medium",
  /** Specifies the metric weight of the service load as High. The value is 3. */
  High = "High",
}

/**
 * Defines values for ServiceLoadMetricWeight. \
 * {@link KnownServiceLoadMetricWeight} can be used interchangeably with ServiceLoadMetricWeight,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Zero**: Disables resource balancing for this metric. This value is zero. \
 * **Low**: Specifies the metric weight of the service load as Low. The value is 1. \
 * **Medium**: Specifies the metric weight of the service load as Medium. The value is 2. \
 * **High**: Specifies the metric weight of the service load as High. The value is 3.
 */
export type ServiceLoadMetricWeight = string;

/** Known values of {@link ServicePlacementPolicyType} that the service accepts. */
export enum KnownServicePlacementPolicyType {
  /** Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementInvalidDomainPolicyDescription, which indicates that a particular fault or upgrade domain cannot be used for placement of this service. The value is 0. */
  InvalidDomain = "InvalidDomain",
  /** Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementRequireDomainDistributionPolicyDescription indicating that the replicas of the service must be placed in a specific domain. The value is 1. */
  RequiredDomain = "RequiredDomain",
  /** Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementPreferPrimaryDomainPolicyDescription, which indicates that if possible the Primary replica for the partitions of the service should be located in a particular domain as an optimization. The value is 2. */
  PreferredPrimaryDomain = "PreferredPrimaryDomain",
  /** Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementRequireDomainDistributionPolicyDescription, indicating that the system will disallow placement of any two replicas from the same partition in the same domain at any time. The value is 3. */
  RequiredDomainDistribution = "RequiredDomainDistribution",
  /** Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementNonPartiallyPlaceServicePolicyDescription, which indicates that if possible all replicas of a particular partition of the service should be placed atomically. The value is 4. */
  NonPartiallyPlaceService = "NonPartiallyPlaceService",
}

/**
 * Defines values for ServicePlacementPolicyType. \
 * {@link KnownServicePlacementPolicyType} can be used interchangeably with ServicePlacementPolicyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **InvalidDomain**: Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementInvalidDomainPolicyDescription, which indicates that a particular fault or upgrade domain cannot be used for placement of this service. The value is 0. \
 * **RequiredDomain**: Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementRequireDomainDistributionPolicyDescription indicating that the replicas of the service must be placed in a specific domain. The value is 1. \
 * **PreferredPrimaryDomain**: Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementPreferPrimaryDomainPolicyDescription, which indicates that if possible the Primary replica for the partitions of the service should be located in a particular domain as an optimization. The value is 2. \
 * **RequiredDomainDistribution**: Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementRequireDomainDistributionPolicyDescription, indicating that the system will disallow placement of any two replicas from the same partition in the same domain at any time. The value is 3. \
 * **NonPartiallyPlaceService**: Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementNonPartiallyPlaceServicePolicyDescription, which indicates that if possible all replicas of a particular partition of the service should be placed atomically. The value is 4.
 */
export type ServicePlacementPolicyType = string;

/** Known values of {@link MoveCost} that the service accepts. */
export enum KnownMoveCost {
  /** Zero move cost. This value is zero. */
  Zero = "Zero",
  /** Specifies the move cost of the service as Low. The value is 1. */
  Low = "Low",
  /** Specifies the move cost of the service as Medium. The value is 2. */
  Medium = "Medium",
  /** Specifies the move cost of the service as High. The value is 3. */
  High = "High",
}

/**
 * Defines values for MoveCost. \
 * {@link KnownMoveCost} can be used interchangeably with MoveCost,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Zero**: Zero move cost. This value is zero. \
 * **Low**: Specifies the move cost of the service as Low. The value is 1. \
 * **Medium**: Specifies the move cost of the service as Medium. The value is 2. \
 * **High**: Specifies the move cost of the service as High. The value is 3.
 */
export type MoveCost = string;

/** Known values of {@link ServiceScalingMechanismKind} that the service accepts. */
export enum KnownServiceScalingMechanismKind {
  /** Represents a scaling mechanism for adding or removing instances of stateless service partition. The value is 0. */
  ScalePartitionInstanceCount = "ScalePartitionInstanceCount",
  /** Represents a scaling mechanism for adding or removing named partitions of a stateless service. The value is 1. */
  AddRemoveIncrementalNamedPartition = "AddRemoveIncrementalNamedPartition",
}

/**
 * Defines values for ServiceScalingMechanismKind. \
 * {@link KnownServiceScalingMechanismKind} can be used interchangeably with ServiceScalingMechanismKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ScalePartitionInstanceCount**: Represents a scaling mechanism for adding or removing instances of stateless service partition. The value is 0. \
 * **AddRemoveIncrementalNamedPartition**: Represents a scaling mechanism for adding or removing named partitions of a stateless service. The value is 1.
 */
export type ServiceScalingMechanismKind = string;

/** Known values of {@link ServiceScalingTriggerKind} that the service accepts. */
export enum KnownServiceScalingTriggerKind {
  /** Represents a scaling trigger related to an average load of a metric\/resource of a partition. The value is 0. */
  AveragePartitionLoadTrigger = "AveragePartitionLoadTrigger",
  /** Represents a scaling policy related to an average load of a metric\/resource of a service. The value is 1. */
  AverageServiceLoadTrigger = "AverageServiceLoadTrigger",
}

/**
 * Defines values for ServiceScalingTriggerKind. \
 * {@link KnownServiceScalingTriggerKind} can be used interchangeably with ServiceScalingTriggerKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AveragePartitionLoadTrigger**: Represents a scaling trigger related to an average load of a metric\/resource of a partition. The value is 0. \
 * **AverageServiceLoadTrigger**: Represents a scaling policy related to an average load of a metric\/resource of a service. The value is 1.
 */
export type ServiceScalingTriggerKind = string;

/** Known values of {@link ClusterState} that the service accepts. */
export enum KnownClusterState {
  /** Indicates that the cluster resource is created and the resource provider is waiting for Service Fabric VM extension to boot up and report to it. */
  WaitingForNodes = "WaitingForNodes",
  /** Indicates that the Service Fabric runtime is being installed on the VMs. Cluster resource will be in this state until the cluster boots up and system services are up. */
  Deploying = "Deploying",
  /** Indicates that the cluster is upgrading to establishes the cluster version. This upgrade is automatically initiated when the cluster boots up for the first time. */
  BaselineUpgrade = "BaselineUpgrade",
  /** Indicates that the cluster is being upgraded with the user provided configuration. */
  Upgrading = "Upgrading",
  /** Indicates that the last upgrade for the cluster has failed. */
  UpgradeFailed = "UpgradeFailed",
  /** Indicates that the cluster is in a stable state. */
  Ready = "Ready",
}

/**
 * Defines values for ClusterState. \
 * {@link KnownClusterState} can be used interchangeably with ClusterState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **WaitingForNodes**: Indicates that the cluster resource is created and the resource provider is waiting for Service Fabric VM extension to boot up and report to it. \
 * **Deploying**: Indicates that the Service Fabric runtime is being installed on the VMs. Cluster resource will be in this state until the cluster boots up and system services are up. \
 * **BaselineUpgrade**: Indicates that the cluster is upgrading to establishes the cluster version. This upgrade is automatically initiated when the cluster boots up for the first time. \
 * **Upgrading**: Indicates that the cluster is being upgraded with the user provided configuration. \
 * **UpgradeFailed**: Indicates that the last upgrade for the cluster has failed. \
 * **Ready**: Indicates that the cluster is in a stable state.
 */
export type ClusterState = string;

/** Known values of {@link Protocol} that the service accepts. */
export enum KnownProtocol {
  /** Tcp */
  Tcp = "tcp",
  /** Udp */
  Udp = "udp",
}

/**
 * Defines values for Protocol. \
 * {@link KnownProtocol} can be used interchangeably with Protocol,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **tcp** \
 * **udp**
 */
export type Protocol = string;

/** Known values of {@link ProbeProtocol} that the service accepts. */
export enum KnownProbeProtocol {
  /** Tcp */
  Tcp = "tcp",
  /** Http */
  Http = "http",
  /** Https */
  Https = "https",
}

/**
 * Defines values for ProbeProtocol. \
 * {@link KnownProbeProtocol} can be used interchangeably with ProbeProtocol,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **tcp** \
 * **http** \
 * **https**
 */
export type ProbeProtocol = string;

/** Known values of {@link NsgProtocol} that the service accepts. */
export enum KnownNsgProtocol {
  /** Http */
  Http = "http",
  /** Https */
  Https = "https",
  /** Tcp */
  Tcp = "tcp",
  /** Udp */
  Udp = "udp",
  /** Icmp */
  Icmp = "icmp",
  /** Ah */
  Ah = "ah",
  /** Esp */
  Esp = "esp",
}

/**
 * Defines values for NsgProtocol. \
 * {@link KnownNsgProtocol} can be used interchangeably with NsgProtocol,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **http** \
 * **https** \
 * **tcp** \
 * **udp** \
 * **icmp** \
 * **ah** \
 * **esp**
 */
export type NsgProtocol = string;

/** Known values of {@link Access} that the service accepts. */
export enum KnownAccess {
  /** Allow */
  Allow = "allow",
  /** Deny */
  Deny = "deny",
}

/**
 * Defines values for Access. \
 * {@link KnownAccess} can be used interchangeably with Access,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **allow** \
 * **deny**
 */
export type Access = string;

/** Known values of {@link Direction} that the service accepts. */
export enum KnownDirection {
  /** Inbound */
  Inbound = "inbound",
  /** Outbound */
  Outbound = "outbound",
}

/**
 * Defines values for Direction. \
 * {@link KnownDirection} can be used interchangeably with Direction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **inbound** \
 * **outbound**
 */
export type Direction = string;

/** Known values of {@link ManagedResourceProvisioningState} that the service accepts. */
export enum KnownManagedResourceProvisioningState {
  /** None */
  None = "None",
  /** Creating */
  Creating = "Creating",
  /** Created */
  Created = "Created",
  /** Updating */
  Updating = "Updating",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** Deleting */
  Deleting = "Deleting",
  /** Deleted */
  Deleted = "Deleted",
  /** Other */
  Other = "Other",
}

/**
 * Defines values for ManagedResourceProvisioningState. \
 * {@link KnownManagedResourceProvisioningState} can be used interchangeably with ManagedResourceProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Creating** \
 * **Created** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Deleting** \
 * **Deleted** \
 * **Other**
 */
export type ManagedResourceProvisioningState = string;

/** Known values of {@link ClusterUpgradeMode} that the service accepts. */
export enum KnownClusterUpgradeMode {
  /** The cluster will be automatically upgraded to the latest Service Fabric runtime version, **clusterUpgradeCadence** will determine when the upgrade starts after the new version becomes available. */
  Automatic = "Automatic",
  /** The cluster will not be automatically upgraded to the latest Service Fabric runtime version. The cluster is upgraded by setting the **clusterCodeVersion** property in the cluster resource. */
  Manual = "Manual",
}

/**
 * Defines values for ClusterUpgradeMode. \
 * {@link KnownClusterUpgradeMode} can be used interchangeably with ClusterUpgradeMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Automatic**: The cluster will be automatically upgraded to the latest Service Fabric runtime version, **clusterUpgradeCadence** will determine when the upgrade starts after the new version becomes available. \
 * **Manual**: The cluster will not be automatically upgraded to the latest Service Fabric runtime version. The cluster is upgraded by setting the **clusterCodeVersion** property in the cluster resource.
 */
export type ClusterUpgradeMode = string;

/** Known values of {@link ClusterUpgradeCadence} that the service accepts. */
export enum KnownClusterUpgradeCadence {
  /** Cluster upgrade starts immediately after a new version is rolled out. Recommended for Test\/Dev clusters. */
  Wave0 = "Wave0",
  /** Cluster upgrade starts 7 days after a new version is rolled out. Recommended for Pre-prod clusters. */
  Wave1 = "Wave1",
  /** Cluster upgrade starts 14 days after a new version is rolled out. Recommended for Production clusters. */
  Wave2 = "Wave2",
}

/**
 * Defines values for ClusterUpgradeCadence. \
 * {@link KnownClusterUpgradeCadence} can be used interchangeably with ClusterUpgradeCadence,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Wave0**: Cluster upgrade starts immediately after a new version is rolled out. Recommended for Test\/Dev clusters. \
 * **Wave1**: Cluster upgrade starts 7 days after a new version is rolled out. Recommended for Pre-prod clusters. \
 * **Wave2**: Cluster upgrade starts 14 days after a new version is rolled out. Recommended for Production clusters.
 */
export type ClusterUpgradeCadence = string;

/** Known values of {@link ManagedClusterAddOnFeature} that the service accepts. */
export enum KnownManagedClusterAddOnFeature {
  /** Dns service */
  DnsService = "DnsService",
  /** Backup and restore service */
  BackupRestoreService = "BackupRestoreService",
  /** Resource monitor service */
  ResourceMonitorService = "ResourceMonitorService",
}

/**
 * Defines values for ManagedClusterAddOnFeature. \
 * {@link KnownManagedClusterAddOnFeature} can be used interchangeably with ManagedClusterAddOnFeature,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **DnsService**: Dns service \
 * **BackupRestoreService**: Backup and restore service \
 * **ResourceMonitorService**: Resource monitor service
 */
export type ManagedClusterAddOnFeature = string;

/** Known values of {@link PrivateEndpointNetworkPolicies} that the service accepts. */
export enum KnownPrivateEndpointNetworkPolicies {
  /** Enabled */
  Enabled = "enabled",
  /** Disabled */
  Disabled = "disabled",
}

/**
 * Defines values for PrivateEndpointNetworkPolicies. \
 * {@link KnownPrivateEndpointNetworkPolicies} can be used interchangeably with PrivateEndpointNetworkPolicies,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **enabled** \
 * **disabled**
 */
export type PrivateEndpointNetworkPolicies = string;

/** Known values of {@link PrivateLinkServiceNetworkPolicies} that the service accepts. */
export enum KnownPrivateLinkServiceNetworkPolicies {
  /** Enabled */
  Enabled = "enabled",
  /** Disabled */
  Disabled = "disabled",
}

/**
 * Defines values for PrivateLinkServiceNetworkPolicies. \
 * {@link KnownPrivateLinkServiceNetworkPolicies} can be used interchangeably with PrivateLinkServiceNetworkPolicies,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **enabled** \
 * **disabled**
 */
export type PrivateLinkServiceNetworkPolicies = string;

/** Known values of {@link ZonalUpdateMode} that the service accepts. */
export enum KnownZonalUpdateMode {
  /** The cluster will use 5 upgrade domains for Cross Az Node types. */
  Standard = "Standard",
  /** The cluster will use a maximum of 3 upgrade domains per zone instead of 5 for Cross Az Node types for faster deployments. */
  Fast = "Fast",
}

/**
 * Defines values for ZonalUpdateMode. \
 * {@link KnownZonalUpdateMode} can be used interchangeably with ZonalUpdateMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard**: The cluster will use 5 upgrade domains for Cross Az Node types. \
 * **Fast**: The cluster will use a maximum of 3 upgrade domains per zone instead of 5 for Cross Az Node types for faster deployments.
 */
export type ZonalUpdateMode = string;

/** Known values of {@link AutoGeneratedDomainNameLabelScope} that the service accepts. */
export enum KnownAutoGeneratedDomainNameLabelScope {
  /** TenantReuse allows for the same hash to be created if the resource is created in the same Tenant with the same resource name. */
  TenantReuse = "TenantReuse",
  /** SubscriptionReuse allows for the same hash to be created if the resource is created in the same Subscription with the same resource name. */
  SubscriptionReuse = "SubscriptionReuse",
  /** ResourceGroupReuse allows for the same hash to be created if the resource is created in the same Resource Group with the same resource name. */
  ResourceGroupReuse = "ResourceGroupReuse",
  /** NoReuse will create a new hash regardless of the Subscription, Resource Group, Tenant and Resource name. */
  NoReuse = "NoReuse",
}

/**
 * Defines values for AutoGeneratedDomainNameLabelScope. \
 * {@link KnownAutoGeneratedDomainNameLabelScope} can be used interchangeably with AutoGeneratedDomainNameLabelScope,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **TenantReuse**: TenantReuse allows for the same hash to be created if the resource is created in the same Tenant with the same resource name. \
 * **SubscriptionReuse**: SubscriptionReuse allows for the same hash to be created if the resource is created in the same Subscription with the same resource name. \
 * **ResourceGroupReuse**: ResourceGroupReuse allows for the same hash to be created if the resource is created in the same Resource Group with the same resource name. \
 * **NoReuse**: NoReuse will create a new hash regardless of the Subscription, Resource Group, Tenant and Resource name.
 */
export type AutoGeneratedDomainNameLabelScope = string;

/** Known values of {@link SkuName} that the service accepts. */
export enum KnownSkuName {
  /** Basic requires a minimum of 3 nodes and allows only 1 node type. */
  Basic = "Basic",
  /** Requires a minimum of 5 nodes and allows 1 or more node type. */
  Standard = "Standard",
}

/**
 * Defines values for SkuName. \
 * {@link KnownSkuName} can be used interchangeably with SkuName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic**: Basic requires a minimum of 3 nodes and allows only 1 node type. \
 * **Standard**: Requires a minimum of 5 nodes and allows 1 or more node type.
 */
export type SkuName = string;

/** Known values of {@link OsType} that the service accepts. */
export enum KnownOsType {
  /** Indicates os is Windows. */
  Windows = "Windows",
}

/**
 * Defines values for OsType. \
 * {@link KnownOsType} can be used interchangeably with OsType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Windows**: Indicates os is Windows.
 */
export type OsType = string;

/** Known values of {@link ManagedClusterVersionEnvironment} that the service accepts. */
export enum KnownManagedClusterVersionEnvironment {
  /** Windows. */
  Windows = "Windows",
}

/**
 * Defines values for ManagedClusterVersionEnvironment. \
 * {@link KnownManagedClusterVersionEnvironment} can be used interchangeably with ManagedClusterVersionEnvironment,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Windows**: Windows.
 */
export type ManagedClusterVersionEnvironment = string;

/** Known values of {@link DiskType} that the service accepts. */
export enum KnownDiskType {
  /** Standard HDD locally redundant storage. Best for backup, non-critical, and infrequent access. */
  StandardLRS = "Standard_LRS",
  /** Standard SSD locally redundant storage. Best for web servers, lightly used enterprise applications and dev\/test. */
  StandardSSDLRS = "StandardSSD_LRS",
  /** Premium SSD locally redundant storage. Best for production and performance sensitive workloads. */
  PremiumLRS = "Premium_LRS",
}

/**
 * Defines values for DiskType. \
 * {@link KnownDiskType} can be used interchangeably with DiskType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard_LRS**: Standard HDD locally redundant storage. Best for backup, non-critical, and infrequent access. \
 * **StandardSSD_LRS**: Standard SSD locally redundant storage. Best for web servers, lightly used enterprise applications and dev\/test. \
 * **Premium_LRS**: Premium SSD locally redundant storage. Best for production and performance sensitive workloads.
 */
export type DiskType = string;

/** Known values of {@link VmssExtensionSetupOrder} that the service accepts. */
export enum KnownVmssExtensionSetupOrder {
  /** Indicates that the vm extension should run before the service fabric runtime starts. */
  BeforeSFRuntime = "BeforeSFRuntime",
}

/**
 * Defines values for VmssExtensionSetupOrder. \
 * {@link KnownVmssExtensionSetupOrder} can be used interchangeably with VmssExtensionSetupOrder,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **BeforeSFRuntime**: Indicates that the vm extension should run before the service fabric runtime starts.
 */
export type VmssExtensionSetupOrder = string;

/** Known values of {@link IPAddressType} that the service accepts. */
export enum KnownIPAddressType {
  /** IPv4 address type. */
  IPv4 = "IPv4",
  /** IPv6 address type. */
  IPv6 = "IPv6",
}

/**
 * Defines values for IPAddressType. \
 * {@link KnownIPAddressType} can be used interchangeably with IPAddressType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **IPv4**: IPv4 address type. \
 * **IPv6**: IPv6 address type.
 */
export type IPAddressType = string;

/** Known values of {@link EvictionPolicyType} that the service accepts. */
export enum KnownEvictionPolicyType {
  /** Eviction policy will be Delete for SPOT vms. */
  Delete = "Delete",
  /** Eviction policy will be Deallocate for SPOT vms. */
  Deallocate = "Deallocate",
}

/**
 * Defines values for EvictionPolicyType. \
 * {@link KnownEvictionPolicyType} can be used interchangeably with EvictionPolicyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Delete**: Eviction policy will be Delete for SPOT vms. \
 * **Deallocate**: Eviction policy will be Deallocate for SPOT vms.
 */
export type EvictionPolicyType = string;

/** Known values of {@link VmSetupAction} that the service accepts. */
export enum KnownVmSetupAction {
  /** Enable windows containers feature. */
  EnableContainers = "EnableContainers",
  /** Enables windows HyperV feature. */
  EnableHyperV = "EnableHyperV",
}

/**
 * Defines values for VmSetupAction. \
 * {@link KnownVmSetupAction} can be used interchangeably with VmSetupAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **EnableContainers**: Enable windows containers feature. \
 * **EnableHyperV**: Enables windows HyperV feature.
 */
export type VmSetupAction = string;

/** Known values of {@link SecurityType} that the service accepts. */
export enum KnownSecurityType {
  /** Trusted Launch is a security type that secures generation 2 virtual machines. */
  TrustedLaunch = "TrustedLaunch",
  /** Standard is the default security type for all machines. */
  Standard = "Standard",
}

/**
 * Defines values for SecurityType. \
 * {@link KnownSecurityType} can be used interchangeably with SecurityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **TrustedLaunch**: Trusted Launch is a security type that secures generation 2 virtual machines. \
 * **Standard**: Standard is the default security type for all machines.
 */
export type SecurityType = string;

/** Known values of {@link PrivateIPAddressVersion} that the service accepts. */
export enum KnownPrivateIPAddressVersion {
  /** IPv4 */
  IPv4 = "IPv4",
  /** IPv6 */
  IPv6 = "IPv6",
}

/**
 * Defines values for PrivateIPAddressVersion. \
 * {@link KnownPrivateIPAddressVersion} can be used interchangeably with PrivateIPAddressVersion,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **IPv4** \
 * **IPv6**
 */
export type PrivateIPAddressVersion = string;

/** Known values of {@link PublicIPAddressVersion} that the service accepts. */
export enum KnownPublicIPAddressVersion {
  /** IPv4 */
  IPv4 = "IPv4",
  /** IPv6 */
  IPv6 = "IPv6",
}

/**
 * Defines values for PublicIPAddressVersion. \
 * {@link KnownPublicIPAddressVersion} can be used interchangeably with PublicIPAddressVersion,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **IPv4** \
 * **IPv6**
 */
export type PublicIPAddressVersion = string;

/** Known values of {@link UpdateType} that the service accepts. */
export enum KnownUpdateType {
  /** The operation will proceed in all specified nodes at the same time. */
  Default = "Default",
  /** The operation will proceed one upgrade domain at a time, checking the health in between each to continue. */
  ByUpgradeDomain = "ByUpgradeDomain",
}

/**
 * Defines values for UpdateType. \
 * {@link KnownUpdateType} can be used interchangeably with UpdateType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default**: The operation will proceed in all specified nodes at the same time. \
 * **ByUpgradeDomain**: The operation will proceed one upgrade domain at a time, checking the health in between each to continue.
 */
export type UpdateType = string;

/** Known values of {@link NodeTypeSkuScaleType} that the service accepts. */
export enum KnownNodeTypeSkuScaleType {
  /** Node count is not adjustable in any way (e.g. it is fixed). */
  None = "None",
  /** The user must manually scale out\/in. */
  Manual = "Manual",
  /** Automatic scale is allowed. */
  Automatic = "Automatic",
}

/**
 * Defines values for NodeTypeSkuScaleType. \
 * {@link KnownNodeTypeSkuScaleType} can be used interchangeably with NodeTypeSkuScaleType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None**: Node count is not adjustable in any way (e.g. it is fixed). \
 * **Manual**: The user must manually scale out\/in. \
 * **Automatic**: Automatic scale is allowed.
 */
export type NodeTypeSkuScaleType = string;

/** Known values of {@link UpgradeMode} that the service accepts. */
export enum KnownUpgradeMode {
  /** The upgrade will proceed automatically without performing any health monitoring. The value is 0 */
  UnmonitoredAuto = "UnmonitoredAuto",
  /** The upgrade will stop after completing each upgrade domain, giving the opportunity to manually monitor health before proceeding. The value is 1 */
  UnmonitoredManual = "UnmonitoredManual",
  /** The upgrade will stop after completing each upgrade domain and automatically monitor health before proceeding. The value is 2 */
  Monitored = "Monitored",
}

/**
 * Defines values for UpgradeMode. \
 * {@link KnownUpgradeMode} can be used interchangeably with UpgradeMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **UnmonitoredAuto**: The upgrade will proceed automatically without performing any health monitoring. The value is 0 \
 * **UnmonitoredManual**: The upgrade will stop after completing each upgrade domain, giving the opportunity to manually monitor health before proceeding. The value is 1 \
 * **Monitored**: The upgrade will stop after completing each upgrade domain and automatically monitor health before proceeding. The value is 2
 */
export type UpgradeMode = string;
/** Defines values for ManagedIdentityType. */
export type ManagedIdentityType =
  | "None"
  | "SystemAssigned"
  | "UserAssigned"
  | "SystemAssigned, UserAssigned";

/** Optional parameters. */
export interface ApplicationTypesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ApplicationTypesGetResponse = ApplicationTypeResource;

/** Optional parameters. */
export interface ApplicationTypesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type ApplicationTypesCreateOrUpdateResponse = ApplicationTypeResource;

/** Optional parameters. */
export interface ApplicationTypesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type ApplicationTypesUpdateResponse = ApplicationTypeResource;

/** Optional parameters. */
export interface ApplicationTypesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ApplicationTypesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ApplicationTypesListResponse = ApplicationTypeResourceList;

/** Optional parameters. */
export interface ApplicationTypesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ApplicationTypesListNextResponse = ApplicationTypeResourceList;

/** Optional parameters. */
export interface ApplicationTypeVersionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ApplicationTypeVersionsGetResponse = ApplicationTypeVersionResource;

/** Optional parameters. */
export interface ApplicationTypeVersionsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ApplicationTypeVersionsCreateOrUpdateResponse =
  ApplicationTypeVersionResource;

/** Optional parameters. */
export interface ApplicationTypeVersionsUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type ApplicationTypeVersionsUpdateResponse =
  ApplicationTypeVersionResource;

/** Optional parameters. */
export interface ApplicationTypeVersionsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ApplicationTypeVersionsListByApplicationTypesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByApplicationTypes operation. */
export type ApplicationTypeVersionsListByApplicationTypesResponse =
  ApplicationTypeVersionResourceList;

/** Optional parameters. */
export interface ApplicationTypeVersionsListByApplicationTypesNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByApplicationTypesNext operation. */
export type ApplicationTypeVersionsListByApplicationTypesNextResponse =
  ApplicationTypeVersionResourceList;

/** Optional parameters. */
export interface ApplicationsReadUpgradeOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the readUpgrade operation. */
export type ApplicationsReadUpgradeResponse = ApplicationsReadUpgradeHeaders;

/** Optional parameters. */
export interface ApplicationsStartRollbackOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the startRollback operation. */
export type ApplicationsStartRollbackResponse =
  ApplicationsStartRollbackHeaders;

/** Optional parameters. */
export interface ApplicationsResumeUpgradeOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the resumeUpgrade operation. */
export type ApplicationsResumeUpgradeResponse =
  ApplicationsResumeUpgradeHeaders;

/** Optional parameters. */
export interface ApplicationsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ApplicationsGetResponse = ApplicationResource;

/** Optional parameters. */
export interface ApplicationsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ApplicationsCreateOrUpdateResponse = ApplicationResource;

/** Optional parameters. */
export interface ApplicationsUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type ApplicationsUpdateResponse = ApplicationResource;

/** Optional parameters. */
export interface ApplicationsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ApplicationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ApplicationsListResponse = ApplicationResourceList;

/** Optional parameters. */
export interface ApplicationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ApplicationsListNextResponse = ApplicationResourceList;

/** Optional parameters. */
export interface ServicesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ServicesGetResponse = ServiceResource;

/** Optional parameters. */
export interface ServicesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ServicesCreateOrUpdateResponse = ServiceResource;

/** Optional parameters. */
export interface ServicesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type ServicesUpdateResponse = ServiceResource;

/** Optional parameters. */
export interface ServicesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ServicesListByApplicationsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByApplications operation. */
export type ServicesListByApplicationsResponse = ServiceResourceList;

/** Optional parameters. */
export interface ServicesListByApplicationsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByApplicationsNext operation. */
export type ServicesListByApplicationsNextResponse = ServiceResourceList;

/** Optional parameters. */
export interface ManagedClustersListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type ManagedClustersListByResourceGroupResponse =
  ManagedClusterListResult;

/** Optional parameters. */
export interface ManagedClustersListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type ManagedClustersListBySubscriptionResponse =
  ManagedClusterListResult;

/** Optional parameters. */
export interface ManagedClustersGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ManagedClustersGetResponse = ManagedCluster;

/** Optional parameters. */
export interface ManagedClustersCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ManagedClustersCreateOrUpdateResponse = ManagedCluster;

/** Optional parameters. */
export interface ManagedClustersUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type ManagedClustersUpdateResponse = ManagedCluster;

/** Optional parameters. */
export interface ManagedClustersDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ManagedClustersListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type ManagedClustersListByResourceGroupNextResponse =
  ManagedClusterListResult;

/** Optional parameters. */
export interface ManagedClustersListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type ManagedClustersListBySubscriptionNextResponse =
  ManagedClusterListResult;

/** Optional parameters. */
export interface ManagedAzResiliencyStatusGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ManagedAzResiliencyStatusGetResponse = ManagedAzResiliencyStatus;

/** Optional parameters. */
export interface ManagedMaintenanceWindowStatusGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ManagedMaintenanceWindowStatusGetResponse =
  ManagedMaintenanceWindowStatus;

/** Optional parameters. */
export interface ManagedApplyMaintenanceWindowPostOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ManagedClusterVersionGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ManagedClusterVersionGetResponse = ManagedClusterCodeVersionResult;

/** Optional parameters. */
export interface ManagedClusterVersionGetByEnvironmentOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getByEnvironment operation. */
export type ManagedClusterVersionGetByEnvironmentResponse =
  ManagedClusterCodeVersionResult;

/** Optional parameters. */
export interface ManagedClusterVersionListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ManagedClusterVersionListResponse =
  ManagedClusterCodeVersionResult[];

/** Optional parameters. */
export interface ManagedClusterVersionListByEnvironmentOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByEnvironment operation. */
export type ManagedClusterVersionListByEnvironmentResponse =
  ManagedClusterCodeVersionResult[];

/** Optional parameters. */
export interface ManagedUnsupportedVMSizesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ManagedUnsupportedVMSizesListResponse = ManagedVMSizesResult;

/** Optional parameters. */
export interface ManagedUnsupportedVMSizesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ManagedUnsupportedVMSizesGetResponse = ManagedVMSize;

/** Optional parameters. */
export interface ManagedUnsupportedVMSizesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ManagedUnsupportedVMSizesListNextResponse = ManagedVMSizesResult;

/** Optional parameters. */
export interface OperationStatusGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type OperationStatusGetResponse = LongRunningOperationResult;

/** Optional parameters. */
export interface OperationResultsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type OperationResultsGetResponse = OperationResultsGetHeaders;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface NodeTypesListByManagedClustersOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByManagedClusters operation. */
export type NodeTypesListByManagedClustersResponse = NodeTypeListResult;

/** Optional parameters. */
export interface NodeTypesRestartOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface NodeTypesReimageOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface NodeTypesDeleteNodeOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface NodeTypesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type NodeTypesGetResponse = NodeType;

/** Optional parameters. */
export interface NodeTypesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type NodeTypesCreateOrUpdateResponse = NodeType;

/** Optional parameters. */
export interface NodeTypesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type NodeTypesUpdateResponse = NodeType;

/** Optional parameters. */
export interface NodeTypesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface NodeTypesListByManagedClustersNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByManagedClustersNext operation. */
export type NodeTypesListByManagedClustersNextResponse = NodeTypeListResult;

/** Optional parameters. */
export interface NodeTypeSkusListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type NodeTypeSkusListResponse = NodeTypeListSkuResult;

/** Optional parameters. */
export interface NodeTypeSkusListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type NodeTypeSkusListNextResponse = NodeTypeListSkuResult;

/** Optional parameters. */
export interface ServiceFabricManagedClustersManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
