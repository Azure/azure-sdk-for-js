/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
    },
  },
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String",
        },
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String",
        },
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime",
        },
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String",
        },
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String",
        },
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const ErrorModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorModelError",
        },
      },
    },
  },
};

export const ErrorModelError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorModelError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ApplicationTypeUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationTypeUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
    },
  },
};

export const ApplicationTypeResourceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationTypeResourceList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationTypeResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ApplicationTypeVersionUpdateParameters: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ApplicationTypeVersionUpdateParameters",
      modelProperties: {
        tags: {
          serializedName: "tags",
          type: {
            name: "Dictionary",
            value: { type: { name: "String" } },
          },
        },
      },
    },
  };

export const ApplicationTypeVersionResourceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationTypeVersionResourceList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationTypeVersionResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const RuntimeResumeApplicationUpgradeParameters: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "RuntimeResumeApplicationUpgradeParameters",
      modelProperties: {
        upgradeDomainName: {
          serializedName: "upgradeDomainName",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const ManagedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "SystemAssigned",
            "UserAssigned",
            "SystemAssigned, UserAssigned",
          ],
        },
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserAssignedIdentity" },
          },
        },
      },
    },
  },
};

export const UserAssignedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ApplicationUpgradePolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationUpgradePolicy",
    modelProperties: {
      applicationHealthPolicy: {
        serializedName: "applicationHealthPolicy",
        type: {
          name: "Composite",
          className: "ApplicationHealthPolicy",
        },
      },
      forceRestart: {
        defaultValue: false,
        serializedName: "forceRestart",
        type: {
          name: "Boolean",
        },
      },
      rollingUpgradeMonitoringPolicy: {
        serializedName: "rollingUpgradeMonitoringPolicy",
        type: {
          name: "Composite",
          className: "RollingUpgradeMonitoringPolicy",
        },
      },
      instanceCloseDelayDuration: {
        serializedName: "instanceCloseDelayDuration",
        type: {
          name: "Number",
        },
      },
      upgradeMode: {
        serializedName: "upgradeMode",
        type: {
          name: "String",
        },
      },
      upgradeReplicaSetCheckTimeout: {
        serializedName: "upgradeReplicaSetCheckTimeout",
        type: {
          name: "Number",
        },
      },
      recreateApplication: {
        serializedName: "recreateApplication",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const ApplicationHealthPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationHealthPolicy",
    modelProperties: {
      considerWarningAsError: {
        serializedName: "considerWarningAsError",
        required: true,
        type: {
          name: "Boolean",
        },
      },
      maxPercentUnhealthyDeployedApplications: {
        serializedName: "maxPercentUnhealthyDeployedApplications",
        required: true,
        type: {
          name: "Number",
        },
      },
      defaultServiceTypeHealthPolicy: {
        serializedName: "defaultServiceTypeHealthPolicy",
        type: {
          name: "Composite",
          className: "ServiceTypeHealthPolicy",
        },
      },
      serviceTypeHealthPolicyMap: {
        serializedName: "serviceTypeHealthPolicyMap",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "ServiceTypeHealthPolicy" },
          },
        },
      },
    },
  },
};

export const ServiceTypeHealthPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceTypeHealthPolicy",
    modelProperties: {
      maxPercentUnhealthyServices: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0,
        },
        serializedName: "maxPercentUnhealthyServices",
        required: true,
        type: {
          name: "Number",
        },
      },
      maxPercentUnhealthyPartitionsPerService: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0,
        },
        serializedName: "maxPercentUnhealthyPartitionsPerService",
        required: true,
        type: {
          name: "Number",
        },
      },
      maxPercentUnhealthyReplicasPerPartition: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0,
        },
        serializedName: "maxPercentUnhealthyReplicasPerPartition",
        required: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const RollingUpgradeMonitoringPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RollingUpgradeMonitoringPolicy",
    modelProperties: {
      failureAction: {
        serializedName: "failureAction",
        required: true,
        type: {
          name: "String",
        },
      },
      healthCheckWaitDuration: {
        serializedName: "healthCheckWaitDuration",
        required: true,
        type: {
          name: "String",
        },
      },
      healthCheckStableDuration: {
        serializedName: "healthCheckStableDuration",
        required: true,
        type: {
          name: "String",
        },
      },
      healthCheckRetryTimeout: {
        serializedName: "healthCheckRetryTimeout",
        required: true,
        type: {
          name: "String",
        },
      },
      upgradeTimeout: {
        serializedName: "upgradeTimeout",
        required: true,
        type: {
          name: "String",
        },
      },
      upgradeDomainTimeout: {
        serializedName: "upgradeDomainTimeout",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ApplicationUserAssignedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationUserAssignedIdentity",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
      principalId: {
        serializedName: "principalId",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ApplicationUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
    },
  },
};

export const ApplicationResourceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationResourceList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Partition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Partition",
    uberParent: "Partition",
    polymorphicDiscriminator: {
      serializedName: "partitionScheme",
      clientName: "partitionScheme",
    },
    modelProperties: {
      partitionScheme: {
        serializedName: "partitionScheme",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ServiceResourcePropertiesBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceResourcePropertiesBase",
    modelProperties: {
      placementConstraints: {
        serializedName: "placementConstraints",
        type: {
          name: "String",
        },
      },
      correlationScheme: {
        serializedName: "correlationScheme",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceCorrelation",
            },
          },
        },
      },
      serviceLoadMetrics: {
        serializedName: "serviceLoadMetrics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceLoadMetric",
            },
          },
        },
      },
      servicePlacementPolicies: {
        serializedName: "servicePlacementPolicies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServicePlacementPolicy",
            },
          },
        },
      },
      defaultMoveCost: {
        serializedName: "defaultMoveCost",
        type: {
          name: "String",
        },
      },
      scalingPolicies: {
        serializedName: "scalingPolicies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScalingPolicy",
            },
          },
        },
      },
    },
  },
};

export const ServiceCorrelation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceCorrelation",
    modelProperties: {
      scheme: {
        serializedName: "scheme",
        required: true,
        type: {
          name: "String",
        },
      },
      serviceName: {
        serializedName: "serviceName",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ServiceLoadMetric: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceLoadMetric",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
      weight: {
        serializedName: "weight",
        type: {
          name: "String",
        },
      },
      primaryDefaultLoad: {
        serializedName: "primaryDefaultLoad",
        type: {
          name: "Number",
        },
      },
      secondaryDefaultLoad: {
        serializedName: "secondaryDefaultLoad",
        type: {
          name: "Number",
        },
      },
      defaultLoad: {
        serializedName: "defaultLoad",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const ServicePlacementPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServicePlacementPolicy",
    uberParent: "ServicePlacementPolicy",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type",
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ScalingPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScalingPolicy",
    modelProperties: {
      scalingMechanism: {
        serializedName: "scalingMechanism",
        type: {
          name: "Composite",
          className: "ScalingMechanism",
        },
      },
      scalingTrigger: {
        serializedName: "scalingTrigger",
        type: {
          name: "Composite",
          className: "ScalingTrigger",
        },
      },
    },
  },
};

export const ScalingMechanism: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScalingMechanism",
    uberParent: "ScalingMechanism",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind",
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ScalingTrigger: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScalingTrigger",
    uberParent: "ScalingTrigger",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind",
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ServiceUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
    },
  },
};

export const ServiceResourceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceResourceList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ManagedClusterListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedCluster",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const LoadBalancingRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LoadBalancingRule",
    modelProperties: {
      frontendPort: {
        constraints: {
          InclusiveMaximum: 65534,
          InclusiveMinimum: 1,
        },
        serializedName: "frontendPort",
        required: true,
        type: {
          name: "Number",
        },
      },
      backendPort: {
        constraints: {
          InclusiveMaximum: 65534,
          InclusiveMinimum: 1,
        },
        serializedName: "backendPort",
        required: true,
        type: {
          name: "Number",
        },
      },
      protocol: {
        serializedName: "protocol",
        required: true,
        type: {
          name: "String",
        },
      },
      probePort: {
        constraints: {
          InclusiveMaximum: 65534,
          InclusiveMinimum: 1,
        },
        serializedName: "probePort",
        type: {
          name: "Number",
        },
      },
      probeProtocol: {
        serializedName: "probeProtocol",
        required: true,
        type: {
          name: "String",
        },
      },
      probeRequestPath: {
        serializedName: "probeRequestPath",
        type: {
          name: "String",
        },
      },
      loadDistribution: {
        serializedName: "loadDistribution",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const NetworkSecurityRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkSecurityRule",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        type: {
          name: "String",
        },
      },
      protocol: {
        serializedName: "protocol",
        required: true,
        type: {
          name: "String",
        },
      },
      sourceAddressPrefixes: {
        serializedName: "sourceAddressPrefixes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      destinationAddressPrefixes: {
        serializedName: "destinationAddressPrefixes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      sourcePortRanges: {
        serializedName: "sourcePortRanges",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      destinationPortRanges: {
        serializedName: "destinationPortRanges",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      sourceAddressPrefix: {
        serializedName: "sourceAddressPrefix",
        type: {
          name: "String",
        },
      },
      destinationAddressPrefix: {
        serializedName: "destinationAddressPrefix",
        type: {
          name: "String",
        },
      },
      sourcePortRange: {
        serializedName: "sourcePortRange",
        type: {
          name: "String",
        },
      },
      destinationPortRange: {
        serializedName: "destinationPortRange",
        type: {
          name: "String",
        },
      },
      access: {
        serializedName: "access",
        required: true,
        type: {
          name: "String",
        },
      },
      priority: {
        constraints: {
          InclusiveMaximum: 3000,
          InclusiveMinimum: 1000,
        },
        serializedName: "priority",
        required: true,
        type: {
          name: "Number",
        },
      },
      direction: {
        serializedName: "direction",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ClientCertificate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClientCertificate",
    modelProperties: {
      isAdmin: {
        serializedName: "isAdmin",
        required: true,
        type: {
          name: "Boolean",
        },
      },
      thumbprint: {
        serializedName: "thumbprint",
        type: {
          name: "String",
        },
      },
      commonName: {
        serializedName: "commonName",
        type: {
          name: "String",
        },
      },
      issuerThumbprint: {
        serializedName: "issuerThumbprint",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AzureActiveDirectory: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureActiveDirectory",
    modelProperties: {
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "String",
        },
      },
      clusterApplication: {
        serializedName: "clusterApplication",
        type: {
          name: "String",
        },
      },
      clientApplication: {
        serializedName: "clientApplication",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SettingsSectionDescription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SettingsSectionDescription",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
      parameters: {
        serializedName: "parameters",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SettingsParameterDescription",
            },
          },
        },
      },
    },
  },
};

export const SettingsParameterDescription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SettingsParameterDescription",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ApplicationTypeVersionsCleanupPolicy: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ApplicationTypeVersionsCleanupPolicy",
      modelProperties: {
        maxUnusedVersionsToKeep: {
          constraints: {
            InclusiveMinimum: 0,
          },
          serializedName: "maxUnusedVersionsToKeep",
          required: true,
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const IpTag: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpTag",
    modelProperties: {
      ipTagType: {
        serializedName: "ipTagType",
        required: true,
        type: {
          name: "String",
        },
      },
      tag: {
        serializedName: "tag",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Subnet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Subnet",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
      enableIpv6: {
        serializedName: "enableIpv6",
        type: {
          name: "Boolean",
        },
      },
      privateEndpointNetworkPolicies: {
        serializedName: "privateEndpointNetworkPolicies",
        type: {
          name: "String",
        },
      },
      privateLinkServiceNetworkPolicies: {
        serializedName: "privateLinkServiceNetworkPolicies",
        type: {
          name: "String",
        },
      },
      networkSecurityGroupId: {
        serializedName: "networkSecurityGroupId",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ServiceEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceEndpoint",
    modelProperties: {
      service: {
        serializedName: "service",
        required: true,
        type: {
          name: "String",
        },
      },
      locations: {
        serializedName: "locations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const ClusterUpgradePolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterUpgradePolicy",
    modelProperties: {
      forceRestart: {
        serializedName: "forceRestart",
        type: {
          name: "Boolean",
        },
      },
      healthPolicy: {
        serializedName: "healthPolicy",
        type: {
          name: "Composite",
          className: "ClusterHealthPolicy",
        },
      },
      deltaHealthPolicy: {
        serializedName: "deltaHealthPolicy",
        type: {
          name: "Composite",
          className: "ClusterUpgradeDeltaHealthPolicy",
        },
      },
      monitoringPolicy: {
        serializedName: "monitoringPolicy",
        type: {
          name: "Composite",
          className: "ClusterMonitoringPolicy",
        },
      },
      upgradeReplicaSetCheckTimeout: {
        serializedName: "upgradeReplicaSetCheckTimeout",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ClusterHealthPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterHealthPolicy",
    modelProperties: {
      maxPercentUnhealthyNodes: {
        defaultValue: 0,
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0,
        },
        serializedName: "maxPercentUnhealthyNodes",
        required: true,
        type: {
          name: "Number",
        },
      },
      maxPercentUnhealthyApplications: {
        defaultValue: 0,
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0,
        },
        serializedName: "maxPercentUnhealthyApplications",
        required: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const ClusterUpgradeDeltaHealthPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterUpgradeDeltaHealthPolicy",
    modelProperties: {
      maxPercentDeltaUnhealthyNodes: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0,
        },
        serializedName: "maxPercentDeltaUnhealthyNodes",
        required: true,
        type: {
          name: "Number",
        },
      },
      maxPercentUpgradeDomainDeltaUnhealthyNodes: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0,
        },
        serializedName: "maxPercentUpgradeDomainDeltaUnhealthyNodes",
        type: {
          name: "Number",
        },
      },
      maxPercentDeltaUnhealthyApplications: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0,
        },
        serializedName: "maxPercentDeltaUnhealthyApplications",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const ClusterMonitoringPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterMonitoringPolicy",
    modelProperties: {
      healthCheckWaitDuration: {
        serializedName: "healthCheckWaitDuration",
        required: true,
        type: {
          name: "String",
        },
      },
      healthCheckStableDuration: {
        serializedName: "healthCheckStableDuration",
        required: true,
        type: {
          name: "String",
        },
      },
      healthCheckRetryTimeout: {
        serializedName: "healthCheckRetryTimeout",
        required: true,
        type: {
          name: "String",
        },
      },
      upgradeTimeout: {
        serializedName: "upgradeTimeout",
        required: true,
        type: {
          name: "String",
        },
      },
      upgradeDomainTimeout: {
        serializedName: "upgradeDomainTimeout",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Sku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String",
        },
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
    },
  },
};

export const ManagedClusterUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
    },
  },
};

export const ManagedAzResiliencyStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedAzResiliencyStatus",
    modelProperties: {
      baseResourceStatus: {
        serializedName: "baseResourceStatus",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceAzStatus",
            },
          },
        },
      },
      isClusterZoneResilient: {
        serializedName: "isClusterZoneResilient",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const ResourceAzStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceAzStatus",
    modelProperties: {
      resourceName: {
        serializedName: "resourceName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resourceType: {
        serializedName: "resourceType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      isZoneResilient: {
        serializedName: "isZoneResilient",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ManagedMaintenanceWindowStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedMaintenanceWindowStatus",
    modelProperties: {
      isWindowEnabled: {
        serializedName: "isWindowEnabled",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      isRegionReady: {
        serializedName: "isRegionReady",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      isWindowActive: {
        serializedName: "isWindowActive",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      canApplyUpdates: {
        serializedName: "canApplyUpdates",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      lastWindowStatusUpdateAtUTC: {
        serializedName: "lastWindowStatusUpdateAtUTC",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      lastWindowStartTimeUTC: {
        serializedName: "lastWindowStartTimeUTC",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      lastWindowEndTimeUTC: {
        serializedName: "lastWindowEndTimeUTC",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const ManagedClusterCodeVersionResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterCodeVersionResult",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        type: {
          name: "String",
        },
      },
      clusterCodeVersion: {
        serializedName: "properties.clusterCodeVersion",
        type: {
          name: "String",
        },
      },
      supportExpiryUtc: {
        serializedName: "properties.supportExpiryUtc",
        type: {
          name: "String",
        },
      },
      osType: {
        serializedName: "properties.osType",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ManagedVMSizesResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedVMSizesResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedVMSize",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ManagedVMSize: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedVMSize",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "VMSize",
        },
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const VMSize: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMSize",
    modelProperties: {
      size: {
        serializedName: "size",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const LongRunningOperationResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LongRunningOperationResult",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime",
        },
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime",
        },
      },
      percentComplete: {
        serializedName: "percentComplete",
        type: {
          name: "Number",
        },
      },
      status: {
        serializedName: "status",
        type: {
          name: "String",
        },
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorModelError",
        },
      },
    },
  },
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationResult",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationResult",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      isDataAction: {
        serializedName: "isDataAction",
        type: {
          name: "Boolean",
        },
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "AvailableOperationDisplay",
        },
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String",
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AvailableOperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableOperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String",
        },
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String",
        },
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const NodeTypeListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodeTypeListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NodeType",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const EndpointRangeDescription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EndpointRangeDescription",
    modelProperties: {
      startPort: {
        serializedName: "startPort",
        required: true,
        type: {
          name: "Number",
        },
      },
      endPort: {
        serializedName: "endPort",
        required: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const VaultSecretGroup: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultSecretGroup",
    modelProperties: {
      sourceVault: {
        serializedName: "sourceVault",
        type: {
          name: "Composite",
          className: "SubResource",
        },
      },
      vaultCertificates: {
        serializedName: "vaultCertificates",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VaultCertificate",
            },
          },
        },
      },
    },
  },
};

export const SubResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubResource",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const VaultCertificate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultCertificate",
    modelProperties: {
      certificateUrl: {
        serializedName: "certificateUrl",
        required: true,
        type: {
          name: "String",
        },
      },
      certificateStore: {
        serializedName: "certificateStore",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const VmssExtension: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VmssExtension",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
      publisher: {
        serializedName: "properties.publisher",
        required: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "properties.type",
        required: true,
        type: {
          name: "String",
        },
      },
      typeHandlerVersion: {
        serializedName: "properties.typeHandlerVersion",
        required: true,
        type: {
          name: "String",
        },
      },
      autoUpgradeMinorVersion: {
        serializedName: "properties.autoUpgradeMinorVersion",
        type: {
          name: "Boolean",
        },
      },
      settings: {
        serializedName: "properties.settings",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
      protectedSettings: {
        serializedName: "properties.protectedSettings",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
      forceUpdateTag: {
        serializedName: "properties.forceUpdateTag",
        type: {
          name: "String",
        },
      },
      provisionAfterExtensions: {
        serializedName: "properties.provisionAfterExtensions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      enableAutomaticUpgrade: {
        serializedName: "properties.enableAutomaticUpgrade",
        type: {
          name: "Boolean",
        },
      },
      setupOrder: {
        serializedName: "properties.setupOrder",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const VmManagedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VmManagedIdentity",
    modelProperties: {
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const FrontendConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FrontendConfiguration",
    modelProperties: {
      ipAddressType: {
        defaultValue: "IPv4",
        serializedName: "ipAddressType",
        type: {
          name: "String",
        },
      },
      loadBalancerBackendAddressPoolId: {
        serializedName: "loadBalancerBackendAddressPoolId",
        type: {
          name: "String",
        },
      },
      loadBalancerInboundNatPoolId: {
        serializedName: "loadBalancerInboundNatPoolId",
        type: {
          name: "String",
        },
      },
      applicationGatewayBackendAddressPoolId: {
        serializedName: "applicationGatewayBackendAddressPoolId",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const VmssDataDisk: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VmssDataDisk",
    modelProperties: {
      lun: {
        constraints: {
          InclusiveMinimum: 1,
        },
        serializedName: "lun",
        required: true,
        type: {
          name: "Number",
        },
      },
      diskSizeGB: {
        serializedName: "diskSizeGB",
        required: true,
        type: {
          name: "Number",
        },
      },
      diskType: {
        defaultValue: "StandardSSD_LRS",
        serializedName: "diskType",
        required: true,
        type: {
          name: "String",
        },
      },
      diskLetter: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z]{1}$"),
        },
        serializedName: "diskLetter",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const NodeTypeNatConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodeTypeNatConfig",
    modelProperties: {
      backendPort: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1,
        },
        serializedName: "backendPort",
        type: {
          name: "Number",
        },
      },
      frontendPortRangeStart: {
        constraints: {
          InclusiveMaximum: 65534,
          InclusiveMinimum: 1,
        },
        serializedName: "frontendPortRangeStart",
        type: {
          name: "Number",
        },
      },
      frontendPortRangeEnd: {
        constraints: {
          InclusiveMaximum: 65534,
          InclusiveMinimum: 1,
        },
        serializedName: "frontendPortRangeEnd",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const VmImagePlan: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VmImagePlan",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      product: {
        serializedName: "product",
        type: {
          name: "String",
        },
      },
      promotionCode: {
        serializedName: "promotionCode",
        type: {
          name: "String",
        },
      },
      publisher: {
        serializedName: "publisher",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AdditionalNetworkInterfaceConfiguration: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "AdditionalNetworkInterfaceConfiguration",
      modelProperties: {
        name: {
          serializedName: "name",
          required: true,
          type: {
            name: "String",
          },
        },
        enableAcceleratedNetworking: {
          serializedName: "enableAcceleratedNetworking",
          type: {
            name: "Boolean",
          },
        },
        dscpConfiguration: {
          serializedName: "dscpConfiguration",
          type: {
            name: "Composite",
            className: "SubResource",
          },
        },
        ipConfigurations: {
          serializedName: "ipConfigurations",
          required: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "IpConfiguration",
              },
            },
          },
        },
      },
    },
  };

export const IpConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpConfiguration",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
      applicationGatewayBackendAddressPools: {
        serializedName: "applicationGatewayBackendAddressPools",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubResource",
            },
          },
        },
      },
      loadBalancerBackendAddressPools: {
        serializedName: "loadBalancerBackendAddressPools",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubResource",
            },
          },
        },
      },
      loadBalancerInboundNatPools: {
        serializedName: "loadBalancerInboundNatPools",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubResource",
            },
          },
        },
      },
      subnet: {
        serializedName: "subnet",
        type: {
          name: "Composite",
          className: "SubResource",
        },
      },
      privateIPAddressVersion: {
        defaultValue: "IPv4",
        serializedName: "privateIPAddressVersion",
        type: {
          name: "String",
        },
      },
      publicIPAddressConfiguration: {
        serializedName: "publicIPAddressConfiguration",
        type: {
          name: "Composite",
          className: "IpConfigurationPublicIPAddressConfiguration",
        },
      },
    },
  },
};

export const IpConfigurationPublicIPAddressConfiguration: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "IpConfigurationPublicIPAddressConfiguration",
      modelProperties: {
        name: {
          serializedName: "name",
          required: true,
          type: {
            name: "String",
          },
        },
        ipTags: {
          serializedName: "ipTags",
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "IpTag",
              },
            },
          },
        },
        publicIPAddressVersion: {
          defaultValue: "IPv4",
          serializedName: "publicIPAddressVersion",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const VmApplication: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VmApplication",
    modelProperties: {
      configurationReference: {
        serializedName: "configurationReference",
        type: {
          name: "String",
        },
      },
      enableAutomaticUpgrade: {
        serializedName: "enableAutomaticUpgrade",
        type: {
          name: "Boolean",
        },
      },
      order: {
        serializedName: "order",
        type: {
          name: "Number",
        },
      },
      packageReferenceId: {
        serializedName: "packageReferenceId",
        required: true,
        type: {
          name: "String",
        },
      },
      vmGalleryTags: {
        serializedName: "vmGalleryTags",
        type: {
          name: "String",
        },
      },
      treatFailureAsDeploymentFailure: {
        serializedName: "treatFailureAsDeploymentFailure",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const NodeTypeSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodeTypeSku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "String",
        },
      },
      capacity: {
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1,
        },
        serializedName: "capacity",
        required: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const ManagedProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedProxyResource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
    },
  },
};

export const NodeTypeActionParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodeTypeActionParameters",
    modelProperties: {
      nodes: {
        serializedName: "nodes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      force: {
        serializedName: "force",
        type: {
          name: "Boolean",
        },
      },
      updateType: {
        serializedName: "updateType",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const NodeTypeListSkuResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodeTypeListSkuResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NodeTypeAvailableSku",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const NodeTypeAvailableSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodeTypeAvailableSku",
    modelProperties: {
      resourceType: {
        serializedName: "resourceType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "NodeTypeSupportedSku",
        },
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Composite",
          className: "NodeTypeSkuCapacity",
        },
      },
    },
  },
};

export const NodeTypeSupportedSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodeTypeSupportedSku",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      tier: {
        serializedName: "tier",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const NodeTypeSkuCapacity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodeTypeSkuCapacity",
    modelProperties: {
      minimum: {
        serializedName: "minimum",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      maximum: {
        serializedName: "maximum",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      default: {
        serializedName: "default",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      scaleType: {
        defaultValue: "None",
        serializedName: "scaleType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const NodeTypeUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodeTypeUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "NodeTypeSku",
        },
      },
    },
  },
};

export const ApplicationTypeResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationTypeResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ApplicationTypeVersionResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationTypeVersionResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      appPackageUrl: {
        serializedName: "properties.appPackageUrl",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ApplicationResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedIdentity",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      version: {
        serializedName: "properties.version",
        type: {
          name: "String",
        },
      },
      parameters: {
        serializedName: "properties.parameters",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      upgradePolicy: {
        serializedName: "properties.upgradePolicy",
        type: {
          name: "Composite",
          className: "ApplicationUpgradePolicy",
        },
      },
      managedIdentities: {
        serializedName: "properties.managedIdentities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationUserAssignedIdentity",
            },
          },
        },
      },
    },
  },
};

export const ServiceResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ServiceResourceProperties",
        },
      },
    },
  },
};

export const NamedPartitionScheme: coreClient.CompositeMapper = {
  serializedName: "Named",
  type: {
    name: "Composite",
    className: "NamedPartitionScheme",
    uberParent: "Partition",
    polymorphicDiscriminator: Partition.type.polymorphicDiscriminator,
    modelProperties: {
      ...Partition.type.modelProperties,
      names: {
        serializedName: "names",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const SingletonPartitionScheme: coreClient.CompositeMapper = {
  serializedName: "Singleton",
  type: {
    name: "Composite",
    className: "SingletonPartitionScheme",
    uberParent: "Partition",
    polymorphicDiscriminator: Partition.type.polymorphicDiscriminator,
    modelProperties: {
      ...Partition.type.modelProperties,
    },
  },
};

export const UniformInt64RangePartitionScheme: coreClient.CompositeMapper = {
  serializedName: "UniformInt64Range",
  type: {
    name: "Composite",
    className: "UniformInt64RangePartitionScheme",
    uberParent: "Partition",
    polymorphicDiscriminator: Partition.type.polymorphicDiscriminator,
    modelProperties: {
      ...Partition.type.modelProperties,
      count: {
        serializedName: "count",
        required: true,
        type: {
          name: "Number",
        },
      },
      lowKey: {
        serializedName: "lowKey",
        required: true,
        type: {
          name: "Number",
        },
      },
      highKey: {
        serializedName: "highKey",
        required: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const ServiceResourceProperties: coreClient.CompositeMapper = {
  serializedName: "ServiceResourceProperties",
  type: {
    name: "Composite",
    className: "ServiceResourceProperties",
    uberParent: "ServiceResourcePropertiesBase",
    polymorphicDiscriminator: {
      serializedName: "serviceKind",
      clientName: "serviceKind",
    },
    modelProperties: {
      ...ServiceResourcePropertiesBase.type.modelProperties,
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      serviceKind: {
        serializedName: "serviceKind",
        required: true,
        type: {
          name: "String",
        },
      },
      serviceTypeName: {
        serializedName: "serviceTypeName",
        required: true,
        type: {
          name: "String",
        },
      },
      partitionDescription: {
        serializedName: "partitionDescription",
        type: {
          name: "Composite",
          className: "Partition",
        },
      },
      servicePackageActivationMode: {
        serializedName: "servicePackageActivationMode",
        type: {
          name: "String",
        },
      },
      serviceDnsName: {
        serializedName: "serviceDnsName",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ServicePlacementInvalidDomainPolicy: coreClient.CompositeMapper = {
  serializedName: "InvalidDomain",
  type: {
    name: "Composite",
    className: "ServicePlacementInvalidDomainPolicy",
    uberParent: "ServicePlacementPolicy",
    polymorphicDiscriminator:
      ServicePlacementPolicy.type.polymorphicDiscriminator,
    modelProperties: {
      ...ServicePlacementPolicy.type.modelProperties,
      domainName: {
        serializedName: "domainName",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ServicePlacementNonPartiallyPlaceServicePolicy: coreClient.CompositeMapper =
  {
    serializedName: "NonPartiallyPlaceService",
    type: {
      name: "Composite",
      className: "ServicePlacementNonPartiallyPlaceServicePolicy",
      uberParent: "ServicePlacementPolicy",
      polymorphicDiscriminator:
        ServicePlacementPolicy.type.polymorphicDiscriminator,
      modelProperties: {
        ...ServicePlacementPolicy.type.modelProperties,
      },
    },
  };

export const ServicePlacementPreferPrimaryDomainPolicy: coreClient.CompositeMapper =
  {
    serializedName: "PreferredPrimaryDomain",
    type: {
      name: "Composite",
      className: "ServicePlacementPreferPrimaryDomainPolicy",
      uberParent: "ServicePlacementPolicy",
      polymorphicDiscriminator:
        ServicePlacementPolicy.type.polymorphicDiscriminator,
      modelProperties: {
        ...ServicePlacementPolicy.type.modelProperties,
        domainName: {
          serializedName: "domainName",
          required: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const ServicePlacementRequiredDomainPolicy: coreClient.CompositeMapper =
  {
    serializedName: "RequiredDomain",
    type: {
      name: "Composite",
      className: "ServicePlacementRequiredDomainPolicy",
      uberParent: "ServicePlacementPolicy",
      polymorphicDiscriminator:
        ServicePlacementPolicy.type.polymorphicDiscriminator,
      modelProperties: {
        ...ServicePlacementPolicy.type.modelProperties,
        domainName: {
          serializedName: "domainName",
          required: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const ServicePlacementRequireDomainDistributionPolicy: coreClient.CompositeMapper =
  {
    serializedName: "RequiredDomainDistribution",
    type: {
      name: "Composite",
      className: "ServicePlacementRequireDomainDistributionPolicy",
      uberParent: "ServicePlacementPolicy",
      polymorphicDiscriminator:
        ServicePlacementPolicy.type.polymorphicDiscriminator,
      modelProperties: {
        ...ServicePlacementPolicy.type.modelProperties,
        domainName: {
          serializedName: "domainName",
          required: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const AddRemoveIncrementalNamedPartitionScalingMechanism: coreClient.CompositeMapper =
  {
    serializedName: "AddRemoveIncrementalNamedPartition",
    type: {
      name: "Composite",
      className: "AddRemoveIncrementalNamedPartitionScalingMechanism",
      uberParent: "ScalingMechanism",
      polymorphicDiscriminator: ScalingMechanism.type.polymorphicDiscriminator,
      modelProperties: {
        ...ScalingMechanism.type.modelProperties,
        minPartitionCount: {
          serializedName: "minPartitionCount",
          required: true,
          type: {
            name: "Number",
          },
        },
        maxPartitionCount: {
          serializedName: "maxPartitionCount",
          required: true,
          type: {
            name: "Number",
          },
        },
        scaleIncrement: {
          serializedName: "scaleIncrement",
          required: true,
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const PartitionInstanceCountScaleMechanism: coreClient.CompositeMapper =
  {
    serializedName: "ScalePartitionInstanceCount",
    type: {
      name: "Composite",
      className: "PartitionInstanceCountScaleMechanism",
      uberParent: "ScalingMechanism",
      polymorphicDiscriminator: ScalingMechanism.type.polymorphicDiscriminator,
      modelProperties: {
        ...ScalingMechanism.type.modelProperties,
        minInstanceCount: {
          serializedName: "minInstanceCount",
          required: true,
          type: {
            name: "Number",
          },
        },
        maxInstanceCount: {
          serializedName: "maxInstanceCount",
          required: true,
          type: {
            name: "Number",
          },
        },
        scaleIncrement: {
          serializedName: "scaleIncrement",
          required: true,
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const AveragePartitionLoadScalingTrigger: coreClient.CompositeMapper = {
  serializedName: "AveragePartitionLoadTrigger",
  type: {
    name: "Composite",
    className: "AveragePartitionLoadScalingTrigger",
    uberParent: "ScalingTrigger",
    polymorphicDiscriminator: ScalingTrigger.type.polymorphicDiscriminator,
    modelProperties: {
      ...ScalingTrigger.type.modelProperties,
      metricName: {
        serializedName: "metricName",
        required: true,
        type: {
          name: "String",
        },
      },
      lowerLoadThreshold: {
        serializedName: "lowerLoadThreshold",
        required: true,
        type: {
          name: "Number",
        },
      },
      upperLoadThreshold: {
        serializedName: "upperLoadThreshold",
        required: true,
        type: {
          name: "Number",
        },
      },
      scaleInterval: {
        serializedName: "scaleInterval",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AverageServiceLoadScalingTrigger: coreClient.CompositeMapper = {
  serializedName: "AverageServiceLoadTrigger",
  type: {
    name: "Composite",
    className: "AverageServiceLoadScalingTrigger",
    uberParent: "ScalingTrigger",
    polymorphicDiscriminator: ScalingTrigger.type.polymorphicDiscriminator,
    modelProperties: {
      ...ScalingTrigger.type.modelProperties,
      metricName: {
        serializedName: "metricName",
        required: true,
        type: {
          name: "String",
        },
      },
      lowerLoadThreshold: {
        serializedName: "lowerLoadThreshold",
        required: true,
        type: {
          name: "Number",
        },
      },
      upperLoadThreshold: {
        serializedName: "upperLoadThreshold",
        required: true,
        type: {
          name: "Number",
        },
      },
      scaleInterval: {
        serializedName: "scaleInterval",
        required: true,
        type: {
          name: "String",
        },
      },
      useOnlyPrimaryLoad: {
        serializedName: "useOnlyPrimaryLoad",
        required: true,
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const ManagedCluster: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedCluster",
    modelProperties: {
      ...Resource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku",
        },
      },
      dnsName: {
        serializedName: "properties.dnsName",
        type: {
          name: "String",
        },
      },
      fqdn: {
        serializedName: "properties.fqdn",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      ipv4Address: {
        serializedName: "properties.ipv4Address",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      clusterId: {
        serializedName: "properties.clusterId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      clusterState: {
        serializedName: "properties.clusterState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      clusterCertificateThumbprints: {
        serializedName: "properties.clusterCertificateThumbprints",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      clientConnectionPort: {
        defaultValue: 19000,
        serializedName: "properties.clientConnectionPort",
        type: {
          name: "Number",
        },
      },
      httpGatewayConnectionPort: {
        defaultValue: 19080,
        serializedName: "properties.httpGatewayConnectionPort",
        type: {
          name: "Number",
        },
      },
      adminUserName: {
        serializedName: "properties.adminUserName",
        type: {
          name: "String",
        },
      },
      adminPassword: {
        serializedName: "properties.adminPassword",
        type: {
          name: "String",
        },
      },
      loadBalancingRules: {
        serializedName: "properties.loadBalancingRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LoadBalancingRule",
            },
          },
        },
      },
      allowRdpAccess: {
        serializedName: "properties.allowRdpAccess",
        type: {
          name: "Boolean",
        },
      },
      networkSecurityRules: {
        serializedName: "properties.networkSecurityRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkSecurityRule",
            },
          },
        },
      },
      clients: {
        serializedName: "properties.clients",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClientCertificate",
            },
          },
        },
      },
      azureActiveDirectory: {
        serializedName: "properties.azureActiveDirectory",
        type: {
          name: "Composite",
          className: "AzureActiveDirectory",
        },
      },
      fabricSettings: {
        serializedName: "properties.fabricSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SettingsSectionDescription",
            },
          },
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      clusterCodeVersion: {
        serializedName: "properties.clusterCodeVersion",
        type: {
          name: "String",
        },
      },
      clusterUpgradeMode: {
        defaultValue: "Automatic",
        serializedName: "properties.clusterUpgradeMode",
        type: {
          name: "String",
        },
      },
      clusterUpgradeCadence: {
        serializedName: "properties.clusterUpgradeCadence",
        type: {
          name: "String",
        },
      },
      addonFeatures: {
        serializedName: "properties.addonFeatures",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      enableAutoOSUpgrade: {
        serializedName: "properties.enableAutoOSUpgrade",
        type: {
          name: "Boolean",
        },
      },
      zonalResiliency: {
        defaultValue: false,
        serializedName: "properties.zonalResiliency",
        type: {
          name: "Boolean",
        },
      },
      applicationTypeVersionsCleanupPolicy: {
        serializedName: "properties.applicationTypeVersionsCleanupPolicy",
        type: {
          name: "Composite",
          className: "ApplicationTypeVersionsCleanupPolicy",
        },
      },
      enableIpv6: {
        serializedName: "properties.enableIpv6",
        type: {
          name: "Boolean",
        },
      },
      subnetId: {
        serializedName: "properties.subnetId",
        type: {
          name: "String",
        },
      },
      ipTags: {
        serializedName: "properties.ipTags",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpTag",
            },
          },
        },
      },
      ipv6Address: {
        serializedName: "properties.ipv6Address",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      enableServicePublicIP: {
        serializedName: "properties.enableServicePublicIP",
        type: {
          name: "Boolean",
        },
      },
      auxiliarySubnets: {
        serializedName: "properties.auxiliarySubnets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Subnet",
            },
          },
        },
      },
      serviceEndpoints: {
        serializedName: "properties.serviceEndpoints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceEndpoint",
            },
          },
        },
      },
      zonalUpdateMode: {
        serializedName: "properties.zonalUpdateMode",
        type: {
          name: "String",
        },
      },
      useCustomVnet: {
        serializedName: "properties.useCustomVnet",
        type: {
          name: "Boolean",
        },
      },
      publicIPPrefixId: {
        serializedName: "properties.publicIPPrefixId",
        type: {
          name: "String",
        },
      },
      publicIPv6PrefixId: {
        serializedName: "properties.publicIPv6PrefixId",
        type: {
          name: "String",
        },
      },
      ddosProtectionPlanId: {
        serializedName: "properties.ddosProtectionPlanId",
        type: {
          name: "String",
        },
      },
      upgradeDescription: {
        serializedName: "properties.upgradeDescription",
        type: {
          name: "Composite",
          className: "ClusterUpgradePolicy",
        },
      },
      httpGatewayTokenAuthConnectionPort: {
        serializedName: "properties.httpGatewayTokenAuthConnectionPort",
        type: {
          name: "Number",
        },
      },
      enableHttpGatewayExclusiveAuthMode: {
        serializedName: "properties.enableHttpGatewayExclusiveAuthMode",
        type: {
          name: "Boolean",
        },
      },
      autoGeneratedDomainNameLabelScope: {
        serializedName: "properties.autoGeneratedDomainNameLabelScope",
        type: {
          name: "String",
        },
      },
      customFqdn: {
        serializedName: "properties.customFqdn",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const NodeType: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodeType",
    modelProperties: {
      ...ManagedProxyResource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "NodeTypeSku",
        },
      },
      isPrimary: {
        serializedName: "properties.isPrimary",
        type: {
          name: "Boolean",
        },
      },
      vmInstanceCount: {
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: -1,
        },
        serializedName: "properties.vmInstanceCount",
        type: {
          name: "Number",
        },
      },
      dataDiskSizeGB: {
        serializedName: "properties.dataDiskSizeGB",
        type: {
          name: "Number",
        },
      },
      dataDiskType: {
        defaultValue: "StandardSSD_LRS",
        serializedName: "properties.dataDiskType",
        type: {
          name: "String",
        },
      },
      dataDiskLetter: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z]{1}$"),
        },
        serializedName: "properties.dataDiskLetter",
        type: {
          name: "String",
        },
      },
      placementProperties: {
        serializedName: "properties.placementProperties",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      capacities: {
        serializedName: "properties.capacities",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      applicationPorts: {
        serializedName: "properties.applicationPorts",
        type: {
          name: "Composite",
          className: "EndpointRangeDescription",
        },
      },
      ephemeralPorts: {
        serializedName: "properties.ephemeralPorts",
        type: {
          name: "Composite",
          className: "EndpointRangeDescription",
        },
      },
      vmSize: {
        serializedName: "properties.vmSize",
        type: {
          name: "String",
        },
      },
      vmImagePublisher: {
        serializedName: "properties.vmImagePublisher",
        type: {
          name: "String",
        },
      },
      vmImageOffer: {
        serializedName: "properties.vmImageOffer",
        type: {
          name: "String",
        },
      },
      vmImageSku: {
        serializedName: "properties.vmImageSku",
        type: {
          name: "String",
        },
      },
      vmImageVersion: {
        serializedName: "properties.vmImageVersion",
        type: {
          name: "String",
        },
      },
      vmSecrets: {
        serializedName: "properties.vmSecrets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VaultSecretGroup",
            },
          },
        },
      },
      vmExtensions: {
        serializedName: "properties.vmExtensions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VmssExtension",
            },
          },
        },
      },
      vmManagedIdentity: {
        serializedName: "properties.vmManagedIdentity",
        type: {
          name: "Composite",
          className: "VmManagedIdentity",
        },
      },
      isStateless: {
        defaultValue: false,
        serializedName: "properties.isStateless",
        type: {
          name: "Boolean",
        },
      },
      multiplePlacementGroups: {
        defaultValue: false,
        serializedName: "properties.multiplePlacementGroups",
        type: {
          name: "Boolean",
        },
      },
      frontendConfigurations: {
        serializedName: "properties.frontendConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FrontendConfiguration",
            },
          },
        },
      },
      networkSecurityRules: {
        serializedName: "properties.networkSecurityRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkSecurityRule",
            },
          },
        },
      },
      additionalDataDisks: {
        serializedName: "properties.additionalDataDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VmssDataDisk",
            },
          },
        },
      },
      enableEncryptionAtHost: {
        defaultValue: false,
        serializedName: "properties.enableEncryptionAtHost",
        type: {
          name: "Boolean",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      enableAcceleratedNetworking: {
        serializedName: "properties.enableAcceleratedNetworking",
        type: {
          name: "Boolean",
        },
      },
      useDefaultPublicLoadBalancer: {
        serializedName: "properties.useDefaultPublicLoadBalancer",
        type: {
          name: "Boolean",
        },
      },
      useTempDataDisk: {
        serializedName: "properties.useTempDataDisk",
        type: {
          name: "Boolean",
        },
      },
      enableOverProvisioning: {
        serializedName: "properties.enableOverProvisioning",
        type: {
          name: "Boolean",
        },
      },
      zones: {
        serializedName: "properties.zones",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      isSpotVM: {
        serializedName: "properties.isSpotVM",
        type: {
          name: "Boolean",
        },
      },
      hostGroupId: {
        serializedName: "properties.hostGroupId",
        type: {
          name: "String",
        },
      },
      useEphemeralOSDisk: {
        serializedName: "properties.useEphemeralOSDisk",
        type: {
          name: "Boolean",
        },
      },
      spotRestoreTimeout: {
        serializedName: "properties.spotRestoreTimeout",
        type: {
          name: "String",
        },
      },
      evictionPolicy: {
        serializedName: "properties.evictionPolicy",
        type: {
          name: "String",
        },
      },
      vmImageResourceId: {
        serializedName: "properties.vmImageResourceId",
        type: {
          name: "String",
        },
      },
      subnetId: {
        serializedName: "properties.subnetId",
        type: {
          name: "String",
        },
      },
      vmSetupActions: {
        serializedName: "properties.vmSetupActions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      securityType: {
        serializedName: "properties.securityType",
        type: {
          name: "String",
        },
      },
      secureBootEnabled: {
        serializedName: "properties.secureBootEnabled",
        type: {
          name: "Boolean",
        },
      },
      enableNodePublicIP: {
        serializedName: "properties.enableNodePublicIP",
        type: {
          name: "Boolean",
        },
      },
      enableNodePublicIPv6: {
        serializedName: "properties.enableNodePublicIPv6",
        type: {
          name: "Boolean",
        },
      },
      vmSharedGalleryImageId: {
        serializedName: "properties.vmSharedGalleryImageId",
        type: {
          name: "String",
        },
      },
      natGatewayId: {
        serializedName: "properties.natGatewayId",
        type: {
          name: "String",
        },
      },
      natConfigurations: {
        serializedName: "properties.natConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NodeTypeNatConfig",
            },
          },
        },
      },
      vmImagePlan: {
        serializedName: "properties.vmImagePlan",
        type: {
          name: "Composite",
          className: "VmImagePlan",
        },
      },
      serviceArtifactReferenceId: {
        serializedName: "properties.serviceArtifactReferenceId",
        type: {
          name: "String",
        },
      },
      dscpConfigurationId: {
        serializedName: "properties.dscpConfigurationId",
        type: {
          name: "String",
        },
      },
      additionalNetworkInterfaceConfigurations: {
        serializedName: "properties.additionalNetworkInterfaceConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AdditionalNetworkInterfaceConfiguration",
            },
          },
        },
      },
      computerNamePrefix: {
        serializedName: "properties.computerNamePrefix",
        type: {
          name: "String",
        },
      },
      vmApplications: {
        serializedName: "properties.vmApplications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VmApplication",
            },
          },
        },
      },
    },
  },
};

export const StatefulServiceProperties: coreClient.CompositeMapper = {
  serializedName: "Stateful",
  type: {
    name: "Composite",
    className: "StatefulServiceProperties",
    uberParent: "ServiceResourceProperties",
    polymorphicDiscriminator:
      ServiceResourceProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...ServiceResourceProperties.type.modelProperties,
      hasPersistedState: {
        serializedName: "hasPersistedState",
        type: {
          name: "Boolean",
        },
      },
      targetReplicaSetSize: {
        constraints: {
          InclusiveMinimum: 1,
        },
        serializedName: "targetReplicaSetSize",
        type: {
          name: "Number",
        },
      },
      minReplicaSetSize: {
        constraints: {
          InclusiveMinimum: 1,
        },
        serializedName: "minReplicaSetSize",
        type: {
          name: "Number",
        },
      },
      replicaRestartWaitDuration: {
        serializedName: "replicaRestartWaitDuration",
        type: {
          name: "String",
        },
      },
      quorumLossWaitDuration: {
        serializedName: "quorumLossWaitDuration",
        type: {
          name: "String",
        },
      },
      standByReplicaKeepDuration: {
        serializedName: "standByReplicaKeepDuration",
        type: {
          name: "String",
        },
      },
      servicePlacementTimeLimit: {
        serializedName: "servicePlacementTimeLimit",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const StatelessServiceProperties: coreClient.CompositeMapper = {
  serializedName: "Stateless",
  type: {
    name: "Composite",
    className: "StatelessServiceProperties",
    uberParent: "ServiceResourceProperties",
    polymorphicDiscriminator:
      ServiceResourceProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...ServiceResourceProperties.type.modelProperties,
      instanceCount: {
        constraints: {
          InclusiveMinimum: -1,
        },
        serializedName: "instanceCount",
        required: true,
        type: {
          name: "Number",
        },
      },
      minInstanceCount: {
        serializedName: "minInstanceCount",
        type: {
          name: "Number",
        },
      },
      minInstancePercentage: {
        serializedName: "minInstancePercentage",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const ApplicationTypeVersionsCreateOrUpdateHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ApplicationTypeVersionsCreateOrUpdateHeaders",
      modelProperties: {
        azureAsyncOperation: {
          serializedName: "azure-asyncoperation",
          type: {
            name: "String",
          },
        },
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const ApplicationTypeVersionsDeleteHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ApplicationTypeVersionsDeleteHeaders",
      modelProperties: {
        azureAsyncOperation: {
          serializedName: "azure-asyncoperation",
          type: {
            name: "String",
          },
        },
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const ApplicationsReadUpgradeHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationsReadUpgradeHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ApplicationsStartRollbackHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationsStartRollbackHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ApplicationsResumeUpgradeHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationsResumeUpgradeHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ApplicationsCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationsCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ApplicationsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationsDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ServicesCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServicesCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ServicesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServicesDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ManagedClustersCreateOrUpdateHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ManagedClustersCreateOrUpdateHeaders",
      modelProperties: {
        azureAsyncOperation: {
          serializedName: "azure-asyncoperation",
          type: {
            name: "String",
          },
        },
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const ManagedClustersDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClustersDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationResultsGetHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationResultsGetHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const NodeTypesRestartHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodeTypesRestartHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const NodeTypesReimageHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodeTypesReimageHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const NodeTypesDeleteNodeHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodeTypesDeleteNodeHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const NodeTypesCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodeTypesCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const NodeTypesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodeTypesDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export let discriminators = {
  Partition: Partition,
  ServicePlacementPolicy: ServicePlacementPolicy,
  ScalingMechanism: ScalingMechanism,
  ScalingTrigger: ScalingTrigger,
  "Partition.Named": NamedPartitionScheme,
  "Partition.Singleton": SingletonPartitionScheme,
  "Partition.UniformInt64Range": UniformInt64RangePartitionScheme,
  "ServiceResourcePropertiesBase.ServiceResourceProperties":
    ServiceResourceProperties,
  "ServicePlacementPolicy.InvalidDomain": ServicePlacementInvalidDomainPolicy,
  "ServicePlacementPolicy.NonPartiallyPlaceService":
    ServicePlacementNonPartiallyPlaceServicePolicy,
  "ServicePlacementPolicy.PreferredPrimaryDomain":
    ServicePlacementPreferPrimaryDomainPolicy,
  "ServicePlacementPolicy.RequiredDomain": ServicePlacementRequiredDomainPolicy,
  "ServicePlacementPolicy.RequiredDomainDistribution":
    ServicePlacementRequireDomainDistributionPolicy,
  "ScalingMechanism.AddRemoveIncrementalNamedPartition":
    AddRemoveIncrementalNamedPartitionScalingMechanism,
  "ScalingMechanism.ScalePartitionInstanceCount":
    PartitionInstanceCountScaleMechanism,
  "ScalingTrigger.AveragePartitionLoadTrigger":
    AveragePartitionLoadScalingTrigger,
  "ScalingTrigger.AverageServiceLoadTrigger": AverageServiceLoadScalingTrigger,
  "ServiceResourceProperties.Stateful": StatefulServiceProperties,
  "ServiceResourceProperties.Stateless": StatelessServiceProperties,
};
