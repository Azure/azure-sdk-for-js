// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const {
  ServiceFabricManagedClustersManagementClient,
} = require("@azure/arm-servicefabricmanagedclusters");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to create or update a Service Fabric managed cluster resource with the specified name.
 *
 * @summary create or update a Service Fabric managed cluster resource with the specified name.
 * x-ms-original-file: 2025-03-01-preview/ManagedClusterPutOperation_example_max.json
 */
async function putAClusterWithMaximumParameters() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "00000000-0000-0000-0000-000000000000";
  const client = new ServiceFabricManagedClustersManagementClient(credential, subscriptionId);
  const result = await client.managedClusters.createOrUpdate("resRg", "mycluster", {
    location: "eastus",
    properties: {
      addonFeatures: ["DnsService", "BackupRestoreService", "ResourceMonitorService"],
      adminPassword: "{vm-password}",
      adminUserName: "vmadmin",
      allocatedOutboundPorts: 0,
      allowRdpAccess: true,
      applicationTypeVersionsCleanupPolicy: { maxUnusedVersionsToKeep: 3 },
      autoGeneratedDomainNameLabelScope: "SubscriptionReuse",
      auxiliarySubnets: [
        {
          name: "testSubnet1",
          enableIpv6: true,
          networkSecurityGroupId:
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/networkSecurityGroups/sn1",
          privateEndpointNetworkPolicies: "enabled",
          privateLinkServiceNetworkPolicies: "enabled",
        },
      ],
      clientConnectionPort: 19000,
      clusterCodeVersion: "7.1.168.9494",
      clusterUpgradeMode: "Manual",
      ddosProtectionPlanId:
        "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/ddosProtectionPlans/myDDoSProtectionPlan",
      dnsName: "mycluster",
      enableAutoOSUpgrade: true,
      enableHttpGatewayExclusiveAuthMode: true,
      enableIpv6: true,
      fabricSettings: [
        {
          name: "ManagedIdentityTokenService",
          parameters: [{ name: "IsEnabled", value: "true" }],
        },
      ],
      httpGatewayConnectionPort: 19080,
      httpGatewayTokenAuthConnectionPort: 19081,
      ipTags: [{ ipTagType: "FirstPartyUsage", tag: "SQL" }],
      loadBalancingRules: [
        {
          backendPort: 80,
          frontendPort: 80,
          probePort: 80,
          probeProtocol: "http",
          protocol: "http",
        },
        {
          backendPort: 443,
          frontendPort: 443,
          probePort: 443,
          probeProtocol: "http",
          protocol: "http",
        },
        {
          backendPort: 10000,
          frontendPort: 10000,
          loadDistribution: "Default",
          probePort: 10000,
          probeProtocol: "http",
          protocol: "tcp",
        },
      ],
      networkSecurityRules: [
        {
          name: "TestName",
          description: "Test description",
          access: "allow",
          destinationAddressPrefixes: ["*"],
          destinationPortRanges: ["*"],
          direction: "inbound",
          priority: 1010,
          sourceAddressPrefixes: ["*"],
          sourcePortRanges: ["*"],
          protocol: "tcp",
        },
        {
          name: "AllowARM",
          access: "allow",
          destinationAddressPrefix: "*",
          destinationPortRange: "33500-33699",
          direction: "inbound",
          priority: 2002,
          sourceAddressPrefix: "AzureResourceManager",
          sourcePortRange: "*",
          protocol: "*",
        },
      ],
      publicIPPrefixId:
        "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.Network/publicIPPrefixes/myPublicIPPrefix",
      publicIPv6PrefixId:
        "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.Network/publicIPPrefixes/myPublicIPv6Prefix",
      serviceEndpoints: [{ locations: ["eastus2", "usnorth"], service: "Microsoft.Storage" }],
      upgradeDescription: {
        deltaHealthPolicy: {
          maxPercentDeltaUnhealthyApplications: 40,
          maxPercentDeltaUnhealthyNodes: 20,
          maxPercentUpgradeDomainDeltaUnhealthyNodes: 40,
        },
        forceRestart: false,
        healthPolicy: {
          maxPercentUnhealthyApplications: 30,
          maxPercentUnhealthyNodes: 10,
        },
        monitoringPolicy: {
          healthCheckRetryTimeout: "00:55:00",
          healthCheckStableDuration: "00:45:00",
          healthCheckWaitDuration: "00:05:00",
          upgradeDomainTimeout: "03:00:00",
          upgradeTimeout: "12:00:00",
        },
      },
      useCustomVnet: true,
      zonalResiliency: true,
      zonalUpdateMode: "Fast",
    },
    sku: { name: "Basic" },
    tags: {},
  });
  console.log(result);
}

/**
 * This sample demonstrates how to create or update a Service Fabric managed cluster resource with the specified name.
 *
 * @summary create or update a Service Fabric managed cluster resource with the specified name.
 * x-ms-original-file: 2025-03-01-preview/ManagedClusterPutOperation_example_min.json
 */
async function putAClusterWithMinimumParameters() {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "00000000-0000-0000-0000-000000000000";
  const client = new ServiceFabricManagedClustersManagementClient(credential, subscriptionId);
  const result = await client.managedClusters.createOrUpdate("resRg", "myCluster", {
    location: "eastus",
    properties: {
      adminPassword: "{vm-password}",
      adminUserName: "vmadmin",
      clusterUpgradeCadence: "Wave1",
      clusterUpgradeMode: "Automatic",
      dnsName: "myCluster",
      fabricSettings: [
        {
          name: "ManagedIdentityTokenService",
          parameters: [{ name: "IsEnabled", value: "true" }],
        },
      ],
    },
    sku: { name: "Basic" },
  });
  console.log(result);
}

async function main() {
  await putAClusterWithMaximumParameters();
  await putAClusterWithMinimumParameters();
}

main().catch(console.error);
