/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { tracingClient } from "../tracing";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Providers } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { QuantumJobClient } from "../quantumJobClient";
import {
  ProviderStatus,
  ProvidersGetStatusNextOptionalParams,
  ProvidersGetStatusOptionalParams,
  ProvidersGetStatusResponse,
  ProvidersGetStatusNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Providers operations. */
export class ProvidersImpl implements Providers {
  private readonly client: QuantumJobClient;

  /**
   * Initialize a new instance of the class Providers class.
   * @param client Reference to the service client
   */
  constructor(client: QuantumJobClient) {
    this.client = client;
  }

  /**
   * Get provider status.
   * @param options The options parameters.
   */
  public listStatus(
    options?: ProvidersGetStatusOptionalParams
  ): PagedAsyncIterableIterator<ProviderStatus> {
    const iter = this.getStatusPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getStatusPagingPage(options);
      }
    };
  }

  private async *getStatusPagingPage(
    options?: ProvidersGetStatusOptionalParams
  ): AsyncIterableIterator<ProviderStatus[]> {
    let result = await this._getStatus(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getStatusNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *getStatusPagingAll(
    options?: ProvidersGetStatusOptionalParams
  ): AsyncIterableIterator<ProviderStatus> {
    for await (const page of this.getStatusPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Get provider status.
   * @param options The options parameters.
   */
  private async _getStatus(
    options?: ProvidersGetStatusOptionalParams
  ): Promise<ProvidersGetStatusResponse> {
    return tracingClient.withSpan(
      "QuantumJobClient._getStatus",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { options },
          getStatusOperationSpec
        ) as Promise<ProvidersGetStatusResponse>;
      }
    );
  }

  /**
   * GetStatusNext
   * @param nextLink The nextLink from the previous successful call to the GetStatus method.
   * @param options The options parameters.
   */
  private async _getStatusNext(
    nextLink: string,
    options?: ProvidersGetStatusNextOptionalParams
  ): Promise<ProvidersGetStatusNextResponse> {
    return tracingClient.withSpan(
      "QuantumJobClient._getStatusNext",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { nextLink, options },
          getStatusNextOperationSpec
        ) as Promise<ProvidersGetStatusNextResponse>;
      }
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getStatusOperationSpec: coreClient.OperationSpec = {
  path:
    "/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/providerStatus",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProviderStatusList
    },
    default: {
      bodyMapper: Mappers.RestError
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getStatusNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProviderStatusList
    },
    default: {
      bodyMapper: Mappers.RestError
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
