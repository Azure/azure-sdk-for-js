/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { tracingClient } from "../tracing.js";
import type { PagedAsyncIterableIterator } from "@azure/core-paging";
import type { Jobs } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import type { QuantumJobClient } from "../quantumJobClient.js";
import type {
  JobDetails,
  JobsListNextOptionalParams,
  JobsListOptionalParams,
  JobsListResponse,
  JobsGetOptionalParams,
  JobsGetResponse,
  JobsCreateOptionalParams,
  JobsCreateResponse,
  JobsCancelOptionalParams,
  JobsListNextResponse,
} from "../models/index.js";

// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/jobs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobDetailsList,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/jobs/{jobId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobDetails,
    },
    default: {
      bodyMapper: Mappers.RestError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.jobId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/jobs/{jobId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.JobDetails,
    },
    201: {
      bodyMapper: Mappers.JobDetails,
    },
    default: {
      bodyMapper: Mappers.RestError,
    },
  },
  requestBody: Parameters.job,
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.jobId,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const cancelOperationSpec: coreClient.OperationSpec = {
  path: "/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/jobs/{jobId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.RestError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.jobId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobDetailsList,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};

/** Class containing Jobs operations. */
export class JobsImpl implements Jobs {
  private readonly client: QuantumJobClient;

  /**
   * Initialize a new instance of the class Jobs class.
   * @param client Reference to the service client
   */
  constructor(client: QuantumJobClient) {
    this.client = client;
  }

  /**
   * List jobs.
   * @param options The options parameters.
   */
  public list(options?: JobsListOptionalParams): PagedAsyncIterableIterator<JobDetails> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(options);
      },
    };
  }

  private async *listPagingPage(
    options?: JobsListOptionalParams,
  ): AsyncIterableIterator<JobDetails[]> {
    let result = await this._list(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    options?: JobsListOptionalParams,
  ): AsyncIterableIterator<JobDetails> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * List jobs.
   * @param options The options parameters.
   */
  private async _list(options?: JobsListOptionalParams): Promise<JobsListResponse> {
    return tracingClient.withSpan(
      "QuantumJobClient._list",
      options ?? {},
      async (updatedOptions) => {
        return this.client.sendOperationRequest(
          { updatedOptions },
          listOperationSpec,
        ) as Promise<JobsListResponse>;
      },
    );
  }

  /**
   * Get job by id
   * @param jobId Id of the job.
   * @param options The options parameters.
   */
  async get(jobId: string, options?: JobsGetOptionalParams): Promise<JobsGetResponse> {
    return tracingClient.withSpan("QuantumJobClient.get", options ?? {}, async (updatedOptions) => {
      return this.client.sendOperationRequest(
        { jobId, updatedOptions },
        getOperationSpec,
      ) as Promise<JobsGetResponse>;
    });
  }

  /**
   * Create a job.
   * @param jobId Id of the job.
   * @param job The complete metadata of the job to submit.
   * @param options The options parameters.
   */
  async create(
    jobId: string,
    job: JobDetails,
    options?: JobsCreateOptionalParams,
  ): Promise<JobsCreateResponse> {
    return tracingClient.withSpan(
      "QuantumJobClient.create",
      options ?? {},
      async (updatedOptions) => {
        return this.client.sendOperationRequest(
          { jobId, job, updatedOptions },
          createOperationSpec,
        ) as Promise<JobsCreateResponse>;
      },
    );
  }

  /**
   * Cancel a job.
   * @param jobId Id of the job.
   * @param options The options parameters.
   */
  async cancel(jobId: string, options?: JobsCancelOptionalParams): Promise<void> {
    return tracingClient.withSpan(
      "QuantumJobClient.cancel",
      options ?? {},
      async (updatedOptions) => {
        return this.client.sendOperationRequest(
          { jobId, updatedOptions },
          cancelOperationSpec,
        ) as Promise<void>;
      },
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private async _listNext(
    nextLink: string,
    options?: JobsListNextOptionalParams,
  ): Promise<JobsListNextResponse> {
    return tracingClient.withSpan(
      "QuantumJobClient._listNext",
      options ?? {},
      async (updatedOptions) => {
        return this.client.sendOperationRequest(
          { nextLink, updatedOptions },
          listNextOperationSpec,
        ) as Promise<JobsListNextResponse>;
      },
    );
  }
}
