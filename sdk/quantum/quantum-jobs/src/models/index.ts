/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** List of job details. */
export interface JobDetailsList {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly value?: JobDetails[];
  /** Total records count number. */
  count?: number;
  /**
   * Link to the next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Job details. */
export interface JobDetails {
  /** The job id. */
  id?: string;
  /** The job name. Is not required for the name to be unique and it's only used for display purposes. */
  name?: string;
  /** The blob container SAS uri, the container is used to host job data. */
  containerUri: string;
  /** The input blob SAS uri, if specified, it will override the default input blob in the container. */
  inputDataUri?: string;
  /** The format of the input data. */
  inputDataFormat: string;
  /** The input parameters for the job. JSON object used by the target solver. It is expected that the size of this object is small and only used to specify parameters for the execution target, not the input data. */
  inputParams?: Record<string, unknown>;
  /** The unique identifier for the provider. */
  providerId: string;
  /** The target identifier to run the job. */
  target: string;
  /** The job metadata. Metadata provides client the ability to store client-specific information */
  metadata?: { [propertyName: string]: string } | null;
  /** The output blob SAS uri. When a job finishes successfully, results will be uploaded to this blob. */
  outputDataUri?: string;
  /** The format of the output data. */
  outputDataFormat?: string;
  /**
   * The job status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: JobStatus;
  /**
   * The creation time of the job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly creationTime?: Date;
  /**
   * The time when the job began execution.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly beginExecutionTime?: Date | null;
  /**
   * The time when the job finished execution.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endExecutionTime?: Date | null;
  /**
   * The time when a job was successfully cancelled.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cancellationTime?: Date | null;
  /**
   * The job cost billed by the provider. The final cost on your bill might be slightly different due to added taxes and currency conversion rates.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly costEstimate?: CostEstimate | null;
  /**
   * The error data for the job. This is expected only when Status 'Failed'.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorData?: ErrorData | null;
  /** List of user-supplied tags associated with the job. */
  tags?: string[] | null;
}

/** The job cost billed by the provider. The final cost on your bill might be slightly different due to added taxes and currency conversion rates. */
export interface CostEstimate {
  /** The currency code. */
  currencyCode?: string;
  /** List of usage events */
  events?: UsageEvent[];
  /** The estimated total. */
  estimatedTotal?: number;
}

/** Usage event details. */
export interface UsageEvent {
  /** The dimension id. */
  dimensionId?: string;
  /** The dimension name. */
  dimensionName?: string;
  /** The unit of measure. */
  measureUnit?: string;
  /** The amount billed. */
  amountBilled?: number;
  /** The amount consumed. */
  amountConsumed?: number;
  /** The unit price. */
  unitPrice?: number;
}

/** An error response from Azure. */
export interface ErrorData {
  /** An identifier for the error. Codes are invariant and are intended to be consumed programmatically. */
  code?: string;
  /** A message describing the error, intended to be suitable for displaying in a user interface. */
  message?: string;
}

/** Error information returned by the API */
export interface RestError {
  /** An error response from Azure. */
  error?: ErrorData;
}

/** A JSONPatch document as defined by RFC 6902 */
export interface JsonPatchDocument {
  /** The operation to be performed. */
  op: JsonPatchOperation;
  /** A JSON-Pointer. */
  path: string;
  /** A value to be used in the operation on the path. */
  value?: Record<string, unknown>;
  /** Optional field used in copy and move operations. */
  from?: string;
}

/** Providers status. */
export interface ProviderStatusList {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly value?: ProviderStatus[];
  /**
   * Link to the next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Providers status. */
export interface ProviderStatus {
  /**
   * Provider id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Provider availability.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly currentAvailability?: ProviderAvailability;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly targets?: TargetStatus[];
}

/** Target status. */
export interface TargetStatus {
  /**
   * Target id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Target availability.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly currentAvailability?: TargetAvailability;
  /**
   * Average queue time in seconds.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly averageQueueTime?: number;
  /**
   * A page with detailed status of the provider.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusPage?: string;
}

/** Blob details. */
export interface BlobDetails {
  /** The container name. */
  containerName: string;
  /** The blob name. */
  blobName?: string;
}

/** Get SAS URL operation response. */
export interface SasUriResponse {
  /** A URL with a SAS token to upload a blob for execution in the given workspace. */
  sasUri?: string;
}

/** List of quotas. */
export interface QuotaList {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly value?: Quota[];
  /**
   * Link to the next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Quota information. */
export interface Quota {
  /** The name of the dimension associated with the quota. */
  dimension?: string;
  /** The scope at which the quota is applied. */
  scope?: DimensionScope;
  /** The unique identifier for the provider. */
  providerId?: string;
  /** The amount of the usage that has been applied for the current period. */
  utilization?: number;
  /** The amount of the usage that has been reserved but not applied for the current period. */
  holds?: number;
  /** The maximum amount of usage allowed for the current period. */
  limit?: number;
  /** The time period in which the quota's underlying meter is accumulated. Based on calendar year. 'None' is used for concurrent quotas. */
  period?: MeterPeriod;
}

/** Known values of {@link JobStatus} that the service accepts. */
export enum KnownJobStatus {
  Waiting = "Waiting",
  Executing = "Executing",
  Succeeded = "Succeeded",
  Failed = "Failed",
  Cancelled = "Cancelled"
}

/**
 * Defines values for JobStatus. \
 * {@link KnownJobStatus} can be used interchangeably with JobStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Waiting** \
 * **Executing** \
 * **Succeeded** \
 * **Failed** \
 * **Cancelled**
 */
export type JobStatus = string;

/** Known values of {@link JsonPatchOperation} that the service accepts. */
export enum KnownJsonPatchOperation {
  Add = "add",
  Remove = "remove",
  Replace = "replace",
  Move = "move",
  Copy = "copy",
  Test = "test"
}

/**
 * Defines values for JsonPatchOperation. \
 * {@link KnownJsonPatchOperation} can be used interchangeably with JsonPatchOperation,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **add** \
 * **remove** \
 * **replace** \
 * **move** \
 * **copy** \
 * **test**
 */
export type JsonPatchOperation = string;

/** Known values of {@link ProviderAvailability} that the service accepts. */
export enum KnownProviderAvailability {
  Available = "Available",
  Degraded = "Degraded",
  Unavailable = "Unavailable"
}

/**
 * Defines values for ProviderAvailability. \
 * {@link KnownProviderAvailability} can be used interchangeably with ProviderAvailability,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Available** \
 * **Degraded** \
 * **Unavailable**
 */
export type ProviderAvailability = string;

/** Known values of {@link TargetAvailability} that the service accepts. */
export enum KnownTargetAvailability {
  Available = "Available",
  Degraded = "Degraded",
  Unavailable = "Unavailable"
}

/**
 * Defines values for TargetAvailability. \
 * {@link KnownTargetAvailability} can be used interchangeably with TargetAvailability,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Available** \
 * **Degraded** \
 * **Unavailable**
 */
export type TargetAvailability = string;

/** Known values of {@link DimensionScope} that the service accepts. */
export enum KnownDimensionScope {
  Workspace = "Workspace",
  Subscription = "Subscription"
}

/**
 * Defines values for DimensionScope. \
 * {@link KnownDimensionScope} can be used interchangeably with DimensionScope,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Workspace** \
 * **Subscription**
 */
export type DimensionScope = string;

/** Known values of {@link MeterPeriod} that the service accepts. */
export enum KnownMeterPeriod {
  None = "None",
  Monthly = "Monthly"
}

/**
 * Defines values for MeterPeriod. \
 * {@link KnownMeterPeriod} can be used interchangeably with MeterPeriod,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Monthly**
 */
export type MeterPeriod = string;

/** Optional parameters. */
export interface JobsListOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type JobsListResponse = JobDetailsList;

/** Optional parameters. */
export interface JobsGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type JobsGetResponse = JobDetails;

/** Optional parameters. */
export interface JobsCreateOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type JobsCreateResponse = JobDetails;

/** Optional parameters. */
export interface JobsCancelOptionalParams extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface JobsPatchOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the patch operation. */
export type JobsPatchResponse = JobDetails;

/** Optional parameters. */
export interface JobsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type JobsListNextResponse = JobDetailsList;

/** Optional parameters. */
export interface ProvidersGetStatusOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getStatus operation. */
export type ProvidersGetStatusResponse = ProviderStatusList;

/** Optional parameters. */
export interface ProvidersGetStatusNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getStatusNext operation. */
export type ProvidersGetStatusNextResponse = ProviderStatusList;

/** Optional parameters. */
export interface StorageSasUriOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the sasUri operation. */
export type StorageSasUriResponse = SasUriResponse;

/** Optional parameters. */
export interface QuotasListOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type QuotasListResponse = QuotaList;

/** Optional parameters. */
export interface QuotasListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type QuotasListNextResponse = QuotaList;

/** Optional parameters. */
export interface QuantumClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
