"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.StorageImpl = void 0;
const tslib_1 = require("tslib");
const tracing_js_1 = require("../tracing.js");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const sasUriOperationSpec = {
    path: "/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/storage/sasUri",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.SasUriResponse,
        },
        default: {
            bodyMapper: Mappers.RestError,
        },
    },
    requestBody: Parameters.blobDetails,
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
/** Class containing Storage operations. */
class StorageImpl {
    /**
     * Initialize a new instance of the class Storage class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets a URL with SAS token for a container/blob in the storage account associated with the workspace.
     * The SAS URL can be used to upload job input and/or download job output.
     * @param blobDetails The details (name and container) of the blob to store or download data.
     * @param options The options parameters.
     */
    async sasUri(blobDetails, options) {
        return tracing_js_1.tracingClient.withSpan("QuantumJobClient.sasUri", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ blobDetails, updatedOptions }, sasUriOperationSpec);
        });
    }
}
exports.StorageImpl = StorageImpl;
//# sourceMappingURL=storage.js.map