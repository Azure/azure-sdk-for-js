"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProvidersImpl = void 0;
const tslib_1 = require("tslib");
const tracing_js_1 = require("../tracing.js");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getStatusOperationSpec = {
    path: "/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/providerStatus",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ProviderStatusList,
        },
        default: {
            bodyMapper: Mappers.RestError,
        },
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const getStatusNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ProviderStatusList,
        },
        default: {
            bodyMapper: Mappers.RestError,
        },
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.nextLink,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
/** Class containing Providers operations. */
class ProvidersImpl {
    /**
     * Initialize a new instance of the class Providers class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get provider status.
     * @param options The options parameters.
     */
    listStatus(options) {
        const iter = this.getStatusPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.getStatusPagingPage(options);
            },
        };
    }
    getStatusPagingPage(options) {
        return tslib_1.__asyncGenerator(this, arguments, function* getStatusPagingPage_1() {
            let result = yield tslib_1.__await(this._getStatus(options));
            yield yield tslib_1.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib_1.__await(this._getStatusNext(continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib_1.__await(result.value || []);
            }
        });
    }
    getStatusPagingAll(options) {
        return tslib_1.__asyncGenerator(this, arguments, function* getStatusPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib_1.__asyncValues(this.getStatusPagingPage(options)), _f; _f = yield tslib_1.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib_1.__await(yield* tslib_1.__asyncDelegator(tslib_1.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib_1.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get provider status.
     * @param options The options parameters.
     */
    async _getStatus(options) {
        return tracing_js_1.tracingClient.withSpan("QuantumJobClient._getStatus", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ updatedOptions }, getStatusOperationSpec);
        });
    }
    /**
     * GetStatusNext
     * @param nextLink The nextLink from the previous successful call to the GetStatus method.
     * @param options The options parameters.
     */
    async _getStatusNext(nextLink, options) {
        return tracing_js_1.tracingClient.withSpan("QuantumJobClient._getStatusNext", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ nextLink, updatedOptions }, getStatusNextOperationSpec);
        });
    }
}
exports.ProvidersImpl = ProvidersImpl;
//# sourceMappingURL=providers.js.map