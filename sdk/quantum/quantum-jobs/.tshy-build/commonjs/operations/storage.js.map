{"version":3,"file":"storage.js","sourceRoot":"","sources":["../../../src/operations/storage.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;;;AAEH,8CAA8C;AAE9C,uEAAiD;AACjD,sEAAgD;AAChD,4EAAsD;AAQtD,2BAA2B;AAC3B,MAAM,UAAU,GAAG,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;AAE3E,MAAM,mBAAmB,GAA6B;IACpD,IAAI,EAAE,+IAA+I;IACrJ,UAAU,EAAE,MAAM;IAClB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,cAAc;SACnC;QACD,OAAO,EAAE;YACP,UAAU,EAAE,OAAO,CAAC,SAAS;SAC9B;KACF;IACD,WAAW,EAAE,UAAU,CAAC,WAAW;IACnC,aAAa,EAAE;QACb,UAAU,CAAC,KAAK;QAChB,UAAU,CAAC,cAAc;QACzB,UAAU,CAAC,iBAAiB;QAC5B,UAAU,CAAC,aAAa;KACzB;IACD,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,UAAU,CAAC,WAAW,CAAC;IAC7D,SAAS,EAAE,MAAM;IACjB,UAAU;CACX,CAAC;AAEF,2CAA2C;AAC3C,MAAa,WAAW;IAGtB;;;OAGG;IACH,YAAY,MAAwB;QAClC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,MAAM,CACV,WAAwB,EACxB,OAAqC;QAErC,OAAO,0BAAa,CAAC,QAAQ,CAC3B,yBAAyB,EACzB,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,EACb,KAAK,EAAE,cAAc,EAAE,EAAE;YACvB,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,WAAW,EAAE,cAAc,EAAE,EAC/B,mBAAmB,CACc,CAAC;QACtC,CAAC,CACF,CAAC;IACJ,CAAC;CACF;AAhCD,kCAgCC","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { tracingClient } from \"../tracing.js\";\nimport type { Storage } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport type { QuantumJobClient } from \"../quantumJobClient.js\";\nimport type {\n  BlobDetails,\n  StorageSasUriOptionalParams,\n  StorageSasUriResponse,\n} from \"../models/index.js\";\n\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst sasUriOperationSpec: coreClient.OperationSpec = {\n  path: \"/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/storage/sasUri\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SasUriResponse,\n    },\n    default: {\n      bodyMapper: Mappers.RestError,\n    },\n  },\n  requestBody: Parameters.blobDetails,\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.workspaceName,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\n\n/** Class containing Storage operations. */\nexport class StorageImpl implements Storage {\n  private readonly client: QuantumJobClient;\n\n  /**\n   * Initialize a new instance of the class Storage class.\n   * @param client Reference to the service client\n   */\n  constructor(client: QuantumJobClient) {\n    this.client = client;\n  }\n\n  /**\n   * Gets a URL with SAS token for a container/blob in the storage account associated with the workspace.\n   * The SAS URL can be used to upload job input and/or download job output.\n   * @param blobDetails The details (name and container) of the blob to store or download data.\n   * @param options The options parameters.\n   */\n  async sasUri(\n    blobDetails: BlobDetails,\n    options?: StorageSasUriOptionalParams,\n  ): Promise<StorageSasUriResponse> {\n    return tracingClient.withSpan(\n      \"QuantumJobClient.sasUri\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { blobDetails, updatedOptions },\n          sasUriOperationSpec,\n        ) as Promise<StorageSasUriResponse>;\n      },\n    );\n  }\n}\n"]}