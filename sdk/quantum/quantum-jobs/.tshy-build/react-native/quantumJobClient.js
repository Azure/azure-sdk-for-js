/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import { JobsImpl, ProvidersImpl, StorageImpl, QuotasImpl } from "./operations/index.js";
export class QuantumJobClient extends coreClient.ServiceClient {
    /**
     * Initializes a new instance of the QuantumJobClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
     *                       00000000-0000-0000-0000-000000000000)
     * @param resourceGroupName Name of an Azure resource group.
     * @param workspaceName Name of the workspace.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, resourceGroupName, workspaceName, options) {
        var _a, _b;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        if (resourceGroupName === undefined) {
            throw new Error("'resourceGroupName' cannot be null");
        }
        if (workspaceName === undefined) {
            throw new Error("'workspaceName' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials,
        };
        const packageDetails = `azsdk-js-quantum-jobs/1.0.0-beta.2`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        if (!options.credentialScopes) {
            options.credentialScopes = ["https://management.azure.com/.default"];
        }
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix,
            }, baseUri: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://quantum.azure.com" });
        super(optionsWithDefaults);
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            const bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name === coreRestPipeline.bearerTokenAuthenticationPolicyName);
            if (!bearerTokenAuthenticationPolicyFound) {
                this.pipeline.removePolicy({
                    name: coreRestPipeline.bearerTokenAuthenticationPolicyName,
                });
                this.pipeline.addPolicy(coreRestPipeline.bearerTokenAuthenticationPolicy({
                    scopes: `${optionsWithDefaults.baseUri}/.default`,
                    challengeCallbacks: {
                        authorizeRequestOnChallenge: coreClient.authorizeRequestOnClaimChallenge,
                    },
                }));
            }
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.workspaceName = workspaceName;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://quantum.azure.com";
        this.jobs = new JobsImpl(this);
        this.providers = new ProvidersImpl(this);
        this.storage = new StorageImpl(this);
        this.quotas = new QuotasImpl(this);
    }
}
//# sourceMappingURL=quantumJobClient.js.map