"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SavedSearchesImpl = void 0;
const tslib_1 = require("tslib");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
/** Class containing SavedSearches operations. */
class SavedSearchesImpl {
    /**
     * Initialize a new instance of the class SavedSearches class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Deletes the specified saved search in a given workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param savedSearchId The id of the saved search.
     * @param options The options parameters.
     */
    delete(resourceGroupName, workspaceName, savedSearchId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, savedSearchId, options }, deleteOperationSpec);
    }
    /**
     * Creates or updates a saved search for a given workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param savedSearchId The id of the saved search.
     * @param parameters The parameters required to save a search.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, workspaceName, savedSearchId, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, savedSearchId, parameters, options }, createOrUpdateOperationSpec);
    }
    /**
     * Gets the specified saved search for a given workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param savedSearchId The id of the saved search.
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, savedSearchId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, savedSearchId, options }, getOperationSpec);
    }
    /**
     * Gets the saved searches for a given Log Analytics Workspace
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, listByWorkspaceOperationSpec);
    }
}
exports.SavedSearchesImpl = SavedSearchesImpl;
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/savedSearches/{savedSearchId}",
    httpMethod: "DELETE",
    responses: { 200: {} },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.savedSearchId
    ],
    serializer
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/savedSearches/{savedSearchId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.SavedSearch
        }
    },
    requestBody: Parameters.parameters5,
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.savedSearchId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/savedSearches/{savedSearchId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SavedSearch
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.savedSearchId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByWorkspaceOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/savedSearches",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SavedSearchesListResult
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=savedSearches.js.map