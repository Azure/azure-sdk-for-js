"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.tableName = exports.parameters10 = exports.parameters9 = exports.force = exports.parameters8 = exports.apiVersion3 = exports.parameters7 = exports.clusterName1 = exports.clusterName = exports.parameters6 = exports.apiVersion2 = exports.purgeId = exports.body = exports.gatewayId = exports.parameters5 = exports.savedSearchId = exports.storageInsightName = exports.parameters4 = exports.asyncOperationId = exports.location = exports.dataSourceType = exports.parameters3 = exports.linkedServiceName = exports.parameters2 = exports.intelligencePackName = exports.skiptoken = exports.filter = exports.dataSourceName = exports.parameters1 = exports.dataExportName1 = exports.dataExportName = exports.parameters = exports.apiVersion1 = exports.workspaceName = exports.queryPayload = exports.id = exports.querySearchProperties = exports.skipToken = exports.includeBody = exports.top = exports.nextLink = exports.queryPackTags = exports.queryPackName = exports.logAnalyticsQueryPackPayload = exports.contentType = exports.resourceGroupName = exports.subscriptionId = exports.apiVersion = exports.$host = exports.accept = void 0;
const mappers_js_1 = require("../models/mappers.js");
exports.accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
exports.$host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
exports.apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2019-09-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
exports.subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
exports.logAnalyticsQueryPackPayload = {
    parameterPath: "logAnalyticsQueryPackPayload",
    mapper: mappers_js_1.LogAnalyticsQueryPack
};
exports.queryPackName = {
    parameterPath: "queryPackName",
    mapper: {
        serializedName: "queryPackName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.queryPackTags = {
    parameterPath: "queryPackTags",
    mapper: mappers_js_1.TagsResource
};
exports.nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
exports.top = {
    parameterPath: ["options", "top"],
    mapper: {
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
exports.includeBody = {
    parameterPath: ["options", "includeBody"],
    mapper: {
        serializedName: "includeBody",
        type: {
            name: "Boolean"
        }
    }
};
exports.skipToken = {
    parameterPath: ["options", "skipToken"],
    mapper: {
        serializedName: "$skipToken",
        type: {
            name: "String"
        }
    }
};
exports.querySearchProperties = {
    parameterPath: "querySearchProperties",
    mapper: mappers_js_1.LogAnalyticsQueryPackQuerySearchProperties
};
exports.id = {
    parameterPath: "id",
    mapper: {
        serializedName: "id",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.queryPayload = {
    parameterPath: "queryPayload",
    mapper: mappers_js_1.LogAnalyticsQueryPackQuery
};
exports.workspaceName = {
    parameterPath: "workspaceName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z0-9][A-Za-z0-9-]+[A-Za-z0-9]$"),
            MaxLength: 63,
            MinLength: 4
        },
        serializedName: "workspaceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.apiVersion1 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2020-08-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
exports.parameters = {
    parameterPath: "parameters",
    mapper: mappers_js_1.DataExport
};
exports.dataExportName = {
    parameterPath: "dataExportName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z][A-Za-z0-9-]+[A-Za-z0-9]$"),
            MaxLength: 63,
            MinLength: 4
        },
        serializedName: "dataExportName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.dataExportName1 = {
    parameterPath: "dataExportName",
    mapper: {
        serializedName: "dataExportName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.parameters1 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.DataSource
};
exports.dataSourceName = {
    parameterPath: "dataSourceName",
    mapper: {
        serializedName: "dataSourceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.filter = {
    parameterPath: "filter",
    mapper: {
        serializedName: "$filter",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.skiptoken = {
    parameterPath: ["options", "skiptoken"],
    mapper: {
        serializedName: "$skiptoken",
        type: {
            name: "String"
        }
    }
};
exports.intelligencePackName = {
    parameterPath: "intelligencePackName",
    mapper: {
        serializedName: "intelligencePackName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.parameters2 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.LinkedService
};
exports.linkedServiceName = {
    parameterPath: "linkedServiceName",
    mapper: {
        serializedName: "linkedServiceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.parameters3 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.LinkedStorageAccountsResource
};
exports.dataSourceType = {
    parameterPath: "dataSourceType",
    mapper: {
        serializedName: "dataSourceType",
        required: true,
        type: {
            name: "Enum",
            allowedValues: [
                "CustomLogs",
                "AzureWatson",
                "Query",
                "Ingestion",
                "Alerts"
            ]
        }
    }
};
exports.location = {
    parameterPath: "location",
    mapper: {
        serializedName: "location",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.asyncOperationId = {
    parameterPath: "asyncOperationId",
    mapper: {
        serializedName: "asyncOperationId",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.parameters4 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.StorageInsight
};
exports.storageInsightName = {
    parameterPath: "storageInsightName",
    mapper: {
        serializedName: "storageInsightName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.savedSearchId = {
    parameterPath: "savedSearchId",
    mapper: {
        serializedName: "savedSearchId",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.parameters5 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.SavedSearch
};
exports.gatewayId = {
    parameterPath: "gatewayId",
    mapper: {
        serializedName: "gatewayId",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.body = {
    parameterPath: "body",
    mapper: mappers_js_1.WorkspacePurgeBody
};
exports.purgeId = {
    parameterPath: "purgeId",
    mapper: {
        serializedName: "purgeId",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.apiVersion2 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-06-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
exports.parameters6 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.Cluster
};
exports.clusterName = {
    parameterPath: "clusterName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z0-9][A-Za-z0-9-]+[A-Za-z0-9]$"),
            MaxLength: 63,
            MinLength: 4
        },
        serializedName: "clusterName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.clusterName1 = {
    parameterPath: "clusterName",
    mapper: {
        serializedName: "clusterName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.parameters7 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.ClusterPatch
};
exports.apiVersion3 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-10-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
exports.parameters8 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.Workspace
};
exports.force = {
    parameterPath: ["options", "force"],
    mapper: {
        serializedName: "force",
        type: {
            name: "Boolean"
        }
    }
};
exports.parameters9 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.WorkspacePatch
};
exports.parameters10 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.Table
};
exports.tableName = {
    parameterPath: "tableName",
    mapper: {
        serializedName: "tableName",
        required: true,
        type: {
            name: "String"
        }
    }
};
//# sourceMappingURL=parameters.js.map