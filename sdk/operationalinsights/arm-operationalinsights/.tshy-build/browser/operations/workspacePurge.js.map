{"version":3,"file":"workspacePurge.js","sourceRoot":"","sources":["../../../src/operations/workspacePurge.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OAAO,KAAK,UAAU,MAAM,oBAAoB,CAAC;AACjD,OAAO,KAAK,OAAO,MAAM,sBAAsB,CAAC;AAChD,OAAO,KAAK,UAAU,MAAM,yBAAyB,CAAC;AAUtD,kDAAkD;AAClD,MAAM,OAAO,kBAAkB;IAG7B;;;OAGG;IACH,YAAY,MAA2C;QACrD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;;;;;;;;;;;;;;OAeG;IACH,KAAK,CACH,iBAAyB,EACzB,aAAqB,EACrB,IAAwB,EACxB,OAA2C;QAE3C,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,iBAAiB,EAAE,aAAa,EAAE,IAAI,EAAE,OAAO,EAAE,EACnD,kBAAkB,CACnB,CAAC;IACJ,CAAC;IAED;;;;;;;OAOG;IACH,cAAc,CACZ,iBAAyB,EACzB,aAAqB,EACrB,OAAe,EACf,OAAoD;QAEpD,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,iBAAiB,EAAE,aAAa,EAAE,OAAO,EAAE,OAAO,EAAE,EACtD,2BAA2B,CAC5B,CAAC;IACJ,CAAC;CACF;AACD,2BAA2B;AAC3B,MAAM,UAAU,GAAG,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;AAE3E,MAAM,kBAAkB,GAA6B;IACnD,IAAI,EACF,6IAA6I;IAC/I,UAAU,EAAE,MAAM;IAClB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,sBAAsB;YAC1C,aAAa,EAAE,OAAO,CAAC,0BAA0B;SAClD;KACF;IACD,WAAW,EAAE,UAAU,CAAC,IAAI;IAC5B,eAAe,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC;IACzC,aAAa,EAAE;QACb,UAAU,CAAC,KAAK;QAChB,UAAU,CAAC,cAAc;QACzB,UAAU,CAAC,iBAAiB;QAC5B,UAAU,CAAC,aAAa;KACzB;IACD,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,UAAU,CAAC,WAAW,CAAC;IAC7D,SAAS,EAAE,MAAM;IACjB,UAAU;CACX,CAAC;AACF,MAAM,2BAA2B,GAA6B;IAC5D,IAAI,EACF,4JAA4J;IAC9J,UAAU,EAAE,KAAK;IACjB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,4BAA4B;SACjD;KACF;IACD,eAAe,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC;IACzC,aAAa,EAAE;QACb,UAAU,CAAC,KAAK;QAChB,UAAU,CAAC,cAAc;QACzB,UAAU,CAAC,iBAAiB;QAC5B,UAAU,CAAC,aAAa;QACxB,UAAU,CAAC,OAAO;KACnB;IACD,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC;IACrC,UAAU;CACX,CAAC","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { WorkspacePurge } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { OperationalInsightsManagementClient } from \"../operationalInsightsManagementClient.js\";\nimport {\n  WorkspacePurgeBody,\n  WorkspacePurgePurgeOptionalParams,\n  WorkspacePurgePurgeResponse,\n  WorkspacePurgeGetPurgeStatusOptionalParams,\n  WorkspacePurgeGetPurgeStatusResponse\n} from \"../models/index.js\";\n\n/** Class containing WorkspacePurge operations. */\nexport class WorkspacePurgeImpl implements WorkspacePurge {\n  private readonly client: OperationalInsightsManagementClient;\n\n  /**\n   * Initialize a new instance of the class WorkspacePurge class.\n   * @param client Reference to the service client\n   */\n  constructor(client: OperationalInsightsManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Purges data in an Log Analytics workspace by a set of user-defined filters.\n   *\n   * In order to manage system resources, purge requests are throttled at 50 requests per hour. You\n   * should batch the execution of purge requests by sending a single command whose predicate includes\n   * all user identities that require purging. Use the in operator to specify multiple identities. You\n   * should run the query prior to using for a purge request to verify that the results are expected.\n   * Log Analytics only supports purge operations required for compliance with GDPR. The Log Analytics\n   * product team reserves the right to reject requests for purge operations that are not for the purpose\n   * of GDPR compliance. In the event of a dispute, please create a support ticket\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param workspaceName The name of the workspace.\n   * @param body Describes the body of a request to purge data in a single table of an Log Analytics\n   *             Workspace\n   * @param options The options parameters.\n   */\n  purge(\n    resourceGroupName: string,\n    workspaceName: string,\n    body: WorkspacePurgeBody,\n    options?: WorkspacePurgePurgeOptionalParams\n  ): Promise<WorkspacePurgePurgeResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, workspaceName, body, options },\n      purgeOperationSpec\n    );\n  }\n\n  /**\n   * Gets status of an ongoing purge operation.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param workspaceName The name of the workspace.\n   * @param purgeId In a purge status request, this is the Id of the operation the status of which is\n   *                returned.\n   * @param options The options parameters.\n   */\n  getPurgeStatus(\n    resourceGroupName: string,\n    workspaceName: string,\n    purgeId: string,\n    options?: WorkspacePurgeGetPurgeStatusOptionalParams\n  ): Promise<WorkspacePurgeGetPurgeStatusResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, workspaceName, purgeId, options },\n      getPurgeStatusOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst purgeOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/purge\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      bodyMapper: Mappers.WorkspacePurgeResponse,\n      headersMapper: Mappers.WorkspacePurgePurgeHeaders\n    }\n  },\n  requestBody: Parameters.body,\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.workspaceName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst getPurgeStatusOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/operations/{purgeId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.WorkspacePurgeStatusResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.workspaceName,\n    Parameters.purgeId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n"]}