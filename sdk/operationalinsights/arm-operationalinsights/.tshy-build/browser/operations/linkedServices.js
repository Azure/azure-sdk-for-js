/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl.js";
/// <reference lib="esnext.asynciterable" />
/** Class containing LinkedServices operations. */
export class LinkedServicesImpl {
    /**
     * Initialize a new instance of the class LinkedServices class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the linked services instances in a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName, workspaceName, options) {
        const iter = this.listByWorkspacePagingAll(resourceGroupName, workspaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByWorkspacePagingPage(resourceGroupName, workspaceName, options, settings);
            }
        };
    }
    listByWorkspacePagingPage(resourceGroupName, workspaceName, options, _settings) {
        return __asyncGenerator(this, arguments, function* listByWorkspacePagingPage_1() {
            let result;
            result = yield __await(this._listByWorkspace(resourceGroupName, workspaceName, options));
            yield yield __await(result.value || []);
        });
    }
    listByWorkspacePagingAll(resourceGroupName, workspaceName, options) {
        return __asyncGenerator(this, arguments, function* listByWorkspacePagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listByWorkspacePagingPage(resourceGroupName, workspaceName, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Create or update a linked service.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param linkedServiceName Name of the linkedServices resource
     * @param parameters The parameters required to create or update a linked service.
     * @param options The options parameters.
     */
    async beginCreateOrUpdate(resourceGroupName, workspaceName, linkedServiceName, parameters, options) {
        const directSendOperation = async (args, spec) => {
            return this.client.sendOperationRequest(args, spec);
        };
        const sendOperation = async (args, spec) => {
            var _a;
            let currentRawResponse = undefined;
            const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
            };
            const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON()
                }
            };
        };
        const lro = new LroImpl(sendOperation, {
            resourceGroupName,
            workspaceName,
            linkedServiceName,
            parameters,
            options
        }, createOrUpdateOperationSpec);
        const poller = new LroEngine(lro, {
            resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
            intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
        });
        await poller.poll();
        return poller;
    }
    /**
     * Create or update a linked service.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param linkedServiceName Name of the linkedServices resource
     * @param parameters The parameters required to create or update a linked service.
     * @param options The options parameters.
     */
    async beginCreateOrUpdateAndWait(resourceGroupName, workspaceName, linkedServiceName, parameters, options) {
        const poller = await this.beginCreateOrUpdate(resourceGroupName, workspaceName, linkedServiceName, parameters, options);
        return poller.pollUntilDone();
    }
    /**
     * Deletes a linked service instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param linkedServiceName Name of the linked service.
     * @param options The options parameters.
     */
    async beginDelete(resourceGroupName, workspaceName, linkedServiceName, options) {
        const directSendOperation = async (args, spec) => {
            return this.client.sendOperationRequest(args, spec);
        };
        const sendOperation = async (args, spec) => {
            var _a;
            let currentRawResponse = undefined;
            const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
            };
            const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON()
                }
            };
        };
        const lro = new LroImpl(sendOperation, { resourceGroupName, workspaceName, linkedServiceName, options }, deleteOperationSpec);
        const poller = new LroEngine(lro, {
            resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
            intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
        });
        await poller.poll();
        return poller;
    }
    /**
     * Deletes a linked service instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param linkedServiceName Name of the linked service.
     * @param options The options parameters.
     */
    async beginDeleteAndWait(resourceGroupName, workspaceName, linkedServiceName, options) {
        const poller = await this.beginDelete(resourceGroupName, workspaceName, linkedServiceName, options);
        return poller.pollUntilDone();
    }
    /**
     * Gets a linked service instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param linkedServiceName Name of the linked service.
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, linkedServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, linkedServiceName, options }, getOperationSpec);
    }
    /**
     * Gets the linked services instances in a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    _listByWorkspace(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, listByWorkspaceOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/linkedServices/{linkedServiceName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.LinkedService
        },
        201: {
            bodyMapper: Mappers.LinkedService
        },
        202: {
            bodyMapper: Mappers.LinkedService
        },
        204: {
            bodyMapper: Mappers.LinkedService
        }
    },
    requestBody: Parameters.parameters2,
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.linkedServiceName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/linkedServices/{linkedServiceName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: Mappers.LinkedService
        },
        201: {
            bodyMapper: Mappers.LinkedService
        },
        202: {
            bodyMapper: Mappers.LinkedService
        },
        204: {
            bodyMapper: Mappers.LinkedService
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.linkedServiceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/linkedServices/{linkedServiceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.LinkedService
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.linkedServiceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByWorkspaceOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/linkedServices",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.LinkedServiceListResult
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=linkedServices.js.map