{"version":3,"file":"workspacePurge.js","sourceRoot":"","sources":["../../../src/operationsInterfaces/workspacePurge.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport {\n  WorkspacePurgeBody,\n  WorkspacePurgePurgeOptionalParams,\n  WorkspacePurgePurgeResponse,\n  WorkspacePurgeGetPurgeStatusOptionalParams,\n  WorkspacePurgeGetPurgeStatusResponse\n} from \"../models/index.js\";\n\n/** Interface representing a WorkspacePurge. */\nexport interface WorkspacePurge {\n  /**\n   * Purges data in an Log Analytics workspace by a set of user-defined filters.\n   *\n   * In order to manage system resources, purge requests are throttled at 50 requests per hour. You\n   * should batch the execution of purge requests by sending a single command whose predicate includes\n   * all user identities that require purging. Use the in operator to specify multiple identities. You\n   * should run the query prior to using for a purge request to verify that the results are expected.\n   * Log Analytics only supports purge operations required for compliance with GDPR. The Log Analytics\n   * product team reserves the right to reject requests for purge operations that are not for the purpose\n   * of GDPR compliance. In the event of a dispute, please create a support ticket\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param workspaceName The name of the workspace.\n   * @param body Describes the body of a request to purge data in a single table of an Log Analytics\n   *             Workspace\n   * @param options The options parameters.\n   */\n  purge(\n    resourceGroupName: string,\n    workspaceName: string,\n    body: WorkspacePurgeBody,\n    options?: WorkspacePurgePurgeOptionalParams\n  ): Promise<WorkspacePurgePurgeResponse>;\n  /**\n   * Gets status of an ongoing purge operation.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param workspaceName The name of the workspace.\n   * @param purgeId In a purge status request, this is the Id of the operation the status of which is\n   *                returned.\n   * @param options The options parameters.\n   */\n  getPurgeStatus(\n    resourceGroupName: string,\n    workspaceName: string,\n    purgeId: string,\n    options?: WorkspacePurgeGetPurgeStatusOptionalParams\n  ): Promise<WorkspacePurgeGetPurgeStatusResponse>;\n}\n"]}