{"version":3,"file":"usages.js","sourceRoot":"","sources":["../../../src/operations/usages.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAIH,OAAO,KAAK,UAAU,MAAM,oBAAoB,CAAC;AACjD,OAAO,KAAK,OAAO,MAAM,sBAAsB,CAAC;AAChD,OAAO,KAAK,UAAU,MAAM,yBAAyB,CAAC;AAQtD,4CAA4C;AAC5C,0CAA0C;AAC1C,MAAM,OAAO,UAAU;IAGrB;;;OAGG;IACH,YAAY,MAA2C;QACrD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;;;;OAKG;IACI,IAAI,CACT,iBAAyB,EACzB,aAAqB,EACrB,OAAkC;QAElC,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,iBAAiB,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;QAC3E,OAAO;YACL,IAAI;gBACF,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC;YACrB,CAAC;YACD,CAAC,MAAM,CAAC,aAAa,CAAC;gBACpB,OAAO,IAAI,CAAC;YACd,CAAC;YACD,MAAM,EAAE,CAAC,QAAuB,EAAE,EAAE;gBAClC,IAAI,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,WAAW,EAAE,CAAC;oBAC1B,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;gBACrE,CAAC;gBACD,OAAO,IAAI,CAAC,cAAc,CACxB,iBAAiB,EACjB,aAAa,EACb,OAAO,EACP,QAAQ,CACT,CAAC;YACJ,CAAC;SACF,CAAC;IACJ,CAAC;IAEc,cAAc,CAC3B,iBAAyB,EACzB,aAAqB,EACrB,OAAkC,EAClC,SAAwB;;YAExB,IAAI,MAA0B,CAAC;YAC/B,MAAM,GAAG,cAAM,IAAI,CAAC,KAAK,CAAC,iBAAiB,EAAE,aAAa,EAAE,OAAO,CAAC,CAAA,CAAC;YACrE,oBAAM,MAAM,CAAC,KAAK,IAAI,EAAE,CAAA,CAAC;QAC3B,CAAC;KAAA;IAEc,aAAa,CAC1B,iBAAyB,EACzB,aAAqB,EACrB,OAAkC;;;;gBAElC,KAAyB,eAAA,KAAA,cAAA,IAAI,CAAC,cAAc,CAC1C,iBAAiB,EACjB,aAAa,EACb,OAAO,CACR,CAAA,IAAA,+DAAE,CAAC;oBAJqB,cAIxB;oBAJwB,WAIxB;oBAJU,MAAM,IAAI,KAAA,CAAA;oBAKnB,cAAA,KAAK,CAAC,CAAC,iBAAA,cAAA,IAAI,CAAA,CAAA,CAAA,CAAC;gBACd,CAAC;;;;;;;;;QACH,CAAC;KAAA;IAED;;;;;OAKG;IACK,KAAK,CACX,iBAAyB,EACzB,aAAqB,EACrB,OAAkC;QAElC,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,iBAAiB,EAAE,aAAa,EAAE,OAAO,EAAE,EAC7C,iBAAiB,CAClB,CAAC;IACJ,CAAC;CACF;AACD,2BAA2B;AAC3B,MAAM,UAAU,GAAG,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;AAE3E,MAAM,iBAAiB,GAA6B;IAClD,IAAI,EACF,8IAA8I;IAChJ,UAAU,EAAE,KAAK;IACjB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,yBAAyB;SAC9C;KACF;IACD,eAAe,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC;IACzC,aAAa,EAAE;QACb,UAAU,CAAC,KAAK;QAChB,UAAU,CAAC,cAAc;QACzB,UAAU,CAAC,iBAAiB;QAC5B,UAAU,CAAC,aAAa;KACzB;IACD,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC;IACrC,UAAU;CACX,CAAC","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { Usages } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { OperationalInsightsManagementClient } from \"../operationalInsightsManagementClient.js\";\nimport {\n  UsageMetric,\n  UsagesListOptionalParams,\n  UsagesListResponse\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing Usages operations. */\nexport class UsagesImpl implements Usages {\n  private readonly client: OperationalInsightsManagementClient;\n\n  /**\n   * Initialize a new instance of the class Usages class.\n   * @param client Reference to the service client\n   */\n  constructor(client: OperationalInsightsManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Gets a list of usage metrics for a workspace.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param workspaceName The name of the workspace.\n   * @param options The options parameters.\n   */\n  public list(\n    resourceGroupName: string,\n    workspaceName: string,\n    options?: UsagesListOptionalParams\n  ): PagedAsyncIterableIterator<UsageMetric> {\n    const iter = this.listPagingAll(resourceGroupName, workspaceName, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(\n          resourceGroupName,\n          workspaceName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    resourceGroupName: string,\n    workspaceName: string,\n    options?: UsagesListOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<UsageMetric[]> {\n    let result: UsagesListResponse;\n    result = await this._list(resourceGroupName, workspaceName, options);\n    yield result.value || [];\n  }\n\n  private async *listPagingAll(\n    resourceGroupName: string,\n    workspaceName: string,\n    options?: UsagesListOptionalParams\n  ): AsyncIterableIterator<UsageMetric> {\n    for await (const page of this.listPagingPage(\n      resourceGroupName,\n      workspaceName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Gets a list of usage metrics for a workspace.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param workspaceName The name of the workspace.\n   * @param options The options parameters.\n   */\n  private _list(\n    resourceGroupName: string,\n    workspaceName: string,\n    options?: UsagesListOptionalParams\n  ): Promise<UsagesListResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, workspaceName, options },\n      listOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/usages\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.WorkspaceListUsagesResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.workspaceName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n"]}