/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { LogAnalyticsQueryPack as LogAnalyticsQueryPackMapper, TagsResource as TagsResourceMapper, LogAnalyticsQueryPackQuerySearchProperties as LogAnalyticsQueryPackQuerySearchPropertiesMapper, LogAnalyticsQueryPackQuery as LogAnalyticsQueryPackQueryMapper, DataExport as DataExportMapper, DataSource as DataSourceMapper, LinkedService as LinkedServiceMapper, LinkedStorageAccountsResource as LinkedStorageAccountsResourceMapper, StorageInsight as StorageInsightMapper, SavedSearch as SavedSearchMapper, WorkspacePurgeBody as WorkspacePurgeBodyMapper, Cluster as ClusterMapper, ClusterPatch as ClusterPatchMapper, Workspace as WorkspaceMapper, WorkspacePatch as WorkspacePatchMapper, Table as TableMapper } from "../models/mappers.js";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2019-09-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const logAnalyticsQueryPackPayload = {
    parameterPath: "logAnalyticsQueryPackPayload",
    mapper: LogAnalyticsQueryPackMapper
};
export const queryPackName = {
    parameterPath: "queryPackName",
    mapper: {
        serializedName: "queryPackName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const queryPackTags = {
    parameterPath: "queryPackTags",
    mapper: TagsResourceMapper
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const top = {
    parameterPath: ["options", "top"],
    mapper: {
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
export const includeBody = {
    parameterPath: ["options", "includeBody"],
    mapper: {
        serializedName: "includeBody",
        type: {
            name: "Boolean"
        }
    }
};
export const skipToken = {
    parameterPath: ["options", "skipToken"],
    mapper: {
        serializedName: "$skipToken",
        type: {
            name: "String"
        }
    }
};
export const querySearchProperties = {
    parameterPath: "querySearchProperties",
    mapper: LogAnalyticsQueryPackQuerySearchPropertiesMapper
};
export const id = {
    parameterPath: "id",
    mapper: {
        serializedName: "id",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const queryPayload = {
    parameterPath: "queryPayload",
    mapper: LogAnalyticsQueryPackQueryMapper
};
export const workspaceName = {
    parameterPath: "workspaceName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z0-9][A-Za-z0-9-]+[A-Za-z0-9]$"),
            MaxLength: 63,
            MinLength: 4
        },
        serializedName: "workspaceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const apiVersion1 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2020-08-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const parameters = {
    parameterPath: "parameters",
    mapper: DataExportMapper
};
export const dataExportName = {
    parameterPath: "dataExportName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z][A-Za-z0-9-]+[A-Za-z0-9]$"),
            MaxLength: 63,
            MinLength: 4
        },
        serializedName: "dataExportName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const dataExportName1 = {
    parameterPath: "dataExportName",
    mapper: {
        serializedName: "dataExportName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters1 = {
    parameterPath: "parameters",
    mapper: DataSourceMapper
};
export const dataSourceName = {
    parameterPath: "dataSourceName",
    mapper: {
        serializedName: "dataSourceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const filter = {
    parameterPath: "filter",
    mapper: {
        serializedName: "$filter",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const skiptoken = {
    parameterPath: ["options", "skiptoken"],
    mapper: {
        serializedName: "$skiptoken",
        type: {
            name: "String"
        }
    }
};
export const intelligencePackName = {
    parameterPath: "intelligencePackName",
    mapper: {
        serializedName: "intelligencePackName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters2 = {
    parameterPath: "parameters",
    mapper: LinkedServiceMapper
};
export const linkedServiceName = {
    parameterPath: "linkedServiceName",
    mapper: {
        serializedName: "linkedServiceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters3 = {
    parameterPath: "parameters",
    mapper: LinkedStorageAccountsResourceMapper
};
export const dataSourceType = {
    parameterPath: "dataSourceType",
    mapper: {
        serializedName: "dataSourceType",
        required: true,
        type: {
            name: "Enum",
            allowedValues: [
                "CustomLogs",
                "AzureWatson",
                "Query",
                "Ingestion",
                "Alerts"
            ]
        }
    }
};
export const location = {
    parameterPath: "location",
    mapper: {
        serializedName: "location",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const asyncOperationId = {
    parameterPath: "asyncOperationId",
    mapper: {
        serializedName: "asyncOperationId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters4 = {
    parameterPath: "parameters",
    mapper: StorageInsightMapper
};
export const storageInsightName = {
    parameterPath: "storageInsightName",
    mapper: {
        serializedName: "storageInsightName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const savedSearchId = {
    parameterPath: "savedSearchId",
    mapper: {
        serializedName: "savedSearchId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters5 = {
    parameterPath: "parameters",
    mapper: SavedSearchMapper
};
export const gatewayId = {
    parameterPath: "gatewayId",
    mapper: {
        serializedName: "gatewayId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const body = {
    parameterPath: "body",
    mapper: WorkspacePurgeBodyMapper
};
export const purgeId = {
    parameterPath: "purgeId",
    mapper: {
        serializedName: "purgeId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const apiVersion2 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-06-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const parameters6 = {
    parameterPath: "parameters",
    mapper: ClusterMapper
};
export const clusterName = {
    parameterPath: "clusterName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z0-9][A-Za-z0-9-]+[A-Za-z0-9]$"),
            MaxLength: 63,
            MinLength: 4
        },
        serializedName: "clusterName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const clusterName1 = {
    parameterPath: "clusterName",
    mapper: {
        serializedName: "clusterName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters7 = {
    parameterPath: "parameters",
    mapper: ClusterPatchMapper
};
export const apiVersion3 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-10-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const parameters8 = {
    parameterPath: "parameters",
    mapper: WorkspaceMapper
};
export const force = {
    parameterPath: ["options", "force"],
    mapper: {
        serializedName: "force",
        type: {
            name: "Boolean"
        }
    }
};
export const parameters9 = {
    parameterPath: "parameters",
    mapper: WorkspacePatchMapper
};
export const parameters10 = {
    parameterPath: "parameters",
    mapper: TableMapper
};
export const tableName = {
    parameterPath: "tableName",
    mapper: {
        serializedName: "tableName",
        required: true,
        type: {
            name: "String"
        }
    }
};
//# sourceMappingURL=parameters.js.map