/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/workspacePurgeMappers";
import * as Parameters from "../models/parameters";
import { OperationalInsightsManagementClientContext } from "../operationalInsightsManagementClientContext";

/** Class representing a WorkspacePurge. */
export class WorkspacePurge {
  private readonly client: OperationalInsightsManagementClientContext;

  /**
   * Create a WorkspacePurge.
   * @param {OperationalInsightsManagementClientContext} client Reference to the service client.
   */
  constructor(client: OperationalInsightsManagementClientContext) {
    this.client = client;
  }

  /**
   * Purges data in an Log Analytics workspace by a set of user-defined filters.
   *
   * In order to manage system resources, purge requests are throttled at 50 requests per hour. You
   * should batch the execution of purge requests by sending a single command whose predicate
   * includes all user identities that require purging. Use the in operator to specify multiple
   * identities. You should run the query prior to using for a purge request to verify that the
   * results are expected.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param body Describes the body of a request to purge data in a single table of an Log Analytics
   * Workspace
   * @param [options] The optional parameters
   * @returns Promise<Models.WorkspacePurgePurgeResponse>
   */
  purge(resourceGroupName: string, workspaceName: string, body: Models.WorkspacePurgeBody, options?: msRest.RequestOptionsBase): Promise<Models.WorkspacePurgePurgeResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param body Describes the body of a request to purge data in a single table of an Log Analytics
   * Workspace
   * @param callback The callback
   */
  purge(resourceGroupName: string, workspaceName: string, body: Models.WorkspacePurgeBody, callback: msRest.ServiceCallback<Models.WorkspacePurgeResponse>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param body Describes the body of a request to purge data in a single table of an Log Analytics
   * Workspace
   * @param options The optional parameters
   * @param callback The callback
   */
  purge(resourceGroupName: string, workspaceName: string, body: Models.WorkspacePurgeBody, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WorkspacePurgeResponse>): void;
  purge(resourceGroupName: string, workspaceName: string, body: Models.WorkspacePurgeBody, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WorkspacePurgeResponse>, callback?: msRest.ServiceCallback<Models.WorkspacePurgeResponse>): Promise<Models.WorkspacePurgePurgeResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        body,
        options
      },
      purgeOperationSpec,
      callback) as Promise<Models.WorkspacePurgePurgeResponse>;
  }

  /**
   * Gets status of an ongoing purge operation.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param purgeId In a purge status request, this is the Id of the operation the status of which is
   * returned.
   * @param [options] The optional parameters
   * @returns Promise<Models.WorkspacePurgeGetPurgeStatusResponse>
   */
  getPurgeStatus(resourceGroupName: string, workspaceName: string, purgeId: string, options?: msRest.RequestOptionsBase): Promise<Models.WorkspacePurgeGetPurgeStatusResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param purgeId In a purge status request, this is the Id of the operation the status of which is
   * returned.
   * @param callback The callback
   */
  getPurgeStatus(resourceGroupName: string, workspaceName: string, purgeId: string, callback: msRest.ServiceCallback<Models.WorkspacePurgeStatusResponse>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param purgeId In a purge status request, this is the Id of the operation the status of which is
   * returned.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPurgeStatus(resourceGroupName: string, workspaceName: string, purgeId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WorkspacePurgeStatusResponse>): void;
  getPurgeStatus(resourceGroupName: string, workspaceName: string, purgeId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WorkspacePurgeStatusResponse>, callback?: msRest.ServiceCallback<Models.WorkspacePurgeStatusResponse>): Promise<Models.WorkspacePurgeGetPurgeStatusResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        purgeId,
        options
      },
      getPurgeStatusOperationSpec,
      callback) as Promise<Models.WorkspacePurgeGetPurgeStatusResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const purgeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/purge",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.workspaceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.WorkspacePurgeBody,
      required: true
    }
  },
  responses: {
    202: {
      bodyMapper: Mappers.WorkspacePurgeResponse,
      headersMapper: Mappers.WorkspacePurgePurgeHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.WorkspacePurgePurgeHeaders
    }
  },
  serializer
};

const getPurgeStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/operations/{purgeId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.workspaceName,
    Parameters.purgeId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WorkspacePurgeStatusResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
