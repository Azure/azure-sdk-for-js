/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { WorkspacePurge } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { OperationalInsightsManagementClient } from "../operationalInsightsManagementClient";
import {
  WorkspacePurgeBody,
  WorkspacePurgePurgeOptionalParams,
  WorkspacePurgePurgeResponse,
  WorkspacePurgeGetPurgeStatusOptionalParams,
  WorkspacePurgeGetPurgeStatusResponse
} from "../models";

/** Class containing WorkspacePurge operations. */
export class WorkspacePurgeImpl implements WorkspacePurge {
  private readonly client: OperationalInsightsManagementClient;

  /**
   * Initialize a new instance of the class WorkspacePurge class.
   * @param client Reference to the service client
   */
  constructor(client: OperationalInsightsManagementClient) {
    this.client = client;
  }

  /**
   * Purges data in an Log Analytics workspace by a set of user-defined filters.
   *
   * In order to manage system resources, purge requests are throttled at 50 requests per hour. You
   * should batch the execution of purge requests by sending a single command whose predicate includes
   * all user identities that require purging. Use the in operator to specify multiple identities. You
   * should run the query prior to using for a purge request to verify that the results are expected.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param body Describes the body of a request to purge data in a single table of an Log Analytics
   *             Workspace
   * @param options The options parameters.
   */
  purge(
    resourceGroupName: string,
    workspaceName: string,
    body: WorkspacePurgeBody,
    options?: WorkspacePurgePurgeOptionalParams
  ): Promise<WorkspacePurgePurgeResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, body, options },
      purgeOperationSpec
    );
  }

  /**
   * Gets status of an ongoing purge operation.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param purgeId In a purge status request, this is the Id of the operation the status of which is
   *                returned.
   * @param options The options parameters.
   */
  getPurgeStatus(
    resourceGroupName: string,
    workspaceName: string,
    purgeId: string,
    options?: WorkspacePurgeGetPurgeStatusOptionalParams
  ): Promise<WorkspacePurgeGetPurgeStatusResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, purgeId, options },
      getPurgeStatusOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const purgeOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/purge",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper: Mappers.WorkspacePurgeResponse,
      headersMapper: Mappers.WorkspacePurgePurgeHeaders
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getPurgeStatusOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/operations/{purgeId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkspacePurgeStatusResponse
    }
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.purgeId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
