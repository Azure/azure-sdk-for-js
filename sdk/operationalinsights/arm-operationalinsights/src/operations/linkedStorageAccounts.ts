/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/linkedStorageAccountsMappers";
import * as Parameters from "../models/parameters";
import { OperationalInsightsManagementClientContext } from "../operationalInsightsManagementClientContext";

/** Class representing a LinkedStorageAccounts. */
export class LinkedStorageAccounts {
  private readonly client: OperationalInsightsManagementClientContext;

  /**
   * Create a LinkedStorageAccounts.
   * @param {OperationalInsightsManagementClientContext} client Reference to the service client.
   */
  constructor(client: OperationalInsightsManagementClientContext) {
    this.client = client;
  }

  /**
   * Create or Update a link relation between current workspace and a group of storage accounts of a
   * specific data source type.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param dataSourceType Linked storage accounts type. Possible values include: 'CustomLogs',
   * 'AzureWatson', 'Query', 'Alerts'
   * @param parameters The parameters required to create or update linked storage accounts.
   * @param [options] The optional parameters
   * @returns Promise<Models.LinkedStorageAccountsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, workspaceName: string, dataSourceType: Models.DataSourceType, parameters: Models.LinkedStorageAccountsResource, options?: msRest.RequestOptionsBase): Promise<Models.LinkedStorageAccountsCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param dataSourceType Linked storage accounts type. Possible values include: 'CustomLogs',
   * 'AzureWatson', 'Query', 'Alerts'
   * @param parameters The parameters required to create or update linked storage accounts.
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, workspaceName: string, dataSourceType: Models.DataSourceType, parameters: Models.LinkedStorageAccountsResource, callback: msRest.ServiceCallback<Models.LinkedStorageAccountsResource>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param dataSourceType Linked storage accounts type. Possible values include: 'CustomLogs',
   * 'AzureWatson', 'Query', 'Alerts'
   * @param parameters The parameters required to create or update linked storage accounts.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, workspaceName: string, dataSourceType: Models.DataSourceType, parameters: Models.LinkedStorageAccountsResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LinkedStorageAccountsResource>): void;
  createOrUpdate(resourceGroupName: string, workspaceName: string, dataSourceType: Models.DataSourceType, parameters: Models.LinkedStorageAccountsResource, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LinkedStorageAccountsResource>, callback?: msRest.ServiceCallback<Models.LinkedStorageAccountsResource>): Promise<Models.LinkedStorageAccountsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        dataSourceType,
        parameters,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.LinkedStorageAccountsCreateOrUpdateResponse>;
  }

  /**
   * Deletes all linked storage accounts of a specific data source type associated with the specified
   * workspace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param dataSourceType Linked storage accounts type. Possible values include: 'CustomLogs',
   * 'AzureWatson', 'Query', 'Alerts'
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, workspaceName: string, dataSourceType: Models.DataSourceType, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param dataSourceType Linked storage accounts type. Possible values include: 'CustomLogs',
   * 'AzureWatson', 'Query', 'Alerts'
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, workspaceName: string, dataSourceType: Models.DataSourceType, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param dataSourceType Linked storage accounts type. Possible values include: 'CustomLogs',
   * 'AzureWatson', 'Query', 'Alerts'
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, workspaceName: string, dataSourceType: Models.DataSourceType, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, workspaceName: string, dataSourceType: Models.DataSourceType, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        dataSourceType,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Gets all linked storage account of a specific data source type associated with the specified
   * workspace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param dataSourceType Linked storage accounts type. Possible values include: 'CustomLogs',
   * 'AzureWatson', 'Query', 'Alerts'
   * @param [options] The optional parameters
   * @returns Promise<Models.LinkedStorageAccountsGetResponse>
   */
  get(resourceGroupName: string, workspaceName: string, dataSourceType: Models.DataSourceType, options?: msRest.RequestOptionsBase): Promise<Models.LinkedStorageAccountsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param dataSourceType Linked storage accounts type. Possible values include: 'CustomLogs',
   * 'AzureWatson', 'Query', 'Alerts'
   * @param callback The callback
   */
  get(resourceGroupName: string, workspaceName: string, dataSourceType: Models.DataSourceType, callback: msRest.ServiceCallback<Models.LinkedStorageAccountsResource>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param dataSourceType Linked storage accounts type. Possible values include: 'CustomLogs',
   * 'AzureWatson', 'Query', 'Alerts'
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, workspaceName: string, dataSourceType: Models.DataSourceType, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LinkedStorageAccountsResource>): void;
  get(resourceGroupName: string, workspaceName: string, dataSourceType: Models.DataSourceType, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LinkedStorageAccountsResource>, callback?: msRest.ServiceCallback<Models.LinkedStorageAccountsResource>): Promise<Models.LinkedStorageAccountsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        dataSourceType,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.LinkedStorageAccountsGetResponse>;
  }

  /**
   * Gets all linked storage accounts associated with the specified workspace, storage accounts will
   * be sorted by their data source type.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param [options] The optional parameters
   * @returns Promise<Models.LinkedStorageAccountsListByWorkspaceResponse>
   */
  listByWorkspace(resourceGroupName: string, workspaceName: string, options?: msRest.RequestOptionsBase): Promise<Models.LinkedStorageAccountsListByWorkspaceResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param callback The callback
   */
  listByWorkspace(resourceGroupName: string, workspaceName: string, callback: msRest.ServiceCallback<Models.LinkedStorageAccountsListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByWorkspace(resourceGroupName: string, workspaceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LinkedStorageAccountsListResult>): void;
  listByWorkspace(resourceGroupName: string, workspaceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LinkedStorageAccountsListResult>, callback?: msRest.ServiceCallback<Models.LinkedStorageAccountsListResult>): Promise<Models.LinkedStorageAccountsListByWorkspaceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        options
      },
      listByWorkspaceOperationSpec,
      callback) as Promise<Models.LinkedStorageAccountsListByWorkspaceResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/linkedStorageAccounts/{dataSourceType}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.dataSourceType,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.LinkedStorageAccountsResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.LinkedStorageAccountsResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/linkedStorageAccounts/{dataSourceType}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.dataSourceType,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/linkedStorageAccounts/{dataSourceType}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.dataSourceType,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LinkedStorageAccountsResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByWorkspaceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/linkedStorageAccounts",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LinkedStorageAccountsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
