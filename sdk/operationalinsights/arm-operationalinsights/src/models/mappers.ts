/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const LogAnalyticsQueryPackListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LogAnalyticsQueryPackListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LogAnalyticsQueryPack"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QueryPacksResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QueryPacksResource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const TagsResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TagsResource",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const LogAnalyticsQueryPackQueryListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LogAnalyticsQueryPackQueryListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LogAnalyticsQueryPackQuery"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LogAnalyticsQueryPackQueryPropertiesRelated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LogAnalyticsQueryPackQueryPropertiesRelated",
    modelProperties: {
      categories: {
        serializedName: "categories",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      resourceTypes: {
        serializedName: "resourceTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      solutions: {
        serializedName: "solutions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const AzureResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureResourceProperties",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const LogAnalyticsQueryPackQuerySearchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LogAnalyticsQueryPackQuerySearchProperties",
    modelProperties: {
      related: {
        serializedName: "related",
        type: {
          name: "Composite",
          className: "LogAnalyticsQueryPackQuerySearchPropertiesRelated"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Sequence", element: { type: { name: "String" } } }
          }
        }
      }
    }
  }
};

export const LogAnalyticsQueryPackQuerySearchPropertiesRelated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LogAnalyticsQueryPackQuerySearchPropertiesRelated",
    modelProperties: {
      categories: {
        serializedName: "categories",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      resourceTypes: {
        serializedName: "resourceTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      solutions: {
        serializedName: "solutions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DataExportListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataExportListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataExport"
            }
          }
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataSourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataSourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataSource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IntelligencePack: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IntelligencePack",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LinkedServiceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LinkedServiceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LinkedService"
            }
          }
        }
      }
    }
  }
};

export const LinkedStorageAccountsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LinkedStorageAccountsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LinkedStorageAccountsResource"
            }
          }
        }
      }
    }
  }
};

export const WorkspaceListManagementGroupsResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspaceListManagementGroupsResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagementGroup"
            }
          }
        }
      }
    }
  }
};

export const ManagementGroup: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementGroup",
    modelProperties: {
      serverCount: {
        serializedName: "properties.serverCount",
        type: {
          name: "Number"
        }
      },
      isGateway: {
        serializedName: "properties.isGateway",
        type: {
          name: "Boolean"
        }
      },
      name: {
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "properties.id",
        type: {
          name: "String"
        }
      },
      created: {
        serializedName: "properties.created",
        type: {
          name: "DateTime"
        }
      },
      dataReceived: {
        serializedName: "properties.dataReceived",
        type: {
          name: "DateTime"
        }
      },
      version: {
        serializedName: "properties.version",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "properties.sku",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationStatus",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "String"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorResponse"
        }
      }
    }
  }
};

export const SharedKeys: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SharedKeys",
    modelProperties: {
      primarySharedKey: {
        serializedName: "primarySharedKey",
        type: {
          name: "String"
        }
      },
      secondarySharedKey: {
        serializedName: "secondarySharedKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkspaceListUsagesResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspaceListUsagesResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UsageMetric"
            }
          }
        }
      }
    }
  }
};

export const UsageMetric: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsageMetric",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "MetricName"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      currentValue: {
        serializedName: "currentValue",
        type: {
          name: "Number"
        }
      },
      limit: {
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      nextResetTime: {
        serializedName: "nextResetTime",
        type: {
          name: "DateTime"
        }
      },
      quotaPeriod: {
        serializedName: "quotaPeriod",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricName: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricName",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      localizedValue: {
        serializedName: "localizedValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAccount: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAccount",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      key: {
        serializedName: "key",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageInsightStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageInsightStatus",
    modelProperties: {
      state: {
        serializedName: "state",
        required: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageInsightListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageInsightListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageInsight"
            }
          }
        }
      },
      odataNextLink: {
        serializedName: "@odata\\.nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Tag: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Tag",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SavedSearchesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SavedSearchesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SavedSearch"
            }
          }
        }
      }
    }
  }
};

export const AvailableServiceTier: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableServiceTier",
    modelProperties: {
      serviceTier: {
        serializedName: "serviceTier",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      enabled: {
        serializedName: "enabled",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      minimumRetention: {
        serializedName: "minimumRetention",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      maximumRetention: {
        serializedName: "maximumRetention",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      defaultRetention: {
        serializedName: "defaultRetention",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      capacityReservationLevel: {
        serializedName: "capacityReservationLevel",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      lastSkuUpdate: {
        serializedName: "lastSkuUpdate",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SearchGetSchemaResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SearchGetSchemaResponse",
    modelProperties: {
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Composite",
          className: "SearchMetadata"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SearchSchemaValue"
            }
          }
        }
      }
    }
  }
};

export const SearchMetadata: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SearchMetadata",
    modelProperties: {
      searchId: {
        serializedName: "requestId",
        type: {
          name: "String"
        }
      },
      resultType: {
        serializedName: "resultType",
        type: {
          name: "String"
        }
      },
      total: {
        serializedName: "total",
        type: {
          name: "Number"
        }
      },
      top: {
        serializedName: "top",
        type: {
          name: "Number"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      coreSummaries: {
        serializedName: "coreSummaries",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CoreSummary"
            }
          }
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      lastUpdated: {
        serializedName: "lastUpdated",
        type: {
          name: "DateTime"
        }
      },
      eTag: {
        serializedName: "eTag",
        type: {
          name: "String"
        }
      },
      sort: {
        serializedName: "sort",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SearchSort"
            }
          }
        }
      },
      requestTime: {
        serializedName: "requestTime",
        type: {
          name: "Number"
        }
      },
      aggregatedValueField: {
        serializedName: "aggregatedValueField",
        type: {
          name: "String"
        }
      },
      aggregatedGroupingFields: {
        serializedName: "aggregatedGroupingFields",
        type: {
          name: "String"
        }
      },
      sum: {
        serializedName: "sum",
        type: {
          name: "Number"
        }
      },
      max: {
        serializedName: "max",
        type: {
          name: "Number"
        }
      },
      schema: {
        serializedName: "schema",
        type: {
          name: "Composite",
          className: "SearchMetadataSchema"
        }
      }
    }
  }
};

export const CoreSummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CoreSummary",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      numberOfDocuments: {
        serializedName: "numberOfDocuments",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SearchSort: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SearchSort",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      order: {
        serializedName: "order",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SearchMetadataSchema: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SearchMetadataSchema",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SearchSchemaValue: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SearchSchemaValue",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      indexed: {
        serializedName: "indexed",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      stored: {
        serializedName: "stored",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      facet: {
        serializedName: "facet",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      ownerType: {
        serializedName: "ownerType",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const WorkspacePurgeBody: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspacePurgeBody",
    modelProperties: {
      table: {
        serializedName: "table",
        required: true,
        type: {
          name: "String"
        }
      },
      filters: {
        serializedName: "filters",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WorkspacePurgeBodyFilters"
            }
          }
        }
      }
    }
  }
};

export const WorkspacePurgeBodyFilters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspacePurgeBodyFilters",
    modelProperties: {
      column: {
        serializedName: "column",
        type: {
          name: "String"
        }
      },
      operator: {
        serializedName: "operator",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "any"
        }
      },
      key: {
        serializedName: "key",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkspacePurgeResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspacePurgeResponse",
    modelProperties: {
      operationId: {
        serializedName: "operationId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkspacePurgeStatusResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspacePurgeStatusResponse",
    modelProperties: {
      status: {
        serializedName: "status",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClusterListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterListResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Cluster"
            }
          }
        }
      }
    }
  }
};

export const Identity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Identity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserIdentityProperties" }
          }
        }
      }
    }
  }
};

export const UserIdentityProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserIdentityProperties",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClusterSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterSku",
    modelProperties: {
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Enum",
          allowedValues: [500, 1000, 2000, 5000]
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyVaultProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyVaultProperties",
    modelProperties: {
      keyVaultUri: {
        serializedName: "keyVaultUri",
        type: {
          name: "String"
        }
      },
      keyName: {
        serializedName: "keyName",
        type: {
          name: "String"
        }
      },
      keyVersion: {
        serializedName: "keyVersion",
        type: {
          name: "String"
        }
      },
      keyRsaSize: {
        serializedName: "keyRsaSize",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AssociatedWorkspace: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AssociatedWorkspace",
    modelProperties: {
      workspaceId: {
        serializedName: "workspaceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      workspaceName: {
        serializedName: "workspaceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      associateDate: {
        serializedName: "associateDate",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CapacityReservationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CapacityReservationProperties",
    modelProperties: {
      lastSkuUpdate: {
        serializedName: "lastSkuUpdate",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      minCapacity: {
        serializedName: "minCapacity",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ClusterPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterPatch",
    modelProperties: {
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "ClusterSku"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      keyVaultProperties: {
        serializedName: "properties.keyVaultProperties",
        type: {
          name: "Composite",
          className: "KeyVaultProperties"
        }
      },
      billingType: {
        serializedName: "properties.billingType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkspaceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspaceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Workspace"
            }
          }
        }
      }
    }
  }
};

export const WorkspaceSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspaceSku",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      capacityReservationLevel: {
        serializedName: "capacityReservationLevel",
        type: {
          name: "Enum",
          allowedValues: [100, 200, 300, 400, 500, 1000, 2000, 5000]
        }
      },
      lastSkuUpdate: {
        serializedName: "lastSkuUpdate",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkspaceCapping: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspaceCapping",
    modelProperties: {
      dailyQuotaGb: {
        serializedName: "dailyQuotaGb",
        type: {
          name: "Number"
        }
      },
      quotaNextResetTime: {
        serializedName: "quotaNextResetTime",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dataIngestionStatus: {
        serializedName: "dataIngestionStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkScopedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkScopedResource",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      scopeId: {
        serializedName: "scopeId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkspaceFeatures: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspaceFeatures",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      enableDataExport: {
        serializedName: "enableDataExport",
        nullable: true,
        type: {
          name: "Boolean"
        }
      },
      immediatePurgeDataOn30Days: {
        serializedName: "immediatePurgeDataOn30Days",
        nullable: true,
        type: {
          name: "Boolean"
        }
      },
      enableLogAccessUsingOnlyResourcePermissions: {
        serializedName: "enableLogAccessUsingOnlyResourcePermissions",
        nullable: true,
        type: {
          name: "Boolean"
        }
      },
      clusterResourceId: {
        serializedName: "clusterResourceId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      disableLocalAuth: {
        serializedName: "disableLocalAuth",
        nullable: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SystemDataAutoGenerated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemDataAutoGenerated",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const TablesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TablesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Table"
            }
          }
        }
      }
    }
  }
};

export const SearchResults: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SearchResults",
    modelProperties: {
      query: {
        serializedName: "query",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      limit: {
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      startSearchTime: {
        serializedName: "startSearchTime",
        type: {
          name: "DateTime"
        }
      },
      endSearchTime: {
        serializedName: "endSearchTime",
        type: {
          name: "DateTime"
        }
      },
      sourceTable: {
        serializedName: "sourceTable",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RestoredLogs: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestoredLogs",
    modelProperties: {
      startRestoreTime: {
        serializedName: "startRestoreTime",
        type: {
          name: "DateTime"
        }
      },
      endRestoreTime: {
        serializedName: "endRestoreTime",
        type: {
          name: "DateTime"
        }
      },
      sourceTable: {
        serializedName: "sourceTable",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResultStatistics: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResultStatistics",
    modelProperties: {
      progress: {
        constraints: {
          MultipleOf: 0.01
        },
        serializedName: "progress",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      ingestedRecords: {
        serializedName: "ingestedRecords",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Schema: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Schema",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      columns: {
        serializedName: "columns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Column"
            }
          }
        }
      },
      standardColumns: {
        serializedName: "standardColumns",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Column"
            }
          }
        }
      },
      categories: {
        serializedName: "categories",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      labels: {
        serializedName: "labels",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      source: {
        serializedName: "source",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tableType: {
        serializedName: "tableType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tableSubType: {
        serializedName: "tableSubType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      solutions: {
        serializedName: "solutions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      searchResults: {
        serializedName: "searchResults",
        type: {
          name: "Composite",
          className: "SearchResults"
        }
      },
      restoredLogs: {
        serializedName: "restoredLogs",
        type: {
          name: "Composite",
          className: "RestoredLogs"
        }
      }
    }
  }
};

export const Column: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Column",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      dataTypeHint: {
        serializedName: "dataTypeHint",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      isDefaultDisplay: {
        serializedName: "isDefaultDisplay",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      isHidden: {
        serializedName: "isHidden",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DataSourceFilter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataSourceFilter",
    modelProperties: {
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LogAnalyticsQueryPack: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LogAnalyticsQueryPack",
    modelProperties: {
      ...QueryPacksResource.type.modelProperties,
      queryPackId: {
        serializedName: "properties.queryPackId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      timeCreated: {
        serializedName: "properties.timeCreated",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      timeModified: {
        serializedName: "properties.timeModified",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LogAnalyticsQueryPackQuery: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LogAnalyticsQueryPackQuery",
    modelProperties: {
      ...AzureResourceProperties.type.modelProperties,
      idPropertiesId: {
        serializedName: "properties.id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      timeCreated: {
        serializedName: "properties.timeCreated",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      timeModified: {
        serializedName: "properties.timeModified",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      author: {
        serializedName: "properties.author",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      body: {
        serializedName: "properties.body",
        type: {
          name: "String"
        }
      },
      related: {
        serializedName: "properties.related",
        type: {
          name: "Composite",
          className: "LogAnalyticsQueryPackQueryPropertiesRelated"
        }
      },
      tags: {
        serializedName: "properties.tags",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Sequence", element: { type: { name: "String" } } }
          }
        }
      },
      properties: {
        serializedName: "properties.properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureEntityResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureEntityResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataExport: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataExport",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      dataExportId: {
        serializedName: "properties.dataExportId",
        type: {
          name: "String"
        }
      },
      tableNames: {
        serializedName: "properties.tableNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      enable: {
        serializedName: "properties.enable",
        type: {
          name: "Boolean"
        }
      },
      createdDate: {
        serializedName: "properties.createdDate",
        type: {
          name: "String"
        }
      },
      lastModifiedDate: {
        serializedName: "properties.lastModifiedDate",
        type: {
          name: "String"
        }
      },
      resourceId: {
        serializedName: "properties.destination.resourceId",
        type: {
          name: "String"
        }
      },
      typePropertiesDestinationType: {
        serializedName: "properties.destination.type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      eventHubName: {
        serializedName: "properties.destination.metaData.eventHubName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataSource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataSource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        required: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const LinkedService: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LinkedService",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      resourceId: {
        serializedName: "properties.resourceId",
        type: {
          name: "String"
        }
      },
      writeAccessResourceId: {
        serializedName: "properties.writeAccessResourceId",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LinkedStorageAccountsResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LinkedStorageAccountsResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      dataSourceType: {
        serializedName: "properties.dataSourceType",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "CustomLogs",
            "AzureWatson",
            "Query",
            "Ingestion",
            "Alerts"
          ]
        }
      },
      storageAccountIds: {
        serializedName: "properties.storageAccountIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const StorageInsight: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageInsight",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      eTag: {
        serializedName: "eTag",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      containers: {
        serializedName: "properties.containers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      tables: {
        serializedName: "properties.tables",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      storageAccount: {
        serializedName: "properties.storageAccount",
        type: {
          name: "Composite",
          className: "StorageAccount"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "Composite",
          className: "StorageInsightStatus"
        }
      }
    }
  }
};

export const SavedSearch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SavedSearch",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      category: {
        serializedName: "properties.category",
        required: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        required: true,
        type: {
          name: "String"
        }
      },
      query: {
        serializedName: "properties.query",
        required: true,
        type: {
          name: "String"
        }
      },
      functionAlias: {
        serializedName: "properties.functionAlias",
        type: {
          name: "String"
        }
      },
      functionParameters: {
        serializedName: "properties.functionParameters",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "properties.version",
        type: {
          name: "Number"
        }
      },
      tags: {
        serializedName: "properties.tags",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Tag"
            }
          }
        }
      }
    }
  }
};

export const Table: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Table",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemDataAutoGenerated"
        }
      },
      retentionInDays: {
        constraints: {
          InclusiveMaximum: 730,
          InclusiveMinimum: 4
        },
        serializedName: "properties.retentionInDays",
        type: {
          name: "Number"
        }
      },
      totalRetentionInDays: {
        constraints: {
          InclusiveMaximum: 2555,
          InclusiveMinimum: 4
        },
        serializedName: "properties.totalRetentionInDays",
        type: {
          name: "Number"
        }
      },
      archiveRetentionInDays: {
        serializedName: "properties.archiveRetentionInDays",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      searchResults: {
        serializedName: "properties.searchResults",
        type: {
          name: "Composite",
          className: "SearchResults"
        }
      },
      restoredLogs: {
        serializedName: "properties.restoredLogs",
        type: {
          name: "Composite",
          className: "RestoredLogs"
        }
      },
      resultStatistics: {
        serializedName: "properties.resultStatistics",
        type: {
          name: "Composite",
          className: "ResultStatistics"
        }
      },
      plan: {
        serializedName: "properties.plan",
        type: {
          name: "String"
        }
      },
      lastPlanModifiedDate: {
        serializedName: "properties.lastPlanModifiedDate",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      schema: {
        serializedName: "properties.schema",
        type: {
          name: "Composite",
          className: "Schema"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Cluster: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Cluster",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "ClusterSku"
        }
      },
      clusterId: {
        serializedName: "properties.clusterId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isDoubleEncryptionEnabled: {
        serializedName: "properties.isDoubleEncryptionEnabled",
        type: {
          name: "Boolean"
        }
      },
      isAvailabilityZonesEnabled: {
        serializedName: "properties.isAvailabilityZonesEnabled",
        type: {
          name: "Boolean"
        }
      },
      billingType: {
        serializedName: "properties.billingType",
        type: {
          name: "String"
        }
      },
      keyVaultProperties: {
        serializedName: "properties.keyVaultProperties",
        type: {
          name: "Composite",
          className: "KeyVaultProperties"
        }
      },
      lastModifiedDate: {
        serializedName: "properties.lastModifiedDate",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      createdDate: {
        serializedName: "properties.createdDate",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      associatedWorkspaces: {
        serializedName: "properties.associatedWorkspaces",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AssociatedWorkspace"
            }
          }
        }
      },
      capacityReservationProperties: {
        serializedName: "properties.capacityReservationProperties",
        type: {
          name: "Composite",
          className: "CapacityReservationProperties"
        }
      }
    }
  }
};

export const Workspace: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Workspace",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemDataAutoGenerated"
        }
      },
      eTag: {
        serializedName: "eTag",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      customerId: {
        serializedName: "properties.customerId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "properties.sku",
        type: {
          name: "Composite",
          className: "WorkspaceSku"
        }
      },
      retentionInDays: {
        serializedName: "properties.retentionInDays",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      workspaceCapping: {
        serializedName: "properties.workspaceCapping",
        type: {
          name: "Composite",
          className: "WorkspaceCapping"
        }
      },
      createdDate: {
        serializedName: "properties.createdDate",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      modifiedDate: {
        serializedName: "properties.modifiedDate",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publicNetworkAccessForIngestion: {
        defaultValue: "Enabled",
        serializedName: "properties.publicNetworkAccessForIngestion",
        type: {
          name: "String"
        }
      },
      publicNetworkAccessForQuery: {
        defaultValue: "Enabled",
        serializedName: "properties.publicNetworkAccessForQuery",
        type: {
          name: "String"
        }
      },
      forceCmkForQuery: {
        serializedName: "properties.forceCmkForQuery",
        type: {
          name: "Boolean"
        }
      },
      privateLinkScopedResources: {
        serializedName: "properties.privateLinkScopedResources",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkScopedResource"
            }
          }
        }
      },
      features: {
        serializedName: "properties.features",
        type: {
          name: "Composite",
          className: "WorkspaceFeatures"
        }
      },
      defaultDataCollectionRuleResourceId: {
        serializedName: "properties.defaultDataCollectionRuleResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkspacePatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspacePatch",
    modelProperties: {
      ...AzureEntityResource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      customerId: {
        serializedName: "properties.customerId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "properties.sku",
        type: {
          name: "Composite",
          className: "WorkspaceSku"
        }
      },
      retentionInDays: {
        serializedName: "properties.retentionInDays",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      workspaceCapping: {
        serializedName: "properties.workspaceCapping",
        type: {
          name: "Composite",
          className: "WorkspaceCapping"
        }
      },
      createdDate: {
        serializedName: "properties.createdDate",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      modifiedDate: {
        serializedName: "properties.modifiedDate",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publicNetworkAccessForIngestion: {
        defaultValue: "Enabled",
        serializedName: "properties.publicNetworkAccessForIngestion",
        type: {
          name: "String"
        }
      },
      publicNetworkAccessForQuery: {
        defaultValue: "Enabled",
        serializedName: "properties.publicNetworkAccessForQuery",
        type: {
          name: "String"
        }
      },
      forceCmkForQuery: {
        serializedName: "properties.forceCmkForQuery",
        type: {
          name: "Boolean"
        }
      },
      privateLinkScopedResources: {
        serializedName: "properties.privateLinkScopedResources",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkScopedResource"
            }
          }
        }
      },
      features: {
        serializedName: "properties.features",
        type: {
          name: "Composite",
          className: "WorkspaceFeatures"
        }
      },
      defaultDataCollectionRuleResourceId: {
        serializedName: "properties.defaultDataCollectionRuleResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkspacePurgePurgeHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspacePurgePurgeHeaders",
    modelProperties: {
      xMsStatusLocation: {
        serializedName: "x-ms-status-location",
        type: {
          name: "String"
        }
      }
    }
  }
};
