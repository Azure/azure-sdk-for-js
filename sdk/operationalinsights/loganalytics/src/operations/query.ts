/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Query } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { OperationalInsightsDataClient } from "../operationalInsightsDataClient";
import {
  QueryBody,
  QueryExecuteOptionalParams,
  QueryExecuteResponse
} from "../models";

/** Class containing Query operations. */
export class QueryImpl implements Query {
  private readonly client: OperationalInsightsDataClient;

  /**
   * Initialize a new instance of the class Query class.
   * @param client Reference to the service client
   */
  constructor(client: OperationalInsightsDataClient) {
    this.client = client;
  }

  /**
   * Executes an Analytics query for data.
   * [Here](https://dev.loganalytics.io/documentation/Using-the-API) is an example for using POST with an
   * Analytics query.
   * @param workspaceId ID of the workspace. This is Workspace ID from the Properties blade in the Azure
   *                    portal.
   * @param body The Analytics query. Learn more about the [Analytics query
   *             syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
   * @param options The options parameters.
   */
  execute(
    workspaceId: string,
    body: QueryBody,
    options?: QueryExecuteOptionalParams
  ): Promise<QueryExecuteResponse> {
    return this.client.sendOperationRequest(
      { workspaceId, body, options },
      executeOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const executeOperationSpec: coreClient.OperationSpec = {
  path: "/workspaces/{workspaceId}/query",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.QueryResults
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body,
  urlParameters: [Parameters.$host, Parameters.workspaceId],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
