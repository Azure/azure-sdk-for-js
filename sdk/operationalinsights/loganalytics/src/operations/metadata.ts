/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/metadataMappers";
import * as Parameters from "../models/parameters";
import { LogAnalyticsClientContext } from "../logAnalyticsClientContext";

/** Class representing a Metadata. */
export class Metadata {
  private readonly client: LogAnalyticsClientContext;

  /**
   * Create a Metadata.
   * @param {LogAnalyticsClientContext} client Reference to the service client.
   */
  constructor(client: LogAnalyticsClientContext) {
    this.client = client;
  }

  /**
   * Retrieve the metadata information for the workspace, including its schema, functions, workspace
   * info, categories etc.
   * @summary Gets metadata information
   * @param workspaceId ID of the workspace. This is Workspace ID from the Properties blade in the
   * Azure portal.
   * @param [options] The optional parameters
   * @returns Promise<Models.MetadataGetResponse>
   */
  get(workspaceId: string, options?: msRest.RequestOptionsBase): Promise<Models.MetadataGetResponse>;
  /**
   * @param workspaceId ID of the workspace. This is Workspace ID from the Properties blade in the
   * Azure portal.
   * @param callback The callback
   */
  get(workspaceId: string, callback: msRest.ServiceCallback<Models.MetadataResults>): void;
  /**
   * @param workspaceId ID of the workspace. This is Workspace ID from the Properties blade in the
   * Azure portal.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(workspaceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MetadataResults>): void;
  get(workspaceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MetadataResults>, callback?: msRest.ServiceCallback<Models.MetadataResults>): Promise<Models.MetadataGetResponse> {
    return this.client.sendOperationRequest(
      {
        workspaceId,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.MetadataGetResponse>;
  }

  /**
   * Retrieve the metadata information for the workspace, including its schema, functions, workspace
   * info, categories etc.
   * @summary Gets metadata information
   * @param workspaceId ID of the workspace. This is Workspace ID from the Properties blade in the
   * Azure portal.
   * @param [options] The optional parameters
   * @returns Promise<Models.MetadataPostResponse>
   */
  post(workspaceId: string, options?: msRest.RequestOptionsBase): Promise<Models.MetadataPostResponse>;
  /**
   * @param workspaceId ID of the workspace. This is Workspace ID from the Properties blade in the
   * Azure portal.
   * @param callback The callback
   */
  post(workspaceId: string, callback: msRest.ServiceCallback<Models.MetadataResults>): void;
  /**
   * @param workspaceId ID of the workspace. This is Workspace ID from the Properties blade in the
   * Azure portal.
   * @param options The optional parameters
   * @param callback The callback
   */
  post(workspaceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MetadataResults>): void;
  post(workspaceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MetadataResults>, callback?: msRest.ServiceCallback<Models.MetadataResults>): Promise<Models.MetadataPostResponse> {
    return this.client.sendOperationRequest(
      {
        workspaceId,
        options
      },
      postOperationSpec,
      callback) as Promise<Models.MetadataPostResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/workspaces/{workspaceId}/metadata",
  urlParameters: [
    Parameters.workspaceId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MetadataResults
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const postOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1/workspaces/{workspaceId}/metadata",
  urlParameters: [
    Parameters.workspaceId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MetadataResults
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
