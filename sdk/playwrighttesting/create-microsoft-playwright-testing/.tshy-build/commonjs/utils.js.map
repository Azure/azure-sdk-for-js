{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { exec } from \"node:child_process\";\nimport fs from \"node:fs\";\nimport path, { extname } from \"node:path\";\nimport type { CLIArguments, PlaywrightServiceInitConfig } from \"./types.js\";\nimport { ErrorMessages, Extensions, Languages } from \"./constants.js\";\n\nexport const executeCommand = (command: string): Promise<string> => {\n  return new Promise<string>((resolve, reject) => {\n    exec(command, (error, stdout, _) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(stdout);\n      }\n    });\n  });\n};\n\nexport const getLanguageAndConfigInfoFromDirectory = (): PlaywrightServiceInitConfig => {\n  if (fs.existsSync(\"playwright.config.js\")) {\n    return {\n      playwrightConfigFile: \"playwright.config.js\",\n      projectLanguage: Languages.JavaScript,\n    };\n  } else if (fs.existsSync(\"playwright.config.ts\")) {\n    return {\n      playwrightConfigFile: \"playwright.config.ts\",\n      projectLanguage: Languages.TypeScript,\n    };\n  } else {\n    throw new Error(ErrorMessages.NO_CONFIGURATION_FILE_FOUND);\n  }\n};\n\nexport const getLanguageAndConfigInfoFromConfigurationFile = (\n  playwrightConfigFile: string,\n): PlaywrightServiceInitConfig => {\n  const extension = extname(playwrightConfigFile);\n  if (extension === Extensions.TypeScript) {\n    return {\n      playwrightConfigFile,\n      projectLanguage: Languages.TypeScript,\n    };\n  } else if (extension === Extensions.JavaScript) {\n    return {\n      playwrightConfigFile,\n      projectLanguage: Languages.JavaScript,\n    };\n  } else throw new Error(ErrorMessages.UNSUPPORTED_CONFIGURATION_FILE);\n};\n\nexport const getFileReferenceForImport = (filePath: string): string => {\n  const normalizedPath = filePath.split(path.sep).join(\"/\");\n  const parsedPath = path.parse(normalizedPath);\n  const withoutExtension = path.posix.join(parsedPath.dir, parsedPath.name);\n  if (path.isAbsolute(filePath)) {\n    return withoutExtension;\n  }\n  if (!withoutExtension.startsWith(\"./\") && !withoutExtension.startsWith(\"../\")) {\n    return `./${withoutExtension}`;\n  }\n  return withoutExtension;\n};\n\nexport const showHelpForCLI = (): string => {\n  return `\nUsage: index [options]\n\nplaywright configuration file\n\nOptions:\n  -c, --config <config>\n  -h, --help             display help for command\n`;\n};\n\nexport const parseCLIArguments = (): CLIArguments => {\n  const args = process.argv.slice(2);\n  const cliArguments: CLIArguments = {\n    config: \"\",\n  };\n  for (let i = 0; i < args.length; i++) {\n    if (args[i] === \"-c\" || args[i] === \"--config\") {\n      cliArguments.config = args[i + 1];\n    } else if (args[i] === \"-h\" || args[i] === \"--help\") {\n      console.log(showHelpForCLI());\n      process.exit(0);\n    }\n  }\n  return cliArguments;\n};\n"]}