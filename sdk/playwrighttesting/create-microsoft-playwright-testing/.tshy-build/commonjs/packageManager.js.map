{"version":3,"file":"packageManager.js","sourceRoot":"","sources":["../../src/packageManager.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAElC,qCAAqC;AAErC,+CAAmC;AACnC,yCAAoC;AAEpC,MAAa,GAAG;IAAhB;QACE,gCAA2B,GAAG,CAAC,WAAmB,EAAU,EAAE;YAC5D,OAAO,0BAA0B,WAAW,EAAE,CAAC;QACjD,CAAC,CAAC;QACF,eAAU,GAAG,CAAC,OAAe,EAAE,IAAY,EAAU,EAAE;YACrD,OAAO,OAAO,OAAO,IAAI,IAAI,EAAE,CAAC;QAClC,CAAC,CAAC;IACJ,CAAC;CAAA;AAPD,kBAOC;AAED,MAAa,IAAI;IAGf;QAFQ,iBAAY,GAAY,KAAK,CAAC;QAMtC,gCAA2B,GAAG,CAAC,WAAmB,EAAU,EAAE;YAC5D,OAAO,uBAAuB,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,WAAW,EAAE,CAAC;QAC/E,CAAC,CAAC;QACF,eAAU,GAAG,CAAC,OAAe,EAAE,IAAY,EAAU,EAAE;YACrD,OAAO,QAAQ,OAAO,IAAI,IAAI,EAAE,CAAC;QACnC,CAAC,CAAC;QARA,IAAI,CAAC,YAAY,GAAG,IAAA,oBAAU,EAAC,IAAA,mBAAO,EAAC,IAAA,kBAAG,GAAE,EAAE,qBAAqB,CAAC,CAAC,CAAC;IACxE,CAAC;CAQF;AAbD,oBAaC;AAED,MAAa,IAAI;IAAjB;QACE,gCAA2B,GAAG,CAAC,WAAmB,EAAU,EAAE;YAC5D,OAAO,kBAAkB,WAAW,EAAE,CAAC;QACzC,CAAC,CAAC;QACF,eAAU,GAAG,CAAC,OAAe,EAAE,IAAY,EAAU,EAAE;YACrD,OAAO,QAAQ,OAAO,IAAI,IAAI,EAAE,CAAC;QACnC,CAAC,CAAC;IACJ,CAAC;CAAA;AAPD,oBAOC;AAED,8HAA8H;AACvH,MAAM,iBAAiB,GAAG,GAAmB,EAAE;IACpD,IAAI,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,EAAE,CAAC;QACzC,MAAM,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;QACvD,IAAI,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC;YAAE,OAAO,IAAI,IAAI,EAAE,CAAC;QAClD,IAAI,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC;YAAE,OAAO,IAAI,IAAI,EAAE,CAAC;IACpD,CAAC;IACD,OAAO,IAAI,GAAG,EAAE,CAAC;AACnB,CAAC,CAAC;AAPW,QAAA,iBAAiB,qBAO5B","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { existsSync } from \"node:fs\";\nimport type { PackageManager } from \"./types.js\";\nimport { cwd } from \"node:process\";\nimport { resolve } from \"node:path\";\n\nexport class NPM implements PackageManager {\n  installDevDependencyCommand = (packageName: string): string => {\n    return `npm install --save-dev ${packageName}`;\n  };\n  runCommand = (command: string, args: string): string => {\n    return `npx ${command} ${args}`;\n  };\n}\n\nexport class PNPM implements PackageManager {\n  private useWorkspace: boolean = false;\n\n  constructor() {\n    this.useWorkspace = existsSync(resolve(cwd(), \"pnpm-workspace.yaml\"));\n  }\n\n  installDevDependencyCommand = (packageName: string): string => {\n    return `pnpm add --save-dev ${this.useWorkspace ? \"-w \" : \"\"}${packageName}`;\n  };\n  runCommand = (command: string, args: string): string => {\n    return `pnpm ${command} ${args}`;\n  };\n}\n\nexport class Yarn implements PackageManager {\n  installDevDependencyCommand = (packageName: string): string => {\n    return `yarn add --dev ${packageName}`;\n  };\n  runCommand = (command: string, args: string): string => {\n    return `yarn ${command} ${args}`;\n  };\n}\n\n// https://stackoverflow.com/questions/68133683/is-there-a-cross-platform-way-to-get-the-name-of-the-parent-process-in-node-js\nexport const getPackageManager = (): PackageManager => {\n  if (process.env[\"npm_config_user_agent\"]) {\n    const userAgent = process.env[\"npm_config_user_agent\"];\n    if (userAgent.includes(\"yarn\")) return new Yarn();\n    if (userAgent.includes(\"pnpm\")) return new PNPM();\n  }\n  return new NPM();\n};\n"]}