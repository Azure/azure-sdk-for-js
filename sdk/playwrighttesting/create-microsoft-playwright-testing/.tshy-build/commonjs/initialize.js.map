{"version":3,"file":"initialize.js","sourceRoot":"","sources":["../../src/initialize.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;;AAGlC,8DAA8B;AAC9B,8DAAyB;AACzB,iDAAiE;AAMjE,yCAAuE;AACvE,2DAAwD;AAExD,MAAM,SAAS,GAAmB;IAChC;QACE,IAAI,EAAE,SAAS;QACf,IAAI,EAAE,aAAa;QACnB,OAAO,EAAE,uBAAQ,CAAC,oBAAoB;QACtC,OAAO,EAAE,IAAI;KACd;IACD;QACE,IAAI,EAAE,CAAC,IAAa,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC;QAClD,IAAI,EAAE,qBAAqB;QAC3B,OAAO,EAAE,uBAAQ,CAAC,6BAA6B;QAC/C,OAAO,EAAE,IAAI;KACd;CACF,CAAC;AAEF,MAAa,2BAA2B;IAItC,YAAY,WAAwC;QAK7C,iCAA4B,GAAG,KAAK,IAAmB,EAAE;YAC9D,MAAM,mCAAmC,GAAG,MAAM,IAAI,CAAC,8BAA8B,EAAE,CAAC,CAAC,uEAAuE;YAChK,IAAI,CAAC,mCAAmC;gBAAE,OAAO;YACjD,MAAM,IAAI,CAAC,qBAAqB,EAAE,CAAC,CAAC,2BAA2B;YAC/D,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAC,CAAC,6BAA6B;YAC/D,IAAI,CAAC,4BAA4B,EAAE,CAAC,CAAC,iCAAiC;QACxE,CAAC,CAAC;QAEM,mCAA8B,GAAG,KAAK,IAAsB,EAAE;YACpE,IAAI,CAAC,IAAI,CAAC,iCAAiC,EAAE;gBAAE,OAAO,IAAI,CAAC;YAC3D,MAAM,QAAQ,GAAG,CAAC,MAAM,iBAAO,CAAC,MAAM,CAAC,SAAS,EAAE;gBAChD,QAAQ,EAAE,IAAI,CAAC,cAAc;aAC9B,CAAC,CAA2B,CAAC;YAC9B,IAAI,QAAQ,CAAC,WAAW;gBAAE,OAAO,IAAI,CAAC;YACtC,IAAI,CAAC,QAAQ,CAAC,mBAAmB;gBAAE,OAAO,IAAI,CAAC,8BAA8B,EAAE,CAAC;YAEhF,OAAO,CAAC,GAAG,CAAC,KAAK,uBAAQ,CAAC,0BAA0B,EAAE,CAAC,CAAC;YACxD,OAAO,KAAK,CAAC;QACf,CAAC,CAAC;QAEM,mBAAc,GAAG,GAAU,EAAE;YACnC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAClB,CAAC,CAAC;QAEM,sCAAiC,GAAG,GAAY,EAAE;YACxD,OAAO,iBAAE,CAAC,UAAU,CAAC,IAAI,CAAC,wBAAwB,EAAE,CAAC,CAAC;QACxD,CAAC,CAAC;QAEM,iCAA4B,GAAG,GAAS,EAAE;YAChD,MAAM,yBAAyB,GAAG,IAAI,CAAC,eAAe,CAAC,UAAU,CAC/D,YAAY,EACZ,WAAW,IAAI,CAAC,wBAAwB,EAAE,eAAe,CAC1D,CAAC;YAEF,OAAO,CAAC,GAAG,CAAC,yDAAyD,CAAC,CAAC;YACvE,OAAO,CAAC,GAAG,CAAC,KAAK,yBAAyB,IAAI,CAAC,CAAC;YAEhD,OAAO,CAAC,GAAG,CAAC,iEAAiE,CAAC,CAAC;YAC/E,OAAO,CAAC,GAAG,CAAC,mDAAmD,CAAC,CAAC;YAEjE,OAAO,CAAC,GAAG,CACT,sLAAsL,CACvL,CAAC;YACF,OAAO,CAAC,GAAG,CACT,4HAA4H,CAC7H,CAAC;QACJ,CAAC,CAAC;QAEM,0BAAqB,GAAG,KAAK,IAAmB,EAAE;YACxD,MAAM,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,2BAA2B,CAC9D,qCAAqC,CACtC,CAAC;YACF,OAAO,CAAC,GAAG,CAAC,+BAA+B,OAAO,GAAG,CAAC,CAAC;YACvD,MAAM,IAAA,yBAAc,EAAC,OAAO,CAAC,CAAC;QAChC,CAAC,CAAC;QAEM,wBAAmB,GAAG,KAAK,IAAmB,EAAE;YACtD,MAAM,iBAAiB,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC;YAC1D,MAAM,wBAAwB,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;YAChE,MAAM,iBAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,iBAAiB,EAAE,wBAAwB,CAAC,CAAC;YACzE,OAAO,CAAC,GAAG,CAAC,iDAAiD,iBAAiB,EAAE,CAAC,CAAC;QACpF,CAAC,CAAC;QAEM,4BAAuB,GAAG,GAAW,EAAE;YAC7C,MAAM,sBAAsB,GAAG,IAAA,oCAAyB,EACtD,IAAI,CAAC,YAAY,CAAC,oBAAoB,CACvC,CAAC;YAEF,MAAM,uBAAuB,GAAG;;sBAEd,sBAAsB;CAC3C,CAAC;YAEE,MAAM,uBAAuB,GAAG;;0BAEV,sBAAsB;CAC/C,CAAC;YAEE,MAAM,aAAa,GACjB,IAAI,CAAC,YAAY,CAAC,eAAe,KAAK,wBAAS,CAAC,UAAU;gBACxD,CAAC,CAAC,uBAAuB;gBACzB,CAAC,CAAC,uBAAuB,CAAC;YAE9B,MAAM,OAAO,GACX,aAAa;gBACb;;;;;;;;;;;;;;;;;;;CAmBL,CAAC;YACE,OAAO,OAAO,CAAC;QACjB,CAAC,CAAC;QAEM,6BAAwB,GAAG,GAAW,EAAE;YAC9C,OAAO,2BAA2B,GAAG,yBAAU,CAAC,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;QACrF,CAAC,CAAC;QAlHA,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,eAAe,GAAG,IAAA,qCAAiB,GAAE,CAAC;IAC7C,CAAC;CAiHF;AAxHD,kEAwHC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { PromptObject } from \"prompts\";\nimport prompts from \"prompts\";\nimport fs from \"node:fs\";\nimport { Extensions, Languages, Messages } from \"./constants.js\";\nimport type {\n  OverridePromptResponse,\n  PackageManager,\n  PlaywrightServiceInitConfig,\n} from \"./types.js\";\nimport { executeCommand, getFileReferenceForImport } from \"./utils.js\";\nimport { getPackageManager } from \"./packageManager.js\";\n\nconst questions: PromptObject[] = [\n  {\n    type: \"confirm\",\n    name: \"canOverride\",\n    message: Messages.CAN_OVERRIDE_MESSAGE,\n    initial: true,\n  },\n  {\n    type: (prev: boolean) => (prev ? null : \"confirm\"),\n    name: \"confirmationForExit\",\n    message: Messages.CONFIRMATION_FOR_EXIT_MESSAGE,\n    initial: true,\n  },\n];\n\nexport class PlaywrightServiceInitialize {\n  private _setupConfig: PlaywrightServiceInitConfig;\n  private _packageManager: PackageManager;\n\n  constructor(setupConfig: PlaywrightServiceInitConfig) {\n    this._setupConfig = setupConfig;\n    this._packageManager = getPackageManager();\n  }\n\n  public addServiceSupportToTestSuite = async (): Promise<void> => {\n    const canProceedWithServiceInitialization = await this.checkIfServiceConfigCanBeAdded(); // if service config already present, ask user for overwrite permission\n    if (!canProceedWithServiceInitialization) return;\n    await this.installServicePackage(); // install service packages\n    await this.createServiceConfig(); // create service config file\n    this.displayAdditionalInformation(); // display additional information\n  };\n\n  private checkIfServiceConfigCanBeAdded = async (): Promise<boolean> => {\n    if (!this.isServiceConfigFileAlreadyPresent()) return true;\n    const response = (await prompts.prompt(questions, {\n      onCancel: this.promptOnCancel,\n    })) as OverridePromptResponse;\n    if (response.canOverride) return true;\n    if (!response.confirmationForExit) return this.checkIfServiceConfigCanBeAdded();\n\n    console.log(`\\n${Messages.SETUP_PROCESS_EXIT_MESSAGE}`);\n    return false;\n  };\n\n  private promptOnCancel = (): never => {\n    process.exit(0);\n  };\n\n  private isServiceConfigFileAlreadyPresent = (): boolean => {\n    return fs.existsSync(this.getServiceConfigFileName());\n  };\n\n  private displayAdditionalInformation = (): void => {\n    const runCommandParallelWorkers = this._packageManager.runCommand(\n      \"playwright\",\n      `test -c ${this.getServiceConfigFileName()} --workers=20`,\n    );\n\n    console.log(`\\n\\nTo run playwrights tests using Playwright Service\\n`);\n    console.log(`\\t${runCommandParallelWorkers}\\n`);\n\n    console.log(\"\\nPlaywright Service Portal - https://playwright.microsoft.com/\");\n    console.log(\"Getting Started - https://aka.ms/mpt/quickstart\\n\");\n\n    console.log(\n      \"If you're already using the Microsoft Playwright Testing service, please review the quickstart guide [https://aka.ms/mpt/quickstart] to ensure your tests continue running smoothly.\",\n    );\n    console.log(\n      \"We've introduced changes related to authentication. You'll need to update the new config file to align with these changes.\",\n    );\n  };\n\n  private installServicePackage = async (): Promise<void> => {\n    const command = this._packageManager.installDevDependencyCommand(\n      \"@azure/microsoft-playwright-testing\",\n    );\n    console.log(`Installing Service package (${command})`);\n    await executeCommand(command);\n  };\n\n  private createServiceConfig = async (): Promise<void> => {\n    const serviceConfigFile = this.getServiceConfigFileName();\n    const serviceConfigFileContent = this.getServiceConfigContent();\n    await fs.promises.writeFile(serviceConfigFile, serviceConfigFileContent);\n    console.log(`Success! Created service configuration file - ${serviceConfigFile}`);\n  };\n\n  private getServiceConfigContent = (): string => {\n    const customerConfigFileName = getFileReferenceForImport(\n      this._setupConfig.playwrightConfigFile,\n    );\n\n    const importCommandTypeScript = `import { defineConfig } from '@playwright/test';\nimport { getServiceConfig, ServiceOS } from '@azure/microsoft-playwright-testing';\nimport config from '${customerConfigFileName}';\n`;\n\n    const importCommandJavaScript = `const { defineConfig } = require('@playwright/test');\nconst { getServiceConfig, ServiceOS } = require('@azure/microsoft-playwright-testing');\nconst config = require('${customerConfigFileName}');\n`;\n\n    const importCommand =\n      this._setupConfig.projectLanguage === Languages.TypeScript\n        ? importCommandTypeScript\n        : importCommandJavaScript;\n\n    const content =\n      importCommand +\n      `\n/* Learn more about service configuration at https://aka.ms/mpt/config */\nexport default defineConfig(\n  config,\n  getServiceConfig(config, {\n    exposeNetwork: '<loopback>',\n    timeout: 30000,\n    os: ServiceOS.LINUX,\n    useCloudHostedBrowsers: true // Set to false if you want to only use reporting and not cloud hosted browsers\n  }),\n  {\n    /* \n    Playwright Testing service reporter is added by default.\n    This will override any reporter options specified in the base playwright config.\n    If you are using more reporters, please update your configuration accordingly.\n    */\n    reporter: [['list'], ['@azure/microsoft-playwright-testing/reporter']],\n  }\n);\n`;\n    return content;\n  };\n\n  private getServiceConfigFileName = (): string => {\n    return \"playwright.service.config\" + Extensions[this._setupConfig.projectLanguage];\n  };\n}\n"]}