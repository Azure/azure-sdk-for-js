{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/common/types.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { Location, TestStep } from \"@playwright/test/reporter\";\nimport type { ConnectOptions } from \"@playwright/test\";\nimport type { ServiceAuth, ServiceOS } from \"./constants.js\";\nimport type { TokenCredential } from \"@azure/identity\";\n\n// Public APIs\n\n/**\n * @public\n *\n * Endpoint options for the service.\n */\nexport type EndpointOptions = {\n  /**\n   * @public\n   *\n   * A browser websocket endpoint to connect to.\n   */\n  wsEndpoint: string;\n};\n\n/**\n * @public\n *\n * Browser connect options for the service. This includes endpoint options and connect options.\n *\n * @example\n * ```\n * import playwright, { test, expect, BrowserType } from \"@playwright/test\";\n * import { getConnectOptions, BrowserConnectOptions } from \"@azure/microsoft-playwright-testing\";\n *\n * test(\"has title\", async ({ browserName }) => {\n *  const { wsEndpoint, options } : BrowserConnectOptions = await getConnectOptions();\n *  const browser = await (playwright[browserName] as BrowserType).connect(wsEndpoint, options);\n *  const context = await browser.newContext();\n *  const page = await context.newPage();\n *\n *  await page.goto(\"https://playwright.dev/\");\n *  await expect(page).toHaveTitle(/Playwright/);\n *\n *  await page.close();\n *  await context.close();\n *  await browser.close();\n * });\n * ```\n */\nexport type BrowserConnectOptions = EndpointOptions & {\n  options: ConnectOptions;\n};\n\n/**\n * @public\n *\n * Additional options for the service.\n */\nexport type PlaywrightServiceAdditionalOptions = {\n  /**\n   * @public\n   *\n   * Authentication types supported by Microsoft Playwright Testing.\n   *\n   * @defaultValue  `ENTRA_ID`\n   */\n  serviceAuthType?: AuthenticationType;\n\n  /**\n   * @public\n   *\n   * Operating system types supported by Microsoft Playwright Testing.\n   *\n   * @defaultValue  `linux`\n   */\n  os?: OsType;\n\n  /**\n   * @public\n   *\n   * Run id for the test run.\n   *\n   * @defaultValue `current datetime as ISO string`\n   */\n  runId?: string;\n\n  /**\n   * @public\n   *\n   * Maximum time in milliseconds to wait for the connection to be established.\n   *\n   * @defaultValue `30000`\n   */\n  timeout?: number;\n\n  /**\n   * @public\n   *\n   * Slows down Playwright operations by the specified amount of milliseconds.\n   *\n   * @defaultValue `0`\n   */\n  slowMo?: number;\n\n  /**\n   * @public\n   *\n   * Exposes network available on the connecting client to the browser being connected to.\n   *\n   * @defaultValue `<loopback>`\n   */\n  exposeNetwork?: string;\n\n  /**\n   * @public\n   *\n   * Use cloud hosted browsers.\n   *\n   * @defaultValue `false`\n   */\n  useCloudHostedBrowsers?: boolean;\n\n  /**\n   * @public\n   *\n   * Custom token credential for Entra ID authentication. Learn more at {@link https://github.com/Azure/azure-sdk-for-js/blob/main/documentation/using-azure-identity.md | Using Azure Identity}.\n   *\n   * @defaultValue `DefaultAzureCredential`\n   */\n  credential?: TokenCredential;\n  /**\n   * @public\n   *\n   * Run name for the test run.\n   *\n   * @defaultValue `guid`\n   */\n  runName?: string;\n};\n\n/**\n * @public\n *\n * OS Types supported by Microsoft Playwright Testing.\n */\nexport type OsType = (typeof ServiceOS)[keyof typeof ServiceOS];\n\n/**\n * @public\n *\n * Authentication types supported by Microsoft Playwright Testing.\n */\nexport type AuthenticationType = (typeof ServiceAuth)[keyof typeof ServiceAuth];\n\n/**\n * @public\n *\n * Optional configuration for MPT Reporter.\n *\n * @example\n *\n * ```\n * import { defineConfig } from \"@playwright/test\";\n *\n * export default defineConfig({\n *  reporter: [[\"@azure/microsoft-playwright-testing/reporter\", {\n *   enableGitHubSummary: true\n *  }]],\n * });\n * ```\n */\nexport type ReporterConfiguration = {\n  /**\n   * @public\n   *\n   * Enable GitHub Actions annotations to diagnose test failures and deep link to MPT Portal.\n   *\n   * @defaultValue `true`\n   */\n  enableGitHubSummary?: boolean;\n\n  /**\n   * @public\n   *\n   * Enable result publishing for the test run. This will upload the test result and artifacts to the MPT Portal.\n   *\n   * @defaultValue `true`\n   */\n  enableResultPublish?: boolean;\n};\n\n// Internal APIs\n\nexport type JwtPayload = {\n  aid?: string;\n  iss?: string;\n  sub?: string;\n  aud?: string[] | string;\n  exp?: number;\n  nbf?: number;\n  iat?: number;\n  jti?: string;\n};\n\nexport type AccessTokenClaims = JwtPayload & {\n  aid?: string;\n  accountId?: string;\n};\n\nexport type ErrorDetails = {\n  message: string;\n  location?: Location;\n};\n\nexport type ApiErrorMessage = {\n  [key: string]: {\n    [key: number]: string;\n  };\n};\n\nexport type DedupedStep = { step: TestStep; count: number; duration: number };\n\nexport type RawTestStep = {\n  title: string;\n  category: string;\n  startTime: string;\n  duration: number;\n  error?: string;\n  steps: RawTestStep[];\n  location?: Location;\n  snippet?: string;\n  count: number;\n};\n\nexport type IBackOffOptions = {\n  numOfAttempts: number;\n  retry: (e: any, attemptNumber: number) => boolean | Promise<boolean>;\n  jitter: JitterType;\n};\n\nexport type JitterType = \"full\" | \"none\";\n\nexport type VersionInfo = {\n  major: number;\n  minor: number;\n  patch: number;\n};\n\nexport type PackageManager = {\n  runCommand: (command: string, args: string) => string;\n  getVersionFromStdout: (stdout: string) => string;\n};\n"]}