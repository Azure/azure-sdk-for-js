{"version":3,"file":"mptReporter.js","sourceRoot":"","sources":["../../../src/reporter/mptReporter.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  FullResult,\n  TestCase,\n  TestResult,\n  FullConfig,\n  Reporter,\n  Suite,\n} from \"@playwright/test/reporter\";\nimport { reporterLogger } from \"../common/logger.js\";\nimport {\n  Constants,\n  InternalEnvironmentVariables,\n  TestResultErrorConstants,\n} from \"../common/constants.js\";\nimport { EnvironmentVariables } from \"../common/environmentVariables.js\";\nimport { MultiMap } from \"../common/multimap.js\";\nimport type { EntraTokenDetails } from \"../model/entraTokenDetails.js\";\nimport type { MPTTokenDetails } from \"../model/mptTokenDetails.js\";\nimport { TokenType } from \"../model/mptTokenDetails.js\";\nimport type { Shard, UploadMetadata } from \"../model/shard.js\";\nimport type { StorageUri } from \"../model/storageUri.js\";\nimport type { TestResult as MPTTestResult, RawTestResult } from \"../model/testResult.js\";\nimport type { TestRun } from \"../model/testRun.js\";\nimport type { CIInfo } from \"../utils/cIInfoProvider.js\";\nimport { CIInfoProvider } from \"../utils/cIInfoProvider.js\";\nimport ReporterUtils from \"../utils/reporterUtils.js\";\nimport { ServiceClient } from \"../utils/serviceClient.js\";\nimport { StorageClient } from \"../utils/storageClient.js\";\nimport type { ReporterConfiguration } from \"../common/types.js\";\nimport { ServiceErrorMessageConstants } from \"../common/messages.js\";\nimport { validateMptPAT, populateValuesFromServiceUrl } from \"../utils/utils.js\";\n\n/**\n * @public\n *\n * Extends Playwright's Reporter class to enable Microsoft Playwright Testing's Reporting\n * feature to publish test results and related artifacts and\n * view them in the service portal for faster and easier troubleshooting.\n *\n * @example\n *\n * ```\n * import { defineConfig } from \"@playwright/test\";\n *\n * export default defineConfig({\n *  reporter: [[\"@azure/microsoft-playwright-testing/reporter\"]]\n * });\n * ```\n */\nclass MPTReporter implements Reporter {\n  private isTokenValid: boolean = true;\n  private enableGitHubSummary = true;\n  private isRegionValid: boolean = true;\n  private shard!: Shard;\n  private isTestRunStartSuccess: boolean = false;\n  private ciInfo: CIInfo = CIInfoProvider.getCIInfo();\n  private serviceClient!: ServiceClient;\n  private storageClient!: StorageClient;\n  private reporterUtils!: ReporterUtils;\n  private envVariables!: EnvironmentVariables;\n  private testRawResults = new MultiMap<string, string>();\n  private promiseOnBegin!: Promise<boolean>;\n  private _testEndPromises: Promise<void>[] = [];\n  private testResultBatch: Set<MPTTestResult> = new Set<MPTTestResult>();\n  private errorMessages: string[] = [];\n  private informationalMessages: string[] = [];\n  private processedErrorMessageKeys: string[] = [];\n  private sasUri!: StorageUri;\n  private uploadMetadata: UploadMetadata = {\n    numTestResults: 0,\n    numTotalAttachments: 0,\n    sizeTotalAttachments: 0,\n  };\n  private numWorkers: number = -1;\n  private testRunUrl: string = \"\";\n  private enableResultPublish: boolean = true;\n\n  constructor(config: Partial<ReporterConfiguration>) {\n    if (config?.enableGitHubSummary !== undefined) {\n      this.enableGitHubSummary = config.enableGitHubSummary;\n    }\n    if (config?.enableResultPublish !== undefined) {\n      this.enableResultPublish = config.enableResultPublish;\n    }\n  }\n  private _addError(errorMessage: string): void {\n    if (this.errorMessages.length < Constants.ERROR_MESSAGES_MAX_LENGTH) {\n      this.errorMessages.push(this.reporterUtils.redactAccessToken(errorMessage));\n    }\n  }\n\n  private _addInformationalMessage = (message: string): void => {\n    this.informationalMessages.push(message);\n  };\n\n  private _addKeyToInformationMessage = (key: string): void => {\n    this.processedErrorMessageKeys.push(key);\n  };\n\n  private _isInformationMessagePresent = (key: string): boolean => {\n    return this.processedErrorMessageKeys.includes(key);\n  };\n  private _reporterFailureHandler = (error: { key: string; message: string }): void => {\n    if (!this._isInformationMessagePresent(error.key)) {\n      this._addKeyToInformationMessage(error.key);\n      this._addInformationalMessage(error.message);\n    }\n    this.isTokenValid = false;\n  };\n  /**\n   * @public\n   *\n   * Called once before running tests.\n   *\n   * @param config - Resolved configuration.\n   * @param suite - The root suite that contains all projects, files and test cases.\n   */\n  onBegin(config: FullConfig, suite: Suite): void {\n    if (!this.enableResultPublish) return;\n    this.initializeMPTReporter();\n    this.reporterUtils = new ReporterUtils(this.envVariables, config, suite);\n    if (this.isTokenValid && this.isRegionValid) {\n      this.serviceClient = new ServiceClient(\n        this.envVariables,\n        this.reporterUtils,\n        this._addInformationalMessage,\n        this._isInformationMessagePresent,\n        this._addKeyToInformationMessage,\n      );\n      this.promiseOnBegin = this._onBegin();\n    }\n  }\n\n  /**\n   * @public\n   *\n   * Called after a test has been finished in the worker process.\n   *\n   * @param test - Test that has been finished.\n   * @param result - Result of the test run.\n   */\n  onTestEnd(test: TestCase, result: TestResult): void {\n    this.numWorkers = Math.max(this.numWorkers, result.parallelIndex + 1);\n    this.processTestResult(result);\n    if (!this.enableResultPublish) return;\n    // Process test result\n    this._onTestEnd(test, result);\n    // Upload the test results batch\n    try {\n      if (this.testResultBatch.size >= Constants.TEST_BATCH_SIZE) {\n        const currResultBatch: MPTTestResult[] = [...this.testResultBatch];\n        if (this.isTestRunStartSuccess) {\n          this._testEndPromises.push(this.serviceClient.postTestResults(currResultBatch));\n          reporterLogger.info(`\\nAdded test results batch for upload.`);\n          this.testResultBatch.clear();\n        }\n      }\n    } catch (err: any) {\n      this._addError(`Name: ${err.name}, Message: ${err.message}, Stack: ${err.stack}`);\n      reporterLogger.error(`\\nError in uploading test results: ${err.message}.`);\n    }\n  }\n\n  /**\n   * @public\n   *\n   * Called after all tests have been run, or testing has been interrupted. Note that this method may return a [Promise]\n   * and Playwright Test will await it. Reporter is allowed to override the status and hence affect the exit code of the\n   * test runner.\n   *\n   * @param result - Result of the full test run, `status` can be one of:\n   * - `'passed'` - Everything went as expected.\n   * - `'failed'` - Any test has failed.\n   * - `'timedout'` - The\n   * {@link https://playwright.dev/docs/api/class-testconfig#test-config-global-timeout | testConfig.globalTimeout} has\n   * been reached.\n   * - `'interrupted'` - Interrupted by the user.\n   */\n  async onEnd(result: FullResult): Promise<void> {\n    if (this.enableResultPublish) {\n      await this._onEnd(result);\n      if (!this.isTestRunStartSuccess) {\n        this._addError(`\\nUnable to initialize test run report.`);\n      } else {\n        let count: number = 0;\n        process.stdout.write(\"\\nUploading test results.\");\n        await Promise.allSettled(this._testEndPromises).then((values) => {\n          values.forEach((value) => {\n            if (value.status === \"fulfilled\") {\n              count++;\n              this.reporterUtils.progressBar(count, this._testEndPromises.length);\n            }\n            return value.status;\n          });\n          reporterLogger.info(`\\nTest result processing completed.`);\n          return values;\n        });\n        try {\n          await this.serviceClient.postTestRunShardEnd(\n            result,\n            this.shard,\n            this.errorMessages,\n            this.uploadMetadata,\n            this.numWorkers,\n          );\n          reporterLogger.info(`\\nTest run successfully uploaded.`);\n\n          if (this.enableGitHubSummary) {\n            this.reporterUtils.generateMarkdownSummary(this.testRunUrl);\n          }\n\n          process.stdout.write(`\\nTest report: ${this.testRunUrl}\\n`);\n        } catch (err: any) {\n          this._addError(`Name: ${err.name}, Message: ${err.message}, Stack: ${err.stack}`);\n          reporterLogger.error(`\\nError in completing test run: ${err.message}`);\n          process.stdout.write(`\\nUnable to complete test results upload.`);\n        }\n      }\n    }\n    this.displayAdditionalInformation();\n  }\n\n  private async _onBegin(): Promise<boolean> {\n    process.stdout.write(`\\n`);\n    try {\n      const testRunResponse: TestRun | undefined = await this.serviceClient.patchTestRun(\n        this.ciInfo,\n      );\n      reporterLogger.info(\n        `\\nTest run report successfully initialized: ${testRunResponse?.displayName}.`,\n      );\n      process.stdout.write(\n        `Initializing reporting for this test run. You can view the results at: https://playwright.microsoft.com/workspaces/${encodeURIComponent(this.envVariables.accountId!)}/runs/${encodeURIComponent(this.envVariables.runId!)}\\n`,\n      );\n      const shardResponse = await this.serviceClient.postTestRunShardStart();\n      this.shard = shardResponse;\n      // Set test report link as environment variable. If/else to check if environment variable defined or not.\n      if (\n        Constants.DEFAULT_SERVICE_ENDPOINT &&\n        this.envVariables.accountId &&\n        this.envVariables.runId\n      ) {\n        this.testRunUrl = `${Constants.DEFAULT_DASHBOARD_ENDPOINT}/workspaces/${encodeURIComponent(\n          this.envVariables.accountId,\n        )}/runs/${encodeURIComponent(this.envVariables.runId)}`;\n      }\n      return true;\n    } catch (err: any) {\n      this._addError(`Name: ${err.name}, Message: ${err.message}, Stack: ${err.stack}`);\n      reporterLogger.error(`\\nError in initializing test run report: ${err.message}.`);\n      return false;\n    }\n  }\n\n  private async _onTestEnd(test: TestCase, result: TestResult): Promise<undefined> {\n    try {\n      this.isTestRunStartSuccess = await this.promiseOnBegin;\n      if (!this.isTestRunStartSuccess) {\n        this._addError(`\\nUnable to initialize test run report.`);\n        return;\n      }\n      this.uploadMetadata.numTestResults++;\n      const testResultObject: MPTTestResult = this.reporterUtils.getTestResultObject(\n        test,\n        result,\n        this.ciInfo.jobName!,\n      );\n      this.testResultBatch.add(testResultObject);\n      // Store test attachments in array\n      const testAttachments: string[] = [];\n      const otherAttachments: any[] = [];\n      for (const attachment of result.attachments) {\n        if (attachment.path !== undefined && attachment.path !== \"\") {\n          testAttachments.push(attachment.path);\n          this.uploadMetadata.numTotalAttachments++;\n          this.uploadMetadata.sizeTotalAttachments += ReporterUtils.getFileSize(attachment.path);\n        } else if (attachment.body instanceof Buffer) {\n          otherAttachments.push(attachment);\n          this.uploadMetadata.numTotalAttachments++;\n          this.uploadMetadata.sizeTotalAttachments += ReporterUtils.getBufferSize(attachment.body);\n        }\n      }\n\n      // Get raw result object and store it in map\n      const rawTestResult: RawTestResult = this.reporterUtils.getRawTestResultObject(result);\n      this.testRawResults.set(testResultObject.testExecutionId, JSON.stringify(rawTestResult));\n      this._testEndPromises.push(\n        this._uploadTestResultAttachments(\n          testResultObject.testExecutionId,\n          testAttachments,\n          otherAttachments,\n        ),\n      );\n    } catch (err: any) {\n      this._addError(`Name: ${err.name}, Message: ${err.message}, Stack: ${err.stack}`);\n      reporterLogger.error(`\\nError in processing test result: ${err.message}.`);\n    }\n  }\n\n  private async _onEnd(_: FullResult): Promise<void> {\n    this.isTestRunStartSuccess = await this.promiseOnBegin;\n    if (!this.isTestRunStartSuccess) {\n      this._addError(`\\nUnable to initialize test run report.`);\n      return;\n    }\n    try {\n      // Upload the remaining test results\n      if (this.testResultBatch.size > 0) {\n        await this.serviceClient.postTestResults([...this.testResultBatch]);\n        reporterLogger.info(`\\nUploaded test results batch successfully.`);\n        this.testResultBatch.clear();\n      }\n    } catch (err: any) {\n      this._addError(`Name: ${err.name}, Message: ${err.message}, Stack: ${err.stack}`);\n      reporterLogger.error(`\\nError in uploading test run information: ${err.message}`);\n    }\n  }\n  private renewSasUriIfNeeded = async (): Promise<void> => {\n    if (\n      this.sasUri === undefined ||\n      !ReporterUtils.isTimeGreaterThanCurrentPlus10Minutes(this.sasUri)\n    ) {\n      this.sasUri = await this.serviceClient.createStorageUri();\n      reporterLogger.info(\n        `\\nFetched SAS URI with validity: ${this.sasUri.expiresAt} and access: ${this.sasUri.accessLevel}.`,\n      );\n    }\n  };\n  private async _uploadTestResultAttachments(\n    testExecutionId: string,\n    testAttachments: string[],\n    otherAttachments: any[],\n  ): Promise<void> {\n    try {\n      this.isTestRunStartSuccess = await this.promiseOnBegin;\n      if (!this.isTestRunStartSuccess) {\n        this._addError(`\\nUnable to initialize test run report.`);\n        return;\n      }\n\n      for (const attachmentPath of testAttachments) {\n        const fileRelativePath = `${testExecutionId}/${ReporterUtils.getFileRelativePath(attachmentPath)}`;\n        await this.renewSasUriIfNeeded();\n        await this.storageClient.uploadFile(this.sasUri.uri, attachmentPath, fileRelativePath);\n      }\n\n      for (const otherAttachment of otherAttachments) {\n        await this.renewSasUriIfNeeded();\n        const match = otherAttachment?.contentType?.match(/charset=(.*)/);\n        const charset = match && match.length > 1 ? match[1] : \"utf-8\";\n        await this.storageClient.uploadBuffer(\n          this.sasUri.uri,\n          otherAttachment.body.toString((charset as any) || \"utf-8\"),\n          `${testExecutionId}/${otherAttachment.name}`,\n        );\n      }\n\n      const rawTestResult = this.testRawResults.get(testExecutionId);\n      await this.renewSasUriIfNeeded();\n      await this.storageClient.uploadBuffer(\n        this.sasUri.uri,\n        rawTestResult[0]!,\n        `${testExecutionId}/rawTestResult.json`,\n      );\n    } catch (err: any) {\n      this._addError(`Name: ${err.name}, Message: ${err.message}, Stack: ${err.stack}`);\n      reporterLogger.error(`\\nError in uploading test result attachments: ${err.message}`);\n    }\n  }\n\n  private initializeMPTReporter(): void {\n    this.envVariables = new EnvironmentVariables();\n    if (process.env[InternalEnvironmentVariables.MPT_SETUP_FATAL_ERROR] === \"true\") {\n      this.isTokenValid = false;\n      return;\n    }\n    if (!process.env[InternalEnvironmentVariables.MPT_SERVICE_REPORTING_URL]) {\n      process.stdout.write(\"\\nReporting service url not found.\");\n      this.isTokenValid = false;\n      return;\n    }\n    reporterLogger.info(\n      `Reporting url - ${process.env[InternalEnvironmentVariables.MPT_SERVICE_REPORTING_URL]}`,\n    );\n    if (this.envVariables.accessToken === undefined || this.envVariables.accessToken === \"\") {\n      process.stdout.write(`\\n${ServiceErrorMessageConstants.NO_AUTH_ERROR.message}`);\n      this.isTokenValid = false;\n    } else if (ReporterUtils.hasAudienceClaim(this.envVariables.accessToken)) {\n      const result = populateValuesFromServiceUrl();\n      this.envVariables.region = result!.region;\n      this.envVariables.accountId = result!.accountId;\n      const entraTokenDetails: EntraTokenDetails = ReporterUtils.getTokenDetails<EntraTokenDetails>(\n        this.envVariables.accessToken,\n        TokenType.ENTRA,\n      );\n      this.envVariables.userId = entraTokenDetails.oid;\n      this.envVariables.userName = entraTokenDetails.name;\n    } else {\n      const mptTokenDetails: MPTTokenDetails = ReporterUtils.getTokenDetails<MPTTokenDetails>(\n        this.envVariables.accessToken,\n        TokenType.MPT,\n      );\n      validateMptPAT(this._reporterFailureHandler);\n      this.envVariables.accountId = mptTokenDetails.aid;\n      this.envVariables.userId = mptTokenDetails.oid;\n      this.envVariables.userName = mptTokenDetails.userName;\n      this.envVariables.region = ReporterUtils.getRegionFromAccountID(this.envVariables.accountId!);\n    }\n    this.storageClient = new StorageClient();\n    if (\n      this.envVariables.region &&\n      !Constants.SupportedRegions.includes(this.envVariables.region!) &&\n      this.isTokenValid\n    ) {\n      process.stdout.write(\n        `\\nUnsupported region's workspace used to generate the input Access Token; the supported regions are ${Constants.SupportedRegions.join(\n          \", \",\n        )}`,\n      );\n      this.isRegionValid = false;\n    }\n    if (this.envVariables.runId === undefined || this.envVariables.runId === \"\") {\n      this.envVariables.runId = ReporterUtils.getRunId(this.ciInfo);\n    }\n  }\n\n  private displayAdditionalInformation(): void {\n    if (this.informationalMessages.length > 0) console.info(); // Add a new line before displaying the messages\n    this.informationalMessages.forEach((message, index) => {\n      console.info(`${index + 1}. ${message}`);\n    });\n  }\n\n  private processTestResult(result: TestResult): void {\n    if (\n      process.env[InternalEnvironmentVariables.MPT_CLOUD_HOSTED_BROWSER_USED] &&\n      result.status !== \"passed\"\n    ) {\n      result.errors.forEach((error) => {\n        TestResultErrorConstants.forEach((testResultErrorParseObj) => {\n          if (this.processedErrorMessageKeys.includes(testResultErrorParseObj.key)) {\n            return;\n          }\n          const errorMessage = error.message;\n          if (!errorMessage) return;\n          const match = errorMessage.match(testResultErrorParseObj.pattern);\n          if (match) {\n            this.processedErrorMessageKeys.push(testResultErrorParseObj.key);\n            this._addInformationalMessage(testResultErrorParseObj.message);\n          }\n        });\n      });\n    }\n  }\n\n  /**\n   * @public\n   *\n   * Whether this reporter uses stdio for reporting. When it does not, Playwright Test could add some output to enhance\n   * user experience. If your reporter does not print to the terminal, it is strongly recommended to return `false`.\n   */\n  printsToStdio(): boolean {\n    return true;\n  }\n}\nexport default MPTReporter;\n"]}