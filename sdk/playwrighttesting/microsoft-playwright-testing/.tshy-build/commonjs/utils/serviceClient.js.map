{"version":3,"file":"serviceClient.js","sourceRoot":"","sources":["../../../src/utils/serviceClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { FullResult } from \"@playwright/test/reporter\";\nimport { Constants, InternalEnvironmentVariables } from \"../common/constants.js\";\nimport type { EnvironmentVariables } from \"../common/environmentVariables.js\";\nimport { HttpService } from \"../common/httpService.js\";\nimport type { Shard, UploadMetadata } from \"../model/shard.js\";\nimport type { StorageUri } from \"../model/storageUri.js\";\nimport type { TestResult } from \"../model/testResult.js\";\nimport type { TestRun } from \"../model/testRun.js\";\nimport type { CIInfo } from \"./cIInfoProvider.js\";\nimport type ReporterUtils from \"./reporterUtils.js\";\nimport type { PipelineResponse } from \"@azure/core-rest-pipeline\";\nimport { reporterLogger } from \"../common/logger.js\";\n\nexport class ServiceClient {\n  private httpService: HttpService;\n  private readonly envVariables: EnvironmentVariables;\n  private readonly reporterUtils: ReporterUtils;\n  private readonly addInformationalMessage: (errorMessage: string) => void;\n  private isInformationMessagePresent: (key: string) => boolean;\n  private addKeyToInformationMessage: (key: string) => void;\n  constructor(\n    /* eslint-disable @azure/azure-sdk/ts-use-interface-parameters */\n    envVariables: EnvironmentVariables,\n    reporterUtils: ReporterUtils,\n    /* eslint-enable @azure/azure-sdk/ts-use-interface-parameters */\n    addErrorInformation: (errorMessage: string) => void,\n    isInformationMessagePresent: (key: string) => boolean,\n    addKeyToInformationMessage: (key: string) => void,\n  ) {\n    this.httpService = new HttpService();\n    this.envVariables = envVariables;\n    this.reporterUtils = reporterUtils;\n    this.addInformationalMessage = addErrorInformation;\n    this.isInformationMessagePresent = isInformationMessagePresent;\n    this.addKeyToInformationMessage = addKeyToInformationMessage;\n  }\n\n  async patchTestRun(ciInfo: CIInfo): Promise<TestRun> {\n    const testRun = await this.reporterUtils.getTestRunObject(ciInfo);\n\n    // Escape the runId to avoid issues with special characters\n    const escapedRunId = encodeURIComponent(this.envVariables.runId!);\n    const response: PipelineResponse = await this.httpService.callAPI(\n      \"PATCH\",\n      `${this.getServiceEndpoint()}/${Constants.testRunsEndpoint.replace(\"{workspaceId}\", this.envVariables.accountId!)}/${escapedRunId}?api-version=${Constants.API_VERSION}`,\n      JSON.stringify(testRun),\n      this.envVariables.accessToken,\n      \"application/merge-patch+json\",\n      this.envVariables.correlationId!,\n    );\n    if (response.status === 200) {\n      return JSON.parse(response.bodyAsText!) as TestRun;\n    } else if (response.status === 409) {\n      const errorMessage = Constants.CONFLICT_409_ERROR_MESSAGE.replace(\n        \"{runId}\",\n        this.envVariables.runId,\n      );\n      this.addInformationalMessage(errorMessage);\n      process.stdout.write(`\\n${errorMessage}`);\n    } else if (response.status === 403) {\n      const errorMessage = Constants.FORBIDDEN_403_ERROR_MESSAGE.replace(\n        new RegExp(\"{workspaceId}\", \"g\"),\n        this.envVariables.accountId!,\n      );\n      this.addInformationalMessage(errorMessage);\n      process.stdout.write(`\\n${errorMessage}`);\n    } else {\n      this.handleErrorResponse(response, Constants.patchTestRun);\n    }\n    throw new Error(`Received status ${response.status} from service from PATCH TestRun call.`);\n  }\n\n  async postTestRunShardStart(): Promise<Shard> {\n    const postTestRunShardObject = this.reporterUtils.getTestRunShardStartObject();\n    const escapedRunId = encodeURIComponent(this.envVariables.runId!);\n    const response: PipelineResponse = await this.httpService.callAPI(\n      \"POST\",\n      `${this.getServiceEndpoint()}/${Constants.testRunsShardEndpoint.replace(\"{workspaceId}\", this.envVariables.accountId!).replace(\"{testRunId}\", escapedRunId)}/?api-version=${Constants.API_VERSION}`,\n      JSON.stringify(postTestRunShardObject),\n      this.envVariables.accessToken,\n      \"application/json\",\n      this.envVariables.correlationId!,\n    );\n    if (response.status === 200) {\n      return JSON.parse(response.bodyAsText!) as Shard;\n    }\n    this.handleErrorResponse(response, Constants.patchTestRunShardStart);\n\n    throw new Error(\n      `Received status ${response.status} from service from PATCH TestRun Shard Start call.`,\n    );\n  }\n\n  async postTestRunShardEnd(\n    result: FullResult,\n    // eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\n    shard: Shard,\n    errorMessages: string[],\n    attachmentMetadata: UploadMetadata,\n    workers: number,\n  ): Promise<TestRun> {\n    const postTestRunShardObject = this.reporterUtils.getTestRunShardEndObject(\n      result,\n      shard,\n      errorMessages,\n      attachmentMetadata,\n      workers,\n    );\n    const escapedRunId = encodeURIComponent(this.envVariables.runId!);\n    const response: PipelineResponse = await this.httpService.callAPI(\n      \"POST\",\n      `${this.getServiceEndpoint()}/${Constants.testRunsShardEndpoint.replace(\"{workspaceId}\", this.envVariables.accountId!).replace(\"{testRunId}\", escapedRunId)}/?api-version=${Constants.API_VERSION}`,\n      JSON.stringify(postTestRunShardObject),\n      this.envVariables.accessToken,\n      \"application/json\",\n      this.envVariables.correlationId!,\n    );\n    if (response.status === 200) {\n      return JSON.parse(response.bodyAsText!) as TestRun;\n    }\n    this.handleErrorResponse(response, Constants.patchTestRunShardEnd);\n\n    throw new Error(\n      `Received status ${response.status} from service from PATCH TestRun Shard End call.`,\n    );\n  }\n\n  // eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\n  async postTestResults(testResults: TestResult[]): Promise<void> {\n    try {\n      const payload: any = {\n        value: testResults,\n      };\n      const response: PipelineResponse = await this.httpService.callAPI(\n        \"POST\",\n        `${this.getServiceEndpoint()}/${Constants.testResultsEndpoint.replace(\"{workspaceId}\", this.envVariables.accountId!)}?api-version=${Constants.API_VERSION}`,\n        JSON.stringify(payload),\n        this.envVariables.accessToken,\n        \"application/json\",\n        this.envVariables.correlationId!,\n      );\n      if (response.status === 200) {\n        return;\n      }\n      this.handleErrorResponse(response, Constants.postTestResults);\n    } catch (error) {\n      reporterLogger.error(`Error occurred while posting test results: ${error}`);\n    }\n  }\n\n  async createStorageUri(): Promise<StorageUri> {\n    const escapedRunId = encodeURIComponent(this.envVariables.runId!);\n    const response: PipelineResponse = await this.httpService.callAPI(\n      \"POST\",\n      `${this.getServiceEndpoint()}/${Constants.storageUriEndpoint.replace(\"{workspaceId}\", this.envVariables.accountId!).replace(\"{testRunId}\", escapedRunId)}?api-version=${Constants.API_VERSION}`,\n      null,\n      this.envVariables.accessToken,\n      \"application/json\",\n      this.envVariables.correlationId!,\n    );\n    if (response.status === 200) {\n      return JSON.parse(response.bodyAsText!) as StorageUri;\n    }\n    this.handleErrorResponse(response, Constants.getStorageUri);\n\n    throw new Error(`Received status ${response.status} from service from GET StorageUri call.`);\n  }\n\n  private getServiceEndpoint(): string {\n    return process.env[InternalEnvironmentVariables.MPT_SERVICE_REPORTING_URL]!;\n  }\n\n  private handleErrorResponse(response: PipelineResponse, action: string): void {\n    const statusCode = response.status;\n    const errorMessage = Constants.ERROR_MESSAGE[action]?.[statusCode] ?? \"Unknown error occured.\";\n    if (!this.isInformationMessagePresent(statusCode.toString())) {\n      this.addKeyToInformationMessage(statusCode.toString());\n      this.addInformationalMessage(errorMessage);\n    }\n    process.stdout.write(`${errorMessage}\\n`);\n  }\n}\n"]}