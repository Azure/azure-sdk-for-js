{"version":3,"file":"storageClient.js","sourceRoot":"","sources":["../../../src/utils/storageClient.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,eAAe,EAAE,MAAM,qBAAqB,CAAC;AACtD,OAAO,EAAE,cAAc,EAAE,MAAM,qBAAqB,CAAC;AACrD,OAAO,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AAEnD,MAAM,OAAO,aAAa;IACjB,KAAK,CAAC,UAAU,CAAC,GAAW,EAAE,QAAgB,EAAE,gBAAwB;QAC7E,IAAI,CAAC;YACH,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC;YACnE,MAAM,UAAU,GAAG,IAAI,eAAe,CAAC,aAAa,CAAC,CAAC;YACtD,MAAM,UAAU,CAAC,UAAU,CAAC,QAAQ,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC,CAAC;YAC3D,cAAc,CAAC,IAAI,CAAC,mBAAmB,QAAQ,GAAG,CAAC,CAAC;QACtD,CAAC;QAAC,OAAO,GAAQ,EAAE,CAAC;YAClB,cAAc,CAAC,KAAK,CAClB,2BAA2B,QAAQ,WAAW,GAAG,CAAC,IAAI,cAAc,GAAG,CAAC,OAAO,YAAY,GAAG,CAAC,KAAK,EAAE,CACvG,CAAC;QACJ,CAAC;IACH,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,GAAW,EAAE,MAAc,EAAE,gBAAwB;QAC7E,IAAI,CAAC;YACH,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC;YACnE,MAAM,UAAU,GAAG,IAAI,eAAe,CAAC,aAAa,CAAC,CAAC;YACtD,MAAM,UAAU,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;YAC/C,cAAc,CAAC,OAAO,CAAC,wBAAwB,gBAAgB,GAAG,CAAC,CAAC;QACtE,CAAC;QAAC,OAAO,GAAQ,EAAE,CAAC;YAClB,cAAc,CAAC,KAAK,CAClB,6BAA6B,gBAAgB,WAAW,GAAG,CAAC,IAAI,cAAc,GAAG,CAAC,OAAO,YAAY,GAAG,CAAC,KAAK,EAAE,CACjH,CAAC;QACJ,CAAC;IACH,CAAC;IAEO,gBAAgB,CAAC,GAAW,EAAE,gBAAwB;QAC5D,8DAA8D;QAC9D,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC;QACrD,MAAM,YAAY,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QAC9B,MAAM,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QAC1B,OAAO,YAAY,GAAG,GAAG,GAAG,gBAAgB,GAAG,GAAG,GAAG,QAAQ,CAAC;IAChE,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { BlockBlobClient } from \"@azure/storage-blob\";\nimport { reporterLogger } from \"../common/logger.js\";\nimport { Constants } from \"../common/constants.js\";\n\nexport class StorageClient {\n  public async uploadFile(uri: string, filePath: string, fileRelativePath: string): Promise<void> {\n    try {\n      const cloudFilepath = this.getCloudFilepath(uri, fileRelativePath);\n      const blobClient = new BlockBlobClient(cloudFilepath);\n      await blobClient.uploadFile(filePath, { concurrency: 10 });\n      reporterLogger.info(`\\nUploaded file ${filePath}.`);\n    } catch (err: any) {\n      reporterLogger.error(\n        `\\nUnable to upload file ${filePath}, Name: ${err.name}, Message: ${err.message}, Stack: ${err.stack}`,\n      );\n    }\n  }\n\n  public async uploadBuffer(uri: string, buffer: string, fileRelativePath: string): Promise<void> {\n    try {\n      const cloudFilepath = this.getCloudFilepath(uri, fileRelativePath);\n      const blobClient = new BlockBlobClient(cloudFilepath);\n      await blobClient.upload(buffer, buffer.length);\n      reporterLogger.verbose(`\\nUploaded buffer to ${fileRelativePath}.`);\n    } catch (err: any) {\n      reporterLogger.error(\n        `\\nUnable to upload buffer ${fileRelativePath}, Name: ${err.name}, Message: ${err.message}, Stack: ${err.stack}`,\n      );\n    }\n  }\n\n  private getCloudFilepath(uri: string, fileRelativePath: string): string {\n    // Split the uri on \"?\" to get the container uri and sas token\n    const parts = uri.split(Constants.SAS_URI_SEPARATOR);\n    const containerUri = parts[0];\n    const sasToken = parts[1];\n    return containerUri + \"/\" + fileRelativePath + \"?\" + sasToken;\n  }\n}\n"]}