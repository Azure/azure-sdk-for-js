{"version":3,"file":"playwrightService.js","sourceRoot":"","sources":["../../../src/core/playwrightService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { InternalEnvironmentVariables, ServiceAuth } from \"../common/constants.js\";\nimport customerConfig from \"../common/customerConfig.js\";\nimport { PlaywrightServiceConfig } from \"../common/playwrightServiceConfig.js\";\nimport playwrightServiceEntra from \"./playwrightServiceEntra.js\";\nimport type { PlaywrightServiceAdditionalOptions, BrowserConnectOptions } from \"../common/types.js\";\nimport {\n  emitReportingUrl,\n  fetchOrValidateAccessToken,\n  getAccessToken,\n  getServiceWSEndpoint,\n  validateMptPAT,\n  warnIfAccessTokenCloseToExpiry,\n  validatePlaywrightVersion,\n  validateServiceUrl,\n  exitWithFailureMessage,\n  getPackageVersion,\n  getPlaywrightVersion,\n  getVersionInfo,\n} from \"../utils/utils.js\";\nimport { ServiceErrorMessageConstants } from \"../common/messages.js\";\nimport type { PlaywrightTestConfig } from \"@playwright/test\";\nimport { globalSetupPath, globalTeardownPath } from \"./playwrightServiceUtils.js\";\n\nconst performOneTimeOperation = (options?: PlaywrightServiceAdditionalOptions): void => {\n  const oneTimeOperationFlag =\n    process.env[InternalEnvironmentVariables.ONE_TIME_OPERATION_FLAG] === \"true\";\n  if (oneTimeOperationFlag) return;\n  process.env[InternalEnvironmentVariables.ONE_TIME_OPERATION_FLAG] = \"true\";\n  if (options?.serviceAuthType === ServiceAuth.ACCESS_TOKEN) {\n    warnIfAccessTokenCloseToExpiry();\n  }\n};\n/**\n * @public\n *\n * Generate playwright configuration integrated with Microsoft Playwright Testing.\n *\n * @param config - base playwright configuration\n * @param options - additional options for the service\n * @returns PlaywrightConfig\n *\n * @example\n * ```\n * import { defineConfig } from \"playwright/test\";\n * import { getServiceConfig } from \"@azure/microsoft-playwright-testing\";\n * import playwrightConfig from \"./playwright.config\";\n *\n * export default defineConfig(playwrightConfig, getServiceConfig(playwrightConfig));\n * ```\n *\n * @example\n * ```\n * import { defineConfig } from \"playwright/test\";\n * import { getServiceConfig, ServiceOS } from \"@azure/microsoft-playwright-testing\";\n * import playwrightConfig from \"./playwright.config\";\n *\n * export default defineConfig(playwrightConfig, getServiceConfig(playwrightConfig, {\n *  runId: \"custom run id\",\n *  os: ServiceOS.WINDOWS\n * }));\n * ```\n */\nconst getServiceConfig = (\n  config: PlaywrightTestConfig,\n  options?: PlaywrightServiceAdditionalOptions,\n): PlaywrightTestConfig => {\n  validatePlaywrightVersion();\n  validateServiceUrl();\n  const playwrightVersionInfo = getVersionInfo(getPlaywrightVersion());\n  const isMultipleGlobalFileSupported =\n    playwrightVersionInfo.major >= 1 && playwrightVersionInfo.minor >= 49;\n  if (options?.credential) {\n    playwrightServiceEntra.entraIdAccessToken = options.credential;\n  }\n\n  // if global setup/teardown is string -\n  // 1. if multiple global file is supported, convert it to array\n  // 2. wrap playwright-service global setup/teardown with customer provided global setup/teardown\n\n  // if global setup/teardown is array -\n  // 1. if multiple global file is not supported, throw error\n  // 2. append playwright-service global setup/teardown with customer provided global setup/teardown\n  if (config && config.globalSetup) {\n    if (typeof config.globalSetup === \"string\") {\n      if (isMultipleGlobalFileSupported) {\n        customerConfig.globalSetup = [config.globalSetup];\n      } else {\n        customerConfig.globalSetup = config.globalSetup;\n      }\n    } else {\n      if (!isMultipleGlobalFileSupported) {\n        throw new Error(\n          ServiceErrorMessageConstants.MULTIPLE_SETUP_FILE_PLAYWRIGHT_VERSION_ERROR.message,\n        );\n      }\n      customerConfig.globalSetup = config.globalSetup;\n    }\n  }\n\n  if (config && config.globalTeardown) {\n    if (typeof config.globalTeardown === \"string\") {\n      if (isMultipleGlobalFileSupported) {\n        customerConfig.globalTeardown = [config.globalTeardown];\n      } else {\n        customerConfig.globalTeardown = config.globalTeardown;\n      }\n    } else {\n      if (!isMultipleGlobalFileSupported) {\n        throw new Error(\n          ServiceErrorMessageConstants.MULTIPLE_SETUP_FILE_PLAYWRIGHT_VERSION_ERROR.message,\n        );\n      }\n      customerConfig.globalTeardown = config.globalTeardown;\n    }\n  }\n\n  const playwrightServiceConfig = new PlaywrightServiceConfig();\n  playwrightServiceConfig.setOptions(options);\n  emitReportingUrl();\n\n  const globalFunctions: any = {};\n\n  if (options?.serviceAuthType === ServiceAuth.ACCESS_TOKEN) {\n    // mpt PAT requested and set by the customer, no need to setup entra lifecycle handlers\n    validateMptPAT(exitWithFailureMessage);\n  } else {\n    // If multiple global file is supported, append playwright-service global setup/teardown with customer provided global setup/teardown\n    if (isMultipleGlobalFileSupported) {\n      globalFunctions.globalSetup = [] as string[];\n      globalFunctions.globalTeardown = [] as string[];\n      if (customerConfig.globalSetup) {\n        globalFunctions.globalSetup.push(...(customerConfig.globalSetup as string[]));\n      }\n      if (customerConfig.globalTeardown) {\n        globalFunctions.globalTeardown.push(...(customerConfig.globalTeardown as string[]));\n      }\n      globalFunctions.globalSetup.push(globalSetupPath);\n      globalFunctions.globalTeardown.push(globalTeardownPath);\n    } else {\n      // If multiple global file is not supported, wrap playwright-service global setup/teardown with customer provided global setup/teardown\n      globalFunctions.globalSetup = globalSetupPath;\n      globalFunctions.globalTeardown = globalTeardownPath;\n    }\n  }\n  performOneTimeOperation(options);\n  if (options?.useCloudHostedBrowsers === false) {\n    return {\n      ...globalFunctions,\n    };\n  }\n  if (!process.env[InternalEnvironmentVariables.MPT_CLOUD_HOSTED_BROWSER_USED]) {\n    process.env[InternalEnvironmentVariables.MPT_CLOUD_HOSTED_BROWSER_USED] = \"true\";\n    console.log(\"\\nRunning tests using Microsoft Playwright Testing service.\");\n  }\n\n  return {\n    use: {\n      connectOptions: {\n        wsEndpoint: getServiceWSEndpoint(\n          playwrightServiceConfig.runId,\n          playwrightServiceConfig.serviceOs,\n        ),\n        headers: {\n          Authorization: `Bearer ${getAccessToken()}`,\n          \"x-ms-package-version\": `@azure/microsoft-playwright-testing/${getPackageVersion()}`,\n        },\n        timeout: playwrightServiceConfig.timeout,\n        exposeNetwork: playwrightServiceConfig.exposeNetwork,\n        slowMo: playwrightServiceConfig.slowMo,\n      },\n    },\n    ...globalFunctions,\n  };\n};\n\n/**\n * @public\n *\n * Get connect options required to connect to Microsoft Playwright Testing's cloud hosted browsers.\n *\n * @param options - additional options for the service\n * @returns BrowserConnectOptions\n *\n * @example\n * ```\n * import playwright, { test, expect, BrowserType } from \"@playwright/test\";\n * import { getConnectOptions } from \"@azure/microsoft-playwright-testing\";\n *\n * test('has title', async ({ browserName }) => {\n *  const { wsEndpoint, options } = await getConnectOptions();\n *  const browser = await (playwright[browserName] as BrowserType).connect(wsEndpoint, options);\n *  const context = await browser.newContext();\n *  const page = await context.newPage();\n *\n *  await page.goto('https://playwright.dev/');\n *  await expect(page).toHaveTitle(/Playwright/);\n *\n *  await page.close();\n *  await context.close();\n *  await browser.close();\n * });\n * ```\n */\nconst getConnectOptions = async (\n  options?: Omit<PlaywrightServiceAdditionalOptions, \"serviceAuthType\">,\n): Promise<BrowserConnectOptions> => {\n  const playwrightServiceConfig = new PlaywrightServiceConfig();\n  playwrightServiceConfig.setOptions(options);\n\n  const token = await fetchOrValidateAccessToken(options?.credential);\n  return {\n    wsEndpoint: getServiceWSEndpoint(\n      playwrightServiceConfig.runId,\n      playwrightServiceConfig.serviceOs,\n    ),\n    options: {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"x-ms-package-version\": `@azure/microsoft-playwright-testing/${getPackageVersion()}`,\n      },\n      timeout: playwrightServiceConfig.timeout,\n      exposeNetwork: playwrightServiceConfig.exposeNetwork,\n      slowMo: playwrightServiceConfig.slowMo,\n    },\n  };\n};\n\nexport { getServiceConfig, getConnectOptions };\n"]}