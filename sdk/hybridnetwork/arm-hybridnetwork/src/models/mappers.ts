/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const ConfigurationGroupSchemaListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigurationGroupSchemaListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConfigurationGroupSchema"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConfigurationGroupSchemaPropertiesFormat: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigurationGroupSchemaPropertiesFormat",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      versionState: {
        serializedName: "versionState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      schemaDefinition: {
        serializedName: "schemaDefinition",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const TagsObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TagsObject",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const ConfigurationGroupSchemaVersionUpdateState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigurationGroupSchemaVersionUpdateState",
    modelProperties: {
      versionState: {
        serializedName: "versionState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConfigurationGroupValuePropertiesFormat: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigurationGroupValuePropertiesFormat",
    uberParent: "ConfigurationGroupValuePropertiesFormat",
    polymorphicDiscriminator: {
      serializedName: "configurationType",
      clientName: "configurationType"
    },
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publisherName: {
        serializedName: "publisherName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publisherScope: {
        serializedName: "publisherScope",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      configurationGroupSchemaName: {
        serializedName: "configurationGroupSchemaName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      configurationGroupSchemaOfferingLocation: {
        serializedName: "configurationGroupSchemaOfferingLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      configurationGroupSchemaResourceReference: {
        serializedName: "configurationGroupSchemaResourceReference",
        type: {
          name: "Composite",
          className: "DeploymentResourceIdReference"
        }
      },
      configurationType: {
        serializedName: "configurationType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeploymentResourceIdReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeploymentResourceIdReference",
    uberParent: "DeploymentResourceIdReference",
    polymorphicDiscriminator: {
      serializedName: "idType",
      clientName: "idType"
    },
    modelProperties: {
      idType: {
        defaultValue: "Open",
        serializedName: "idType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConfigurationGroupValueListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigurationGroupValueListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConfigurationGroupValue"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFunctionPropertiesFormat: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFunctionPropertiesFormat",
    uberParent: "NetworkFunctionPropertiesFormat",
    polymorphicDiscriminator: {
      serializedName: "configurationType",
      clientName: "configurationType"
    },
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publisherName: {
        serializedName: "publisherName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publisherScope: {
        serializedName: "publisherScope",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkFunctionDefinitionGroupName: {
        serializedName: "networkFunctionDefinitionGroupName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkFunctionDefinitionVersion: {
        serializedName: "networkFunctionDefinitionVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkFunctionDefinitionOfferingLocation: {
        serializedName: "networkFunctionDefinitionOfferingLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkFunctionDefinitionVersionResourceReference: {
        serializedName: "networkFunctionDefinitionVersionResourceReference",
        type: {
          name: "Composite",
          className: "DeploymentResourceIdReference"
        }
      },
      nfviType: {
        serializedName: "nfviType",
        type: {
          name: "String"
        }
      },
      nfviId: {
        serializedName: "nfviId",
        type: {
          name: "String"
        }
      },
      allowSoftwareUpdate: {
        serializedName: "allowSoftwareUpdate",
        type: {
          name: "Boolean"
        }
      },
      configurationType: {
        serializedName: "configurationType",
        required: true,
        type: {
          name: "String"
        }
      },
      roleOverrideValues: {
        serializedName: "roleOverrideValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ManagedServiceIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedServiceIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserAssignedIdentity" }
          }
        }
      }
    }
  }
};

export const UserAssignedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const NetworkFunctionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFunctionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkFunction"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExecuteRequestParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExecuteRequestParameters",
    modelProperties: {
      serviceEndpoint: {
        serializedName: "serviceEndpoint",
        required: true,
        type: {
          name: "String"
        }
      },
      requestMetadata: {
        serializedName: "requestMetadata",
        type: {
          name: "Composite",
          className: "RequestMetadata"
        }
      }
    }
  }
};

export const RequestMetadata: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RequestMetadata",
    modelProperties: {
      relativePath: {
        serializedName: "relativePath",
        required: true,
        type: {
          name: "String"
        }
      },
      httpMethod: {
        serializedName: "httpMethod",
        required: true,
        type: {
          name: "String"
        }
      },
      serializedBody: {
        serializedName: "serializedBody",
        required: true,
        type: {
          name: "String"
        }
      },
      apiVersion: {
        serializedName: "apiVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComponentProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComponentProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      deploymentProfile: {
        serializedName: "deploymentProfile",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      deploymentStatus: {
        serializedName: "deploymentStatus",
        type: {
          name: "Composite",
          className: "DeploymentStatusProperties"
        }
      }
    }
  }
};

export const DeploymentStatusProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeploymentStatusProperties",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      resources: {
        serializedName: "resources",
        type: {
          name: "Composite",
          className: "Resources"
        }
      },
      nextExpectedUpdateAt: {
        serializedName: "nextExpectedUpdateAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const Resources: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resources",
    modelProperties: {
      deployments: {
        serializedName: "deployments",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Deployment"
            }
          }
        }
      },
      pods: {
        serializedName: "pods",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Pod"
            }
          }
        }
      },
      replicaSets: {
        serializedName: "replicaSets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReplicaSet"
            }
          }
        }
      },
      statefulSets: {
        serializedName: "statefulSets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StatefulSet"
            }
          }
        }
      },
      daemonSets: {
        serializedName: "daemonSets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DaemonSet"
            }
          }
        }
      }
    }
  }
};

export const Deployment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Deployment",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      namespace: {
        serializedName: "namespace",
        type: {
          name: "String"
        }
      },
      desired: {
        serializedName: "desired",
        type: {
          name: "Number"
        }
      },
      ready: {
        serializedName: "ready",
        type: {
          name: "Number"
        }
      },
      upToDate: {
        serializedName: "upToDate",
        type: {
          name: "Number"
        }
      },
      available: {
        serializedName: "available",
        type: {
          name: "Number"
        }
      },
      creationTime: {
        serializedName: "creationTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const Pod: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Pod",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      namespace: {
        serializedName: "namespace",
        type: {
          name: "String"
        }
      },
      desired: {
        serializedName: "desired",
        type: {
          name: "Number"
        }
      },
      ready: {
        serializedName: "ready",
        type: {
          name: "Number"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      creationTime: {
        serializedName: "creationTime",
        type: {
          name: "DateTime"
        }
      },
      events: {
        serializedName: "events",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PodEvent"
            }
          }
        }
      }
    }
  }
};

export const PodEvent: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PodEvent",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      lastSeenTime: {
        serializedName: "lastSeenTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ReplicaSet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicaSet",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      namespace: {
        serializedName: "namespace",
        type: {
          name: "String"
        }
      },
      desired: {
        serializedName: "desired",
        type: {
          name: "Number"
        }
      },
      ready: {
        serializedName: "ready",
        type: {
          name: "Number"
        }
      },
      current: {
        serializedName: "current",
        type: {
          name: "Number"
        }
      },
      creationTime: {
        serializedName: "creationTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const StatefulSet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StatefulSet",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      namespace: {
        serializedName: "namespace",
        type: {
          name: "String"
        }
      },
      desired: {
        serializedName: "desired",
        type: {
          name: "Number"
        }
      },
      ready: {
        serializedName: "ready",
        type: {
          name: "Number"
        }
      },
      creationTime: {
        serializedName: "creationTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const DaemonSet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DaemonSet",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      namespace: {
        serializedName: "namespace",
        type: {
          name: "String"
        }
      },
      desired: {
        serializedName: "desired",
        type: {
          name: "Number"
        }
      },
      current: {
        serializedName: "current",
        type: {
          name: "Number"
        }
      },
      ready: {
        serializedName: "ready",
        type: {
          name: "Number"
        }
      },
      upToDate: {
        serializedName: "upToDate",
        type: {
          name: "Number"
        }
      },
      available: {
        serializedName: "available",
        type: {
          name: "Number"
        }
      },
      creationTime: {
        serializedName: "creationTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ComponentListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComponentListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Component"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFunctionDefinitionGroupListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFunctionDefinitionGroupListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkFunctionDefinitionGroup"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFunctionDefinitionGroupPropertiesFormat: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFunctionDefinitionGroupPropertiesFormat",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFunctionDefinitionVersionPropertiesFormat: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFunctionDefinitionVersionPropertiesFormat",
    uberParent: "NetworkFunctionDefinitionVersionPropertiesFormat",
    polymorphicDiscriminator: {
      serializedName: "networkFunctionType",
      clientName: "networkFunctionType"
    },
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      versionState: {
        serializedName: "versionState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      deployParameters: {
        serializedName: "deployParameters",
        type: {
          name: "String"
        }
      },
      networkFunctionType: {
        serializedName: "networkFunctionType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFunctionDefinitionVersionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFunctionDefinitionVersionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkFunctionDefinitionVersion"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFunctionDefinitionVersionUpdateState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFunctionDefinitionVersionUpdateState",
    modelProperties: {
      versionState: {
        serializedName: "versionState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkServiceDesignGroupListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkServiceDesignGroupListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkServiceDesignGroup"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkServiceDesignGroupPropertiesFormat: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkServiceDesignGroupPropertiesFormat",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkServiceDesignVersionPropertiesFormat: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkServiceDesignVersionPropertiesFormat",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      versionState: {
        serializedName: "versionState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      configurationGroupSchemaReferences: {
        serializedName: "configurationGroupSchemaReferences",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "ReferencedResource" }
          }
        }
      },
      nfvisFromSite: {
        serializedName: "nfvisFromSite",
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "NfviDetails" } }
        }
      },
      resourceElementTemplates: {
        serializedName: "resourceElementTemplates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceElementTemplate"
            }
          }
        }
      }
    }
  }
};

export const ReferencedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReferencedResource",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NfviDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NfviDetails",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceElementTemplate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceElementTemplate",
    uberParent: "ResourceElementTemplate",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "resourceElementType"
    },
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      resourceElementType: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      dependsOnProfile: {
        serializedName: "dependsOnProfile",
        type: {
          name: "Composite",
          className: "DependsOnProfile"
        }
      }
    }
  }
};

export const DependsOnProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DependsOnProfile",
    modelProperties: {
      installDependsOn: {
        serializedName: "installDependsOn",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      uninstallDependsOn: {
        serializedName: "uninstallDependsOn",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      updateDependsOn: {
        serializedName: "updateDependsOn",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const NetworkServiceDesignVersionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkServiceDesignVersionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkServiceDesignVersion"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkServiceDesignVersionUpdateState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkServiceDesignVersionUpdateState",
    modelProperties: {
      versionState: {
        serializedName: "versionState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PublisherListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PublisherListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Publisher"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PublisherPropertiesFormat: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PublisherPropertiesFormat",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      scope: {
        serializedName: "scope",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ArtifactStoreListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArtifactStoreListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ArtifactStore"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ArtifactStorePropertiesFormat: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArtifactStorePropertiesFormat",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      storeType: {
        serializedName: "storeType",
        type: {
          name: "String"
        }
      },
      replicationStrategy: {
        serializedName: "replicationStrategy",
        type: {
          name: "String"
        }
      },
      managedResourceGroupConfiguration: {
        serializedName: "managedResourceGroupConfiguration",
        type: {
          name: "Composite",
          className:
            "ArtifactStorePropertiesFormatManagedResourceGroupConfiguration"
        }
      },
      storageResourceId: {
        serializedName: "storageResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ArtifactStorePropertiesFormatManagedResourceGroupConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArtifactStorePropertiesFormatManagedResourceGroupConfiguration",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ArtifactManifestListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArtifactManifestListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ArtifactManifest"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ArtifactManifestPropertiesFormat: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArtifactManifestPropertiesFormat",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      artifactManifestState: {
        serializedName: "artifactManifestState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      artifacts: {
        serializedName: "artifacts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManifestArtifactFormat"
            }
          }
        }
      }
    }
  }
};

export const ManifestArtifactFormat: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManifestArtifactFormat",
    modelProperties: {
      artifactName: {
        serializedName: "artifactName",
        type: {
          name: "String"
        }
      },
      artifactType: {
        serializedName: "artifactType",
        type: {
          name: "String"
        }
      },
      artifactVersion: {
        serializedName: "artifactVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ArtifactAccessCredential: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArtifactAccessCredential",
    uberParent: "ArtifactAccessCredential",
    polymorphicDiscriminator: {
      serializedName: "credentialType",
      clientName: "credentialType"
    },
    modelProperties: {
      credentialType: {
        serializedName: "credentialType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ArtifactManifestUpdateState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArtifactManifestUpdateState",
    modelProperties: {
      artifactManifestState: {
        serializedName: "artifactManifestState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyArtifactOverviewListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyArtifactOverviewListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProxyArtifactListOverview"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyArtifactVersionsOverviewListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyArtifactVersionsOverviewListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProxyArtifactVersionsListOverview"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyArtifactOverviewPropertiesValue: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyArtifactOverviewPropertiesValue",
    modelProperties: {
      artifactType: {
        serializedName: "artifactType",
        type: {
          name: "String"
        }
      },
      artifactVersion: {
        serializedName: "artifactVersion",
        type: {
          name: "String"
        }
      },
      artifactState: {
        serializedName: "artifactState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ArtifactChangeState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArtifactChangeState",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ArtifactChangeStateProperties"
        }
      }
    }
  }
};

export const ArtifactChangeStateProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArtifactChangeStateProperties",
    modelProperties: {
      artifactState: {
        serializedName: "artifactState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SitePropertiesFormat: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SitePropertiesFormat",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      nfvis: {
        serializedName: "nfvis",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NFVIs"
            }
          }
        }
      },
      siteNetworkServiceReferences: {
        serializedName: "siteNetworkServiceReferences",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReferencedResource"
            }
          }
        }
      }
    }
  }
};

export const NFVIs: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NFVIs",
    uberParent: "NFVIs",
    polymorphicDiscriminator: {
      serializedName: "nfviType",
      clientName: "nfviType"
    },
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      nfviType: {
        serializedName: "nfviType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SiteListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Site"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteNetworkServicePropertiesFormat: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SiteNetworkServicePropertiesFormat",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      managedResourceGroupConfiguration: {
        serializedName: "managedResourceGroupConfiguration",
        type: {
          name: "Composite",
          className: "ManagedResourceGroupConfiguration"
        }
      },
      siteReference: {
        serializedName: "siteReference",
        type: {
          name: "Composite",
          className: "ReferencedResource"
        }
      },
      publisherName: {
        serializedName: "publisherName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publisherScope: {
        serializedName: "publisherScope",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkServiceDesignGroupName: {
        serializedName: "networkServiceDesignGroupName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkServiceDesignVersionName: {
        serializedName: "networkServiceDesignVersionName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkServiceDesignVersionOfferingLocation: {
        serializedName: "networkServiceDesignVersionOfferingLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkServiceDesignVersionResourceReference: {
        serializedName: "networkServiceDesignVersionResourceReference",
        type: {
          name: "Composite",
          className: "DeploymentResourceIdReference"
        }
      },
      desiredStateConfigurationGroupValueReferences: {
        serializedName: "desiredStateConfigurationGroupValueReferences",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "ReferencedResource" }
          }
        }
      },
      lastStateNetworkServiceDesignVersionName: {
        serializedName: "lastStateNetworkServiceDesignVersionName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastStateConfigurationGroupValueReferences: {
        serializedName: "lastStateConfigurationGroupValueReferences",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "ReferencedResource" }
          }
        }
      }
    }
  }
};

export const ManagedResourceGroupConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedResourceGroupConfiguration",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Sku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteNetworkServiceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SiteNetworkServiceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SiteNetworkService"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomLocationResourceId: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomLocationResourceId",
    modelProperties: {
      id: {
        constraints: {
          Pattern: new RegExp(
            "^\\/[sS][uU][bB][sS][cC][rR][iI][pP][tT][iI][oO][nN][sS]\\/[^/?#]+\\/[rR][eE][sS][oO][uU][rR][cC][eE][gG][rR][oO][uU][pP][sS]\\/[^/?#]+\\/[pP][rR][oO][vV][iI][dD][eE][rR][sS]\\/[mM][iI][cC][rR][oO][sS][oO][fF][tT]\\.[eE][xX][tT][eE][nN][dD][eE][dD][lL][oO][cC][aA][tT][iI][oO][nN]\\/[cC][uU][sS][tT][oO][mM][lL][oO][cC][aA][tT][iI][oO][nN][sS]\\/[^/?#]+$"
          )
        },
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFunctionApplication: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFunctionApplication",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      dependsOnProfile: {
        serializedName: "dependsOnProfile",
        type: {
          name: "Composite",
          className: "DependsOnProfile"
        }
      }
    }
  }
};

export const ArtifactProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArtifactProfile",
    modelProperties: {
      artifactStore: {
        serializedName: "artifactStore",
        type: {
          name: "Composite",
          className: "ReferencedResource"
        }
      }
    }
  }
};

export const MappingRuleProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MappingRuleProfile",
    modelProperties: {
      applicationEnablement: {
        serializedName: "applicationEnablement",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureStorageAccountContainerCredential: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureStorageAccountContainerCredential",
    modelProperties: {
      containerName: {
        serializedName: "containerName",
        type: {
          name: "String"
        }
      },
      containerSasUri: {
        serializedName: "containerSasUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerizedNetworkFunctionTemplate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerizedNetworkFunctionTemplate",
    uberParent: "ContainerizedNetworkFunctionTemplate",
    polymorphicDiscriminator: {
      serializedName: "nfviType",
      clientName: "nfviType"
    },
    modelProperties: {
      nfviType: {
        serializedName: "nfviType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkFunctionTemplate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkFunctionTemplate",
    uberParent: "VirtualNetworkFunctionTemplate",
    polymorphicDiscriminator: {
      serializedName: "nfviType",
      clientName: "nfviType"
    },
    modelProperties: {
      nfviType: {
        serializedName: "nfviType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HelmArtifactProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HelmArtifactProfile",
    modelProperties: {
      helmPackageName: {
        serializedName: "helmPackageName",
        type: {
          name: "String"
        }
      },
      helmPackageVersionRange: {
        serializedName: "helmPackageVersionRange",
        type: {
          name: "String"
        }
      },
      registryValuesPaths: {
        serializedName: "registryValuesPaths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      imagePullSecretsValuesPaths: {
        serializedName: "imagePullSecretsValuesPaths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const HelmMappingRuleProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HelmMappingRuleProfile",
    modelProperties: {
      releaseNamespace: {
        serializedName: "releaseNamespace",
        type: {
          name: "String"
        }
      },
      releaseName: {
        serializedName: "releaseName",
        type: {
          name: "String"
        }
      },
      helmPackageVersion: {
        serializedName: "helmPackageVersion",
        type: {
          name: "String"
        }
      },
      values: {
        serializedName: "values",
        type: {
          name: "String"
        }
      },
      options: {
        serializedName: "options",
        type: {
          name: "Composite",
          className: "HelmMappingRuleProfileOptions"
        }
      }
    }
  }
};

export const HelmMappingRuleProfileOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HelmMappingRuleProfileOptions",
    modelProperties: {
      installOptions: {
        serializedName: "installOptions",
        type: {
          name: "Composite",
          className: "HelmInstallOptions"
        }
      },
      upgradeOptions: {
        serializedName: "upgradeOptions",
        type: {
          name: "Composite",
          className: "HelmUpgradeOptions"
        }
      }
    }
  }
};

export const HelmInstallOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HelmInstallOptions",
    modelProperties: {
      atomic: {
        serializedName: "atomic",
        type: {
          name: "String"
        }
      },
      wait: {
        serializedName: "wait",
        type: {
          name: "String"
        }
      },
      timeout: {
        serializedName: "timeout",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HelmUpgradeOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HelmUpgradeOptions",
    modelProperties: {
      atomic: {
        serializedName: "atomic",
        type: {
          name: "String"
        }
      },
      wait: {
        serializedName: "wait",
        type: {
          name: "String"
        }
      },
      timeout: {
        serializedName: "timeout",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VhdImageArtifactProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VhdImageArtifactProfile",
    modelProperties: {
      vhdName: {
        serializedName: "vhdName",
        type: {
          name: "String"
        }
      },
      vhdVersion: {
        serializedName: "vhdVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VhdImageMappingRuleProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VhdImageMappingRuleProfile",
    modelProperties: {
      userConfiguration: {
        serializedName: "userConfiguration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ArmTemplateArtifactProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArmTemplateArtifactProfile",
    modelProperties: {
      templateName: {
        serializedName: "templateName",
        type: {
          name: "String"
        }
      },
      templateVersion: {
        serializedName: "templateVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ArmTemplateMappingRuleProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArmTemplateMappingRuleProfile",
    modelProperties: {
      templateParameters: {
        serializedName: "templateParameters",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageArtifactProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageArtifactProfile",
    modelProperties: {
      imageName: {
        serializedName: "imageName",
        type: {
          name: "String"
        }
      },
      imageVersion: {
        serializedName: "imageVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageMappingRuleProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageMappingRuleProfile",
    modelProperties: {
      userConfiguration: {
        serializedName: "userConfiguration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ArmResourceDefinitionResourceElementTemplate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArmResourceDefinitionResourceElementTemplate",
    modelProperties: {
      templateType: {
        serializedName: "templateType",
        type: {
          name: "String"
        }
      },
      parameterValues: {
        serializedName: "parameterValues",
        type: {
          name: "String"
        }
      },
      artifactProfile: {
        serializedName: "artifactProfile",
        type: {
          name: "Composite",
          className: "NSDArtifactProfile"
        }
      }
    }
  }
};

export const NSDArtifactProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NSDArtifactProfile",
    modelProperties: {
      artifactStoreReference: {
        serializedName: "artifactStoreReference",
        type: {
          name: "Composite",
          className: "ReferencedResource"
        }
      },
      artifactName: {
        serializedName: "artifactName",
        type: {
          name: "String"
        }
      },
      artifactVersion: {
        serializedName: "artifactVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyArtifactOverviewPropertiesFormat: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyArtifactOverviewPropertiesFormat",
    modelProperties: {
      artifactVersions: {
        serializedName: "artifactVersions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProxyArtifactOverviewPropertiesValue"
            }
          }
        }
      }
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const ConfigurationValueWithSecrets: coreClient.CompositeMapper = {
  serializedName: "Secret",
  type: {
    name: "Composite",
    className: "ConfigurationValueWithSecrets",
    uberParent: "ConfigurationGroupValuePropertiesFormat",
    polymorphicDiscriminator:
      ConfigurationGroupValuePropertiesFormat.type.polymorphicDiscriminator,
    modelProperties: {
      ...ConfigurationGroupValuePropertiesFormat.type.modelProperties,
      secretConfigurationValue: {
        serializedName: "secretConfigurationValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConfigurationValueWithoutSecrets: coreClient.CompositeMapper = {
  serializedName: "Open",
  type: {
    name: "Composite",
    className: "ConfigurationValueWithoutSecrets",
    uberParent: "ConfigurationGroupValuePropertiesFormat",
    polymorphicDiscriminator:
      ConfigurationGroupValuePropertiesFormat.type.polymorphicDiscriminator,
    modelProperties: {
      ...ConfigurationGroupValuePropertiesFormat.type.modelProperties,
      configurationValue: {
        serializedName: "configurationValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecretDeploymentResourceReference: coreClient.CompositeMapper = {
  serializedName: "Secret",
  type: {
    name: "Composite",
    className: "SecretDeploymentResourceReference",
    uberParent: "DeploymentResourceIdReference",
    polymorphicDiscriminator:
      DeploymentResourceIdReference.type.polymorphicDiscriminator,
    modelProperties: {
      ...DeploymentResourceIdReference.type.modelProperties,
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OpenDeploymentResourceReference: coreClient.CompositeMapper = {
  serializedName: "Open",
  type: {
    name: "Composite",
    className: "OpenDeploymentResourceReference",
    uberParent: "DeploymentResourceIdReference",
    polymorphicDiscriminator:
      DeploymentResourceIdReference.type.polymorphicDiscriminator,
    modelProperties: {
      ...DeploymentResourceIdReference.type.modelProperties,
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFunctionValueWithSecrets: coreClient.CompositeMapper = {
  serializedName: "Secret",
  type: {
    name: "Composite",
    className: "NetworkFunctionValueWithSecrets",
    uberParent: "NetworkFunctionPropertiesFormat",
    polymorphicDiscriminator:
      NetworkFunctionPropertiesFormat.type.polymorphicDiscriminator,
    modelProperties: {
      ...NetworkFunctionPropertiesFormat.type.modelProperties,
      secretDeploymentValues: {
        serializedName: "secretDeploymentValues",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFunctionValueWithoutSecrets: coreClient.CompositeMapper = {
  serializedName: "Open",
  type: {
    name: "Composite",
    className: "NetworkFunctionValueWithoutSecrets",
    uberParent: "NetworkFunctionPropertiesFormat",
    polymorphicDiscriminator:
      NetworkFunctionPropertiesFormat.type.polymorphicDiscriminator,
    modelProperties: {
      ...NetworkFunctionPropertiesFormat.type.modelProperties,
      deploymentValues: {
        serializedName: "deploymentValues",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerizedNetworkFunctionDefinitionVersion: coreClient.CompositeMapper = {
  serializedName: "ContainerizedNetworkFunction",
  type: {
    name: "Composite",
    className: "ContainerizedNetworkFunctionDefinitionVersion",
    uberParent: "NetworkFunctionDefinitionVersionPropertiesFormat",
    polymorphicDiscriminator:
      NetworkFunctionDefinitionVersionPropertiesFormat.type
        .polymorphicDiscriminator,
    modelProperties: {
      ...NetworkFunctionDefinitionVersionPropertiesFormat.type.modelProperties,
      networkFunctionTemplate: {
        serializedName: "networkFunctionTemplate",
        type: {
          name: "Composite",
          className: "ContainerizedNetworkFunctionTemplate"
        }
      }
    }
  }
};

export const VirtualNetworkFunctionDefinitionVersion: coreClient.CompositeMapper = {
  serializedName: "VirtualNetworkFunction",
  type: {
    name: "Composite",
    className: "VirtualNetworkFunctionDefinitionVersion",
    uberParent: "NetworkFunctionDefinitionVersionPropertiesFormat",
    polymorphicDiscriminator:
      NetworkFunctionDefinitionVersionPropertiesFormat.type
        .polymorphicDiscriminator,
    modelProperties: {
      ...NetworkFunctionDefinitionVersionPropertiesFormat.type.modelProperties,
      networkFunctionTemplate: {
        serializedName: "networkFunctionTemplate",
        type: {
          name: "Composite",
          className: "VirtualNetworkFunctionTemplate"
        }
      }
    }
  }
};

export const ArmResourceDefinitionResourceElementTemplateDetails: coreClient.CompositeMapper = {
  serializedName: "ArmResourceDefinition",
  type: {
    name: "Composite",
    className: "ArmResourceDefinitionResourceElementTemplateDetails",
    uberParent: "ResourceElementTemplate",
    polymorphicDiscriminator:
      ResourceElementTemplate.type.polymorphicDiscriminator,
    modelProperties: {
      ...ResourceElementTemplate.type.modelProperties,
      configuration: {
        serializedName: "configuration",
        type: {
          name: "Composite",
          className: "ArmResourceDefinitionResourceElementTemplate"
        }
      }
    }
  }
};

export const NetworkFunctionDefinitionResourceElementTemplateDetails: coreClient.CompositeMapper = {
  serializedName: "NetworkFunctionDefinition",
  type: {
    name: "Composite",
    className: "NetworkFunctionDefinitionResourceElementTemplateDetails",
    uberParent: "ResourceElementTemplate",
    polymorphicDiscriminator:
      ResourceElementTemplate.type.polymorphicDiscriminator,
    modelProperties: {
      ...ResourceElementTemplate.type.modelProperties,
      configuration: {
        serializedName: "configuration",
        type: {
          name: "Composite",
          className: "ArmResourceDefinitionResourceElementTemplate"
        }
      }
    }
  }
};

export const AzureContainerRegistryScopedTokenCredential: coreClient.CompositeMapper = {
  serializedName: "AzureContainerRegistryScopedToken",
  type: {
    name: "Composite",
    className: "AzureContainerRegistryScopedTokenCredential",
    uberParent: "ArtifactAccessCredential",
    polymorphicDiscriminator:
      ArtifactAccessCredential.type.polymorphicDiscriminator,
    modelProperties: {
      ...ArtifactAccessCredential.type.modelProperties,
      username: {
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      acrToken: {
        serializedName: "acrToken",
        type: {
          name: "String"
        }
      },
      acrServerUrl: {
        serializedName: "acrServerUrl",
        type: {
          name: "String"
        }
      },
      repositories: {
        serializedName: "repositories",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      expiry: {
        serializedName: "expiry",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const AzureStorageAccountCredential: coreClient.CompositeMapper = {
  serializedName: "AzureStorageAccountToken",
  type: {
    name: "Composite",
    className: "AzureStorageAccountCredential",
    uberParent: "ArtifactAccessCredential",
    polymorphicDiscriminator:
      ArtifactAccessCredential.type.polymorphicDiscriminator,
    modelProperties: {
      ...ArtifactAccessCredential.type.modelProperties,
      storageAccountId: {
        serializedName: "storageAccountId",
        type: {
          name: "String"
        }
      },
      containerCredentials: {
        serializedName: "containerCredentials",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureStorageAccountContainerCredential"
            }
          }
        }
      },
      expiry: {
        serializedName: "expiry",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const AzureCoreNfviDetails: coreClient.CompositeMapper = {
  serializedName: "AzureCore",
  type: {
    name: "Composite",
    className: "AzureCoreNfviDetails",
    uberParent: "NFVIs",
    polymorphicDiscriminator: NFVIs.type.polymorphicDiscriminator,
    modelProperties: {
      ...NFVIs.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureArcK8SClusterNfviDetails: coreClient.CompositeMapper = {
  serializedName: "AzureArcKubernetes",
  type: {
    name: "Composite",
    className: "AzureArcK8SClusterNfviDetails",
    uberParent: "NFVIs",
    polymorphicDiscriminator: NFVIs.type.polymorphicDiscriminator,
    modelProperties: {
      ...NFVIs.type.modelProperties,
      customLocationReference: {
        serializedName: "customLocationReference",
        type: {
          name: "Composite",
          className: "ReferencedResource"
        }
      }
    }
  }
};

export const AzureOperatorNexusClusterNfviDetails: coreClient.CompositeMapper = {
  serializedName: "AzureOperatorNexus",
  type: {
    name: "Composite",
    className: "AzureOperatorNexusClusterNfviDetails",
    uberParent: "NFVIs",
    polymorphicDiscriminator: NFVIs.type.polymorphicDiscriminator,
    modelProperties: {
      ...NFVIs.type.modelProperties,
      customLocationReference: {
        serializedName: "customLocationReference",
        type: {
          name: "Composite",
          className: "ReferencedResource"
        }
      }
    }
  }
};

export const AzureArcKubernetesNetworkFunctionApplication: coreClient.CompositeMapper = {
  serializedName: "AzureArcKubernetesNetworkFunctionApplication",
  type: {
    name: "Composite",
    className: "AzureArcKubernetesNetworkFunctionApplication",
    uberParent: "NetworkFunctionApplication",
    polymorphicDiscriminator: {
      serializedName: "artifactType",
      clientName: "artifactType"
    },
    modelProperties: {
      ...NetworkFunctionApplication.type.modelProperties,
      artifactType: {
        serializedName: "artifactType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureCoreNetworkFunctionApplication: coreClient.CompositeMapper = {
  serializedName: "AzureCoreNetworkFunctionApplication",
  type: {
    name: "Composite",
    className: "AzureCoreNetworkFunctionApplication",
    uberParent: "NetworkFunctionApplication",
    polymorphicDiscriminator: {
      serializedName: "artifactType",
      clientName: "artifactType"
    },
    modelProperties: {
      ...NetworkFunctionApplication.type.modelProperties,
      artifactType: {
        serializedName: "artifactType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureOperatorNexusNetworkFunctionApplication: coreClient.CompositeMapper = {
  serializedName: "AzureOperatorNexusNetworkFunctionApplication",
  type: {
    name: "Composite",
    className: "AzureOperatorNexusNetworkFunctionApplication",
    uberParent: "NetworkFunctionApplication",
    polymorphicDiscriminator: {
      serializedName: "artifactType",
      clientName: "artifactType"
    },
    modelProperties: {
      ...NetworkFunctionApplication.type.modelProperties,
      artifactType: {
        serializedName: "artifactType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureArcKubernetesArtifactProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureArcKubernetesArtifactProfile",
    modelProperties: {
      ...ArtifactProfile.type.modelProperties,
      helmArtifactProfile: {
        serializedName: "helmArtifactProfile",
        type: {
          name: "Composite",
          className: "HelmArtifactProfile"
        }
      }
    }
  }
};

export const AzureCoreVhdImageArtifactProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureCoreVhdImageArtifactProfile",
    modelProperties: {
      ...ArtifactProfile.type.modelProperties,
      vhdArtifactProfile: {
        serializedName: "vhdArtifactProfile",
        type: {
          name: "Composite",
          className: "VhdImageArtifactProfile"
        }
      }
    }
  }
};

export const AzureCoreArmTemplateArtifactProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureCoreArmTemplateArtifactProfile",
    modelProperties: {
      ...ArtifactProfile.type.modelProperties,
      templateArtifactProfile: {
        serializedName: "templateArtifactProfile",
        type: {
          name: "Composite",
          className: "ArmTemplateArtifactProfile"
        }
      }
    }
  }
};

export const AzureOperatorNexusImageArtifactProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureOperatorNexusImageArtifactProfile",
    modelProperties: {
      ...ArtifactProfile.type.modelProperties,
      imageArtifactProfile: {
        serializedName: "imageArtifactProfile",
        type: {
          name: "Composite",
          className: "ImageArtifactProfile"
        }
      }
    }
  }
};

export const AzureOperatorNexusArmTemplateArtifactProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureOperatorNexusArmTemplateArtifactProfile",
    modelProperties: {
      ...ArtifactProfile.type.modelProperties,
      templateArtifactProfile: {
        serializedName: "templateArtifactProfile",
        type: {
          name: "Composite",
          className: "ArmTemplateArtifactProfile"
        }
      }
    }
  }
};

export const AzureArcKubernetesDeployMappingRuleProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureArcKubernetesDeployMappingRuleProfile",
    modelProperties: {
      ...MappingRuleProfile.type.modelProperties,
      helmMappingRuleProfile: {
        serializedName: "helmMappingRuleProfile",
        type: {
          name: "Composite",
          className: "HelmMappingRuleProfile"
        }
      }
    }
  }
};

export const AzureCoreVhdImageDeployMappingRuleProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureCoreVhdImageDeployMappingRuleProfile",
    modelProperties: {
      ...MappingRuleProfile.type.modelProperties,
      vhdImageMappingRuleProfile: {
        serializedName: "vhdImageMappingRuleProfile",
        type: {
          name: "Composite",
          className: "VhdImageMappingRuleProfile"
        }
      }
    }
  }
};

export const AzureCoreArmTemplateDeployMappingRuleProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureCoreArmTemplateDeployMappingRuleProfile",
    modelProperties: {
      ...MappingRuleProfile.type.modelProperties,
      templateMappingRuleProfile: {
        serializedName: "templateMappingRuleProfile",
        type: {
          name: "Composite",
          className: "ArmTemplateMappingRuleProfile"
        }
      }
    }
  }
};

export const AzureOperatorNexusImageDeployMappingRuleProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureOperatorNexusImageDeployMappingRuleProfile",
    modelProperties: {
      ...MappingRuleProfile.type.modelProperties,
      imageMappingRuleProfile: {
        serializedName: "imageMappingRuleProfile",
        type: {
          name: "Composite",
          className: "ImageMappingRuleProfile"
        }
      }
    }
  }
};

export const AzureOperatorNexusArmTemplateDeployMappingRuleProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureOperatorNexusArmTemplateDeployMappingRuleProfile",
    modelProperties: {
      ...MappingRuleProfile.type.modelProperties,
      templateMappingRuleProfile: {
        serializedName: "templateMappingRuleProfile",
        type: {
          name: "Composite",
          className: "ArmTemplateMappingRuleProfile"
        }
      }
    }
  }
};

export const AzureArcKubernetesNetworkFunctionTemplate: coreClient.CompositeMapper = {
  serializedName: "AzureArcKubernetes",
  type: {
    name: "Composite",
    className: "AzureArcKubernetesNetworkFunctionTemplate",
    uberParent: "ContainerizedNetworkFunctionTemplate",
    polymorphicDiscriminator:
      ContainerizedNetworkFunctionTemplate.type.polymorphicDiscriminator,
    modelProperties: {
      ...ContainerizedNetworkFunctionTemplate.type.modelProperties,
      networkFunctionApplications: {
        serializedName: "networkFunctionApplications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureArcKubernetesNetworkFunctionApplication"
            }
          }
        }
      }
    }
  }
};

export const AzureCoreNetworkFunctionTemplate: coreClient.CompositeMapper = {
  serializedName: "AzureCore",
  type: {
    name: "Composite",
    className: "AzureCoreNetworkFunctionTemplate",
    uberParent: "VirtualNetworkFunctionTemplate",
    polymorphicDiscriminator:
      VirtualNetworkFunctionTemplate.type.polymorphicDiscriminator,
    modelProperties: {
      ...VirtualNetworkFunctionTemplate.type.modelProperties,
      networkFunctionApplications: {
        serializedName: "networkFunctionApplications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureCoreNetworkFunctionApplication"
            }
          }
        }
      }
    }
  }
};

export const AzureOperatorNexusNetworkFunctionTemplate: coreClient.CompositeMapper = {
  serializedName: "AzureOperatorNexus",
  type: {
    name: "Composite",
    className: "AzureOperatorNexusNetworkFunctionTemplate",
    uberParent: "VirtualNetworkFunctionTemplate",
    polymorphicDiscriminator:
      VirtualNetworkFunctionTemplate.type.polymorphicDiscriminator,
    modelProperties: {
      ...VirtualNetworkFunctionTemplate.type.modelProperties,
      networkFunctionApplications: {
        serializedName: "networkFunctionApplications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureOperatorNexusNetworkFunctionApplication"
            }
          }
        }
      }
    }
  }
};

export const ConfigurationGroupSchema: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigurationGroupSchema",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ConfigurationGroupSchemaPropertiesFormat"
        }
      }
    }
  }
};

export const ConfigurationGroupValue: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigurationGroupValue",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ConfigurationGroupValuePropertiesFormat"
        }
      }
    }
  }
};

export const NetworkFunction: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFunction",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "NetworkFunctionPropertiesFormat"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      }
    }
  }
};

export const NetworkFunctionDefinitionGroup: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFunctionDefinitionGroup",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "NetworkFunctionDefinitionGroupPropertiesFormat"
        }
      }
    }
  }
};

export const NetworkFunctionDefinitionVersion: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFunctionDefinitionVersion",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "NetworkFunctionDefinitionVersionPropertiesFormat"
        }
      }
    }
  }
};

export const NetworkServiceDesignGroup: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkServiceDesignGroup",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "NetworkServiceDesignGroupPropertiesFormat"
        }
      }
    }
  }
};

export const NetworkServiceDesignVersion: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkServiceDesignVersion",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "NetworkServiceDesignVersionPropertiesFormat"
        }
      }
    }
  }
};

export const Publisher: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Publisher",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PublisherPropertiesFormat"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      }
    }
  }
};

export const ArtifactStore: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArtifactStore",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ArtifactStorePropertiesFormat"
        }
      }
    }
  }
};

export const ArtifactManifest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArtifactManifest",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ArtifactManifestPropertiesFormat"
        }
      }
    }
  }
};

export const Site: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Site",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SitePropertiesFormat"
        }
      }
    }
  }
};

export const SiteNetworkService: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SiteNetworkService",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SiteNetworkServicePropertiesFormat"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      }
    }
  }
};

export const Component: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Component",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ComponentProperties"
        }
      }
    }
  }
};

export const ProxyArtifactListOverview: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyArtifactListOverview",
    modelProperties: {
      ...ProxyResource.type.modelProperties
    }
  }
};

export const ProxyArtifactVersionsListOverview: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyArtifactVersionsListOverview",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ProxyArtifactOverviewPropertiesValue"
        }
      }
    }
  }
};

export const ProxyArtifactOverview: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyArtifactOverview",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ProxyArtifactOverviewPropertiesFormat"
        }
      }
    }
  }
};

export const AzureArcKubernetesHelmApplication: coreClient.CompositeMapper = {
  serializedName: "HelmPackage",
  type: {
    name: "Composite",
    className: "AzureArcKubernetesHelmApplication",
    uberParent: "AzureArcKubernetesNetworkFunctionApplication",
    polymorphicDiscriminator:
      AzureArcKubernetesNetworkFunctionApplication.type
        .polymorphicDiscriminator,
    modelProperties: {
      ...AzureArcKubernetesNetworkFunctionApplication.type.modelProperties,
      artifactProfile: {
        serializedName: "artifactProfile",
        type: {
          name: "Composite",
          className: "AzureArcKubernetesArtifactProfile"
        }
      },
      deployParametersMappingRuleProfile: {
        serializedName: "deployParametersMappingRuleProfile",
        type: {
          name: "Composite",
          className: "AzureArcKubernetesDeployMappingRuleProfile"
        }
      }
    }
  }
};

export const AzureCoreNetworkFunctionVhdApplication: coreClient.CompositeMapper = {
  serializedName: "VhdImageFile",
  type: {
    name: "Composite",
    className: "AzureCoreNetworkFunctionVhdApplication",
    uberParent: "AzureCoreNetworkFunctionApplication",
    polymorphicDiscriminator:
      AzureCoreNetworkFunctionApplication.type.polymorphicDiscriminator,
    modelProperties: {
      ...AzureCoreNetworkFunctionApplication.type.modelProperties,
      artifactProfile: {
        serializedName: "artifactProfile",
        type: {
          name: "Composite",
          className: "AzureCoreVhdImageArtifactProfile"
        }
      },
      deployParametersMappingRuleProfile: {
        serializedName: "deployParametersMappingRuleProfile",
        type: {
          name: "Composite",
          className: "AzureCoreVhdImageDeployMappingRuleProfile"
        }
      }
    }
  }
};

export const AzureCoreNetworkFunctionArmTemplateApplication: coreClient.CompositeMapper = {
  serializedName: "ArmTemplate",
  type: {
    name: "Composite",
    className: "AzureCoreNetworkFunctionArmTemplateApplication",
    uberParent: "AzureCoreNetworkFunctionApplication",
    polymorphicDiscriminator:
      AzureCoreNetworkFunctionApplication.type.polymorphicDiscriminator,
    modelProperties: {
      ...AzureCoreNetworkFunctionApplication.type.modelProperties,
      artifactProfile: {
        serializedName: "artifactProfile",
        type: {
          name: "Composite",
          className: "AzureCoreArmTemplateArtifactProfile"
        }
      },
      deployParametersMappingRuleProfile: {
        serializedName: "deployParametersMappingRuleProfile",
        type: {
          name: "Composite",
          className: "AzureCoreArmTemplateDeployMappingRuleProfile"
        }
      }
    }
  }
};

export const AzureOperatorNexusNetworkFunctionImageApplication: coreClient.CompositeMapper = {
  serializedName: "ImageFile",
  type: {
    name: "Composite",
    className: "AzureOperatorNexusNetworkFunctionImageApplication",
    uberParent: "AzureOperatorNexusNetworkFunctionApplication",
    polymorphicDiscriminator:
      AzureOperatorNexusNetworkFunctionApplication.type
        .polymorphicDiscriminator,
    modelProperties: {
      ...AzureOperatorNexusNetworkFunctionApplication.type.modelProperties,
      artifactProfile: {
        serializedName: "artifactProfile",
        type: {
          name: "Composite",
          className: "AzureOperatorNexusImageArtifactProfile"
        }
      },
      deployParametersMappingRuleProfile: {
        serializedName: "deployParametersMappingRuleProfile",
        type: {
          name: "Composite",
          className: "AzureOperatorNexusImageDeployMappingRuleProfile"
        }
      }
    }
  }
};

export const AzureOperatorNexusNetworkFunctionArmTemplateApplication: coreClient.CompositeMapper = {
  serializedName: "ArmTemplate",
  type: {
    name: "Composite",
    className: "AzureOperatorNexusNetworkFunctionArmTemplateApplication",
    uberParent: "AzureOperatorNexusNetworkFunctionApplication",
    polymorphicDiscriminator:
      AzureOperatorNexusNetworkFunctionApplication.type
        .polymorphicDiscriminator,
    modelProperties: {
      ...AzureOperatorNexusNetworkFunctionApplication.type.modelProperties,
      artifactProfile: {
        serializedName: "artifactProfile",
        type: {
          name: "Composite",
          className: "AzureOperatorNexusArmTemplateArtifactProfile"
        }
      },
      deployParametersMappingRuleProfile: {
        serializedName: "deployParametersMappingRuleProfile",
        type: {
          name: "Composite",
          className: "AzureOperatorNexusArmTemplateDeployMappingRuleProfile"
        }
      }
    }
  }
};

export const ConfigurationGroupSchemasDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigurationGroupSchemasDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConfigurationGroupSchemasUpdateStateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigurationGroupSchemasUpdateStateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConfigurationGroupValuesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigurationGroupValuesDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFunctionsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFunctionsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFunctionsExecuteRequestHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFunctionsExecuteRequestHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFunctionDefinitionGroupsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFunctionDefinitionGroupsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFunctionDefinitionVersionsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFunctionDefinitionVersionsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFunctionDefinitionVersionsUpdateStateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFunctionDefinitionVersionsUpdateStateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkServiceDesignGroupsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkServiceDesignGroupsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkServiceDesignVersionsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkServiceDesignVersionsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkServiceDesignVersionsUpdateStateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkServiceDesignVersionsUpdateStateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PublishersDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PublishersDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ArtifactStoresDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArtifactStoresDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ArtifactManifestsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArtifactManifestsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ArtifactManifestsUpdateStateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArtifactManifestsUpdateStateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyArtifactUpdateStateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyArtifactUpdateStateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SitesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SitesDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteNetworkServicesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SiteNetworkServicesDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  ConfigurationGroupValuePropertiesFormat: ConfigurationGroupValuePropertiesFormat,
  DeploymentResourceIdReference: DeploymentResourceIdReference,
  NetworkFunctionPropertiesFormat: NetworkFunctionPropertiesFormat,
  NetworkFunctionDefinitionVersionPropertiesFormat: NetworkFunctionDefinitionVersionPropertiesFormat,
  ResourceElementTemplate: ResourceElementTemplate,
  ArtifactAccessCredential: ArtifactAccessCredential,
  NFVIs: NFVIs,
  ContainerizedNetworkFunctionTemplate: ContainerizedNetworkFunctionTemplate,
  VirtualNetworkFunctionTemplate: VirtualNetworkFunctionTemplate,
  "ConfigurationGroupValuePropertiesFormat.Secret": ConfigurationValueWithSecrets,
  "ConfigurationGroupValuePropertiesFormat.Open": ConfigurationValueWithoutSecrets,
  "DeploymentResourceIdReference.Secret": SecretDeploymentResourceReference,
  "DeploymentResourceIdReference.Open": OpenDeploymentResourceReference,
  "NetworkFunctionPropertiesFormat.Secret": NetworkFunctionValueWithSecrets,
  "NetworkFunctionPropertiesFormat.Open": NetworkFunctionValueWithoutSecrets,
  "NetworkFunctionDefinitionVersionPropertiesFormat.ContainerizedNetworkFunction": ContainerizedNetworkFunctionDefinitionVersion,
  "NetworkFunctionDefinitionVersionPropertiesFormat.VirtualNetworkFunction": VirtualNetworkFunctionDefinitionVersion,
  "ResourceElementTemplate.ArmResourceDefinition": ArmResourceDefinitionResourceElementTemplateDetails,
  "ResourceElementTemplate.NetworkFunctionDefinition": NetworkFunctionDefinitionResourceElementTemplateDetails,
  "ArtifactAccessCredential.AzureContainerRegistryScopedToken": AzureContainerRegistryScopedTokenCredential,
  "ArtifactAccessCredential.AzureStorageAccountToken": AzureStorageAccountCredential,
  "NFVIs.AzureCore": AzureCoreNfviDetails,
  "NFVIs.AzureArcKubernetes": AzureArcK8SClusterNfviDetails,
  "NFVIs.AzureOperatorNexus": AzureOperatorNexusClusterNfviDetails,
  "NetworkFunctionApplication.AzureArcKubernetesNetworkFunctionApplication": AzureArcKubernetesNetworkFunctionApplication,
  "NetworkFunctionApplication.AzureCoreNetworkFunctionApplication": AzureCoreNetworkFunctionApplication,
  "NetworkFunctionApplication.AzureOperatorNexusNetworkFunctionApplication": AzureOperatorNexusNetworkFunctionApplication,
  "ContainerizedNetworkFunctionTemplate.AzureArcKubernetes": AzureArcKubernetesNetworkFunctionTemplate,
  "VirtualNetworkFunctionTemplate.AzureCore": AzureCoreNetworkFunctionTemplate,
  "VirtualNetworkFunctionTemplate.AzureOperatorNexus": AzureOperatorNexusNetworkFunctionTemplate,
  "AzureArcKubernetesNetworkFunctionApplication.HelmPackage": AzureArcKubernetesHelmApplication,
  "AzureCoreNetworkFunctionApplication.VhdImageFile": AzureCoreNetworkFunctionVhdApplication,
  "AzureCoreNetworkFunctionApplication.ArmTemplate": AzureCoreNetworkFunctionArmTemplateApplication,
  "AzureOperatorNexusNetworkFunctionApplication.ImageFile": AzureOperatorNexusNetworkFunctionImageApplication,
  "AzureOperatorNexusNetworkFunctionApplication.ArmTemplate": AzureOperatorNexusNetworkFunctionArmTemplateApplication
};
