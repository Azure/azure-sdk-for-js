/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  ConfigurationGroupSchema as ConfigurationGroupSchemaMapper,
  TagsObject as TagsObjectMapper,
  ConfigurationGroupSchemaVersionUpdateState as ConfigurationGroupSchemaVersionUpdateStateMapper,
  ConfigurationGroupValue as ConfigurationGroupValueMapper,
  NetworkFunction as NetworkFunctionMapper,
  ExecuteRequestParameters as ExecuteRequestParametersMapper,
  NetworkFunctionDefinitionGroup as NetworkFunctionDefinitionGroupMapper,
  NetworkFunctionDefinitionVersion as NetworkFunctionDefinitionVersionMapper,
  NetworkFunctionDefinitionVersionUpdateState as NetworkFunctionDefinitionVersionUpdateStateMapper,
  NetworkServiceDesignGroup as NetworkServiceDesignGroupMapper,
  NetworkServiceDesignVersion as NetworkServiceDesignVersionMapper,
  NetworkServiceDesignVersionUpdateState as NetworkServiceDesignVersionUpdateStateMapper,
  Publisher as PublisherMapper,
  ArtifactStore as ArtifactStoreMapper,
  ArtifactManifest as ArtifactManifestMapper,
  ArtifactManifestUpdateState as ArtifactManifestUpdateStateMapper,
  ArtifactChangeState as ArtifactChangeStateMapper,
  Site as SiteMapper,
  SiteNetworkService as SiteNetworkServiceMapper
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const publisherName: OperationURLParameter = {
  parameterPath: "publisherName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_-]*$"),
      MaxLength: 64
    },
    serializedName: "publisherName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2023-09-01",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    constraints: {
      MinLength: 1
    },
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const configurationGroupSchemaName: OperationURLParameter = {
  parameterPath: "configurationGroupSchemaName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_-]*$"),
      MaxLength: 64
    },
    serializedName: "configurationGroupSchemaName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const parameters: OperationParameter = {
  parameterPath: "parameters",
  mapper: ConfigurationGroupSchemaMapper
};

export const parameters1: OperationParameter = {
  parameterPath: "parameters",
  mapper: TagsObjectMapper
};

export const parameters2: OperationParameter = {
  parameterPath: "parameters",
  mapper: ConfigurationGroupSchemaVersionUpdateStateMapper
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const configurationGroupValueName: OperationURLParameter = {
  parameterPath: "configurationGroupValueName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_-]*$"),
      MaxLength: 64
    },
    serializedName: "configurationGroupValueName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters3: OperationParameter = {
  parameterPath: "parameters",
  mapper: ConfigurationGroupValueMapper
};

export const networkFunctionName: OperationURLParameter = {
  parameterPath: "networkFunctionName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[^\\s]*[^\\s]+[^\\s]*$"),
      MaxLength: 64
    },
    serializedName: "networkFunctionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const networkFunctionName1: OperationURLParameter = {
  parameterPath: "networkFunctionName",
  mapper: {
    serializedName: "networkFunctionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters4: OperationParameter = {
  parameterPath: "parameters",
  mapper: NetworkFunctionMapper
};

export const parameters5: OperationParameter = {
  parameterPath: "parameters",
  mapper: ExecuteRequestParametersMapper
};

export const componentName: OperationURLParameter = {
  parameterPath: "componentName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[^\\s]*[^\\s]+[^\\s]*$"),
      MaxLength: 64
    },
    serializedName: "componentName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const networkFunctionDefinitionGroupName: OperationURLParameter = {
  parameterPath: "networkFunctionDefinitionGroupName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_-]*$"),
      MaxLength: 64
    },
    serializedName: "networkFunctionDefinitionGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters6: OperationParameter = {
  parameterPath: "parameters",
  mapper: NetworkFunctionDefinitionGroupMapper
};

export const networkFunctionDefinitionVersionName: OperationURLParameter = {
  parameterPath: "networkFunctionDefinitionVersionName",
  mapper: {
    constraints: {
      Pattern: new RegExp(
        "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
      ),
      MaxLength: 64
    },
    serializedName: "networkFunctionDefinitionVersionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters7: OperationParameter = {
  parameterPath: "parameters",
  mapper: NetworkFunctionDefinitionVersionMapper
};

export const parameters8: OperationParameter = {
  parameterPath: "parameters",
  mapper: NetworkFunctionDefinitionVersionUpdateStateMapper
};

export const networkServiceDesignGroupName: OperationURLParameter = {
  parameterPath: "networkServiceDesignGroupName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_-]*$"),
      MaxLength: 64
    },
    serializedName: "networkServiceDesignGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters9: OperationParameter = {
  parameterPath: "parameters",
  mapper: NetworkServiceDesignGroupMapper
};

export const networkServiceDesignVersionName: OperationURLParameter = {
  parameterPath: "networkServiceDesignVersionName",
  mapper: {
    constraints: {
      Pattern: new RegExp(
        "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
      ),
      MaxLength: 64
    },
    serializedName: "networkServiceDesignVersionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters10: OperationParameter = {
  parameterPath: "parameters",
  mapper: NetworkServiceDesignVersionMapper
};

export const parameters11: OperationParameter = {
  parameterPath: "parameters",
  mapper: NetworkServiceDesignVersionUpdateStateMapper
};

export const parameters12: OperationParameter = {
  parameterPath: ["options", "parameters"],
  mapper: PublisherMapper
};

export const parameters13: OperationParameter = {
  parameterPath: ["options", "parameters"],
  mapper: TagsObjectMapper
};

export const artifactStoreName: OperationURLParameter = {
  parameterPath: "artifactStoreName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_-]*$"),
      MaxLength: 64
    },
    serializedName: "artifactStoreName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters14: OperationParameter = {
  parameterPath: "parameters",
  mapper: ArtifactStoreMapper
};

export const artifactManifestName: OperationURLParameter = {
  parameterPath: "artifactManifestName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[^\\s]*[^\\s]+[^\\s]*$"),
      MaxLength: 64
    },
    serializedName: "artifactManifestName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters15: OperationParameter = {
  parameterPath: "parameters",
  mapper: ArtifactManifestMapper
};

export const parameters16: OperationParameter = {
  parameterPath: "parameters",
  mapper: ArtifactManifestUpdateStateMapper
};

export const artifactName: OperationQueryParameter = {
  parameterPath: "artifactName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[^\\s]*[^\\s]+[^\\s]*$"),
      MaxLength: 64
    },
    serializedName: "artifactName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters17: OperationParameter = {
  parameterPath: "parameters",
  mapper: ArtifactChangeStateMapper
};

export const artifactVersionName: OperationURLParameter = {
  parameterPath: "artifactVersionName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[^\\s]*[^\\s]+[^\\s]*$"),
      MaxLength: 64
    },
    serializedName: "artifactVersionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const siteName: OperationURLParameter = {
  parameterPath: "siteName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_-]*$"),
      MaxLength: 64
    },
    serializedName: "siteName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters18: OperationParameter = {
  parameterPath: "parameters",
  mapper: SiteMapper
};

export const siteNetworkServiceName: OperationURLParameter = {
  parameterPath: "siteNetworkServiceName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_-]*$"),
      MaxLength: 64
    },
    serializedName: "siteNetworkServiceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters19: OperationParameter = {
  parameterPath: "parameters",
  mapper: SiteNetworkServiceMapper
};
