/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { NetworkFunctionDefinitionGroups } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { HybridNetworkManagementClient } from "../hybridNetworkManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  NetworkFunctionDefinitionGroup,
  NetworkFunctionDefinitionGroupsListByPublisherNextOptionalParams,
  NetworkFunctionDefinitionGroupsListByPublisherOptionalParams,
  NetworkFunctionDefinitionGroupsListByPublisherResponse,
  NetworkFunctionDefinitionGroupsDeleteOptionalParams,
  NetworkFunctionDefinitionGroupsDeleteResponse,
  NetworkFunctionDefinitionGroupsCreateOrUpdateOptionalParams,
  NetworkFunctionDefinitionGroupsCreateOrUpdateResponse,
  NetworkFunctionDefinitionGroupsGetOptionalParams,
  NetworkFunctionDefinitionGroupsGetResponse,
  TagsObject,
  NetworkFunctionDefinitionGroupsUpdateOptionalParams,
  NetworkFunctionDefinitionGroupsUpdateResponse,
  NetworkFunctionDefinitionGroupsListByPublisherNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing NetworkFunctionDefinitionGroups operations. */
export class NetworkFunctionDefinitionGroupsImpl
  implements NetworkFunctionDefinitionGroups {
  private readonly client: HybridNetworkManagementClient;

  /**
   * Initialize a new instance of the class NetworkFunctionDefinitionGroups class.
   * @param client Reference to the service client
   */
  constructor(client: HybridNetworkManagementClient) {
    this.client = client;
  }

  /**
   * Gets information of the network function definition groups under a publisher.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param publisherName The name of the publisher.
   * @param options The options parameters.
   */
  public listByPublisher(
    resourceGroupName: string,
    publisherName: string,
    options?: NetworkFunctionDefinitionGroupsListByPublisherOptionalParams
  ): PagedAsyncIterableIterator<NetworkFunctionDefinitionGroup> {
    const iter = this.listByPublisherPagingAll(
      resourceGroupName,
      publisherName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByPublisherPagingPage(
          resourceGroupName,
          publisherName,
          options,
          settings
        );
      }
    };
  }

  private async *listByPublisherPagingPage(
    resourceGroupName: string,
    publisherName: string,
    options?: NetworkFunctionDefinitionGroupsListByPublisherOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<NetworkFunctionDefinitionGroup[]> {
    let result: NetworkFunctionDefinitionGroupsListByPublisherResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByPublisher(
        resourceGroupName,
        publisherName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByPublisherNext(
        resourceGroupName,
        publisherName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByPublisherPagingAll(
    resourceGroupName: string,
    publisherName: string,
    options?: NetworkFunctionDefinitionGroupsListByPublisherOptionalParams
  ): AsyncIterableIterator<NetworkFunctionDefinitionGroup> {
    for await (const page of this.listByPublisherPagingPage(
      resourceGroupName,
      publisherName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets information of the network function definition groups under a publisher.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param publisherName The name of the publisher.
   * @param options The options parameters.
   */
  private _listByPublisher(
    resourceGroupName: string,
    publisherName: string,
    options?: NetworkFunctionDefinitionGroupsListByPublisherOptionalParams
  ): Promise<NetworkFunctionDefinitionGroupsListByPublisherResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, publisherName, options },
      listByPublisherOperationSpec
    );
  }

  /**
   * Deletes a specified network function definition group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param publisherName The name of the publisher.
   * @param networkFunctionDefinitionGroupName The name of the network function definition group.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    publisherName: string,
    networkFunctionDefinitionGroupName: string,
    options?: NetworkFunctionDefinitionGroupsDeleteOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<NetworkFunctionDefinitionGroupsDeleteResponse>,
      NetworkFunctionDefinitionGroupsDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<NetworkFunctionDefinitionGroupsDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        publisherName,
        networkFunctionDefinitionGroupName,
        options
      },
      spec: deleteOperationSpec
    });
    const poller = await createHttpPoller<
      NetworkFunctionDefinitionGroupsDeleteResponse,
      OperationState<NetworkFunctionDefinitionGroupsDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes a specified network function definition group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param publisherName The name of the publisher.
   * @param networkFunctionDefinitionGroupName The name of the network function definition group.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    publisherName: string,
    networkFunctionDefinitionGroupName: string,
    options?: NetworkFunctionDefinitionGroupsDeleteOptionalParams
  ): Promise<NetworkFunctionDefinitionGroupsDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      publisherName,
      networkFunctionDefinitionGroupName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Creates or updates a network function definition group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param publisherName The name of the publisher.
   * @param networkFunctionDefinitionGroupName The name of the network function definition group.
   * @param parameters Parameters supplied to the create or update publisher network function definition
   *                   group operation.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    publisherName: string,
    networkFunctionDefinitionGroupName: string,
    parameters: NetworkFunctionDefinitionGroup,
    options?: NetworkFunctionDefinitionGroupsCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<NetworkFunctionDefinitionGroupsCreateOrUpdateResponse>,
      NetworkFunctionDefinitionGroupsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<NetworkFunctionDefinitionGroupsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        publisherName,
        networkFunctionDefinitionGroupName,
        parameters,
        options
      },
      spec: createOrUpdateOperationSpec
    });
    const poller = await createHttpPoller<
      NetworkFunctionDefinitionGroupsCreateOrUpdateResponse,
      OperationState<NetworkFunctionDefinitionGroupsCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates or updates a network function definition group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param publisherName The name of the publisher.
   * @param networkFunctionDefinitionGroupName The name of the network function definition group.
   * @param parameters Parameters supplied to the create or update publisher network function definition
   *                   group operation.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    publisherName: string,
    networkFunctionDefinitionGroupName: string,
    parameters: NetworkFunctionDefinitionGroup,
    options?: NetworkFunctionDefinitionGroupsCreateOrUpdateOptionalParams
  ): Promise<NetworkFunctionDefinitionGroupsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      publisherName,
      networkFunctionDefinitionGroupName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets information about the specified networkFunctionDefinition group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param publisherName The name of the publisher.
   * @param networkFunctionDefinitionGroupName The name of the network function definition group.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    publisherName: string,
    networkFunctionDefinitionGroupName: string,
    options?: NetworkFunctionDefinitionGroupsGetOptionalParams
  ): Promise<NetworkFunctionDefinitionGroupsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        publisherName,
        networkFunctionDefinitionGroupName,
        options
      },
      getOperationSpec
    );
  }

  /**
   * Updates a network function definition group resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param publisherName The name of the publisher.
   * @param networkFunctionDefinitionGroupName The name of the network function definition group.
   * @param parameters Parameters supplied to the create or update publisher network function definition
   *                   group operation.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    publisherName: string,
    networkFunctionDefinitionGroupName: string,
    parameters: TagsObject,
    options?: NetworkFunctionDefinitionGroupsUpdateOptionalParams
  ): Promise<NetworkFunctionDefinitionGroupsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        publisherName,
        networkFunctionDefinitionGroupName,
        parameters,
        options
      },
      updateOperationSpec
    );
  }

  /**
   * ListByPublisherNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param publisherName The name of the publisher.
   * @param nextLink The nextLink from the previous successful call to the ListByPublisher method.
   * @param options The options parameters.
   */
  private _listByPublisherNext(
    resourceGroupName: string,
    publisherName: string,
    nextLink: string,
    options?: NetworkFunctionDefinitionGroupsListByPublisherNextOptionalParams
  ): Promise<NetworkFunctionDefinitionGroupsListByPublisherNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, publisherName, nextLink, options },
      listByPublisherNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByPublisherOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/publishers/{publisherName}/networkFunctionDefinitionGroups",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkFunctionDefinitionGroupListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.publisherName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/publishers/{publisherName}/networkFunctionDefinitionGroups/{networkFunctionDefinitionGroupName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.NetworkFunctionDefinitionGroupsDeleteHeaders
    },
    201: {
      headersMapper: Mappers.NetworkFunctionDefinitionGroupsDeleteHeaders
    },
    202: {
      headersMapper: Mappers.NetworkFunctionDefinitionGroupsDeleteHeaders
    },
    204: {
      headersMapper: Mappers.NetworkFunctionDefinitionGroupsDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.publisherName,
    Parameters.subscriptionId,
    Parameters.networkFunctionDefinitionGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/publishers/{publisherName}/networkFunctionDefinitionGroups/{networkFunctionDefinitionGroupName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkFunctionDefinitionGroup
    },
    201: {
      bodyMapper: Mappers.NetworkFunctionDefinitionGroup
    },
    202: {
      bodyMapper: Mappers.NetworkFunctionDefinitionGroup
    },
    204: {
      bodyMapper: Mappers.NetworkFunctionDefinitionGroup
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters6,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.publisherName,
    Parameters.subscriptionId,
    Parameters.networkFunctionDefinitionGroupName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/publishers/{publisherName}/networkFunctionDefinitionGroups/{networkFunctionDefinitionGroupName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkFunctionDefinitionGroup
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.publisherName,
    Parameters.subscriptionId,
    Parameters.networkFunctionDefinitionGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/publishers/{publisherName}/networkFunctionDefinitionGroups/{networkFunctionDefinitionGroupName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkFunctionDefinitionGroup
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.publisherName,
    Parameters.subscriptionId,
    Parameters.networkFunctionDefinitionGroupName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listByPublisherNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkFunctionDefinitionGroupListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.publisherName,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
