/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Components } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { HybridNetworkManagementClient } from "../hybridNetworkManagementClient";
import {
  Component,
  ComponentsListByNetworkFunctionNextOptionalParams,
  ComponentsListByNetworkFunctionOptionalParams,
  ComponentsListByNetworkFunctionResponse,
  ComponentsGetOptionalParams,
  ComponentsGetResponse,
  ComponentsListByNetworkFunctionNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Components operations. */
export class ComponentsImpl implements Components {
  private readonly client: HybridNetworkManagementClient;

  /**
   * Initialize a new instance of the class Components class.
   * @param client Reference to the service client
   */
  constructor(client: HybridNetworkManagementClient) {
    this.client = client;
  }

  /**
   * Lists all the component resources in a network function.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkFunctionName The name of the network function.
   * @param options The options parameters.
   */
  public listByNetworkFunction(
    resourceGroupName: string,
    networkFunctionName: string,
    options?: ComponentsListByNetworkFunctionOptionalParams
  ): PagedAsyncIterableIterator<Component> {
    const iter = this.listByNetworkFunctionPagingAll(
      resourceGroupName,
      networkFunctionName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByNetworkFunctionPagingPage(
          resourceGroupName,
          networkFunctionName,
          options,
          settings
        );
      }
    };
  }

  private async *listByNetworkFunctionPagingPage(
    resourceGroupName: string,
    networkFunctionName: string,
    options?: ComponentsListByNetworkFunctionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Component[]> {
    let result: ComponentsListByNetworkFunctionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByNetworkFunction(
        resourceGroupName,
        networkFunctionName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByNetworkFunctionNext(
        resourceGroupName,
        networkFunctionName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByNetworkFunctionPagingAll(
    resourceGroupName: string,
    networkFunctionName: string,
    options?: ComponentsListByNetworkFunctionOptionalParams
  ): AsyncIterableIterator<Component> {
    for await (const page of this.listByNetworkFunctionPagingPage(
      resourceGroupName,
      networkFunctionName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets information about the specified application instance resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkFunctionName The name of the network function.
   * @param componentName The name of the component.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    networkFunctionName: string,
    componentName: string,
    options?: ComponentsGetOptionalParams
  ): Promise<ComponentsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, networkFunctionName, componentName, options },
      getOperationSpec
    );
  }

  /**
   * Lists all the component resources in a network function.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkFunctionName The name of the network function.
   * @param options The options parameters.
   */
  private _listByNetworkFunction(
    resourceGroupName: string,
    networkFunctionName: string,
    options?: ComponentsListByNetworkFunctionOptionalParams
  ): Promise<ComponentsListByNetworkFunctionResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, networkFunctionName, options },
      listByNetworkFunctionOperationSpec
    );
  }

  /**
   * ListByNetworkFunctionNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkFunctionName The name of the network function.
   * @param nextLink The nextLink from the previous successful call to the ListByNetworkFunction method.
   * @param options The options parameters.
   */
  private _listByNetworkFunctionNext(
    resourceGroupName: string,
    networkFunctionName: string,
    nextLink: string,
    options?: ComponentsListByNetworkFunctionNextOptionalParams
  ): Promise<ComponentsListByNetworkFunctionNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, networkFunctionName, nextLink, options },
      listByNetworkFunctionNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/networkFunctions/{networkFunctionName}/components/{componentName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Component
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.networkFunctionName,
    Parameters.componentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByNetworkFunctionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/networkFunctions/{networkFunctionName}/components",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ComponentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.networkFunctionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByNetworkFunctionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ComponentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.networkFunctionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
