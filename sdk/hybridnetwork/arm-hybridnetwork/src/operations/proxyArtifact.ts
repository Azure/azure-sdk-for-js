/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ProxyArtifact } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { HybridNetworkManagementClient } from "../hybridNetworkManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  ProxyArtifactListOverview,
  ProxyArtifactListNextOptionalParams,
  ProxyArtifactListOptionalParams,
  ProxyArtifactListResponse,
  ProxyArtifactVersionsListOverview,
  ProxyArtifactListVersionsNextOptionalParams,
  ProxyArtifactListVersionsOptionalParams,
  ProxyArtifactListVersionsResponse,
  ArtifactChangeState,
  ProxyArtifactUpdateStateOptionalParams,
  ProxyArtifactUpdateStateResponse,
  ProxyArtifactListNextResponse,
  ProxyArtifactListVersionsNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ProxyArtifact operations. */
export class ProxyArtifactImpl implements ProxyArtifact {
  private readonly client: HybridNetworkManagementClient;

  /**
   * Initialize a new instance of the class ProxyArtifact class.
   * @param client Reference to the service client
   */
  constructor(client: HybridNetworkManagementClient) {
    this.client = client;
  }

  /**
   * Lists all the available artifacts in the parent Artifact Store.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param publisherName The name of the publisher.
   * @param artifactStoreName The name of the artifact store.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    publisherName: string,
    artifactStoreName: string,
    options?: ProxyArtifactListOptionalParams
  ): PagedAsyncIterableIterator<ProxyArtifactListOverview> {
    const iter = this.listPagingAll(
      resourceGroupName,
      publisherName,
      artifactStoreName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          publisherName,
          artifactStoreName,
          options,
          settings
        );
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    publisherName: string,
    artifactStoreName: string,
    options?: ProxyArtifactListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ProxyArtifactListOverview[]> {
    let result: ProxyArtifactListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(
        resourceGroupName,
        publisherName,
        artifactStoreName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        publisherName,
        artifactStoreName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    publisherName: string,
    artifactStoreName: string,
    options?: ProxyArtifactListOptionalParams
  ): AsyncIterableIterator<ProxyArtifactListOverview> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      publisherName,
      artifactStoreName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get a Artifact overview information.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param publisherName The name of the publisher.
   * @param artifactStoreName The name of the artifact store.
   * @param artifactName The name of the artifact.
   * @param options The options parameters.
   */
  public listVersions(
    resourceGroupName: string,
    publisherName: string,
    artifactStoreName: string,
    artifactName: string,
    options?: ProxyArtifactListVersionsOptionalParams
  ): PagedAsyncIterableIterator<ProxyArtifactVersionsListOverview> {
    const iter = this.listVersionsPagingAll(
      resourceGroupName,
      publisherName,
      artifactStoreName,
      artifactName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listVersionsPagingPage(
          resourceGroupName,
          publisherName,
          artifactStoreName,
          artifactName,
          options,
          settings
        );
      }
    };
  }

  private async *listVersionsPagingPage(
    resourceGroupName: string,
    publisherName: string,
    artifactStoreName: string,
    artifactName: string,
    options?: ProxyArtifactListVersionsOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ProxyArtifactVersionsListOverview[]> {
    let result: ProxyArtifactListVersionsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listVersions(
        resourceGroupName,
        publisherName,
        artifactStoreName,
        artifactName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listVersionsNext(
        resourceGroupName,
        publisherName,
        artifactStoreName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listVersionsPagingAll(
    resourceGroupName: string,
    publisherName: string,
    artifactStoreName: string,
    artifactName: string,
    options?: ProxyArtifactListVersionsOptionalParams
  ): AsyncIterableIterator<ProxyArtifactVersionsListOverview> {
    for await (const page of this.listVersionsPagingPage(
      resourceGroupName,
      publisherName,
      artifactStoreName,
      artifactName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists all the available artifacts in the parent Artifact Store.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param publisherName The name of the publisher.
   * @param artifactStoreName The name of the artifact store.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    publisherName: string,
    artifactStoreName: string,
    options?: ProxyArtifactListOptionalParams
  ): Promise<ProxyArtifactListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, publisherName, artifactStoreName, options },
      listOperationSpec
    );
  }

  /**
   * Get a Artifact overview information.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param publisherName The name of the publisher.
   * @param artifactStoreName The name of the artifact store.
   * @param artifactName The name of the artifact.
   * @param options The options parameters.
   */
  private _listVersions(
    resourceGroupName: string,
    publisherName: string,
    artifactStoreName: string,
    artifactName: string,
    options?: ProxyArtifactListVersionsOptionalParams
  ): Promise<ProxyArtifactListVersionsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        publisherName,
        artifactStoreName,
        artifactName,
        options
      },
      listVersionsOperationSpec
    );
  }

  /**
   * Change artifact state defined in artifact store.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param publisherName The name of the publisher.
   * @param artifactStoreName The name of the artifact store.
   * @param artifactName The name of the artifact.
   * @param artifactVersionName The name of the artifact version.
   * @param parameters Parameters supplied to update the state of artifact manifest.
   * @param options The options parameters.
   */
  async beginUpdateState(
    resourceGroupName: string,
    publisherName: string,
    artifactStoreName: string,
    artifactName: string,
    artifactVersionName: string,
    parameters: ArtifactChangeState,
    options?: ProxyArtifactUpdateStateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<ProxyArtifactUpdateStateResponse>,
      ProxyArtifactUpdateStateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ProxyArtifactUpdateStateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        publisherName,
        artifactStoreName,
        artifactName,
        artifactVersionName,
        parameters,
        options
      },
      spec: updateStateOperationSpec
    });
    const poller = await createHttpPoller<
      ProxyArtifactUpdateStateResponse,
      OperationState<ProxyArtifactUpdateStateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Change artifact state defined in artifact store.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param publisherName The name of the publisher.
   * @param artifactStoreName The name of the artifact store.
   * @param artifactName The name of the artifact.
   * @param artifactVersionName The name of the artifact version.
   * @param parameters Parameters supplied to update the state of artifact manifest.
   * @param options The options parameters.
   */
  async beginUpdateStateAndWait(
    resourceGroupName: string,
    publisherName: string,
    artifactStoreName: string,
    artifactName: string,
    artifactVersionName: string,
    parameters: ArtifactChangeState,
    options?: ProxyArtifactUpdateStateOptionalParams
  ): Promise<ProxyArtifactUpdateStateResponse> {
    const poller = await this.beginUpdateState(
      resourceGroupName,
      publisherName,
      artifactStoreName,
      artifactName,
      artifactVersionName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param publisherName The name of the publisher.
   * @param artifactStoreName The name of the artifact store.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    publisherName: string,
    artifactStoreName: string,
    nextLink: string,
    options?: ProxyArtifactListNextOptionalParams
  ): Promise<ProxyArtifactListNextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        publisherName,
        artifactStoreName,
        nextLink,
        options
      },
      listNextOperationSpec
    );
  }

  /**
   * ListVersionsNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param publisherName The name of the publisher.
   * @param artifactStoreName The name of the artifact store.
   * @param nextLink The nextLink from the previous successful call to the ListVersions method.
   * @param options The options parameters.
   */
  private _listVersionsNext(
    resourceGroupName: string,
    publisherName: string,
    artifactStoreName: string,
    nextLink: string,
    options?: ProxyArtifactListVersionsNextOptionalParams
  ): Promise<ProxyArtifactListVersionsNextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        publisherName,
        artifactStoreName,
        nextLink,
        options
      },
      listVersionsNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/publishers/{publisherName}/artifactStores/{artifactStoreName}/artifacts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProxyArtifactOverviewListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.publisherName,
    Parameters.subscriptionId,
    Parameters.artifactStoreName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listVersionsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/publishers/{publisherName}/artifactStores/{artifactStoreName}/artifactVersions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProxyArtifactVersionsOverviewListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.artifactName],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.publisherName,
    Parameters.subscriptionId,
    Parameters.artifactStoreName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateStateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridNetwork/publishers/{publisherName}/artifactStores/{artifactStoreName}/artifactVersions/{artifactVersionName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ProxyArtifactVersionsListOverview
    },
    201: {
      bodyMapper: Mappers.ProxyArtifactVersionsListOverview
    },
    202: {
      bodyMapper: Mappers.ProxyArtifactVersionsListOverview
    },
    204: {
      bodyMapper: Mappers.ProxyArtifactVersionsListOverview
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters17,
  queryParameters: [Parameters.apiVersion, Parameters.artifactName],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.publisherName,
    Parameters.subscriptionId,
    Parameters.artifactStoreName,
    Parameters.artifactVersionName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProxyArtifactOverviewListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.publisherName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.artifactStoreName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listVersionsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProxyArtifactVersionsOverviewListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.publisherName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.artifactStoreName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
