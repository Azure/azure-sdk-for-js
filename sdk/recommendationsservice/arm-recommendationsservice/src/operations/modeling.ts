/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Modeling } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { RecommendationsService } from "../recommendationsService";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  ModelingResource,
  ModelingListByAccountResourceNextOptionalParams,
  ModelingListByAccountResourceOptionalParams,
  ModelingListByAccountResourceResponse,
  ModelingGetOptionalParams,
  ModelingGetResponse,
  ModelingCreateOrUpdateOptionalParams,
  ModelingCreateOrUpdateResponse,
  ModelingPatchResource,
  ModelingUpdateOptionalParams,
  ModelingUpdateResponse,
  ModelingDeleteOptionalParams,
  ModelingListByAccountResourceNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Modeling operations. */
export class ModelingImpl implements Modeling {
  private readonly client: RecommendationsService;

  /**
   * Initialize a new instance of the class Modeling class.
   * @param client Reference to the service client
   */
  constructor(client: RecommendationsService) {
    this.client = client;
  }

  /**
   * Returns list of Modeling resources for a given Account name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the RecommendationsService Account resource.
   * @param options The options parameters.
   */
  public listByAccountResource(
    resourceGroupName: string,
    accountName: string,
    options?: ModelingListByAccountResourceOptionalParams
  ): PagedAsyncIterableIterator<ModelingResource> {
    const iter = this.listByAccountResourcePagingAll(
      resourceGroupName,
      accountName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByAccountResourcePagingPage(
          resourceGroupName,
          accountName,
          options
        );
      }
    };
  }

  private async *listByAccountResourcePagingPage(
    resourceGroupName: string,
    accountName: string,
    options?: ModelingListByAccountResourceOptionalParams
  ): AsyncIterableIterator<ModelingResource[]> {
    let result = await this._listByAccountResource(
      resourceGroupName,
      accountName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByAccountResourceNext(
        resourceGroupName,
        accountName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByAccountResourcePagingAll(
    resourceGroupName: string,
    accountName: string,
    options?: ModelingListByAccountResourceOptionalParams
  ): AsyncIterableIterator<ModelingResource> {
    for await (const page of this.listByAccountResourcePagingPage(
      resourceGroupName,
      accountName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Returns list of Modeling resources for a given Account name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the RecommendationsService Account resource.
   * @param options The options parameters.
   */
  private _listByAccountResource(
    resourceGroupName: string,
    accountName: string,
    options?: ModelingListByAccountResourceOptionalParams
  ): Promise<ModelingListByAccountResourceResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, options },
      listByAccountResourceOperationSpec
    );
  }

  /**
   * Returns Modeling resources for a given name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the RecommendationsService Account resource.
   * @param modelingName The name of the Modeling resource.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    modelingName: string,
    options?: ModelingGetOptionalParams
  ): Promise<ModelingGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, modelingName, options },
      getOperationSpec
    );
  }

  /**
   * Creates or updates Modeling resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the RecommendationsService Account resource.
   * @param modelingName The name of the Modeling resource.
   * @param body Modeling resource details.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    accountName: string,
    modelingName: string,
    body: ModelingResource,
    options?: ModelingCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ModelingCreateOrUpdateResponse>,
      ModelingCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ModelingCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, accountName, modelingName, body, options },
      createOrUpdateOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
  }

  /**
   * Creates or updates Modeling resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the RecommendationsService Account resource.
   * @param modelingName The name of the Modeling resource.
   * @param body Modeling resource details.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    accountName: string,
    modelingName: string,
    body: ModelingResource,
    options?: ModelingCreateOrUpdateOptionalParams
  ): Promise<ModelingCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      accountName,
      modelingName,
      body,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Updates Modeling resource details.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the RecommendationsService Account resource.
   * @param modelingName The name of the Modeling resource.
   * @param body Modeling resource patch details.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    accountName: string,
    modelingName: string,
    body: ModelingPatchResource,
    options?: ModelingUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ModelingUpdateResponse>,
      ModelingUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ModelingUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, accountName, modelingName, body, options },
      updateOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
  }

  /**
   * Updates Modeling resource details.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the RecommendationsService Account resource.
   * @param modelingName The name of the Modeling resource.
   * @param body Modeling resource patch details.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    accountName: string,
    modelingName: string,
    body: ModelingPatchResource,
    options?: ModelingUpdateOptionalParams
  ): Promise<ModelingUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      accountName,
      modelingName,
      body,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes Modeling resources of a given name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the RecommendationsService Account resource.
   * @param modelingName The name of the Modeling resource.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    accountName: string,
    modelingName: string,
    options?: ModelingDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, accountName, modelingName, options },
      deleteOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
  }

  /**
   * Deletes Modeling resources of a given name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the RecommendationsService Account resource.
   * @param modelingName The name of the Modeling resource.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    accountName: string,
    modelingName: string,
    options?: ModelingDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      accountName,
      modelingName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * ListByAccountResourceNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the RecommendationsService Account resource.
   * @param nextLink The nextLink from the previous successful call to the ListByAccountResource method.
   * @param options The options parameters.
   */
  private _listByAccountResourceNext(
    resourceGroupName: string,
    accountName: string,
    nextLink: string,
    options?: ModelingListByAccountResourceNextOptionalParams
  ): Promise<ModelingListByAccountResourceNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, nextLink, options },
      listByAccountResourceNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByAccountResourceOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecommendationsService/accounts/{accountName}/modeling",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ModelingResourceList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecommendationsService/accounts/{accountName}/modeling/{modelingName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ModelingResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.modelingName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecommendationsService/accounts/{accountName}/modeling/{modelingName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ModelingResource
    },
    201: {
      bodyMapper: Mappers.ModelingResource
    },
    202: {
      bodyMapper: Mappers.ModelingResource
    },
    204: {
      bodyMapper: Mappers.ModelingResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.modelingName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecommendationsService/accounts/{accountName}/modeling/{modelingName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ModelingResource
    },
    201: {
      bodyMapper: Mappers.ModelingResource
    },
    202: {
      bodyMapper: Mappers.ModelingResource
    },
    204: {
      bodyMapper: Mappers.ModelingResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.modelingName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecommendationsService/accounts/{accountName}/modeling/{modelingName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.modelingName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByAccountResourceNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ModelingResourceList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
