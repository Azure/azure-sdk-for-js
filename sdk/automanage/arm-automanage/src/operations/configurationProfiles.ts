/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ConfigurationProfiles } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AutomanageClient } from "../automanageClient";
import {
  ConfigurationProfile,
  ConfigurationProfilesListByResourceGroupOptionalParams,
  ConfigurationProfilesListBySubscriptionOptionalParams,
  ConfigurationProfilesCreateOrUpdateOptionalParams,
  ConfigurationProfilesCreateOrUpdateResponse,
  ConfigurationProfilesGetOptionalParams,
  ConfigurationProfilesGetResponse,
  ConfigurationProfilesDeleteOptionalParams,
  ConfigurationProfileUpdate,
  ConfigurationProfilesUpdateOptionalParams,
  ConfigurationProfilesUpdateResponse,
  ConfigurationProfilesListByResourceGroupResponse,
  ConfigurationProfilesListBySubscriptionResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ConfigurationProfiles operations. */
export class ConfigurationProfilesImpl implements ConfigurationProfiles {
  private readonly client: AutomanageClient;

  /**
   * Initialize a new instance of the class ConfigurationProfiles class.
   * @param client Reference to the service client
   */
  constructor(client: AutomanageClient) {
    this.client = client;
  }

  /**
   * Retrieve a list of configuration profile within a given resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: ConfigurationProfilesListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<ConfigurationProfile> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupPagingPage(resourceGroupName, options);
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: ConfigurationProfilesListByResourceGroupOptionalParams
  ): AsyncIterableIterator<ConfigurationProfile[]> {
    let result = await this._listByResourceGroup(resourceGroupName, options);
    yield result.value || [];
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: ConfigurationProfilesListByResourceGroupOptionalParams
  ): AsyncIterableIterator<ConfigurationProfile> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Retrieve a list of configuration profile within a subscription
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: ConfigurationProfilesListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<ConfigurationProfile> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBySubscriptionPagingPage(options);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: ConfigurationProfilesListBySubscriptionOptionalParams
  ): AsyncIterableIterator<ConfigurationProfile[]> {
    let result = await this._listBySubscription(options);
    yield result.value || [];
  }

  private async *listBySubscriptionPagingAll(
    options?: ConfigurationProfilesListBySubscriptionOptionalParams
  ): AsyncIterableIterator<ConfigurationProfile> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Creates a configuration profile
   * @param configurationProfileName Name of the configuration profile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param parameters Parameters supplied to create or update configuration profile.
   * @param options The options parameters.
   */
  createOrUpdate(
    configurationProfileName: string,
    resourceGroupName: string,
    parameters: ConfigurationProfile,
    options?: ConfigurationProfilesCreateOrUpdateOptionalParams
  ): Promise<ConfigurationProfilesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { configurationProfileName, resourceGroupName, parameters, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Get information about a configuration profile
   * @param configurationProfileName The configuration profile name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  get(
    configurationProfileName: string,
    resourceGroupName: string,
    options?: ConfigurationProfilesGetOptionalParams
  ): Promise<ConfigurationProfilesGetResponse> {
    return this.client.sendOperationRequest(
      { configurationProfileName, resourceGroupName, options },
      getOperationSpec
    );
  }

  /**
   * Delete a configuration profile
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param configurationProfileName Name of the configuration profile
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    configurationProfileName: string,
    options?: ConfigurationProfilesDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, configurationProfileName, options },
      deleteOperationSpec
    );
  }

  /**
   * Updates a configuration profile
   * @param configurationProfileName Name of the configuration profile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param parameters Parameters supplied to update configuration profile.
   * @param options The options parameters.
   */
  update(
    configurationProfileName: string,
    resourceGroupName: string,
    parameters: ConfigurationProfileUpdate,
    options?: ConfigurationProfilesUpdateOptionalParams
  ): Promise<ConfigurationProfilesUpdateResponse> {
    return this.client.sendOperationRequest(
      { configurationProfileName, resourceGroupName, parameters, options },
      updateOperationSpec
    );
  }

  /**
   * Retrieve a list of configuration profile within a given resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: ConfigurationProfilesListByResourceGroupOptionalParams
  ): Promise<ConfigurationProfilesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Retrieve a list of configuration profile within a subscription
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: ConfigurationProfilesListBySubscriptionOptionalParams
  ): Promise<ConfigurationProfilesListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automanage/configurationProfiles/{configurationProfileName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigurationProfile
    },
    201: {
      bodyMapper: Mappers.ConfigurationProfile
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.configurationProfileName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automanage/configurationProfiles/{configurationProfileName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigurationProfile
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.configurationProfileName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automanage/configurationProfiles/{configurationProfileName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.configurationProfileName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automanage/configurationProfiles/{configurationProfileName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigurationProfile
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.configurationProfileName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automanage/configurationProfiles",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigurationProfileList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Automanage/configurationProfiles",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigurationProfileList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
