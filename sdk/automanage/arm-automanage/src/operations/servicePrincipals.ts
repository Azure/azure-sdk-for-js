/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ServicePrincipals } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AutomanageClient } from "../automanageClient";
import {
  ServicePrincipal,
  ServicePrincipalsListBySubscriptionOptionalParams,
  ServicePrincipalsListBySubscriptionResponse,
  ServicePrincipalsGetOptionalParams,
  ServicePrincipalsGetResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ServicePrincipals operations. */
export class ServicePrincipalsImpl implements ServicePrincipals {
  private readonly client: AutomanageClient;

  /**
   * Initialize a new instance of the class ServicePrincipals class.
   * @param client Reference to the service client
   */
  constructor(client: AutomanageClient) {
    this.client = client;
  }

  /**
   * Get the Automanage AAD first party Application Service Principal details for the subscription id.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: ServicePrincipalsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<ServicePrincipal> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBySubscriptionPagingPage(options);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: ServicePrincipalsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<ServicePrincipal[]> {
    let result = await this._listBySubscription(options);
    yield result.value || [];
  }

  private async *listBySubscriptionPagingAll(
    options?: ServicePrincipalsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<ServicePrincipal> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Get the Automanage AAD first party Application Service Principal details for the subscription id.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: ServicePrincipalsListBySubscriptionOptionalParams
  ): Promise<ServicePrincipalsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * Get the Automanage AAD first party Application Service Principal details for the subscription id.
   * @param options The options parameters.
   */
  get(
    options?: ServicePrincipalsGetOptionalParams
  ): Promise<ServicePrincipalsGetResponse> {
    return this.client.sendOperationRequest({ options }, getOperationSpec);
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Automanage/servicePrincipals",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServicePrincipalListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Automanage/servicePrincipals/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServicePrincipal
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
