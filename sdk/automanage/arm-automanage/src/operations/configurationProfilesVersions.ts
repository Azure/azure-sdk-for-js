/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { ConfigurationProfilesVersions } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AutomanageClient } from "../automanageClient";
import {
  ConfigurationProfile,
  ConfigurationProfilesVersionsListChildResourcesOptionalParams,
  ConfigurationProfilesVersionsListChildResourcesResponse,
  ConfigurationProfilesVersionsCreateOrUpdateOptionalParams,
  ConfigurationProfilesVersionsCreateOrUpdateResponse,
  ConfigurationProfilesVersionsGetOptionalParams,
  ConfigurationProfilesVersionsGetResponse,
  ConfigurationProfilesVersionsDeleteOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ConfigurationProfilesVersions operations. */
export class ConfigurationProfilesVersionsImpl
  implements ConfigurationProfilesVersions {
  private readonly client: AutomanageClient;

  /**
   * Initialize a new instance of the class ConfigurationProfilesVersions class.
   * @param client Reference to the service client
   */
  constructor(client: AutomanageClient) {
    this.client = client;
  }

  /**
   * Retrieve a list of configuration profile version for a configuration profile
   * @param configurationProfileName Name of the configuration profile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listChildResources(
    configurationProfileName: string,
    resourceGroupName: string,
    options?: ConfigurationProfilesVersionsListChildResourcesOptionalParams
  ): PagedAsyncIterableIterator<ConfigurationProfile> {
    const iter = this.listChildResourcesPagingAll(
      configurationProfileName,
      resourceGroupName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listChildResourcesPagingPage(
          configurationProfileName,
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listChildResourcesPagingPage(
    configurationProfileName: string,
    resourceGroupName: string,
    options?: ConfigurationProfilesVersionsListChildResourcesOptionalParams,
    _settings?: PageSettings
  ): AsyncIterableIterator<ConfigurationProfile[]> {
    let result: ConfigurationProfilesVersionsListChildResourcesResponse;
    result = await this._listChildResources(
      configurationProfileName,
      resourceGroupName,
      options
    );
    yield result.value || [];
  }

  private async *listChildResourcesPagingAll(
    configurationProfileName: string,
    resourceGroupName: string,
    options?: ConfigurationProfilesVersionsListChildResourcesOptionalParams
  ): AsyncIterableIterator<ConfigurationProfile> {
    for await (const page of this.listChildResourcesPagingPage(
      configurationProfileName,
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Creates a configuration profile version
   * @param configurationProfileName Name of the configuration profile.
   * @param versionName The configuration profile version name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param parameters Parameters supplied to create or update configuration profile.
   * @param options The options parameters.
   */
  createOrUpdate(
    configurationProfileName: string,
    versionName: string,
    resourceGroupName: string,
    parameters: ConfigurationProfile,
    options?: ConfigurationProfilesVersionsCreateOrUpdateOptionalParams
  ): Promise<ConfigurationProfilesVersionsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        configurationProfileName,
        versionName,
        resourceGroupName,
        parameters,
        options
      },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Get information about a configuration profile version
   * @param configurationProfileName The configuration profile name.
   * @param versionName The configuration profile version name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  get(
    configurationProfileName: string,
    versionName: string,
    resourceGroupName: string,
    options?: ConfigurationProfilesVersionsGetOptionalParams
  ): Promise<ConfigurationProfilesVersionsGetResponse> {
    return this.client.sendOperationRequest(
      { configurationProfileName, versionName, resourceGroupName, options },
      getOperationSpec
    );
  }

  /**
   * Delete a configuration profile version
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param configurationProfileName Name of the configuration profile
   * @param versionName The configuration profile version name.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    configurationProfileName: string,
    versionName: string,
    options?: ConfigurationProfilesVersionsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, configurationProfileName, versionName, options },
      deleteOperationSpec
    );
  }

  /**
   * Retrieve a list of configuration profile version for a configuration profile
   * @param configurationProfileName Name of the configuration profile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listChildResources(
    configurationProfileName: string,
    resourceGroupName: string,
    options?: ConfigurationProfilesVersionsListChildResourcesOptionalParams
  ): Promise<ConfigurationProfilesVersionsListChildResourcesResponse> {
    return this.client.sendOperationRequest(
      { configurationProfileName, resourceGroupName, options },
      listChildResourcesOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automanage/configurationProfiles/{configurationProfileName}/versions/{versionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigurationProfile
    },
    201: {
      bodyMapper: Mappers.ConfigurationProfile
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.versionName,
    Parameters.configurationProfileName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automanage/configurationProfiles/{configurationProfileName}/versions/{versionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigurationProfile
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.versionName,
    Parameters.configurationProfileName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automanage/configurationProfiles/{configurationProfileName}/versions/{versionName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.versionName,
    Parameters.configurationProfileName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listChildResourcesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automanage/configurationProfiles/{configurationProfileName}/versions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigurationProfileList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.configurationProfileName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
