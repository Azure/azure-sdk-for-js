/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ConfigurationProfileAssignments } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AutomanageClient } from "../automanageClient";
import {
  ConfigurationProfileAssignment,
  ConfigurationProfileAssignmentsListOptionalParams,
  ConfigurationProfileAssignmentsListBySubscriptionOptionalParams,
  ConfigurationProfileAssignmentsCreateOrUpdateOptionalParams,
  ConfigurationProfileAssignmentsCreateOrUpdateResponse,
  ConfigurationProfileAssignmentsGetOptionalParams,
  ConfigurationProfileAssignmentsGetResponse,
  ConfigurationProfileAssignmentsDeleteOptionalParams,
  ConfigurationProfileAssignmentsListResponse,
  ConfigurationProfileAssignmentsListBySubscriptionResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ConfigurationProfileAssignments operations. */
export class ConfigurationProfileAssignmentsImpl
  implements ConfigurationProfileAssignments {
  private readonly client: AutomanageClient;

  /**
   * Initialize a new instance of the class ConfigurationProfileAssignments class.
   * @param client Reference to the service client
   */
  constructor(client: AutomanageClient) {
    this.client = client;
  }

  /**
   * Get list of configuration profile assignments
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    options?: ConfigurationProfileAssignmentsListOptionalParams
  ): PagedAsyncIterableIterator<ConfigurationProfileAssignment> {
    const iter = this.listPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(resourceGroupName, options);
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    options?: ConfigurationProfileAssignmentsListOptionalParams
  ): AsyncIterableIterator<ConfigurationProfileAssignment[]> {
    let result = await this._list(resourceGroupName, options);
    yield result.value || [];
  }

  private async *listPagingAll(
    resourceGroupName: string,
    options?: ConfigurationProfileAssignmentsListOptionalParams
  ): AsyncIterableIterator<ConfigurationProfileAssignment> {
    for await (const page of this.listPagingPage(resourceGroupName, options)) {
      yield* page;
    }
  }

  /**
   * Get list of configuration profile assignments under a given subscription
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: ConfigurationProfileAssignmentsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<ConfigurationProfileAssignment> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBySubscriptionPagingPage(options);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: ConfigurationProfileAssignmentsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<ConfigurationProfileAssignment[]> {
    let result = await this._listBySubscription(options);
    yield result.value || [];
  }

  private async *listBySubscriptionPagingAll(
    options?: ConfigurationProfileAssignmentsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<ConfigurationProfileAssignment> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Creates an association between a VM and Automanage configuration profile
   * @param configurationProfileAssignmentName Name of the configuration profile assignment. Only default
   *                                           is supported.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param vmName The name of the virtual machine.
   * @param parameters Parameters supplied to the create or update configuration profile assignment.
   * @param options The options parameters.
   */
  createOrUpdate(
    configurationProfileAssignmentName: string,
    resourceGroupName: string,
    vmName: string,
    parameters: ConfigurationProfileAssignment,
    options?: ConfigurationProfileAssignmentsCreateOrUpdateOptionalParams
  ): Promise<ConfigurationProfileAssignmentsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        configurationProfileAssignmentName,
        resourceGroupName,
        vmName,
        parameters,
        options
      },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Get information about a configuration profile assignment
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param configurationProfileAssignmentName The configuration profile assignment name.
   * @param vmName The name of the virtual machine.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    configurationProfileAssignmentName: string,
    vmName: string,
    options?: ConfigurationProfileAssignmentsGetOptionalParams
  ): Promise<ConfigurationProfileAssignmentsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        configurationProfileAssignmentName,
        vmName,
        options
      },
      getOperationSpec
    );
  }

  /**
   * Delete a configuration profile assignment
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param configurationProfileAssignmentName Name of the configuration profile assignment
   * @param vmName The name of the virtual machine.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    configurationProfileAssignmentName: string,
    vmName: string,
    options?: ConfigurationProfileAssignmentsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        configurationProfileAssignmentName,
        vmName,
        options
      },
      deleteOperationSpec
    );
  }

  /**
   * Get list of configuration profile assignments
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    options?: ConfigurationProfileAssignmentsListOptionalParams
  ): Promise<ConfigurationProfileAssignmentsListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listOperationSpec
    );
  }

  /**
   * Get list of configuration profile assignments under a given subscription
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: ConfigurationProfileAssignmentsListBySubscriptionOptionalParams
  ): Promise<ConfigurationProfileAssignmentsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/providers/Microsoft.Automanage/configurationProfileAssignments/{configurationProfileAssignmentName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigurationProfileAssignment
    },
    201: {
      bodyMapper: Mappers.ConfigurationProfileAssignment
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.configurationProfileAssignmentName,
    Parameters.vmName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/providers/Microsoft.Automanage/configurationProfileAssignments/{configurationProfileAssignmentName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigurationProfileAssignment
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.configurationProfileAssignmentName,
    Parameters.vmName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/providers/Microsoft.Automanage/configurationProfileAssignments/{configurationProfileAssignmentName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.configurationProfileAssignmentName,
    Parameters.vmName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automanage/configurationProfileAssignments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigurationProfileAssignmentList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Automanage/configurationProfileAssignments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigurationProfileAssignmentList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
