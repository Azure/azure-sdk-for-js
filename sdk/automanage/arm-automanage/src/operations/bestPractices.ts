/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { BestPractices } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AutomanageClient } from "../automanageClient";
import {
  BestPractice,
  BestPracticesListByTenantOptionalParams,
  BestPracticesGetOptionalParams,
  BestPracticesGetResponse,
  BestPracticesListByTenantResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing BestPractices operations. */
export class BestPracticesImpl implements BestPractices {
  private readonly client: AutomanageClient;

  /**
   * Initialize a new instance of the class BestPractices class.
   * @param client Reference to the service client
   */
  constructor(client: AutomanageClient) {
    this.client = client;
  }

  /**
   * Retrieve a list of Automanage best practices
   * @param options The options parameters.
   */
  public listByTenant(
    options?: BestPracticesListByTenantOptionalParams
  ): PagedAsyncIterableIterator<BestPractice> {
    const iter = this.listByTenantPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByTenantPagingPage(options);
      }
    };
  }

  private async *listByTenantPagingPage(
    options?: BestPracticesListByTenantOptionalParams
  ): AsyncIterableIterator<BestPractice[]> {
    let result = await this._listByTenant(options);
    yield result.value || [];
  }

  private async *listByTenantPagingAll(
    options?: BestPracticesListByTenantOptionalParams
  ): AsyncIterableIterator<BestPractice> {
    for await (const page of this.listByTenantPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Get information about a Automanage best practice
   * @param bestPracticeName The Automanage best practice name.
   * @param options The options parameters.
   */
  get(
    bestPracticeName: string,
    options?: BestPracticesGetOptionalParams
  ): Promise<BestPracticesGetResponse> {
    return this.client.sendOperationRequest(
      { bestPracticeName, options },
      getOperationSpec
    );
  }

  /**
   * Retrieve a list of Automanage best practices
   * @param options The options parameters.
   */
  private _listByTenant(
    options?: BestPracticesListByTenantOptionalParams
  ): Promise<BestPracticesListByTenantResponse> {
    return this.client.sendOperationRequest(
      { options },
      listByTenantOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Automanage/bestPractices/{bestPracticeName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BestPractice
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.bestPracticeName],
  headerParameters: [Parameters.accept],
  serializer
};
const listByTenantOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Automanage/bestPractices",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BestPracticeList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
