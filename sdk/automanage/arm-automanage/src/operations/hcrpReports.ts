/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { HcrpReports } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AutomanageClient } from "../automanageClient";
import {
  Report,
  HcrpReportsListByConfigurationProfileAssignmentsOptionalParams,
  HcrpReportsListByConfigurationProfileAssignmentsResponse,
  HcrpReportsGetOptionalParams,
  HcrpReportsGetResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing HcrpReports operations. */
export class HcrpReportsImpl implements HcrpReports {
  private readonly client: AutomanageClient;

  /**
   * Initialize a new instance of the class HcrpReports class.
   * @param client Reference to the service client
   */
  constructor(client: AutomanageClient) {
    this.client = client;
  }

  /**
   * Retrieve a list of reports within a given configuration profile assignment
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param machineName The name of the Arc machine.
   * @param configurationProfileAssignmentName The configuration profile assignment name.
   * @param options The options parameters.
   */
  public listByConfigurationProfileAssignments(
    resourceGroupName: string,
    machineName: string,
    configurationProfileAssignmentName: string,
    options?: HcrpReportsListByConfigurationProfileAssignmentsOptionalParams
  ): PagedAsyncIterableIterator<Report> {
    const iter = this.listByConfigurationProfileAssignmentsPagingAll(
      resourceGroupName,
      machineName,
      configurationProfileAssignmentName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByConfigurationProfileAssignmentsPagingPage(
          resourceGroupName,
          machineName,
          configurationProfileAssignmentName,
          options,
          settings
        );
      }
    };
  }

  private async *listByConfigurationProfileAssignmentsPagingPage(
    resourceGroupName: string,
    machineName: string,
    configurationProfileAssignmentName: string,
    options?: HcrpReportsListByConfigurationProfileAssignmentsOptionalParams,
    _settings?: PageSettings
  ): AsyncIterableIterator<Report[]> {
    let result: HcrpReportsListByConfigurationProfileAssignmentsResponse;
    result = await this._listByConfigurationProfileAssignments(
      resourceGroupName,
      machineName,
      configurationProfileAssignmentName,
      options
    );
    yield result.value || [];
  }

  private async *listByConfigurationProfileAssignmentsPagingAll(
    resourceGroupName: string,
    machineName: string,
    configurationProfileAssignmentName: string,
    options?: HcrpReportsListByConfigurationProfileAssignmentsOptionalParams
  ): AsyncIterableIterator<Report> {
    for await (const page of this.listByConfigurationProfileAssignmentsPagingPage(
      resourceGroupName,
      machineName,
      configurationProfileAssignmentName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get information about a report associated with a configuration profile assignment run
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param machineName The name of the Arc machine.
   * @param configurationProfileAssignmentName The configuration profile assignment name.
   * @param reportName The report name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    machineName: string,
    configurationProfileAssignmentName: string,
    reportName: string,
    options?: HcrpReportsGetOptionalParams
  ): Promise<HcrpReportsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        machineName,
        configurationProfileAssignmentName,
        reportName,
        options
      },
      getOperationSpec
    );
  }

  /**
   * Retrieve a list of reports within a given configuration profile assignment
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param machineName The name of the Arc machine.
   * @param configurationProfileAssignmentName The configuration profile assignment name.
   * @param options The options parameters.
   */
  private _listByConfigurationProfileAssignments(
    resourceGroupName: string,
    machineName: string,
    configurationProfileAssignmentName: string,
    options?: HcrpReportsListByConfigurationProfileAssignmentsOptionalParams
  ): Promise<HcrpReportsListByConfigurationProfileAssignmentsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        machineName,
        configurationProfileAssignmentName,
        options
      },
      listByConfigurationProfileAssignmentsOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/machines/{machineName}/providers/Microsoft.Automanage/configurationProfileAssignments/{configurationProfileAssignmentName}/reports/{reportName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Report
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.configurationProfileAssignmentName,
    Parameters.machineName,
    Parameters.reportName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByConfigurationProfileAssignmentsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/machines/{machineName}/providers/Microsoft.Automanage/configurationProfileAssignments/{configurationProfileAssignmentName}/reports",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReportList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.configurationProfileAssignmentName,
    Parameters.machineName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
