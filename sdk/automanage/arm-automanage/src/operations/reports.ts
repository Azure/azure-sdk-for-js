/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Reports } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AutomanageClient } from "../automanageClient";
import {
  Report,
  ReportsListByConfigurationProfileAssignmentsOptionalParams,
  ReportsGetOptionalParams,
  ReportsGetResponse,
  ReportsListByConfigurationProfileAssignmentsResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Reports operations. */
export class ReportsImpl implements Reports {
  private readonly client: AutomanageClient;

  /**
   * Initialize a new instance of the class Reports class.
   * @param client Reference to the service client
   */
  constructor(client: AutomanageClient) {
    this.client = client;
  }

  /**
   * Retrieve a list of reports within a given configuration profile assignment
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param configurationProfileAssignmentName The configuration profile assignment name.
   * @param vmName The name of the virtual machine.
   * @param options The options parameters.
   */
  public listByConfigurationProfileAssignments(
    resourceGroupName: string,
    configurationProfileAssignmentName: string,
    vmName: string,
    options?: ReportsListByConfigurationProfileAssignmentsOptionalParams
  ): PagedAsyncIterableIterator<Report> {
    const iter = this.listByConfigurationProfileAssignmentsPagingAll(
      resourceGroupName,
      configurationProfileAssignmentName,
      vmName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByConfigurationProfileAssignmentsPagingPage(
          resourceGroupName,
          configurationProfileAssignmentName,
          vmName,
          options
        );
      }
    };
  }

  private async *listByConfigurationProfileAssignmentsPagingPage(
    resourceGroupName: string,
    configurationProfileAssignmentName: string,
    vmName: string,
    options?: ReportsListByConfigurationProfileAssignmentsOptionalParams
  ): AsyncIterableIterator<Report[]> {
    let result = await this._listByConfigurationProfileAssignments(
      resourceGroupName,
      configurationProfileAssignmentName,
      vmName,
      options
    );
    yield result.value || [];
  }

  private async *listByConfigurationProfileAssignmentsPagingAll(
    resourceGroupName: string,
    configurationProfileAssignmentName: string,
    vmName: string,
    options?: ReportsListByConfigurationProfileAssignmentsOptionalParams
  ): AsyncIterableIterator<Report> {
    for await (const page of this.listByConfigurationProfileAssignmentsPagingPage(
      resourceGroupName,
      configurationProfileAssignmentName,
      vmName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get information about a report associated with a configuration profile assignment run
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param configurationProfileAssignmentName The configuration profile assignment name.
   * @param reportName The report name.
   * @param vmName The name of the virtual machine.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    configurationProfileAssignmentName: string,
    reportName: string,
    vmName: string,
    options?: ReportsGetOptionalParams
  ): Promise<ReportsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        configurationProfileAssignmentName,
        reportName,
        vmName,
        options
      },
      getOperationSpec
    );
  }

  /**
   * Retrieve a list of reports within a given configuration profile assignment
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param configurationProfileAssignmentName The configuration profile assignment name.
   * @param vmName The name of the virtual machine.
   * @param options The options parameters.
   */
  private _listByConfigurationProfileAssignments(
    resourceGroupName: string,
    configurationProfileAssignmentName: string,
    vmName: string,
    options?: ReportsListByConfigurationProfileAssignmentsOptionalParams
  ): Promise<ReportsListByConfigurationProfileAssignmentsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        configurationProfileAssignmentName,
        vmName,
        options
      },
      listByConfigurationProfileAssignmentsOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/providers/Microsoft.Automanage/configurationProfileAssignments/{configurationProfileAssignmentName}/reports/{reportName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Report
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.configurationProfileAssignmentName,
    Parameters.vmName,
    Parameters.reportName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByConfigurationProfileAssignmentsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/providers/Microsoft.Automanage/configurationProfileAssignments/{configurationProfileAssignmentName}/reports",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReportList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.configurationProfileAssignmentName,
    Parameters.vmName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
