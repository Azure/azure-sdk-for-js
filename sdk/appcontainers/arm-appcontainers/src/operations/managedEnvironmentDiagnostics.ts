/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { ManagedEnvironmentDiagnostics } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ContainerAppsAPIClient } from "../containerAppsAPIClient";
import {
  ManagedEnvironmentDiagnosticsListDetectorsOptionalParams,
  ManagedEnvironmentDiagnosticsListDetectorsResponse,
  ManagedEnvironmentDiagnosticsGetDetectorOptionalParams,
  ManagedEnvironmentDiagnosticsGetDetectorResponse
} from "../models";

/** Class containing ManagedEnvironmentDiagnostics operations. */
export class ManagedEnvironmentDiagnosticsImpl
  implements ManagedEnvironmentDiagnostics {
  private readonly client: ContainerAppsAPIClient;

  /**
   * Initialize a new instance of the class ManagedEnvironmentDiagnostics class.
   * @param client Reference to the service client
   */
  constructor(client: ContainerAppsAPIClient) {
    this.client = client;
  }

  /**
   * Get the list of diagnostics for a Managed Environment used to host container apps.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param environmentName Name of the Environment.
   * @param options The options parameters.
   */
  listDetectors(
    resourceGroupName: string,
    environmentName: string,
    options?: ManagedEnvironmentDiagnosticsListDetectorsOptionalParams
  ): Promise<ManagedEnvironmentDiagnosticsListDetectorsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, environmentName, options },
      listDetectorsOperationSpec
    );
  }

  /**
   * Get the diagnostics data for a Managed Environment used to host container apps.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param environmentName Name of the Environment.
   * @param detectorName Name of the Managed Environment detector.
   * @param options The options parameters.
   */
  getDetector(
    resourceGroupName: string,
    environmentName: string,
    detectorName: string,
    options?: ManagedEnvironmentDiagnosticsGetDetectorOptionalParams
  ): Promise<ManagedEnvironmentDiagnosticsGetDetectorResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, environmentName, detectorName, options },
      getDetectorOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listDetectorsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/managedEnvironments/{environmentName}/detectors",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticsCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.environmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getDetectorOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/managedEnvironments/{environmentName}/detectors/{detectorName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Diagnostics
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.detectorName,
    Parameters.environmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
