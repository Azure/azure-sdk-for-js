/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { HttpRouteConfigOperations } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { ContainerAppsAPIClient } from "../containerAppsAPIClient.js";
import {
  HttpRouteConfig,
  HttpRouteConfigListNextOptionalParams,
  HttpRouteConfigListOptionalParams,
  HttpRouteConfigListResponse,
  HttpRouteConfigGetOptionalParams,
  HttpRouteConfigGetResponse,
  HttpRouteConfigCreateOrUpdateOptionalParams,
  HttpRouteConfigCreateOrUpdateResponse,
  HttpRouteConfigUpdateOptionalParams,
  HttpRouteConfigUpdateResponse,
  HttpRouteConfigDeleteOptionalParams,
  HttpRouteConfigListNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing HttpRouteConfigOperations operations. */
export class HttpRouteConfigOperationsImpl implements HttpRouteConfigOperations {
  private readonly client: ContainerAppsAPIClient;

  /**
   * Initialize a new instance of the class HttpRouteConfigOperations class.
   * @param client Reference to the service client
   */
  constructor(client: ContainerAppsAPIClient) {
    this.client = client;
  }

  /**
   * Get the Managed Http Routes in a given managed environment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param environmentName Name of the Managed Environment.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    environmentName: string,
    options?: HttpRouteConfigListOptionalParams,
  ): PagedAsyncIterableIterator<HttpRouteConfig> {
    const iter = this.listPagingAll(resourceGroupName, environmentName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(resourceGroupName, environmentName, options, settings);
      },
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    environmentName: string,
    options?: HttpRouteConfigListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<HttpRouteConfig[]> {
    let result: HttpRouteConfigListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(resourceGroupName, environmentName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(resourceGroupName, environmentName, continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    environmentName: string,
    options?: HttpRouteConfigListOptionalParams,
  ): AsyncIterableIterator<HttpRouteConfig> {
    for await (const page of this.listPagingPage(resourceGroupName, environmentName, options)) {
      yield* page;
    }
  }

  /**
   * Get the specified Managed Http Route Config.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param environmentName Name of the Managed Environment.
   * @param httpRouteName Name of the Http Route Config Resource.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    environmentName: string,
    httpRouteName: string,
    options?: HttpRouteConfigGetOptionalParams,
  ): Promise<HttpRouteConfigGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, environmentName, httpRouteName, options },
      getOperationSpec,
    );
  }

  /**
   * Create or Update a Http Route Config.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param environmentName Name of the Managed Environment.
   * @param httpRouteName Name of the Http Route Config Resource.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    environmentName: string,
    httpRouteName: string,
    options?: HttpRouteConfigCreateOrUpdateOptionalParams,
  ): Promise<HttpRouteConfigCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, environmentName, httpRouteName, options },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Patches an http route config resource. Only patching of tags is supported
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param environmentName Name of the Managed Environment.
   * @param httpRouteName Name of the Http Route Config Resource.
   * @param httpRouteConfigEnvelope Properties of http route config that need to be updated
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    environmentName: string,
    httpRouteName: string,
    httpRouteConfigEnvelope: HttpRouteConfig,
    options?: HttpRouteConfigUpdateOptionalParams,
  ): Promise<HttpRouteConfigUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        environmentName,
        httpRouteName,
        httpRouteConfigEnvelope,
        options,
      },
      updateOperationSpec,
    );
  }

  /**
   * Deletes the specified Managed Http Route.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param environmentName Name of the Managed Environment.
   * @param httpRouteName Name of the Http Route Config Resource.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    environmentName: string,
    httpRouteName: string,
    options?: HttpRouteConfigDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, environmentName, httpRouteName, options },
      deleteOperationSpec,
    );
  }

  /**
   * Get the Managed Http Routes in a given managed environment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param environmentName Name of the Managed Environment.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    environmentName: string,
    options?: HttpRouteConfigListOptionalParams,
  ): Promise<HttpRouteConfigListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, environmentName, options },
      listOperationSpec,
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param environmentName Name of the Managed Environment.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    environmentName: string,
    nextLink: string,
    options?: HttpRouteConfigListNextOptionalParams,
  ): Promise<HttpRouteConfigListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, environmentName, nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/managedEnvironments/{environmentName}/httpRouteConfigs/{httpRouteName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HttpRouteConfig,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.environmentName1,
    Parameters.httpRouteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/managedEnvironments/{environmentName}/httpRouteConfigs/{httpRouteName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.HttpRouteConfig,
    },
    201: {
      bodyMapper: Mappers.HttpRouteConfig,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  requestBody: Parameters.httpRouteConfigEnvelope,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.environmentName1,
    Parameters.httpRouteName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/managedEnvironments/{environmentName}/httpRouteConfigs/{httpRouteName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.HttpRouteConfig,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  requestBody: Parameters.httpRouteConfigEnvelope1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.environmentName,
    Parameters.httpRouteName1,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/managedEnvironments/{environmentName}/httpRouteConfigs/{httpRouteName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.environmentName1,
    Parameters.httpRouteName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/managedEnvironments/{environmentName}/httpRouteConfigs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HttpRouteConfigCollection,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.environmentName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HttpRouteConfigCollection,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.environmentName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
