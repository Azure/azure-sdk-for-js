/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ContainerAppsDiagnostics } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ContainerAppsAPIClient } from "../containerAppsAPIClient";
import {
  Diagnostics,
  ContainerAppsDiagnosticsListDetectorsNextOptionalParams,
  ContainerAppsDiagnosticsListDetectorsOptionalParams,
  Revision,
  ContainerAppsDiagnosticsListRevisionsNextOptionalParams,
  ContainerAppsDiagnosticsListRevisionsOptionalParams,
  ContainerAppsDiagnosticsListDetectorsResponse,
  ContainerAppsDiagnosticsGetDetectorOptionalParams,
  ContainerAppsDiagnosticsGetDetectorResponse,
  ContainerAppsDiagnosticsListRevisionsResponse,
  ContainerAppsDiagnosticsGetRevisionOptionalParams,
  ContainerAppsDiagnosticsGetRevisionResponse,
  ContainerAppsDiagnosticsGetRootOptionalParams,
  ContainerAppsDiagnosticsGetRootResponse,
  ContainerAppsDiagnosticsListDetectorsNextResponse,
  ContainerAppsDiagnosticsListRevisionsNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ContainerAppsDiagnostics operations. */
export class ContainerAppsDiagnosticsImpl implements ContainerAppsDiagnostics {
  private readonly client: ContainerAppsAPIClient;

  /**
   * Initialize a new instance of the class ContainerAppsDiagnostics class.
   * @param client Reference to the service client
   */
  constructor(client: ContainerAppsAPIClient) {
    this.client = client;
  }

  /**
   * Get the list of diagnostics for a given Container App.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App for which detector info is needed.
   * @param options The options parameters.
   */
  public listDetectors(
    resourceGroupName: string,
    containerAppName: string,
    options?: ContainerAppsDiagnosticsListDetectorsOptionalParams
  ): PagedAsyncIterableIterator<Diagnostics> {
    const iter = this.listDetectorsPagingAll(
      resourceGroupName,
      containerAppName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listDetectorsPagingPage(
          resourceGroupName,
          containerAppName,
          options
        );
      }
    };
  }

  private async *listDetectorsPagingPage(
    resourceGroupName: string,
    containerAppName: string,
    options?: ContainerAppsDiagnosticsListDetectorsOptionalParams
  ): AsyncIterableIterator<Diagnostics[]> {
    let result = await this._listDetectors(
      resourceGroupName,
      containerAppName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listDetectorsNext(
        resourceGroupName,
        containerAppName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listDetectorsPagingAll(
    resourceGroupName: string,
    containerAppName: string,
    options?: ContainerAppsDiagnosticsListDetectorsOptionalParams
  ): AsyncIterableIterator<Diagnostics> {
    for await (const page of this.listDetectorsPagingPage(
      resourceGroupName,
      containerAppName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get the Revisions for a given Container App.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App for which Revisions are needed.
   * @param options The options parameters.
   */
  public listRevisions(
    resourceGroupName: string,
    containerAppName: string,
    options?: ContainerAppsDiagnosticsListRevisionsOptionalParams
  ): PagedAsyncIterableIterator<Revision> {
    const iter = this.listRevisionsPagingAll(
      resourceGroupName,
      containerAppName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listRevisionsPagingPage(
          resourceGroupName,
          containerAppName,
          options
        );
      }
    };
  }

  private async *listRevisionsPagingPage(
    resourceGroupName: string,
    containerAppName: string,
    options?: ContainerAppsDiagnosticsListRevisionsOptionalParams
  ): AsyncIterableIterator<Revision[]> {
    let result = await this._listRevisions(
      resourceGroupName,
      containerAppName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listRevisionsNext(
        resourceGroupName,
        containerAppName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listRevisionsPagingAll(
    resourceGroupName: string,
    containerAppName: string,
    options?: ContainerAppsDiagnosticsListRevisionsOptionalParams
  ): AsyncIterableIterator<Revision> {
    for await (const page of this.listRevisionsPagingPage(
      resourceGroupName,
      containerAppName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get the list of diagnostics for a given Container App.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App for which detector info is needed.
   * @param options The options parameters.
   */
  private _listDetectors(
    resourceGroupName: string,
    containerAppName: string,
    options?: ContainerAppsDiagnosticsListDetectorsOptionalParams
  ): Promise<ContainerAppsDiagnosticsListDetectorsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, containerAppName, options },
      listDetectorsOperationSpec
    );
  }

  /**
   * Get a diagnostics result of a Container App.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App.
   * @param detectorName Name of the Container App Detector.
   * @param options The options parameters.
   */
  getDetector(
    resourceGroupName: string,
    containerAppName: string,
    detectorName: string,
    options?: ContainerAppsDiagnosticsGetDetectorOptionalParams
  ): Promise<ContainerAppsDiagnosticsGetDetectorResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, containerAppName, detectorName, options },
      getDetectorOperationSpec
    );
  }

  /**
   * Get the Revisions for a given Container App.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App for which Revisions are needed.
   * @param options The options parameters.
   */
  private _listRevisions(
    resourceGroupName: string,
    containerAppName: string,
    options?: ContainerAppsDiagnosticsListRevisionsOptionalParams
  ): Promise<ContainerAppsDiagnosticsListRevisionsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, containerAppName, options },
      listRevisionsOperationSpec
    );
  }

  /**
   * Get a revision of a Container App.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App.
   * @param revisionName Name of the Container App Revision.
   * @param options The options parameters.
   */
  getRevision(
    resourceGroupName: string,
    containerAppName: string,
    revisionName: string,
    options?: ContainerAppsDiagnosticsGetRevisionOptionalParams
  ): Promise<ContainerAppsDiagnosticsGetRevisionResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, containerAppName, revisionName, options },
      getRevisionOperationSpec
    );
  }

  /**
   * Get the properties of a Container App.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App.
   * @param options The options parameters.
   */
  getRoot(
    resourceGroupName: string,
    containerAppName: string,
    options?: ContainerAppsDiagnosticsGetRootOptionalParams
  ): Promise<ContainerAppsDiagnosticsGetRootResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, containerAppName, options },
      getRootOperationSpec
    );
  }

  /**
   * ListDetectorsNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App for which detector info is needed.
   * @param nextLink The nextLink from the previous successful call to the ListDetectors method.
   * @param options The options parameters.
   */
  private _listDetectorsNext(
    resourceGroupName: string,
    containerAppName: string,
    nextLink: string,
    options?: ContainerAppsDiagnosticsListDetectorsNextOptionalParams
  ): Promise<ContainerAppsDiagnosticsListDetectorsNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, containerAppName, nextLink, options },
      listDetectorsNextOperationSpec
    );
  }

  /**
   * ListRevisionsNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App for which Revisions are needed.
   * @param nextLink The nextLink from the previous successful call to the ListRevisions method.
   * @param options The options parameters.
   */
  private _listRevisionsNext(
    resourceGroupName: string,
    containerAppName: string,
    nextLink: string,
    options?: ContainerAppsDiagnosticsListRevisionsNextOptionalParams
  ): Promise<ContainerAppsDiagnosticsListRevisionsNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, containerAppName, nextLink, options },
      listRevisionsNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listDetectorsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/detectors",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticsCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.containerAppName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getDetectorOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/detectors/{detectorName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Diagnostics
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.containerAppName,
    Parameters.detectorName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listRevisionsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/detectorProperties/revisionsApi/revisions/",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RevisionCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.containerAppName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getRevisionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/detectorProperties/revisionsApi/revisions/{revisionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Revision
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.containerAppName,
    Parameters.revisionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getRootOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/detectorProperties/rootApi/",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ContainerApp
    },
    404: {
      isError: true
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.containerAppName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listDetectorsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticsCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.containerAppName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listRevisionsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RevisionCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.containerAppName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
