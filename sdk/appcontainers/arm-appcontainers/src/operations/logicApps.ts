/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import type { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import type { LogicApps } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import type { ContainerAppsAPIClient } from "../containerAppsAPIClient.js";
import type {
  WorkflowEnvelope,
  LogicAppsListWorkflowsNextOptionalParams,
  LogicAppsListWorkflowsOptionalParams,
  LogicAppsListWorkflowsResponse,
  LogicAppsGetOptionalParams,
  LogicAppsGetResponse,
  LogicAppsCreateOrUpdateOptionalParams,
  LogicAppsCreateOrUpdateResponse,
  LogicAppsDeleteOptionalParams,
  LogicAppsGetWorkflowOptionalParams,
  LogicAppsGetWorkflowResponse,
  LogicAppsListWorkflowsConnectionsOptionalParams,
  LogicAppsListWorkflowsConnectionsResponse,
  LogicAppsListWorkflowsNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing LogicApps operations. */
export class LogicAppsImpl implements LogicApps {
  private readonly client: ContainerAppsAPIClient;

  /**
   * Initialize a new instance of the class LogicApps class.
   * @param client Reference to the service client
   */
  constructor(client: ContainerAppsAPIClient) {
    this.client = client;
  }

  /**
   * List the workflows for a logic app.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App.
   * @param logicAppName Name of the Logic App.
   * @param options The options parameters.
   */
  public listWorkflows(
    resourceGroupName: string,
    containerAppName: string,
    logicAppName: string,
    options?: LogicAppsListWorkflowsOptionalParams,
  ): PagedAsyncIterableIterator<WorkflowEnvelope> {
    const iter = this.listWorkflowsPagingAll(
      resourceGroupName,
      containerAppName,
      logicAppName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listWorkflowsPagingPage(
          resourceGroupName,
          containerAppName,
          logicAppName,
          options,
          settings,
        );
      },
    };
  }

  private async *listWorkflowsPagingPage(
    resourceGroupName: string,
    containerAppName: string,
    logicAppName: string,
    options?: LogicAppsListWorkflowsOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<WorkflowEnvelope[]> {
    let result: LogicAppsListWorkflowsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listWorkflows(
        resourceGroupName,
        containerAppName,
        logicAppName,
        options,
      );
      const page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listWorkflowsNext(
        resourceGroupName,
        containerAppName,
        logicAppName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      const page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listWorkflowsPagingAll(
    resourceGroupName: string,
    containerAppName: string,
    logicAppName: string,
    options?: LogicAppsListWorkflowsOptionalParams,
  ): AsyncIterableIterator<WorkflowEnvelope> {
    for await (const page of this.listWorkflowsPagingPage(
      resourceGroupName,
      containerAppName,
      logicAppName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Gets a logic app extension resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App.
   * @param logicAppName Name of the Logic App.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    containerAppName: string,
    logicAppName: string,
    options?: LogicAppsGetOptionalParams,
  ): Promise<LogicAppsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, containerAppName, logicAppName, options },
      getOperationSpec,
    );
  }

  /**
   * Create or update a Logic App extension resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App.
   * @param logicAppName Name of the Logic App.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    containerAppName: string,
    logicAppName: string,
    options?: LogicAppsCreateOrUpdateOptionalParams,
  ): Promise<LogicAppsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, containerAppName, logicAppName, options },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Deletes a Logic App extension resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App.
   * @param logicAppName Name of the Logic App.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    containerAppName: string,
    logicAppName: string,
    options?: LogicAppsDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, containerAppName, logicAppName, options },
      deleteOperationSpec,
    );
  }

  /**
   * List the workflows for a logic app.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App.
   * @param logicAppName Name of the Logic App.
   * @param options The options parameters.
   */
  private _listWorkflows(
    resourceGroupName: string,
    containerAppName: string,
    logicAppName: string,
    options?: LogicAppsListWorkflowsOptionalParams,
  ): Promise<LogicAppsListWorkflowsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, containerAppName, logicAppName, options },
      listWorkflowsOperationSpec,
    );
  }

  /**
   * Get workflow information by its name
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App.
   * @param logicAppName Name of the Logic App.
   * @param workflowName Workflow name.
   * @param options The options parameters.
   */
  getWorkflow(
    resourceGroupName: string,
    containerAppName: string,
    logicAppName: string,
    workflowName: string,
    options?: LogicAppsGetWorkflowOptionalParams,
  ): Promise<LogicAppsGetWorkflowResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        containerAppName,
        logicAppName,
        workflowName,
        options,
      },
      getWorkflowOperationSpec,
    );
  }

  /**
   * Gets logic app's connections.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App.
   * @param logicAppName Name of the Logic App.
   * @param options The options parameters.
   */
  listWorkflowsConnections(
    resourceGroupName: string,
    containerAppName: string,
    logicAppName: string,
    options?: LogicAppsListWorkflowsConnectionsOptionalParams,
  ): Promise<LogicAppsListWorkflowsConnectionsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, containerAppName, logicAppName, options },
      listWorkflowsConnectionsOperationSpec,
    );
  }

  /**
   * ListWorkflowsNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App.
   * @param logicAppName Name of the Logic App.
   * @param nextLink The nextLink from the previous successful call to the ListWorkflows method.
   * @param options The options parameters.
   */
  private _listWorkflowsNext(
    resourceGroupName: string,
    containerAppName: string,
    logicAppName: string,
    nextLink: string,
    options?: LogicAppsListWorkflowsNextOptionalParams,
  ): Promise<LogicAppsListWorkflowsNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, containerAppName, logicAppName, nextLink, options },
      listWorkflowsNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/providers/Microsoft.App/logicApps/{logicAppName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LogicApp,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.containerAppName1,
    Parameters.logicAppName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/providers/Microsoft.App/logicApps/{logicAppName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.LogicApp,
    },
    201: {
      bodyMapper: Mappers.LogicApp,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  requestBody: Parameters.resource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.containerAppName1,
    Parameters.logicAppName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/providers/Microsoft.App/logicApps/{logicAppName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.containerAppName1,
    Parameters.logicAppName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listWorkflowsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/providers/Microsoft.App/logicApps/{logicAppName}/workflows",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowEnvelopeCollection,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.containerAppName1,
    Parameters.logicAppName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getWorkflowOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/providers/Microsoft.App/logicApps/{logicAppName}/workflows/{workflowName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowEnvelope,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.containerAppName1,
    Parameters.logicAppName,
    Parameters.workflowName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listWorkflowsConnectionsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/providers/Microsoft.App/logicApps/{logicAppName}/listWorkflowsConnections",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowEnvelope,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.containerAppName1,
    Parameters.logicAppName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listWorkflowsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowEnvelopeCollection,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.containerAppName1,
    Parameters.logicAppName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
