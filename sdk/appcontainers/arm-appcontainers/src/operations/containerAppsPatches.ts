/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ContainerAppsPatches } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ContainerAppsAPIClient } from "../containerAppsAPIClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  ContainerAppsPatchResource,
  ContainerAppsPatchesListByContainerAppNextOptionalParams,
  ContainerAppsPatchesListByContainerAppOptionalParams,
  ContainerAppsPatchesListByContainerAppResponse,
  ContainerAppsPatchesGetOptionalParams,
  ContainerAppsPatchesGetResponse,
  ContainerAppsPatchesDeleteOptionalParams,
  ContainerAppsPatchesDeleteResponse,
  PatchSkipConfig,
  ContainerAppsPatchesSkipConfigureOptionalParams,
  ContainerAppsPatchesSkipConfigureResponse,
  ContainerAppsPatchesApplyOptionalParams,
  ContainerAppsPatchesApplyResponse,
  ContainerAppsPatchesListByContainerAppNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ContainerAppsPatches operations. */
export class ContainerAppsPatchesImpl implements ContainerAppsPatches {
  private readonly client: ContainerAppsAPIClient;

  /**
   * Initialize a new instance of the class ContainerAppsPatches class.
   * @param client Reference to the service client
   */
  constructor(client: ContainerAppsAPIClient) {
    this.client = client;
  }

  /**
   * List Container Apps Patch resources by ContainerApp.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App the Patch is associated.
   * @param options The options parameters.
   */
  public listByContainerApp(
    resourceGroupName: string,
    containerAppName: string,
    options?: ContainerAppsPatchesListByContainerAppOptionalParams,
  ): PagedAsyncIterableIterator<ContainerAppsPatchResource> {
    const iter = this.listByContainerAppPagingAll(
      resourceGroupName,
      containerAppName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByContainerAppPagingPage(
          resourceGroupName,
          containerAppName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByContainerAppPagingPage(
    resourceGroupName: string,
    containerAppName: string,
    options?: ContainerAppsPatchesListByContainerAppOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ContainerAppsPatchResource[]> {
    let result: ContainerAppsPatchesListByContainerAppResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByContainerApp(
        resourceGroupName,
        containerAppName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByContainerAppNext(
        resourceGroupName,
        containerAppName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByContainerAppPagingAll(
    resourceGroupName: string,
    containerAppName: string,
    options?: ContainerAppsPatchesListByContainerAppOptionalParams,
  ): AsyncIterableIterator<ContainerAppsPatchResource> {
    for await (const page of this.listByContainerAppPagingPage(
      resourceGroupName,
      containerAppName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List Container Apps Patch resources by ContainerApp.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App the Patch is associated.
   * @param options The options parameters.
   */
  private _listByContainerApp(
    resourceGroupName: string,
    containerAppName: string,
    options?: ContainerAppsPatchesListByContainerAppOptionalParams,
  ): Promise<ContainerAppsPatchesListByContainerAppResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, containerAppName, options },
      listByContainerAppOperationSpec,
    );
  }

  /**
   * Get details for specific Container Apps Patch by patch name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App the Patch is associated.
   * @param patchName The name of the patch
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    containerAppName: string,
    patchName: string,
    options?: ContainerAppsPatchesGetOptionalParams,
  ): Promise<ContainerAppsPatchesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, containerAppName, patchName, options },
      getOperationSpec,
    );
  }

  /**
   * Delete specific Container Apps Patch by patch name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App the Patch is associated.
   * @param patchName The name of the patch
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    containerAppName: string,
    patchName: string,
    options?: ContainerAppsPatchesDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ContainerAppsPatchesDeleteResponse>,
      ContainerAppsPatchesDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ContainerAppsPatchesDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, containerAppName, patchName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      ContainerAppsPatchesDeleteResponse,
      OperationState<ContainerAppsPatchesDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete specific Container Apps Patch by patch name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App the Patch is associated.
   * @param patchName The name of the patch
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    containerAppName: string,
    patchName: string,
    options?: ContainerAppsPatchesDeleteOptionalParams,
  ): Promise<ContainerAppsPatchesDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      containerAppName,
      patchName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Configure the Container Apps Patch skip option by patch name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App the Patch is associated.
   * @param patchName The name of the patch
   * @param patchSkipConfig Configure patcher to skip a patch or not.
   * @param options The options parameters.
   */
  async beginSkipConfigure(
    resourceGroupName: string,
    containerAppName: string,
    patchName: string,
    patchSkipConfig: PatchSkipConfig,
    options?: ContainerAppsPatchesSkipConfigureOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ContainerAppsPatchesSkipConfigureResponse>,
      ContainerAppsPatchesSkipConfigureResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ContainerAppsPatchesSkipConfigureResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        containerAppName,
        patchName,
        patchSkipConfig,
        options,
      },
      spec: skipConfigureOperationSpec,
    });
    const poller = await createHttpPoller<
      ContainerAppsPatchesSkipConfigureResponse,
      OperationState<ContainerAppsPatchesSkipConfigureResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Configure the Container Apps Patch skip option by patch name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App the Patch is associated.
   * @param patchName The name of the patch
   * @param patchSkipConfig Configure patcher to skip a patch or not.
   * @param options The options parameters.
   */
  async beginSkipConfigureAndWait(
    resourceGroupName: string,
    containerAppName: string,
    patchName: string,
    patchSkipConfig: PatchSkipConfig,
    options?: ContainerAppsPatchesSkipConfigureOptionalParams,
  ): Promise<ContainerAppsPatchesSkipConfigureResponse> {
    const poller = await this.beginSkipConfigure(
      resourceGroupName,
      containerAppName,
      patchName,
      patchSkipConfig,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Apply a Container Apps Patch resource with patch name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App the Patch is associated.
   * @param patchName The name of the patch
   * @param options The options parameters.
   */
  async beginApply(
    resourceGroupName: string,
    containerAppName: string,
    patchName: string,
    options?: ContainerAppsPatchesApplyOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ContainerAppsPatchesApplyResponse>,
      ContainerAppsPatchesApplyResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ContainerAppsPatchesApplyResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, containerAppName, patchName, options },
      spec: applyOperationSpec,
    });
    const poller = await createHttpPoller<
      ContainerAppsPatchesApplyResponse,
      OperationState<ContainerAppsPatchesApplyResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Apply a Container Apps Patch resource with patch name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App the Patch is associated.
   * @param patchName The name of the patch
   * @param options The options parameters.
   */
  async beginApplyAndWait(
    resourceGroupName: string,
    containerAppName: string,
    patchName: string,
    options?: ContainerAppsPatchesApplyOptionalParams,
  ): Promise<ContainerAppsPatchesApplyResponse> {
    const poller = await this.beginApply(
      resourceGroupName,
      containerAppName,
      patchName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * ListByContainerAppNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App the Patch is associated.
   * @param nextLink The nextLink from the previous successful call to the ListByContainerApp method.
   * @param options The options parameters.
   */
  private _listByContainerAppNext(
    resourceGroupName: string,
    containerAppName: string,
    nextLink: string,
    options?: ContainerAppsPatchesListByContainerAppNextOptionalParams,
  ): Promise<ContainerAppsPatchesListByContainerAppNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, containerAppName, nextLink, options },
      listByContainerAppNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByContainerAppOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/patches",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PatchCollection,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.containerAppName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/patches/{patchName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ContainerAppsPatchResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.containerAppName1,
    Parameters.patchName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/patches/{patchName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.ContainerAppsPatchesDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.ContainerAppsPatchesDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.ContainerAppsPatchesDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.ContainerAppsPatchesDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.containerAppName1,
    Parameters.patchName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const skipConfigureOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/patches/{patchName}/skipConfig",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.ContainerAppsPatchesSkipConfigureHeaders,
    },
    201: {
      headersMapper: Mappers.ContainerAppsPatchesSkipConfigureHeaders,
    },
    202: {
      headersMapper: Mappers.ContainerAppsPatchesSkipConfigureHeaders,
    },
    204: {
      headersMapper: Mappers.ContainerAppsPatchesSkipConfigureHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.patchSkipConfig,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.containerAppName1,
    Parameters.patchName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const applyOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/patches/{patchName}/apply",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ContainerAppsPatchResource,
    },
    201: {
      bodyMapper: Mappers.ContainerAppsPatchResource,
    },
    202: {
      bodyMapper: Mappers.ContainerAppsPatchResource,
    },
    204: {
      bodyMapper: Mappers.ContainerAppsPatchResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.containerAppName1,
    Parameters.patchName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByContainerAppNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PatchCollection,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.containerAppName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
