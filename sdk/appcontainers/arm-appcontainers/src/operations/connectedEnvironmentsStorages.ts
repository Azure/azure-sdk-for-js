/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { ConnectedEnvironmentsStorages } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { ContainerAppsAPIClient } from "../containerAppsAPIClient.js";
import { SimplePollerLike, OperationState, createHttpPoller } from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  ConnectedEnvironmentsStoragesListOptionalParams,
  ConnectedEnvironmentsStoragesListResponse,
  ConnectedEnvironmentsStoragesGetOptionalParams,
  ConnectedEnvironmentsStoragesGetResponse,
  ConnectedEnvironmentStorage,
  ConnectedEnvironmentsStoragesCreateOrUpdateOptionalParams,
  ConnectedEnvironmentsStoragesCreateOrUpdateResponse,
  ConnectedEnvironmentsStoragesDeleteOptionalParams,
  ConnectedEnvironmentsStoragesDeleteResponse,
} from "../models/index.js";

/** Class containing ConnectedEnvironmentsStorages operations. */
export class ConnectedEnvironmentsStoragesImpl implements ConnectedEnvironmentsStorages {
  private readonly client: ContainerAppsAPIClient;

  /**
   * Initialize a new instance of the class ConnectedEnvironmentsStorages class.
   * @param client Reference to the service client
   */
  constructor(client: ContainerAppsAPIClient) {
    this.client = client;
  }

  /**
   * Get all storages for a connectedEnvironment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectedEnvironmentName Name of the Environment.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    connectedEnvironmentName: string,
    options?: ConnectedEnvironmentsStoragesListOptionalParams,
  ): Promise<ConnectedEnvironmentsStoragesListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, connectedEnvironmentName, options },
      listOperationSpec,
    );
  }

  /**
   * Get storage for a connectedEnvironment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectedEnvironmentName Name of the Environment.
   * @param storageName Name of the storage.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    connectedEnvironmentName: string,
    storageName: string,
    options?: ConnectedEnvironmentsStoragesGetOptionalParams,
  ): Promise<ConnectedEnvironmentsStoragesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, connectedEnvironmentName, storageName, options },
      getOperationSpec,
    );
  }

  /**
   * Create or update storage for a connectedEnvironment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectedEnvironmentName Name of the Environment.
   * @param storageName Name of the storage.
   * @param storageEnvelope Configuration details of storage.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    connectedEnvironmentName: string,
    storageName: string,
    storageEnvelope: ConnectedEnvironmentStorage,
    options?: ConnectedEnvironmentsStoragesCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ConnectedEnvironmentsStoragesCreateOrUpdateResponse>,
      ConnectedEnvironmentsStoragesCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ConnectedEnvironmentsStoragesCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        connectedEnvironmentName,
        storageName,
        storageEnvelope,
        options,
      },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      ConnectedEnvironmentsStoragesCreateOrUpdateResponse,
      OperationState<ConnectedEnvironmentsStoragesCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create or update storage for a connectedEnvironment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectedEnvironmentName Name of the Environment.
   * @param storageName Name of the storage.
   * @param storageEnvelope Configuration details of storage.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    connectedEnvironmentName: string,
    storageName: string,
    storageEnvelope: ConnectedEnvironmentStorage,
    options?: ConnectedEnvironmentsStoragesCreateOrUpdateOptionalParams,
  ): Promise<ConnectedEnvironmentsStoragesCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      connectedEnvironmentName,
      storageName,
      storageEnvelope,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete storage for a connectedEnvironment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectedEnvironmentName Name of the Environment.
   * @param storageName Name of the storage.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    connectedEnvironmentName: string,
    storageName: string,
    options?: ConnectedEnvironmentsStoragesDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ConnectedEnvironmentsStoragesDeleteResponse>,
      ConnectedEnvironmentsStoragesDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ConnectedEnvironmentsStoragesDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        connectedEnvironmentName,
        storageName,
        options,
      },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      ConnectedEnvironmentsStoragesDeleteResponse,
      OperationState<ConnectedEnvironmentsStoragesDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete storage for a connectedEnvironment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectedEnvironmentName Name of the Environment.
   * @param storageName Name of the storage.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    connectedEnvironmentName: string,
    storageName: string,
    options?: ConnectedEnvironmentsStoragesDeleteOptionalParams,
  ): Promise<ConnectedEnvironmentsStoragesDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      connectedEnvironmentName,
      storageName,
      options,
    );
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/connectedEnvironments/{connectedEnvironmentName}/storages",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectedEnvironmentStoragesCollection,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.connectedEnvironmentName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/connectedEnvironments/{connectedEnvironmentName}/storages/{storageName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectedEnvironmentStorage,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.connectedEnvironmentName,
    Parameters.storageName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/connectedEnvironments/{connectedEnvironmentName}/storages/{storageName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectedEnvironmentStorage,
    },
    201: {
      bodyMapper: Mappers.ConnectedEnvironmentStorage,
    },
    202: {
      bodyMapper: Mappers.ConnectedEnvironmentStorage,
    },
    204: {
      bodyMapper: Mappers.ConnectedEnvironmentStorage,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.storageEnvelope,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.connectedEnvironmentName,
    Parameters.storageName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/connectedEnvironments/{connectedEnvironmentName}/storages/{storageName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.ConnectedEnvironmentsStoragesDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.ConnectedEnvironmentsStoragesDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.ConnectedEnvironmentsStoragesDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.ConnectedEnvironmentsStoragesDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.connectedEnvironmentName,
    Parameters.storageName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
