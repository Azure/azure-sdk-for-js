/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { ContainerAppsLabelHistory } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { ContainerAppsAPIClient } from "../containerAppsAPIClient.js";
import {
  LabelHistory,
  ContainerAppsLabelHistoryListLabelHistoryNextOptionalParams,
  ContainerAppsLabelHistoryListLabelHistoryOptionalParams,
  ContainerAppsLabelHistoryListLabelHistoryResponse,
  ContainerAppsLabelHistoryGetLabelHistoryOptionalParams,
  ContainerAppsLabelHistoryGetLabelHistoryResponse,
  ContainerAppsLabelHistoryDeleteLabelHistoryOptionalParams,
  ContainerAppsLabelHistoryListLabelHistoryNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing ContainerAppsLabelHistory operations. */
export class ContainerAppsLabelHistoryImpl implements ContainerAppsLabelHistory {
  private readonly client: ContainerAppsAPIClient;

  /**
   * Initialize a new instance of the class ContainerAppsLabelHistory class.
   * @param client Reference to the service client
   */
  constructor(client: ContainerAppsAPIClient) {
    this.client = client;
  }

  /**
   * Get the Label History for a given Container App.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App
   * @param options The options parameters.
   */
  public listLabelHistory(
    resourceGroupName: string,
    containerAppName: string,
    options?: ContainerAppsLabelHistoryListLabelHistoryOptionalParams,
  ): PagedAsyncIterableIterator<LabelHistory> {
    const iter = this.listLabelHistoryPagingAll(resourceGroupName, containerAppName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listLabelHistoryPagingPage(
          resourceGroupName,
          containerAppName,
          options,
          settings,
        );
      },
    };
  }

  private async *listLabelHistoryPagingPage(
    resourceGroupName: string,
    containerAppName: string,
    options?: ContainerAppsLabelHistoryListLabelHistoryOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<LabelHistory[]> {
    let result: ContainerAppsLabelHistoryListLabelHistoryResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listLabelHistory(resourceGroupName, containerAppName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listLabelHistoryNext(
        resourceGroupName,
        containerAppName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listLabelHistoryPagingAll(
    resourceGroupName: string,
    containerAppName: string,
    options?: ContainerAppsLabelHistoryListLabelHistoryOptionalParams,
  ): AsyncIterableIterator<LabelHistory> {
    for await (const page of this.listLabelHistoryPagingPage(
      resourceGroupName,
      containerAppName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Get the Label History for a given Container App.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App
   * @param options The options parameters.
   */
  private _listLabelHistory(
    resourceGroupName: string,
    containerAppName: string,
    options?: ContainerAppsLabelHistoryListLabelHistoryOptionalParams,
  ): Promise<ContainerAppsLabelHistoryListLabelHistoryResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, containerAppName, options },
      listLabelHistoryOperationSpec,
    );
  }

  /**
   * Get the history of a label.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App
   * @param labelName Name of the Container App label.
   * @param options The options parameters.
   */
  getLabelHistory(
    resourceGroupName: string,
    containerAppName: string,
    labelName: string,
    options?: ContainerAppsLabelHistoryGetLabelHistoryOptionalParams,
  ): Promise<ContainerAppsLabelHistoryGetLabelHistoryResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, containerAppName, labelName, options },
      getLabelHistoryOperationSpec,
    );
  }

  /**
   * Delete the history of a label.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App
   * @param labelName Name of the Container App label.
   * @param options The options parameters.
   */
  deleteLabelHistory(
    resourceGroupName: string,
    containerAppName: string,
    labelName: string,
    options?: ContainerAppsLabelHistoryDeleteLabelHistoryOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, containerAppName, labelName, options },
      deleteLabelHistoryOperationSpec,
    );
  }

  /**
   * ListLabelHistoryNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App
   * @param nextLink The nextLink from the previous successful call to the ListLabelHistory method.
   * @param options The options parameters.
   */
  private _listLabelHistoryNext(
    resourceGroupName: string,
    containerAppName: string,
    nextLink: string,
    options?: ContainerAppsLabelHistoryListLabelHistoryNextOptionalParams,
  ): Promise<ContainerAppsLabelHistoryListLabelHistoryNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, containerAppName, nextLink, options },
      listLabelHistoryNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listLabelHistoryOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/labelHistory",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LabelHistoryCollection,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.containerAppName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getLabelHistoryOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/labelHistory/{labelName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LabelHistory,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.containerAppName1,
    Parameters.labelName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const deleteLabelHistoryOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/labelHistory/{labelName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.containerAppName1,
    Parameters.labelName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listLabelHistoryNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LabelHistoryCollection,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.containerAppName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
