/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { FunctionsExtension } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ContainerAppsAPIClient } from "../containerAppsAPIClient";
import {
  FunctionsExtensionInvokeFunctionsHostOptionalParams,
  FunctionsExtensionInvokeFunctionsHostResponse,
} from "../models";

/** Class containing FunctionsExtension operations. */
export class FunctionsExtensionImpl implements FunctionsExtension {
  private readonly client: ContainerAppsAPIClient;

  /**
   * Initialize a new instance of the class FunctionsExtension class.
   * @param client Reference to the service client
   */
  constructor(client: ContainerAppsAPIClient) {
    this.client = client;
  }

  /**
   * Proxies a Functions host call to the function app backed by the container app.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App.
   * @param revisionName Name of the Container App Revision, the parent resource.
   * @param functionAppName Name of the Function App, the extension resource.
   * @param options The options parameters.
   */
  invokeFunctionsHost(
    resourceGroupName: string,
    containerAppName: string,
    revisionName: string,
    functionAppName: string,
    options?: FunctionsExtensionInvokeFunctionsHostOptionalParams,
  ): Promise<FunctionsExtensionInvokeFunctionsHostResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        containerAppName,
        revisionName,
        functionAppName,
        options,
      },
      invokeFunctionsHostOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const invokeFunctionsHostOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/revisions/{revisionName}/providers/Microsoft.App/functions/{functionAppName}/invoke",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } },
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.containerAppName1,
    Parameters.revisionName1,
    Parameters.functionAppName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
