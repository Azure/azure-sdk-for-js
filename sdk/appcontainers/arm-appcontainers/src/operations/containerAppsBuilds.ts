/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { ContainerAppsBuilds } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ContainerAppsAPIClient } from "../containerAppsAPIClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  ContainerAppsBuildsGetOptionalParams,
  ContainerAppsBuildsGetResponse,
  ContainerAppsBuildsDeleteOptionalParams,
  ContainerAppsBuildsDeleteResponse,
} from "../models";

/** Class containing ContainerAppsBuilds operations. */
export class ContainerAppsBuildsImpl implements ContainerAppsBuilds {
  private readonly client: ContainerAppsAPIClient;

  /**
   * Initialize a new instance of the class ContainerAppsBuilds class.
   * @param client Reference to the service client
   */
  constructor(client: ContainerAppsAPIClient) {
    this.client = client;
  }

  /**
   * Get a Container Apps Build resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App the Build is associated.
   * @param buildName The name of a build.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    containerAppName: string,
    buildName: string,
    options?: ContainerAppsBuildsGetOptionalParams,
  ): Promise<ContainerAppsBuildsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, containerAppName, buildName, options },
      getOperationSpec,
    );
  }

  /**
   * Delete a Container Apps Build resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App the Build is associated.
   * @param buildName The name of a build.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    containerAppName: string,
    buildName: string,
    options?: ContainerAppsBuildsDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ContainerAppsBuildsDeleteResponse>,
      ContainerAppsBuildsDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ContainerAppsBuildsDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, containerAppName, buildName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      ContainerAppsBuildsDeleteResponse,
      OperationState<ContainerAppsBuildsDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a Container Apps Build resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App the Build is associated.
   * @param buildName The name of a build.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    containerAppName: string,
    buildName: string,
    options?: ContainerAppsBuildsDeleteOptionalParams,
  ): Promise<ContainerAppsBuildsDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      containerAppName,
      buildName,
      options,
    );
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/builds/{buildName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ContainerAppsBuildResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.buildName,
    Parameters.containerAppName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/builds/{buildName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.ContainerAppsBuildsDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.ContainerAppsBuildsDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.ContainerAppsBuildsDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.ContainerAppsBuildsDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.buildName,
    Parameters.containerAppName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
