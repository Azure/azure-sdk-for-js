/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  ContainerAppsPatchResource,
  ContainerAppsPatchesListByContainerAppOptionalParams,
  ContainerAppsPatchesGetOptionalParams,
  ContainerAppsPatchesGetResponse,
  ContainerAppsPatchesDeleteOptionalParams,
  ContainerAppsPatchesDeleteResponse,
  PatchSkipConfig,
  ContainerAppsPatchesSkipConfigureOptionalParams,
  ContainerAppsPatchesSkipConfigureResponse,
  ContainerAppsPatchesApplyOptionalParams,
  ContainerAppsPatchesApplyResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a ContainerAppsPatches. */
export interface ContainerAppsPatches {
  /**
   * List Container Apps Patch resources by ContainerApp.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App the Patch is associated.
   * @param options The options parameters.
   */
  listByContainerApp(
    resourceGroupName: string,
    containerAppName: string,
    options?: ContainerAppsPatchesListByContainerAppOptionalParams,
  ): PagedAsyncIterableIterator<ContainerAppsPatchResource>;
  /**
   * Get details for specific Container Apps Patch by patch name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App the Patch is associated.
   * @param patchName The name of the patch
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    containerAppName: string,
    patchName: string,
    options?: ContainerAppsPatchesGetOptionalParams,
  ): Promise<ContainerAppsPatchesGetResponse>;
  /**
   * Delete specific Container Apps Patch by patch name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App the Patch is associated.
   * @param patchName The name of the patch
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    containerAppName: string,
    patchName: string,
    options?: ContainerAppsPatchesDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ContainerAppsPatchesDeleteResponse>,
      ContainerAppsPatchesDeleteResponse
    >
  >;
  /**
   * Delete specific Container Apps Patch by patch name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App the Patch is associated.
   * @param patchName The name of the patch
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    containerAppName: string,
    patchName: string,
    options?: ContainerAppsPatchesDeleteOptionalParams,
  ): Promise<ContainerAppsPatchesDeleteResponse>;
  /**
   * Configure the Container Apps Patch skip option by patch name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App the Patch is associated.
   * @param patchName The name of the patch
   * @param patchSkipConfig Configure patcher to skip a patch or not.
   * @param options The options parameters.
   */
  beginSkipConfigure(
    resourceGroupName: string,
    containerAppName: string,
    patchName: string,
    patchSkipConfig: PatchSkipConfig,
    options?: ContainerAppsPatchesSkipConfigureOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ContainerAppsPatchesSkipConfigureResponse>,
      ContainerAppsPatchesSkipConfigureResponse
    >
  >;
  /**
   * Configure the Container Apps Patch skip option by patch name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App the Patch is associated.
   * @param patchName The name of the patch
   * @param patchSkipConfig Configure patcher to skip a patch or not.
   * @param options The options parameters.
   */
  beginSkipConfigureAndWait(
    resourceGroupName: string,
    containerAppName: string,
    patchName: string,
    patchSkipConfig: PatchSkipConfig,
    options?: ContainerAppsPatchesSkipConfigureOptionalParams,
  ): Promise<ContainerAppsPatchesSkipConfigureResponse>;
  /**
   * Apply a Container Apps Patch resource with patch name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App the Patch is associated.
   * @param patchName The name of the patch
   * @param options The options parameters.
   */
  beginApply(
    resourceGroupName: string,
    containerAppName: string,
    patchName: string,
    options?: ContainerAppsPatchesApplyOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ContainerAppsPatchesApplyResponse>,
      ContainerAppsPatchesApplyResponse
    >
  >;
  /**
   * Apply a Container Apps Patch resource with patch name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App the Patch is associated.
   * @param patchName The name of the patch
   * @param options The options parameters.
   */
  beginApplyAndWait(
    resourceGroupName: string,
    containerAppName: string,
    patchName: string,
    options?: ContainerAppsPatchesApplyOptionalParams,
  ): Promise<ContainerAppsPatchesApplyResponse>;
}
