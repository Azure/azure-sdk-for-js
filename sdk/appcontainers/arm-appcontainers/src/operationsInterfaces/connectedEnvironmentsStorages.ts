/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  ConnectedEnvironmentsStoragesListOptionalParams,
  ConnectedEnvironmentsStoragesListResponse,
  ConnectedEnvironmentsStoragesGetOptionalParams,
  ConnectedEnvironmentsStoragesGetResponse,
  ConnectedEnvironmentStorage,
  ConnectedEnvironmentsStoragesCreateOrUpdateOptionalParams,
  ConnectedEnvironmentsStoragesCreateOrUpdateResponse,
  ConnectedEnvironmentsStoragesDeleteOptionalParams,
  ConnectedEnvironmentsStoragesDeleteResponse,
} from "../models/index.js";

/** Interface representing a ConnectedEnvironmentsStorages. */
export interface ConnectedEnvironmentsStorages {
  /**
   * Get all storages for a connectedEnvironment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectedEnvironmentName Name of the Environment.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    connectedEnvironmentName: string,
    options?: ConnectedEnvironmentsStoragesListOptionalParams,
  ): Promise<ConnectedEnvironmentsStoragesListResponse>;
  /**
   * Get storage for a connectedEnvironment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectedEnvironmentName Name of the Environment.
   * @param storageName Name of the storage.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    connectedEnvironmentName: string,
    storageName: string,
    options?: ConnectedEnvironmentsStoragesGetOptionalParams,
  ): Promise<ConnectedEnvironmentsStoragesGetResponse>;
  /**
   * Create or update storage for a connectedEnvironment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectedEnvironmentName Name of the Environment.
   * @param storageName Name of the storage.
   * @param storageEnvelope Configuration details of storage.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    connectedEnvironmentName: string,
    storageName: string,
    storageEnvelope: ConnectedEnvironmentStorage,
    options?: ConnectedEnvironmentsStoragesCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ConnectedEnvironmentsStoragesCreateOrUpdateResponse>,
      ConnectedEnvironmentsStoragesCreateOrUpdateResponse
    >
  >;
  /**
   * Create or update storage for a connectedEnvironment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectedEnvironmentName Name of the Environment.
   * @param storageName Name of the storage.
   * @param storageEnvelope Configuration details of storage.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    connectedEnvironmentName: string,
    storageName: string,
    storageEnvelope: ConnectedEnvironmentStorage,
    options?: ConnectedEnvironmentsStoragesCreateOrUpdateOptionalParams,
  ): Promise<ConnectedEnvironmentsStoragesCreateOrUpdateResponse>;
  /**
   * Delete storage for a connectedEnvironment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectedEnvironmentName Name of the Environment.
   * @param storageName Name of the storage.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    connectedEnvironmentName: string,
    storageName: string,
    options?: ConnectedEnvironmentsStoragesDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ConnectedEnvironmentsStoragesDeleteResponse>,
      ConnectedEnvironmentsStoragesDeleteResponse
    >
  >;
  /**
   * Delete storage for a connectedEnvironment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectedEnvironmentName Name of the Environment.
   * @param storageName Name of the storage.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    connectedEnvironmentName: string,
    storageName: string,
    options?: ConnectedEnvironmentsStoragesDeleteOptionalParams,
  ): Promise<ConnectedEnvironmentsStoragesDeleteResponse>;
}
