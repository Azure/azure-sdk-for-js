// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import type { PagedAsyncIterableIterator } from "@azure/core-paging";
import type {
  WorkflowEnvelope,
  LogicAppsListWorkflowsOptionalParams,
  LogicAppsGetOptionalParams,
  LogicAppsGetResponse,
  LogicAppsCreateOrUpdateOptionalParams,
  LogicAppsCreateOrUpdateResponse,
  LogicAppsDeleteOptionalParams,
  LogicAppsGetWorkflowOptionalParams,
  LogicAppsGetWorkflowResponse,
  LogicAppsListWorkflowsConnectionsOptionalParams,
  LogicAppsListWorkflowsConnectionsResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a LogicApps. */
export interface LogicApps {
  /**
   * List the workflows for a logic app.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App.
   * @param logicAppName Name of the Logic App.
   * @param options The options parameters.
   */
  listWorkflows(
    resourceGroupName: string,
    containerAppName: string,
    logicAppName: string,
    options?: LogicAppsListWorkflowsOptionalParams,
  ): PagedAsyncIterableIterator<WorkflowEnvelope>;
  /**
   * Gets a logic app extension resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App.
   * @param logicAppName Name of the Logic App.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    containerAppName: string,
    logicAppName: string,
    options?: LogicAppsGetOptionalParams,
  ): Promise<LogicAppsGetResponse>;
  /**
   * Create or update a Logic App extension resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App.
   * @param logicAppName Name of the Logic App.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    containerAppName: string,
    logicAppName: string,
    options?: LogicAppsCreateOrUpdateOptionalParams,
  ): Promise<LogicAppsCreateOrUpdateResponse>;
  /**
   * Deletes a Logic App extension resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App.
   * @param logicAppName Name of the Logic App.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    containerAppName: string,
    logicAppName: string,
    options?: LogicAppsDeleteOptionalParams,
  ): Promise<void>;
  /**
   * Get workflow information by its name
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App.
   * @param logicAppName Name of the Logic App.
   * @param workflowName Workflow name.
   * @param options The options parameters.
   */
  getWorkflow(
    resourceGroupName: string,
    containerAppName: string,
    logicAppName: string,
    workflowName: string,
    options?: LogicAppsGetWorkflowOptionalParams,
  ): Promise<LogicAppsGetWorkflowResponse>;
  /**
   * Gets logic app's connections.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App.
   * @param logicAppName Name of the Logic App.
   * @param options The options parameters.
   */
  listWorkflowsConnections(
    resourceGroupName: string,
    containerAppName: string,
    logicAppName: string,
    options?: LogicAppsListWorkflowsConnectionsOptionalParams,
  ): Promise<LogicAppsListWorkflowsConnectionsResponse>;
}
