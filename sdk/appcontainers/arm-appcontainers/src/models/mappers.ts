/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const TimeoutPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TimeoutPolicy",
    modelProperties: {
      responseTimeoutInSeconds: {
        serializedName: "responseTimeoutInSeconds",
        type: {
          name: "Number",
        },
      },
      connectionTimeoutInSeconds: {
        serializedName: "connectionTimeoutInSeconds",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const HttpRetryPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HttpRetryPolicy",
    modelProperties: {
      maxRetries: {
        serializedName: "maxRetries",
        type: {
          name: "Number",
        },
      },
      headers: {
        serializedName: "matches.headers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HeaderMatch",
            },
          },
        },
      },
      httpStatusCodes: {
        serializedName: "matches.httpStatusCodes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number",
            },
          },
        },
      },
      errors: {
        serializedName: "matches.errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      initialDelayInMilliseconds: {
        serializedName: "retryBackOff.initialDelayInMilliseconds",
        type: {
          name: "Number",
        },
      },
      maxIntervalInMilliseconds: {
        serializedName: "retryBackOff.maxIntervalInMilliseconds",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const HeaderMatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HeaderMatch",
    modelProperties: {
      header: {
        serializedName: "header",
        type: {
          name: "String",
        },
      },
      exactMatch: {
        serializedName: "match.exactMatch",
        type: {
          name: "String",
        },
      },
      prefixMatch: {
        serializedName: "match.prefixMatch",
        type: {
          name: "String",
        },
      },
      suffixMatch: {
        serializedName: "match.suffixMatch",
        type: {
          name: "String",
        },
      },
      regexMatch: {
        serializedName: "match.regexMatch",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TcpRetryPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TcpRetryPolicy",
    modelProperties: {
      maxConnectAttempts: {
        serializedName: "maxConnectAttempts",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const CircuitBreakerPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CircuitBreakerPolicy",
    modelProperties: {
      consecutiveErrors: {
        serializedName: "consecutiveErrors",
        type: {
          name: "Number",
        },
      },
      intervalInSeconds: {
        serializedName: "intervalInSeconds",
        type: {
          name: "Number",
        },
      },
      maxEjectionPercent: {
        serializedName: "maxEjectionPercent",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const HttpConnectionPool: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HttpConnectionPool",
    modelProperties: {
      http1MaxPendingRequests: {
        serializedName: "http1MaxPendingRequests",
        type: {
          name: "Number",
        },
      },
      http2MaxRequests: {
        serializedName: "http2MaxRequests",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const TcpConnectionPool: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TcpConnectionPool",
    modelProperties: {
      maxConnections: {
        serializedName: "maxConnections",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
    },
  },
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String",
        },
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String",
        },
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime",
        },
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String",
        },
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String",
        },
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const DefaultErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DefaultErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "DefaultErrorResponseError",
        },
      },
    },
  },
};

export const DefaultErrorResponseError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DefaultErrorResponseError",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DefaultErrorResponseErrorDetailsItem",
            },
          },
        },
      },
      innererror: {
        serializedName: "innererror",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DefaultErrorResponseErrorDetailsItem: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "DefaultErrorResponseErrorDetailsItem",
      modelProperties: {
        code: {
          serializedName: "code",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        message: {
          serializedName: "message",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        target: {
          serializedName: "target",
          readOnly: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const AppResiliencyCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AppResiliencyCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AppResiliency",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AuthConfigCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AuthConfigCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AuthConfig",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AuthPlatform: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AuthPlatform",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean",
        },
      },
      runtimeVersion: {
        serializedName: "runtimeVersion",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const GlobalValidation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GlobalValidation",
    modelProperties: {
      unauthenticatedClientAction: {
        serializedName: "unauthenticatedClientAction",
        type: {
          name: "Enum",
          allowedValues: [
            "RedirectToLoginPage",
            "AllowAnonymous",
            "Return401",
            "Return403",
          ],
        },
      },
      redirectToProvider: {
        serializedName: "redirectToProvider",
        type: {
          name: "String",
        },
      },
      excludedPaths: {
        serializedName: "excludedPaths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const IdentityProviders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IdentityProviders",
    modelProperties: {
      azureActiveDirectory: {
        serializedName: "azureActiveDirectory",
        type: {
          name: "Composite",
          className: "AzureActiveDirectory",
        },
      },
      facebook: {
        serializedName: "facebook",
        type: {
          name: "Composite",
          className: "Facebook",
        },
      },
      gitHub: {
        serializedName: "gitHub",
        type: {
          name: "Composite",
          className: "GitHub",
        },
      },
      google: {
        serializedName: "google",
        type: {
          name: "Composite",
          className: "Google",
        },
      },
      twitter: {
        serializedName: "twitter",
        type: {
          name: "Composite",
          className: "Twitter",
        },
      },
      apple: {
        serializedName: "apple",
        type: {
          name: "Composite",
          className: "Apple",
        },
      },
      azureStaticWebApps: {
        serializedName: "azureStaticWebApps",
        type: {
          name: "Composite",
          className: "AzureStaticWebApps",
        },
      },
      customOpenIdConnectProviders: {
        serializedName: "customOpenIdConnectProviders",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "CustomOpenIdConnectProvider",
            },
          },
        },
      },
    },
  },
};

export const AzureActiveDirectory: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureActiveDirectory",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean",
        },
      },
      registration: {
        serializedName: "registration",
        type: {
          name: "Composite",
          className: "AzureActiveDirectoryRegistration",
        },
      },
      login: {
        serializedName: "login",
        type: {
          name: "Composite",
          className: "AzureActiveDirectoryLogin",
        },
      },
      validation: {
        serializedName: "validation",
        type: {
          name: "Composite",
          className: "AzureActiveDirectoryValidation",
        },
      },
      isAutoProvisioned: {
        serializedName: "isAutoProvisioned",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const AzureActiveDirectoryRegistration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureActiveDirectoryRegistration",
    modelProperties: {
      openIdIssuer: {
        serializedName: "openIdIssuer",
        type: {
          name: "String",
        },
      },
      clientId: {
        serializedName: "clientId",
        type: {
          name: "String",
        },
      },
      clientSecretSettingName: {
        serializedName: "clientSecretSettingName",
        type: {
          name: "String",
        },
      },
      clientSecretCertificateThumbprint: {
        serializedName: "clientSecretCertificateThumbprint",
        type: {
          name: "String",
        },
      },
      clientSecretCertificateSubjectAlternativeName: {
        serializedName: "clientSecretCertificateSubjectAlternativeName",
        type: {
          name: "String",
        },
      },
      clientSecretCertificateIssuer: {
        serializedName: "clientSecretCertificateIssuer",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AzureActiveDirectoryLogin: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureActiveDirectoryLogin",
    modelProperties: {
      loginParameters: {
        serializedName: "loginParameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      disableWWWAuthenticate: {
        serializedName: "disableWWWAuthenticate",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const AzureActiveDirectoryValidation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureActiveDirectoryValidation",
    modelProperties: {
      jwtClaimChecks: {
        serializedName: "jwtClaimChecks",
        type: {
          name: "Composite",
          className: "JwtClaimChecks",
        },
      },
      allowedAudiences: {
        serializedName: "allowedAudiences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      defaultAuthorizationPolicy: {
        serializedName: "defaultAuthorizationPolicy",
        type: {
          name: "Composite",
          className: "DefaultAuthorizationPolicy",
        },
      },
    },
  },
};

export const JwtClaimChecks: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JwtClaimChecks",
    modelProperties: {
      allowedGroups: {
        serializedName: "allowedGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      allowedClientApplications: {
        serializedName: "allowedClientApplications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const DefaultAuthorizationPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DefaultAuthorizationPolicy",
    modelProperties: {
      allowedPrincipals: {
        serializedName: "allowedPrincipals",
        type: {
          name: "Composite",
          className: "AllowedPrincipals",
        },
      },
      allowedApplications: {
        serializedName: "allowedApplications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const AllowedPrincipals: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AllowedPrincipals",
    modelProperties: {
      groups: {
        serializedName: "groups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      identities: {
        serializedName: "identities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const Facebook: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Facebook",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean",
        },
      },
      registration: {
        serializedName: "registration",
        type: {
          name: "Composite",
          className: "AppRegistration",
        },
      },
      graphApiVersion: {
        serializedName: "graphApiVersion",
        type: {
          name: "String",
        },
      },
      login: {
        serializedName: "login",
        type: {
          name: "Composite",
          className: "LoginScopes",
        },
      },
    },
  },
};

export const AppRegistration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AppRegistration",
    modelProperties: {
      appId: {
        serializedName: "appId",
        type: {
          name: "String",
        },
      },
      appSecretSettingName: {
        serializedName: "appSecretSettingName",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const LoginScopes: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LoginScopes",
    modelProperties: {
      scopes: {
        serializedName: "scopes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const GitHub: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GitHub",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean",
        },
      },
      registration: {
        serializedName: "registration",
        type: {
          name: "Composite",
          className: "ClientRegistration",
        },
      },
      login: {
        serializedName: "login",
        type: {
          name: "Composite",
          className: "LoginScopes",
        },
      },
    },
  },
};

export const ClientRegistration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClientRegistration",
    modelProperties: {
      clientId: {
        serializedName: "clientId",
        type: {
          name: "String",
        },
      },
      clientSecretSettingName: {
        serializedName: "clientSecretSettingName",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Google: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Google",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean",
        },
      },
      registration: {
        serializedName: "registration",
        type: {
          name: "Composite",
          className: "ClientRegistration",
        },
      },
      login: {
        serializedName: "login",
        type: {
          name: "Composite",
          className: "LoginScopes",
        },
      },
      validation: {
        serializedName: "validation",
        type: {
          name: "Composite",
          className: "AllowedAudiencesValidation",
        },
      },
    },
  },
};

export const AllowedAudiencesValidation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AllowedAudiencesValidation",
    modelProperties: {
      allowedAudiences: {
        serializedName: "allowedAudiences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const Twitter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Twitter",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean",
        },
      },
      registration: {
        serializedName: "registration",
        type: {
          name: "Composite",
          className: "TwitterRegistration",
        },
      },
    },
  },
};

export const TwitterRegistration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TwitterRegistration",
    modelProperties: {
      consumerKey: {
        serializedName: "consumerKey",
        type: {
          name: "String",
        },
      },
      consumerSecretSettingName: {
        serializedName: "consumerSecretSettingName",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Apple: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Apple",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean",
        },
      },
      registration: {
        serializedName: "registration",
        type: {
          name: "Composite",
          className: "AppleRegistration",
        },
      },
      login: {
        serializedName: "login",
        type: {
          name: "Composite",
          className: "LoginScopes",
        },
      },
    },
  },
};

export const AppleRegistration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AppleRegistration",
    modelProperties: {
      clientId: {
        serializedName: "clientId",
        type: {
          name: "String",
        },
      },
      clientSecretSettingName: {
        serializedName: "clientSecretSettingName",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AzureStaticWebApps: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureStaticWebApps",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean",
        },
      },
      registration: {
        serializedName: "registration",
        type: {
          name: "Composite",
          className: "AzureStaticWebAppsRegistration",
        },
      },
    },
  },
};

export const AzureStaticWebAppsRegistration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureStaticWebAppsRegistration",
    modelProperties: {
      clientId: {
        serializedName: "clientId",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CustomOpenIdConnectProvider: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomOpenIdConnectProvider",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean",
        },
      },
      registration: {
        serializedName: "registration",
        type: {
          name: "Composite",
          className: "OpenIdConnectRegistration",
        },
      },
      login: {
        serializedName: "login",
        type: {
          name: "Composite",
          className: "OpenIdConnectLogin",
        },
      },
    },
  },
};

export const OpenIdConnectRegistration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OpenIdConnectRegistration",
    modelProperties: {
      clientId: {
        serializedName: "clientId",
        type: {
          name: "String",
        },
      },
      clientCredential: {
        serializedName: "clientCredential",
        type: {
          name: "Composite",
          className: "OpenIdConnectClientCredential",
        },
      },
      openIdConnectConfiguration: {
        serializedName: "openIdConnectConfiguration",
        type: {
          name: "Composite",
          className: "OpenIdConnectConfig",
        },
      },
    },
  },
};

export const OpenIdConnectClientCredential: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OpenIdConnectClientCredential",
    modelProperties: {
      method: {
        defaultValue: "ClientSecretPost",
        isConstant: true,
        serializedName: "method",
        type: {
          name: "String",
        },
      },
      clientSecretSettingName: {
        serializedName: "clientSecretSettingName",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OpenIdConnectConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OpenIdConnectConfig",
    modelProperties: {
      authorizationEndpoint: {
        serializedName: "authorizationEndpoint",
        type: {
          name: "String",
        },
      },
      tokenEndpoint: {
        serializedName: "tokenEndpoint",
        type: {
          name: "String",
        },
      },
      issuer: {
        serializedName: "issuer",
        type: {
          name: "String",
        },
      },
      certificationUri: {
        serializedName: "certificationUri",
        type: {
          name: "String",
        },
      },
      wellKnownOpenIdConfiguration: {
        serializedName: "wellKnownOpenIdConfiguration",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OpenIdConnectLogin: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OpenIdConnectLogin",
    modelProperties: {
      nameClaimType: {
        serializedName: "nameClaimType",
        type: {
          name: "String",
        },
      },
      scopes: {
        serializedName: "scopes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const Login: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Login",
    modelProperties: {
      routes: {
        serializedName: "routes",
        type: {
          name: "Composite",
          className: "LoginRoutes",
        },
      },
      tokenStore: {
        serializedName: "tokenStore",
        type: {
          name: "Composite",
          className: "TokenStore",
        },
      },
      preserveUrlFragmentsForLogins: {
        serializedName: "preserveUrlFragmentsForLogins",
        type: {
          name: "Boolean",
        },
      },
      allowedExternalRedirectUrls: {
        serializedName: "allowedExternalRedirectUrls",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      cookieExpiration: {
        serializedName: "cookieExpiration",
        type: {
          name: "Composite",
          className: "CookieExpiration",
        },
      },
      nonce: {
        serializedName: "nonce",
        type: {
          name: "Composite",
          className: "Nonce",
        },
      },
    },
  },
};

export const LoginRoutes: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LoginRoutes",
    modelProperties: {
      logoutEndpoint: {
        serializedName: "logoutEndpoint",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TokenStore: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TokenStore",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean",
        },
      },
      tokenRefreshExtensionHours: {
        serializedName: "tokenRefreshExtensionHours",
        type: {
          name: "Number",
        },
      },
      azureBlobStorage: {
        serializedName: "azureBlobStorage",
        type: {
          name: "Composite",
          className: "BlobStorageTokenStore",
        },
      },
    },
  },
};

export const BlobStorageTokenStore: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BlobStorageTokenStore",
    modelProperties: {
      sasUrlSettingName: {
        serializedName: "sasUrlSettingName",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CookieExpiration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CookieExpiration",
    modelProperties: {
      convention: {
        serializedName: "convention",
        type: {
          name: "Enum",
          allowedValues: ["FixedTime", "IdentityProviderDerived"],
        },
      },
      timeToExpiration: {
        serializedName: "timeToExpiration",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Nonce: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Nonce",
    modelProperties: {
      validateNonce: {
        serializedName: "validateNonce",
        type: {
          name: "Boolean",
        },
      },
      nonceExpirationInterval: {
        serializedName: "nonceExpirationInterval",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const HttpSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HttpSettings",
    modelProperties: {
      requireHttps: {
        serializedName: "requireHttps",
        type: {
          name: "Boolean",
        },
      },
      routes: {
        serializedName: "routes",
        type: {
          name: "Composite",
          className: "HttpSettingsRoutes",
        },
      },
      forwardProxy: {
        serializedName: "forwardProxy",
        type: {
          name: "Composite",
          className: "ForwardProxy",
        },
      },
    },
  },
};

export const HttpSettingsRoutes: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HttpSettingsRoutes",
    modelProperties: {
      apiPrefix: {
        serializedName: "apiPrefix",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ForwardProxy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ForwardProxy",
    modelProperties: {
      convention: {
        serializedName: "convention",
        type: {
          name: "Enum",
          allowedValues: ["NoProxy", "Standard", "Custom"],
        },
      },
      customHostHeaderName: {
        serializedName: "customHostHeaderName",
        type: {
          name: "String",
        },
      },
      customProtoHeaderName: {
        serializedName: "customProtoHeaderName",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const EncryptionSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EncryptionSettings",
    modelProperties: {
      containerAppAuthEncryptionSecretName: {
        serializedName: "containerAppAuthEncryptionSecretName",
        type: {
          name: "String",
        },
      },
      containerAppAuthSigningSecretName: {
        serializedName: "containerAppAuthSigningSecretName",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AvailableWorkloadProfilesCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableWorkloadProfilesCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AvailableWorkloadProfile",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AvailableWorkloadProfileProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableWorkloadProfileProperties",
    modelProperties: {
      category: {
        serializedName: "category",
        type: {
          name: "String",
        },
      },
      applicability: {
        serializedName: "applicability",
        type: {
          name: "String",
        },
      },
      cores: {
        serializedName: "cores",
        type: {
          name: "Number",
        },
      },
      memoryGiB: {
        serializedName: "memoryGiB",
        type: {
          name: "Number",
        },
      },
      gpus: {
        serializedName: "gpus",
        type: {
          name: "Number",
        },
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
    },
  },
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo",
            },
          },
        },
      },
    },
  },
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const BillingMeterCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BillingMeterCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BillingMeter",
            },
          },
        },
      },
    },
  },
};

export const BillingMeter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BillingMeter",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "BillingMeterProperties",
        },
      },
    },
  },
};

export const BillingMeterProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BillingMeterProperties",
    modelProperties: {
      category: {
        serializedName: "category",
        type: {
          name: "String",
        },
      },
      meterType: {
        serializedName: "meterType",
        type: {
          name: "String",
        },
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const BuilderCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuilderCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BuilderResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ContainerRegistry: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerRegistry",
    modelProperties: {
      containerRegistryServer: {
        serializedName: "containerRegistryServer",
        required: true,
        type: {
          name: "String",
        },
      },
      identityResourceId: {
        serializedName: "identityResourceId",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ManagedServiceIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedServiceIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String",
        },
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserAssignedIdentity" },
          },
        },
      },
    },
  },
};

export const UserAssignedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
    },
  },
};

export const BuilderResourceUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuilderResourceUpdate",
    modelProperties: {
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity",
        },
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      environmentId: {
        serializedName: "properties.environmentId",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const BuildCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuildCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BuildResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ContainerRegistryWithCustomImage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerRegistryWithCustomImage",
    modelProperties: {
      server: {
        serializedName: "server",
        required: true,
        type: {
          name: "String",
        },
      },
      image: {
        serializedName: "image",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const BuildConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuildConfiguration",
    modelProperties: {
      baseOs: {
        serializedName: "baseOs",
        type: {
          name: "String",
        },
      },
      platform: {
        serializedName: "platform",
        type: {
          name: "String",
        },
      },
      platformVersion: {
        serializedName: "platformVersion",
        type: {
          name: "String",
        },
      },
      environmentVariables: {
        serializedName: "environmentVariables",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnvironmentVariable",
            },
          },
        },
      },
      preBuildSteps: {
        serializedName: "preBuildSteps",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PreBuildStep",
            },
          },
        },
      },
    },
  },
};

export const EnvironmentVariable: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnvironmentVariable",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PreBuildStep: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PreBuildStep",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String",
        },
      },
      scripts: {
        serializedName: "scripts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      httpGet: {
        serializedName: "httpGet",
        type: {
          name: "Composite",
          className: "HttpGet",
        },
      },
    },
  },
};

export const HttpGet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HttpGet",
    modelProperties: {
      url: {
        serializedName: "url",
        required: true,
        type: {
          name: "String",
        },
      },
      fileName: {
        serializedName: "fileName",
        type: {
          name: "String",
        },
      },
      headers: {
        serializedName: "headers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const BuildToken: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuildToken",
    modelProperties: {
      token: {
        serializedName: "token",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      expires: {
        serializedName: "expires",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const ConnectedEnvironmentCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectedEnvironmentCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectedEnvironment",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ExtendedLocation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtendedLocation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CustomDomainConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomDomainConfiguration",
    modelProperties: {
      customDomainVerificationId: {
        serializedName: "customDomainVerificationId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      dnsSuffix: {
        serializedName: "dnsSuffix",
        type: {
          name: "String",
        },
      },
      certificateKeyVaultProperties: {
        serializedName: "certificateKeyVaultProperties",
        type: {
          name: "Composite",
          className: "CertificateKeyVaultProperties",
        },
      },
      certificateValue: {
        serializedName: "certificateValue",
        type: {
          name: "ByteArray",
        },
      },
      certificatePassword: {
        serializedName: "certificatePassword",
        type: {
          name: "String",
        },
      },
      expirationDate: {
        serializedName: "expirationDate",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      thumbprint: {
        serializedName: "thumbprint",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      subjectName: {
        serializedName: "subjectName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CertificateKeyVaultProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CertificateKeyVaultProperties",
    modelProperties: {
      identity: {
        serializedName: "identity",
        type: {
          name: "String",
        },
      },
      keyVaultUrl: {
        serializedName: "keyVaultUrl",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CheckNameAvailabilityRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CheckNameAvailabilityResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityResponse",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        type: {
          name: "Boolean",
        },
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CertificateCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CertificateCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Certificate",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CertificateProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CertificateProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      certificateKeyVaultProperties: {
        serializedName: "certificateKeyVaultProperties",
        type: {
          name: "Composite",
          className: "CertificateKeyVaultProperties",
        },
      },
      password: {
        serializedName: "password",
        type: {
          name: "String",
        },
      },
      subjectName: {
        serializedName: "subjectName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      subjectAlternativeNames: {
        serializedName: "subjectAlternativeNames",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      value: {
        serializedName: "value",
        type: {
          name: "ByteArray",
        },
      },
      issuer: {
        serializedName: "issuer",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      issueDate: {
        serializedName: "issueDate",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      expirationDate: {
        serializedName: "expirationDate",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      thumbprint: {
        serializedName: "thumbprint",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      valid: {
        serializedName: "valid",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      publicKeyHash: {
        serializedName: "publicKeyHash",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      certificateType: {
        serializedName: "certificateType",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CertificatePatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CertificatePatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
    },
  },
};

export const DaprComponentsCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DaprComponentsCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DaprComponent",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Secret: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Secret",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      value: {
        serializedName: "value",
        type: {
          name: "String",
        },
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "String",
        },
      },
      keyVaultUrl: {
        serializedName: "keyVaultUrl",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DaprMetadata: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DaprMetadata",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      value: {
        serializedName: "value",
        type: {
          name: "String",
        },
      },
      secretRef: {
        serializedName: "secretRef",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DaprComponentServiceBinding: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DaprComponentServiceBinding",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      serviceId: {
        serializedName: "serviceId",
        type: {
          name: "String",
        },
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Composite",
          className: "DaprServiceBindMetadata",
        },
      },
    },
  },
};

export const DaprServiceBindMetadata: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DaprServiceBindMetadata",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      value: {
        serializedName: "value",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DaprSecretsCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DaprSecretsCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DaprSecret",
            },
          },
        },
      },
    },
  },
};

export const DaprSecret: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DaprSecret",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ConnectedEnvironmentStoragesCollection: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ConnectedEnvironmentStoragesCollection",
      modelProperties: {
        value: {
          serializedName: "value",
          required: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "ConnectedEnvironmentStorage",
              },
            },
          },
        },
      },
    },
  };

export const ConnectedEnvironmentStorageProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ConnectedEnvironmentStorageProperties",
      modelProperties: {
        azureFile: {
          serializedName: "azureFile",
          type: {
            name: "Composite",
            className: "AzureFileProperties",
          },
        },
        smb: {
          serializedName: "smb",
          type: {
            name: "Composite",
            className: "SmbStorage",
          },
        },
      },
    },
  };

export const AzureFileProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureFileProperties",
    modelProperties: {
      accountName: {
        serializedName: "accountName",
        type: {
          name: "String",
        },
      },
      accountKey: {
        serializedName: "accountKey",
        type: {
          name: "String",
        },
      },
      accessMode: {
        serializedName: "accessMode",
        type: {
          name: "String",
        },
      },
      shareName: {
        serializedName: "shareName",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SmbStorage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SmbStorage",
    modelProperties: {
      host: {
        serializedName: "host",
        type: {
          name: "String",
        },
      },
      shareName: {
        serializedName: "shareName",
        type: {
          name: "String",
        },
      },
      username: {
        serializedName: "username",
        type: {
          name: "String",
        },
      },
      domain: {
        serializedName: "domain",
        type: {
          name: "String",
        },
      },
      password: {
        serializedName: "password",
        type: {
          name: "String",
        },
      },
      accessMode: {
        serializedName: "accessMode",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ContainerAppCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerAppCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContainerApp",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ContainerAppPropertiesPatchingConfiguration: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ContainerAppPropertiesPatchingConfiguration",
      modelProperties: {
        patchingMode: {
          serializedName: "patchingMode",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const Configuration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Configuration",
    modelProperties: {
      secrets: {
        serializedName: "secrets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Secret",
            },
          },
        },
      },
      activeRevisionsMode: {
        defaultValue: "Single",
        serializedName: "activeRevisionsMode",
        type: {
          name: "String",
        },
      },
      ingress: {
        serializedName: "ingress",
        type: {
          name: "Composite",
          className: "Ingress",
        },
      },
      registries: {
        serializedName: "registries",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RegistryCredentials",
            },
          },
        },
      },
      dapr: {
        serializedName: "dapr",
        type: {
          name: "Composite",
          className: "Dapr",
        },
      },
      runtime: {
        serializedName: "runtime",
        type: {
          name: "Composite",
          className: "Runtime",
        },
      },
      maxInactiveRevisions: {
        serializedName: "maxInactiveRevisions",
        type: {
          name: "Number",
        },
      },
      service: {
        serializedName: "service",
        type: {
          name: "Composite",
          className: "Service",
        },
      },
      identitySettings: {
        serializedName: "identitySettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IdentitySettings",
            },
          },
        },
      },
    },
  },
};

export const Ingress: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Ingress",
    modelProperties: {
      fqdn: {
        serializedName: "fqdn",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      external: {
        defaultValue: false,
        serializedName: "external",
        type: {
          name: "Boolean",
        },
      },
      targetPort: {
        serializedName: "targetPort",
        type: {
          name: "Number",
        },
      },
      exposedPort: {
        serializedName: "exposedPort",
        type: {
          name: "Number",
        },
      },
      transport: {
        defaultValue: "auto",
        serializedName: "transport",
        type: {
          name: "String",
        },
      },
      traffic: {
        serializedName: "traffic",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TrafficWeight",
            },
          },
        },
      },
      customDomains: {
        serializedName: "customDomains",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CustomDomain",
            },
          },
        },
      },
      allowInsecure: {
        defaultValue: false,
        serializedName: "allowInsecure",
        type: {
          name: "Boolean",
        },
      },
      ipSecurityRestrictions: {
        serializedName: "ipSecurityRestrictions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpSecurityRestrictionRule",
            },
          },
        },
      },
      stickySessions: {
        serializedName: "stickySessions",
        type: {
          name: "Composite",
          className: "IngressStickySessions",
        },
      },
      clientCertificateMode: {
        serializedName: "clientCertificateMode",
        type: {
          name: "String",
        },
      },
      corsPolicy: {
        serializedName: "corsPolicy",
        type: {
          name: "Composite",
          className: "CorsPolicy",
        },
      },
      additionalPortMappings: {
        serializedName: "additionalPortMappings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IngressPortMapping",
            },
          },
        },
      },
      targetPortHttpScheme: {
        serializedName: "targetPortHttpScheme",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TrafficWeight: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrafficWeight",
    modelProperties: {
      revisionName: {
        serializedName: "revisionName",
        type: {
          name: "String",
        },
      },
      weight: {
        serializedName: "weight",
        type: {
          name: "Number",
        },
      },
      latestRevision: {
        defaultValue: false,
        serializedName: "latestRevision",
        type: {
          name: "Boolean",
        },
      },
      label: {
        serializedName: "label",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CustomDomain: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomDomain",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
      bindingType: {
        serializedName: "bindingType",
        type: {
          name: "String",
        },
      },
      certificateId: {
        serializedName: "certificateId",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const IpSecurityRestrictionRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpSecurityRestrictionRule",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        type: {
          name: "String",
        },
      },
      ipAddressRange: {
        serializedName: "ipAddressRange",
        required: true,
        type: {
          name: "String",
        },
      },
      action: {
        serializedName: "action",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const IngressStickySessions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IngressStickySessions",
    modelProperties: {
      affinity: {
        serializedName: "affinity",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CorsPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CorsPolicy",
    modelProperties: {
      allowedOrigins: {
        serializedName: "allowedOrigins",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      allowedMethods: {
        serializedName: "allowedMethods",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      allowedHeaders: {
        serializedName: "allowedHeaders",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      exposeHeaders: {
        serializedName: "exposeHeaders",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      maxAge: {
        serializedName: "maxAge",
        type: {
          name: "Number",
        },
      },
      allowCredentials: {
        serializedName: "allowCredentials",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const IngressPortMapping: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IngressPortMapping",
    modelProperties: {
      external: {
        serializedName: "external",
        required: true,
        type: {
          name: "Boolean",
        },
      },
      targetPort: {
        serializedName: "targetPort",
        required: true,
        type: {
          name: "Number",
        },
      },
      exposedPort: {
        serializedName: "exposedPort",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const RegistryCredentials: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegistryCredentials",
    modelProperties: {
      server: {
        serializedName: "server",
        type: {
          name: "String",
        },
      },
      username: {
        serializedName: "username",
        type: {
          name: "String",
        },
      },
      passwordSecretRef: {
        serializedName: "passwordSecretRef",
        type: {
          name: "String",
        },
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Dapr: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Dapr",
    modelProperties: {
      enabled: {
        defaultValue: false,
        serializedName: "enabled",
        type: {
          name: "Boolean",
        },
      },
      appId: {
        serializedName: "appId",
        type: {
          name: "String",
        },
      },
      appProtocol: {
        defaultValue: "http",
        serializedName: "appProtocol",
        type: {
          name: "String",
        },
      },
      appPort: {
        serializedName: "appPort",
        type: {
          name: "Number",
        },
      },
      httpReadBufferSize: {
        serializedName: "httpReadBufferSize",
        type: {
          name: "Number",
        },
      },
      httpMaxRequestSize: {
        serializedName: "httpMaxRequestSize",
        type: {
          name: "Number",
        },
      },
      logLevel: {
        serializedName: "logLevel",
        type: {
          name: "String",
        },
      },
      enableApiLogging: {
        serializedName: "enableApiLogging",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const Runtime: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Runtime",
    modelProperties: {
      java: {
        serializedName: "java",
        type: {
          name: "Composite",
          className: "RuntimeJava",
        },
      },
      dotnet: {
        serializedName: "dotnet",
        type: {
          name: "Composite",
          className: "RuntimeDotnet",
        },
      },
    },
  },
};

export const RuntimeJava: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RuntimeJava",
    modelProperties: {
      enableMetrics: {
        serializedName: "enableMetrics",
        type: {
          name: "Boolean",
        },
      },
      javaAgent: {
        serializedName: "javaAgent",
        type: {
          name: "Composite",
          className: "RuntimeJavaAgent",
        },
      },
    },
  },
};

export const RuntimeJavaAgent: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RuntimeJavaAgent",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean",
        },
      },
      logging: {
        serializedName: "logging",
        type: {
          name: "Composite",
          className: "RuntimeJavaAgentLogging",
        },
      },
    },
  },
};

export const RuntimeJavaAgentLogging: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RuntimeJavaAgentLogging",
    modelProperties: {
      loggerSettings: {
        serializedName: "loggerSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LoggerSetting",
            },
          },
        },
      },
    },
  },
};

export const LoggerSetting: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LoggerSetting",
    modelProperties: {
      logger: {
        serializedName: "logger",
        required: true,
        type: {
          name: "String",
        },
      },
      level: {
        serializedName: "level",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const RuntimeDotnet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RuntimeDotnet",
    modelProperties: {
      autoConfigureDataProtection: {
        serializedName: "autoConfigureDataProtection",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const Service: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Service",
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const IdentitySettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IdentitySettings",
    modelProperties: {
      identity: {
        serializedName: "identity",
        required: true,
        type: {
          name: "String",
        },
      },
      lifecycle: {
        defaultValue: "All",
        serializedName: "lifecycle",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Template: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Template",
    modelProperties: {
      revisionSuffix: {
        serializedName: "revisionSuffix",
        type: {
          name: "String",
        },
      },
      terminationGracePeriodSeconds: {
        serializedName: "terminationGracePeriodSeconds",
        type: {
          name: "Number",
        },
      },
      initContainers: {
        serializedName: "initContainers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InitContainer",
            },
          },
        },
      },
      containers: {
        serializedName: "containers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Container",
            },
          },
        },
      },
      scale: {
        serializedName: "scale",
        type: {
          name: "Composite",
          className: "Scale",
        },
      },
      volumes: {
        serializedName: "volumes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Volume",
            },
          },
        },
      },
      serviceBinds: {
        serializedName: "serviceBinds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceBind",
            },
          },
        },
      },
    },
  },
};

export const BaseContainer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BaseContainer",
    modelProperties: {
      image: {
        serializedName: "image",
        type: {
          name: "String",
        },
      },
      imageType: {
        serializedName: "imageType",
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      command: {
        serializedName: "command",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      args: {
        serializedName: "args",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      env: {
        serializedName: "env",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnvironmentVar",
            },
          },
        },
      },
      resources: {
        serializedName: "resources",
        type: {
          name: "Composite",
          className: "ContainerResources",
        },
      },
      volumeMounts: {
        serializedName: "volumeMounts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VolumeMount",
            },
          },
        },
      },
    },
  },
};

export const EnvironmentVar: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnvironmentVar",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      value: {
        serializedName: "value",
        type: {
          name: "String",
        },
      },
      secretRef: {
        serializedName: "secretRef",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ContainerResources: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerResources",
    modelProperties: {
      cpu: {
        serializedName: "cpu",
        type: {
          name: "Number",
        },
      },
      memory: {
        serializedName: "memory",
        type: {
          name: "String",
        },
      },
      ephemeralStorage: {
        serializedName: "ephemeralStorage",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const VolumeMount: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VolumeMount",
    modelProperties: {
      volumeName: {
        serializedName: "volumeName",
        type: {
          name: "String",
        },
      },
      mountPath: {
        serializedName: "mountPath",
        type: {
          name: "String",
        },
      },
      subPath: {
        serializedName: "subPath",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ContainerAppProbe: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerAppProbe",
    modelProperties: {
      failureThreshold: {
        serializedName: "failureThreshold",
        type: {
          name: "Number",
        },
      },
      httpGet: {
        serializedName: "httpGet",
        type: {
          name: "Composite",
          className: "ContainerAppProbeHttpGet",
        },
      },
      initialDelaySeconds: {
        serializedName: "initialDelaySeconds",
        type: {
          name: "Number",
        },
      },
      periodSeconds: {
        serializedName: "periodSeconds",
        type: {
          name: "Number",
        },
      },
      successThreshold: {
        serializedName: "successThreshold",
        type: {
          name: "Number",
        },
      },
      tcpSocket: {
        serializedName: "tcpSocket",
        type: {
          name: "Composite",
          className: "ContainerAppProbeTcpSocket",
        },
      },
      terminationGracePeriodSeconds: {
        serializedName: "terminationGracePeriodSeconds",
        type: {
          name: "Number",
        },
      },
      timeoutSeconds: {
        serializedName: "timeoutSeconds",
        type: {
          name: "Number",
        },
      },
      type: {
        serializedName: "type",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ContainerAppProbeHttpGet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerAppProbeHttpGet",
    modelProperties: {
      host: {
        serializedName: "host",
        type: {
          name: "String",
        },
      },
      httpHeaders: {
        serializedName: "httpHeaders",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContainerAppProbeHttpGetHttpHeadersItem",
            },
          },
        },
      },
      path: {
        serializedName: "path",
        type: {
          name: "String",
        },
      },
      port: {
        serializedName: "port",
        required: true,
        type: {
          name: "Number",
        },
      },
      scheme: {
        serializedName: "scheme",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ContainerAppProbeHttpGetHttpHeadersItem: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ContainerAppProbeHttpGetHttpHeadersItem",
      modelProperties: {
        name: {
          serializedName: "name",
          required: true,
          type: {
            name: "String",
          },
        },
        value: {
          serializedName: "value",
          required: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const ContainerAppProbeTcpSocket: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerAppProbeTcpSocket",
    modelProperties: {
      host: {
        serializedName: "host",
        type: {
          name: "String",
        },
      },
      port: {
        serializedName: "port",
        required: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const Scale: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Scale",
    modelProperties: {
      minReplicas: {
        serializedName: "minReplicas",
        type: {
          name: "Number",
        },
      },
      maxReplicas: {
        defaultValue: 10,
        serializedName: "maxReplicas",
        type: {
          name: "Number",
        },
      },
      cooldownPeriod: {
        serializedName: "cooldownPeriod",
        type: {
          name: "Number",
        },
      },
      pollingInterval: {
        serializedName: "pollingInterval",
        type: {
          name: "Number",
        },
      },
      rules: {
        serializedName: "rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScaleRule",
            },
          },
        },
      },
    },
  },
};

export const ScaleRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScaleRule",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      azureQueue: {
        serializedName: "azureQueue",
        type: {
          name: "Composite",
          className: "QueueScaleRule",
        },
      },
      custom: {
        serializedName: "custom",
        type: {
          name: "Composite",
          className: "CustomScaleRule",
        },
      },
      http: {
        serializedName: "http",
        type: {
          name: "Composite",
          className: "HttpScaleRule",
        },
      },
      tcp: {
        serializedName: "tcp",
        type: {
          name: "Composite",
          className: "TcpScaleRule",
        },
      },
    },
  },
};

export const QueueScaleRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QueueScaleRule",
    modelProperties: {
      accountName: {
        serializedName: "accountName",
        type: {
          name: "String",
        },
      },
      queueName: {
        serializedName: "queueName",
        type: {
          name: "String",
        },
      },
      queueLength: {
        serializedName: "queueLength",
        type: {
          name: "Number",
        },
      },
      auth: {
        serializedName: "auth",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScaleRuleAuth",
            },
          },
        },
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ScaleRuleAuth: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScaleRuleAuth",
    modelProperties: {
      secretRef: {
        serializedName: "secretRef",
        type: {
          name: "String",
        },
      },
      triggerParameter: {
        serializedName: "triggerParameter",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CustomScaleRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomScaleRule",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String",
        },
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      auth: {
        serializedName: "auth",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScaleRuleAuth",
            },
          },
        },
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const HttpScaleRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HttpScaleRule",
    modelProperties: {
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      auth: {
        serializedName: "auth",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScaleRuleAuth",
            },
          },
        },
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TcpScaleRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TcpScaleRule",
    modelProperties: {
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      auth: {
        serializedName: "auth",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScaleRuleAuth",
            },
          },
        },
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Volume: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Volume",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      storageType: {
        serializedName: "storageType",
        type: {
          name: "String",
        },
      },
      storageName: {
        serializedName: "storageName",
        type: {
          name: "String",
        },
      },
      secrets: {
        serializedName: "secrets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SecretVolumeItem",
            },
          },
        },
      },
      mountOptions: {
        serializedName: "mountOptions",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SecretVolumeItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecretVolumeItem",
    modelProperties: {
      secretRef: {
        serializedName: "secretRef",
        type: {
          name: "String",
        },
      },
      path: {
        serializedName: "path",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ServiceBind: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceBind",
    modelProperties: {
      serviceId: {
        serializedName: "serviceId",
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      clientType: {
        serializedName: "clientType",
        type: {
          name: "String",
        },
      },
      customizedKeys: {
        serializedName: "customizedKeys",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
    },
  },
};

export const CustomHostnameAnalysisResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomHostnameAnalysisResult",
    modelProperties: {
      hostName: {
        serializedName: "hostName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      isHostnameAlreadyVerified: {
        serializedName: "isHostnameAlreadyVerified",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      customDomainVerificationTest: {
        serializedName: "customDomainVerificationTest",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Passed", "Failed", "Skipped"],
        },
      },
      customDomainVerificationFailureInfo: {
        serializedName: "customDomainVerificationFailureInfo",
        type: {
          name: "Composite",
          className:
            "CustomHostnameAnalysisResultCustomDomainVerificationFailureInfo",
        },
      },
      hasConflictOnManagedEnvironment: {
        serializedName: "hasConflictOnManagedEnvironment",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      conflictWithEnvironmentCustomDomain: {
        serializedName: "conflictWithEnvironmentCustomDomain",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      conflictingContainerAppResourceId: {
        serializedName: "conflictingContainerAppResourceId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      cNameRecords: {
        serializedName: "cNameRecords",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      txtRecords: {
        serializedName: "txtRecords",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      aRecords: {
        serializedName: "aRecords",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      alternateCNameRecords: {
        serializedName: "alternateCNameRecords",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      alternateTxtRecords: {
        serializedName: "alternateTxtRecords",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const CustomHostnameAnalysisResultCustomDomainVerificationFailureInfo: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className:
        "CustomHostnameAnalysisResultCustomDomainVerificationFailureInfo",
      modelProperties: {
        code: {
          serializedName: "code",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        message: {
          serializedName: "message",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        target: {
          serializedName: "target",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        details: {
          serializedName: "details",
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className:
                  "CustomHostnameAnalysisResultCustomDomainVerificationFailureInfoDetailsItem",
              },
            },
          },
        },
      },
    },
  };

export const CustomHostnameAnalysisResultCustomDomainVerificationFailureInfoDetailsItem: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className:
        "CustomHostnameAnalysisResultCustomDomainVerificationFailureInfoDetailsItem",
      modelProperties: {
        code: {
          serializedName: "code",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        message: {
          serializedName: "message",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        target: {
          serializedName: "target",
          readOnly: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const SecretsCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecretsCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContainerAppSecret",
            },
          },
        },
      },
    },
  },
};

export const ContainerAppSecret: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerAppSecret",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      identity: {
        serializedName: "identity",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      keyVaultUrl: {
        serializedName: "keyVaultUrl",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ContainerAppsBuildCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerAppsBuildCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContainerAppsBuildResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ContainerAppsBuildConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerAppsBuildConfiguration",
    modelProperties: {
      baseOs: {
        serializedName: "baseOs",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      platform: {
        serializedName: "platform",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      platformVersion: {
        serializedName: "platformVersion",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      environmentVariables: {
        serializedName: "environmentVariables",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnvironmentVariable",
            },
          },
        },
      },
      preBuildSteps: {
        serializedName: "preBuildSteps",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PreBuildStep",
            },
          },
        },
      },
    },
  },
};

export const PatchCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PatchCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContainerAppsPatchResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PatchProperties",
    modelProperties: {
      targetEnvironmentId: {
        serializedName: "targetEnvironmentId",
        type: {
          name: "String",
        },
      },
      targetContainerAppId: {
        serializedName: "targetContainerAppId",
        type: {
          name: "String",
        },
      },
      targetRevisionId: {
        serializedName: "targetRevisionId",
        type: {
          name: "String",
        },
      },
      patchApplyStatus: {
        serializedName: "patchApplyStatus",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      createdAt: {
        serializedName: "createdAt",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      patchDetails: {
        serializedName: "patchDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PatchDetails",
            },
          },
        },
      },
    },
  },
};

export const PatchDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PatchDetails",
    modelProperties: {
      targetContainerName: {
        serializedName: "targetContainerName",
        required: true,
        readOnly: true,
        type: {
          name: "String",
        },
      },
      targetImage: {
        serializedName: "targetImage",
        required: true,
        readOnly: true,
        type: {
          name: "String",
        },
      },
      lastDetectionTime: {
        serializedName: "lastDetectionTime",
        required: true,
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      detectionStatus: {
        serializedName: "detectionStatus",
        required: true,
        readOnly: true,
        type: {
          name: "String",
        },
      },
      newImageName: {
        serializedName: "newImageName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      newLayer: {
        serializedName: "newLayer",
        type: {
          name: "Composite",
          className: "PatchDetailsNewLayer",
        },
      },
      oldLayer: {
        serializedName: "oldLayer",
        type: {
          name: "Composite",
          className: "PatchDetailsOldLayer",
        },
      },
      patchType: {
        serializedName: "patchType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PatchDetailsNewLayer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PatchDetailsNewLayer",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      frameworkAndVersion: {
        serializedName: "frameworkAndVersion",
        type: {
          name: "String",
        },
      },
      osAndVersion: {
        serializedName: "osAndVersion",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PatchDetailsOldLayer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PatchDetailsOldLayer",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      frameworkAndVersion: {
        serializedName: "frameworkAndVersion",
        type: {
          name: "String",
        },
      },
      osAndVersion: {
        serializedName: "osAndVersion",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PatchSkipConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PatchSkipConfig",
    modelProperties: {
      skip: {
        serializedName: "skip",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const RevisionCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RevisionCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Revision",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ReplicaContainer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicaContainer",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      containerId: {
        serializedName: "containerId",
        type: {
          name: "String",
        },
      },
      ready: {
        serializedName: "ready",
        type: {
          name: "Boolean",
        },
      },
      started: {
        serializedName: "started",
        type: {
          name: "Boolean",
        },
      },
      restartCount: {
        serializedName: "restartCount",
        type: {
          name: "Number",
        },
      },
      runningState: {
        serializedName: "runningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      runningStateDetails: {
        serializedName: "runningStateDetails",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      logStreamEndpoint: {
        serializedName: "logStreamEndpoint",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      execEndpoint: {
        serializedName: "execEndpoint",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      debugEndpoint: {
        serializedName: "debugEndpoint",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ReplicaCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicaCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Replica",
            },
          },
        },
      },
    },
  },
};

export const DiagnosticsCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiagnosticsCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Diagnostics",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DiagnosticsProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiagnosticsProperties",
    modelProperties: {
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Composite",
          className: "DiagnosticsDefinition",
        },
      },
      dataset: {
        serializedName: "dataset",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiagnosticsDataApiResponse",
            },
          },
        },
      },
      status: {
        serializedName: "status",
        type: {
          name: "Composite",
          className: "DiagnosticsStatus",
        },
      },
      dataProviderMetadata: {
        serializedName: "dataProviderMetadata",
        type: {
          name: "Composite",
          className: "DiagnosticDataProviderMetadata",
        },
      },
    },
  },
};

export const DiagnosticsDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiagnosticsDefinition",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      author: {
        serializedName: "author",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      category: {
        serializedName: "category",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      supportTopicList: {
        serializedName: "supportTopicList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiagnosticSupportTopic",
            },
          },
        },
      },
      analysisTypes: {
        serializedName: "analysisTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      score: {
        serializedName: "score",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const DiagnosticSupportTopic: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiagnosticSupportTopic",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      pesId: {
        serializedName: "pesId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DiagnosticsDataApiResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiagnosticsDataApiResponse",
    modelProperties: {
      table: {
        serializedName: "table",
        type: {
          name: "Composite",
          className: "DiagnosticDataTableResponseObject",
        },
      },
      renderingProperties: {
        serializedName: "renderingProperties",
        type: {
          name: "Composite",
          className: "DiagnosticRendering",
        },
      },
    },
  },
};

export const DiagnosticDataTableResponseObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiagnosticDataTableResponseObject",
    modelProperties: {
      tableName: {
        serializedName: "tableName",
        type: {
          name: "String",
        },
      },
      columns: {
        serializedName: "columns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiagnosticDataTableResponseColumn",
            },
          },
        },
      },
      rows: {
        serializedName: "rows",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Dictionary",
              value: { type: { name: "any" } },
            },
          },
        },
      },
    },
  },
};

export const DiagnosticDataTableResponseColumn: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiagnosticDataTableResponseColumn",
    modelProperties: {
      columnName: {
        serializedName: "columnName",
        type: {
          name: "String",
        },
      },
      dataType: {
        serializedName: "dataType",
        type: {
          name: "String",
        },
      },
      columnType: {
        serializedName: "columnType",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DiagnosticRendering: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiagnosticRendering",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "Number",
        },
      },
      title: {
        serializedName: "title",
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        type: {
          name: "String",
        },
      },
      isVisible: {
        serializedName: "isVisible",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const DiagnosticsStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiagnosticsStatus",
    modelProperties: {
      message: {
        serializedName: "message",
        type: {
          name: "String",
        },
      },
      statusId: {
        serializedName: "statusId",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const DiagnosticDataProviderMetadata: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiagnosticDataProviderMetadata",
    modelProperties: {
      providerName: {
        serializedName: "providerName",
        type: {
          name: "String",
        },
      },
      propertyBag: {
        serializedName: "propertyBag",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiagnosticDataProviderMetadataPropertyBagItem",
            },
          },
        },
      },
    },
  },
};

export const DiagnosticDataProviderMetadataPropertyBagItem: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "DiagnosticDataProviderMetadataPropertyBagItem",
      modelProperties: {
        name: {
          serializedName: "name",
          type: {
            name: "String",
          },
        },
        value: {
          serializedName: "value",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const VnetConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VnetConfiguration",
    modelProperties: {
      internal: {
        serializedName: "internal",
        type: {
          name: "Boolean",
        },
      },
      infrastructureSubnetId: {
        serializedName: "infrastructureSubnetId",
        type: {
          name: "String",
        },
      },
      dockerBridgeCidr: {
        serializedName: "dockerBridgeCidr",
        type: {
          name: "String",
        },
      },
      platformReservedCidr: {
        serializedName: "platformReservedCidr",
        type: {
          name: "String",
        },
      },
      platformReservedDnsIP: {
        serializedName: "platformReservedDnsIP",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AppLogsConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AppLogsConfiguration",
    modelProperties: {
      destination: {
        serializedName: "destination",
        type: {
          name: "String",
        },
      },
      logAnalyticsConfiguration: {
        serializedName: "logAnalyticsConfiguration",
        type: {
          name: "Composite",
          className: "LogAnalyticsConfiguration",
        },
      },
    },
  },
};

export const LogAnalyticsConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LogAnalyticsConfiguration",
    modelProperties: {
      customerId: {
        serializedName: "customerId",
        type: {
          name: "String",
        },
      },
      sharedKey: {
        serializedName: "sharedKey",
        type: {
          name: "String",
        },
      },
      dynamicJsonColumns: {
        serializedName: "dynamicJsonColumns",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const AppInsightsConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AppInsightsConfiguration",
    modelProperties: {
      connectionString: {
        serializedName: "connectionString",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OpenTelemetryConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OpenTelemetryConfiguration",
    modelProperties: {
      destinationsConfiguration: {
        serializedName: "destinationsConfiguration",
        type: {
          name: "Composite",
          className: "DestinationsConfiguration",
        },
      },
      tracesConfiguration: {
        serializedName: "tracesConfiguration",
        type: {
          name: "Composite",
          className: "TracesConfiguration",
        },
      },
      logsConfiguration: {
        serializedName: "logsConfiguration",
        type: {
          name: "Composite",
          className: "LogsConfiguration",
        },
      },
      metricsConfiguration: {
        serializedName: "metricsConfiguration",
        type: {
          name: "Composite",
          className: "MetricsConfiguration",
        },
      },
    },
  },
};

export const DestinationsConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DestinationsConfiguration",
    modelProperties: {
      dataDogConfiguration: {
        serializedName: "dataDogConfiguration",
        type: {
          name: "Composite",
          className: "DataDogConfiguration",
        },
      },
      otlpConfigurations: {
        serializedName: "otlpConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OtlpConfiguration",
            },
          },
        },
      },
    },
  },
};

export const DataDogConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataDogConfiguration",
    modelProperties: {
      site: {
        serializedName: "site",
        type: {
          name: "String",
        },
      },
      key: {
        serializedName: "key",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OtlpConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OtlpConfiguration",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      endpoint: {
        serializedName: "endpoint",
        type: {
          name: "String",
        },
      },
      insecure: {
        serializedName: "insecure",
        type: {
          name: "Boolean",
        },
      },
      headers: {
        serializedName: "headers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Header",
            },
          },
        },
      },
    },
  },
};

export const Header: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Header",
    modelProperties: {
      key: {
        serializedName: "key",
        type: {
          name: "String",
        },
      },
      value: {
        serializedName: "value",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TracesConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TracesConfiguration",
    modelProperties: {
      includeDapr: {
        serializedName: "includeDapr",
        type: {
          name: "Boolean",
        },
      },
      destinations: {
        serializedName: "destinations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const LogsConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LogsConfiguration",
    modelProperties: {
      destinations: {
        serializedName: "destinations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const MetricsConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricsConfiguration",
    modelProperties: {
      includeKeda: {
        serializedName: "includeKeda",
        type: {
          name: "Boolean",
        },
      },
      destinations: {
        serializedName: "destinations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const WorkloadProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkloadProfile",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
      enableFips: {
        defaultValue: false,
        serializedName: "enableFips",
        type: {
          name: "Boolean",
        },
      },
      workloadProfileType: {
        serializedName: "workloadProfileType",
        required: true,
        type: {
          name: "String",
        },
      },
      minimumCount: {
        serializedName: "minimumCount",
        type: {
          name: "Number",
        },
      },
      maximumCount: {
        serializedName: "maximumCount",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const KedaConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KedaConfiguration",
    modelProperties: {
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DaprConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DaprConfiguration",
    modelProperties: {
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ManagedEnvironmentPropertiesPeerAuthentication: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ManagedEnvironmentPropertiesPeerAuthentication",
      modelProperties: {
        mtls: {
          serializedName: "mtls",
          type: {
            name: "Composite",
            className: "Mtls",
          },
        },
      },
    },
  };

export const Mtls: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Mtls",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const ManagedEnvironmentPropertiesPeerTrafficConfiguration: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ManagedEnvironmentPropertiesPeerTrafficConfiguration",
      modelProperties: {
        encryption: {
          serializedName: "encryption",
          type: {
            name: "Composite",
            className:
              "ManagedEnvironmentPropertiesPeerTrafficConfigurationEncryption",
          },
        },
      },
    },
  };

export const ManagedEnvironmentPropertiesPeerTrafficConfigurationEncryption: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className:
        "ManagedEnvironmentPropertiesPeerTrafficConfigurationEncryption",
      modelProperties: {
        enabled: {
          serializedName: "enabled",
          type: {
            name: "Boolean",
          },
        },
      },
    },
  };

export const PrivateEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpoint",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PrivateLinkServiceConnectionState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionState",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        type: {
          name: "String",
        },
      },
      actionsRequired: {
        serializedName: "actionsRequired",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const JobConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobConfiguration",
    modelProperties: {
      secrets: {
        serializedName: "secrets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Secret",
            },
          },
        },
      },
      triggerType: {
        defaultValue: "Manual",
        serializedName: "triggerType",
        required: true,
        type: {
          name: "String",
        },
      },
      replicaTimeout: {
        serializedName: "replicaTimeout",
        required: true,
        type: {
          name: "Number",
        },
      },
      replicaRetryLimit: {
        serializedName: "replicaRetryLimit",
        type: {
          name: "Number",
        },
      },
      manualTriggerConfig: {
        serializedName: "manualTriggerConfig",
        type: {
          name: "Composite",
          className: "JobConfigurationManualTriggerConfig",
        },
      },
      scheduleTriggerConfig: {
        serializedName: "scheduleTriggerConfig",
        type: {
          name: "Composite",
          className: "JobConfigurationScheduleTriggerConfig",
        },
      },
      eventTriggerConfig: {
        serializedName: "eventTriggerConfig",
        type: {
          name: "Composite",
          className: "JobConfigurationEventTriggerConfig",
        },
      },
      registries: {
        serializedName: "registries",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RegistryCredentials",
            },
          },
        },
      },
      identitySettings: {
        serializedName: "identitySettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IdentitySettings",
            },
          },
        },
      },
    },
  },
};

export const JobConfigurationManualTriggerConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobConfigurationManualTriggerConfig",
    modelProperties: {
      replicaCompletionCount: {
        serializedName: "replicaCompletionCount",
        type: {
          name: "Number",
        },
      },
      parallelism: {
        serializedName: "parallelism",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const JobConfigurationScheduleTriggerConfig: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "JobConfigurationScheduleTriggerConfig",
      modelProperties: {
        replicaCompletionCount: {
          serializedName: "replicaCompletionCount",
          type: {
            name: "Number",
          },
        },
        cronExpression: {
          serializedName: "cronExpression",
          required: true,
          type: {
            name: "String",
          },
        },
        parallelism: {
          serializedName: "parallelism",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const JobConfigurationEventTriggerConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobConfigurationEventTriggerConfig",
    modelProperties: {
      replicaCompletionCount: {
        serializedName: "replicaCompletionCount",
        type: {
          name: "Number",
        },
      },
      parallelism: {
        serializedName: "parallelism",
        type: {
          name: "Number",
        },
      },
      scale: {
        serializedName: "scale",
        type: {
          name: "Composite",
          className: "JobScale",
        },
      },
    },
  },
};

export const JobScale: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobScale",
    modelProperties: {
      pollingInterval: {
        serializedName: "pollingInterval",
        type: {
          name: "Number",
        },
      },
      minExecutions: {
        defaultValue: 0,
        serializedName: "minExecutions",
        type: {
          name: "Number",
        },
      },
      maxExecutions: {
        defaultValue: 100,
        serializedName: "maxExecutions",
        type: {
          name: "Number",
        },
      },
      rules: {
        serializedName: "rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobScaleRule",
            },
          },
        },
      },
    },
  },
};

export const JobScaleRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobScaleRule",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        type: {
          name: "String",
        },
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
      auth: {
        serializedName: "auth",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScaleRuleAuth",
            },
          },
        },
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const JobTemplate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobTemplate",
    modelProperties: {
      initContainers: {
        serializedName: "initContainers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InitContainer",
            },
          },
        },
      },
      containers: {
        serializedName: "containers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Container",
            },
          },
        },
      },
      volumes: {
        serializedName: "volumes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Volume",
            },
          },
        },
      },
    },
  },
};

export const DotNetComponentsCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DotNetComponentsCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DotNetComponent",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DotNetComponentConfigurationProperty: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "DotNetComponentConfigurationProperty",
      modelProperties: {
        propertyName: {
          serializedName: "propertyName",
          type: {
            name: "String",
          },
        },
        value: {
          serializedName: "value",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const DotNetComponentServiceBind: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DotNetComponentServiceBind",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      serviceId: {
        serializedName: "serviceId",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AvailableOperations: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableOperations",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationDetail",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDetail",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      isDataAction: {
        serializedName: "isDataAction",
        type: {
          name: "Boolean",
        },
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay",
        },
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String",
        },
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String",
        },
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const JavaComponentsCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JavaComponentsCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JavaComponent",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const JavaComponentProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JavaComponentProperties",
    uberParent: "JavaComponentProperties",
    polymorphicDiscriminator: {
      serializedName: "componentType",
      clientName: "componentType",
    },
    modelProperties: {
      componentType: {
        serializedName: "componentType",
        required: true,
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      configurations: {
        serializedName: "configurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JavaComponentConfigurationProperty",
            },
          },
        },
      },
      scale: {
        serializedName: "scale",
        type: {
          name: "Composite",
          className: "JavaComponentPropertiesScale",
        },
      },
      serviceBinds: {
        serializedName: "serviceBinds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JavaComponentServiceBind",
            },
          },
        },
      },
    },
  },
};

export const JavaComponentConfigurationProperty: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JavaComponentConfigurationProperty",
    modelProperties: {
      propertyName: {
        serializedName: "propertyName",
        type: {
          name: "String",
        },
      },
      value: {
        serializedName: "value",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const JavaComponentPropertiesScale: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JavaComponentPropertiesScale",
    modelProperties: {
      minReplicas: {
        serializedName: "minReplicas",
        type: {
          name: "Number",
        },
      },
      maxReplicas: {
        serializedName: "maxReplicas",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const JavaComponentServiceBind: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JavaComponentServiceBind",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      serviceId: {
        serializedName: "serviceId",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const JobsCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobsCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Job",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const JobPatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobPatchProperties",
    modelProperties: {
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation",
        },
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity",
        },
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "JobPatchPropertiesProperties",
        },
      },
    },
  },
};

export const JobPatchPropertiesProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobPatchPropertiesProperties",
    modelProperties: {
      environmentId: {
        serializedName: "environmentId",
        type: {
          name: "String",
        },
      },
      configuration: {
        serializedName: "configuration",
        type: {
          name: "Composite",
          className: "JobConfiguration",
        },
      },
      template: {
        serializedName: "template",
        type: {
          name: "Composite",
          className: "JobTemplate",
        },
      },
      outboundIpAddresses: {
        serializedName: "outboundIpAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      eventStreamEndpoint: {
        serializedName: "eventStreamEndpoint",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const JobExecutionTemplate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobExecutionTemplate",
    modelProperties: {
      containers: {
        serializedName: "containers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobExecutionContainer",
            },
          },
        },
      },
      initContainers: {
        serializedName: "initContainers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobExecutionContainer",
            },
          },
        },
      },
    },
  },
};

export const JobExecutionContainer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobExecutionContainer",
    modelProperties: {
      image: {
        serializedName: "image",
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      command: {
        serializedName: "command",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      args: {
        serializedName: "args",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      env: {
        serializedName: "env",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnvironmentVar",
            },
          },
        },
      },
      resources: {
        serializedName: "resources",
        type: {
          name: "Composite",
          className: "ContainerResources",
        },
      },
    },
  },
};

export const JobExecutionBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobExecutionBase",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      id: {
        serializedName: "id",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ContainerAppJobExecutions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerAppJobExecutions",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobExecution",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const JobExecution: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobExecution",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      id: {
        serializedName: "id",
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        type: {
          name: "String",
        },
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      startTime: {
        serializedName: "properties.startTime",
        type: {
          name: "DateTime",
        },
      },
      endTime: {
        serializedName: "properties.endTime",
        type: {
          name: "DateTime",
        },
      },
      template: {
        serializedName: "properties.template",
        type: {
          name: "Composite",
          className: "JobExecutionTemplate",
        },
      },
      detailedStatus: {
        serializedName: "properties.detailedStatus",
        type: {
          name: "Composite",
          className: "ExecutionStatus",
        },
      },
    },
  },
};

export const ExecutionStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExecutionStatus",
    modelProperties: {
      replicas: {
        serializedName: "replicas",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReplicaExecutionStatus",
            },
          },
        },
      },
    },
  },
};

export const ReplicaExecutionStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicaExecutionStatus",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      containers: {
        serializedName: "containers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContainerExecutionStatus",
            },
          },
        },
      },
    },
  },
};

export const ContainerExecutionStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerExecutionStatus",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      code: {
        serializedName: "code",
        type: {
          name: "Number",
        },
      },
      additionalInformation: {
        serializedName: "additionalInformation",
        type: {
          name: "String",
        },
      },
      status: {
        serializedName: "status",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const JobSecretsCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobSecretsCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Secret",
            },
          },
        },
      },
    },
  },
};

export const WorkflowEnvelopeCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkflowEnvelopeCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WorkflowEnvelope",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const WorkflowEnvelope: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkflowEnvelope",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "WorkflowEnvelopeProperties",
        },
      },
    },
  },
};

export const WorkflowEnvelopeProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkflowEnvelopeProperties",
    modelProperties: {
      files: {
        serializedName: "files",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
      flowState: {
        serializedName: "flowState",
        type: {
          name: "String",
        },
      },
      health: {
        serializedName: "health",
        type: {
          name: "Composite",
          className: "WorkflowHealth",
        },
      },
    },
  },
};

export const WorkflowHealth: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkflowHealth",
    modelProperties: {
      state: {
        serializedName: "state",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["NotSpecified", "Healthy", "Unhealthy", "Unknown"],
        },
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorEntity",
        },
      },
    },
  },
};

export const ErrorEntity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorEntity",
    modelProperties: {
      extendedCode: {
        serializedName: "extendedCode",
        type: {
          name: "String",
        },
      },
      messageTemplate: {
        serializedName: "messageTemplate",
        type: {
          name: "String",
        },
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      innerErrors: {
        serializedName: "innerErrors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorEntity",
            },
          },
        },
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorEntity",
            },
          },
        },
      },
      target: {
        serializedName: "target",
        type: {
          name: "String",
        },
      },
      code: {
        serializedName: "code",
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const WorkflowArtifacts: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkflowArtifacts",
    modelProperties: {
      appSettings: {
        serializedName: "appSettings",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
      files: {
        serializedName: "files",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
      filesToDelete: {
        serializedName: "filesToDelete",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const ManagedEnvironmentsCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedEnvironmentsCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedEnvironment",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ManagedCertificateProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedCertificateProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      subjectName: {
        serializedName: "subjectName",
        type: {
          name: "String",
        },
      },
      error: {
        serializedName: "error",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      domainControlValidation: {
        serializedName: "domainControlValidation",
        type: {
          name: "String",
        },
      },
      validationToken: {
        serializedName: "validationToken",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ManagedCertificatePatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedCertificatePatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
    },
  },
};

export const ManagedCertificateCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedCertificateCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedCertificate",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const WorkloadProfileStatesCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkloadProfileStatesCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WorkloadProfileStates",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const WorkloadProfileStatesProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkloadProfileStatesProperties",
    modelProperties: {
      minimumCount: {
        serializedName: "minimumCount",
        type: {
          name: "Number",
        },
      },
      maximumCount: {
        serializedName: "maximumCount",
        type: {
          name: "Number",
        },
      },
      currentCount: {
        serializedName: "currentCount",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const PrivateEndpointConnectionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PrivateLinkResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DaprComponentResiliencyPoliciesCollection: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "DaprComponentResiliencyPoliciesCollection",
      modelProperties: {
        value: {
          serializedName: "value",
          required: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "DaprComponentResiliencyPolicy",
              },
            },
          },
        },
        nextLink: {
          serializedName: "nextLink",
          readOnly: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const DaprComponentResiliencyPolicyConfiguration: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "DaprComponentResiliencyPolicyConfiguration",
      modelProperties: {
        httpRetryPolicy: {
          serializedName: "httpRetryPolicy",
          type: {
            name: "Composite",
            className:
              "DaprComponentResiliencyPolicyHttpRetryPolicyConfiguration",
          },
        },
        timeoutPolicy: {
          serializedName: "timeoutPolicy",
          type: {
            name: "Composite",
            className:
              "DaprComponentResiliencyPolicyTimeoutPolicyConfiguration",
          },
        },
        circuitBreakerPolicy: {
          serializedName: "circuitBreakerPolicy",
          type: {
            name: "Composite",
            className:
              "DaprComponentResiliencyPolicyCircuitBreakerPolicyConfiguration",
          },
        },
      },
    },
  };

export const DaprComponentResiliencyPolicyHttpRetryPolicyConfiguration: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "DaprComponentResiliencyPolicyHttpRetryPolicyConfiguration",
      modelProperties: {
        maxRetries: {
          serializedName: "maxRetries",
          type: {
            name: "Number",
          },
        },
        retryBackOff: {
          serializedName: "retryBackOff",
          type: {
            name: "Composite",
            className:
              "DaprComponentResiliencyPolicyHttpRetryBackOffConfiguration",
          },
        },
      },
    },
  };

export const DaprComponentResiliencyPolicyHttpRetryBackOffConfiguration: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "DaprComponentResiliencyPolicyHttpRetryBackOffConfiguration",
      modelProperties: {
        initialDelayInMilliseconds: {
          serializedName: "initialDelayInMilliseconds",
          type: {
            name: "Number",
          },
        },
        maxIntervalInMilliseconds: {
          serializedName: "maxIntervalInMilliseconds",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const DaprComponentResiliencyPolicyTimeoutPolicyConfiguration: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "DaprComponentResiliencyPolicyTimeoutPolicyConfiguration",
      modelProperties: {
        responseTimeoutInSeconds: {
          serializedName: "responseTimeoutInSeconds",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const DaprComponentResiliencyPolicyCircuitBreakerPolicyConfiguration: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className:
        "DaprComponentResiliencyPolicyCircuitBreakerPolicyConfiguration",
      modelProperties: {
        consecutiveErrors: {
          serializedName: "consecutiveErrors",
          type: {
            name: "Number",
          },
        },
        timeoutInSeconds: {
          serializedName: "timeoutInSeconds",
          type: {
            name: "Number",
          },
        },
        intervalInSeconds: {
          serializedName: "intervalInSeconds",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const DaprSubscriptionsCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DaprSubscriptionsCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DaprSubscription",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DaprSubscriptionRoutes: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DaprSubscriptionRoutes",
    modelProperties: {
      rules: {
        serializedName: "rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DaprSubscriptionRouteRule",
            },
          },
        },
      },
      default: {
        serializedName: "default",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DaprSubscriptionRouteRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DaprSubscriptionRouteRule",
    modelProperties: {
      match: {
        serializedName: "match",
        type: {
          name: "String",
        },
      },
      path: {
        serializedName: "path",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DaprSubscriptionBulkSubscribeOptions: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "DaprSubscriptionBulkSubscribeOptions",
      modelProperties: {
        enabled: {
          defaultValue: false,
          serializedName: "enabled",
          type: {
            name: "Boolean",
          },
        },
        maxMessagesCount: {
          serializedName: "maxMessagesCount",
          type: {
            name: "Number",
          },
        },
        maxAwaitDurationMs: {
          serializedName: "maxAwaitDurationMs",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const ManagedEnvironmentStoragesCollection: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ManagedEnvironmentStoragesCollection",
      modelProperties: {
        value: {
          serializedName: "value",
          required: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "ManagedEnvironmentStorage",
              },
            },
          },
        },
      },
    },
  };

export const ManagedEnvironmentStorageProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedEnvironmentStorageProperties",
    modelProperties: {
      azureFile: {
        serializedName: "azureFile",
        type: {
          name: "Composite",
          className: "AzureFileProperties",
        },
      },
      nfsAzureFile: {
        serializedName: "nfsAzureFile",
        type: {
          name: "Composite",
          className: "NfsAzureFileProperties",
        },
      },
    },
  },
};

export const NfsAzureFileProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NfsAzureFileProperties",
    modelProperties: {
      server: {
        serializedName: "server",
        type: {
          name: "String",
        },
      },
      accessMode: {
        serializedName: "accessMode",
        type: {
          name: "String",
        },
      },
      shareName: {
        serializedName: "shareName",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SessionPoolCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SessionPoolCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SessionPool",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ScaleConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScaleConfiguration",
    modelProperties: {
      maxConcurrentSessions: {
        serializedName: "maxConcurrentSessions",
        type: {
          name: "Number",
        },
      },
      readySessionInstances: {
        serializedName: "readySessionInstances",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const SessionPoolSecret: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SessionPoolSecret",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      value: {
        serializedName: "value",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DynamicPoolConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DynamicPoolConfiguration",
    modelProperties: {
      executionType: {
        serializedName: "executionType",
        type: {
          name: "String",
        },
      },
      cooldownPeriodInSeconds: {
        serializedName: "cooldownPeriodInSeconds",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const CustomContainerTemplate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomContainerTemplate",
    modelProperties: {
      registryCredentials: {
        serializedName: "registryCredentials",
        type: {
          name: "Composite",
          className: "SessionRegistryCredentials",
        },
      },
      containers: {
        serializedName: "containers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SessionContainer",
            },
          },
        },
      },
      ingress: {
        serializedName: "ingress",
        type: {
          name: "Composite",
          className: "SessionIngress",
        },
      },
    },
  },
};

export const SessionRegistryCredentials: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SessionRegistryCredentials",
    modelProperties: {
      server: {
        serializedName: "server",
        type: {
          name: "String",
        },
      },
      username: {
        serializedName: "username",
        type: {
          name: "String",
        },
      },
      passwordSecretRef: {
        serializedName: "passwordSecretRef",
        type: {
          name: "String",
        },
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SessionContainer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SessionContainer",
    modelProperties: {
      image: {
        serializedName: "image",
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      command: {
        serializedName: "command",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      args: {
        serializedName: "args",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      env: {
        serializedName: "env",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnvironmentVar",
            },
          },
        },
      },
      resources: {
        serializedName: "resources",
        type: {
          name: "Composite",
          className: "SessionContainerResources",
        },
      },
    },
  },
};

export const SessionContainerResources: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SessionContainerResources",
    modelProperties: {
      cpu: {
        serializedName: "cpu",
        type: {
          name: "Number",
        },
      },
      memory: {
        serializedName: "memory",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SessionIngress: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SessionIngress",
    modelProperties: {
      targetPort: {
        serializedName: "targetPort",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const SessionNetworkConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SessionNetworkConfiguration",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SessionPoolUpdatableProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SessionPoolUpdatableProperties",
    modelProperties: {
      scaleConfiguration: {
        serializedName: "properties.scaleConfiguration",
        type: {
          name: "Composite",
          className: "ScaleConfiguration",
        },
      },
      secrets: {
        serializedName: "properties.secrets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SessionPoolSecret",
            },
          },
        },
      },
      dynamicPoolConfiguration: {
        serializedName: "properties.dynamicPoolConfiguration",
        type: {
          name: "Composite",
          className: "DynamicPoolConfiguration",
        },
      },
      customContainerTemplate: {
        serializedName: "properties.customContainerTemplate",
        type: {
          name: "Composite",
          className: "CustomContainerTemplate",
        },
      },
      sessionNetworkConfiguration: {
        serializedName: "properties.sessionNetworkConfiguration",
        type: {
          name: "Composite",
          className: "SessionNetworkConfiguration",
        },
      },
    },
  },
};

export const SourceControlCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SourceControlCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SourceControl",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const GithubActionConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GithubActionConfiguration",
    modelProperties: {
      registryInfo: {
        serializedName: "registryInfo",
        type: {
          name: "Composite",
          className: "RegistryInfo",
        },
      },
      azureCredentials: {
        serializedName: "azureCredentials",
        type: {
          name: "Composite",
          className: "AzureCredentials",
        },
      },
      contextPath: {
        serializedName: "contextPath",
        type: {
          name: "String",
        },
      },
      dockerfilePath: {
        serializedName: "dockerfilePath",
        type: {
          name: "String",
        },
      },
      githubPersonalAccessToken: {
        serializedName: "githubPersonalAccessToken",
        type: {
          name: "String",
        },
      },
      image: {
        serializedName: "image",
        type: {
          name: "String",
        },
      },
      publishType: {
        serializedName: "publishType",
        type: {
          name: "String",
        },
      },
      os: {
        serializedName: "os",
        type: {
          name: "String",
        },
      },
      runtimeStack: {
        serializedName: "runtimeStack",
        type: {
          name: "String",
        },
      },
      runtimeVersion: {
        serializedName: "runtimeVersion",
        type: {
          name: "String",
        },
      },
      buildEnvironmentVariables: {
        serializedName: "buildEnvironmentVariables",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnvironmentVariable",
            },
          },
        },
      },
    },
  },
};

export const RegistryInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegistryInfo",
    modelProperties: {
      registryUrl: {
        serializedName: "registryUrl",
        type: {
          name: "String",
        },
      },
      registryUserName: {
        serializedName: "registryUserName",
        type: {
          name: "String",
        },
      },
      registryPassword: {
        serializedName: "registryPassword",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AzureCredentials: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureCredentials",
    modelProperties: {
      clientId: {
        serializedName: "clientId",
        type: {
          name: "String",
        },
      },
      clientSecret: {
        serializedName: "clientSecret",
        type: {
          name: "String",
        },
      },
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "String",
        },
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String",
        },
      },
      subscriptionId: {
        serializedName: "subscriptionId",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ListUsagesResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListUsagesResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Usage",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Usage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Usage",
    modelProperties: {
      unit: {
        defaultValue: "Count",
        isConstant: true,
        serializedName: "unit",
        type: {
          name: "String",
        },
      },
      currentValue: {
        serializedName: "currentValue",
        required: true,
        type: {
          name: "Number",
        },
      },
      limit: {
        serializedName: "limit",
        required: true,
        type: {
          name: "Number",
        },
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "UsageName",
        },
      },
    },
  },
};

export const UsageName: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsageName",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "String",
        },
      },
      localizedValue: {
        serializedName: "localizedValue",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ScgRoute: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScgRoute",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String",
        },
      },
      uri: {
        serializedName: "uri",
        required: true,
        type: {
          name: "String",
        },
      },
      predicates: {
        serializedName: "predicates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      filters: {
        serializedName: "filters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      order: {
        serializedName: "order",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const JavaComponentIngress: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JavaComponentIngress",
    modelProperties: {
      fqdn: {
        serializedName: "fqdn",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const JobExecutionNamesCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobExecutionNamesCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobExecutionBase",
            },
          },
        },
      },
    },
  },
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties,
    },
  },
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PrivateEndpointConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...Resource.type.modelProperties,
      groupIds: {
        serializedName: "properties.groupIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      privateEndpoint: {
        serializedName: "properties.privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint",
        },
      },
      privateLinkServiceConnectionState: {
        serializedName: "properties.privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PrivateLinkResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      groupId: {
        serializedName: "properties.groupId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      requiredMembers: {
        serializedName: "properties.requiredMembers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      requiredZoneNames: {
        serializedName: "properties.requiredZoneNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const InitContainer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InitContainer",
    modelProperties: {
      ...BaseContainer.type.modelProperties,
    },
  },
};

export const Container: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Container",
    modelProperties: {
      ...BaseContainer.type.modelProperties,
      probes: {
        serializedName: "probes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContainerAppProbe",
            },
          },
        },
      },
    },
  },
};

export const SpringCloudGatewayComponent: coreClient.CompositeMapper = {
  serializedName: "SpringCloudGateway",
  type: {
    name: "Composite",
    className: "SpringCloudGatewayComponent",
    uberParent: "JavaComponentProperties",
    polymorphicDiscriminator:
      JavaComponentProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...JavaComponentProperties.type.modelProperties,
      ingress: {
        serializedName: "ingress",
        type: {
          name: "Composite",
          className: "JavaComponentIngress",
        },
      },
      springCloudGatewayRoutes: {
        serializedName: "springCloudGatewayRoutes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScgRoute",
            },
          },
        },
      },
    },
  },
};

export const SpringBootAdminComponent: coreClient.CompositeMapper = {
  serializedName: "SpringBootAdmin",
  type: {
    name: "Composite",
    className: "SpringBootAdminComponent",
    uberParent: "JavaComponentProperties",
    polymorphicDiscriminator:
      JavaComponentProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...JavaComponentProperties.type.modelProperties,
      ingress: {
        serializedName: "ingress",
        type: {
          name: "Composite",
          className: "JavaComponentIngress",
        },
      },
    },
  },
};

export const NacosComponent: coreClient.CompositeMapper = {
  serializedName: "Nacos",
  type: {
    name: "Composite",
    className: "NacosComponent",
    uberParent: "JavaComponentProperties",
    polymorphicDiscriminator:
      JavaComponentProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...JavaComponentProperties.type.modelProperties,
      ingress: {
        serializedName: "ingress",
        type: {
          name: "Composite",
          className: "JavaComponentIngress",
        },
      },
    },
  },
};

export const SpringCloudEurekaComponent: coreClient.CompositeMapper = {
  serializedName: "SpringCloudEureka",
  type: {
    name: "Composite",
    className: "SpringCloudEurekaComponent",
    uberParent: "JavaComponentProperties",
    polymorphicDiscriminator:
      JavaComponentProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...JavaComponentProperties.type.modelProperties,
      ingress: {
        serializedName: "ingress",
        type: {
          name: "Composite",
          className: "JavaComponentIngress",
        },
      },
    },
  },
};

export const SpringCloudConfigComponent: coreClient.CompositeMapper = {
  serializedName: "SpringCloudConfig",
  type: {
    name: "Composite",
    className: "SpringCloudConfigComponent",
    uberParent: "JavaComponentProperties",
    polymorphicDiscriminator:
      JavaComponentProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...JavaComponentProperties.type.modelProperties,
    },
  },
};

export const AppResiliency: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AppResiliency",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      timeoutPolicy: {
        serializedName: "properties.timeoutPolicy",
        type: {
          name: "Composite",
          className: "TimeoutPolicy",
        },
      },
      httpRetryPolicy: {
        serializedName: "properties.httpRetryPolicy",
        type: {
          name: "Composite",
          className: "HttpRetryPolicy",
        },
      },
      tcpRetryPolicy: {
        serializedName: "properties.tcpRetryPolicy",
        type: {
          name: "Composite",
          className: "TcpRetryPolicy",
        },
      },
      circuitBreakerPolicy: {
        serializedName: "properties.circuitBreakerPolicy",
        type: {
          name: "Composite",
          className: "CircuitBreakerPolicy",
        },
      },
      httpConnectionPool: {
        serializedName: "properties.httpConnectionPool",
        type: {
          name: "Composite",
          className: "HttpConnectionPool",
        },
      },
      tcpConnectionPool: {
        serializedName: "properties.tcpConnectionPool",
        type: {
          name: "Composite",
          className: "TcpConnectionPool",
        },
      },
    },
  },
};

export const AuthConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AuthConfig",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      platform: {
        serializedName: "properties.platform",
        type: {
          name: "Composite",
          className: "AuthPlatform",
        },
      },
      globalValidation: {
        serializedName: "properties.globalValidation",
        type: {
          name: "Composite",
          className: "GlobalValidation",
        },
      },
      identityProviders: {
        serializedName: "properties.identityProviders",
        type: {
          name: "Composite",
          className: "IdentityProviders",
        },
      },
      login: {
        serializedName: "properties.login",
        type: {
          name: "Composite",
          className: "Login",
        },
      },
      httpSettings: {
        serializedName: "properties.httpSettings",
        type: {
          name: "Composite",
          className: "HttpSettings",
        },
      },
      encryptionSettings: {
        serializedName: "properties.encryptionSettings",
        type: {
          name: "Composite",
          className: "EncryptionSettings",
        },
      },
    },
  },
};

export const AvailableWorkloadProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableWorkloadProfile",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "AvailableWorkloadProfileProperties",
        },
      },
    },
  },
};

export const BuildResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuildResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      buildStatus: {
        serializedName: "properties.buildStatus",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      destinationContainerRegistry: {
        serializedName: "properties.destinationContainerRegistry",
        type: {
          name: "Composite",
          className: "ContainerRegistryWithCustomImage",
        },
      },
      configuration: {
        serializedName: "properties.configuration",
        type: {
          name: "Composite",
          className: "BuildConfiguration",
        },
      },
      uploadEndpoint: {
        serializedName: "properties.uploadEndpoint",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      logStreamEndpoint: {
        serializedName: "properties.logStreamEndpoint",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      tokenEndpoint: {
        serializedName: "properties.tokenEndpoint",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DaprComponent: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DaprComponent",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      componentType: {
        serializedName: "properties.componentType",
        type: {
          name: "String",
        },
      },
      version: {
        serializedName: "properties.version",
        type: {
          name: "String",
        },
      },
      ignoreErrors: {
        defaultValue: false,
        serializedName: "properties.ignoreErrors",
        type: {
          name: "Boolean",
        },
      },
      initTimeout: {
        serializedName: "properties.initTimeout",
        type: {
          name: "String",
        },
      },
      secrets: {
        serializedName: "properties.secrets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Secret",
            },
          },
        },
      },
      secretStoreComponent: {
        serializedName: "properties.secretStoreComponent",
        type: {
          name: "String",
        },
      },
      metadata: {
        serializedName: "properties.metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DaprMetadata",
            },
          },
        },
      },
      scopes: {
        serializedName: "properties.scopes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      serviceComponentBind: {
        serializedName: "properties.serviceComponentBind",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DaprComponentServiceBinding",
            },
          },
        },
      },
    },
  },
};

export const ConnectedEnvironmentStorage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectedEnvironmentStorage",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ConnectedEnvironmentStorageProperties",
        },
      },
    },
  },
};

export const ContainerAppsBuildResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerAppsBuildResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      buildStatus: {
        serializedName: "properties.buildStatus",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      destinationContainerRegistry: {
        serializedName: "properties.destinationContainerRegistry",
        type: {
          name: "Composite",
          className: "ContainerRegistryWithCustomImage",
        },
      },
      configuration: {
        serializedName: "properties.configuration",
        type: {
          name: "Composite",
          className: "ContainerAppsBuildConfiguration",
        },
      },
      logStreamEndpoint: {
        serializedName: "properties.logStreamEndpoint",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ContainerAppsPatchResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerAppsPatchResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PatchProperties",
        },
      },
    },
  },
};

export const Revision: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Revision",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      createdTime: {
        serializedName: "properties.createdTime",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      lastActiveTime: {
        serializedName: "properties.lastActiveTime",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      fqdn: {
        serializedName: "properties.fqdn",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      template: {
        serializedName: "properties.template",
        type: {
          name: "Composite",
          className: "Template",
        },
      },
      active: {
        serializedName: "properties.active",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      replicas: {
        serializedName: "properties.replicas",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      trafficWeight: {
        serializedName: "properties.trafficWeight",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      provisioningError: {
        serializedName: "properties.provisioningError",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      healthState: {
        serializedName: "properties.healthState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      runningState: {
        serializedName: "properties.runningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Replica: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Replica",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      createdTime: {
        serializedName: "properties.createdTime",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      runningState: {
        serializedName: "properties.runningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      runningStateDetails: {
        serializedName: "properties.runningStateDetails",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      containers: {
        serializedName: "properties.containers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReplicaContainer",
            },
          },
        },
      },
      initContainers: {
        serializedName: "properties.initContainers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReplicaContainer",
            },
          },
        },
      },
    },
  },
};

export const Diagnostics: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Diagnostics",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DiagnosticsProperties",
        },
      },
    },
  },
};

export const DotNetComponent: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DotNetComponent",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      componentType: {
        serializedName: "properties.componentType",
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      configurations: {
        serializedName: "properties.configurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DotNetComponentConfigurationProperty",
            },
          },
        },
      },
      serviceBinds: {
        serializedName: "properties.serviceBinds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DotNetComponentServiceBind",
            },
          },
        },
      },
    },
  },
};

export const JavaComponent: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JavaComponent",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "JavaComponentProperties",
        },
      },
    },
  },
};

export const LogicApp: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LogicApp",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const WorkloadProfileStates: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkloadProfileStates",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "WorkloadProfileStatesProperties",
        },
      },
    },
  },
};

export const DaprComponentResiliencyPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DaprComponentResiliencyPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      inboundPolicy: {
        serializedName: "properties.inboundPolicy",
        type: {
          name: "Composite",
          className: "DaprComponentResiliencyPolicyConfiguration",
        },
      },
      outboundPolicy: {
        serializedName: "properties.outboundPolicy",
        type: {
          name: "Composite",
          className: "DaprComponentResiliencyPolicyConfiguration",
        },
      },
    },
  },
};

export const DaprSubscription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DaprSubscription",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      pubsubName: {
        serializedName: "properties.pubsubName",
        type: {
          name: "String",
        },
      },
      topic: {
        serializedName: "properties.topic",
        type: {
          name: "String",
        },
      },
      deadLetterTopic: {
        serializedName: "properties.deadLetterTopic",
        type: {
          name: "String",
        },
      },
      routes: {
        serializedName: "properties.routes",
        type: {
          name: "Composite",
          className: "DaprSubscriptionRoutes",
        },
      },
      scopes: {
        serializedName: "properties.scopes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      metadata: {
        serializedName: "properties.metadata",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      bulkSubscribe: {
        serializedName: "properties.bulkSubscribe",
        type: {
          name: "Composite",
          className: "DaprSubscriptionBulkSubscribeOptions",
        },
      },
    },
  },
};

export const ManagedEnvironmentStorage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedEnvironmentStorage",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ManagedEnvironmentStorageProperties",
        },
      },
    },
  },
};

export const SourceControl: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SourceControl",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      operationState: {
        serializedName: "properties.operationState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      repoUrl: {
        serializedName: "properties.repoUrl",
        type: {
          name: "String",
        },
      },
      branch: {
        serializedName: "properties.branch",
        type: {
          name: "String",
        },
      },
      githubActionConfiguration: {
        serializedName: "properties.githubActionConfiguration",
        type: {
          name: "Composite",
          className: "GithubActionConfiguration",
        },
      },
    },
  },
};

export const BuilderResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuilderResource",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      environmentId: {
        serializedName: "properties.environmentId",
        type: {
          name: "String",
        },
      },
      containerRegistries: {
        serializedName: "properties.containerRegistries",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContainerRegistry",
            },
          },
        },
      },
    },
  },
};

export const ConnectedEnvironment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectedEnvironment",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      deploymentErrors: {
        serializedName: "properties.deploymentErrors",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      defaultDomain: {
        serializedName: "properties.defaultDomain",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      staticIp: {
        serializedName: "properties.staticIp",
        type: {
          name: "String",
        },
      },
      daprAIConnectionString: {
        serializedName: "properties.daprAIConnectionString",
        type: {
          name: "String",
        },
      },
      customDomainConfiguration: {
        serializedName: "properties.customDomainConfiguration",
        type: {
          name: "Composite",
          className: "CustomDomainConfiguration",
        },
      },
    },
  },
};

export const Certificate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Certificate",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "CertificateProperties",
        },
      },
    },
  },
};

export const ContainerApp: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerApp",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation",
        },
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity",
        },
      },
      managedBy: {
        serializedName: "managedBy",
        type: {
          name: "String",
        },
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      deploymentErrors: {
        serializedName: "properties.deploymentErrors",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      managedEnvironmentId: {
        serializedName: "properties.managedEnvironmentId",
        type: {
          name: "String",
        },
      },
      environmentId: {
        serializedName: "properties.environmentId",
        type: {
          name: "String",
        },
      },
      workloadProfileName: {
        serializedName: "properties.workloadProfileName",
        type: {
          name: "String",
        },
      },
      patchingConfiguration: {
        serializedName: "properties.patchingConfiguration",
        type: {
          name: "Composite",
          className: "ContainerAppPropertiesPatchingConfiguration",
        },
      },
      latestRevisionName: {
        serializedName: "properties.latestRevisionName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      latestReadyRevisionName: {
        serializedName: "properties.latestReadyRevisionName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      latestRevisionFqdn: {
        serializedName: "properties.latestRevisionFqdn",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      customDomainVerificationId: {
        serializedName: "properties.customDomainVerificationId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      configuration: {
        serializedName: "properties.configuration",
        type: {
          name: "Composite",
          className: "Configuration",
        },
      },
      template: {
        serializedName: "properties.template",
        type: {
          name: "Composite",
          className: "Template",
        },
      },
      outboundIpAddresses: {
        serializedName: "properties.outboundIpAddresses",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      eventStreamEndpoint: {
        serializedName: "properties.eventStreamEndpoint",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ContainerAppAuthToken: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerAppAuthToken",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      token: {
        serializedName: "properties.token",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      expires: {
        serializedName: "properties.expires",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const ManagedEnvironment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedEnvironment",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      kind: {
        serializedName: "kind",
        type: {
          name: "String",
        },
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      daprAIInstrumentationKey: {
        serializedName: "properties.daprAIInstrumentationKey",
        type: {
          name: "String",
        },
      },
      daprAIConnectionString: {
        serializedName: "properties.daprAIConnectionString",
        type: {
          name: "String",
        },
      },
      vnetConfiguration: {
        serializedName: "properties.vnetConfiguration",
        type: {
          name: "Composite",
          className: "VnetConfiguration",
        },
      },
      deploymentErrors: {
        serializedName: "properties.deploymentErrors",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      defaultDomain: {
        serializedName: "properties.defaultDomain",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      staticIp: {
        serializedName: "properties.staticIp",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      appLogsConfiguration: {
        serializedName: "properties.appLogsConfiguration",
        type: {
          name: "Composite",
          className: "AppLogsConfiguration",
        },
      },
      appInsightsConfiguration: {
        serializedName: "properties.appInsightsConfiguration",
        type: {
          name: "Composite",
          className: "AppInsightsConfiguration",
        },
      },
      openTelemetryConfiguration: {
        serializedName: "properties.openTelemetryConfiguration",
        type: {
          name: "Composite",
          className: "OpenTelemetryConfiguration",
        },
      },
      zoneRedundant: {
        serializedName: "properties.zoneRedundant",
        type: {
          name: "Boolean",
        },
      },
      customDomainConfiguration: {
        serializedName: "properties.customDomainConfiguration",
        type: {
          name: "Composite",
          className: "CustomDomainConfiguration",
        },
      },
      eventStreamEndpoint: {
        serializedName: "properties.eventStreamEndpoint",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      workloadProfiles: {
        serializedName: "properties.workloadProfiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WorkloadProfile",
            },
          },
        },
      },
      kedaConfiguration: {
        serializedName: "properties.kedaConfiguration",
        type: {
          name: "Composite",
          className: "KedaConfiguration",
        },
      },
      daprConfiguration: {
        serializedName: "properties.daprConfiguration",
        type: {
          name: "Composite",
          className: "DaprConfiguration",
        },
      },
      infrastructureResourceGroup: {
        serializedName: "properties.infrastructureResourceGroup",
        type: {
          name: "String",
        },
      },
      peerAuthentication: {
        serializedName: "properties.peerAuthentication",
        type: {
          name: "Composite",
          className: "ManagedEnvironmentPropertiesPeerAuthentication",
        },
      },
      peerTrafficConfiguration: {
        serializedName: "properties.peerTrafficConfiguration",
        type: {
          name: "Composite",
          className: "ManagedEnvironmentPropertiesPeerTrafficConfiguration",
        },
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection",
            },
          },
        },
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Job: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Job",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation",
        },
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      runningState: {
        serializedName: "properties.runningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      environmentId: {
        serializedName: "properties.environmentId",
        type: {
          name: "String",
        },
      },
      workloadProfileName: {
        serializedName: "properties.workloadProfileName",
        type: {
          name: "String",
        },
      },
      configuration: {
        serializedName: "properties.configuration",
        type: {
          name: "Composite",
          className: "JobConfiguration",
        },
      },
      template: {
        serializedName: "properties.template",
        type: {
          name: "Composite",
          className: "JobTemplate",
        },
      },
      outboundIpAddresses: {
        serializedName: "properties.outboundIpAddresses",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      eventStreamEndpoint: {
        serializedName: "properties.eventStreamEndpoint",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ManagedCertificate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedCertificate",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ManagedCertificateProperties",
        },
      },
    },
  },
};

export const EnvironmentAuthToken: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnvironmentAuthToken",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      token: {
        serializedName: "properties.token",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      expires: {
        serializedName: "properties.expires",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const SessionPool: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SessionPool",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      environmentId: {
        serializedName: "properties.environmentId",
        type: {
          name: "String",
        },
      },
      containerType: {
        serializedName: "properties.containerType",
        type: {
          name: "String",
        },
      },
      poolManagementType: {
        serializedName: "properties.poolManagementType",
        type: {
          name: "String",
        },
      },
      nodeCount: {
        serializedName: "properties.nodeCount",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      scaleConfiguration: {
        serializedName: "properties.scaleConfiguration",
        type: {
          name: "Composite",
          className: "ScaleConfiguration",
        },
      },
      secrets: {
        serializedName: "properties.secrets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SessionPoolSecret",
            },
          },
        },
      },
      dynamicPoolConfiguration: {
        serializedName: "properties.dynamicPoolConfiguration",
        type: {
          name: "Composite",
          className: "DynamicPoolConfiguration",
        },
      },
      customContainerTemplate: {
        serializedName: "properties.customContainerTemplate",
        type: {
          name: "Composite",
          className: "CustomContainerTemplate",
        },
      },
      sessionNetworkConfiguration: {
        serializedName: "properties.sessionNetworkConfiguration",
        type: {
          name: "Composite",
          className: "SessionNetworkConfiguration",
        },
      },
      poolManagementEndpoint: {
        serializedName: "properties.poolManagementEndpoint",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const BuildersCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuildersCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const BuildersUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuildersUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const BuildersDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuildersDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const BuildsCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuildsCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const BuildsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuildsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ConnectedEnvironmentsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectedEnvironmentsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ContainerAppsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerAppsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ContainerAppsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerAppsUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ContainerAppsStartHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerAppsStartHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ContainerAppsStopHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerAppsStopHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ContainerAppsBuildsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerAppsBuildsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ContainerAppsPatchesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerAppsPatchesDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ContainerAppsPatchesSkipConfigureHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ContainerAppsPatchesSkipConfigureHeaders",
      modelProperties: {
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const ContainerAppsPatchesApplyHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerAppsPatchesApplyHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const JobsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const JobsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobsUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const JobsStartHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobsStartHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const JobsStopExecutionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobsStopExecutionHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const JobsStopMultipleExecutionsHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobsStopMultipleExecutionsHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const JobsResumeHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobsResumeHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const JobsSuspendHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobsSuspendHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DotNetComponentsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DotNetComponentsUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DotNetComponentsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DotNetComponentsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const JavaComponentsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JavaComponentsUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const JavaComponentsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JavaComponentsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ManagedEnvironmentPrivateEndpointConnectionsDeleteHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ManagedEnvironmentPrivateEndpointConnectionsDeleteHeaders",
      modelProperties: {
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const ContainerAppsSessionPoolsUpdateHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ContainerAppsSessionPoolsUpdateHeaders",
      modelProperties: {
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const ContainerAppsSessionPoolsDeleteHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ContainerAppsSessionPoolsDeleteHeaders",
      modelProperties: {
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export let discriminators = {
  JavaComponentProperties: JavaComponentProperties,
  "JavaComponentProperties.SpringCloudGateway": SpringCloudGatewayComponent,
  "JavaComponentProperties.SpringBootAdmin": SpringBootAdminComponent,
  "JavaComponentProperties.Nacos": NacosComponent,
  "JavaComponentProperties.SpringCloudEureka": SpringCloudEurekaComponent,
  "JavaComponentProperties.SpringCloudConfig": SpringCloudConfigComponent,
};
