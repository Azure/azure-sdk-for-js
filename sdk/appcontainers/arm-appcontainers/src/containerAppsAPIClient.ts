/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import {
  PipelineRequest,
  PipelineResponse,
  SendRequest,
} from "@azure/core-rest-pipeline";
import * as coreAuth from "@azure/core-auth";
import {
  AppResiliencyOperationsImpl,
  ContainerAppsAuthConfigsImpl,
  AvailableWorkloadProfilesImpl,
  BillingMetersImpl,
  BuildersImpl,
  BuildsByBuilderResourceImpl,
  BuildsImpl,
  BuildAuthTokenImpl,
  ConnectedEnvironmentsImpl,
  ConnectedEnvironmentsCertificatesImpl,
  ConnectedEnvironmentsDaprComponentsImpl,
  ConnectedEnvironmentsStoragesImpl,
  ContainerAppsImpl,
  ContainerAppsBuildsByContainerAppImpl,
  ContainerAppsBuildsImpl,
  ContainerAppsPatchesImpl,
  ContainerAppsRevisionsImpl,
  ContainerAppsRevisionReplicasImpl,
  ContainerAppsDiagnosticsImpl,
  ManagedEnvironmentDiagnosticsImpl,
  ManagedEnvironmentsDiagnosticsImpl,
  JobsImpl,
  DotNetComponentsImpl,
  FunctionsExtensionImpl,
  OperationsImpl,
  JavaComponentsImpl,
  JobsExecutionsImpl,
  LogicAppsImpl,
  ManagedEnvironmentsImpl,
  CertificatesImpl,
  ManagedCertificatesImpl,
  NamespacesImpl,
  ManagedEnvironmentPrivateEndpointConnectionsImpl,
  ManagedEnvironmentPrivateLinkResourcesImpl,
  DaprComponentResiliencyPoliciesImpl,
  DaprComponentsImpl,
  DaprSubscriptionsImpl,
  ManagedEnvironmentsStoragesImpl,
  ContainerAppsSessionPoolsImpl,
  ContainerAppsSourceControlsImpl,
  UsagesImpl,
  ManagedEnvironmentUsagesImpl,
} from "./operations";
import {
  AppResiliencyOperations,
  ContainerAppsAuthConfigs,
  AvailableWorkloadProfiles,
  BillingMeters,
  Builders,
  BuildsByBuilderResource,
  Builds,
  BuildAuthToken,
  ConnectedEnvironments,
  ConnectedEnvironmentsCertificates,
  ConnectedEnvironmentsDaprComponents,
  ConnectedEnvironmentsStorages,
  ContainerApps,
  ContainerAppsBuildsByContainerApp,
  ContainerAppsBuilds,
  ContainerAppsPatches,
  ContainerAppsRevisions,
  ContainerAppsRevisionReplicas,
  ContainerAppsDiagnostics,
  ManagedEnvironmentDiagnostics,
  ManagedEnvironmentsDiagnostics,
  Jobs,
  DotNetComponents,
  FunctionsExtension,
  Operations,
  JavaComponents,
  JobsExecutions,
  LogicApps,
  ManagedEnvironments,
  Certificates,
  ManagedCertificates,
  Namespaces,
  ManagedEnvironmentPrivateEndpointConnections,
  ManagedEnvironmentPrivateLinkResources,
  DaprComponentResiliencyPolicies,
  DaprComponents,
  DaprSubscriptions,
  ManagedEnvironmentsStorages,
  ContainerAppsSessionPools,
  ContainerAppsSourceControls,
  Usages,
  ManagedEnvironmentUsages,
} from "./operationsInterfaces";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import {
  ContainerAppsAPIClientOptionalParams,
  JobExecutionOptionalParams,
  JobExecutionResponse,
  GetCustomDomainVerificationIdOptionalParams,
  GetCustomDomainVerificationIdResponse,
} from "./models";

export class ContainerAppsAPIClient extends coreClient.ServiceClient {
  $host: string;
  subscriptionId: string;
  apiVersion: string;

  /**
   * Initializes a new instance of the ContainerAppsAPIClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The ID of the target subscription. The value must be an UUID.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: ContainerAppsAPIClientOptionalParams,
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (subscriptionId === undefined) {
      throw new Error("'subscriptionId' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: ContainerAppsAPIClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials,
    };

    const packageDetails = `azsdk-js-arm-appcontainers/2.2.0-beta.1`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix,
      },
      endpoint:
        options.endpoint ?? options.baseUri ?? "https://management.azure.com",
    };
    super(optionsWithDefaults);

    let bearerTokenAuthenticationPolicyFound: boolean = false;
    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] =
        options.pipeline.getOrderedPolicies();
      bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName,
      );
    }
    if (
      !options ||
      !options.pipeline ||
      options.pipeline.getOrderedPolicies().length == 0 ||
      !bearerTokenAuthenticationPolicyFound
    ) {
      this.pipeline.removePolicy({
        name: coreRestPipeline.bearerTokenAuthenticationPolicyName,
      });
      this.pipeline.addPolicy(
        coreRestPipeline.bearerTokenAuthenticationPolicy({
          credential: credentials,
          scopes:
            optionsWithDefaults.credentialScopes ??
            `${optionsWithDefaults.endpoint}/.default`,
          challengeCallbacks: {
            authorizeRequestOnChallenge:
              coreClient.authorizeRequestOnClaimChallenge,
          },
        }),
      );
    }
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.apiVersion = options.apiVersion || "2024-08-02-preview";
    this.appResiliencyOperations = new AppResiliencyOperationsImpl(this);
    this.containerAppsAuthConfigs = new ContainerAppsAuthConfigsImpl(this);
    this.availableWorkloadProfiles = new AvailableWorkloadProfilesImpl(this);
    this.billingMeters = new BillingMetersImpl(this);
    this.builders = new BuildersImpl(this);
    this.buildsByBuilderResource = new BuildsByBuilderResourceImpl(this);
    this.builds = new BuildsImpl(this);
    this.buildAuthToken = new BuildAuthTokenImpl(this);
    this.connectedEnvironments = new ConnectedEnvironmentsImpl(this);
    this.connectedEnvironmentsCertificates =
      new ConnectedEnvironmentsCertificatesImpl(this);
    this.connectedEnvironmentsDaprComponents =
      new ConnectedEnvironmentsDaprComponentsImpl(this);
    this.connectedEnvironmentsStorages = new ConnectedEnvironmentsStoragesImpl(
      this,
    );
    this.containerApps = new ContainerAppsImpl(this);
    this.containerAppsBuildsByContainerApp =
      new ContainerAppsBuildsByContainerAppImpl(this);
    this.containerAppsBuilds = new ContainerAppsBuildsImpl(this);
    this.containerAppsPatches = new ContainerAppsPatchesImpl(this);
    this.containerAppsRevisions = new ContainerAppsRevisionsImpl(this);
    this.containerAppsRevisionReplicas = new ContainerAppsRevisionReplicasImpl(
      this,
    );
    this.containerAppsDiagnostics = new ContainerAppsDiagnosticsImpl(this);
    this.managedEnvironmentDiagnostics = new ManagedEnvironmentDiagnosticsImpl(
      this,
    );
    this.managedEnvironmentsDiagnostics =
      new ManagedEnvironmentsDiagnosticsImpl(this);
    this.jobs = new JobsImpl(this);
    this.dotNetComponents = new DotNetComponentsImpl(this);
    this.functionsExtension = new FunctionsExtensionImpl(this);
    this.operations = new OperationsImpl(this);
    this.javaComponents = new JavaComponentsImpl(this);
    this.jobsExecutions = new JobsExecutionsImpl(this);
    this.logicApps = new LogicAppsImpl(this);
    this.managedEnvironments = new ManagedEnvironmentsImpl(this);
    this.certificates = new CertificatesImpl(this);
    this.managedCertificates = new ManagedCertificatesImpl(this);
    this.namespaces = new NamespacesImpl(this);
    this.managedEnvironmentPrivateEndpointConnections =
      new ManagedEnvironmentPrivateEndpointConnectionsImpl(this);
    this.managedEnvironmentPrivateLinkResources =
      new ManagedEnvironmentPrivateLinkResourcesImpl(this);
    this.daprComponentResiliencyPolicies =
      new DaprComponentResiliencyPoliciesImpl(this);
    this.daprComponents = new DaprComponentsImpl(this);
    this.daprSubscriptions = new DaprSubscriptionsImpl(this);
    this.managedEnvironmentsStorages = new ManagedEnvironmentsStoragesImpl(
      this,
    );
    this.containerAppsSessionPools = new ContainerAppsSessionPoolsImpl(this);
    this.containerAppsSourceControls = new ContainerAppsSourceControlsImpl(
      this,
    );
    this.usages = new UsagesImpl(this);
    this.managedEnvironmentUsages = new ManagedEnvironmentUsagesImpl(this);
    this.addCustomApiVersionPolicy(options.apiVersion);
  }

  /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
  private addCustomApiVersionPolicy(apiVersion?: string) {
    if (!apiVersion) {
      return;
    }
    const apiVersionPolicy = {
      name: "CustomApiVersionPolicy",
      async sendRequest(
        request: PipelineRequest,
        next: SendRequest,
      ): Promise<PipelineResponse> {
        const param = request.url.split("?");
        if (param.length > 1) {
          const newParams = param[1].split("&").map((item) => {
            if (item.indexOf("api-version") > -1) {
              return "api-version=" + apiVersion;
            } else {
              return item;
            }
          });
          request.url = param[0] + "?" + newParams.join("&");
        }
        return next(request);
      },
    };
    this.pipeline.addPolicy(apiVersionPolicy);
  }

  /**
   * Get details of a single job execution
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param jobName Job Name
   * @param jobExecutionName Job execution name.
   * @param options The options parameters.
   */
  jobExecution(
    resourceGroupName: string,
    jobName: string,
    jobExecutionName: string,
    options?: JobExecutionOptionalParams,
  ): Promise<JobExecutionResponse> {
    return this.sendOperationRequest(
      { resourceGroupName, jobName, jobExecutionName, options },
      jobExecutionOperationSpec,
    );
  }

  /**
   * Get the verification id of a subscription used for verifying custom domains
   * @param options The options parameters.
   */
  getCustomDomainVerificationId(
    options?: GetCustomDomainVerificationIdOptionalParams,
  ): Promise<GetCustomDomainVerificationIdResponse> {
    return this.sendOperationRequest(
      { options },
      getCustomDomainVerificationIdOperationSpec,
    );
  }

  appResiliencyOperations: AppResiliencyOperations;
  containerAppsAuthConfigs: ContainerAppsAuthConfigs;
  availableWorkloadProfiles: AvailableWorkloadProfiles;
  billingMeters: BillingMeters;
  builders: Builders;
  buildsByBuilderResource: BuildsByBuilderResource;
  builds: Builds;
  buildAuthToken: BuildAuthToken;
  connectedEnvironments: ConnectedEnvironments;
  connectedEnvironmentsCertificates: ConnectedEnvironmentsCertificates;
  connectedEnvironmentsDaprComponents: ConnectedEnvironmentsDaprComponents;
  connectedEnvironmentsStorages: ConnectedEnvironmentsStorages;
  containerApps: ContainerApps;
  containerAppsBuildsByContainerApp: ContainerAppsBuildsByContainerApp;
  containerAppsBuilds: ContainerAppsBuilds;
  containerAppsPatches: ContainerAppsPatches;
  containerAppsRevisions: ContainerAppsRevisions;
  containerAppsRevisionReplicas: ContainerAppsRevisionReplicas;
  containerAppsDiagnostics: ContainerAppsDiagnostics;
  managedEnvironmentDiagnostics: ManagedEnvironmentDiagnostics;
  managedEnvironmentsDiagnostics: ManagedEnvironmentsDiagnostics;
  jobs: Jobs;
  dotNetComponents: DotNetComponents;
  functionsExtension: FunctionsExtension;
  operations: Operations;
  javaComponents: JavaComponents;
  jobsExecutions: JobsExecutions;
  logicApps: LogicApps;
  managedEnvironments: ManagedEnvironments;
  certificates: Certificates;
  managedCertificates: ManagedCertificates;
  namespaces: Namespaces;
  managedEnvironmentPrivateEndpointConnections: ManagedEnvironmentPrivateEndpointConnections;
  managedEnvironmentPrivateLinkResources: ManagedEnvironmentPrivateLinkResources;
  daprComponentResiliencyPolicies: DaprComponentResiliencyPolicies;
  daprComponents: DaprComponents;
  daprSubscriptions: DaprSubscriptions;
  managedEnvironmentsStorages: ManagedEnvironmentsStorages;
  containerAppsSessionPools: ContainerAppsSessionPools;
  containerAppsSourceControls: ContainerAppsSourceControls;
  usages: Usages;
  managedEnvironmentUsages: ManagedEnvironmentUsages;
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const jobExecutionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/jobs/{jobName}/executions/{jobExecutionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobExecution,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobName,
    Parameters.jobExecutionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getCustomDomainVerificationIdOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.App/getCustomDomainVerificationId",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } },
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
