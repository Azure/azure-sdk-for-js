{"version":3,"file":"getSupportedFormatsTest.spec.js","sourceRoot":"","sources":["getSupportedFormatsTest.spec.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AAGlC,+BAA8B;AAC9B,mCAAoE;AACpE,2DAAwF;AAGxF,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;IACzC,IAAI,QAAkB,CAAC;IACvB,IAAI,MAAiC,CAAC;IAEtC,UAAU,CAAC,KAAK;QACd,QAAQ,GAAG,MAAM,IAAA,8BAAa,EAAC,IAAI,CAAC,CAAC;QACrC,MAAM,GAAG,MAAM,IAAA,gDAA+B,EAAC,EAAE,QAAQ,EAAE,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,KAAK;QACb,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;IACxB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;QAC3B,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,GAAG,EAAE,CAAC;QAC9D,aAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAErC,IAAI,IAAA,kBAAY,EAAC,QAAQ,CAAC,EAAE,CAAC;YAC3B,MAAM,QAAQ,CAAC,IAAI,CAAC;QACtB,CAAC;QAED,MAAM,eAAe,GAAG,QAAQ,CAAC,IAAI,CAAC;QACtC,eAAe,CAAC,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE;YAC7C,aAAM,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC;YAC9C,aAAM,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,KAAK,IAAI,CAAC,CAAC;YACpD,aAAM,CAAC,MAAM,CAAC,cAAc,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;IAEL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Recorder } from \"@azure-tools/test-recorder\";\nimport { assert } from \"chai\";\nimport { DocumentTranslationClient, isUnexpected } from \"../../src\";\nimport { createDocumentTranslationClient, startRecorder } from \"./utils/recordedClient\";\nimport { Context } from \"mocha\";\n\ndescribe(\"GetSupportedFormats tests\", () => {\n  let recorder: Recorder;\n  let client: DocumentTranslationClient;\n\n  beforeEach(async function (this: Context) {\n    recorder = await startRecorder(this);\n    client = await createDocumentTranslationClient({ recorder });\n  });\n\n  afterEach(async function () {\n    await recorder.stop();\n  });\n\n  it(\"all formats\", async () => {\n    const response = await client.path(\"/document/formats\").get();\n    assert.equal(response.status, \"200\");\n\n    if (isUnexpected(response)) {\n      throw response.body;\n    }\n\n    const fileFormatTypes = response.body;\n    fileFormatTypes.value.forEach(fileFormatType => {\n      assert.isTrue(fileFormatType.format !== null);\n      assert.isTrue(fileFormatType.contentTypes !== null);\n      assert.isTrue(fileFormatType.fileExtensions !== null);\n    });\n    \n  });\n});\n"]}