{"version":3,"file":"recordedClient.js","sourceRoot":"","sources":["recordedClient.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;;AAGlC,8DAOoC;AAGpC,+GAAkE;AAElE,MAAM,mBAAmB,GAA2B;IAClD,4BAA4B,EAAE,YAAY;IAC1C,6BAA6B,EAAE,uEAAuE;IACtG,iCAAiC,EAAE,iBAAiB;IACpD,sCAAsC,EAAE,+GAA+G;CACxJ,CAAC;AAEF,MAAM,gBAAgB,GAAyB;IAC7C,mBAAmB;CACpB,CAAC;AAEK,KAAK,UAAU,aAAa,CAAC,OAAgB;IAClD,MAAM,QAAQ,GAAG,IAAI,wBAAQ,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IACnD,MAAM,QAAQ,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;IACvC,OAAO,QAAQ,CAAC;AAClB,CAAC;AAJD,sCAIC;AAEM,KAAK,UAAU,+BAA+B,CAAC,OAGrD;;IACC,MAAM,EAAE,QAAQ,EAAE,aAAa,GAAG,EAAE,EAAE,GAAG,OAAO,CAAC;IACjD,MAAM,cAAc,GAAG,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC;IACjG,MAAM,QAAQ,GAAG,MAAA,mBAAG,CAAC,6BAA6B,mCAAI,EAAE,CAAA;IACxD,MAAM,WAAW,GAAG,EAAE,GAAG,EAAE,MAAA,mBAAG,CAAC,4BAA4B,mCAAI,EAAE,EAAE,CAAC;IAEpE,MAAM,MAAM,GAAG,IAAA,mCAAY,EAAC,QAAQ,EAAE,WAAW,EAAE,cAAc,CAAC,CAAC;IACnE,OAAO,MAAM,CAAC;AAChB,CAAC;AAXD,0EAWC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Context } from \"mocha\";\nimport {\n  Recorder,\n  RecorderStartOptions,\n  //SanitizerOptions,\n  //isPlaybackMode,\n  //assertEnvironmentVariable,\n  env,\n} from \"@azure-tools/test-recorder\";\nimport { ClientOptions } from \"@azure-rest/core-client\";\nimport { DocumentTranslationClient } from \"../../../src\";\nimport createClient from \"../../../src/documentTranslationClient\";\n\nconst envSetupForPlayback: Record<string, string> = {\n  DOCUMENT_TRANSLATION_API_KEY: \"fakeApiKey\",\n  DOCUMENT_TRANSLATION_ENDPOINT: \"https://fakeEndpoint-doctranslation.cognitive.microsofttranslator.com\",\n  DOCUMENT_TRANSLATION_STORAGE_NAME: \"fakeStorageName\",\n  DOCUMENT_TRANSLATION_CONNECTION_STRING: \"DefaultEndpointsProtocol=https;AccountName=fakeStorageName;AccountKey=fakeKey;EndpointSuffix=core.windows.net\"\n};\n\nconst recorderEnvSetup: RecorderStartOptions = {\n  envSetupForPlayback,\n};\n\nexport async function startRecorder(context: Context): Promise<Recorder> {\n  const recorder = new Recorder(context.currentTest);\n  await recorder.start(recorderEnvSetup);\n  return recorder;\n}\n\nexport async function createDocumentTranslationClient(options: {\n  recorder?: Recorder;\n  clientOptions?: ClientOptions;\n}): Promise<DocumentTranslationClient> {\n  const { recorder, clientOptions = {} } = options;\n  const updatedOptions = recorder ? recorder.configureClientOptions(clientOptions) : clientOptions;\n  const endpoint = env.DOCUMENT_TRANSLATION_ENDPOINT ?? \"\"\n  const credentials = { key: env.DOCUMENT_TRANSLATION_API_KEY ?? \"\" };\n\n  const client = createClient(endpoint, credentials, updatedOptions);\n  return client;\n}"]}