{"version":3,"file":"models.js","sourceRoot":"","sources":["models.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/** Document Translate Request Content */\nexport interface DocumentTranslateContent {\n  /**\n   * Document to be translated in the form\n   *\n   * NOTE: The following type 'File' is part of WebAPI and available since Node 20. If your Node version is lower than Node 20.\n   * You could leverage our helpers 'createFile' or 'createFileFromStream' to create a File object. They could help you specify filename, type, and others.\n   */\n  document:\n    | string\n    | Uint8Array\n    | ReadableStream<Uint8Array>\n    | NodeJS.ReadableStream\n    | File;\n  /**\n   * Glossary-translation memory will be used during translation in the form.\n   *\n   * NOTE: The following type 'File' is part of WebAPI and available since Node 20. If your Node version is lower than Node 20.\n   * You could leverage our helpers 'createFile' or 'createFileFromStream' to create a File object. They could help you specify filename, type, and others.\n   */\n  glossary?: (\n    | string\n    | Uint8Array\n    | ReadableStream<Uint8Array>\n    | NodeJS.ReadableStream\n    | File\n  )[];\n}\n\n/** Translation job submission batch request */\nexport interface StartTranslationDetails {\n  /** The input list of documents or folders containing documents */\n  inputs: Array<BatchRequest>;\n}\n\n/** Definition for the input batch translation request */\nexport interface BatchRequest {\n  /** Source of the input documents */\n  source: SourceInput;\n  /** Location of the destination for the output */\n  targets: Array<TargetInput>;\n  /** Storage type of the input documents source string */\n  storageType?: StorageInputType;\n}\n\n/** Source of the input documents */\nexport interface SourceInput {\n  /** Location of the folder / container or single file with your documents */\n  sourceUrl: string;\n  /** Document filter */\n  filter?: DocumentFilter;\n  /**\n   * Language code\n   * If none is specified, we will perform auto detect on the document\n   */\n  language?: string;\n  /** Storage Source */\n  storageSource?: StorageSource;\n}\n\n/** Document filter */\nexport interface DocumentFilter {\n  /**\n   * A case-sensitive prefix string to filter documents in the source path for\n   * translation.\n   * For example, when using a Azure storage blob Uri, use the prefix\n   * to restrict sub folders for translation.\n   */\n  prefix?: string;\n  /**\n   * A case-sensitive suffix string to filter documents in the source path for\n   * translation.\n   * This is most often use for file extensions\n   */\n  suffix?: string;\n}\n\n/** Destination for the finished translated documents */\nexport interface TargetInput {\n  /** Location of the folder / container with your documents */\n  targetUrl: string;\n  /** Category / custom system for translation request */\n  category?: string;\n  /** Target Language */\n  language: string;\n  /** List of Glossary */\n  glossaries?: Array<Glossary>;\n  /** Storage Source */\n  storageSource?: StorageSource;\n}\n\n/** Glossary / translation memory for the request */\nexport interface Glossary {\n  /**\n   * Location of the glossary.\n   * We will use the file extension to extract the\n   * formatting if the format parameter is not supplied.\n   *\n   * If the translation\n   * language pair is not present in the glossary, it will not be applied\n   */\n  glossaryUrl: string;\n  /** Format */\n  format: string;\n  /** Optional Version.  If not specified, default is used. */\n  version?: string;\n  /** Storage Source */\n  storageSource?: StorageSource;\n}\n\n/** Alias for StorageSource */\nexport type StorageSource = \"AzureBlob\" | string;\n/** Alias for StorageInputType */\nexport type StorageInputType = \"Folder\" | \"File\" | string;\n/** Alias for FileFormatType */\nexport type FileFormatType = \"document\" | \"glossary\" | string;\n"]}