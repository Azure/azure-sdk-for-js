/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/bindingsMappers";
import * as Parameters from "../models/parameters";
import { AppPlatformManagementClientContext } from "../appPlatformManagementClientContext";

/** Class representing a Bindings. */
export class Bindings {
  private readonly client: AppPlatformManagementClientContext;

  /**
   * Create a Bindings.
   * @param {AppPlatformManagementClientContext} client Reference to the service client.
   */
  constructor(client: AppPlatformManagementClientContext) {
    this.client = client;
  }

  /**
   * Get a Binding and its properties.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param appName The name of the App resource.
   * @param bindingName The name of the Binding resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.BindingsGetResponse>
   */
  get(resourceGroupName: string, serviceName: string, appName: string, bindingName: string, options?: msRest.RequestOptionsBase): Promise<Models.BindingsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param appName The name of the App resource.
   * @param bindingName The name of the Binding resource.
   * @param callback The callback
   */
  get(resourceGroupName: string, serviceName: string, appName: string, bindingName: string, callback: msRest.ServiceCallback<Models.BindingResource>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param appName The name of the App resource.
   * @param bindingName The name of the Binding resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, serviceName: string, appName: string, bindingName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BindingResource>): void;
  get(resourceGroupName: string, serviceName: string, appName: string, bindingName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BindingResource>, callback?: msRest.ServiceCallback<Models.BindingResource>): Promise<Models.BindingsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        appName,
        bindingName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.BindingsGetResponse>;
  }

  /**
   * Create a new Binding or update an exiting Binding.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param appName The name of the App resource.
   * @param bindingName The name of the Binding resource.
   * @param bindingResource Parameters for the create or update operation
   * @param [options] The optional parameters
   * @returns Promise<Models.BindingsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, serviceName: string, appName: string, bindingName: string, bindingResource: Models.BindingResource, options?: msRest.RequestOptionsBase): Promise<Models.BindingsCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param appName The name of the App resource.
   * @param bindingName The name of the Binding resource.
   * @param bindingResource Parameters for the create or update operation
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, serviceName: string, appName: string, bindingName: string, bindingResource: Models.BindingResource, callback: msRest.ServiceCallback<Models.BindingResource>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param appName The name of the App resource.
   * @param bindingName The name of the Binding resource.
   * @param bindingResource Parameters for the create or update operation
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, serviceName: string, appName: string, bindingName: string, bindingResource: Models.BindingResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BindingResource>): void;
  createOrUpdate(resourceGroupName: string, serviceName: string, appName: string, bindingName: string, bindingResource: Models.BindingResource, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BindingResource>, callback?: msRest.ServiceCallback<Models.BindingResource>): Promise<Models.BindingsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        appName,
        bindingName,
        bindingResource,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.BindingsCreateOrUpdateResponse>;
  }

  /**
   * Operation to delete a Binding.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param appName The name of the App resource.
   * @param bindingName The name of the Binding resource.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, serviceName: string, appName: string, bindingName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param appName The name of the App resource.
   * @param bindingName The name of the Binding resource.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, serviceName: string, appName: string, bindingName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param appName The name of the App resource.
   * @param bindingName The name of the Binding resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, serviceName: string, appName: string, bindingName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, serviceName: string, appName: string, bindingName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        appName,
        bindingName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Operation to update an exiting Binding.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param appName The name of the App resource.
   * @param bindingName The name of the Binding resource.
   * @param bindingResource Parameters for the update operation
   * @param [options] The optional parameters
   * @returns Promise<Models.BindingsUpdateResponse>
   */
  update(resourceGroupName: string, serviceName: string, appName: string, bindingName: string, bindingResource: Models.BindingResource, options?: msRest.RequestOptionsBase): Promise<Models.BindingsUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param appName The name of the App resource.
   * @param bindingName The name of the Binding resource.
   * @param bindingResource Parameters for the update operation
   * @param callback The callback
   */
  update(resourceGroupName: string, serviceName: string, appName: string, bindingName: string, bindingResource: Models.BindingResource, callback: msRest.ServiceCallback<Models.BindingResource>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param appName The name of the App resource.
   * @param bindingName The name of the Binding resource.
   * @param bindingResource Parameters for the update operation
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, serviceName: string, appName: string, bindingName: string, bindingResource: Models.BindingResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BindingResource>): void;
  update(resourceGroupName: string, serviceName: string, appName: string, bindingName: string, bindingResource: Models.BindingResource, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BindingResource>, callback?: msRest.ServiceCallback<Models.BindingResource>): Promise<Models.BindingsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        appName,
        bindingName,
        bindingResource,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.BindingsUpdateResponse>;
  }

  /**
   * Handles requests to list all resources in an App.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param appName The name of the App resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.BindingsListResponse>
   */
  list(resourceGroupName: string, serviceName: string, appName: string, options?: msRest.RequestOptionsBase): Promise<Models.BindingsListResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param appName The name of the App resource.
   * @param callback The callback
   */
  list(resourceGroupName: string, serviceName: string, appName: string, callback: msRest.ServiceCallback<Models.BindingResourceCollection>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param appName The name of the App resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, serviceName: string, appName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BindingResourceCollection>): void;
  list(resourceGroupName: string, serviceName: string, appName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BindingResourceCollection>, callback?: msRest.ServiceCallback<Models.BindingResourceCollection>): Promise<Models.BindingsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        appName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.BindingsListResponse>;
  }

  /**
   * Handles requests to list all resources in an App.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.BindingsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.BindingsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.BindingResourceCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BindingResourceCollection>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BindingResourceCollection>, callback?: msRest.ServiceCallback<Models.BindingResourceCollection>): Promise<Models.BindingsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.BindingsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/bindings/{bindingName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.appName,
    Parameters.bindingName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BindingResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/bindings/{bindingName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.appName,
    Parameters.bindingName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "bindingResource",
    mapper: {
      ...Mappers.BindingResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.BindingResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/bindings/{bindingName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.appName,
    Parameters.bindingName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/bindings/{bindingName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.appName,
    Parameters.bindingName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "bindingResource",
    mapper: {
      ...Mappers.BindingResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.BindingResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/bindings",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.appName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BindingResourceCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BindingResourceCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
