/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { BuildServiceOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AppPlatformManagementClient } from "../appPlatformManagementClient";
import {
  BuildService,
  BuildServiceListBuildServicesNextOptionalParams,
  BuildServiceListBuildServicesOptionalParams,
  Build,
  BuildServiceListBuildsNextOptionalParams,
  BuildServiceListBuildsOptionalParams,
  BuildResult,
  BuildServiceListBuildResultsNextOptionalParams,
  BuildServiceListBuildResultsOptionalParams,
  BuildServiceListBuildServicesResponse,
  BuildServiceGetBuildServiceOptionalParams,
  BuildServiceGetBuildServiceResponse,
  BuildServiceListBuildsResponse,
  BuildServiceGetBuildOptionalParams,
  BuildServiceGetBuildResponse,
  BuildServiceCreateOrUpdateBuildOptionalParams,
  BuildServiceCreateOrUpdateBuildResponse,
  BuildServiceListBuildResultsResponse,
  BuildServiceGetBuildResultOptionalParams,
  BuildServiceGetBuildResultResponse,
  BuildServiceGetBuildResultLogOptionalParams,
  BuildServiceGetBuildResultLogResponse,
  BuildServiceGetResourceUploadUrlOptionalParams,
  BuildServiceGetResourceUploadUrlResponse,
  BuildServiceListSupportedBuildpacksOptionalParams,
  BuildServiceListSupportedBuildpacksResponse,
  BuildServiceGetSupportedBuildpackOptionalParams,
  BuildServiceGetSupportedBuildpackResponse,
  BuildServiceListSupportedStacksOptionalParams,
  BuildServiceListSupportedStacksResponse,
  BuildServiceGetSupportedStackOptionalParams,
  BuildServiceGetSupportedStackResponse,
  BuildServiceListBuildServicesNextResponse,
  BuildServiceListBuildsNextResponse,
  BuildServiceListBuildResultsNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing BuildServiceOperations operations. */
export class BuildServiceOperationsImpl implements BuildServiceOperations {
  private readonly client: AppPlatformManagementClient;

  /**
   * Initialize a new instance of the class BuildServiceOperations class.
   * @param client Reference to the service client
   */
  constructor(client: AppPlatformManagementClient) {
    this.client = client;
  }

  /**
   * List build services resource.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param options The options parameters.
   */
  public listBuildServices(
    resourceGroupName: string,
    serviceName: string,
    options?: BuildServiceListBuildServicesOptionalParams
  ): PagedAsyncIterableIterator<BuildService> {
    const iter = this.listBuildServicesPagingAll(
      resourceGroupName,
      serviceName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBuildServicesPagingPage(
          resourceGroupName,
          serviceName,
          options
        );
      }
    };
  }

  private async *listBuildServicesPagingPage(
    resourceGroupName: string,
    serviceName: string,
    options?: BuildServiceListBuildServicesOptionalParams
  ): AsyncIterableIterator<BuildService[]> {
    let result = await this._listBuildServices(
      resourceGroupName,
      serviceName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBuildServicesNext(
        resourceGroupName,
        serviceName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBuildServicesPagingAll(
    resourceGroupName: string,
    serviceName: string,
    options?: BuildServiceListBuildServicesOptionalParams
  ): AsyncIterableIterator<BuildService> {
    for await (const page of this.listBuildServicesPagingPage(
      resourceGroupName,
      serviceName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List KPack builds.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param buildServiceName The name of the build service resource.
   * @param options The options parameters.
   */
  public listBuilds(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    options?: BuildServiceListBuildsOptionalParams
  ): PagedAsyncIterableIterator<Build> {
    const iter = this.listBuildsPagingAll(
      resourceGroupName,
      serviceName,
      buildServiceName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBuildsPagingPage(
          resourceGroupName,
          serviceName,
          buildServiceName,
          options
        );
      }
    };
  }

  private async *listBuildsPagingPage(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    options?: BuildServiceListBuildsOptionalParams
  ): AsyncIterableIterator<Build[]> {
    let result = await this._listBuilds(
      resourceGroupName,
      serviceName,
      buildServiceName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBuildsNext(
        resourceGroupName,
        serviceName,
        buildServiceName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBuildsPagingAll(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    options?: BuildServiceListBuildsOptionalParams
  ): AsyncIterableIterator<Build> {
    for await (const page of this.listBuildsPagingPage(
      resourceGroupName,
      serviceName,
      buildServiceName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List KPack build results.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param buildServiceName The name of the build service resource.
   * @param buildName The name of the build resource.
   * @param options The options parameters.
   */
  public listBuildResults(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    buildName: string,
    options?: BuildServiceListBuildResultsOptionalParams
  ): PagedAsyncIterableIterator<BuildResult> {
    const iter = this.listBuildResultsPagingAll(
      resourceGroupName,
      serviceName,
      buildServiceName,
      buildName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBuildResultsPagingPage(
          resourceGroupName,
          serviceName,
          buildServiceName,
          buildName,
          options
        );
      }
    };
  }

  private async *listBuildResultsPagingPage(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    buildName: string,
    options?: BuildServiceListBuildResultsOptionalParams
  ): AsyncIterableIterator<BuildResult[]> {
    let result = await this._listBuildResults(
      resourceGroupName,
      serviceName,
      buildServiceName,
      buildName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBuildResultsNext(
        resourceGroupName,
        serviceName,
        buildServiceName,
        buildName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBuildResultsPagingAll(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    buildName: string,
    options?: BuildServiceListBuildResultsOptionalParams
  ): AsyncIterableIterator<BuildResult> {
    for await (const page of this.listBuildResultsPagingPage(
      resourceGroupName,
      serviceName,
      buildServiceName,
      buildName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List build services resource.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param options The options parameters.
   */
  private _listBuildServices(
    resourceGroupName: string,
    serviceName: string,
    options?: BuildServiceListBuildServicesOptionalParams
  ): Promise<BuildServiceListBuildServicesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceName, options },
      listBuildServicesOperationSpec
    );
  }

  /**
   * Get a build service resource.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param buildServiceName The name of the build service resource.
   * @param options The options parameters.
   */
  getBuildService(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    options?: BuildServiceGetBuildServiceOptionalParams
  ): Promise<BuildServiceGetBuildServiceResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceName, buildServiceName, options },
      getBuildServiceOperationSpec
    );
  }

  /**
   * List KPack builds.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param buildServiceName The name of the build service resource.
   * @param options The options parameters.
   */
  private _listBuilds(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    options?: BuildServiceListBuildsOptionalParams
  ): Promise<BuildServiceListBuildsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceName, buildServiceName, options },
      listBuildsOperationSpec
    );
  }

  /**
   * Get a KPack build.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param buildServiceName The name of the build service resource.
   * @param buildName The name of the build resource.
   * @param options The options parameters.
   */
  getBuild(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    buildName: string,
    options?: BuildServiceGetBuildOptionalParams
  ): Promise<BuildServiceGetBuildResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceName, buildServiceName, buildName, options },
      getBuildOperationSpec
    );
  }

  /**
   * Create or update a KPack build.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param buildServiceName The name of the build service resource.
   * @param buildName The name of the build resource.
   * @param build Parameters for the create or update operation
   * @param options The options parameters.
   */
  createOrUpdateBuild(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    buildName: string,
    build: Build,
    options?: BuildServiceCreateOrUpdateBuildOptionalParams
  ): Promise<BuildServiceCreateOrUpdateBuildResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        buildServiceName,
        buildName,
        build,
        options
      },
      createOrUpdateBuildOperationSpec
    );
  }

  /**
   * List KPack build results.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param buildServiceName The name of the build service resource.
   * @param buildName The name of the build resource.
   * @param options The options parameters.
   */
  private _listBuildResults(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    buildName: string,
    options?: BuildServiceListBuildResultsOptionalParams
  ): Promise<BuildServiceListBuildResultsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceName, buildServiceName, buildName, options },
      listBuildResultsOperationSpec
    );
  }

  /**
   * Get a KPack build result.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param buildServiceName The name of the build service resource.
   * @param buildName The name of the build resource.
   * @param buildResultName The name of the build result resource.
   * @param options The options parameters.
   */
  getBuildResult(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    buildName: string,
    buildResultName: string,
    options?: BuildServiceGetBuildResultOptionalParams
  ): Promise<BuildServiceGetBuildResultResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        buildServiceName,
        buildName,
        buildResultName,
        options
      },
      getBuildResultOperationSpec
    );
  }

  /**
   * Get a KPack build result log download URL.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param buildServiceName The name of the build service resource.
   * @param buildName The name of the build resource.
   * @param buildResultName The name of the build result resource.
   * @param options The options parameters.
   */
  getBuildResultLog(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    buildName: string,
    buildResultName: string,
    options?: BuildServiceGetBuildResultLogOptionalParams
  ): Promise<BuildServiceGetBuildResultLogResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        buildServiceName,
        buildName,
        buildResultName,
        options
      },
      getBuildResultLogOperationSpec
    );
  }

  /**
   * Get an resource upload URL for build service, which may be artifacts or source archive.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param buildServiceName The name of the build service resource.
   * @param options The options parameters.
   */
  getResourceUploadUrl(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    options?: BuildServiceGetResourceUploadUrlOptionalParams
  ): Promise<BuildServiceGetResourceUploadUrlResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceName, buildServiceName, options },
      getResourceUploadUrlOperationSpec
    );
  }

  /**
   * Get all supported buildpacks.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param buildServiceName The name of the build service resource.
   * @param options The options parameters.
   */
  listSupportedBuildpacks(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    options?: BuildServiceListSupportedBuildpacksOptionalParams
  ): Promise<BuildServiceListSupportedBuildpacksResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceName, buildServiceName, options },
      listSupportedBuildpacksOperationSpec
    );
  }

  /**
   * Get the supported buildpack resource.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param buildServiceName The name of the build service resource.
   * @param buildpackName The name of the buildpack resource.
   * @param options The options parameters.
   */
  getSupportedBuildpack(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    buildpackName: string,
    options?: BuildServiceGetSupportedBuildpackOptionalParams
  ): Promise<BuildServiceGetSupportedBuildpackResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        buildServiceName,
        buildpackName,
        options
      },
      getSupportedBuildpackOperationSpec
    );
  }

  /**
   * Get all supported stacks.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param buildServiceName The name of the build service resource.
   * @param options The options parameters.
   */
  listSupportedStacks(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    options?: BuildServiceListSupportedStacksOptionalParams
  ): Promise<BuildServiceListSupportedStacksResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceName, buildServiceName, options },
      listSupportedStacksOperationSpec
    );
  }

  /**
   * Get the supported stack resource.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param buildServiceName The name of the build service resource.
   * @param stackName The name of the stack resource.
   * @param options The options parameters.
   */
  getSupportedStack(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    stackName: string,
    options?: BuildServiceGetSupportedStackOptionalParams
  ): Promise<BuildServiceGetSupportedStackResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceName, buildServiceName, stackName, options },
      getSupportedStackOperationSpec
    );
  }

  /**
   * ListBuildServicesNext
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param nextLink The nextLink from the previous successful call to the ListBuildServices method.
   * @param options The options parameters.
   */
  private _listBuildServicesNext(
    resourceGroupName: string,
    serviceName: string,
    nextLink: string,
    options?: BuildServiceListBuildServicesNextOptionalParams
  ): Promise<BuildServiceListBuildServicesNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceName, nextLink, options },
      listBuildServicesNextOperationSpec
    );
  }

  /**
   * ListBuildsNext
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param buildServiceName The name of the build service resource.
   * @param nextLink The nextLink from the previous successful call to the ListBuilds method.
   * @param options The options parameters.
   */
  private _listBuildsNext(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    nextLink: string,
    options?: BuildServiceListBuildsNextOptionalParams
  ): Promise<BuildServiceListBuildsNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceName, buildServiceName, nextLink, options },
      listBuildsNextOperationSpec
    );
  }

  /**
   * ListBuildResultsNext
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param buildServiceName The name of the build service resource.
   * @param buildName The name of the build resource.
   * @param nextLink The nextLink from the previous successful call to the ListBuildResults method.
   * @param options The options parameters.
   */
  private _listBuildResultsNext(
    resourceGroupName: string,
    serviceName: string,
    buildServiceName: string,
    buildName: string,
    nextLink: string,
    options?: BuildServiceListBuildResultsNextOptionalParams
  ): Promise<BuildServiceListBuildResultsNextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        buildServiceName,
        buildName,
        nextLink,
        options
      },
      listBuildResultsNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBuildServicesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BuildServiceCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getBuildServiceOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BuildService
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.buildServiceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBuildsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builds",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BuildCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.buildServiceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getBuildOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builds/{buildName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Build
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.buildServiceName,
    Parameters.buildName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateBuildOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builds/{buildName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Build
    },
    201: {
      bodyMapper: Mappers.Build
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.build,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.buildServiceName,
    Parameters.buildName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listBuildResultsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builds/{buildName}/results",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BuildResultCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.buildServiceName,
    Parameters.buildName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getBuildResultOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builds/{buildName}/results/{buildResultName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BuildResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.buildServiceName,
    Parameters.buildName,
    Parameters.buildResultName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getBuildResultLogOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builds/{buildName}/results/{buildResultName}/getLogFileUrl",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.BuildResultLog
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.buildServiceName,
    Parameters.buildName,
    Parameters.buildResultName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getResourceUploadUrlOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/getResourceUploadUrl",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceUploadDefinition
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.buildServiceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listSupportedBuildpacksOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/supportedBuildpacks",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SupportedBuildpacksCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.buildServiceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getSupportedBuildpackOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/supportedBuildpacks/{buildpackName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SupportedBuildpackResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.buildServiceName,
    Parameters.buildpackName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listSupportedStacksOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/supportedStacks",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SupportedStacksCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.buildServiceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getSupportedStackOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/supportedStacks/{stackName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SupportedStackResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.buildServiceName,
    Parameters.stackName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBuildServicesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BuildServiceCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBuildsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BuildCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.nextLink,
    Parameters.buildServiceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBuildResultsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BuildResultCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.nextLink,
    Parameters.buildServiceName,
    Parameters.buildName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
