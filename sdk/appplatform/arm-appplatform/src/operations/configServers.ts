/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/configServersMappers";
import * as Parameters from "../models/parameters";
import { AppPlatformManagementClientContext } from "../appPlatformManagementClientContext";

/** Class representing a ConfigServers. */
export class ConfigServers {
  private readonly client: AppPlatformManagementClientContext;

  /**
   * Create a ConfigServers.
   * @param {AppPlatformManagementClientContext} client Reference to the service client.
   */
  constructor(client: AppPlatformManagementClientContext) {
    this.client = client;
  }

  /**
   * Get the config server and its properties.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConfigServersGetResponse>
   */
  get(resourceGroupName: string, serviceName: string, options?: msRest.RequestOptionsBase): Promise<Models.ConfigServersGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param callback The callback
   */
  get(resourceGroupName: string, serviceName: string, callback: msRest.ServiceCallback<Models.ConfigServerResource>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, serviceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConfigServerResource>): void;
  get(resourceGroupName: string, serviceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ConfigServerResource>, callback?: msRest.ServiceCallback<Models.ConfigServerResource>): Promise<Models.ConfigServersGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ConfigServersGetResponse>;
  }

  /**
   * Update the config server.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param configServerResource Parameters for the update operation
   * @param [options] The optional parameters
   * @returns Promise<Models.ConfigServersUpdatePutResponse>
   */
  updatePut(resourceGroupName: string, serviceName: string, configServerResource: Models.ConfigServerResource, options?: msRest.RequestOptionsBase): Promise<Models.ConfigServersUpdatePutResponse> {
    return this.beginUpdatePut(resourceGroupName,serviceName,configServerResource,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ConfigServersUpdatePutResponse>;
  }

  /**
   * Update the config server.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param configServerResource Parameters for the update operation
   * @param [options] The optional parameters
   * @returns Promise<Models.ConfigServersUpdatePatchResponse>
   */
  updatePatch(resourceGroupName: string, serviceName: string, configServerResource: Models.ConfigServerResource, options?: msRest.RequestOptionsBase): Promise<Models.ConfigServersUpdatePatchResponse> {
    return this.beginUpdatePatch(resourceGroupName,serviceName,configServerResource,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ConfigServersUpdatePatchResponse>;
  }

  /**
   * Check if the config server settings are valid.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param configServerSettings Config server settings to be validated
   * @param [options] The optional parameters
   * @returns Promise<Models.ConfigServersValidateResponse>
   */
  validate(resourceGroupName: string, serviceName: string, configServerSettings: Models.ConfigServerSettings, options?: msRest.RequestOptionsBase): Promise<Models.ConfigServersValidateResponse> {
    return this.beginValidate(resourceGroupName,serviceName,configServerSettings,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ConfigServersValidateResponse>;
  }

  /**
   * Update the config server.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param configServerResource Parameters for the update operation
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdatePut(resourceGroupName: string, serviceName: string, configServerResource: Models.ConfigServerResource, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        serviceName,
        configServerResource,
        options
      },
      beginUpdatePutOperationSpec,
      options);
  }

  /**
   * Update the config server.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param configServerResource Parameters for the update operation
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdatePatch(resourceGroupName: string, serviceName: string, configServerResource: Models.ConfigServerResource, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        serviceName,
        configServerResource,
        options
      },
      beginUpdatePatchOperationSpec,
      options);
  }

  /**
   * Check if the config server settings are valid.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param configServerSettings Config server settings to be validated
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginValidate(resourceGroupName: string, serviceName: string, configServerSettings: Models.ConfigServerSettings, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        serviceName,
        configServerSettings,
        options
      },
      beginValidateOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/configServers/default",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ConfigServerResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUpdatePutOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/configServers/default",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "configServerResource",
    mapper: {
      ...Mappers.ConfigServerResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ConfigServerResource
    },
    202: {
      bodyMapper: Mappers.ConfigServerResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUpdatePatchOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/configServers/default",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "configServerResource",
    mapper: {
      ...Mappers.ConfigServerResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ConfigServerResource
    },
    202: {
      bodyMapper: Mappers.ConfigServerResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginValidateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/configServers/validate",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "configServerSettings",
    mapper: {
      ...Mappers.ConfigServerSettings,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ConfigServerSettingsValidateResult
    },
    202: {
      bodyMapper: Mappers.ConfigServerSettingsValidateResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
