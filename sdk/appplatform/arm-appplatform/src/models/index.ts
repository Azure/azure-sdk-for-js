/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export type ContainerRegistryCredentialsUnion =
  | ContainerRegistryCredentials
  | ContainerRegistryBasicCredentials;
export type CustomPersistentDiskPropertiesUnion =
  | CustomPersistentDiskProperties
  | AzureFileVolume;
export type StoragePropertiesUnion = StorageProperties | StorageAccount;
export type CertificatePropertiesUnion =
  | CertificateProperties
  | KeyVaultCertificateProperties
  | ContentCertificateProperties;
export type UserSourceInfoUnion =
  | UserSourceInfo
  | UploadedUserSourceInfoUnion
  | BuildResultUserSourceInfo
  | CustomContainerUserSourceInfo;
export type ProbeActionUnion =
  | ProbeAction
  | HttpGetAction
  | ExecAction
  | TCPSocketAction;
export type AcceleratorAuthSettingUnion =
  | AcceleratorAuthSetting
  | AcceleratorPublicSetting
  | AcceleratorBasicAuthSetting
  | AcceleratorSshSetting;
export type UploadedUserSourceInfoUnion =
  | UploadedUserSourceInfo
  | JarUploadedUserSourceInfo
  | SourceUploadedUserSourceInfo
  | NetCoreZipUploadedUserSourceInfo;

/** Service properties payload */
export interface ClusterResourceProperties {
  /**
   * Provisioning state of the Service
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** Network profile of the Service */
  networkProfile?: NetworkProfile;
  /** Additional Service settings in vnet injection instance */
  vnetAddons?: ServiceVNetAddons;
  /**
   * Version of the Service
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly version?: number;
  /**
   * ServiceInstanceEntity GUID which uniquely identifies a created resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly serviceId?: string;
  /** The resource Id of the Managed Environment that the Spring Apps instance builds on */
  managedEnvironmentId?: string;
  /** The name of the resource group that contains the infrastructure resources */
  infraResourceGroup?: string;
  /**
   * Power state of the Service
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly powerState?: PowerState;
  zoneRedundant?: boolean;
  /**
   * Fully qualified dns name of the service instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fqdn?: string;
  /** Purchasing 3rd party product of the Service resource. */
  marketplaceResource?: MarketplaceResource;
}

/** Service network profile payload */
export interface NetworkProfile {
  /** Fully qualified resource Id of the subnet to host Azure Spring Apps Service Runtime */
  serviceRuntimeSubnetId?: string;
  /** Fully qualified resource Id of the subnet to host customer apps in Azure Spring Apps */
  appSubnetId?: string;
  /** Azure Spring Apps service reserved CIDR */
  serviceCidr?: string;
  /** Name of the resource group containing network resources of Azure Spring Apps Service Runtime */
  serviceRuntimeNetworkResourceGroup?: string;
  /** Name of the resource group containing network resources for customer apps in Azure Spring Apps */
  appNetworkResourceGroup?: string;
  /**
   * Desired outbound IP resources for Azure Spring Apps resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly outboundIPs?: NetworkProfileOutboundIPs;
  /**
   * Required inbound or outbound traffics for Azure Spring Apps resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly requiredTraffics?: RequiredTraffic[];
  /** Ingress configuration payload for Azure Spring Apps resource. */
  ingressConfig?: IngressConfig;
  /** The egress traffic type of Azure Spring Apps VNet instances. */
  outboundType?: string;
}

/** Desired outbound IP resources for Azure Spring Apps resource. */
export interface NetworkProfileOutboundIPs {
  /**
   * A list of public IP addresses.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly publicIPs?: string[];
}

/** Required inbound or outbound traffic for Azure Spring Apps resource. */
export interface RequiredTraffic {
  /**
   * The protocol of required traffic
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly protocol?: string;
  /**
   * The port of required traffic
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly port?: number;
  /**
   * The ip list of required traffic
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ips?: string[];
  /**
   * The FQDN list of required traffic
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fqdns?: string[];
  /**
   * The direction of required traffic
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly direction?: TrafficDirection;
}

/** Ingress configuration payload for Azure Spring Apps resource. */
export interface IngressConfig {
  /** Ingress read time out in seconds. */
  readTimeoutInSeconds?: number;
}

/** Additional Service settings in vnet injection instance */
export interface ServiceVNetAddons {
  /** Indicates whether the log stream in vnet injection instance could be accessed from internet. */
  logStreamPublicEndpoint?: boolean;
  /** Indicates whether the data plane components(log stream, app connect, remote debugging) in vnet injection instance could be accessed from internet. */
  dataPlanePublicEndpoint?: boolean;
}

/** Purchasing 3rd Party product for one Azure Spring Apps instance */
export interface MarketplaceResource {
  /** The plan id of the 3rd Party Artifact that is being procured. */
  plan?: string;
  /** The publisher id of the 3rd Party Artifact that is being bought. */
  publisher?: string;
  /** The 3rd Party artifact that is being procured. */
  product?: string;
}

/** Sku of Azure Spring Apps */
export interface Sku {
  /** Name of the Sku */
  name?: string;
  /** Tier of the Sku */
  tier?: string;
  /** Current capacity of the target resource */
  capacity?: number;
}

/** The core properties of ARM resources. */
export interface Resource {
  /**
   * Fully qualified resource Id for the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: LastModifiedByType;
  /** The timestamp of resource modification (UTC). */
  lastModifiedAt?: Date;
}

/** An error response from the service. */
export interface CloudError {
  /** An error response from the service. */
  error?: CloudErrorBody;
}

/** An error response from the service. */
export interface CloudErrorBody {
  /** An identifier for the error. Codes are invariant and are intended to be consumed programmatically. */
  code?: string;
  /** A message describing the error, intended to be suitable for display in a user interface. */
  message?: string;
  /** The target of the particular error. For example, the name of the property in error. */
  target?: string;
  /** A list of additional details about the error. */
  details?: CloudErrorBody[];
}

/** Test keys payload */
export interface TestKeys {
  /** Primary key */
  primaryKey?: string;
  /** Secondary key */
  secondaryKey?: string;
  /** Primary test endpoint */
  primaryTestEndpoint?: string;
  /** Secondary test endpoint */
  secondaryTestEndpoint?: string;
  /** Indicates whether the test endpoint feature enabled or not */
  enabled?: boolean;
}

/** Regenerate test key request payload */
export interface RegenerateTestKeyRequestPayload {
  /** Type of the test key */
  keyType: TestKeyType;
}

/** Config server git properties payload */
export interface ConfigServerProperties {
  /**
   * State of the config server.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ConfigServerState;
  /** Error when apply config server settings. */
  error?: ErrorModel;
  /** Settings of config server. */
  configServer?: ConfigServerSettings;
}

/** The error code compose of code and message. */
export interface ErrorModel {
  /** The code of error. */
  code?: string;
  /** The message of error. */
  message?: string;
}

/** The settings of config server. */
export interface ConfigServerSettings {
  /** Property of git environment. */
  gitProperty?: ConfigServerGitProperty;
}

/** Property of git. */
export interface ConfigServerGitProperty {
  /** Repositories of git. */
  repositories?: GitPatternRepository[];
  /** URI of the repository */
  uri: string;
  /** Label of the repository */
  label?: string;
  /** Searching path of the repository */
  searchPaths?: string[];
  /** Username of git repository basic auth. */
  username?: string;
  /** Password of git repository basic auth. */
  password?: string;
  /** Public sshKey of git repository. */
  hostKey?: string;
  /** SshKey algorithm of git repository. */
  hostKeyAlgorithm?: string;
  /** Private sshKey algorithm of git repository. */
  privateKey?: string;
  /** Strict host key checking or not. */
  strictHostKeyChecking?: boolean;
}

/** Git repository property payload for config server */
export interface GitPatternRepository {
  /** Name of the repository */
  name: string;
  /** Collection of pattern of the repository */
  pattern?: string[];
  /** URI of the repository */
  uri: string;
  /** Label of the repository */
  label?: string;
  /** Searching path of the repository */
  searchPaths?: string[];
  /** Username of git repository basic auth. */
  username?: string;
  /** Password of git repository basic auth. */
  password?: string;
  /** Public sshKey of git repository. */
  hostKey?: string;
  /** SshKey algorithm of git repository. */
  hostKeyAlgorithm?: string;
  /** Private sshKey algorithm of git repository. */
  privateKey?: string;
  /** Strict host key checking or not. */
  strictHostKeyChecking?: boolean;
}

/** Validation result for config server settings */
export interface ConfigServerSettingsValidateResult {
  /** Indicate if the config server settings are valid */
  isValid?: boolean;
  /** The detail validation results */
  details?: ConfigServerSettingsErrorRecord[];
}

/** Error record of the config server settings */
export interface ConfigServerSettingsErrorRecord {
  /** The name of the config server settings error record */
  name?: string;
  /** The uri of the config server settings error record */
  uri?: string;
  /** The detail error messages of the record */
  messages?: string[];
}

/** Application Configuration Service properties payload */
export interface ConfigurationServiceProperties {
  /**
   * State of the Application Configuration Service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ConfigurationServiceProvisioningState;
  /**
   * The requested resource quantity for required CPU and Memory.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceRequests?: ConfigurationServiceResourceRequests;
  /**
   * Collection of instances belong to Application Configuration Service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instances?: ConfigurationServiceInstance[];
  /** The settings of Application Configuration Service. */
  settings?: ConfigurationServiceSettings;
}

/** Resource request payload of Application Configuration Service */
export interface ConfigurationServiceResourceRequests {
  /**
   * Cpu allocated to each Application Configuration Service instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cpu?: string;
  /**
   * Memory allocated to each Application Configuration Service instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly memory?: string;
  /**
   * Instance count of the Application Configuration Service
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instanceCount?: number;
}

/** Collection of instances belong to the Application Configuration Service */
export interface ConfigurationServiceInstance {
  /**
   * Name of the Application Configuration Service instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Status of the Application Configuration Service instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: string;
}

/** The settings of Application Configuration Service. */
export interface ConfigurationServiceSettings {
  /** Property of git environment. */
  gitProperty?: ConfigurationServiceGitProperty;
}

/** Property of git environment. */
export interface ConfigurationServiceGitProperty {
  /** Repositories of Application Configuration Service git property. */
  repositories?: ConfigurationServiceGitRepository[];
}

/** Git repository property payload for Application Configuration Service */
export interface ConfigurationServiceGitRepository {
  /** Name of the repository */
  name: string;
  /** Collection of patterns of the repository */
  patterns: string[];
  /** URI of the repository */
  uri: string;
  /** Label of the repository */
  label: string;
  /** Searching path of the repository */
  searchPaths?: string[];
  /** Username of git repository basic auth. */
  username?: string;
  /** Password of git repository basic auth. */
  password?: string;
  /** Public sshKey of git repository. */
  hostKey?: string;
  /** SshKey algorithm of git repository. */
  hostKeyAlgorithm?: string;
  /** Private sshKey algorithm of git repository. */
  privateKey?: string;
  /** Strict host key checking or not. */
  strictHostKeyChecking?: boolean;
}

/** Object that includes an array of configuration service resources and a possible link for next set */
export interface ConfigurationServiceResourceCollection {
  /** Collection of configuration service resources */
  value?: ConfigurationServiceResource[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** Validation result for configuration service settings */
export interface ConfigurationServiceSettingsValidateResult {
  /** Validation result for configuration service settings */
  gitPropertyValidationResult?: ConfigurationServiceGitPropertyValidateResult;
}

/** Validation result for configuration service settings */
export interface ConfigurationServiceGitPropertyValidateResult {
  /** Indicate if the configuration service settings are valid */
  isValid?: boolean;
  /** The detail validation results */
  gitReposValidationResult?: ValidationMessages[];
}

/** Validate messages of the configuration service git repositories */
export interface ValidationMessages {
  /** The name of the configuration service git repository. */
  name?: string;
  /** Detailed validation messages. */
  messages?: string[];
}

/** Service Registry properties payload */
export interface ServiceRegistryProperties {
  /**
   * State of the Service Registry.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ServiceRegistryProvisioningState;
  /**
   * The requested resource quantity for required CPU and Memory.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceRequests?: ServiceRegistryResourceRequests;
  /**
   * Collection of instances belong to Service Registry.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instances?: ServiceRegistryInstance[];
}

/** Resource request payload of Service Registry */
export interface ServiceRegistryResourceRequests {
  /**
   * Cpu allocated to each Service Registry instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cpu?: string;
  /**
   * Memory allocated to each Service Registry instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly memory?: string;
  /**
   * Instance count of the Service Registry
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instanceCount?: number;
}

/** Collection of instances belong to the Service Registry */
export interface ServiceRegistryInstance {
  /**
   * Name of the Service Registry instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Status of the Service Registry instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: string;
}

/** Object that includes an array of Service Registry resources and a possible link for next set */
export interface ServiceRegistryResourceCollection {
  /** Collection of Service Registry resources */
  value?: ServiceRegistryResource[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** Object that includes an array of Application Live View resources and a possible link for next set */
export interface ApplicationLiveViewResourceCollection {
  /** Collection of Application Live View resources */
  value?: ApplicationLiveViewResource[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** Application Live View properties payload */
export interface ApplicationLiveViewProperties {
  /**
   * State of the Application Live View.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ApplicationLiveViewProvisioningState;
  /**
   * Component details of Application Live View
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly components?: ApplicationLiveViewComponent[];
}

/** Application Live View properties payload */
export interface ApplicationLiveViewComponent {
  /**
   * Name of the component.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: any;
  /**
   * The requested resource quantity for required CPU and Memory.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceRequests?: ApplicationLiveViewResourceRequests;
  /**
   * Collection of instances belong to Application Live View.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instances?: ApplicationLiveViewInstance[];
}

/** The resource quantity for required CPU and Memory of Application Live View component */
export interface ApplicationLiveViewResourceRequests {
  /**
   * Cpu quantity allocated to each Application Live View component instance. 1 core can be represented by 1 or 1000m.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cpu?: string;
  /**
   * Memory quantity allocated to each Application Live View component instance. 1 GB can be represented by 1Gi or 1024Mi.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly memory?: string;
  /**
   * Desired instance count of Application Live View component instance.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instanceCount?: number;
}

/** Collection of instances belong to the Application Live View */
export interface ApplicationLiveViewInstance {
  /**
   * Name of the Application Live View instance.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Status of the Application Live View instance. It can be Pending, Running, Succeeded, Failed, Unknown.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: string;
}

/** Object that includes an array of Dev Tool Portal resources and a possible link for next set */
export interface DevToolPortalResourceCollection {
  /** Collection of Dev Tool Portal resources */
  value?: DevToolPortalResource[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** Dev Tool Portal properties payload */
export interface DevToolPortalProperties {
  /**
   * State of the Dev Tool Portal.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: DevToolPortalProvisioningState;
  /**
   * The requested resource quantity for required CPU and Memory.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceRequests?: DevToolPortalResourceRequests;
  /**
   * Collection of instances belong to Dev Tool Portal.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instances?: DevToolPortalInstance[];
  /** Indicates whether the resource exposes public endpoint */
  public?: boolean;
  /**
   * URL of the resource, exposed when 'public' is true.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly url?: string;
  /** Single sign-on related configuration */
  ssoProperties?: DevToolPortalSsoProperties;
  /** Settings for Dev Tool Portal */
  features?: DevToolPortalFeatureSettings;
}

/** The resource quantity for required CPU and Memory of Dev Tool Portal */
export interface DevToolPortalResourceRequests {
  /**
   * Cpu quantity allocated to each Dev Tool Portal instance. 1 core can be represented by 1 or 1000m
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cpu?: string;
  /**
   * Memory quantity allocated to each Dev Tool Portal instance. 1 GB can be represented by 1Gi or 1024Mi.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly memory?: string;
  /**
   * Desired instance count of Dev Tool Portal.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instanceCount?: number;
}

/** Collection of instances belong to the Dev Tool Portal. */
export interface DevToolPortalInstance {
  /**
   * Name of the Dev Tool Portal instance.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Status of the Dev Tool Portal instance. It can be Pending, Running, Succeeded, Failed, Unknown.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: string;
}

/** Single sign-on related configuration */
export interface DevToolPortalSsoProperties {
  /** It defines the specific actions applications can be allowed to do on a user's behalf */
  scopes?: string[];
  /** The public identifier for the application */
  clientId?: string;
  /** The secret known only to the application and the authorization server */
  clientSecret?: string;
  /** The URI of a JSON file with generic OIDC provider configuration. */
  metadataUrl?: string;
}

/** Settings for Dev Tool Portal */
export interface DevToolPortalFeatureSettings {
  /** Detail of Accelerator plugin */
  applicationAccelerator?: DevToolPortalFeatureDetail;
  /** Detail of App Live View plugin */
  applicationLiveView?: DevToolPortalFeatureDetail;
}

/** Detail settings for Dev Tool Portal feature */
export interface DevToolPortalFeatureDetail {
  /** State of the plugin */
  state?: DevToolPortalFeatureState;
  /**
   * Route path to visit the plugin
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly route?: string;
}

/** Collection compose of container registry resources list and a possible link for next page. */
export interface ContainerRegistryResourceCollection {
  /** The container registry resources list. */
  value?: ContainerRegistryResource[];
  /** The link to next page of storage list. */
  nextLink?: string;
}

/** Container registry resource payload. */
export interface ContainerRegistryProperties {
  /** The credentials of the container registry resource. */
  credentials: ContainerRegistryCredentialsUnion;
  /**
   * State of the Container Registry.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ContainerRegistryProvisioningState;
}

/** The credential for the container registry resource. */
export interface ContainerRegistryCredentials {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "BasicAuth";
}

/** Object that includes an array of Build service resources and a possible link for next set */
export interface BuildServiceCollection {
  /** Collection of Build service resources */
  value?: BuildService[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** Build service resource properties payload */
export interface BuildServiceProperties {
  /** The resource id of the container registry used in this build service. */
  containerRegistry?: string;
  /**
   * The installed KPack version in this build service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly kPackVersion?: string;
  /**
   * Provisioning state of the KPack build service
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: BuildServiceProvisioningState;
  /** The runtime resource configuration of this build service. */
  resourceRequests?: BuildServicePropertiesResourceRequests;
}

/** The runtime resource configuration of this build service. */
export interface BuildServicePropertiesResourceRequests {
  /**
   * vCPU allocated to the entire build service node pool.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cpu?: string;
  /**
   * Memory allocated to the entire build service node pool.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly memory?: string;
}

/** Object that includes an array of Build resources and a possible link for next set */
export interface BuildCollection {
  /** Collection of Build resources */
  value?: Build[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** Build resource properties payload */
export interface BuildProperties {
  /** The relative path of source code */
  relativePath?: string;
  /** The resource id of builder to build the source code */
  builder?: string;
  /** The resource id of agent pool */
  agentPool?: string;
  /**
   * Provisioning state of the KPack build result
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: BuildProvisioningState;
  /** The environment variables for this build */
  env?: { [propertyName: string]: string };
  /**
   *  The build result triggered by this build
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly triggeredBuildResult?: TriggeredBuildResult;
  /** The customized build resource for this build */
  resourceRequests?: BuildResourceRequests;
}

/** The build result triggered by a build */
export interface TriggeredBuildResult {
  /** The unique build id of this build result */
  id?: string;
}

/** Resource request payload of Build Resource. */
export interface BuildResourceRequests {
  /**
   * Optional Cpu allocated to the build resource. 1 core can be represented by 1 or 1000m.
   * The default value is 1, this should not exceed build service agent pool cpu size.
   */
  cpu?: string;
  /**
   * Optional Memory allocated to the build resource. 1 GB can be represented by 1Gi or 1024Mi.
   * The default value is 2Gi, this should not exceed build service agent pool memory size.
   */
  memory?: string;
}

/** Object that includes an array of BuildpackBinding resources and a possible link for next set */
export interface BuildpackBindingResourceCollection {
  /** Collection of BuildpackBinding resources */
  value?: BuildpackBindingResource[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** Properties of a buildpack binding */
export interface BuildpackBindingProperties {
  /** Buildpack Binding Type */
  bindingType?: BindingType;
  /**
   * State of the Buildpack Binding.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: BuildpackBindingProvisioningState;
  /** The object describes the buildpack binding launch properties */
  launchProperties?: BuildpackBindingLaunchProperties;
}

/** Buildpack Binding Launch Properties */
export interface BuildpackBindingLaunchProperties {
  /** Non-sensitive properties for launchProperties */
  properties?: { [propertyName: string]: string };
  /** Sensitive properties for launchProperties */
  secrets?: { [propertyName: string]: string };
}

/** Object that includes an array of Build result resources and a possible link for next set */
export interface BuildResultCollection {
  /** Collection of Build result resources */
  value?: BuildResult[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** Build result resource properties payload */
export interface BuildResultProperties {
  /** The name of this build result */
  name?: string;
  /**
   * Provisioning state of the KPack build result
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: BuildResultProvisioningState;
  /** Error when build is failed. */
  error?: ErrorModel;
  /** The build pod name which can be used to get the build log streaming. */
  buildPodName?: string;
  /**
   * All of the build stage (init-container and container) resources in build pod.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly buildStages?: BuildStageProperties[];
  /**
   * The container registry image of this build result.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly image?: string;
}

/** The build stage (init-container and container) resources in build pod. */
export interface BuildStageProperties {
  /**
   * The name of this build stage resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The provisioning state of this build stage resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: KPackBuildStageProvisioningState;
  /**
   * The exit code of this build init container.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly exitCode?: string;
  /**
   * The reason of this build init container.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly reason?: string;
}

/** Build result log resource properties payload */
export interface BuildResultLog {
  /** The public download URL of this build result log */
  blobUrl?: string;
}

/** KPack Builder properties payload */
export interface BuilderProperties {
  /**
   * Builder provision status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: BuilderProvisioningState;
  /** Builder cluster stack property. */
  stack?: StackProperties;
  /** Builder buildpack groups. */
  buildpackGroups?: BuildpacksGroupProperties[];
}

/** KPack ClusterStack properties payload */
export interface StackProperties {
  /** Id of the ClusterStack. */
  id?: string;
  /** Version of the ClusterStack */
  version?: string;
}

/** Buildpack group properties of the Builder */
export interface BuildpacksGroupProperties {
  /** Buildpack group name */
  name?: string;
  /** Buildpacks in the buildpack group */
  buildpacks?: BuildpackProperties[];
}

/** Buildpack properties payload */
export interface BuildpackProperties {
  /** Id of the buildpack */
  id?: string;
}

/** Object that includes an array of Builder resources and a possible link for next set */
export interface BuilderResourceCollection {
  /** Collection of Builder resources */
  value?: BuilderResource[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** Resource upload definition payload */
export interface ResourceUploadDefinition {
  /** Source relative path */
  relativePath?: string;
  /** Upload URL */
  uploadUrl?: string;
}

/** Object that includes an array of supported buildpacks resources and a possible link for next set */
export interface SupportedBuildpacksCollection {
  /** Collection of supported buildpacks resources */
  value?: SupportedBuildpackResource[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** Supported buildpack resource properties */
export interface SupportedBuildpackResourceProperties {
  /** The id of supported buildpack */
  buildpackId?: string;
}

/** Object that includes an array of supported stacks resources and a possible link for next set */
export interface SupportedStacksCollection {
  /** Collection of supported stacks resources */
  value?: SupportedStackResource[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** Supported stack resource properties */
export interface SupportedStackResourceProperties {
  /** The id of supported stack */
  stackId?: string;
  /** The version of supported stack */
  version?: string;
}

/** Object that includes an array of build service agent pool resources and a possible link for next set */
export interface BuildServiceAgentPoolResourceCollection {
  /** Collection of build service agent pool resource */
  value?: BuildServiceAgentPoolResource[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** Build service agent pool properties */
export interface BuildServiceAgentPoolProperties {
  /**
   * Provisioning state of the build service agent pool
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** build service agent pool size properties */
  poolSize?: BuildServiceAgentPoolSizeProperties;
}

/** Build service agent pool size properties */
export interface BuildServiceAgentPoolSizeProperties {
  /** The name of build service agent pool size */
  name?: string;
  /**
   * The cpu property of build service agent pool size
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cpu?: string;
  /**
   * The memory property of build service agent pool size
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly memory?: string;
}

/** Monitoring Setting properties payload */
export interface MonitoringSettingProperties {
  /**
   * State of the Monitoring Setting.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: MonitoringSettingState;
  /** Error when apply Monitoring Setting changes. */
  error?: ErrorModel;
  /** Indicates whether enable the trace functionality, which will be deprecated since api version 2020-11-01-preview. Please leverage appInsightsInstrumentationKey to indicate if monitoringSettings enabled or not */
  traceEnabled?: boolean;
  /** Target application insight instrumentation key, null or whitespace include empty will disable monitoringSettings */
  appInsightsInstrumentationKey?: string;
  /** Indicates the sampling rate of application insight agent, should be in range [0.0, 100.0] */
  appInsightsSamplingRate?: number;
  /** Indicates the versions of application insight agent */
  appInsightsAgentVersions?: ApplicationInsightsAgentVersions;
}

/** Application Insights agent versions properties payload */
export interface ApplicationInsightsAgentVersions {
  /**
   * Indicates the version of application insight java agent
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly java?: string;
}

/** App resource properties payload */
export interface AppResourceProperties {
  /** Indicates whether the App exposes public endpoint */
  public?: boolean;
  /**
   * URL of the App
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly url?: string;
  /** Collection of addons */
  addonConfigs?: { [propertyName: string]: Record<string, unknown> };
  /**
   * Provisioning state of the App
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: AppResourceProvisioningState;
  /**
   * Fully qualified dns Name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fqdn?: string;
  /** Indicate if only https is allowed. */
  httpsOnly?: boolean;
  /** Temporary disk settings */
  temporaryDisk?: TemporaryDisk;
  /** Persistent disk settings */
  persistentDisk?: PersistentDisk;
  /** List of custom persistent disks */
  customPersistentDisks?: CustomPersistentDiskResource[];
  /** Indicate if end to end TLS is enabled. */
  enableEndToEndTLS?: boolean;
  /** Collection of loaded certificates */
  loadedCertificates?: LoadedCertificate[];
  /** Additional App settings in vnet injection instance */
  vnetAddons?: AppVNetAddons;
  /** App ingress settings payload. */
  ingressSettings?: IngressSettings;
  /** Collection of auth secrets */
  secrets?: Secret[];
}

/** Temporary disk payload */
export interface TemporaryDisk {
  /** Size of the temporary disk in GB */
  sizeInGB?: number;
  /** Mount path of the temporary disk */
  mountPath?: string;
}

/** Persistent disk payload */
export interface PersistentDisk {
  /** Size of the persistent disk in GB */
  sizeInGB?: number;
  /**
   * Size of the used persistent disk in GB
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly usedInGB?: number;
  /** Mount path of the persistent disk */
  mountPath?: string;
}

/** Custom persistent disk resource payload. */
export interface CustomPersistentDiskResource {
  /** Properties of the custom persistent disk resource payload. */
  customPersistentDiskProperties?: CustomPersistentDiskPropertiesUnion;
  /** The resource id of Azure Spring Apps Storage resource. */
  storageId: string;
}

/** Custom persistent disk resource payload. */
export interface CustomPersistentDiskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "AzureFileVolume";
  /** The mount path of the persistent disk. */
  mountPath: string;
  /** Indicates whether the persistent disk is a readOnly one. */
  readOnly?: boolean;
  /** If set to true, it will create and mount a dedicated directory for every individual app instance. */
  enableSubPath?: boolean;
  /** These are the mount options for a persistent disk. */
  mountOptions?: string[];
}

/** Loaded certificate payload */
export interface LoadedCertificate {
  /** Resource Id of loaded certificate */
  resourceId: string;
  /** Indicate whether the certificate will be loaded into default trust store, only work for Java runtime. */
  loadTrustStore?: boolean;
}

/** Additional App settings in vnet injection instance */
export interface AppVNetAddons {
  /** Indicates whether the App in vnet injection instance exposes endpoint which could be accessed from internet. */
  publicEndpoint?: boolean;
  /**
   * URL of the App in vnet injection instance which could be accessed from internet
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly publicEndpointUrl?: string;
}

/** App ingress settings payload. */
export interface IngressSettings {
  /** Ingress read time out in seconds. */
  readTimeoutInSeconds?: number;
  /** Ingress send time out in seconds. */
  sendTimeoutInSeconds?: number;
  /** Type of the affinity, set this to Cookie to enable session affinity. */
  sessionAffinity?: SessionAffinity;
  /** Time in seconds until the cookie expires. */
  sessionCookieMaxAge?: number;
  /** How ingress should communicate with this app backend service. */
  backendProtocol?: BackendProtocol;
  /** Client-Certification Authentication. */
  clientAuth?: IngressSettingsClientAuth;
}

/** Client-Certification Authentication. */
export interface IngressSettingsClientAuth {
  /** Collection of certificate resource id. */
  certificates?: string[];
}

/** Secret definition. */
export interface Secret {
  /** Secret Name. */
  name?: string;
  /** Secret Value. */
  value?: string;
}

/** Managed identity properties retrieved from ARM request headers. */
export interface ManagedIdentityProperties {
  /** Type of the managed identity */
  type?: ManagedIdentityType;
  /** Principal Id of system-assigned managed identity. */
  principalId?: string;
  /** Tenant Id of system-assigned managed identity. */
  tenantId?: string;
  /** Properties of user-assigned managed identities */
  userAssignedIdentities?: {
    [propertyName: string]: UserAssignedManagedIdentity;
  };
}

/** The details of the user-assigned managed identity assigned to an App. */
export interface UserAssignedManagedIdentity {
  /**
   * Principal Id of user-assigned managed identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * Client Id of user-assigned managed identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clientId?: string;
}

/** Object that includes an array of App resources and a possible link for next set */
export interface AppResourceCollection {
  /** Collection of App resources */
  value?: AppResource[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** Object that includes an array of Deployment resource name and set them as active. */
export interface ActiveDeploymentCollection {
  /** Collection of Deployment name. */
  activeDeploymentNames?: string[];
}

/** Binding resource properties payload */
export interface BindingResourceProperties {
  /**
   * The name of the bound resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceName?: string;
  /**
   * The standard Azure resource type of the bound resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceType?: string;
  /** The Azure resource id of the bound resource */
  resourceId?: string;
  /** The key of the bound resource */
  key?: string;
  /** Binding parameters of the Binding resource */
  bindingParameters?: { [propertyName: string]: string };
  /**
   * The generated Spring Boot property file for this binding. The secret will be deducted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly generatedProperties?: string;
  /**
   * Creation time of the Binding resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdAt?: string;
  /**
   * Update time of the Binding resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly updatedAt?: string;
}

/** Object that includes an array of Binding resources and a possible link for next set */
export interface BindingResourceCollection {
  /** Collection of Binding resources */
  value?: BindingResource[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** Storage resource payload. */
export interface StorageProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  storageType: "StorageAccount";
}

/** Collection compose of storage resources list and a possible link for next page. */
export interface StorageResourceCollection {
  /** The storage resources list. */
  value?: StorageResource[];
  /** The link to next page of storage list. */
  nextLink?: string;
}

/** Certificate resource payload. */
export interface CertificateProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "KeyVaultCertificate" | "ContentCertificate";
  /**
   * The thumbprint of certificate.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly thumbprint?: string;
  /**
   * The issuer of certificate.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly issuer?: string;
  /**
   * The issue date of certificate.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly issuedDate?: string;
  /**
   * The expiration date of certificate.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly expirationDate?: string;
  /**
   * The activate date of certificate.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly activateDate?: string;
  /**
   * The subject name of certificate.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly subjectName?: string;
  /**
   * The domain list of certificate.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dnsNames?: string[];
  /**
   * Provisioning state of the Certificate
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: CertificateResourceProvisioningState;
}

/** Collection compose of certificate resources list and a possible link for next page. */
export interface CertificateResourceCollection {
  /** The certificate resources list. */
  value?: CertificateResource[];
  /** The link to next page of certificate list. */
  nextLink?: string;
}

/** Name availability parameters payload */
export interface NameAvailabilityParameters {
  /** Type of the resource to check name availability */
  type: string;
  /** Name to be checked */
  name: string;
}

/** Name availability result payload */
export interface NameAvailability {
  /** Indicates whether the name is available */
  nameAvailable?: boolean;
  /** Reason why the name is not available */
  reason?: string;
  /** Message why the name is not available */
  message?: string;
}

/** Custom domain of app resource payload. */
export interface CustomDomainProperties {
  /** The thumbprint of bound certificate. */
  thumbprint?: string;
  /**
   * The app name of domain.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly appName?: string;
  /** The bound certificate name of domain. */
  certName?: string;
  /**
   * Provisioning state of the Domain
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: CustomDomainResourceProvisioningState;
}

/** Collection compose of a custom domain resources list and a possible link for next page. */
export interface CustomDomainResourceCollection {
  /** The custom domain resources list. */
  value?: CustomDomainResource[];
  /** The link to next page of custom domain list. */
  nextLink?: string;
}

/** Custom domain validate payload. */
export interface CustomDomainValidatePayload {
  /** Name to be validated */
  name: string;
}

/** Validation result for custom domain. */
export interface CustomDomainValidateResult {
  /** Indicates if domain name is valid. */
  isValid?: boolean;
  /** Message of why domain name is invalid. */
  message?: string;
}

/** Deployment resource properties payload */
export interface DeploymentResourceProperties {
  /** Uploaded source information of the deployment. */
  source?: UserSourceInfoUnion;
  /** Deployment settings of the Deployment */
  deploymentSettings?: DeploymentSettings;
  /**
   * Provisioning state of the Deployment
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: DeploymentResourceProvisioningState;
  /**
   * Status of the Deployment
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: DeploymentResourceStatus;
  /** Indicates whether the Deployment is active */
  active?: boolean;
  /**
   * Collection of instances belong to the Deployment
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instances?: DeploymentInstance[];
}

/** Source information for a deployment */
export interface UserSourceInfo {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type:
    | "UploadedUserSourceInfo"
    | "Jar"
    | "Source"
    | "NetCoreZip"
    | "BuildResult"
    | "Container";
  /** Version of the source */
  version?: string;
}

/** Deployment settings payload */
export interface DeploymentSettings {
  /** The requested resource quantity for required CPU and Memory. It is recommended that using this field to represent the required CPU and Memory, the old field cpu and memoryInGB will be deprecated later. */
  resourceRequests?: ResourceRequests;
  /** Collection of environment variables */
  environmentVariables?: { [propertyName: string]: string };
  /** Collection of addons */
  addonConfigs?: { [propertyName: string]: Record<string, unknown> };
  /** Periodic probe of App Instance liveness. App Instance will be restarted if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes */
  livenessProbe?: Probe;
  /** Periodic probe of App Instance service readiness. App Instance will be removed from service endpoints if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes */
  readinessProbe?: Probe;
  /** StartupProbe indicates that the App Instance has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a App Instance's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes */
  startupProbe?: Probe;
  /** Optional duration in seconds the App Instance needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the App Instance are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 90 seconds. */
  terminationGracePeriodSeconds?: number;
  /** Scaling properties for the Azure Spring Apps App Instance. */
  scale?: Scale;
  /** Container liveness and readiness probe settings */
  containerProbeSettings?: ContainerProbeSettings;
}

/** Deployment resource request payload */
export interface ResourceRequests {
  /** Required CPU. 1 core can be represented by 1 or 1000m. This should be 500m or 1 for Basic tier, and {500m, 1, 2, 3, 4} for Standard tier. */
  cpu?: string;
  /** Required memory. 1 GB can be represented by 1Gi or 1024Mi. This should be {512Mi, 1Gi, 2Gi} for Basic tier, and {512Mi, 1Gi, 2Gi, ..., 8Gi} for Standard tier. */
  memory?: string;
}

/** Probe describes a health check to be performed against an App Instance to determine whether it is alive or ready to receive traffic. */
export interface Probe {
  /** The action of the probe. */
  probeAction?: ProbeActionUnion;
  /** Indicate whether the probe is disabled. */
  disableProbe: boolean;
  /** Number of seconds after the App Instance has started before probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes */
  initialDelaySeconds?: number;
  /** How often (in seconds) to perform the probe. Minimum value is 1. */
  periodSeconds?: number;
  /** Number of seconds after which the probe times out. Minimum value is 1. */
  timeoutSeconds?: number;
  /** Minimum consecutive failures for the probe to be considered failed after having succeeded. Minimum value is 1. */
  failureThreshold?: number;
  /** Minimum consecutive successes for the probe to be considered successful after having failed. Must be 1 for liveness and startup. Minimum value is 1. */
  successThreshold?: number;
}

/** The action of the probe. */
export interface ProbeAction {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "HTTPGetAction" | "ExecAction" | "TCPSocketAction";
}

/** Azure Spring Apps scaling configurations. */
export interface Scale {
  /** Optional. Minimum number of container replicas. */
  minReplicas?: number;
  /** Optional. Maximum number of container replicas. Defaults to 10 if not set. */
  maxReplicas?: number;
  /** Scaling rules. */
  rules?: ScaleRule[];
}

/** Azure Spring Apps App Instance scaling rule. */
export interface ScaleRule {
  /** Scale Rule Name */
  name?: string;
  /** Azure Queue based scaling. */
  azureQueue?: QueueScaleRule;
  /** Custom scale rule. */
  custom?: CustomScaleRule;
  /** HTTP requests based scaling. */
  http?: HttpScaleRule;
  /** Tcp requests based scaling. */
  tcp?: TcpScaleRule;
}

/** Azure Spring Apps App Instance Azure Queue based scaling rule. */
export interface QueueScaleRule {
  /** Queue name. */
  queueName?: string;
  /** Queue length. */
  queueLength?: number;
  /** Authentication secrets for the queue scale rule. */
  auth?: ScaleRuleAuth[];
}

/** Auth Secrets for Azure Spring Apps App Instance Scale Rule */
export interface ScaleRuleAuth {
  /** Name of the Azure Spring Apps App Instance secret from which to pull the auth params. */
  secretRef?: string;
  /** Trigger Parameter that uses the secret */
  triggerParameter?: string;
}

/** Azure Spring Apps App Instance Custom scaling rule. */
export interface CustomScaleRule {
  /**
   * Type of the custom scale rule
   * eg: azure-servicebus, redis etc.
   */
  type?: string;
  /** Metadata properties to describe custom scale rule. */
  metadata?: { [propertyName: string]: string };
  /** Authentication secrets for the custom scale rule. */
  auth?: ScaleRuleAuth[];
}

/** Azure Spring Apps App Instance Http scaling rule. */
export interface HttpScaleRule {
  /** Metadata properties to describe http scale rule. */
  metadata?: { [propertyName: string]: string };
  /** Authentication secrets for the custom scale rule. */
  auth?: ScaleRuleAuth[];
}

/** Azure Spring Apps App Instance Tcp scaling rule. */
export interface TcpScaleRule {
  /** Metadata properties to describe tcp scale rule. */
  metadata?: { [propertyName: string]: string };
  /** Authentication secrets for the tcp scale rule. */
  auth?: ScaleRuleAuth[];
}

/** Container liveness and readiness probe settings */
export interface ContainerProbeSettings {
  /** Indicates whether disable the liveness and readiness probe */
  disableProbe?: boolean;
}

/** Deployment instance payload */
export interface DeploymentInstance {
  /**
   * Name of the deployment instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Status of the deployment instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: string;
  /**
   * Failed reason of the deployment instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly reason?: string;
  /**
   * Discovery status of the deployment instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly discoveryStatus?: string;
  /**
   * Start time of the deployment instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startTime?: string;
  /**
   * Availability zone information of the deployment instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly zone?: string;
}

/** Object that includes an array of App resources and a possible link for next set */
export interface DeploymentResourceCollection {
  /** Collection of Deployment resources */
  value?: DeploymentResource[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** A list of deployments resource ids. */
export interface DeploymentList {
  /** A list of deployment resource ids. */
  deployments?: string[];
}

/** Remote debugging payload. */
export interface RemoteDebuggingPayload {
  /** Application debugging port. */
  port?: number;
}

/** Remote debugging config. */
export interface RemoteDebugging {
  /** Application debugging port */
  port?: number;
  /** Indicate if remote debugging is enabled */
  enabled?: boolean;
}

/** Log file URL payload */
export interface LogFileUrlResponse {
  /** URL of the log file */
  url: string;
}

/** Diagnostic parameters of diagnostic operations */
export interface DiagnosticParameters {
  /** App instance name */
  appInstance?: string;
  /** Your target file path in your own BYOS */
  filePath?: string;
  /** Duration of your JFR. 1 min can be represented by 1m or 60s. */
  duration?: string;
}

/** Object that includes an array of Service resources and a possible link for next set */
export interface ServiceResourceList {
  /** Collection of Service resources */
  value?: ServiceResource[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** Available operations of the service */
export interface AvailableOperations {
  /** Collection of available operation details */
  value?: OperationDetail[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** Operation detail payload */
export interface OperationDetail {
  /** Name of the operation */
  name?: string;
  /** Indicates whether the operation is a data action */
  isDataAction?: boolean;
  /** Display of the operation */
  display?: OperationDisplay;
  /**
   * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actionType?: ActionType;
  /** Origin of the operation */
  origin?: string;
  /** Properties of the operation */
  properties?: OperationProperties;
}

/** Operation display payload */
export interface OperationDisplay {
  /** Resource provider of the operation */
  provider?: string;
  /** Resource of the operation */
  resource?: string;
  /** Localized friendly name for the operation */
  operation?: string;
  /** Localized friendly description for the operation */
  description?: string;
}

/** Extra Operation properties */
export interface OperationProperties {
  /** Service specifications of the operation */
  serviceSpecification?: ServiceSpecification;
}

/** Service specification payload */
export interface ServiceSpecification {
  /** Specifications of the Log for Azure Monitoring */
  logSpecifications?: LogSpecification[];
  /** Specifications of the Metrics for Azure Monitoring */
  metricSpecifications?: MetricSpecification[];
}

/** Specifications of the Log for Azure Monitoring */
export interface LogSpecification {
  /** Name of the log */
  name?: string;
  /** Localized friendly display name of the log */
  displayName?: string;
  /** Blob duration of the log */
  blobDuration?: string;
}

/** Specifications of the Metrics for Azure Monitoring */
export interface MetricSpecification {
  /** Name of the metric */
  name?: string;
  /** Localized friendly display name of the metric */
  displayName?: string;
  /** Localized friendly description of the metric */
  displayDescription?: string;
  /** Unit that makes sense for the metric */
  unit?: string;
  /** Name of the metric category that the metric belongs to. A metric can only belong to a single category. */
  category?: string;
  /** Only provide one value for this field. Valid values: Average, Minimum, Maximum, Total, Count. */
  aggregationType?: string;
  /** Supported aggregation types */
  supportedAggregationTypes?: string[];
  /** Supported time grain types */
  supportedTimeGrainTypes?: string[];
  /** Optional. If set to true, then zero will be returned for time duration where no metric is emitted/published. */
  fillGapWithZero?: boolean;
  /** Dimensions of the metric */
  dimensions?: MetricDimension[];
  /** Name of the MDM namespace. Optional. */
  sourceMdmNamespace?: string;
}

/** Specifications of the Dimension of metrics */
export interface MetricDimension {
  /** Name of the dimension */
  name?: string;
  /** Localized friendly display name of the dimension */
  displayName?: string;
  /** Whether this dimension should be included for the Shoebox export scenario */
  toBeExportedForShoebox?: boolean;
}

export interface AvailableRuntimeVersions {
  /**
   * A list of all supported runtime versions.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: SupportedRuntimeVersion[];
}

/** Supported deployment runtime version descriptor. */
export interface SupportedRuntimeVersion {
  /** The raw value which could be passed to deployment CRUD operations. */
  value?: SupportedRuntimeValue;
  /** The platform of this runtime version (possible values: "Java" or ".NET"). */
  platform?: SupportedRuntimePlatform;
  /** The detailed version (major.minor) of the platform. */
  version?: string;
}

/** Object that includes an array of Azure Spring Apps SKU and a possible link for next set */
export interface ResourceSkuCollection {
  /** Collection of resource SKU */
  value?: ResourceSku[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** Describes an available Azure Spring Apps SKU. */
export interface ResourceSku {
  /** Gets the type of resource the SKU applies to. */
  resourceType?: string;
  /** Gets the name of SKU. */
  name?: string;
  /** Gets the tier of SKU. */
  tier?: string;
  /** Gets the capacity of SKU. */
  capacity?: SkuCapacity;
  /** Gets the set of locations that the SKU is available. */
  locations?: string[];
  /** Gets a list of locations and availability zones in those locations where the SKU is available. */
  locationInfo?: ResourceSkuLocationInfo[];
  /**
   * Gets the restrictions because of which SKU cannot be used. This is
   * empty if there are no restrictions.
   */
  restrictions?: ResourceSkuRestrictions[];
}

/** The SKU capacity */
export interface SkuCapacity {
  /** Gets or sets the minimum. */
  minimum: number;
  /** Gets or sets the maximum. */
  maximum?: number;
  /** Gets or sets the default. */
  default?: number;
  /** Gets or sets the type of the scale. */
  scaleType?: SkuScaleType;
}

/** Locations and availability zones where the SKU is available */
export interface ResourceSkuLocationInfo {
  /** Gets location of the SKU */
  location?: string;
  /** Gets list of availability zones where the SKU is supported. */
  zones?: string[];
  /** Gets details of capabilities available to a SKU in specific zones. */
  zoneDetails?: ResourceSkuZoneDetails[];
}

/** Details of capabilities available to a SKU in specific zones */
export interface ResourceSkuZoneDetails {
  /**
   * Gets the set of zones that the SKU is available in with the
   * specified capabilities.
   */
  name?: string[];
  /**
   * Gets a list of capabilities that are available for the SKU in the
   * specified list of zones.
   */
  capabilities?: ResourceSkuCapabilities[];
}

export interface ResourceSkuCapabilities {
  /** Gets an invariant to describe the feature. */
  name?: string;
  /** Gets an invariant if the feature is measured by quantity. */
  value?: string;
}

/** Restrictions where the SKU cannot be used */
export interface ResourceSkuRestrictions {
  /** Gets the type of restrictions. Possible values include: 'Location', 'Zone' */
  type?: ResourceSkuRestrictionsType;
  /**
   * Gets the value of restrictions. If the restriction type is set to
   * location. This would be different locations where the SKU is restricted.
   */
  values?: string[];
  /** Gets the information about the restriction where the SKU cannot be used. */
  restrictionInfo?: ResourceSkuRestrictionInfo;
  /** Gets the reason for restriction. Possible values include: 'QuotaId', 'NotAvailableForSubscription' */
  reasonCode?: ResourceSkuRestrictionsReasonCode;
}

/** Information about the restriction where the SKU cannot be used */
export interface ResourceSkuRestrictionInfo {
  /** Gets locations where the SKU is restricted */
  locations?: string[];
  /** Gets list of availability zones where the SKU is restricted. */
  zones?: string[];
}

/** Spring Cloud Gateway properties payload */
export interface GatewayProperties {
  /**
   * State of the Spring Cloud Gateway.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: GatewayProvisioningState;
  /** Indicates whether the Spring Cloud Gateway exposes endpoint. */
  public?: boolean;
  /**
   * URL of the Spring Cloud Gateway, exposed when 'public' is true.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly url?: string;
  /** Indicate if only https is allowed. */
  httpsOnly?: boolean;
  /** Single sign-on related configuration */
  ssoProperties?: SsoProperties;
  /** API metadata property for Spring Cloud Gateway */
  apiMetadataProperties?: GatewayApiMetadataProperties;
  /** Cross-Origin Resource Sharing property */
  corsProperties?: GatewayCorsProperties;
  /** Client-Certification Authentication. */
  clientAuth?: GatewayPropertiesClientAuth;
  /** Collection of APM type used in Spring Cloud Gateway */
  apmTypes?: ApmType[];
  /** Environment variables of Spring Cloud Gateway */
  environmentVariables?: GatewayPropertiesEnvironmentVariables;
  /** The requested resource quantity for required CPU and Memory. */
  resourceRequests?: GatewayResourceRequests;
  /**
   * Collection of instances belong to Spring Cloud Gateway.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instances?: GatewayInstance[];
  /**
   * Properties of the Spring Cloud Gateway Operator.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operatorProperties?: GatewayOperatorProperties;
}

/** Single sign-on related configuration */
export interface SsoProperties {
  /** It defines the specific actions applications can be allowed to do on a user's behalf */
  scope?: string[];
  /** The public identifier for the application */
  clientId?: string;
  /** The secret known only to the application and the authorization server */
  clientSecret?: string;
  /** The URI of Issuer Identifier */
  issuerUri?: string;
}

/** API metadata property for Spring Cloud Gateway */
export interface GatewayApiMetadataProperties {
  /** Title describing the context of the APIs available on the Gateway instance (default: `Spring Cloud Gateway for K8S`) */
  title?: string;
  /** Detailed description of the APIs available on the Gateway instance (default: `Generated OpenAPI 3 document that describes the API routes configured.`) */
  description?: string;
  /** Location of additional documentation for the APIs available on the Gateway instance */
  documentation?: string;
  /** Version of APIs available on this Gateway instance (default: `unspecified`). */
  version?: string;
  /** Base URL that API consumers will use to access APIs on the Gateway instance. */
  serverUrl?: string;
}

/** Cross-Origin Resource Sharing property */
export interface GatewayCorsProperties {
  /** Allowed origins to make cross-site requests. The special value `*` allows all domains. */
  allowedOrigins?: string[];
  /** Allowed HTTP methods on cross-site requests. The special value `*` allows all methods. If not set, `GET` and `HEAD` are allowed by default. */
  allowedMethods?: string[];
  /** Allowed headers in cross-site requests. The special value `*` allows actual requests to send any header. */
  allowedHeaders?: string[];
  /** How long, in seconds, the response from a pre-flight request can be cached by clients. */
  maxAge?: number;
  /** Whether user credentials are supported on cross-site requests. Valid values: `true`, `false`. */
  allowCredentials?: boolean;
  /** HTTP response headers to expose for cross-site requests. */
  exposedHeaders?: string[];
}

/** Client-Certification Authentication. */
export interface GatewayPropertiesClientAuth {
  /** Collection of certificate resource Ids in Azure Spring Apps. */
  certificates?: string[];
  /** Whether to enable certificate verification or not */
  certificateVerification?: GatewayCertificateVerification;
}

/** Environment variables of Spring Cloud Gateway */
export interface GatewayPropertiesEnvironmentVariables {
  /** Non-sensitive properties */
  properties?: { [propertyName: string]: string };
  /** Sensitive properties */
  secrets?: { [propertyName: string]: string };
}

/** Resource request payload of Spring Cloud Gateway. */
export interface GatewayResourceRequests {
  /** Cpu allocated to each Spring Cloud Gateway instance. */
  cpu?: string;
  /** Memory allocated to each Spring Cloud Gateway instance. */
  memory?: string;
}

/** Collection of instances belong to the Spring Cloud Gateway */
export interface GatewayInstance {
  /**
   * Name of the Spring Cloud Gateway instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Status of the Spring Cloud Gateway instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: string;
}

/** Properties of the Spring Cloud Gateway Operator. */
export interface GatewayOperatorProperties {
  /**
   * The requested resource quantity for required CPU and Memory.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceRequests?: GatewayOperatorResourceRequests;
  /**
   * Collection of instances belong to Spring Cloud Gateway operator.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instances?: GatewayInstance[];
}

/** Properties of the Spring Cloud Gateway Operator. */
export interface GatewayOperatorResourceRequests {
  /**
   * Cpu allocated to each Spring Cloud Gateway Operator instance.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cpu?: string;
  /**
   * Memory allocated to each Spring Cloud Gateway Operator instance.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly memory?: string;
  /**
   * Instance count of the Spring Cloud Gateway Operator.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instanceCount?: number;
}

/** Resource Sku object used for scaling out and scaling in. */
export interface SkuObject {
  /** Sku of the Spring Cloud Gateway resource */
  sku?: Sku;
}

/** Object that includes an array of gateway resources and a possible link for next set */
export interface GatewayResourceCollection {
  /** Collection of gateway resources */
  value?: GatewayResource[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** API route config of the Spring Cloud Gateway */
export interface GatewayRouteConfigProperties {
  /**
   * State of the Spring Cloud Gateway route config.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: GatewayProvisioningState;
  /** The resource Id of the Azure Spring Apps app, required unless route defines `uri`. */
  appResourceId?: string;
  /** OpenAPI properties of Spring Cloud Gateway route config. */
  openApi?: GatewayRouteConfigOpenApiProperties;
  /** Protocol of routed Azure Spring Apps applications. */
  protocol?: GatewayRouteConfigProtocol;
  /** Array of API routes, each route contains properties such as `title`, `uri`, `ssoEnabled`, `predicates`, `filters`. */
  routes?: GatewayApiRoute[];
  /** Enable Single Sign-On in app level. */
  ssoEnabled?: boolean;
  /** A number of conditions to evaluate a route for each request in app level. Each predicate may be evaluated against request headers and parameter values. All of the predicates associated with a route must evaluate to true for the route to be matched to the request. */
  predicates?: string[];
  /** To modify the request before sending it to the target endpoint, or the received response in app level. */
  filters?: string[];
}

/** OpenAPI properties of Spring Cloud Gateway route config. */
export interface GatewayRouteConfigOpenApiProperties {
  /** The URI of OpenAPI specification. */
  uri?: string;
}

/** API route config of the Spring Cloud Gateway */
export interface GatewayApiRoute {
  /** A title, will be applied to methods in the generated OpenAPI documentation. */
  title?: string;
  /** A description, will be applied to methods in the generated OpenAPI documentation. */
  description?: string;
  /** Full uri, will override `appName`. */
  uri?: string;
  /** Enable sso validation. */
  ssoEnabled?: boolean;
  /** Pass currently-authenticated user's identity token to application service, default is 'false' */
  tokenRelay?: boolean;
  /** A number of conditions to evaluate a route for each request. Each predicate may be evaluated against request headers and parameter values. All of the predicates associated with a route must evaluate to true for the route to be matched to the request. */
  predicates?: string[];
  /** To modify the request before sending it to the target endpoint, or the received response. */
  filters?: string[];
  /** Route processing order. */
  order?: number;
  /** Classification tags, will be applied to methods in the generated OpenAPI documentation. */
  tags?: string[];
}

/** Object that includes an array of Spring Cloud Gateway route config resources and a possible link for next set */
export interface GatewayRouteConfigResourceCollection {
  /** Collection of Spring Cloud Gateway route config resources */
  value?: GatewayRouteConfigResource[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** The properties of custom domain for Spring Cloud Gateway */
export interface GatewayCustomDomainProperties {
  /** The thumbprint of bound certificate. */
  thumbprint?: string;
}

/** Object that includes an array of Spring Cloud Gateway custom domain resources and a possible link for next set */
export interface GatewayCustomDomainResourceCollection {
  /** Collection of Spring Cloud Gateway custom domain resources */
  value?: GatewayCustomDomainResource[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** API portal properties payload */
export interface ApiPortalProperties {
  /**
   * State of the API portal.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ApiPortalProvisioningState;
  /** Indicates whether the API portal exposes endpoint. */
  public?: boolean;
  /**
   * URL of the API portal, exposed when 'public' is true.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly url?: string;
  /** Indicate if only https is allowed. */
  httpsOnly?: boolean;
  /** The array of resource Ids of gateway to integrate with API portal. */
  gatewayIds?: string[];
  /** Collection of OpenAPI source URL locations. */
  sourceUrls?: string[];
  /** Single sign-on related configuration */
  ssoProperties?: SsoProperties;
  /**
   * The requested resource quantity for required CPU and Memory.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceRequests?: ApiPortalResourceRequests;
  /**
   * Collection of instances belong to API portal.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instances?: ApiPortalInstance[];
}

/** Resource requests of the API portal */
export interface ApiPortalResourceRequests {
  /**
   * Cpu allocated to each API portal instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cpu?: string;
  /**
   * Memory allocated to each API portal instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly memory?: string;
}

/** Collection of instances belong to the API portal */
export interface ApiPortalInstance {
  /**
   * Name of the API portal instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Status of the API portal instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: string;
}

/** Object that includes an array of API portal resources and a possible link for next set */
export interface ApiPortalResourceCollection {
  /** Collection of API portal resources */
  value?: ApiPortalResource[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** The properties of custom domain for API portal */
export interface ApiPortalCustomDomainProperties {
  /** The thumbprint of bound certificate. */
  thumbprint?: string;
}

/** Object that includes an array of API portal custom domain resources and a possible link for next set */
export interface ApiPortalCustomDomainResourceCollection {
  /** Collection of API portal custom domain resources */
  value?: ApiPortalCustomDomainResource[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** Object that includes an array of application accelerator resources and a possible link for next set */
export interface ApplicationAcceleratorResourceCollection {
  /** Collection of application accelerator resources */
  value?: ApplicationAcceleratorResource[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** Application accelerator properties payload */
export interface ApplicationAcceleratorProperties {
  /**
   * State of the application accelerator.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ApplicationAcceleratorProvisioningState;
  /**
   * Collection of components belong to application accelerator.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly components?: ApplicationAcceleratorComponent[];
}

export interface ApplicationAcceleratorComponent {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly name?: string;
  resourceRequests?: ApplicationAcceleratorResourceRequests;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly instances?: ApplicationAcceleratorInstance[];
}

export interface ApplicationAcceleratorResourceRequests {
  /**
   * Cpu allocated to each application accelerator component. 1 core can be represented by 1 or 1000m
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cpu?: string;
  /**
   * Memory allocated to each application accelerator component. 1 GB can be represented by 1Gi or 1024Mi.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly memory?: string;
  /**
   * Instance count of the application accelerator component.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instanceCount?: number;
}

export interface ApplicationAcceleratorInstance {
  /**
   * Name of the Application Accelerator instance.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Status of the Application Accelerator instance. It can be Pending, Running, Succeeded, Failed, Unknown.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: string;
}

export interface CustomizedAcceleratorResourceCollection {
  value?: CustomizedAcceleratorResource[];
  nextLink?: string;
}

/** Customized accelerator properties payload */
export interface CustomizedAcceleratorProperties {
  /**
   * State of the customized accelerator.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: CustomizedAcceleratorProvisioningState;
  displayName?: string;
  description?: string;
  iconUrl?: string;
  acceleratorTags?: string[];
  gitRepository: AcceleratorGitRepository;
}

export interface AcceleratorGitRepository {
  /** Git repository URL for the accelerator. */
  url: string;
  /** Interval for checking for updates to Git or image repository. */
  intervalInSeconds?: number;
  /** Git repository branch to be used. */
  branch?: string;
  /** Git repository commit to be used. */
  commit?: string;
  /** Git repository tag to be used. */
  gitTag?: string;
  /** Properties of the auth setting payload. */
  authSetting: AcceleratorAuthSettingUnion;
}

/** Auth setting payload. */
export interface AcceleratorAuthSetting {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  authType: "Public" | "BasicAuth" | "SSH";
}

/** Validation result for customized accelerator properties */
export interface CustomizedAcceleratorValidateResult {
  /** State of the customized accelerator validation result */
  state?: CustomizedAcceleratorValidateResultState;
  /** The detail validation results */
  errorMessage?: string;
}

export interface PredefinedAcceleratorResourceCollection {
  value?: PredefinedAcceleratorResource[];
  nextLink?: string;
}

/** Predefined accelerator properties payload */
export interface PredefinedAcceleratorProperties {
  /**
   * Provisioning state of the predefined accelerator.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: PredefinedAcceleratorProvisioningState;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly displayName?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly description?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly iconUrl?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly acceleratorTags?: string[];
  /** State of the predefined accelerator. */
  state?: PredefinedAcceleratorState;
}

/** Custom container payload */
export interface CustomContainer {
  /** The name of the registry that contains the container image */
  server?: string;
  /** Container image of the custom container. This should be in the form of <repository>:<tag> without the server name of the registry */
  containerImage?: string;
  /** Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. */
  command?: string[];
  /** Arguments to the entrypoint. The docker image's CMD is used if this is not provided. */
  args?: string[];
  /** Credential of the image registry */
  imageRegistryCredential?: ImageRegistryCredential;
  /** Language framework of the container image uploaded */
  languageFramework?: string;
}

/** Credential of the image registry */
export interface ImageRegistryCredential {
  /** The username of the image registry credential */
  username?: string;
  /** The password of the image registry credential */
  password?: string;
}

/** The resource model definition for a ARM tracked top level resource. */
export interface TrackedResource extends Resource {
  /** The GEO location of the resource. */
  location?: string;
  /** Tags of the service which is a list of key value pairs that describe the resource. */
  tags?: { [propertyName: string]: string };
}

/** The resource model definition for a ARM proxy resource. It will have everything other than required location and tags. */
export interface ProxyResource extends Resource {}

/** The basic authentication properties for the container registry resource. */
export interface ContainerRegistryBasicCredentials
  extends ContainerRegistryCredentials {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "BasicAuth";
  /** The login server of the Container Registry. */
  server: string;
  /** The username of the Container Registry. */
  username: string;
  /** The password of the Container Registry. */
  password: string;
}

/** The properties of the Azure File volume. Azure File shares are mounted as volumes. */
export interface AzureFileVolume extends CustomPersistentDiskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "AzureFileVolume";
  /** The share name of the Azure File share. */
  shareName?: string;
}

/** storage resource of type Azure Storage Account. */
export interface StorageAccount extends StorageProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  storageType: "StorageAccount";
  /** The account name of the Azure Storage Account. */
  accountName: string;
  /** The account key of the Azure Storage Account. */
  accountKey: string;
}

/** Properties of certificate imported from key vault. */
export interface KeyVaultCertificateProperties extends CertificateProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "KeyVaultCertificate";
  /** The vault uri of user key vault. */
  vaultUri: string;
  /** The certificate name of key vault. */
  keyVaultCertName: string;
  /** The certificate version of key vault. */
  certVersion?: string;
  /** Optional. If set to true, it will not import private key from key vault. */
  excludePrivateKey?: boolean;
}

/** Properties of certificate imported from key vault. */
export interface ContentCertificateProperties extends CertificateProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "ContentCertificate";
  /** The content of uploaded certificate. */
  content?: string;
}

/** Source with uploaded location */
export interface UploadedUserSourceInfo extends UserSourceInfo {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "UploadedUserSourceInfo" | "Jar" | "Source" | "NetCoreZip";
  /** Relative path of the storage which stores the source */
  relativePath?: string;
}

/** Reference to a build result */
export interface BuildResultUserSourceInfo extends UserSourceInfo {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "BuildResult";
  /** Resource id of an existing succeeded build result under the same Spring instance. */
  buildResultId?: string;
}

/** Custom container user source info */
export interface CustomContainerUserSourceInfo extends UserSourceInfo {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "Container";
  /** Custom container payload */
  customContainer?: CustomContainer;
}

/** HTTPGetAction describes an action based on HTTP Get requests. */
export interface HttpGetAction extends ProbeAction {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "HTTPGetAction";
  /** Path to access on the HTTP server. */
  path?: string;
  /**
   * Scheme to use for connecting to the host. Defaults to HTTP.
   *
   * Possible enum values:
   *  - `"HTTP"` means that the scheme used will be http://
   *  - `"HTTPS"` means that the scheme used will be https://
   */
  scheme?: HttpSchemeType;
}

/** ExecAction describes a "run in container" action. */
export interface ExecAction extends ProbeAction {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "ExecAction";
  /** Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy. */
  command?: string[];
}

/** TCPSocketAction describes an action based on opening a socket */
export interface TCPSocketAction extends ProbeAction {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "TCPSocketAction";
}

/** Auth setting for public url. */
export interface AcceleratorPublicSetting extends AcceleratorAuthSetting {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  authType: "Public";
  /** Resource Id of CA certificate for https URL of Git repository. */
  caCertResourceId?: string;
}

/** Auth setting for basic auth. */
export interface AcceleratorBasicAuthSetting extends AcceleratorAuthSetting {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  authType: "BasicAuth";
  /** Resource Id of CA certificate for https URL of Git repository. */
  caCertResourceId?: string;
  /** Username of git repository basic auth. */
  username: string;
  /** Password of git repository basic auth. */
  password?: string;
}

/** Auth setting for SSH auth. */
export interface AcceleratorSshSetting extends AcceleratorAuthSetting {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  authType: "SSH";
  /** Public SSH Key of git repository. */
  hostKey?: string;
  /** SSH Key algorithm of git repository. */
  hostKeyAlgorithm?: string;
  /** Private SSH Key algorithm of git repository. */
  privateKey?: string;
}

/** Service resource */
export interface ServiceResource extends TrackedResource {
  /** Properties of the Service resource */
  properties?: ClusterResourceProperties;
  /** Sku of the Service resource */
  sku?: Sku;
}

/** Config Server resource */
export interface ConfigServerResource extends ProxyResource {
  /** Properties of the Config Server resource */
  properties?: ConfigServerProperties;
}

/** Application Configuration Service resource */
export interface ConfigurationServiceResource extends ProxyResource {
  /** Application Configuration Service properties payload */
  properties?: ConfigurationServiceProperties;
}

/** Service Registry resource */
export interface ServiceRegistryResource extends ProxyResource {
  /** Service Registry properties payload */
  properties?: ServiceRegistryProperties;
}

/** Application Live View resource */
export interface ApplicationLiveViewResource extends ProxyResource {
  /** Application Live View properties payload */
  properties?: ApplicationLiveViewProperties;
}

/** Dev Tool Portal resource */
export interface DevToolPortalResource extends ProxyResource {
  /** Dev Tool Portal properties payload */
  properties?: DevToolPortalProperties;
}

/** Container registry resource payload. */
export interface ContainerRegistryResource extends ProxyResource {
  /** Properties of the container registry resource payload. */
  properties?: ContainerRegistryProperties;
}

/** Build service resource payload */
export interface BuildService extends ProxyResource {
  /** Properties of the build resource */
  properties?: BuildServiceProperties;
}

/** Build resource payload */
export interface Build extends ProxyResource {
  /** Properties of the build resource */
  properties?: BuildProperties;
}

/** Buildpack Binding Resource object */
export interface BuildpackBindingResource extends ProxyResource {
  /** Properties of a buildpack binding */
  properties?: BuildpackBindingProperties;
}

/** Build result resource payload */
export interface BuildResult extends ProxyResource {
  /** Properties of the build result resource */
  properties?: BuildResultProperties;
}

/** KPack Builder resource */
export interface BuilderResource extends ProxyResource {
  /** Property of the Builder resource. */
  properties?: BuilderProperties;
}

/** Supported buildpack resource payload */
export interface SupportedBuildpackResource extends ProxyResource {
  /** Supported buildpack resource properties */
  properties?: SupportedBuildpackResourceProperties;
}

/** Supported stack resource payload */
export interface SupportedStackResource extends ProxyResource {
  /** Supported stack resource properties */
  properties?: SupportedStackResourceProperties;
}

/** The build service agent pool resource */
export interface BuildServiceAgentPoolResource extends ProxyResource {
  /** build service agent pool properties */
  properties?: BuildServiceAgentPoolProperties;
}

/** Monitoring Setting resource */
export interface MonitoringSettingResource extends ProxyResource {
  /** Properties of the Monitoring Setting resource */
  properties?: MonitoringSettingProperties;
}

/** App resource payload */
export interface AppResource extends ProxyResource {
  /** Properties of the App resource */
  properties?: AppResourceProperties;
  /** The Managed Identity type of the app resource */
  identity?: ManagedIdentityProperties;
  /** The GEO location of the application, always the same with its parent resource */
  location?: string;
}

/** Binding resource payload */
export interface BindingResource extends ProxyResource {
  /** Properties of the Binding resource */
  properties?: BindingResourceProperties;
}

/** Storage resource payload. */
export interface StorageResource extends ProxyResource {
  /** Properties of the storage resource payload. */
  properties?: StoragePropertiesUnion;
}

/** Certificate resource payload. */
export interface CertificateResource extends ProxyResource {
  /** Properties of the certificate resource payload. */
  properties?: CertificatePropertiesUnion;
}

/** Custom domain resource payload. */
export interface CustomDomainResource extends ProxyResource {
  /** Properties of the custom domain resource. */
  properties?: CustomDomainProperties;
}

/** Deployment resource payload */
export interface DeploymentResource extends ProxyResource {
  /** Properties of the Deployment resource */
  properties?: DeploymentResourceProperties;
  /** Sku of the Deployment resource */
  sku?: Sku;
}

/** Spring Cloud Gateway resource */
export interface GatewayResource extends ProxyResource {
  /** Spring Cloud Gateway properties payload */
  properties?: GatewayProperties;
  /** Sku of the Spring Cloud Gateway resource */
  sku?: Sku;
}

/** Spring Cloud Gateway route config resource */
export interface GatewayRouteConfigResource extends ProxyResource {
  /** API route config of the Spring Cloud Gateway */
  properties?: GatewayRouteConfigProperties;
}

/** Custom domain of the Spring Cloud Gateway */
export interface GatewayCustomDomainResource extends ProxyResource {
  /** The properties of custom domain for Spring Cloud Gateway */
  properties?: GatewayCustomDomainProperties;
}

/** API portal resource */
export interface ApiPortalResource extends ProxyResource {
  /** API portal properties payload */
  properties?: ApiPortalProperties;
  /** Sku of the API portal resource */
  sku?: Sku;
}

/** Custom domain of the API portal */
export interface ApiPortalCustomDomainResource extends ProxyResource {
  /** The properties of custom domain for API portal */
  properties?: ApiPortalCustomDomainProperties;
}

/** Application accelerator resource */
export interface ApplicationAcceleratorResource extends ProxyResource {
  /** Application accelerator properties payload */
  properties?: ApplicationAcceleratorProperties;
  /** Sku of the application accelerator resource */
  sku?: Sku;
}

/** Customized accelerator resource */
export interface CustomizedAcceleratorResource extends ProxyResource {
  /** Customized accelerator properties payload */
  properties?: CustomizedAcceleratorProperties;
  /** Sku of the customized accelerator resource */
  sku?: Sku;
}

/** Predefined accelerator resource */
export interface PredefinedAcceleratorResource extends ProxyResource {
  /** Predefined accelerator properties payload */
  properties?: PredefinedAcceleratorProperties;
  /** Sku of the predefined accelerator resource */
  sku?: Sku;
}

/** Uploaded Jar binary for a deployment */
export interface JarUploadedUserSourceInfo extends UploadedUserSourceInfo {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "Jar";
  /** Runtime version of the Jar file */
  runtimeVersion?: string;
  /** JVM parameter */
  jvmOptions?: string;
}

/** Uploaded Java source code binary for a deployment */
export interface SourceUploadedUserSourceInfo extends UploadedUserSourceInfo {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "Source";
  /**
   * Selector for the artifact to be used for the deployment for multi-module projects. This should be
   * the relative path to the target module/project.
   */
  artifactSelector?: string;
  /** Runtime version of the source file */
  runtimeVersion?: string;
}

/** Uploaded Jar binary for a deployment */
export interface NetCoreZipUploadedUserSourceInfo
  extends UploadedUserSourceInfo {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "NetCoreZip";
  /** The path to the .NET executable relative to zip root */
  netCoreMainEntryPath?: string;
  /** Runtime version of the .Net file */
  runtimeVersion?: string;
}

/** Defines headers for BuildService_deleteBuild operation. */
export interface BuildServiceDeleteBuildHeaders {
  location?: string;
}

/** Defines headers for Gateways_updateCapacity operation. */
export interface GatewaysUpdateCapacityHeaders {
  location?: string;
}

/** Defines headers for Gateways_restart operation. */
export interface GatewaysRestartHeaders {
  location?: string;
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  /** Creating */
  Creating = "Creating",
  /** Updating */
  Updating = "Updating",
  /** Starting */
  Starting = "Starting",
  /** Stopping */
  Stopping = "Stopping",
  /** Deleting */
  Deleting = "Deleting",
  /** Deleted */
  Deleted = "Deleted",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Moving */
  Moving = "Moving",
  /** Moved */
  Moved = "Moved",
  /** MoveFailed */
  MoveFailed = "MoveFailed"
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Starting** \
 * **Stopping** \
 * **Deleting** \
 * **Deleted** \
 * **Succeeded** \
 * **Failed** \
 * **Moving** \
 * **Moved** \
 * **MoveFailed**
 */
export type ProvisioningState = string;

/** Known values of {@link TrafficDirection} that the service accepts. */
export enum KnownTrafficDirection {
  /** Inbound */
  Inbound = "Inbound",
  /** Outbound */
  Outbound = "Outbound"
}

/**
 * Defines values for TrafficDirection. \
 * {@link KnownTrafficDirection} can be used interchangeably with TrafficDirection,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Inbound** \
 * **Outbound**
 */
export type TrafficDirection = string;

/** Known values of {@link PowerState} that the service accepts. */
export enum KnownPowerState {
  /** Running */
  Running = "Running",
  /** Stopped */
  Stopped = "Stopped"
}

/**
 * Defines values for PowerState. \
 * {@link KnownPowerState} can be used interchangeably with PowerState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Running** \
 * **Stopped**
 */
export type PowerState = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link LastModifiedByType} that the service accepts. */
export enum KnownLastModifiedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key"
}

/**
 * Defines values for LastModifiedByType. \
 * {@link KnownLastModifiedByType} can be used interchangeably with LastModifiedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type LastModifiedByType = string;

/** Known values of {@link TestKeyType} that the service accepts. */
export enum KnownTestKeyType {
  /** Primary */
  Primary = "Primary",
  /** Secondary */
  Secondary = "Secondary"
}

/**
 * Defines values for TestKeyType. \
 * {@link KnownTestKeyType} can be used interchangeably with TestKeyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Primary** \
 * **Secondary**
 */
export type TestKeyType = string;

/** Known values of {@link ConfigServerState} that the service accepts. */
export enum KnownConfigServerState {
  /** NotAvailable */
  NotAvailable = "NotAvailable",
  /** Deleted */
  Deleted = "Deleted",
  /** Failed */
  Failed = "Failed",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Updating */
  Updating = "Updating"
}

/**
 * Defines values for ConfigServerState. \
 * {@link KnownConfigServerState} can be used interchangeably with ConfigServerState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotAvailable** \
 * **Deleted** \
 * **Failed** \
 * **Succeeded** \
 * **Updating**
 */
export type ConfigServerState = string;

/** Known values of {@link ConfigurationServiceProvisioningState} that the service accepts. */
export enum KnownConfigurationServiceProvisioningState {
  /** Creating */
  Creating = "Creating",
  /** Updating */
  Updating = "Updating",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Deleting */
  Deleting = "Deleting"
}

/**
 * Defines values for ConfigurationServiceProvisioningState. \
 * {@link KnownConfigurationServiceProvisioningState} can be used interchangeably with ConfigurationServiceProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Deleting**
 */
export type ConfigurationServiceProvisioningState = string;

/** Known values of {@link ServiceRegistryProvisioningState} that the service accepts. */
export enum KnownServiceRegistryProvisioningState {
  /** Creating */
  Creating = "Creating",
  /** Updating */
  Updating = "Updating",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Deleting */
  Deleting = "Deleting"
}

/**
 * Defines values for ServiceRegistryProvisioningState. \
 * {@link KnownServiceRegistryProvisioningState} can be used interchangeably with ServiceRegistryProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Deleting**
 */
export type ServiceRegistryProvisioningState = string;

/** Known values of {@link ApplicationLiveViewProvisioningState} that the service accepts. */
export enum KnownApplicationLiveViewProvisioningState {
  /** Creating */
  Creating = "Creating",
  /** Updating */
  Updating = "Updating",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Deleting */
  Deleting = "Deleting",
  /** Canceled */
  Canceled = "Canceled"
}

/**
 * Defines values for ApplicationLiveViewProvisioningState. \
 * {@link KnownApplicationLiveViewProvisioningState} can be used interchangeably with ApplicationLiveViewProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Deleting** \
 * **Canceled**
 */
export type ApplicationLiveViewProvisioningState = string;

/** Known values of {@link DevToolPortalProvisioningState} that the service accepts. */
export enum KnownDevToolPortalProvisioningState {
  /** Creating */
  Creating = "Creating",
  /** Updating */
  Updating = "Updating",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Deleting */
  Deleting = "Deleting",
  /** Canceled */
  Canceled = "Canceled"
}

/**
 * Defines values for DevToolPortalProvisioningState. \
 * {@link KnownDevToolPortalProvisioningState} can be used interchangeably with DevToolPortalProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Deleting** \
 * **Canceled**
 */
export type DevToolPortalProvisioningState = string;

/** Known values of {@link DevToolPortalFeatureState} that the service accepts. */
export enum KnownDevToolPortalFeatureState {
  /** Enable the plugin in Dev Tool Portal. */
  Enabled = "Enabled",
  /** Disable the plugin in Dev Tool Portal. */
  Disabled = "Disabled"
}

/**
 * Defines values for DevToolPortalFeatureState. \
 * {@link KnownDevToolPortalFeatureState} can be used interchangeably with DevToolPortalFeatureState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled**: Enable the plugin in Dev Tool Portal. \
 * **Disabled**: Disable the plugin in Dev Tool Portal.
 */
export type DevToolPortalFeatureState = string;

/** Known values of {@link ContainerRegistryProvisioningState} that the service accepts. */
export enum KnownContainerRegistryProvisioningState {
  /** Creating */
  Creating = "Creating",
  /** Updating */
  Updating = "Updating",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled"
}

/**
 * Defines values for ContainerRegistryProvisioningState. \
 * {@link KnownContainerRegistryProvisioningState} can be used interchangeably with ContainerRegistryProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled**
 */
export type ContainerRegistryProvisioningState = string;

/** Known values of {@link BuildServiceProvisioningState} that the service accepts. */
export enum KnownBuildServiceProvisioningState {
  /** Creating */
  Creating = "Creating",
  /** Updating */
  Updating = "Updating",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Deleting */
  Deleting = "Deleting"
}

/**
 * Defines values for BuildServiceProvisioningState. \
 * {@link KnownBuildServiceProvisioningState} can be used interchangeably with BuildServiceProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Deleting**
 */
export type BuildServiceProvisioningState = string;

/** Known values of {@link BuildProvisioningState} that the service accepts. */
export enum KnownBuildProvisioningState {
  /** Creating */
  Creating = "Creating",
  /** Updating */
  Updating = "Updating",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Deleting */
  Deleting = "Deleting"
}

/**
 * Defines values for BuildProvisioningState. \
 * {@link KnownBuildProvisioningState} can be used interchangeably with BuildProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Deleting**
 */
export type BuildProvisioningState = string;

/** Known values of {@link BindingType} that the service accepts. */
export enum KnownBindingType {
  /** ApplicationInsights */
  ApplicationInsights = "ApplicationInsights",
  /** ApacheSkyWalking */
  ApacheSkyWalking = "ApacheSkyWalking",
  /** AppDynamics */
  AppDynamics = "AppDynamics",
  /** Dynatrace */
  Dynatrace = "Dynatrace",
  /** NewRelic */
  NewRelic = "NewRelic",
  /** ElasticAPM */
  ElasticAPM = "ElasticAPM",
  /** CACertificates */
  CACertificates = "CACertificates"
}

/**
 * Defines values for BindingType. \
 * {@link KnownBindingType} can be used interchangeably with BindingType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ApplicationInsights** \
 * **ApacheSkyWalking** \
 * **AppDynamics** \
 * **Dynatrace** \
 * **NewRelic** \
 * **ElasticAPM** \
 * **CACertificates**
 */
export type BindingType = string;

/** Known values of {@link BuildpackBindingProvisioningState} that the service accepts. */
export enum KnownBuildpackBindingProvisioningState {
  /** Creating */
  Creating = "Creating",
  /** Updating */
  Updating = "Updating",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Deleting */
  Deleting = "Deleting"
}

/**
 * Defines values for BuildpackBindingProvisioningState. \
 * {@link KnownBuildpackBindingProvisioningState} can be used interchangeably with BuildpackBindingProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Deleting**
 */
export type BuildpackBindingProvisioningState = string;

/** Known values of {@link BuildResultProvisioningState} that the service accepts. */
export enum KnownBuildResultProvisioningState {
  /** Queuing */
  Queuing = "Queuing",
  /** Building */
  Building = "Building",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Deleting */
  Deleting = "Deleting"
}

/**
 * Defines values for BuildResultProvisioningState. \
 * {@link KnownBuildResultProvisioningState} can be used interchangeably with BuildResultProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Queuing** \
 * **Building** \
 * **Succeeded** \
 * **Failed** \
 * **Deleting**
 */
export type BuildResultProvisioningState = string;

/** Known values of {@link KPackBuildStageProvisioningState} that the service accepts. */
export enum KnownKPackBuildStageProvisioningState {
  /** NotStarted */
  NotStarted = "NotStarted",
  /** Running */
  Running = "Running",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed"
}

/**
 * Defines values for KPackBuildStageProvisioningState. \
 * {@link KnownKPackBuildStageProvisioningState} can be used interchangeably with KPackBuildStageProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotStarted** \
 * **Running** \
 * **Succeeded** \
 * **Failed**
 */
export type KPackBuildStageProvisioningState = string;

/** Known values of {@link BuilderProvisioningState} that the service accepts. */
export enum KnownBuilderProvisioningState {
  /** Creating */
  Creating = "Creating",
  /** Updating */
  Updating = "Updating",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Deleting */
  Deleting = "Deleting"
}

/**
 * Defines values for BuilderProvisioningState. \
 * {@link KnownBuilderProvisioningState} can be used interchangeably with BuilderProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Deleting**
 */
export type BuilderProvisioningState = string;

/** Known values of {@link MonitoringSettingState} that the service accepts. */
export enum KnownMonitoringSettingState {
  /** NotAvailable */
  NotAvailable = "NotAvailable",
  /** Failed */
  Failed = "Failed",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Updating */
  Updating = "Updating"
}

/**
 * Defines values for MonitoringSettingState. \
 * {@link KnownMonitoringSettingState} can be used interchangeably with MonitoringSettingState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotAvailable** \
 * **Failed** \
 * **Succeeded** \
 * **Updating**
 */
export type MonitoringSettingState = string;

/** Known values of {@link AppResourceProvisioningState} that the service accepts. */
export enum KnownAppResourceProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Creating */
  Creating = "Creating",
  /** Updating */
  Updating = "Updating",
  /** Deleting */
  Deleting = "Deleting"
}

/**
 * Defines values for AppResourceProvisioningState. \
 * {@link KnownAppResourceProvisioningState} can be used interchangeably with AppResourceProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Creating** \
 * **Updating** \
 * **Deleting**
 */
export type AppResourceProvisioningState = string;

/** Known values of {@link Type} that the service accepts. */
export enum KnownType {
  /** AzureFileVolume */
  AzureFileVolume = "AzureFileVolume"
}

/**
 * Defines values for Type. \
 * {@link KnownType} can be used interchangeably with Type,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AzureFileVolume**
 */
export type Type = string;

/** Known values of {@link SessionAffinity} that the service accepts. */
export enum KnownSessionAffinity {
  /** Cookie */
  Cookie = "Cookie",
  /** None */
  None = "None"
}

/**
 * Defines values for SessionAffinity. \
 * {@link KnownSessionAffinity} can be used interchangeably with SessionAffinity,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Cookie** \
 * **None**
 */
export type SessionAffinity = string;

/** Known values of {@link BackendProtocol} that the service accepts. */
export enum KnownBackendProtocol {
  /** Grpc */
  Grpc = "GRPC",
  /** Default */
  Default = "Default"
}

/**
 * Defines values for BackendProtocol. \
 * {@link KnownBackendProtocol} can be used interchangeably with BackendProtocol,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **GRPC** \
 * **Default**
 */
export type BackendProtocol = string;

/** Known values of {@link ManagedIdentityType} that the service accepts. */
export enum KnownManagedIdentityType {
  /** None */
  None = "None",
  /** SystemAssigned */
  SystemAssigned = "SystemAssigned",
  /** UserAssigned */
  UserAssigned = "UserAssigned",
  /** SystemAssignedUserAssigned */
  SystemAssignedUserAssigned = "SystemAssigned,UserAssigned"
}

/**
 * Defines values for ManagedIdentityType. \
 * {@link KnownManagedIdentityType} can be used interchangeably with ManagedIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAssigned,UserAssigned**
 */
export type ManagedIdentityType = string;

/** Known values of {@link StorageType} that the service accepts. */
export enum KnownStorageType {
  /** StorageAccount */
  StorageAccount = "StorageAccount"
}

/**
 * Defines values for StorageType. \
 * {@link KnownStorageType} can be used interchangeably with StorageType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **StorageAccount**
 */
export type StorageType = string;

/** Known values of {@link CertificateResourceProvisioningState} that the service accepts. */
export enum KnownCertificateResourceProvisioningState {
  /** Creating */
  Creating = "Creating",
  /** Updating */
  Updating = "Updating",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Deleting */
  Deleting = "Deleting"
}

/**
 * Defines values for CertificateResourceProvisioningState. \
 * {@link KnownCertificateResourceProvisioningState} can be used interchangeably with CertificateResourceProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Deleting**
 */
export type CertificateResourceProvisioningState = string;

/** Known values of {@link CustomDomainResourceProvisioningState} that the service accepts. */
export enum KnownCustomDomainResourceProvisioningState {
  /** Creating */
  Creating = "Creating",
  /** Updating */
  Updating = "Updating",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Deleting */
  Deleting = "Deleting"
}

/**
 * Defines values for CustomDomainResourceProvisioningState. \
 * {@link KnownCustomDomainResourceProvisioningState} can be used interchangeably with CustomDomainResourceProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Deleting**
 */
export type CustomDomainResourceProvisioningState = string;

/** Known values of {@link ProbeActionType} that the service accepts. */
export enum KnownProbeActionType {
  /** HttpGetAction */
  HttpGetAction = "HTTPGetAction",
  /** TCPSocketAction */
  TCPSocketAction = "TCPSocketAction",
  /** ExecAction */
  ExecAction = "ExecAction"
}

/**
 * Defines values for ProbeActionType. \
 * {@link KnownProbeActionType} can be used interchangeably with ProbeActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **HTTPGetAction** \
 * **TCPSocketAction** \
 * **ExecAction**
 */
export type ProbeActionType = string;

/** Known values of {@link DeploymentResourceProvisioningState} that the service accepts. */
export enum KnownDeploymentResourceProvisioningState {
  /** Creating */
  Creating = "Creating",
  /** Updating */
  Updating = "Updating",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed"
}

/**
 * Defines values for DeploymentResourceProvisioningState. \
 * {@link KnownDeploymentResourceProvisioningState} can be used interchangeably with DeploymentResourceProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Succeeded** \
 * **Failed**
 */
export type DeploymentResourceProvisioningState = string;

/** Known values of {@link DeploymentResourceStatus} that the service accepts. */
export enum KnownDeploymentResourceStatus {
  /** Stopped */
  Stopped = "Stopped",
  /** Running */
  Running = "Running"
}

/**
 * Defines values for DeploymentResourceStatus. \
 * {@link KnownDeploymentResourceStatus} can be used interchangeably with DeploymentResourceStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Stopped** \
 * **Running**
 */
export type DeploymentResourceStatus = string;

/** Known values of {@link ActionType} that the service accepts. */
export enum KnownActionType {
  /** Internal */
  Internal = "Internal"
}

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export type ActionType = string;

/** Known values of {@link SupportedRuntimeValue} that the service accepts. */
export enum KnownSupportedRuntimeValue {
  /** Java8 */
  Java8 = "Java_8",
  /** Java11 */
  Java11 = "Java_11",
  /** Java17 */
  Java17 = "Java_17",
  /** NetCore31 */
  NetCore31 = "NetCore_31"
}

/**
 * Defines values for SupportedRuntimeValue. \
 * {@link KnownSupportedRuntimeValue} can be used interchangeably with SupportedRuntimeValue,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Java_8** \
 * **Java_11** \
 * **Java_17** \
 * **NetCore_31**
 */
export type SupportedRuntimeValue = string;

/** Known values of {@link SupportedRuntimePlatform} that the service accepts. */
export enum KnownSupportedRuntimePlatform {
  /** Java */
  Java = "Java",
  /** NETCore */
  NETCore = ".NET Core"
}

/**
 * Defines values for SupportedRuntimePlatform. \
 * {@link KnownSupportedRuntimePlatform} can be used interchangeably with SupportedRuntimePlatform,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Java** \
 * **.NET Core**
 */
export type SupportedRuntimePlatform = string;

/** Known values of {@link SkuScaleType} that the service accepts. */
export enum KnownSkuScaleType {
  /** None */
  None = "None",
  /** Manual */
  Manual = "Manual",
  /** Automatic */
  Automatic = "Automatic"
}

/**
 * Defines values for SkuScaleType. \
 * {@link KnownSkuScaleType} can be used interchangeably with SkuScaleType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Manual** \
 * **Automatic**
 */
export type SkuScaleType = string;

/** Known values of {@link ResourceSkuRestrictionsType} that the service accepts. */
export enum KnownResourceSkuRestrictionsType {
  /** Location */
  Location = "Location",
  /** Zone */
  Zone = "Zone"
}

/**
 * Defines values for ResourceSkuRestrictionsType. \
 * {@link KnownResourceSkuRestrictionsType} can be used interchangeably with ResourceSkuRestrictionsType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Location** \
 * **Zone**
 */
export type ResourceSkuRestrictionsType = string;

/** Known values of {@link ResourceSkuRestrictionsReasonCode} that the service accepts. */
export enum KnownResourceSkuRestrictionsReasonCode {
  /** QuotaId */
  QuotaId = "QuotaId",
  /** NotAvailableForSubscription */
  NotAvailableForSubscription = "NotAvailableForSubscription"
}

/**
 * Defines values for ResourceSkuRestrictionsReasonCode. \
 * {@link KnownResourceSkuRestrictionsReasonCode} can be used interchangeably with ResourceSkuRestrictionsReasonCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **QuotaId** \
 * **NotAvailableForSubscription**
 */
export type ResourceSkuRestrictionsReasonCode = string;

/** Known values of {@link GatewayProvisioningState} that the service accepts. */
export enum KnownGatewayProvisioningState {
  /** Creating */
  Creating = "Creating",
  /** Updating */
  Updating = "Updating",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Deleting */
  Deleting = "Deleting"
}

/**
 * Defines values for GatewayProvisioningState. \
 * {@link KnownGatewayProvisioningState} can be used interchangeably with GatewayProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Deleting**
 */
export type GatewayProvisioningState = string;

/** Known values of {@link GatewayCertificateVerification} that the service accepts. */
export enum KnownGatewayCertificateVerification {
  /** Enable certificate verification in Spring Cloud Gateway. */
  Enabled = "Enabled",
  /** Disable certificate verification in Spring Cloud Gateway. */
  Disabled = "Disabled"
}

/**
 * Defines values for GatewayCertificateVerification. \
 * {@link KnownGatewayCertificateVerification} can be used interchangeably with GatewayCertificateVerification,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled**: Enable certificate verification in Spring Cloud Gateway. \
 * **Disabled**: Disable certificate verification in Spring Cloud Gateway.
 */
export type GatewayCertificateVerification = string;

/** Known values of {@link ApmType} that the service accepts. */
export enum KnownApmType {
  /** ApplicationInsights */
  ApplicationInsights = "ApplicationInsights",
  /** AppDynamics */
  AppDynamics = "AppDynamics",
  /** Dynatrace */
  Dynatrace = "Dynatrace",
  /** NewRelic */
  NewRelic = "NewRelic",
  /** ElasticAPM */
  ElasticAPM = "ElasticAPM"
}

/**
 * Defines values for ApmType. \
 * {@link KnownApmType} can be used interchangeably with ApmType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ApplicationInsights** \
 * **AppDynamics** \
 * **Dynatrace** \
 * **NewRelic** \
 * **ElasticAPM**
 */
export type ApmType = string;

/** Known values of {@link GatewayRouteConfigProtocol} that the service accepts. */
export enum KnownGatewayRouteConfigProtocol {
  /** Http */
  Http = "HTTP",
  /** Https */
  Https = "HTTPS"
}

/**
 * Defines values for GatewayRouteConfigProtocol. \
 * {@link KnownGatewayRouteConfigProtocol} can be used interchangeably with GatewayRouteConfigProtocol,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **HTTP** \
 * **HTTPS**
 */
export type GatewayRouteConfigProtocol = string;

/** Known values of {@link ApiPortalProvisioningState} that the service accepts. */
export enum KnownApiPortalProvisioningState {
  /** Creating */
  Creating = "Creating",
  /** Updating */
  Updating = "Updating",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Deleting */
  Deleting = "Deleting"
}

/**
 * Defines values for ApiPortalProvisioningState. \
 * {@link KnownApiPortalProvisioningState} can be used interchangeably with ApiPortalProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Deleting**
 */
export type ApiPortalProvisioningState = string;

/** Known values of {@link ApplicationAcceleratorProvisioningState} that the service accepts. */
export enum KnownApplicationAcceleratorProvisioningState {
  /** Creating */
  Creating = "Creating",
  /** Updating */
  Updating = "Updating",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Deleting */
  Deleting = "Deleting"
}

/**
 * Defines values for ApplicationAcceleratorProvisioningState. \
 * {@link KnownApplicationAcceleratorProvisioningState} can be used interchangeably with ApplicationAcceleratorProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Deleting**
 */
export type ApplicationAcceleratorProvisioningState = string;

/** Known values of {@link CustomizedAcceleratorProvisioningState} that the service accepts. */
export enum KnownCustomizedAcceleratorProvisioningState {
  /** Creating */
  Creating = "Creating",
  /** Updating */
  Updating = "Updating",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Deleting */
  Deleting = "Deleting"
}

/**
 * Defines values for CustomizedAcceleratorProvisioningState. \
 * {@link KnownCustomizedAcceleratorProvisioningState} can be used interchangeably with CustomizedAcceleratorProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Deleting**
 */
export type CustomizedAcceleratorProvisioningState = string;

/** Known values of {@link CustomizedAcceleratorValidateResultState} that the service accepts. */
export enum KnownCustomizedAcceleratorValidateResultState {
  /** Customized accelerator properties are valid. */
  Valid = "Valid",
  /** Customized accelerator properties are invalid. */
  Invalid = "Invalid"
}

/**
 * Defines values for CustomizedAcceleratorValidateResultState. \
 * {@link KnownCustomizedAcceleratorValidateResultState} can be used interchangeably with CustomizedAcceleratorValidateResultState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Valid**: Customized accelerator properties are valid. \
 * **Invalid**: Customized accelerator properties are invalid.
 */
export type CustomizedAcceleratorValidateResultState = string;

/** Known values of {@link PredefinedAcceleratorProvisioningState} that the service accepts. */
export enum KnownPredefinedAcceleratorProvisioningState {
  /** Creating */
  Creating = "Creating",
  /** Updating */
  Updating = "Updating",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed"
}

/**
 * Defines values for PredefinedAcceleratorProvisioningState. \
 * {@link KnownPredefinedAcceleratorProvisioningState} can be used interchangeably with PredefinedAcceleratorProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Succeeded** \
 * **Failed**
 */
export type PredefinedAcceleratorProvisioningState = string;

/** Known values of {@link PredefinedAcceleratorState} that the service accepts. */
export enum KnownPredefinedAcceleratorState {
  /** Enable the predefined accelerator. */
  Enabled = "Enabled",
  /** Disable the predefined accelerator. */
  Disabled = "Disabled"
}

/**
 * Defines values for PredefinedAcceleratorState. \
 * {@link KnownPredefinedAcceleratorState} can be used interchangeably with PredefinedAcceleratorState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled**: Enable the predefined accelerator. \
 * **Disabled**: Disable the predefined accelerator.
 */
export type PredefinedAcceleratorState = string;

/** Known values of {@link HttpSchemeType} that the service accepts. */
export enum KnownHttpSchemeType {
  /** Http */
  Http = "HTTP",
  /** Https */
  Https = "HTTPS"
}

/**
 * Defines values for HttpSchemeType. \
 * {@link KnownHttpSchemeType} can be used interchangeably with HttpSchemeType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **HTTP** \
 * **HTTPS**
 */
export type HttpSchemeType = string;

/** Optional parameters. */
export interface ServicesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ServicesGetResponse = ServiceResource;

/** Optional parameters. */
export interface ServicesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ServicesCreateOrUpdateResponse = ServiceResource;

/** Optional parameters. */
export interface ServicesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ServicesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type ServicesUpdateResponse = ServiceResource;

/** Optional parameters. */
export interface ServicesListTestKeysOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listTestKeys operation. */
export type ServicesListTestKeysResponse = TestKeys;

/** Optional parameters. */
export interface ServicesRegenerateTestKeyOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the regenerateTestKey operation. */
export type ServicesRegenerateTestKeyResponse = TestKeys;

/** Optional parameters. */
export interface ServicesDisableTestEndpointOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ServicesEnableTestEndpointOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the enableTestEndpoint operation. */
export type ServicesEnableTestEndpointResponse = TestKeys;

/** Optional parameters. */
export interface ServicesStopOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ServicesStartOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ServicesCheckNameAvailabilityOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the checkNameAvailability operation. */
export type ServicesCheckNameAvailabilityResponse = NameAvailability;

/** Optional parameters. */
export interface ServicesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type ServicesListBySubscriptionResponse = ServiceResourceList;

/** Optional parameters. */
export interface ServicesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ServicesListResponse = ServiceResourceList;

/** Optional parameters. */
export interface ServicesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type ServicesListBySubscriptionNextResponse = ServiceResourceList;

/** Optional parameters. */
export interface ServicesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ServicesListNextResponse = ServiceResourceList;

/** Optional parameters. */
export interface ConfigServersGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ConfigServersGetResponse = ConfigServerResource;

/** Optional parameters. */
export interface ConfigServersUpdatePutOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updatePut operation. */
export type ConfigServersUpdatePutResponse = ConfigServerResource;

/** Optional parameters. */
export interface ConfigServersUpdatePatchOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updatePatch operation. */
export type ConfigServersUpdatePatchResponse = ConfigServerResource;

/** Optional parameters. */
export interface ConfigServersValidateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the validate operation. */
export type ConfigServersValidateResponse = ConfigServerSettingsValidateResult;

/** Optional parameters. */
export interface ConfigurationServicesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ConfigurationServicesGetResponse = ConfigurationServiceResource;

/** Optional parameters. */
export interface ConfigurationServicesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ConfigurationServicesCreateOrUpdateResponse = ConfigurationServiceResource;

/** Optional parameters. */
export interface ConfigurationServicesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ConfigurationServicesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ConfigurationServicesListResponse = ConfigurationServiceResourceCollection;

/** Optional parameters. */
export interface ConfigurationServicesValidateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the validate operation. */
export type ConfigurationServicesValidateResponse = ConfigurationServiceSettingsValidateResult;

/** Optional parameters. */
export interface ConfigurationServicesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ConfigurationServicesListNextResponse = ConfigurationServiceResourceCollection;

/** Optional parameters. */
export interface ServiceRegistriesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ServiceRegistriesGetResponse = ServiceRegistryResource;

/** Optional parameters. */
export interface ServiceRegistriesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ServiceRegistriesCreateOrUpdateResponse = ServiceRegistryResource;

/** Optional parameters. */
export interface ServiceRegistriesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ServiceRegistriesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ServiceRegistriesListResponse = ServiceRegistryResourceCollection;

/** Optional parameters. */
export interface ServiceRegistriesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ServiceRegistriesListNextResponse = ServiceRegistryResourceCollection;

/** Optional parameters. */
export interface ApplicationLiveViewsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ApplicationLiveViewsListResponse = ApplicationLiveViewResourceCollection;

/** Optional parameters. */
export interface ApplicationLiveViewsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ApplicationLiveViewsGetResponse = ApplicationLiveViewResource;

/** Optional parameters. */
export interface ApplicationLiveViewsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ApplicationLiveViewsCreateOrUpdateResponse = ApplicationLiveViewResource;

/** Optional parameters. */
export interface ApplicationLiveViewsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ApplicationLiveViewsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ApplicationLiveViewsListNextResponse = ApplicationLiveViewResourceCollection;

/** Optional parameters. */
export interface DevToolPortalsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type DevToolPortalsListResponse = DevToolPortalResourceCollection;

/** Optional parameters. */
export interface DevToolPortalsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DevToolPortalsGetResponse = DevToolPortalResource;

/** Optional parameters. */
export interface DevToolPortalsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type DevToolPortalsCreateOrUpdateResponse = DevToolPortalResource;

/** Optional parameters. */
export interface DevToolPortalsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DevToolPortalsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type DevToolPortalsListNextResponse = DevToolPortalResourceCollection;

/** Optional parameters. */
export interface ContainerRegistriesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ContainerRegistriesListResponse = ContainerRegistryResourceCollection;

/** Optional parameters. */
export interface ContainerRegistriesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ContainerRegistriesGetResponse = ContainerRegistryResource;

/** Optional parameters. */
export interface ContainerRegistriesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ContainerRegistriesCreateOrUpdateResponse = ContainerRegistryResource;

/** Optional parameters. */
export interface ContainerRegistriesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ContainerRegistriesListNextResponse = ContainerRegistryResourceCollection;

/** Optional parameters. */
export interface BuildServiceListBuildServicesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBuildServices operation. */
export type BuildServiceListBuildServicesResponse = BuildServiceCollection;

/** Optional parameters. */
export interface BuildServiceGetBuildServiceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getBuildService operation. */
export type BuildServiceGetBuildServiceResponse = BuildService;

/** Optional parameters. */
export interface BuildServiceCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type BuildServiceCreateOrUpdateResponse = BuildService;

/** Optional parameters. */
export interface BuildServiceListBuildsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBuilds operation. */
export type BuildServiceListBuildsResponse = BuildCollection;

/** Optional parameters. */
export interface BuildServiceGetBuildOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getBuild operation. */
export type BuildServiceGetBuildResponse = Build;

/** Optional parameters. */
export interface BuildServiceCreateOrUpdateBuildOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdateBuild operation. */
export type BuildServiceCreateOrUpdateBuildResponse = Build;

/** Optional parameters. */
export interface BuildServiceDeleteBuildOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface BuildServiceListBuildResultsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBuildResults operation. */
export type BuildServiceListBuildResultsResponse = BuildResultCollection;

/** Optional parameters. */
export interface BuildServiceGetBuildResultOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getBuildResult operation. */
export type BuildServiceGetBuildResultResponse = BuildResult;

/** Optional parameters. */
export interface BuildServiceGetBuildResultLogOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getBuildResultLog operation. */
export type BuildServiceGetBuildResultLogResponse = BuildResultLog;

/** Optional parameters. */
export interface BuildServiceGetResourceUploadUrlOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getResourceUploadUrl operation. */
export type BuildServiceGetResourceUploadUrlResponse = ResourceUploadDefinition;

/** Optional parameters. */
export interface BuildServiceListSupportedBuildpacksOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listSupportedBuildpacks operation. */
export type BuildServiceListSupportedBuildpacksResponse = SupportedBuildpacksCollection;

/** Optional parameters. */
export interface BuildServiceGetSupportedBuildpackOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getSupportedBuildpack operation. */
export type BuildServiceGetSupportedBuildpackResponse = SupportedBuildpackResource;

/** Optional parameters. */
export interface BuildServiceListSupportedStacksOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listSupportedStacks operation. */
export type BuildServiceListSupportedStacksResponse = SupportedStacksCollection;

/** Optional parameters. */
export interface BuildServiceGetSupportedStackOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getSupportedStack operation. */
export type BuildServiceGetSupportedStackResponse = SupportedStackResource;

/** Optional parameters. */
export interface BuildServiceListBuildServicesNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBuildServicesNext operation. */
export type BuildServiceListBuildServicesNextResponse = BuildServiceCollection;

/** Optional parameters. */
export interface BuildServiceListBuildsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBuildsNext operation. */
export type BuildServiceListBuildsNextResponse = BuildCollection;

/** Optional parameters. */
export interface BuildServiceListBuildResultsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBuildResultsNext operation. */
export type BuildServiceListBuildResultsNextResponse = BuildResultCollection;

/** Optional parameters. */
export interface BuildpackBindingListForClusterOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listForCluster operation. */
export type BuildpackBindingListForClusterResponse = BuildpackBindingResourceCollection;

/** Optional parameters. */
export interface BuildpackBindingGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type BuildpackBindingGetResponse = BuildpackBindingResource;

/** Optional parameters. */
export interface BuildpackBindingCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type BuildpackBindingCreateOrUpdateResponse = BuildpackBindingResource;

/** Optional parameters. */
export interface BuildpackBindingDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface BuildpackBindingListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type BuildpackBindingListResponse = BuildpackBindingResourceCollection;

/** Optional parameters. */
export interface BuildpackBindingListForClusterNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listForClusterNext operation. */
export type BuildpackBindingListForClusterNextResponse = BuildpackBindingResourceCollection;

/** Optional parameters. */
export interface BuildpackBindingListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type BuildpackBindingListNextResponse = BuildpackBindingResourceCollection;

/** Optional parameters. */
export interface BuildServiceBuilderGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type BuildServiceBuilderGetResponse = BuilderResource;

/** Optional parameters. */
export interface BuildServiceBuilderCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type BuildServiceBuilderCreateOrUpdateResponse = BuilderResource;

/** Optional parameters. */
export interface BuildServiceBuilderDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface BuildServiceBuilderListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type BuildServiceBuilderListResponse = BuilderResourceCollection;

/** Optional parameters. */
export interface BuildServiceBuilderListDeploymentsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listDeployments operation. */
export type BuildServiceBuilderListDeploymentsResponse = DeploymentList;

/** Optional parameters. */
export interface BuildServiceBuilderListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type BuildServiceBuilderListNextResponse = BuilderResourceCollection;

/** Optional parameters. */
export interface BuildServiceAgentPoolListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type BuildServiceAgentPoolListResponse = BuildServiceAgentPoolResourceCollection;

/** Optional parameters. */
export interface BuildServiceAgentPoolGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type BuildServiceAgentPoolGetResponse = BuildServiceAgentPoolResource;

/** Optional parameters. */
export interface BuildServiceAgentPoolUpdatePutOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updatePut operation. */
export type BuildServiceAgentPoolUpdatePutResponse = BuildServiceAgentPoolResource;

/** Optional parameters. */
export interface BuildServiceAgentPoolListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type BuildServiceAgentPoolListNextResponse = BuildServiceAgentPoolResourceCollection;

/** Optional parameters. */
export interface MonitoringSettingsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type MonitoringSettingsGetResponse = MonitoringSettingResource;

/** Optional parameters. */
export interface MonitoringSettingsUpdatePutOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updatePut operation. */
export type MonitoringSettingsUpdatePutResponse = MonitoringSettingResource;

/** Optional parameters. */
export interface MonitoringSettingsUpdatePatchOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updatePatch operation. */
export type MonitoringSettingsUpdatePatchResponse = MonitoringSettingResource;

/** Optional parameters. */
export interface AppsGetOptionalParams extends coreClient.OperationOptions {
  /** Indicates whether sync status */
  syncStatus?: string;
}

/** Contains response data for the get operation. */
export type AppsGetResponse = AppResource;

/** Optional parameters. */
export interface AppsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type AppsCreateOrUpdateResponse = AppResource;

/** Optional parameters. */
export interface AppsDeleteOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface AppsUpdateOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type AppsUpdateResponse = AppResource;

/** Optional parameters. */
export interface AppsListOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type AppsListResponse = AppResourceCollection;

/** Optional parameters. */
export interface AppsGetResourceUploadUrlOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getResourceUploadUrl operation. */
export type AppsGetResourceUploadUrlResponse = ResourceUploadDefinition;

/** Optional parameters. */
export interface AppsSetActiveDeploymentsOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the setActiveDeployments operation. */
export type AppsSetActiveDeploymentsResponse = AppResource;

/** Optional parameters. */
export interface AppsValidateDomainOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the validateDomain operation. */
export type AppsValidateDomainResponse = CustomDomainValidateResult;

/** Optional parameters. */
export interface AppsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type AppsListNextResponse = AppResourceCollection;

/** Optional parameters. */
export interface BindingsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type BindingsGetResponse = BindingResource;

/** Optional parameters. */
export interface BindingsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type BindingsCreateOrUpdateResponse = BindingResource;

/** Optional parameters. */
export interface BindingsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface BindingsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type BindingsUpdateResponse = BindingResource;

/** Optional parameters. */
export interface BindingsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type BindingsListResponse = BindingResourceCollection;

/** Optional parameters. */
export interface BindingsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type BindingsListNextResponse = BindingResourceCollection;

/** Optional parameters. */
export interface StoragesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type StoragesGetResponse = StorageResource;

/** Optional parameters. */
export interface StoragesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type StoragesCreateOrUpdateResponse = StorageResource;

/** Optional parameters. */
export interface StoragesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface StoragesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type StoragesListResponse = StorageResourceCollection;

/** Optional parameters. */
export interface StoragesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type StoragesListNextResponse = StorageResourceCollection;

/** Optional parameters. */
export interface CertificatesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type CertificatesGetResponse = CertificateResource;

/** Optional parameters. */
export interface CertificatesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type CertificatesCreateOrUpdateResponse = CertificateResource;

/** Optional parameters. */
export interface CertificatesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface CertificatesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type CertificatesListResponse = CertificateResourceCollection;

/** Optional parameters. */
export interface CertificatesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type CertificatesListNextResponse = CertificateResourceCollection;

/** Optional parameters. */
export interface CustomDomainsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type CustomDomainsGetResponse = CustomDomainResource;

/** Optional parameters. */
export interface CustomDomainsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type CustomDomainsCreateOrUpdateResponse = CustomDomainResource;

/** Optional parameters. */
export interface CustomDomainsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface CustomDomainsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type CustomDomainsUpdateResponse = CustomDomainResource;

/** Optional parameters. */
export interface CustomDomainsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type CustomDomainsListResponse = CustomDomainResourceCollection;

/** Optional parameters. */
export interface CustomDomainsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type CustomDomainsListNextResponse = CustomDomainResourceCollection;

/** Optional parameters. */
export interface DeploymentsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DeploymentsGetResponse = DeploymentResource;

/** Optional parameters. */
export interface DeploymentsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type DeploymentsCreateOrUpdateResponse = DeploymentResource;

/** Optional parameters. */
export interface DeploymentsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DeploymentsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type DeploymentsUpdateResponse = DeploymentResource;

/** Optional parameters. */
export interface DeploymentsListOptionalParams
  extends coreClient.OperationOptions {
  /** Version of the deployments to be listed */
  version?: string[];
}

/** Contains response data for the list operation. */
export type DeploymentsListResponse = DeploymentResourceCollection;

/** Optional parameters. */
export interface DeploymentsListForClusterOptionalParams
  extends coreClient.OperationOptions {
  /** Version of the deployments to be listed */
  version?: string[];
}

/** Contains response data for the listForCluster operation. */
export type DeploymentsListForClusterResponse = DeploymentResourceCollection;

/** Optional parameters. */
export interface DeploymentsStartOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DeploymentsStopOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DeploymentsRestartOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DeploymentsEnableRemoteDebuggingOptionalParams
  extends coreClient.OperationOptions {
  /** Parameters for enable remote debugging */
  remoteDebuggingPayload?: RemoteDebuggingPayload;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the enableRemoteDebugging operation. */
export type DeploymentsEnableRemoteDebuggingResponse = RemoteDebugging;

/** Optional parameters. */
export interface DeploymentsDisableRemoteDebuggingOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the disableRemoteDebugging operation. */
export type DeploymentsDisableRemoteDebuggingResponse = RemoteDebugging;

/** Optional parameters. */
export interface DeploymentsGetRemoteDebuggingConfigOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getRemoteDebuggingConfig operation. */
export type DeploymentsGetRemoteDebuggingConfigResponse = RemoteDebugging;

/** Optional parameters. */
export interface DeploymentsGetLogFileUrlOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getLogFileUrl operation. */
export type DeploymentsGetLogFileUrlResponse = LogFileUrlResponse;

/** Optional parameters. */
export interface DeploymentsGenerateHeapDumpOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DeploymentsGenerateThreadDumpOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DeploymentsStartJFROptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DeploymentsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type DeploymentsListNextResponse = DeploymentResourceCollection;

/** Optional parameters. */
export interface DeploymentsListForClusterNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listForClusterNext operation. */
export type DeploymentsListForClusterNextResponse = DeploymentResourceCollection;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = AvailableOperations;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = AvailableOperations;

/** Optional parameters. */
export interface RuntimeVersionsListRuntimeVersionsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listRuntimeVersions operation. */
export type RuntimeVersionsListRuntimeVersionsResponse = AvailableRuntimeVersions;

/** Optional parameters. */
export interface SkusListOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type SkusListResponse = ResourceSkuCollection;

/** Optional parameters. */
export interface SkusListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type SkusListNextResponse = ResourceSkuCollection;

/** Optional parameters. */
export interface GatewaysGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type GatewaysGetResponse = GatewayResource;

/** Optional parameters. */
export interface GatewaysCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type GatewaysCreateOrUpdateResponse = GatewayResource;

/** Optional parameters. */
export interface GatewaysUpdateCapacityOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateCapacity operation. */
export type GatewaysUpdateCapacityResponse = GatewayResource;

/** Optional parameters. */
export interface GatewaysDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface GatewaysListEnvSecretsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listEnvSecrets operation. */
export type GatewaysListEnvSecretsResponse = { [propertyName: string]: string };

/** Optional parameters. */
export interface GatewaysRestartOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface GatewaysListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type GatewaysListResponse = GatewayResourceCollection;

/** Optional parameters. */
export interface GatewaysValidateDomainOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the validateDomain operation. */
export type GatewaysValidateDomainResponse = CustomDomainValidateResult;

/** Optional parameters. */
export interface GatewaysListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type GatewaysListNextResponse = GatewayResourceCollection;

/** Optional parameters. */
export interface GatewayRouteConfigsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type GatewayRouteConfigsGetResponse = GatewayRouteConfigResource;

/** Optional parameters. */
export interface GatewayRouteConfigsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type GatewayRouteConfigsCreateOrUpdateResponse = GatewayRouteConfigResource;

/** Optional parameters. */
export interface GatewayRouteConfigsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface GatewayRouteConfigsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type GatewayRouteConfigsListResponse = GatewayRouteConfigResourceCollection;

/** Optional parameters. */
export interface GatewayRouteConfigsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type GatewayRouteConfigsListNextResponse = GatewayRouteConfigResourceCollection;

/** Optional parameters. */
export interface GatewayCustomDomainsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type GatewayCustomDomainsGetResponse = GatewayCustomDomainResource;

/** Optional parameters. */
export interface GatewayCustomDomainsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type GatewayCustomDomainsCreateOrUpdateResponse = GatewayCustomDomainResource;

/** Optional parameters. */
export interface GatewayCustomDomainsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface GatewayCustomDomainsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type GatewayCustomDomainsListResponse = GatewayCustomDomainResourceCollection;

/** Optional parameters. */
export interface GatewayCustomDomainsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type GatewayCustomDomainsListNextResponse = GatewayCustomDomainResourceCollection;

/** Optional parameters. */
export interface ApiPortalsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ApiPortalsGetResponse = ApiPortalResource;

/** Optional parameters. */
export interface ApiPortalsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ApiPortalsCreateOrUpdateResponse = ApiPortalResource;

/** Optional parameters. */
export interface ApiPortalsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ApiPortalsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ApiPortalsListResponse = ApiPortalResourceCollection;

/** Optional parameters. */
export interface ApiPortalsValidateDomainOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the validateDomain operation. */
export type ApiPortalsValidateDomainResponse = CustomDomainValidateResult;

/** Optional parameters. */
export interface ApiPortalsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ApiPortalsListNextResponse = ApiPortalResourceCollection;

/** Optional parameters. */
export interface ApiPortalCustomDomainsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ApiPortalCustomDomainsGetResponse = ApiPortalCustomDomainResource;

/** Optional parameters. */
export interface ApiPortalCustomDomainsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ApiPortalCustomDomainsCreateOrUpdateResponse = ApiPortalCustomDomainResource;

/** Optional parameters. */
export interface ApiPortalCustomDomainsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ApiPortalCustomDomainsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ApiPortalCustomDomainsListResponse = ApiPortalCustomDomainResourceCollection;

/** Optional parameters. */
export interface ApiPortalCustomDomainsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ApiPortalCustomDomainsListNextResponse = ApiPortalCustomDomainResourceCollection;

/** Optional parameters. */
export interface ApplicationAcceleratorsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ApplicationAcceleratorsListResponse = ApplicationAcceleratorResourceCollection;

/** Optional parameters. */
export interface ApplicationAcceleratorsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ApplicationAcceleratorsGetResponse = ApplicationAcceleratorResource;

/** Optional parameters. */
export interface ApplicationAcceleratorsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ApplicationAcceleratorsCreateOrUpdateResponse = ApplicationAcceleratorResource;

/** Optional parameters. */
export interface ApplicationAcceleratorsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ApplicationAcceleratorsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ApplicationAcceleratorsListNextResponse = ApplicationAcceleratorResourceCollection;

/** Optional parameters. */
export interface CustomizedAcceleratorsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type CustomizedAcceleratorsListResponse = CustomizedAcceleratorResourceCollection;

/** Optional parameters. */
export interface CustomizedAcceleratorsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type CustomizedAcceleratorsGetResponse = CustomizedAcceleratorResource;

/** Optional parameters. */
export interface CustomizedAcceleratorsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type CustomizedAcceleratorsCreateOrUpdateResponse = CustomizedAcceleratorResource;

/** Optional parameters. */
export interface CustomizedAcceleratorsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface CustomizedAcceleratorsValidateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the validate operation. */
export type CustomizedAcceleratorsValidateResponse = CustomizedAcceleratorValidateResult;

/** Optional parameters. */
export interface CustomizedAcceleratorsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type CustomizedAcceleratorsListNextResponse = CustomizedAcceleratorResourceCollection;

/** Optional parameters. */
export interface PredefinedAcceleratorsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type PredefinedAcceleratorsListResponse = PredefinedAcceleratorResourceCollection;

/** Optional parameters. */
export interface PredefinedAcceleratorsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PredefinedAcceleratorsGetResponse = PredefinedAcceleratorResource;

/** Optional parameters. */
export interface PredefinedAcceleratorsDisableOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface PredefinedAcceleratorsEnableOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface PredefinedAcceleratorsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type PredefinedAcceleratorsListNextResponse = PredefinedAcceleratorResourceCollection;

/** Optional parameters. */
export interface AppPlatformManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
