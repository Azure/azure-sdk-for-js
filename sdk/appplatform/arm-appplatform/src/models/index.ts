/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export type CertificatePropertiesUnion =
  | CertificateProperties
  | KeyVaultCertificateProperties
  | ContentCertificateProperties;
export type UserSourceInfoUnion =
  | UserSourceInfo
  | UploadedUserSourceInfoUnion
  | BuildResultUserSourceInfo;
export type UploadedUserSourceInfoUnion =
  | UploadedUserSourceInfo
  | JarUploadedUserSourceInfo
  | SourceUploadedUserSourceInfo
  | NetCoreZipUploadedUserSourceInfo;

/** Service properties payload */
export interface ClusterResourceProperties {
  /**
   * Provisioning state of the Service
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** Network profile of the Service */
  networkProfile?: NetworkProfile;
  /**
   * Version of the Service
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly version?: number;
  /**
   * ServiceInstanceEntity GUID which uniquely identifies a created resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly serviceId?: string;
  zoneRedundant?: boolean;
  /**
   * Fully qualified dns name of the service instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fqdn?: string;
}

/** Service network profile payload */
export interface NetworkProfile {
  /** Fully qualified resource Id of the subnet to host Azure Spring Apps Service Runtime */
  serviceRuntimeSubnetId?: string;
  /** Fully qualified resource Id of the subnet to host customer apps in Azure Spring Apps */
  appSubnetId?: string;
  /** Azure Spring Apps service reserved CIDR */
  serviceCidr?: string;
  /** Name of the resource group containing network resources of Azure Spring Apps Service Runtime */
  serviceRuntimeNetworkResourceGroup?: string;
  /** Name of the resource group containing network resources for customer apps in Azure Spring Apps */
  appNetworkResourceGroup?: string;
  /**
   * Desired outbound IP resources for Azure Spring Apps resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly outboundIPs?: NetworkProfileOutboundIPs;
  /**
   * Required inbound or outbound traffics for Azure Spring Apps resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly requiredTraffics?: RequiredTraffic[];
}

/** Desired outbound IP resources for Azure Spring Apps resource. */
export interface NetworkProfileOutboundIPs {
  /**
   * A list of public IP addresses.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly publicIPs?: string[];
}

/** Required inbound or outbound traffic for Azure Spring Apps resource. */
export interface RequiredTraffic {
  /**
   * The protocol of required traffic
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly protocol?: string;
  /**
   * The port of required traffic
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly port?: number;
  /**
   * The ip list of required traffic
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ips?: string[];
  /**
   * The FQDN list of required traffic
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fqdns?: string[];
  /**
   * The direction of required traffic
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly direction?: TrafficDirection;
}

/** Sku of Azure Spring Apps */
export interface Sku {
  /** Name of the Sku */
  name?: string;
  /** Tier of the Sku */
  tier?: string;
  /** Current capacity of the target resource */
  capacity?: number;
}

/** The core properties of ARM resources. */
export interface Resource {
  /**
   * Fully qualified resource Id for the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: LastModifiedByType;
  /** The timestamp of resource modification (UTC). */
  lastModifiedAt?: Date;
}

/** An error response from the service. */
export interface CloudError {
  /** An error response from the service. */
  error?: CloudErrorBody;
}

/** An error response from the service. */
export interface CloudErrorBody {
  /** An identifier for the error. Codes are invariant and are intended to be consumed programmatically. */
  code?: string;
  /** A message describing the error, intended to be suitable for display in a user interface. */
  message?: string;
  /** The target of the particular error. For example, the name of the property in error. */
  target?: string;
  /** A list of additional details about the error. */
  details?: CloudErrorBody[];
}

/** Test keys payload */
export interface TestKeys {
  /** Primary key */
  primaryKey?: string;
  /** Secondary key */
  secondaryKey?: string;
  /** Primary test endpoint */
  primaryTestEndpoint?: string;
  /** Secondary test endpoint */
  secondaryTestEndpoint?: string;
  /** Indicates whether the test endpoint feature enabled or not */
  enabled?: boolean;
}

/** Regenerate test key request payload */
export interface RegenerateTestKeyRequestPayload {
  /** Type of the test key */
  keyType: TestKeyType;
}

/** Config server git properties payload */
export interface ConfigServerProperties {
  /**
   * State of the config server.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ConfigServerState;
  /** Error when apply config server settings. */
  error?: ErrorModel;
  /** Settings of config server. */
  configServer?: ConfigServerSettings;
}

/** The error code compose of code and message. */
export interface ErrorModel {
  /** The code of error. */
  code?: string;
  /** The message of error. */
  message?: string;
}

/** The settings of config server. */
export interface ConfigServerSettings {
  /** Property of git environment. */
  gitProperty?: ConfigServerGitProperty;
}

/** Property of git. */
export interface ConfigServerGitProperty {
  /** Repositories of git. */
  repositories?: GitPatternRepository[];
  /** URI of the repository */
  uri: string;
  /** Label of the repository */
  label?: string;
  /** Searching path of the repository */
  searchPaths?: string[];
  /** Username of git repository basic auth. */
  username?: string;
  /** Password of git repository basic auth. */
  password?: string;
  /** Public sshKey of git repository. */
  hostKey?: string;
  /** SshKey algorithm of git repository. */
  hostKeyAlgorithm?: string;
  /** Private sshKey algorithm of git repository. */
  privateKey?: string;
  /** Strict host key checking or not. */
  strictHostKeyChecking?: boolean;
}

/** Git repository property payload for config server */
export interface GitPatternRepository {
  /** Name of the repository */
  name: string;
  /** Collection of pattern of the repository */
  pattern?: string[];
  /** URI of the repository */
  uri: string;
  /** Label of the repository */
  label?: string;
  /** Searching path of the repository */
  searchPaths?: string[];
  /** Username of git repository basic auth. */
  username?: string;
  /** Password of git repository basic auth. */
  password?: string;
  /** Public sshKey of git repository. */
  hostKey?: string;
  /** SshKey algorithm of git repository. */
  hostKeyAlgorithm?: string;
  /** Private sshKey algorithm of git repository. */
  privateKey?: string;
  /** Strict host key checking or not. */
  strictHostKeyChecking?: boolean;
}

/** Validation result for config server settings */
export interface ConfigServerSettingsValidateResult {
  /** Indicate if the config server settings are valid */
  isValid?: boolean;
  /** The detail validation results */
  details?: ConfigServerSettingsErrorRecord[];
}

/** Error record of the config server settings */
export interface ConfigServerSettingsErrorRecord {
  /** The name of the config server settings error record */
  name?: string;
  /** The uri of the config server settings error record */
  uri?: string;
  /** The detail error messages of the record */
  messages?: string[];
}

/** Application Configuration Service properties payload */
export interface ConfigurationServiceProperties {
  /**
   * State of the Application Configuration Service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ConfigurationServiceProvisioningState;
  /**
   * The requested resource quantity for required CPU and Memory.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceRequests?: ConfigurationServiceResourceRequests;
  /**
   * Collection of instances belong to Application Configuration Service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instances?: ConfigurationServiceInstance[];
  /** The settings of Application Configuration Service. */
  settings?: ConfigurationServiceSettings;
}

/** Resource request payload of Application Configuration Service */
export interface ConfigurationServiceResourceRequests {
  /**
   * Cpu allocated to each Application Configuration Service instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cpu?: string;
  /**
   * Memory allocated to each Application Configuration Service instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly memory?: string;
  /**
   * Instance count of the Application Configuration Service
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instanceCount?: number;
}

/** Collection of instances belong to the Application Configuration Service */
export interface ConfigurationServiceInstance {
  /**
   * Name of the Application Configuration Service instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Status of the Application Configuration Service instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: string;
}

/** The settings of Application Configuration Service. */
export interface ConfigurationServiceSettings {
  /** Property of git environment. */
  gitProperty?: ConfigurationServiceGitProperty;
}

/** Property of git environment. */
export interface ConfigurationServiceGitProperty {
  /** Repositories of Application Configuration Service git property. */
  repositories?: ConfigurationServiceGitRepository[];
}

/** Git repository property payload for Application Configuration Service */
export interface ConfigurationServiceGitRepository {
  /** Name of the repository */
  name: string;
  /** Collection of patterns of the repository */
  patterns: string[];
  /** URI of the repository */
  uri: string;
  /** Label of the repository */
  label: string;
  /** Searching path of the repository */
  searchPaths?: string[];
  /** Username of git repository basic auth. */
  username?: string;
  /** Password of git repository basic auth. */
  password?: string;
  /** Public sshKey of git repository. */
  hostKey?: string;
  /** SshKey algorithm of git repository. */
  hostKeyAlgorithm?: string;
  /** Private sshKey algorithm of git repository. */
  privateKey?: string;
  /** Strict host key checking or not. */
  strictHostKeyChecking?: boolean;
}

/** Object that includes an array of configuration service resources and a possible link for next set */
export interface ConfigurationServiceResourceCollection {
  /** Collection of configuration service resources */
  value?: ConfigurationServiceResource[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** Validation result for configuration service settings */
export interface ConfigurationServiceSettingsValidateResult {
  /** Validation result for configuration service settings */
  gitPropertyValidationResult?: ConfigurationServiceGitPropertyValidateResult;
}

/** Validation result for configuration service settings */
export interface ConfigurationServiceGitPropertyValidateResult {
  /** Indicate if the configuration service settings are valid */
  isValid?: boolean;
  /** The detail validation results */
  gitReposValidationResult?: ValidationMessages[];
}

/** Validate messages of the configuration service git repositories */
export interface ValidationMessages {
  /** The name of the configuration service git repository. */
  name?: string;
  /** Detailed validation messages. */
  messages?: string[];
}

/** Service Registry properties payload */
export interface ServiceRegistryProperties {
  /**
   * State of the Service Registry.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ServiceRegistryProvisioningState;
  /**
   * The requested resource quantity for required CPU and Memory.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceRequests?: ServiceRegistryResourceRequests;
  /**
   * Collection of instances belong to Service Registry.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instances?: ServiceRegistryInstance[];
}

/** Resource request payload of Service Registry */
export interface ServiceRegistryResourceRequests {
  /**
   * Cpu allocated to each Service Registry instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cpu?: string;
  /**
   * Memory allocated to each Service Registry instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly memory?: string;
  /**
   * Instance count of the Service Registry
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instanceCount?: number;
}

/** Collection of instances belong to the Service Registry */
export interface ServiceRegistryInstance {
  /**
   * Name of the Service Registry instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Status of the Service Registry instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: string;
}

/** Object that includes an array of Service Registry resources and a possible link for next set */
export interface ServiceRegistryResourceCollection {
  /** Collection of Service Registry resources */
  value?: ServiceRegistryResource[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** Object that includes an array of Build service resources and a possible link for next set */
export interface BuildServiceCollection {
  /** Collection of Build service resources */
  value?: BuildService[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** Build service resource properties payload */
export interface BuildServiceProperties {
  /** The installed KPack version in this build service. */
  kPackVersion?: string;
  /**
   * Provisioning state of the KPack build result
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: BuildServiceProvisioningState;
  /** The runtime resource configuration of this build service. */
  resourceRequests?: BuildServicePropertiesResourceRequests;
}

/** The runtime resource configuration of this build service. */
export interface BuildServicePropertiesResourceRequests {
  /**
   * vCPU allocated to the entire build service node pool.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cpu?: string;
  /**
   * Memory allocated to the entire build service node pool.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly memory?: string;
}

/** Object that includes an array of Build resources and a possible link for next set */
export interface BuildCollection {
  /** Collection of Build resources */
  value?: Build[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** Build resource properties payload */
export interface BuildProperties {
  /** The relative path of source code */
  relativePath?: string;
  /** The resource id of builder to build the source code */
  builder?: string;
  /** The resource id of agent pool */
  agentPool?: string;
  /**
   * Provisioning state of the KPack build result
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: BuildProvisioningState;
  /** The environment variables for this build */
  env?: { [propertyName: string]: string };
  /**
   *  The build result triggered by this build
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly triggeredBuildResult?: TriggeredBuildResult;
}

/** The build result triggered by a build */
export interface TriggeredBuildResult {
  /** The unique build id of this build result */
  id?: string;
}

/** Properties of a buildpack binding */
export interface BuildpackBindingProperties {
  /** Buildpack Binding Type */
  bindingType?: BindingType;
  /**
   * State of the Buildpack Binding.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: BuildpackBindingProvisioningState;
  /** The object describes the buildpack binding launch properties */
  launchProperties?: BuildpackBindingLaunchProperties;
}

/** Buildpack Binding Launch Properties */
export interface BuildpackBindingLaunchProperties {
  /** Non-sensitive properties for launchProperties */
  properties?: { [propertyName: string]: string };
  /** Sensitive properties for launchProperties */
  secrets?: { [propertyName: string]: string };
}

/** Object that includes an array of BuildpackBinding resources and a possible link for next set */
export interface BuildpackBindingResourceCollection {
  /** Collection of BuildpackBinding resources */
  value?: BuildpackBindingResource[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** Object that includes an array of Build result resources and a possible link for next set */
export interface BuildResultCollection {
  /** Collection of Build result resources */
  value?: BuildResult[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** Build result resource properties payload */
export interface BuildResultProperties {
  /** The name of this build result */
  name?: string;
  /**
   * Provisioning state of the KPack build result
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: BuildResultProvisioningState;
  /** The build pod name which can be used to get the build log streaming. */
  buildPodName?: string;
  /**
   * All of the build stage (init-container and container) resources in build pod.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly buildStages?: BuildStageProperties[];
}

/** The build stage (init-container and container) resources in build pod. */
export interface BuildStageProperties {
  /**
   * The name of this build stage resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The provisioning state of this build stage resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: KPackBuildStageProvisioningState;
}

/** Build result log resource properties payload */
export interface BuildResultLog {
  /** The public download URL of this build result log */
  blobUrl?: string;
}

/** KPack Builder properties payload */
export interface BuilderProperties {
  /**
   * Builder provision status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: BuilderProvisioningState;
  /** Builder cluster stack property. */
  stack?: StackProperties;
  /** Builder buildpack groups. */
  buildpackGroups?: BuildpacksGroupProperties[];
}

/** KPack ClusterStack properties payload */
export interface StackProperties {
  /** Id of the ClusterStack. */
  id?: string;
  /** Version of the ClusterStack */
  version?: string;
}

/** Buildpack group properties of the Builder */
export interface BuildpacksGroupProperties {
  /** Buildpack group name */
  name?: string;
  /** Buildpacks in the buildpack group */
  buildpacks?: BuildpackProperties[];
}

/** Buildpack properties payload */
export interface BuildpackProperties {
  /** Id of the buildpack */
  id?: string;
}

/** Object that includes an array of Builder resources and a possible link for next set */
export interface BuilderResourceCollection {
  /** Collection of Builder resources */
  value?: BuilderResource[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** Resource upload definition payload */
export interface ResourceUploadDefinition {
  /** Source relative path */
  relativePath?: string;
  /** Upload URL */
  uploadUrl?: string;
}

/** Object that includes an array of supported buildpacks resources and a possible link for next set */
export interface SupportedBuildpacksCollection {
  /** Collection of supported buildpacks resources */
  value?: SupportedBuildpackResource[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** Supported buildpack resource properties */
export interface SupportedBuildpackResourceProperties {
  /** The id of supported buildpack */
  buildpackId?: string;
}

/** Object that includes an array of supported stacks resources and a possible link for next set */
export interface SupportedStacksCollection {
  /** Collection of supported stacks resources */
  value?: SupportedStackResource[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** Supported stack resource properties */
export interface SupportedStackResourceProperties {
  /** The id of supported stack */
  stackId?: string;
  /** The version of supported stack */
  version?: string;
}

/** Object that includes an array of build service agent pool resources and a possible link for next set */
export interface BuildServiceAgentPoolResourceCollection {
  /** Collection of build service agent pool resource */
  value?: BuildServiceAgentPoolResource[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** Build service agent pool properties */
export interface BuildServiceAgentPoolProperties {
  /**
   * Provisioning state of the build service agent pool
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** build service agent pool size properties */
  poolSize?: BuildServiceAgentPoolSizeProperties;
}

/** Build service agent pool size properties */
export interface BuildServiceAgentPoolSizeProperties {
  /** The name of build service agent pool size */
  name?: string;
  /**
   * The cpu property of build service agent pool size
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cpu?: string;
  /**
   * The memory property of build service agent pool size
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly memory?: string;
}

/** Monitoring Setting properties payload */
export interface MonitoringSettingProperties {
  /**
   * State of the Monitoring Setting.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: MonitoringSettingState;
  /** Error when apply Monitoring Setting changes. */
  error?: ErrorModel;
  /** Indicates whether enable the trace functionality, which will be deprecated since api version 2020-11-01-preview. Please leverage appInsightsInstrumentationKey to indicate if monitoringSettings enabled or not */
  traceEnabled?: boolean;
  /** Target application insight instrumentation key, null or whitespace include empty will disable monitoringSettings */
  appInsightsInstrumentationKey?: string;
  /** Indicates the sampling rate of application insight agent, should be in range [0.0, 100.0] */
  appInsightsSamplingRate?: number;
  /** Indicates the versions of application insight agent */
  appInsightsAgentVersions?: ApplicationInsightsAgentVersions;
}

/** Application Insights agent versions properties payload */
export interface ApplicationInsightsAgentVersions {
  /**
   * Indicates the version of application insight java agent
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly java?: string;
}

/** App resource properties payload */
export interface AppResourceProperties {
  /** Indicates whether the App exposes public endpoint */
  public?: boolean;
  /**
   * URL of the App
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly url?: string;
  /** Collection of addons */
  addonConfigs?: {
    [propertyName: string]: { [propertyName: string]: Record<string, unknown> };
  };
  /**
   * Provisioning state of the App
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: AppResourceProvisioningState;
  /** Fully qualified dns Name. */
  fqdn?: string;
  /** Indicate if only https is allowed. */
  httpsOnly?: boolean;
  /** Temporary disk settings */
  temporaryDisk?: TemporaryDisk;
  /** Persistent disk settings */
  persistentDisk?: PersistentDisk;
  /** Indicate if end to end TLS is enabled. */
  enableEndToEndTLS?: boolean;
  /** Collection of loaded certificates */
  loadedCertificates?: LoadedCertificate[];
}

/** Temporary disk payload */
export interface TemporaryDisk {
  /** Size of the temporary disk in GB */
  sizeInGB?: number;
  /** Mount path of the temporary disk */
  mountPath?: string;
}

/** Persistent disk payload */
export interface PersistentDisk {
  /** Size of the persistent disk in GB */
  sizeInGB?: number;
  /**
   * Size of the used persistent disk in GB
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly usedInGB?: number;
  /** Mount path of the persistent disk */
  mountPath?: string;
}

/** Loaded certificate payload */
export interface LoadedCertificate {
  /** Resource Id of loaded certificate */
  resourceId: string;
  /** Indicate whether the certificate will be loaded into default trust store, only work for Java runtime. */
  loadTrustStore?: boolean;
}

/** Managed identity properties retrieved from ARM request headers. */
export interface ManagedIdentityProperties {
  /** Type of the managed identity */
  type?: ManagedIdentityType;
  /** Principal Id of system-assigned managed identity. */
  principalId?: string;
  /** Tenant Id of system-assigned managed identity. */
  tenantId?: string;
}

/** Object that includes an array of App resources and a possible link for next set */
export interface AppResourceCollection {
  /** Collection of App resources */
  value?: AppResource[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** Object that includes an array of Deployment resource name and set them as active. */
export interface ActiveDeploymentCollection {
  /** Collection of Deployment name. */
  activeDeploymentNames?: string[];
}

/** Binding resource properties payload */
export interface BindingResourceProperties {
  /**
   * The name of the bound resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceName?: string;
  /**
   * The standard Azure resource type of the bound resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceType?: string;
  /** The Azure resource id of the bound resource */
  resourceId?: string;
  /** The key of the bound resource */
  key?: string;
  /** Binding parameters of the Binding resource */
  bindingParameters?: { [propertyName: string]: Record<string, unknown> };
  /**
   * The generated Spring Boot property file for this binding. The secret will be deducted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly generatedProperties?: string;
  /**
   * Creation time of the Binding resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdAt?: string;
  /**
   * Update time of the Binding resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly updatedAt?: string;
}

/** Object that includes an array of Binding resources and a possible link for next set */
export interface BindingResourceCollection {
  /** Collection of Binding resources */
  value?: BindingResource[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** Certificate resource payload. */
export interface CertificateProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "KeyVaultCertificate" | "ContentCertificate";
  /**
   * The thumbprint of certificate.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly thumbprint?: string;
  /**
   * The issuer of certificate.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly issuer?: string;
  /**
   * The issue date of certificate.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly issuedDate?: string;
  /**
   * The expiration date of certificate.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly expirationDate?: string;
  /**
   * The activate date of certificate.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly activateDate?: string;
  /**
   * The subject name of certificate.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly subjectName?: string;
  /**
   * The domain list of certificate.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dnsNames?: string[];
}

/** Collection compose of certificate resources list and a possible link for next page. */
export interface CertificateResourceCollection {
  /** The certificate resources list. */
  value?: CertificateResource[];
  /** The link to next page of certificate list. */
  nextLink?: string;
}

/** Name availability parameters payload */
export interface NameAvailabilityParameters {
  /** Type of the resource to check name availability */
  type: string;
  /** Name to be checked */
  name: string;
}

/** Name availability result payload */
export interface NameAvailability {
  /** Indicates whether the name is available */
  nameAvailable?: boolean;
  /** Reason why the name is not available */
  reason?: string;
  /** Message why the name is not available */
  message?: string;
}

/** Custom domain of app resource payload. */
export interface CustomDomainProperties {
  /** The thumbprint of bound certificate. */
  thumbprint?: string;
  /**
   * The app name of domain.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly appName?: string;
  /** The bound certificate name of domain. */
  certName?: string;
}

/** Collection compose of a custom domain resources list and a possible link for next page. */
export interface CustomDomainResourceCollection {
  /** The custom domain resources list. */
  value?: CustomDomainResource[];
  /** The link to next page of custom domain list. */
  nextLink?: string;
}

/** Custom domain validate payload. */
export interface CustomDomainValidatePayload {
  /** Name to be validated */
  name: string;
}

/** Validation result for custom domain. */
export interface CustomDomainValidateResult {
  /** Indicates if domain name is valid. */
  isValid?: boolean;
  /** Message of why domain name is invalid. */
  message?: string;
}

/** Deployment resource properties payload */
export interface DeploymentResourceProperties {
  /** Uploaded source information of the deployment. */
  source?: UserSourceInfoUnion;
  /** Deployment settings of the Deployment */
  deploymentSettings?: DeploymentSettings;
  /**
   * Provisioning state of the Deployment
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: DeploymentResourceProvisioningState;
  /**
   * Status of the Deployment
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: DeploymentResourceStatus;
  /** Indicates whether the Deployment is active */
  active?: boolean;
  /**
   * Collection of instances belong to the Deployment
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instances?: DeploymentInstance[];
}

/** Source information for a deployment */
export interface UserSourceInfo {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type:
    | "UploadedUserSourceInfo"
    | "Jar"
    | "Source"
    | "NetCoreZip"
    | "BuildResult";
  /** Version of the source */
  version?: string;
}

/** Deployment settings payload */
export interface DeploymentSettings {
  /** The requested resource quantity for required CPU and Memory. It is recommended that using this field to represent the required CPU and Memory, the old field cpu and memoryInGB will be deprecated later. */
  resourceRequests?: ResourceRequests;
  /** Collection of environment variables */
  environmentVariables?: { [propertyName: string]: string };
  /** Collection of addons */
  addonConfigs?: {
    [propertyName: string]: { [propertyName: string]: Record<string, unknown> };
  };
}

/** Deployment resource request payload */
export interface ResourceRequests {
  /** Required CPU. 1 core can be represented by 1 or 1000m. This should be 500m or 1 for Basic tier, and {500m, 1, 2, 3, 4} for Standard tier. */
  cpu?: string;
  /** Required memory. 1 GB can be represented by 1Gi or 1024Mi. This should be {512Mi, 1Gi, 2Gi} for Basic tier, and {512Mi, 1Gi, 2Gi, ..., 8Gi} for Standard tier. */
  memory?: string;
}

/** Deployment instance payload */
export interface DeploymentInstance {
  /**
   * Name of the deployment instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Status of the deployment instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: string;
  /**
   * Failed reason of the deployment instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly reason?: string;
  /**
   * Discovery status of the deployment instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly discoveryStatus?: string;
  /**
   * Start time of the deployment instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startTime?: string;
  /**
   * Availability zone information of the deployment instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly zone?: string;
}

/** Object that includes an array of App resources and a possible link for next set */
export interface DeploymentResourceCollection {
  /** Collection of Deployment resources */
  value?: DeploymentResource[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** Log file URL payload */
export interface LogFileUrlResponse {
  /** URL of the log file */
  url: string;
}

/** Diagnostic parameters of diagnostic operations */
export interface DiagnosticParameters {
  /** App instance name */
  appInstance?: string;
  /** Your target file path in your own BYOS */
  filePath?: string;
  /** Duration of your JFR. 1 min can be represented by 1m or 60s. */
  duration?: string;
}

/** Object that includes an array of Service resources and a possible link for next set */
export interface ServiceResourceList {
  /** Collection of Service resources */
  value?: ServiceResource[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** Available operations of the service */
export interface AvailableOperations {
  /** Collection of available operation details */
  value?: OperationDetail[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** Operation detail payload */
export interface OperationDetail {
  /** Name of the operation */
  name?: string;
  /** Indicates whether the operation is a data action */
  isDataAction?: boolean;
  /** Display of the operation */
  display?: OperationDisplay;
  /**
   * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actionType?: ActionType;
  /** Origin of the operation */
  origin?: string;
  /** Properties of the operation */
  properties?: OperationProperties;
}

/** Operation display payload */
export interface OperationDisplay {
  /** Resource provider of the operation */
  provider?: string;
  /** Resource of the operation */
  resource?: string;
  /** Localized friendly name for the operation */
  operation?: string;
  /** Localized friendly description for the operation */
  description?: string;
}

/** Extra Operation properties */
export interface OperationProperties {
  /** Service specifications of the operation */
  serviceSpecification?: ServiceSpecification;
}

/** Service specification payload */
export interface ServiceSpecification {
  /** Specifications of the Log for Azure Monitoring */
  logSpecifications?: LogSpecification[];
  /** Specifications of the Metrics for Azure Monitoring */
  metricSpecifications?: MetricSpecification[];
}

/** Specifications of the Log for Azure Monitoring */
export interface LogSpecification {
  /** Name of the log */
  name?: string;
  /** Localized friendly display name of the log */
  displayName?: string;
  /** Blob duration of the log */
  blobDuration?: string;
}

/** Specifications of the Metrics for Azure Monitoring */
export interface MetricSpecification {
  /** Name of the metric */
  name?: string;
  /** Localized friendly display name of the metric */
  displayName?: string;
  /** Localized friendly description of the metric */
  displayDescription?: string;
  /** Unit that makes sense for the metric */
  unit?: string;
  /** Name of the metric category that the metric belongs to. A metric can only belong to a single category. */
  category?: string;
  /** Only provide one value for this field. Valid values: Average, Minimum, Maximum, Total, Count. */
  aggregationType?: string;
  /** Supported aggregation types */
  supportedAggregationTypes?: string[];
  /** Supported time grain types */
  supportedTimeGrainTypes?: string[];
  /** Optional. If set to true, then zero will be returned for time duration where no metric is emitted/published. */
  fillGapWithZero?: boolean;
  /** Dimensions of the metric */
  dimensions?: MetricDimension[];
  /** Name of the MDM namespace. Optional. */
  sourceMdmNamespace?: string;
}

/** Specifications of the Dimension of metrics */
export interface MetricDimension {
  /** Name of the dimension */
  name?: string;
  /** Localized friendly display name of the dimension */
  displayName?: string;
  /** Whether this dimension should be included for the Shoebox export scenario */
  toBeExportedForShoebox?: boolean;
}

export interface AvailableRuntimeVersions {
  /**
   * A list of all supported runtime versions.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: SupportedRuntimeVersion[];
}

/** Supported deployment runtime version descriptor. */
export interface SupportedRuntimeVersion {
  /** The raw value which could be passed to deployment CRUD operations. */
  value?: SupportedRuntimeValue;
  /** The platform of this runtime version (possible values: "Java" or ".NET"). */
  platform?: SupportedRuntimePlatform;
  /** The detailed version (major.minor) of the platform. */
  version?: string;
}

/** Object that includes an array of Azure Spring Apps SKU and a possible link for next set */
export interface ResourceSkuCollection {
  /** Collection of resource SKU */
  value?: ResourceSku[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** Describes an available Azure Spring Apps SKU. */
export interface ResourceSku {
  /** Gets the type of resource the SKU applies to. */
  resourceType?: string;
  /** Gets the name of SKU. */
  name?: string;
  /** Gets the tier of SKU. */
  tier?: string;
  /** Gets the capacity of SKU. */
  capacity?: SkuCapacity;
  /** Gets the set of locations that the SKU is available. */
  locations?: string[];
  /** Gets a list of locations and availability zones in those locations where the SKU is available. */
  locationInfo?: ResourceSkuLocationInfo[];
  /**
   * Gets the restrictions because of which SKU cannot be used. This is
   * empty if there are no restrictions.
   */
  restrictions?: ResourceSkuRestrictions[];
}

/** The SKU capacity */
export interface SkuCapacity {
  /** Gets or sets the minimum. */
  minimum: number;
  /** Gets or sets the maximum. */
  maximum?: number;
  /** Gets or sets the default. */
  default?: number;
  /** Gets or sets the type of the scale. */
  scaleType?: SkuScaleType;
}

/** Locations and availability zones where the SKU is available */
export interface ResourceSkuLocationInfo {
  /** Gets location of the SKU */
  location?: string;
  /** Gets list of availability zones where the SKU is supported. */
  zones?: string[];
  /** Gets details of capabilities available to a SKU in specific zones. */
  zoneDetails?: ResourceSkuZoneDetails[];
}

/** Details of capabilities available to a SKU in specific zones */
export interface ResourceSkuZoneDetails {
  /**
   * Gets the set of zones that the SKU is available in with the
   * specified capabilities.
   */
  name?: string[];
  /**
   * Gets a list of capabilities that are available for the SKU in the
   * specified list of zones.
   */
  capabilities?: ResourceSkuCapabilities[];
}

export interface ResourceSkuCapabilities {
  /** Gets an invariant to describe the feature. */
  name?: string;
  /** Gets an invariant if the feature is measured by quantity. */
  value?: string;
}

/** Restrictions where the SKU cannot be used */
export interface ResourceSkuRestrictions {
  /** Gets the type of restrictions. Possible values include: 'Location', 'Zone' */
  type?: ResourceSkuRestrictionsType;
  /**
   * Gets the value of restrictions. If the restriction type is set to
   * location. This would be different locations where the SKU is restricted.
   */
  values?: string[];
  /** Gets the information about the restriction where the SKU cannot be used. */
  restrictionInfo?: ResourceSkuRestrictionInfo;
  /** Gets the reason for restriction. Possible values include: 'QuotaId', 'NotAvailableForSubscription' */
  reasonCode?: ResourceSkuRestrictionsReasonCode;
}

/** Information about the restriction where the SKU cannot be used */
export interface ResourceSkuRestrictionInfo {
  /** Gets locations where the SKU is restricted */
  locations?: string[];
  /** Gets list of availability zones where the SKU is restricted. */
  zones?: string[];
}

/** The resource model definition for a ARM tracked top level resource. */
export type TrackedResource = Resource & {
  /** The GEO location of the resource. */
  location?: string;
  /** Tags of the service which is a list of key value pairs that describe the resource. */
  tags?: { [propertyName: string]: string };
};

/** The resource model definition for a ARM proxy resource. It will have everything other than required location and tags. */
export type ProxyResource = Resource & {};

/** Properties of certificate imported from key vault. */
export type KeyVaultCertificateProperties = CertificateProperties & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "KeyVaultCertificate";
  /** The vault uri of user key vault. */
  vaultUri: string;
  /** The certificate name of key vault. */
  keyVaultCertName: string;
  /** The certificate version of key vault. */
  certVersion?: string;
  /** Optional. If set to true, it will not import private key from key vault. */
  excludePrivateKey?: boolean;
};

/** Properties of certificate imported from key vault. */
export type ContentCertificateProperties = CertificateProperties & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "ContentCertificate";
  /** The content of uploaded certificate. */
  content?: string;
};

/** Source with uploaded location */
export type UploadedUserSourceInfo = UserSourceInfo & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "UploadedUserSourceInfo" | "Jar" | "Source" | "NetCoreZip";
  /** Relative path of the storage which stores the source */
  relativePath?: string;
};

/** Reference to a build result */
export type BuildResultUserSourceInfo = UserSourceInfo & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "BuildResult";
  /** Resource id of an existing succeeded build result under the same Spring instance. */
  buildResultId?: string;
};

/** Service resource */
export type ServiceResource = TrackedResource & {
  /** Properties of the Service resource */
  properties?: ClusterResourceProperties;
  /** Sku of the Service resource */
  sku?: Sku;
};

/** Config Server resource */
export type ConfigServerResource = ProxyResource & {
  /** Properties of the Config Server resource */
  properties?: ConfigServerProperties;
};

/** Application Configuration Service resource */
export type ConfigurationServiceResource = ProxyResource & {
  /** Application Configuration Service properties payload */
  properties?: ConfigurationServiceProperties;
};

/** Service Registry resource */
export type ServiceRegistryResource = ProxyResource & {
  /** Service Registry properties payload */
  properties?: ServiceRegistryProperties;
};

/** Build service resource payload */
export type BuildService = ProxyResource & {
  /** Properties of the build resource */
  properties?: BuildServiceProperties;
};

/** Build resource payload */
export type Build = ProxyResource & {
  /** Properties of the build resource */
  properties?: BuildProperties;
};

/** Buildpack Binding Resource object */
export type BuildpackBindingResource = ProxyResource & {
  /** Properties of a buildpack binding */
  properties?: BuildpackBindingProperties;
};

/** Build result resource payload */
export type BuildResult = ProxyResource & {
  /** Properties of the build result resource */
  properties?: BuildResultProperties;
};

/** KPack Builder resource */
export type BuilderResource = ProxyResource & {
  /** Property of the Builder resource. */
  properties?: BuilderProperties;
};

/** Supported buildpack resource payload */
export type SupportedBuildpackResource = ProxyResource & {
  /** Supported buildpack resource properties */
  properties?: SupportedBuildpackResourceProperties;
};

/** Supported stack resource payload */
export type SupportedStackResource = ProxyResource & {
  /** Supported stack resource properties */
  properties?: SupportedStackResourceProperties;
};

/** The build service agent pool resource */
export type BuildServiceAgentPoolResource = ProxyResource & {
  /** build service agent pool properties */
  properties?: BuildServiceAgentPoolProperties;
};

/** Monitoring Setting resource */
export type MonitoringSettingResource = ProxyResource & {
  /** Properties of the Monitoring Setting resource */
  properties?: MonitoringSettingProperties;
};

/** App resource payload */
export type AppResource = ProxyResource & {
  /** Properties of the App resource */
  properties?: AppResourceProperties;
  /** The Managed Identity type of the app resource */
  identity?: ManagedIdentityProperties;
  /** The GEO location of the application, always the same with its parent resource */
  location?: string;
};

/** Binding resource payload */
export type BindingResource = ProxyResource & {
  /** Properties of the Binding resource */
  properties?: BindingResourceProperties;
};

/** Certificate resource payload. */
export type CertificateResource = ProxyResource & {
  /** Properties of the certificate resource payload. */
  properties?: CertificatePropertiesUnion;
};

/** Custom domain resource payload. */
export type CustomDomainResource = ProxyResource & {
  /** Properties of the custom domain resource. */
  properties?: CustomDomainProperties;
};

/** Deployment resource payload */
export type DeploymentResource = ProxyResource & {
  /** Properties of the Deployment resource */
  properties?: DeploymentResourceProperties;
  /** Sku of the Deployment resource */
  sku?: Sku;
};

/** Uploaded Jar binary for a deployment */
export type JarUploadedUserSourceInfo = UploadedUserSourceInfo & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "Jar";
  /** Runtime version of the Jar file */
  runtimeVersion?: string;
  /** JVM parameter */
  jvmOptions?: string;
};

/** Uploaded Java source code binary for a deployment */
export type SourceUploadedUserSourceInfo = UploadedUserSourceInfo & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "Source";
  /**
   * Selector for the artifact to be used for the deployment for multi-module projects. This should be
   * the relative path to the target module/project.
   */
  artifactSelector?: string;
  /** Runtime version of the source file */
  runtimeVersion?: string;
};

/** Uploaded Jar binary for a deployment */
export type NetCoreZipUploadedUserSourceInfo = UploadedUserSourceInfo & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "NetCoreZip";
  /** The path to the .NET executable relative to zip root */
  netCoreMainEntryPath?: string;
  /** Runtime version of the .Net file */
  runtimeVersion?: string;
};

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  Creating = "Creating",
  Updating = "Updating",
  Starting = "Starting",
  Stopping = "Stopping",
  Deleting = "Deleting",
  Deleted = "Deleted",
  Succeeded = "Succeeded",
  Failed = "Failed",
  Moving = "Moving",
  Moved = "Moved",
  MoveFailed = "MoveFailed"
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Starting** \
 * **Stopping** \
 * **Deleting** \
 * **Deleted** \
 * **Succeeded** \
 * **Failed** \
 * **Moving** \
 * **Moved** \
 * **MoveFailed**
 */
export type ProvisioningState = string;

/** Known values of {@link TrafficDirection} that the service accepts. */
export enum KnownTrafficDirection {
  Inbound = "Inbound",
  Outbound = "Outbound"
}

/**
 * Defines values for TrafficDirection. \
 * {@link KnownTrafficDirection} can be used interchangeably with TrafficDirection,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Inbound** \
 * **Outbound**
 */
export type TrafficDirection = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  User = "User",
  Application = "Application",
  ManagedIdentity = "ManagedIdentity",
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link LastModifiedByType} that the service accepts. */
export enum KnownLastModifiedByType {
  User = "User",
  Application = "Application",
  ManagedIdentity = "ManagedIdentity",
  Key = "Key"
}

/**
 * Defines values for LastModifiedByType. \
 * {@link KnownLastModifiedByType} can be used interchangeably with LastModifiedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type LastModifiedByType = string;

/** Known values of {@link TestKeyType} that the service accepts. */
export enum KnownTestKeyType {
  Primary = "Primary",
  Secondary = "Secondary"
}

/**
 * Defines values for TestKeyType. \
 * {@link KnownTestKeyType} can be used interchangeably with TestKeyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Primary** \
 * **Secondary**
 */
export type TestKeyType = string;

/** Known values of {@link ConfigServerState} that the service accepts. */
export enum KnownConfigServerState {
  NotAvailable = "NotAvailable",
  Deleted = "Deleted",
  Failed = "Failed",
  Succeeded = "Succeeded",
  Updating = "Updating"
}

/**
 * Defines values for ConfigServerState. \
 * {@link KnownConfigServerState} can be used interchangeably with ConfigServerState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotAvailable** \
 * **Deleted** \
 * **Failed** \
 * **Succeeded** \
 * **Updating**
 */
export type ConfigServerState = string;

/** Known values of {@link ConfigurationServiceProvisioningState} that the service accepts. */
export enum KnownConfigurationServiceProvisioningState {
  Creating = "Creating",
  Updating = "Updating",
  Succeeded = "Succeeded",
  Failed = "Failed",
  Deleting = "Deleting"
}

/**
 * Defines values for ConfigurationServiceProvisioningState. \
 * {@link KnownConfigurationServiceProvisioningState} can be used interchangeably with ConfigurationServiceProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Deleting**
 */
export type ConfigurationServiceProvisioningState = string;

/** Known values of {@link ServiceRegistryProvisioningState} that the service accepts. */
export enum KnownServiceRegistryProvisioningState {
  Creating = "Creating",
  Updating = "Updating",
  Succeeded = "Succeeded",
  Failed = "Failed",
  Deleting = "Deleting"
}

/**
 * Defines values for ServiceRegistryProvisioningState. \
 * {@link KnownServiceRegistryProvisioningState} can be used interchangeably with ServiceRegistryProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Deleting**
 */
export type ServiceRegistryProvisioningState = string;

/** Known values of {@link BuildServiceProvisioningState} that the service accepts. */
export enum KnownBuildServiceProvisioningState {
  Creating = "Creating",
  Updating = "Updating",
  Succeeded = "Succeeded",
  Failed = "Failed",
  Deleting = "Deleting"
}

/**
 * Defines values for BuildServiceProvisioningState. \
 * {@link KnownBuildServiceProvisioningState} can be used interchangeably with BuildServiceProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Deleting**
 */
export type BuildServiceProvisioningState = string;

/** Known values of {@link BuildProvisioningState} that the service accepts. */
export enum KnownBuildProvisioningState {
  Creating = "Creating",
  Updating = "Updating",
  Succeeded = "Succeeded",
  Failed = "Failed",
  Deleting = "Deleting"
}

/**
 * Defines values for BuildProvisioningState. \
 * {@link KnownBuildProvisioningState} can be used interchangeably with BuildProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Deleting**
 */
export type BuildProvisioningState = string;

/** Known values of {@link BindingType} that the service accepts. */
export enum KnownBindingType {
  ApplicationInsights = "ApplicationInsights",
  ApacheSkyWalking = "ApacheSkyWalking",
  AppDynamics = "AppDynamics",
  Dynatrace = "Dynatrace",
  NewRelic = "NewRelic",
  ElasticAPM = "ElasticAPM"
}

/**
 * Defines values for BindingType. \
 * {@link KnownBindingType} can be used interchangeably with BindingType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ApplicationInsights** \
 * **ApacheSkyWalking** \
 * **AppDynamics** \
 * **Dynatrace** \
 * **NewRelic** \
 * **ElasticAPM**
 */
export type BindingType = string;

/** Known values of {@link BuildpackBindingProvisioningState} that the service accepts. */
export enum KnownBuildpackBindingProvisioningState {
  Creating = "Creating",
  Updating = "Updating",
  Succeeded = "Succeeded",
  Failed = "Failed",
  Deleting = "Deleting"
}

/**
 * Defines values for BuildpackBindingProvisioningState. \
 * {@link KnownBuildpackBindingProvisioningState} can be used interchangeably with BuildpackBindingProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Deleting**
 */
export type BuildpackBindingProvisioningState = string;

/** Known values of {@link BuildResultProvisioningState} that the service accepts. */
export enum KnownBuildResultProvisioningState {
  Queuing = "Queuing",
  Building = "Building",
  Succeeded = "Succeeded",
  Failed = "Failed",
  Deleting = "Deleting"
}

/**
 * Defines values for BuildResultProvisioningState. \
 * {@link KnownBuildResultProvisioningState} can be used interchangeably with BuildResultProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Queuing** \
 * **Building** \
 * **Succeeded** \
 * **Failed** \
 * **Deleting**
 */
export type BuildResultProvisioningState = string;

/** Known values of {@link KPackBuildStageProvisioningState} that the service accepts. */
export enum KnownKPackBuildStageProvisioningState {
  NotStarted = "NotStarted",
  Running = "Running",
  Succeeded = "Succeeded",
  Failed = "Failed"
}

/**
 * Defines values for KPackBuildStageProvisioningState. \
 * {@link KnownKPackBuildStageProvisioningState} can be used interchangeably with KPackBuildStageProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotStarted** \
 * **Running** \
 * **Succeeded** \
 * **Failed**
 */
export type KPackBuildStageProvisioningState = string;

/** Known values of {@link BuilderProvisioningState} that the service accepts. */
export enum KnownBuilderProvisioningState {
  Creating = "Creating",
  Updating = "Updating",
  Succeeded = "Succeeded",
  Failed = "Failed",
  Deleting = "Deleting"
}

/**
 * Defines values for BuilderProvisioningState. \
 * {@link KnownBuilderProvisioningState} can be used interchangeably with BuilderProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Deleting**
 */
export type BuilderProvisioningState = string;

/** Known values of {@link MonitoringSettingState} that the service accepts. */
export enum KnownMonitoringSettingState {
  NotAvailable = "NotAvailable",
  Failed = "Failed",
  Succeeded = "Succeeded",
  Updating = "Updating"
}

/**
 * Defines values for MonitoringSettingState. \
 * {@link KnownMonitoringSettingState} can be used interchangeably with MonitoringSettingState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotAvailable** \
 * **Failed** \
 * **Succeeded** \
 * **Updating**
 */
export type MonitoringSettingState = string;

/** Known values of {@link AppResourceProvisioningState} that the service accepts. */
export enum KnownAppResourceProvisioningState {
  Succeeded = "Succeeded",
  Failed = "Failed",
  Creating = "Creating",
  Updating = "Updating",
  Deleting = "Deleting"
}

/**
 * Defines values for AppResourceProvisioningState. \
 * {@link KnownAppResourceProvisioningState} can be used interchangeably with AppResourceProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Creating** \
 * **Updating** \
 * **Deleting**
 */
export type AppResourceProvisioningState = string;

/** Known values of {@link ManagedIdentityType} that the service accepts. */
export enum KnownManagedIdentityType {
  None = "None",
  SystemAssigned = "SystemAssigned",
  UserAssigned = "UserAssigned",
  SystemAssignedUserAssigned = "SystemAssigned,UserAssigned"
}

/**
 * Defines values for ManagedIdentityType. \
 * {@link KnownManagedIdentityType} can be used interchangeably with ManagedIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAssigned,UserAssigned**
 */
export type ManagedIdentityType = string;

/** Known values of {@link DeploymentResourceProvisioningState} that the service accepts. */
export enum KnownDeploymentResourceProvisioningState {
  Creating = "Creating",
  Updating = "Updating",
  Succeeded = "Succeeded",
  Failed = "Failed"
}

/**
 * Defines values for DeploymentResourceProvisioningState. \
 * {@link KnownDeploymentResourceProvisioningState} can be used interchangeably with DeploymentResourceProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Succeeded** \
 * **Failed**
 */
export type DeploymentResourceProvisioningState = string;

/** Known values of {@link DeploymentResourceStatus} that the service accepts. */
export enum KnownDeploymentResourceStatus {
  Stopped = "Stopped",
  Running = "Running"
}

/**
 * Defines values for DeploymentResourceStatus. \
 * {@link KnownDeploymentResourceStatus} can be used interchangeably with DeploymentResourceStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Stopped** \
 * **Running**
 */
export type DeploymentResourceStatus = string;

/** Known values of {@link ActionType} that the service accepts. */
export enum KnownActionType {
  Internal = "Internal"
}

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export type ActionType = string;

/** Known values of {@link SupportedRuntimeValue} that the service accepts. */
export enum KnownSupportedRuntimeValue {
  Java8 = "Java_8",
  Java11 = "Java_11",
  Java17 = "Java_17",
  NetCore31 = "NetCore_31"
}

/**
 * Defines values for SupportedRuntimeValue. \
 * {@link KnownSupportedRuntimeValue} can be used interchangeably with SupportedRuntimeValue,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Java_8** \
 * **Java_11** \
 * **Java_17** \
 * **NetCore_31**
 */
export type SupportedRuntimeValue = string;

/** Known values of {@link SupportedRuntimePlatform} that the service accepts. */
export enum KnownSupportedRuntimePlatform {
  Java = "Java",
  NETCore = ".NET Core"
}

/**
 * Defines values for SupportedRuntimePlatform. \
 * {@link KnownSupportedRuntimePlatform} can be used interchangeably with SupportedRuntimePlatform,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Java** \
 * **.NET Core**
 */
export type SupportedRuntimePlatform = string;

/** Known values of {@link SkuScaleType} that the service accepts. */
export enum KnownSkuScaleType {
  None = "None",
  Manual = "Manual",
  Automatic = "Automatic"
}

/**
 * Defines values for SkuScaleType. \
 * {@link KnownSkuScaleType} can be used interchangeably with SkuScaleType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Manual** \
 * **Automatic**
 */
export type SkuScaleType = string;

/** Known values of {@link ResourceSkuRestrictionsType} that the service accepts. */
export enum KnownResourceSkuRestrictionsType {
  Location = "Location",
  Zone = "Zone"
}

/**
 * Defines values for ResourceSkuRestrictionsType. \
 * {@link KnownResourceSkuRestrictionsType} can be used interchangeably with ResourceSkuRestrictionsType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Location** \
 * **Zone**
 */
export type ResourceSkuRestrictionsType = string;

/** Known values of {@link ResourceSkuRestrictionsReasonCode} that the service accepts. */
export enum KnownResourceSkuRestrictionsReasonCode {
  QuotaId = "QuotaId",
  NotAvailableForSubscription = "NotAvailableForSubscription"
}

/**
 * Defines values for ResourceSkuRestrictionsReasonCode. \
 * {@link KnownResourceSkuRestrictionsReasonCode} can be used interchangeably with ResourceSkuRestrictionsReasonCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **QuotaId** \
 * **NotAvailableForSubscription**
 */
export type ResourceSkuRestrictionsReasonCode = string;

/** Optional parameters. */
export interface ServicesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ServicesGetResponse = ServiceResource;

/** Optional parameters. */
export interface ServicesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ServicesCreateOrUpdateResponse = ServiceResource;

/** Optional parameters. */
export interface ServicesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ServicesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type ServicesUpdateResponse = ServiceResource;

/** Optional parameters. */
export interface ServicesListTestKeysOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listTestKeys operation. */
export type ServicesListTestKeysResponse = TestKeys;

/** Optional parameters. */
export interface ServicesRegenerateTestKeyOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the regenerateTestKey operation. */
export type ServicesRegenerateTestKeyResponse = TestKeys;

/** Optional parameters. */
export interface ServicesDisableTestEndpointOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ServicesEnableTestEndpointOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the enableTestEndpoint operation. */
export type ServicesEnableTestEndpointResponse = TestKeys;

/** Optional parameters. */
export interface ServicesCheckNameAvailabilityOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the checkNameAvailability operation. */
export type ServicesCheckNameAvailabilityResponse = NameAvailability;

/** Optional parameters. */
export interface ServicesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type ServicesListBySubscriptionResponse = ServiceResourceList;

/** Optional parameters. */
export interface ServicesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ServicesListResponse = ServiceResourceList;

/** Optional parameters. */
export interface ServicesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type ServicesListBySubscriptionNextResponse = ServiceResourceList;

/** Optional parameters. */
export interface ServicesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ServicesListNextResponse = ServiceResourceList;

/** Optional parameters. */
export interface ConfigServersGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ConfigServersGetResponse = ConfigServerResource;

/** Optional parameters. */
export interface ConfigServersUpdatePutOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updatePut operation. */
export type ConfigServersUpdatePutResponse = ConfigServerResource;

/** Optional parameters. */
export interface ConfigServersUpdatePatchOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updatePatch operation. */
export type ConfigServersUpdatePatchResponse = ConfigServerResource;

/** Optional parameters. */
export interface ConfigServersValidateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the validate operation. */
export type ConfigServersValidateResponse = ConfigServerSettingsValidateResult;

/** Optional parameters. */
export interface ConfigurationServicesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ConfigurationServicesGetResponse = ConfigurationServiceResource;

/** Optional parameters. */
export interface ConfigurationServicesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ConfigurationServicesCreateOrUpdateResponse = ConfigurationServiceResource;

/** Optional parameters. */
export interface ConfigurationServicesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ConfigurationServicesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ConfigurationServicesListResponse = ConfigurationServiceResourceCollection;

/** Optional parameters. */
export interface ConfigurationServicesValidateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the validate operation. */
export type ConfigurationServicesValidateResponse = ConfigurationServiceSettingsValidateResult;

/** Optional parameters. */
export interface ConfigurationServicesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ConfigurationServicesListNextResponse = ConfigurationServiceResourceCollection;

/** Optional parameters. */
export interface ServiceRegistriesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ServiceRegistriesGetResponse = ServiceRegistryResource;

/** Optional parameters. */
export interface ServiceRegistriesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ServiceRegistriesCreateOrUpdateResponse = ServiceRegistryResource;

/** Optional parameters. */
export interface ServiceRegistriesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ServiceRegistriesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ServiceRegistriesListResponse = ServiceRegistryResourceCollection;

/** Optional parameters. */
export interface ServiceRegistriesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ServiceRegistriesListNextResponse = ServiceRegistryResourceCollection;

/** Optional parameters. */
export interface BuildServiceListBuildServicesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBuildServices operation. */
export type BuildServiceListBuildServicesResponse = BuildServiceCollection;

/** Optional parameters. */
export interface BuildServiceGetBuildServiceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getBuildService operation. */
export type BuildServiceGetBuildServiceResponse = BuildService;

/** Optional parameters. */
export interface BuildServiceListBuildsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBuilds operation. */
export type BuildServiceListBuildsResponse = BuildCollection;

/** Optional parameters. */
export interface BuildServiceGetBuildOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getBuild operation. */
export type BuildServiceGetBuildResponse = Build;

/** Optional parameters. */
export interface BuildServiceCreateOrUpdateBuildOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdateBuild operation. */
export type BuildServiceCreateOrUpdateBuildResponse = Build;

/** Optional parameters. */
export interface BuildServiceListBuildResultsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBuildResults operation. */
export type BuildServiceListBuildResultsResponse = BuildResultCollection;

/** Optional parameters. */
export interface BuildServiceGetBuildResultOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getBuildResult operation. */
export type BuildServiceGetBuildResultResponse = BuildResult;

/** Optional parameters. */
export interface BuildServiceGetBuildResultLogOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getBuildResultLog operation. */
export type BuildServiceGetBuildResultLogResponse = BuildResultLog;

/** Optional parameters. */
export interface BuildServiceGetResourceUploadUrlOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getResourceUploadUrl operation. */
export type BuildServiceGetResourceUploadUrlResponse = ResourceUploadDefinition;

/** Optional parameters. */
export interface BuildServiceListSupportedBuildpacksOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listSupportedBuildpacks operation. */
export type BuildServiceListSupportedBuildpacksResponse = SupportedBuildpacksCollection;

/** Optional parameters. */
export interface BuildServiceGetSupportedBuildpackOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getSupportedBuildpack operation. */
export type BuildServiceGetSupportedBuildpackResponse = SupportedBuildpackResource;

/** Optional parameters. */
export interface BuildServiceListSupportedStacksOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listSupportedStacks operation. */
export type BuildServiceListSupportedStacksResponse = SupportedStacksCollection;

/** Optional parameters. */
export interface BuildServiceGetSupportedStackOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getSupportedStack operation. */
export type BuildServiceGetSupportedStackResponse = SupportedStackResource;

/** Optional parameters. */
export interface BuildServiceListBuildServicesNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBuildServicesNext operation. */
export type BuildServiceListBuildServicesNextResponse = BuildServiceCollection;

/** Optional parameters. */
export interface BuildServiceListBuildsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBuildsNext operation. */
export type BuildServiceListBuildsNextResponse = BuildCollection;

/** Optional parameters. */
export interface BuildServiceListBuildResultsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBuildResultsNext operation. */
export type BuildServiceListBuildResultsNextResponse = BuildResultCollection;

/** Optional parameters. */
export interface BuildpackBindingGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type BuildpackBindingGetResponse = BuildpackBindingResource;

/** Optional parameters. */
export interface BuildpackBindingCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type BuildpackBindingCreateOrUpdateResponse = BuildpackBindingResource;

/** Optional parameters. */
export interface BuildpackBindingDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface BuildpackBindingListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type BuildpackBindingListResponse = BuildpackBindingResourceCollection;

/** Optional parameters. */
export interface BuildpackBindingListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type BuildpackBindingListNextResponse = BuildpackBindingResourceCollection;

/** Optional parameters. */
export interface BuildServiceBuilderGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type BuildServiceBuilderGetResponse = BuilderResource;

/** Optional parameters. */
export interface BuildServiceBuilderCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type BuildServiceBuilderCreateOrUpdateResponse = BuilderResource;

/** Optional parameters. */
export interface BuildServiceBuilderDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface BuildServiceBuilderListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type BuildServiceBuilderListResponse = BuilderResourceCollection;

/** Optional parameters. */
export interface BuildServiceBuilderListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type BuildServiceBuilderListNextResponse = BuilderResourceCollection;

/** Optional parameters. */
export interface BuildServiceAgentPoolListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type BuildServiceAgentPoolListResponse = BuildServiceAgentPoolResourceCollection;

/** Optional parameters. */
export interface BuildServiceAgentPoolGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type BuildServiceAgentPoolGetResponse = BuildServiceAgentPoolResource;

/** Optional parameters. */
export interface BuildServiceAgentPoolUpdatePutOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updatePut operation. */
export type BuildServiceAgentPoolUpdatePutResponse = BuildServiceAgentPoolResource;

/** Optional parameters. */
export interface BuildServiceAgentPoolListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type BuildServiceAgentPoolListNextResponse = BuildServiceAgentPoolResourceCollection;

/** Optional parameters. */
export interface MonitoringSettingsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type MonitoringSettingsGetResponse = MonitoringSettingResource;

/** Optional parameters. */
export interface MonitoringSettingsUpdatePutOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updatePut operation. */
export type MonitoringSettingsUpdatePutResponse = MonitoringSettingResource;

/** Optional parameters. */
export interface MonitoringSettingsUpdatePatchOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updatePatch operation. */
export type MonitoringSettingsUpdatePatchResponse = MonitoringSettingResource;

/** Optional parameters. */
export interface AppsGetOptionalParams extends coreClient.OperationOptions {
  /** Indicates whether sync status */
  syncStatus?: string;
}

/** Contains response data for the get operation. */
export type AppsGetResponse = AppResource;

/** Optional parameters. */
export interface AppsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type AppsCreateOrUpdateResponse = AppResource;

/** Optional parameters. */
export interface AppsDeleteOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface AppsUpdateOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type AppsUpdateResponse = AppResource;

/** Optional parameters. */
export interface AppsListOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type AppsListResponse = AppResourceCollection;

/** Optional parameters. */
export interface AppsGetResourceUploadUrlOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getResourceUploadUrl operation. */
export type AppsGetResourceUploadUrlResponse = ResourceUploadDefinition;

/** Optional parameters. */
export interface AppsSetActiveDeploymentsOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the setActiveDeployments operation. */
export type AppsSetActiveDeploymentsResponse = AppResource;

/** Optional parameters. */
export interface AppsValidateDomainOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the validateDomain operation. */
export type AppsValidateDomainResponse = CustomDomainValidateResult;

/** Optional parameters. */
export interface AppsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type AppsListNextResponse = AppResourceCollection;

/** Optional parameters. */
export interface BindingsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type BindingsGetResponse = BindingResource;

/** Optional parameters. */
export interface BindingsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type BindingsCreateOrUpdateResponse = BindingResource;

/** Optional parameters. */
export interface BindingsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface BindingsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type BindingsUpdateResponse = BindingResource;

/** Optional parameters. */
export interface BindingsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type BindingsListResponse = BindingResourceCollection;

/** Optional parameters. */
export interface BindingsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type BindingsListNextResponse = BindingResourceCollection;

/** Optional parameters. */
export interface CertificatesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type CertificatesGetResponse = CertificateResource;

/** Optional parameters. */
export interface CertificatesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type CertificatesCreateOrUpdateResponse = CertificateResource;

/** Optional parameters. */
export interface CertificatesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface CertificatesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type CertificatesListResponse = CertificateResourceCollection;

/** Optional parameters. */
export interface CertificatesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type CertificatesListNextResponse = CertificateResourceCollection;

/** Optional parameters. */
export interface CustomDomainsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type CustomDomainsGetResponse = CustomDomainResource;

/** Optional parameters. */
export interface CustomDomainsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type CustomDomainsCreateOrUpdateResponse = CustomDomainResource;

/** Optional parameters. */
export interface CustomDomainsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface CustomDomainsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type CustomDomainsUpdateResponse = CustomDomainResource;

/** Optional parameters. */
export interface CustomDomainsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type CustomDomainsListResponse = CustomDomainResourceCollection;

/** Optional parameters. */
export interface CustomDomainsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type CustomDomainsListNextResponse = CustomDomainResourceCollection;

/** Optional parameters. */
export interface DeploymentsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DeploymentsGetResponse = DeploymentResource;

/** Optional parameters. */
export interface DeploymentsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type DeploymentsCreateOrUpdateResponse = DeploymentResource;

/** Optional parameters. */
export interface DeploymentsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DeploymentsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type DeploymentsUpdateResponse = DeploymentResource;

/** Optional parameters. */
export interface DeploymentsListOptionalParams
  extends coreClient.OperationOptions {
  /** Version of the deployments to be listed */
  version?: string[];
}

/** Contains response data for the list operation. */
export type DeploymentsListResponse = DeploymentResourceCollection;

/** Optional parameters. */
export interface DeploymentsListForClusterOptionalParams
  extends coreClient.OperationOptions {
  /** Version of the deployments to be listed */
  version?: string[];
}

/** Contains response data for the listForCluster operation. */
export type DeploymentsListForClusterResponse = DeploymentResourceCollection;

/** Optional parameters. */
export interface DeploymentsStartOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DeploymentsStopOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DeploymentsRestartOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DeploymentsGetLogFileUrlOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getLogFileUrl operation. */
export type DeploymentsGetLogFileUrlResponse = LogFileUrlResponse;

/** Optional parameters. */
export interface DeploymentsGenerateHeapDumpOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DeploymentsGenerateThreadDumpOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DeploymentsStartJFROptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DeploymentsListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Version of the deployments to be listed */
  version?: string[];
}

/** Contains response data for the listNext operation. */
export type DeploymentsListNextResponse = DeploymentResourceCollection;

/** Optional parameters. */
export interface DeploymentsListForClusterNextOptionalParams
  extends coreClient.OperationOptions {
  /** Version of the deployments to be listed */
  version?: string[];
}

/** Contains response data for the listForClusterNext operation. */
export type DeploymentsListForClusterNextResponse = DeploymentResourceCollection;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = AvailableOperations;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = AvailableOperations;

/** Optional parameters. */
export interface RuntimeVersionsListRuntimeVersionsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listRuntimeVersions operation. */
export type RuntimeVersionsListRuntimeVersionsResponse = AvailableRuntimeVersions;

/** Optional parameters. */
export interface SkusListOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type SkusListResponse = ResourceSkuCollection;

/** Optional parameters. */
export interface SkusListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type SkusListNextResponse = ResourceSkuCollection;

/** Optional parameters. */
export interface AppPlatformManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
