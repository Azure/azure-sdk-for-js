/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  ServiceResource as ServiceResourceMapper,
  RegenerateTestKeyRequestPayload as RegenerateTestKeyRequestPayloadMapper,
  NameAvailabilityParameters as NameAvailabilityParametersMapper,
  ConfigServerResource as ConfigServerResourceMapper,
  ConfigServerSettings as ConfigServerSettingsMapper,
  MonitoringSettingResource as MonitoringSettingResourceMapper,
  AppResource as AppResourceMapper,
  CustomDomainValidatePayload as CustomDomainValidatePayloadMapper,
  BindingResource as BindingResourceMapper,
  StorageResource as StorageResourceMapper,
  CertificateResource as CertificateResourceMapper,
  CustomDomainResource as CustomDomainResourceMapper,
  DeploymentResource as DeploymentResourceMapper,
  DiagnosticParameters as DiagnosticParametersMapper
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2021-09-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const serviceName: OperationURLParameter = {
  parameterPath: "serviceName",
  mapper: {
    serializedName: "serviceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const resource: OperationParameter = {
  parameterPath: "resource",
  mapper: ServiceResourceMapper
};

export const regenerateTestKeyRequest: OperationParameter = {
  parameterPath: "regenerateTestKeyRequest",
  mapper: RegenerateTestKeyRequestPayloadMapper
};

export const availabilityParameters: OperationParameter = {
  parameterPath: "availabilityParameters",
  mapper: NameAvailabilityParametersMapper
};

export const location: OperationURLParameter = {
  parameterPath: "location",
  mapper: {
    serializedName: "location",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const configServerResource: OperationParameter = {
  parameterPath: "configServerResource",
  mapper: ConfigServerResourceMapper
};

export const configServerSettings: OperationParameter = {
  parameterPath: "configServerSettings",
  mapper: ConfigServerSettingsMapper
};

export const monitoringSettingResource: OperationParameter = {
  parameterPath: "monitoringSettingResource",
  mapper: MonitoringSettingResourceMapper
};

export const appName: OperationURLParameter = {
  parameterPath: "appName",
  mapper: {
    serializedName: "appName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const syncStatus: OperationQueryParameter = {
  parameterPath: ["options", "syncStatus"],
  mapper: {
    serializedName: "syncStatus",
    type: {
      name: "String"
    }
  }
};

export const appResource: OperationParameter = {
  parameterPath: "appResource",
  mapper: AppResourceMapper
};

export const validatePayload: OperationParameter = {
  parameterPath: "validatePayload",
  mapper: CustomDomainValidatePayloadMapper
};

export const bindingName: OperationURLParameter = {
  parameterPath: "bindingName",
  mapper: {
    serializedName: "bindingName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const bindingResource: OperationParameter = {
  parameterPath: "bindingResource",
  mapper: BindingResourceMapper
};

export const storageName: OperationURLParameter = {
  parameterPath: "storageName",
  mapper: {
    serializedName: "storageName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const storageResource: OperationParameter = {
  parameterPath: "storageResource",
  mapper: StorageResourceMapper
};

export const certificateName: OperationURLParameter = {
  parameterPath: "certificateName",
  mapper: {
    serializedName: "certificateName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const certificateResource: OperationParameter = {
  parameterPath: "certificateResource",
  mapper: CertificateResourceMapper
};

export const domainName: OperationURLParameter = {
  parameterPath: "domainName",
  mapper: {
    serializedName: "domainName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const domainResource: OperationParameter = {
  parameterPath: "domainResource",
  mapper: CustomDomainResourceMapper
};

export const deploymentName: OperationURLParameter = {
  parameterPath: "deploymentName",
  mapper: {
    serializedName: "deploymentName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const deploymentResource: OperationParameter = {
  parameterPath: "deploymentResource",
  mapper: DeploymentResourceMapper
};

export const version: OperationQueryParameter = {
  parameterPath: ["options", "version"],
  mapper: {
    serializedName: "version",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: "Multi"
};

export const diagnosticParameters: OperationParameter = {
  parameterPath: "diagnosticParameters",
  mapper: DiagnosticParametersMapper
};
