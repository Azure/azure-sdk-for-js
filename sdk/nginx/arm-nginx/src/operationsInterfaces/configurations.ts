/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  NginxConfiguration,
  ConfigurationsListOptionalParams,
  ConfigurationsGetOptionalParams,
  ConfigurationsGetResponse,
  ConfigurationsCreateOrUpdateOptionalParams,
  ConfigurationsCreateOrUpdateResponse,
  ConfigurationsDeleteOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Configurations. */
export interface Configurations {
  /**
   * List the Nginx configuration of given Nginx deployment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentName The name of targeted Nginx deployment
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    deploymentName: string,
    options?: ConfigurationsListOptionalParams
  ): PagedAsyncIterableIterator<NginxConfiguration>;
  /**
   * Get the Nginx configuration of given Nginx deployment
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentName The name of targeted Nginx deployment
   * @param configurationName The name of configuration, only 'default' is supported value due to the
   *                          singleton of Nginx conf
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    deploymentName: string,
    configurationName: string,
    options?: ConfigurationsGetOptionalParams
  ): Promise<ConfigurationsGetResponse>;
  /**
   * Create or update the Nginx configuration for given Nginx deployment
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentName The name of targeted Nginx deployment
   * @param configurationName The name of configuration, only 'default' is supported value due to the
   *                          singleton of Nginx conf
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    deploymentName: string,
    configurationName: string,
    options?: ConfigurationsCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ConfigurationsCreateOrUpdateResponse>,
      ConfigurationsCreateOrUpdateResponse
    >
  >;
  /**
   * Create or update the Nginx configuration for given Nginx deployment
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentName The name of targeted Nginx deployment
   * @param configurationName The name of configuration, only 'default' is supported value due to the
   *                          singleton of Nginx conf
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    deploymentName: string,
    configurationName: string,
    options?: ConfigurationsCreateOrUpdateOptionalParams
  ): Promise<ConfigurationsCreateOrUpdateResponse>;
  /**
   * Reset the Nginx configuration of given Nginx deployment to default
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentName The name of targeted Nginx deployment
   * @param configurationName The name of configuration, only 'default' is supported value due to the
   *                          singleton of Nginx conf
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    deploymentName: string,
    configurationName: string,
    options?: ConfigurationsDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Reset the Nginx configuration of given Nginx deployment to default
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentName The name of targeted Nginx deployment
   * @param configurationName The name of configuration, only 'default' is supported value due to the
   *                          singleton of Nginx conf
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    deploymentName: string,
    configurationName: string,
    options?: ConfigurationsDeleteOptionalParams
  ): Promise<void>;
}
