/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export interface NginxDeploymentApiKeyRequest {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly id?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly name?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly type?: string;
  properties?: NginxDeploymentApiKeyRequestProperties;
}

export interface NginxDeploymentApiKeyRequestProperties {
  /**
   * Secret text to be used as a Dataplane API Key. This is a write only property that can never be read back, but the first three characters will be returned in the 'hint' property.
   * This value contains a credential. Consider obscuring before showing to users
   */
  secretText?: string;
  /** The time after which this Dataplane API Key is no longer valid. */
  endDateTime?: Date;
}

export interface NginxDeploymentApiKeyResponse {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly id?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly name?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly type?: string;
  properties?: NginxDeploymentApiKeyResponseProperties;
}

export interface NginxDeploymentApiKeyResponseProperties {
  /**
   * The first three characters of the secret text to help identify it in use. This property is read-only.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hint?: string;
  /** The time after which this Dataplane API Key is no longer valid. */
  endDateTime?: Date;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

export interface NginxDeploymentApiKeyListResponse {
  value?: NginxDeploymentApiKeyResponse[];
  nextLink?: string;
}

export interface NginxCertificate {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly id?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly name?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly type?: string;
  properties?: NginxCertificateProperties;
  location?: string;
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

export interface NginxCertificateProperties {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly provisioningState?: ProvisioningState;
  keyVirtualPath?: string;
  certificateVirtualPath?: string;
  keyVaultSecretId?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly sha1Thumbprint?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly keyVaultSecretVersion?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly keyVaultSecretCreated?: Date;
  certificateError?: NginxCertificateErrorResponseBody;
}

export interface NginxCertificateErrorResponseBody {
  code?: string;
  message?: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

export interface NginxCertificateListResponse {
  value?: NginxCertificate[];
  nextLink?: string;
}

/** Response of a list operation. */
export interface NginxConfigurationListResponse {
  /** Results of a list operation. */
  value?: NginxConfigurationResponse[];
  /** Link to the next set of results, if any. */
  nextLink?: string;
}

export interface NginxConfigurationResponse {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly id?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly name?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly type?: string;
  properties?: NginxConfigurationResponseProperties;
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

export interface NginxConfigurationResponseProperties {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly provisioningState?: ProvisioningState;
  files?: NginxConfigurationFile[];
  protectedFiles?: NginxConfigurationProtectedFileResponse[];
  package?: NginxConfigurationPackage;
  rootFile?: string;
}

export interface NginxConfigurationFile {
  content?: string;
  virtualPath?: string;
}

export interface NginxConfigurationProtectedFileResponse {
  /** The virtual path of the protected file. */
  virtualPath?: string;
  /** The hash of the content of the file. This value is used to determine if the file has changed. */
  contentHash?: string;
}

export interface NginxConfigurationPackage {
  data?: string;
  protectedFiles?: string[];
}

export interface NginxConfigurationRequest {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly id?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly name?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly type?: string;
  properties?: NginxConfigurationRequestProperties;
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

export interface NginxConfigurationRequestProperties {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly provisioningState?: ProvisioningState;
  files?: NginxConfigurationFile[];
  protectedFiles?: NginxConfigurationProtectedFileRequest[];
  package?: NginxConfigurationPackage;
  rootFile?: string;
}

export interface NginxConfigurationProtectedFileRequest {
  /** The content of the protected file. This value is a PUT only value. If you perform a GET request on this value, it will be empty because it is a protected file. */
  content?: string;
  /** The virtual path of the protected file. */
  virtualPath?: string;
  /** The hash of the content of the file. This value is used to determine if the file has changed. */
  contentHash?: string;
}

/** The request body for creating an analysis for an NGINX configuration. */
export interface AnalysisCreate {
  config: AnalysisCreateConfig;
}

export interface AnalysisCreateConfig {
  /** The root file of the NGINX config file(s). It must match one of the files' filepath. */
  rootFile?: string;
  files?: NginxConfigurationFile[];
  protectedFiles?: NginxConfigurationProtectedFileRequest[];
  package?: NginxConfigurationPackage;
}

/** The response body for an analysis request. Contains the status of the analysis and any errors. */
export interface AnalysisResult {
  /** The status of the analysis. */
  status: string;
  data?: AnalysisResultData;
}

export interface AnalysisResultData {
  errors?: AnalysisDiagnostic[];
  diagnostics?: DiagnosticItem[];
}

/** An error object found during the analysis of an NGINX configuration. */
export interface AnalysisDiagnostic {
  /** Unique identifier for the error */
  id?: string;
  directive: string;
  description: string;
  /** the filepath of the most relevant config file */
  file: string;
  line: number;
  message: string;
  rule: string;
}

/** A diagnostic is a message associated with an NGINX config. The Analyzer returns diagnostics with a level indicating the importance of the diagnostic with optional category. */
export interface DiagnosticItem {
  /** Unique identifier for the diagnostic. */
  id?: string;
  directive: string;
  description: string;
  /** The filepath of the most relevant config file. */
  file: string;
  line: number;
  message: string;
  rule: string;
  /** Warning or Info */
  level: Level;
  /** Category of warning like Best-practices, Recommendation, Security etc. */
  category?: string;
}

export interface NginxDeployment {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly id?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly name?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly type?: string;
  identity?: IdentityProperties;
  properties?: NginxDeploymentProperties;
  /** Dictionary of <string> */
  tags?: { [propertyName: string]: string };
  sku?: ResourceSku;
  location?: string;
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

export interface IdentityProperties {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly principalId?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly tenantId?: string;
  type?: IdentityType;
  /** Dictionary of <UserIdentityProperties> */
  userAssignedIdentities?: { [propertyName: string]: UserIdentityProperties };
}

export interface UserIdentityProperties {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly principalId?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly clientId?: string;
}

export interface NginxDeploymentProperties {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly provisioningState?: ProvisioningState;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly nginxVersion?: string;
  networkProfile?: NginxNetworkProfile;
  /**
   * The IP address of the deployment.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipAddress?: string;
  enableDiagnosticsSupport?: boolean;
  logging?: NginxLogging;
  /** Information on how the deployment will be scaled. */
  scalingProperties?: NginxDeploymentScalingProperties;
  /** Autoupgrade settings of a deployment. */
  autoUpgradeProfile?: AutoUpgradeProfile;
  userProfile?: NginxDeploymentUserProfile;
  /** Settings for NGINX App Protect (NAP) */
  nginxAppProtect?: NginxDeploymentPropertiesNginxAppProtect;
  /**
   * Dataplane API endpoint for the caller to update the NGINX state of the deployment.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dataplaneApiEndpoint?: string;
}

export interface NginxNetworkProfile {
  frontEndIPConfiguration?: NginxFrontendIPConfiguration;
  networkInterfaceConfiguration?: NginxNetworkInterfaceConfiguration;
}

export interface NginxFrontendIPConfiguration {
  publicIPAddresses?: NginxPublicIPAddress[];
  privateIPAddresses?: NginxPrivateIPAddress[];
}

export interface NginxPublicIPAddress {
  id?: string;
}

export interface NginxPrivateIPAddress {
  privateIPAddress?: string;
  privateIPAllocationMethod?: NginxPrivateIPAllocationMethod;
  subnetId?: string;
}

export interface NginxNetworkInterfaceConfiguration {
  subnetId?: string;
}

export interface NginxLogging {
  storageAccount?: NginxStorageAccount;
}

export interface NginxStorageAccount {
  accountName?: string;
  containerName?: string;
}

/** Information on how the deployment will be scaled. */
export interface NginxDeploymentScalingProperties {
  capacity?: number;
  profiles?: ScaleProfile[];
}

/** The autoscale profile. */
export interface ScaleProfile {
  name: string;
  /** The capacity parameters of the profile. */
  capacity: ScaleProfileCapacity;
}

/** The capacity parameters of the profile. */
export interface ScaleProfileCapacity {
  /** The minimum number of NCUs the deployment can be autoscaled to. */
  min: number;
  /** The maximum number of NCUs the deployment can be autoscaled to. */
  max: number;
}

/** Autoupgrade settings of a deployment. */
export interface AutoUpgradeProfile {
  /** Channel used for autoupgrade. */
  upgradeChannel: string;
}

export interface NginxDeploymentUserProfile {
  /** The preferred support contact email address of the user used for sending alerts and notification. Can be an empty string or a valid email address. */
  preferredEmail?: string;
}

/** Settings for NGINX App Protect (NAP) */
export interface NginxDeploymentPropertiesNginxAppProtect {
  /** Settings for the NGINX App Protect Web Application Firewall (WAF) */
  webApplicationFirewallSettings: WebApplicationFirewallSettings;
  /**
   * The status of the NGINX App Protect Web Application Firewall
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly webApplicationFirewallStatus?: WebApplicationFirewallStatus;
}

/** Settings for the NGINX App Protect Web Application Firewall (WAF) */
export interface WebApplicationFirewallSettings {
  /** The activation state of the WAF. Use 'Enabled' to enable the WAF and 'Disabled' to disable it. */
  activationState?: ActivationState;
}

/** The status of the NGINX App Protect Web Application Firewall */
export interface WebApplicationFirewallStatus {
  /**
   * Package containing attack signatures for the NGINX App Protect Web Application Firewall (WAF).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly attackSignaturesPackage?: WebApplicationFirewallPackage;
  /**
   * Package containing bot signatures for the NGINX App Protect Web Application Firewall (WAF).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly botSignaturesPackage?: WebApplicationFirewallPackage;
  /**
   * Package containing threat campaigns for the NGINX App Protect Web Application Firewall (WAF).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly threatCampaignsPackage?: WebApplicationFirewallPackage;
  /**
   * Versions of the NGINX App Protect Web Application Firewall (WAF) components.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly componentVersions?: WebApplicationFirewallComponentVersions;
}

/** NGINX App Protect Web Application Firewall (WAF) Package. Contains the version and revision date of the package. */
export interface WebApplicationFirewallPackage {
  /** The version of the NGINX App Protect Web Application Firewall (WAF) package. */
  version: string;
  /** The date and time of the package revision. */
  revisionDatetime: Date;
}

/** Versions of the NGINX App Protect Web Application Firewall (WAF) components. */
export interface WebApplicationFirewallComponentVersions {
  /** The version of the NGINX App Protect Web Application Firewall (WAF) engine. */
  wafEngineVersion: string;
  /** The version of the NGINX App Protect Web Application Firewall (WAF) module for NGINX. */
  wafNginxVersion: string;
}

export interface ResourceSku {
  /** Name of the SKU. */
  name: string;
}

export interface NginxDeploymentUpdateParameters {
  identity?: IdentityProperties;
  /** Dictionary of <string> */
  tags?: { [propertyName: string]: string };
  sku?: ResourceSku;
  location?: string;
  properties?: NginxDeploymentUpdateProperties;
}

export interface NginxDeploymentUpdateProperties {
  enableDiagnosticsSupport?: boolean;
  logging?: NginxLogging;
  /** Information on how the deployment will be scaled. */
  scalingProperties?: NginxDeploymentScalingProperties;
  userProfile?: NginxDeploymentUserProfile;
  networkProfile?: NginxNetworkProfile;
  /** Autoupgrade settings of a deployment. */
  autoUpgradeProfile?: AutoUpgradeProfile;
  /** Update settings for NGINX App Protect (NAP) */
  nginxAppProtect?: NginxDeploymentUpdatePropertiesNginxAppProtect;
}

/** Update settings for NGINX App Protect (NAP) */
export interface NginxDeploymentUpdatePropertiesNginxAppProtect {
  /** Settings for the NGINX App Protect Web Application Firewall (WAF) */
  webApplicationFirewallSettings?: WebApplicationFirewallSettings;
}

export interface NginxDeploymentListResponse {
  value?: NginxDeployment[];
  nextLink?: string;
}

/** Result of GET request to list Nginx.NginxPlus operations. */
export interface OperationListResult {
  /** List of operations supported by the Nginx.NginxPlus provider. */
  value?: OperationResult[];
  /** URL to get the next set of operation list results if there are any. */
  nextLink?: string;
}

/** A Nginx.NginxPlus REST API operation. */
export interface OperationResult {
  /** Operation name: {provider}/{resource}/{operation} */
  name?: string;
  /** The object that represents the operation. */
  display?: OperationDisplay;
  /** Indicates whether the operation is a data action */
  isDataAction?: boolean;
}

/** The object that represents the operation. */
export interface OperationDisplay {
  /** Service provider: Nginx.NginxPlus */
  provider?: string;
  /** Type on which the operation is performed, e.g., 'deployments'. */
  resource?: string;
  /** Operation type, e.g., read, write, delete, etc. */
  operation?: string;
  /** Description of the operation, e.g., 'Write deployments'. */
  description?: string;
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  /** Accepted */
  Accepted = "Accepted",
  /** Creating */
  Creating = "Creating",
  /** Updating */
  Updating = "Updating",
  /** Deleting */
  Deleting = "Deleting",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** Deleted */
  Deleted = "Deleted",
  /** NotSpecified */
  NotSpecified = "NotSpecified",
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Accepted** \
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Deleted** \
 * **NotSpecified**
 */
export type ProvisioningState = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key",
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link Level} that the service accepts. */
export enum KnownLevel {
  /** Info */
  Info = "Info",
  /** Warning */
  Warning = "Warning",
}

/**
 * Defines values for Level. \
 * {@link KnownLevel} can be used interchangeably with Level,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Info** \
 * **Warning**
 */
export type Level = string;

/** Known values of {@link IdentityType} that the service accepts. */
export enum KnownIdentityType {
  /** SystemAssigned */
  SystemAssigned = "SystemAssigned",
  /** UserAssigned */
  UserAssigned = "UserAssigned",
  /** SystemAssignedUserAssigned */
  SystemAssignedUserAssigned = "SystemAssigned, UserAssigned",
  /** None */
  None = "None",
}

/**
 * Defines values for IdentityType. \
 * {@link KnownIdentityType} can be used interchangeably with IdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAssigned, UserAssigned** \
 * **None**
 */
export type IdentityType = string;

/** Known values of {@link NginxPrivateIPAllocationMethod} that the service accepts. */
export enum KnownNginxPrivateIPAllocationMethod {
  /** Static */
  Static = "Static",
  /** Dynamic */
  Dynamic = "Dynamic",
}

/**
 * Defines values for NginxPrivateIPAllocationMethod. \
 * {@link KnownNginxPrivateIPAllocationMethod} can be used interchangeably with NginxPrivateIPAllocationMethod,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Static** \
 * **Dynamic**
 */
export type NginxPrivateIPAllocationMethod = string;

/** Known values of {@link ActivationState} that the service accepts. */
export enum KnownActivationState {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled",
}

/**
 * Defines values for ActivationState. \
 * {@link KnownActivationState} can be used interchangeably with ActivationState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type ActivationState = string;

/** Optional parameters. */
export interface ApiKeysCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** The API Key object containing fields (e.g. secret text, expiration date) to upsert the key. */
  body?: NginxDeploymentApiKeyRequest;
}

/** Contains response data for the createOrUpdate operation. */
export type ApiKeysCreateOrUpdateResponse = NginxDeploymentApiKeyResponse;

/** Optional parameters. */
export interface ApiKeysDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ApiKeysGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ApiKeysGetResponse = NginxDeploymentApiKeyResponse;

/** Optional parameters. */
export interface ApiKeysListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ApiKeysListResponse = NginxDeploymentApiKeyListResponse;

/** Optional parameters. */
export interface ApiKeysListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ApiKeysListNextResponse = NginxDeploymentApiKeyListResponse;

/** Optional parameters. */
export interface CertificatesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type CertificatesGetResponse = NginxCertificate;

/** Optional parameters. */
export interface CertificatesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** The certificate */
  body?: NginxCertificate;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type CertificatesCreateOrUpdateResponse = NginxCertificate;

/** Optional parameters. */
export interface CertificatesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface CertificatesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type CertificatesListResponse = NginxCertificateListResponse;

/** Optional parameters. */
export interface CertificatesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type CertificatesListNextResponse = NginxCertificateListResponse;

/** Optional parameters. */
export interface ConfigurationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ConfigurationsListResponse = NginxConfigurationListResponse;

/** Optional parameters. */
export interface ConfigurationsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ConfigurationsGetResponse = NginxConfigurationResponse;

/** Optional parameters. */
export interface ConfigurationsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** The NGINX configuration */
  body?: NginxConfigurationRequest;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ConfigurationsCreateOrUpdateResponse = NginxConfigurationResponse;

/** Optional parameters. */
export interface ConfigurationsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ConfigurationsAnalysisOptionalParams
  extends coreClient.OperationOptions {
  /** The NGINX configuration to analyze */
  body?: AnalysisCreate;
}

/** Contains response data for the analysis operation. */
export type ConfigurationsAnalysisResponse = AnalysisResult;

/** Optional parameters. */
export interface ConfigurationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ConfigurationsListNextResponse = NginxConfigurationListResponse;

/** Optional parameters. */
export interface DeploymentsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DeploymentsGetResponse = NginxDeployment;

/** Optional parameters. */
export interface DeploymentsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  body?: NginxDeployment;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type DeploymentsCreateOrUpdateResponse = NginxDeployment;

/** Optional parameters. */
export interface DeploymentsUpdateOptionalParams
  extends coreClient.OperationOptions {
  body?: NginxDeploymentUpdateParameters;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type DeploymentsUpdateResponse = NginxDeployment;

/** Optional parameters. */
export interface DeploymentsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DeploymentsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type DeploymentsListResponse = NginxDeploymentListResponse;

/** Optional parameters. */
export interface DeploymentsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type DeploymentsListByResourceGroupResponse =
  NginxDeploymentListResponse;

/** Optional parameters. */
export interface DeploymentsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type DeploymentsListNextResponse = NginxDeploymentListResponse;

/** Optional parameters. */
export interface DeploymentsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type DeploymentsListByResourceGroupNextResponse =
  NginxDeploymentListResponse;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface NginxManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
