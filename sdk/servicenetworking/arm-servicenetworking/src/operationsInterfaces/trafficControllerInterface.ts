/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  TrafficController,
  TrafficControllerInterfaceListBySubscriptionOptionalParams,
  TrafficControllerInterfaceListByResourceGroupOptionalParams,
  TrafficControllerInterfaceGetOptionalParams,
  TrafficControllerInterfaceGetResponse,
  TrafficControllerInterfaceCreateOrUpdateOptionalParams,
  TrafficControllerInterfaceCreateOrUpdateResponse,
  TrafficControllerUpdate,
  TrafficControllerInterfaceUpdateOptionalParams,
  TrafficControllerInterfaceUpdateResponse,
  TrafficControllerInterfaceDeleteOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a TrafficControllerInterface. */
export interface TrafficControllerInterface {
  /**
   * List TrafficController resources by subscription ID
   * @param options The options parameters.
   */
  listBySubscription(
    options?: TrafficControllerInterfaceListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<TrafficController>;
  /**
   * List TrafficController resources by resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: TrafficControllerInterfaceListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<TrafficController>;
  /**
   * Get a TrafficController
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param trafficControllerName traffic controller name for path
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    trafficControllerName: string,
    options?: TrafficControllerInterfaceGetOptionalParams
  ): Promise<TrafficControllerInterfaceGetResponse>;
  /**
   * Create a TrafficController
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param trafficControllerName traffic controller name for path
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    trafficControllerName: string,
    resource: TrafficController,
    options?: TrafficControllerInterfaceCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<TrafficControllerInterfaceCreateOrUpdateResponse>,
      TrafficControllerInterfaceCreateOrUpdateResponse
    >
  >;
  /**
   * Create a TrafficController
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param trafficControllerName traffic controller name for path
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    trafficControllerName: string,
    resource: TrafficController,
    options?: TrafficControllerInterfaceCreateOrUpdateOptionalParams
  ): Promise<TrafficControllerInterfaceCreateOrUpdateResponse>;
  /**
   * Update a TrafficController
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param trafficControllerName traffic controller name for path
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    trafficControllerName: string,
    properties: TrafficControllerUpdate,
    options?: TrafficControllerInterfaceUpdateOptionalParams
  ): Promise<TrafficControllerInterfaceUpdateResponse>;
  /**
   * Delete a TrafficController
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param trafficControllerName traffic controller name for path
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    trafficControllerName: string,
    options?: TrafficControllerInterfaceDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Delete a TrafficController
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param trafficControllerName traffic controller name for path
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    trafficControllerName: string,
    options?: TrafficControllerInterfaceDeleteOptionalParams
  ): Promise<void>;
}
