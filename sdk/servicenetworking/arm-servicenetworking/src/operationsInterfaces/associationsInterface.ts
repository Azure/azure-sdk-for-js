/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  Association,
  AssociationsInterfaceListByTrafficControllerOptionalParams,
  AssociationsInterfaceGetOptionalParams,
  AssociationsInterfaceGetResponse,
  AssociationsInterfaceCreateOrUpdateOptionalParams,
  AssociationsInterfaceCreateOrUpdateResponse,
  AssociationUpdate,
  AssociationsInterfaceUpdateOptionalParams,
  AssociationsInterfaceUpdateResponse,
  AssociationsInterfaceDeleteOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a AssociationsInterface. */
export interface AssociationsInterface {
  /**
   * List Association resources by TrafficController
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param trafficControllerName traffic controller name for path
   * @param options The options parameters.
   */
  listByTrafficController(
    resourceGroupName: string,
    trafficControllerName: string,
    options?: AssociationsInterfaceListByTrafficControllerOptionalParams
  ): PagedAsyncIterableIterator<Association>;
  /**
   * Get a Association
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param trafficControllerName traffic controller name for path
   * @param associationName Name of Association
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    trafficControllerName: string,
    associationName: string,
    options?: AssociationsInterfaceGetOptionalParams
  ): Promise<AssociationsInterfaceGetResponse>;
  /**
   * Create a Association
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param trafficControllerName traffic controller name for path
   * @param associationName Name of Association
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    trafficControllerName: string,
    associationName: string,
    resource: Association,
    options?: AssociationsInterfaceCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<AssociationsInterfaceCreateOrUpdateResponse>,
      AssociationsInterfaceCreateOrUpdateResponse
    >
  >;
  /**
   * Create a Association
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param trafficControllerName traffic controller name for path
   * @param associationName Name of Association
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    trafficControllerName: string,
    associationName: string,
    resource: Association,
    options?: AssociationsInterfaceCreateOrUpdateOptionalParams
  ): Promise<AssociationsInterfaceCreateOrUpdateResponse>;
  /**
   * Update a Association
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param trafficControllerName traffic controller name for path
   * @param associationName Name of Association
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    trafficControllerName: string,
    associationName: string,
    properties: AssociationUpdate,
    options?: AssociationsInterfaceUpdateOptionalParams
  ): Promise<AssociationsInterfaceUpdateResponse>;
  /**
   * Delete a Association
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param trafficControllerName traffic controller name for path
   * @param associationName Name of Association
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    trafficControllerName: string,
    associationName: string,
    options?: AssociationsInterfaceDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Delete a Association
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param trafficControllerName traffic controller name for path
   * @param associationName Name of Association
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    trafficControllerName: string,
    associationName: string,
    options?: AssociationsInterfaceDeleteOptionalParams
  ): Promise<void>;
}
