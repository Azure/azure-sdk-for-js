/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  Frontend,
  FrontendsInterfaceListByTrafficControllerOptionalParams,
  FrontendsInterfaceGetOptionalParams,
  FrontendsInterfaceGetResponse,
  FrontendsInterfaceCreateOrUpdateOptionalParams,
  FrontendsInterfaceCreateOrUpdateResponse,
  FrontendUpdate,
  FrontendsInterfaceUpdateOptionalParams,
  FrontendsInterfaceUpdateResponse,
  FrontendsInterfaceDeleteOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a FrontendsInterface. */
export interface FrontendsInterface {
  /**
   * List Frontend resources by TrafficController
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param trafficControllerName traffic controller name for path
   * @param options The options parameters.
   */
  listByTrafficController(
    resourceGroupName: string,
    trafficControllerName: string,
    options?: FrontendsInterfaceListByTrafficControllerOptionalParams
  ): PagedAsyncIterableIterator<Frontend>;
  /**
   * Get a Traffic Controller Frontend
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param trafficControllerName traffic controller name for path
   * @param frontendName Frontends
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    trafficControllerName: string,
    frontendName: string,
    options?: FrontendsInterfaceGetOptionalParams
  ): Promise<FrontendsInterfaceGetResponse>;
  /**
   * Create a Traffic Controller Frontend
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param trafficControllerName traffic controller name for path
   * @param frontendName Frontends
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    trafficControllerName: string,
    frontendName: string,
    resource: Frontend,
    options?: FrontendsInterfaceCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<FrontendsInterfaceCreateOrUpdateResponse>,
      FrontendsInterfaceCreateOrUpdateResponse
    >
  >;
  /**
   * Create a Traffic Controller Frontend
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param trafficControllerName traffic controller name for path
   * @param frontendName Frontends
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    trafficControllerName: string,
    frontendName: string,
    resource: Frontend,
    options?: FrontendsInterfaceCreateOrUpdateOptionalParams
  ): Promise<FrontendsInterfaceCreateOrUpdateResponse>;
  /**
   * Update a Traffic Controller Frontend
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param trafficControllerName traffic controller name for path
   * @param frontendName Frontends
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    trafficControllerName: string,
    frontendName: string,
    properties: FrontendUpdate,
    options?: FrontendsInterfaceUpdateOptionalParams
  ): Promise<FrontendsInterfaceUpdateResponse>;
  /**
   * Delete a Traffic Controller Frontend
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param trafficControllerName traffic controller name for path
   * @param frontendName Frontends
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    trafficControllerName: string,
    frontendName: string,
    options?: FrontendsInterfaceDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Delete a Traffic Controller Frontend
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param trafficControllerName traffic controller name for path
   * @param frontendName Frontends
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    trafficControllerName: string,
    frontendName: string,
    options?: FrontendsInterfaceDeleteOptionalParams
  ): Promise<void>;
}
