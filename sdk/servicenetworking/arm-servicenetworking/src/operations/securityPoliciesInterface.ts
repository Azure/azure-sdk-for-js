/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { SecurityPoliciesInterface } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ServiceNetworkingManagementClient } from "../serviceNetworkingManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  SecurityPolicy,
  SecurityPoliciesInterfaceListByTrafficControllerNextOptionalParams,
  SecurityPoliciesInterfaceListByTrafficControllerOptionalParams,
  SecurityPoliciesInterfaceListByTrafficControllerResponse,
  SecurityPoliciesInterfaceGetOptionalParams,
  SecurityPoliciesInterfaceGetResponse,
  SecurityPoliciesInterfaceCreateOrUpdateOptionalParams,
  SecurityPoliciesInterfaceCreateOrUpdateResponse,
  SecurityPolicyUpdate,
  SecurityPoliciesInterfaceUpdateOptionalParams,
  SecurityPoliciesInterfaceUpdateResponse,
  SecurityPoliciesInterfaceDeleteOptionalParams,
  SecurityPoliciesInterfaceDeleteResponse,
  SecurityPoliciesInterfaceListByTrafficControllerNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing SecurityPoliciesInterface operations. */
export class SecurityPoliciesInterfaceImpl
  implements SecurityPoliciesInterface
{
  private readonly client: ServiceNetworkingManagementClient;

  /**
   * Initialize a new instance of the class SecurityPoliciesInterface class.
   * @param client Reference to the service client
   */
  constructor(client: ServiceNetworkingManagementClient) {
    this.client = client;
  }

  /**
   * List SecurityPolicy resources by TrafficController
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param trafficControllerName traffic controller name for path
   * @param options The options parameters.
   */
  public listByTrafficController(
    resourceGroupName: string,
    trafficControllerName: string,
    options?: SecurityPoliciesInterfaceListByTrafficControllerOptionalParams,
  ): PagedAsyncIterableIterator<SecurityPolicy> {
    const iter = this.listByTrafficControllerPagingAll(
      resourceGroupName,
      trafficControllerName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByTrafficControllerPagingPage(
          resourceGroupName,
          trafficControllerName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByTrafficControllerPagingPage(
    resourceGroupName: string,
    trafficControllerName: string,
    options?: SecurityPoliciesInterfaceListByTrafficControllerOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<SecurityPolicy[]> {
    let result: SecurityPoliciesInterfaceListByTrafficControllerResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByTrafficController(
        resourceGroupName,
        trafficControllerName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByTrafficControllerNext(
        resourceGroupName,
        trafficControllerName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByTrafficControllerPagingAll(
    resourceGroupName: string,
    trafficControllerName: string,
    options?: SecurityPoliciesInterfaceListByTrafficControllerOptionalParams,
  ): AsyncIterableIterator<SecurityPolicy> {
    for await (const page of this.listByTrafficControllerPagingPage(
      resourceGroupName,
      trafficControllerName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List SecurityPolicy resources by TrafficController
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param trafficControllerName traffic controller name for path
   * @param options The options parameters.
   */
  private _listByTrafficController(
    resourceGroupName: string,
    trafficControllerName: string,
    options?: SecurityPoliciesInterfaceListByTrafficControllerOptionalParams,
  ): Promise<SecurityPoliciesInterfaceListByTrafficControllerResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, trafficControllerName, options },
      listByTrafficControllerOperationSpec,
    );
  }

  /**
   * Get a SecurityPolicy
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param trafficControllerName traffic controller name for path
   * @param securityPolicyName SecurityPolicy
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    trafficControllerName: string,
    securityPolicyName: string,
    options?: SecurityPoliciesInterfaceGetOptionalParams,
  ): Promise<SecurityPoliciesInterfaceGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, trafficControllerName, securityPolicyName, options },
      getOperationSpec,
    );
  }

  /**
   * Create a SecurityPolicy
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param trafficControllerName traffic controller name for path
   * @param securityPolicyName SecurityPolicy
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    trafficControllerName: string,
    securityPolicyName: string,
    resource: SecurityPolicy,
    options?: SecurityPoliciesInterfaceCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SecurityPoliciesInterfaceCreateOrUpdateResponse>,
      SecurityPoliciesInterfaceCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<SecurityPoliciesInterfaceCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        trafficControllerName,
        securityPolicyName,
        resource,
        options,
      },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      SecurityPoliciesInterfaceCreateOrUpdateResponse,
      OperationState<SecurityPoliciesInterfaceCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a SecurityPolicy
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param trafficControllerName traffic controller name for path
   * @param securityPolicyName SecurityPolicy
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    trafficControllerName: string,
    securityPolicyName: string,
    resource: SecurityPolicy,
    options?: SecurityPoliciesInterfaceCreateOrUpdateOptionalParams,
  ): Promise<SecurityPoliciesInterfaceCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      trafficControllerName,
      securityPolicyName,
      resource,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Update a SecurityPolicy
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param trafficControllerName traffic controller name for path
   * @param securityPolicyName SecurityPolicy
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    trafficControllerName: string,
    securityPolicyName: string,
    properties: SecurityPolicyUpdate,
    options?: SecurityPoliciesInterfaceUpdateOptionalParams,
  ): Promise<SecurityPoliciesInterfaceUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        trafficControllerName,
        securityPolicyName,
        properties,
        options,
      },
      updateOperationSpec,
    );
  }

  /**
   * Delete a SecurityPolicy
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param trafficControllerName traffic controller name for path
   * @param securityPolicyName SecurityPolicy
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    trafficControllerName: string,
    securityPolicyName: string,
    options?: SecurityPoliciesInterfaceDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SecurityPoliciesInterfaceDeleteResponse>,
      SecurityPoliciesInterfaceDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<SecurityPoliciesInterfaceDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        trafficControllerName,
        securityPolicyName,
        options,
      },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      SecurityPoliciesInterfaceDeleteResponse,
      OperationState<SecurityPoliciesInterfaceDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a SecurityPolicy
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param trafficControllerName traffic controller name for path
   * @param securityPolicyName SecurityPolicy
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    trafficControllerName: string,
    securityPolicyName: string,
    options?: SecurityPoliciesInterfaceDeleteOptionalParams,
  ): Promise<SecurityPoliciesInterfaceDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      trafficControllerName,
      securityPolicyName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * ListByTrafficControllerNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param trafficControllerName traffic controller name for path
   * @param nextLink The nextLink from the previous successful call to the ListByTrafficController
   *                 method.
   * @param options The options parameters.
   */
  private _listByTrafficControllerNext(
    resourceGroupName: string,
    trafficControllerName: string,
    nextLink: string,
    options?: SecurityPoliciesInterfaceListByTrafficControllerNextOptionalParams,
  ): Promise<SecurityPoliciesInterfaceListByTrafficControllerNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, trafficControllerName, nextLink, options },
      listByTrafficControllerNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByTrafficControllerOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceNetworking/trafficControllers/{trafficControllerName}/securityPolicy",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SecurityPolicyListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.trafficControllerName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceNetworking/trafficControllers/{trafficControllerName}/securityPolicy/{securityPolicyName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SecurityPolicy,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.trafficControllerName,
    Parameters.securityPolicyName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceNetworking/trafficControllers/{trafficControllerName}/securityPolicy/{securityPolicyName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SecurityPolicy,
    },
    201: {
      bodyMapper: Mappers.SecurityPolicy,
    },
    202: {
      bodyMapper: Mappers.SecurityPolicy,
    },
    204: {
      bodyMapper: Mappers.SecurityPolicy,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.trafficControllerName,
    Parameters.securityPolicyName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceNetworking/trafficControllers/{trafficControllerName}/securityPolicy/{securityPolicyName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SecurityPolicy,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.properties3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.trafficControllerName,
    Parameters.securityPolicyName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceNetworking/trafficControllers/{trafficControllerName}/securityPolicy/{securityPolicyName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.SecurityPoliciesInterfaceDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.SecurityPoliciesInterfaceDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.SecurityPoliciesInterfaceDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.SecurityPoliciesInterfaceDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.trafficControllerName,
    Parameters.securityPolicyName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByTrafficControllerNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SecurityPolicyListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.trafficControllerName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
