/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/virtualMachineImagesMappers";
import * as Parameters from "../models/parameters";
import { ComputeManagementClientContext } from "../computeManagementClientContext";

/** Class representing a VirtualMachineImages. */
export class VirtualMachineImages {
  private readonly client: ComputeManagementClientContext;

  /**
   * Create a VirtualMachineImages.
   * @param {ComputeManagementClientContext} client Reference to the service client.
   */
  constructor(client: ComputeManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets a virtual machine image.
   * @param location The name of a supported Azure region.
   * @param publisherName A valid image publisher.
   * @param offer A valid image publisher offer.
   * @param skus A valid image SKU.
   * @param version A valid image SKU version.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualMachineImagesGetResponse>
   */
  get(location: string, publisherName: string, offer: string, skus: string, version: string, options?: coreHttp.RequestOptionsBase): Promise<Models.VirtualMachineImagesGetResponse>;
  /**
   * @param location The name of a supported Azure region.
   * @param publisherName A valid image publisher.
   * @param offer A valid image publisher offer.
   * @param skus A valid image SKU.
   * @param version A valid image SKU version.
   * @param callback The callback
   */
  get(location: string, publisherName: string, offer: string, skus: string, version: string, callback: coreHttp.ServiceCallback<Models.VirtualMachineImage>): void;
  /**
   * @param location The name of a supported Azure region.
   * @param publisherName A valid image publisher.
   * @param offer A valid image publisher offer.
   * @param skus A valid image SKU.
   * @param version A valid image SKU version.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(location: string, publisherName: string, offer: string, skus: string, version: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.VirtualMachineImage>): void;
  get(location: string, publisherName: string, offer: string, skus: string, version: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.VirtualMachineImage>, callback?: coreHttp.ServiceCallback<Models.VirtualMachineImage>): Promise<Models.VirtualMachineImagesGetResponse> {
    return this.client.sendOperationRequest(
      {
        location,
        publisherName,
        offer,
        skus,
        version,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.VirtualMachineImagesGetResponse>;
  }

  /**
   * Gets a list of all virtual machine image versions for the specified location, publisher, offer,
   * and SKU.
   * @param location The name of a supported Azure region.
   * @param publisherName A valid image publisher.
   * @param offer A valid image publisher offer.
   * @param skus A valid image SKU.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualMachineImagesListResponse>
   */
  list(location: string, publisherName: string, offer: string, skus: string, options?: Models.VirtualMachineImagesListOptionalParams): Promise<Models.VirtualMachineImagesListResponse>;
  /**
   * @param location The name of a supported Azure region.
   * @param publisherName A valid image publisher.
   * @param offer A valid image publisher offer.
   * @param skus A valid image SKU.
   * @param callback The callback
   */
  list(location: string, publisherName: string, offer: string, skus: string, callback: coreHttp.ServiceCallback<Models.VirtualMachineImageResource[]>): void;
  /**
   * @param location The name of a supported Azure region.
   * @param publisherName A valid image publisher.
   * @param offer A valid image publisher offer.
   * @param skus A valid image SKU.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(location: string, publisherName: string, offer: string, skus: string, options: Models.VirtualMachineImagesListOptionalParams, callback: coreHttp.ServiceCallback<Models.VirtualMachineImageResource[]>): void;
  list(location: string, publisherName: string, offer: string, skus: string, options?: Models.VirtualMachineImagesListOptionalParams | coreHttp.ServiceCallback<Models.VirtualMachineImageResource[]>, callback?: coreHttp.ServiceCallback<Models.VirtualMachineImageResource[]>): Promise<Models.VirtualMachineImagesListResponse> {
    return this.client.sendOperationRequest(
      {
        location,
        publisherName,
        offer,
        skus,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.VirtualMachineImagesListResponse>;
  }

  /**
   * Gets a list of virtual machine image offers for the specified location and publisher.
   * @param location The name of a supported Azure region.
   * @param publisherName A valid image publisher.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualMachineImagesListOffersResponse>
   */
  listOffers(location: string, publisherName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.VirtualMachineImagesListOffersResponse>;
  /**
   * @param location The name of a supported Azure region.
   * @param publisherName A valid image publisher.
   * @param callback The callback
   */
  listOffers(location: string, publisherName: string, callback: coreHttp.ServiceCallback<Models.VirtualMachineImageResource[]>): void;
  /**
   * @param location The name of a supported Azure region.
   * @param publisherName A valid image publisher.
   * @param options The optional parameters
   * @param callback The callback
   */
  listOffers(location: string, publisherName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.VirtualMachineImageResource[]>): void;
  listOffers(location: string, publisherName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.VirtualMachineImageResource[]>, callback?: coreHttp.ServiceCallback<Models.VirtualMachineImageResource[]>): Promise<Models.VirtualMachineImagesListOffersResponse> {
    return this.client.sendOperationRequest(
      {
        location,
        publisherName,
        options
      },
      listOffersOperationSpec,
      callback) as Promise<Models.VirtualMachineImagesListOffersResponse>;
  }

  /**
   * Gets a list of virtual machine image publishers for the specified Azure location.
   * @param location The name of a supported Azure region.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualMachineImagesListPublishersResponse>
   */
  listPublishers(location: string, options?: coreHttp.RequestOptionsBase): Promise<Models.VirtualMachineImagesListPublishersResponse>;
  /**
   * @param location The name of a supported Azure region.
   * @param callback The callback
   */
  listPublishers(location: string, callback: coreHttp.ServiceCallback<Models.VirtualMachineImageResource[]>): void;
  /**
   * @param location The name of a supported Azure region.
   * @param options The optional parameters
   * @param callback The callback
   */
  listPublishers(location: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.VirtualMachineImageResource[]>): void;
  listPublishers(location: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.VirtualMachineImageResource[]>, callback?: coreHttp.ServiceCallback<Models.VirtualMachineImageResource[]>): Promise<Models.VirtualMachineImagesListPublishersResponse> {
    return this.client.sendOperationRequest(
      {
        location,
        options
      },
      listPublishersOperationSpec,
      callback) as Promise<Models.VirtualMachineImagesListPublishersResponse>;
  }

  /**
   * Gets a list of virtual machine image SKUs for the specified location, publisher, and offer.
   * @param location The name of a supported Azure region.
   * @param publisherName A valid image publisher.
   * @param offer A valid image publisher offer.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualMachineImagesListSkusResponse>
   */
  listSkus(location: string, publisherName: string, offer: string, options?: coreHttp.RequestOptionsBase): Promise<Models.VirtualMachineImagesListSkusResponse>;
  /**
   * @param location The name of a supported Azure region.
   * @param publisherName A valid image publisher.
   * @param offer A valid image publisher offer.
   * @param callback The callback
   */
  listSkus(location: string, publisherName: string, offer: string, callback: coreHttp.ServiceCallback<Models.VirtualMachineImageResource[]>): void;
  /**
   * @param location The name of a supported Azure region.
   * @param publisherName A valid image publisher.
   * @param offer A valid image publisher offer.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSkus(location: string, publisherName: string, offer: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.VirtualMachineImageResource[]>): void;
  listSkus(location: string, publisherName: string, offer: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.VirtualMachineImageResource[]>, callback?: coreHttp.ServiceCallback<Models.VirtualMachineImageResource[]>): Promise<Models.VirtualMachineImagesListSkusResponse> {
    return this.client.sendOperationRequest(
      {
        location,
        publisherName,
        offer,
        options
      },
      listSkusOperationSpec,
      callback) as Promise<Models.VirtualMachineImagesListSkusResponse>;
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const getOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmimage/offers/{offer}/skus/{skus}/versions/{version}",
  urlParameters: [
    Parameters.location0,
    Parameters.publisherName,
    Parameters.offer,
    Parameters.skus,
    Parameters.version,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachineImage
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmimage/offers/{offer}/skus/{skus}/versions",
  urlParameters: [
    Parameters.location0,
    Parameters.publisherName,
    Parameters.offer,
    Parameters.skus,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.filter,
    Parameters.top,
    Parameters.orderby,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualMachineImageResource"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOffersOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmimage/offers",
  urlParameters: [
    Parameters.location0,
    Parameters.publisherName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualMachineImageResource"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listPublishersOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers",
  urlParameters: [
    Parameters.location0,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualMachineImageResource"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listSkusOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmimage/offers/{offer}/skus",
  urlParameters: [
    Parameters.location0,
    Parameters.publisherName,
    Parameters.offer,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualMachineImageResource"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
