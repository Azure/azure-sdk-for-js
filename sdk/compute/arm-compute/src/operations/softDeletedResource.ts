/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { SoftDeletedResource } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ComputeManagementClient } from "../computeManagementClient";
import {
  GallerySoftDeletedResource,
  SoftDeletedResourceListByArtifactNameNextOptionalParams,
  SoftDeletedResourceListByArtifactNameOptionalParams,
  SoftDeletedResourceListByArtifactNameResponse,
  SoftDeletedResourceListByArtifactNameNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing SoftDeletedResource operations. */
export class SoftDeletedResourceImpl implements SoftDeletedResource {
  private readonly client: ComputeManagementClient;

  /**
   * Initialize a new instance of the class SoftDeletedResource class.
   * @param client Reference to the service client
   */
  constructor(client: ComputeManagementClient) {
    this.client = client;
  }

  /**
   * List soft-deleted resources of an artifact in the gallery, such as soft-deleted gallery image
   * version of an image.
   * @param resourceGroupName The name of the resource group.
   * @param galleryName The name of the Gallery in which the soft-deleted resources resides.
   * @param artifactType The type of the artifact to be listed, such as gallery image version.
   * @param artifactName The artifact name to be listed. If artifact type is Images, then the artifact
   *                     name should be the gallery image name.
   * @param options The options parameters.
   */
  public listByArtifactName(
    resourceGroupName: string,
    galleryName: string,
    artifactType: string,
    artifactName: string,
    options?: SoftDeletedResourceListByArtifactNameOptionalParams,
  ): PagedAsyncIterableIterator<GallerySoftDeletedResource> {
    const iter = this.listByArtifactNamePagingAll(
      resourceGroupName,
      galleryName,
      artifactType,
      artifactName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByArtifactNamePagingPage(
          resourceGroupName,
          galleryName,
          artifactType,
          artifactName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByArtifactNamePagingPage(
    resourceGroupName: string,
    galleryName: string,
    artifactType: string,
    artifactName: string,
    options?: SoftDeletedResourceListByArtifactNameOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<GallerySoftDeletedResource[]> {
    let result: SoftDeletedResourceListByArtifactNameResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByArtifactName(
        resourceGroupName,
        galleryName,
        artifactType,
        artifactName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByArtifactNameNext(
        resourceGroupName,
        galleryName,
        artifactType,
        artifactName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByArtifactNamePagingAll(
    resourceGroupName: string,
    galleryName: string,
    artifactType: string,
    artifactName: string,
    options?: SoftDeletedResourceListByArtifactNameOptionalParams,
  ): AsyncIterableIterator<GallerySoftDeletedResource> {
    for await (const page of this.listByArtifactNamePagingPage(
      resourceGroupName,
      galleryName,
      artifactType,
      artifactName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List soft-deleted resources of an artifact in the gallery, such as soft-deleted gallery image
   * version of an image.
   * @param resourceGroupName The name of the resource group.
   * @param galleryName The name of the Gallery in which the soft-deleted resources resides.
   * @param artifactType The type of the artifact to be listed, such as gallery image version.
   * @param artifactName The artifact name to be listed. If artifact type is Images, then the artifact
   *                     name should be the gallery image name.
   * @param options The options parameters.
   */
  private _listByArtifactName(
    resourceGroupName: string,
    galleryName: string,
    artifactType: string,
    artifactName: string,
    options?: SoftDeletedResourceListByArtifactNameOptionalParams,
  ): Promise<SoftDeletedResourceListByArtifactNameResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, galleryName, artifactType, artifactName, options },
      listByArtifactNameOperationSpec,
    );
  }

  /**
   * ListByArtifactNameNext
   * @param resourceGroupName The name of the resource group.
   * @param galleryName The name of the Gallery in which the soft-deleted resources resides.
   * @param artifactType The type of the artifact to be listed, such as gallery image version.
   * @param artifactName The artifact name to be listed. If artifact type is Images, then the artifact
   *                     name should be the gallery image name.
   * @param nextLink The nextLink from the previous successful call to the ListByArtifactName method.
   * @param options The options parameters.
   */
  private _listByArtifactNameNext(
    resourceGroupName: string,
    galleryName: string,
    artifactType: string,
    artifactName: string,
    nextLink: string,
    options?: SoftDeletedResourceListByArtifactNameNextOptionalParams,
  ): Promise<SoftDeletedResourceListByArtifactNameNextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        galleryName,
        artifactType,
        artifactName,
        nextLink,
        options,
      },
      listByArtifactNameNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByArtifactNameOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/softDeletedArtifactTypes/{artifactType}/artifacts/{artifactName}/versions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GallerySoftDeletedResourceList,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion3],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.galleryName1,
    Parameters.artifactType,
    Parameters.artifactName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByArtifactNameNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GallerySoftDeletedResourceList,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceGroupName,
    Parameters.galleryName1,
    Parameters.artifactType,
    Parameters.artifactName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
