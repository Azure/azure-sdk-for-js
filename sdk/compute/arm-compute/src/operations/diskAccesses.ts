/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/diskAccessesMappers";
import * as Parameters from "../models/parameters";
import { ComputeManagementClientContext } from "../computeManagementClientContext";

/** Class representing a DiskAccesses. */
export class DiskAccesses {
  private readonly client: ComputeManagementClientContext;

  /**
   * Create a DiskAccesses.
   * @param {ComputeManagementClientContext} client Reference to the service client.
   */
  constructor(client: ComputeManagementClientContext) {
    this.client = client;
  }

  /**
   * Creates or updates a disk access resource
   * @param resourceGroupName The name of the resource group.
   * @param diskAccessName The name of the disk access resource that is being created. The name can't
   * be changed after the disk encryption set is created. Supported characters for the name are a-z,
   * A-Z, 0-9 and _. The maximum name length is 80 characters.
   * @param diskAccess disk access object supplied in the body of the Put disk access operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DiskAccessesCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, diskAccessName: string, diskAccess: Models.DiskAccess, options?: msRest.RequestOptionsBase): Promise<Models.DiskAccessesCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,diskAccessName,diskAccess,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DiskAccessesCreateOrUpdateResponse>;
  }

  /**
   * Updates (patches) a disk access resource.
   * @param resourceGroupName The name of the resource group.
   * @param diskAccessName The name of the disk access resource that is being created. The name can't
   * be changed after the disk encryption set is created. Supported characters for the name are a-z,
   * A-Z, 0-9 and _. The maximum name length is 80 characters.
   * @param diskAccess disk access object supplied in the body of the Patch disk access operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DiskAccessesUpdateResponse>
   */
  update(resourceGroupName: string, diskAccessName: string, diskAccess: Models.DiskAccessUpdate, options?: msRest.RequestOptionsBase): Promise<Models.DiskAccessesUpdateResponse> {
    return this.beginUpdate(resourceGroupName,diskAccessName,diskAccess,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DiskAccessesUpdateResponse>;
  }

  /**
   * Gets information about a disk access resource.
   * @param resourceGroupName The name of the resource group.
   * @param diskAccessName The name of the disk access resource that is being created. The name can't
   * be changed after the disk encryption set is created. Supported characters for the name are a-z,
   * A-Z, 0-9 and _. The maximum name length is 80 characters.
   * @param [options] The optional parameters
   * @returns Promise<Models.DiskAccessesGetResponse>
   */
  get(resourceGroupName: string, diskAccessName: string, options?: msRest.RequestOptionsBase): Promise<Models.DiskAccessesGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param diskAccessName The name of the disk access resource that is being created. The name can't
   * be changed after the disk encryption set is created. Supported characters for the name are a-z,
   * A-Z, 0-9 and _. The maximum name length is 80 characters.
   * @param callback The callback
   */
  get(resourceGroupName: string, diskAccessName: string, callback: msRest.ServiceCallback<Models.DiskAccess>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param diskAccessName The name of the disk access resource that is being created. The name can't
   * be changed after the disk encryption set is created. Supported characters for the name are a-z,
   * A-Z, 0-9 and _. The maximum name length is 80 characters.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, diskAccessName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DiskAccess>): void;
  get(resourceGroupName: string, diskAccessName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DiskAccess>, callback?: msRest.ServiceCallback<Models.DiskAccess>): Promise<Models.DiskAccessesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        diskAccessName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.DiskAccessesGetResponse>;
  }

  /**
   * Deletes a disk access resource.
   * @param resourceGroupName The name of the resource group.
   * @param diskAccessName The name of the disk access resource that is being created. The name can't
   * be changed after the disk encryption set is created. Supported characters for the name are a-z,
   * A-Z, 0-9 and _. The maximum name length is 80 characters.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, diskAccessName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,diskAccessName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Lists all the disk access resources under a resource group.
   * @param resourceGroupName The name of the resource group.
   * @param [options] The optional parameters
   * @returns Promise<Models.DiskAccessesListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.DiskAccessesListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.DiskAccessList>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DiskAccessList>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DiskAccessList>, callback?: msRest.ServiceCallback<Models.DiskAccessList>): Promise<Models.DiskAccessesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.DiskAccessesListByResourceGroupResponse>;
  }

  /**
   * Lists all the disk access resources under a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.DiskAccessesListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.DiskAccessesListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.DiskAccessList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DiskAccessList>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DiskAccessList>, callback?: msRest.ServiceCallback<Models.DiskAccessList>): Promise<Models.DiskAccessesListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.DiskAccessesListResponse>;
  }

  /**
   * Gets the private link resources possible under disk access resource
   * @param resourceGroupName The name of the resource group.
   * @param diskAccessName The name of the disk access resource that is being created. The name can't
   * be changed after the disk encryption set is created. Supported characters for the name are a-z,
   * A-Z, 0-9 and _. The maximum name length is 80 characters.
   * @param [options] The optional parameters
   * @returns Promise<Models.DiskAccessesGetPrivateLinkResourcesResponse>
   */
  getPrivateLinkResources(resourceGroupName: string, diskAccessName: string, options?: msRest.RequestOptionsBase): Promise<Models.DiskAccessesGetPrivateLinkResourcesResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param diskAccessName The name of the disk access resource that is being created. The name can't
   * be changed after the disk encryption set is created. Supported characters for the name are a-z,
   * A-Z, 0-9 and _. The maximum name length is 80 characters.
   * @param callback The callback
   */
  getPrivateLinkResources(resourceGroupName: string, diskAccessName: string, callback: msRest.ServiceCallback<Models.PrivateLinkResourceListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param diskAccessName The name of the disk access resource that is being created. The name can't
   * be changed after the disk encryption set is created. Supported characters for the name are a-z,
   * A-Z, 0-9 and _. The maximum name length is 80 characters.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPrivateLinkResources(resourceGroupName: string, diskAccessName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PrivateLinkResourceListResult>): void;
  getPrivateLinkResources(resourceGroupName: string, diskAccessName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PrivateLinkResourceListResult>, callback?: msRest.ServiceCallback<Models.PrivateLinkResourceListResult>): Promise<Models.DiskAccessesGetPrivateLinkResourcesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        diskAccessName,
        options
      },
      getPrivateLinkResourcesOperationSpec,
      callback) as Promise<Models.DiskAccessesGetPrivateLinkResourcesResponse>;
  }

  /**
   * Approve or reject a private endpoint connection under disk access resource, this can't be used
   * to create a new private endpoint connection.
   * @param resourceGroupName The name of the resource group.
   * @param diskAccessName The name of the disk access resource that is being created. The name can't
   * be changed after the disk encryption set is created. Supported characters for the name are a-z,
   * A-Z, 0-9 and _. The maximum name length is 80 characters.
   * @param privateEndpointConnectionName The name of the private endpoint connection
   * @param privateEndpointConnection private endpoint connection object supplied in the body of the
   * Put private endpoint connection operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DiskAccessesUpdateAPrivateEndpointConnectionResponse>
   */
  updateAPrivateEndpointConnection(resourceGroupName: string, diskAccessName: string, privateEndpointConnectionName: string, privateEndpointConnection: Models.PrivateEndpointConnection, options?: msRest.RequestOptionsBase): Promise<Models.DiskAccessesUpdateAPrivateEndpointConnectionResponse> {
    return this.beginUpdateAPrivateEndpointConnection(resourceGroupName,diskAccessName,privateEndpointConnectionName,privateEndpointConnection,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DiskAccessesUpdateAPrivateEndpointConnectionResponse>;
  }

  /**
   * Gets information about a private endpoint connection under a disk access resource.
   * @param resourceGroupName The name of the resource group.
   * @param diskAccessName The name of the disk access resource that is being created. The name can't
   * be changed after the disk encryption set is created. Supported characters for the name are a-z,
   * A-Z, 0-9 and _. The maximum name length is 80 characters.
   * @param privateEndpointConnectionName The name of the private endpoint connection
   * @param [options] The optional parameters
   * @returns Promise<Models.DiskAccessesGetAPrivateEndpointConnectionResponse>
   */
  getAPrivateEndpointConnection(resourceGroupName: string, diskAccessName: string, privateEndpointConnectionName: string, options?: msRest.RequestOptionsBase): Promise<Models.DiskAccessesGetAPrivateEndpointConnectionResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param diskAccessName The name of the disk access resource that is being created. The name can't
   * be changed after the disk encryption set is created. Supported characters for the name are a-z,
   * A-Z, 0-9 and _. The maximum name length is 80 characters.
   * @param privateEndpointConnectionName The name of the private endpoint connection
   * @param callback The callback
   */
  getAPrivateEndpointConnection(resourceGroupName: string, diskAccessName: string, privateEndpointConnectionName: string, callback: msRest.ServiceCallback<Models.PrivateEndpointConnection>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param diskAccessName The name of the disk access resource that is being created. The name can't
   * be changed after the disk encryption set is created. Supported characters for the name are a-z,
   * A-Z, 0-9 and _. The maximum name length is 80 characters.
   * @param privateEndpointConnectionName The name of the private endpoint connection
   * @param options The optional parameters
   * @param callback The callback
   */
  getAPrivateEndpointConnection(resourceGroupName: string, diskAccessName: string, privateEndpointConnectionName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PrivateEndpointConnection>): void;
  getAPrivateEndpointConnection(resourceGroupName: string, diskAccessName: string, privateEndpointConnectionName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PrivateEndpointConnection>, callback?: msRest.ServiceCallback<Models.PrivateEndpointConnection>): Promise<Models.DiskAccessesGetAPrivateEndpointConnectionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        diskAccessName,
        privateEndpointConnectionName,
        options
      },
      getAPrivateEndpointConnectionOperationSpec,
      callback) as Promise<Models.DiskAccessesGetAPrivateEndpointConnectionResponse>;
  }

  /**
   * Deletes a private endpoint connection under a disk access resource.
   * @param resourceGroupName The name of the resource group.
   * @param diskAccessName The name of the disk access resource that is being created. The name can't
   * be changed after the disk encryption set is created. Supported characters for the name are a-z,
   * A-Z, 0-9 and _. The maximum name length is 80 characters.
   * @param privateEndpointConnectionName The name of the private endpoint connection
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteAPrivateEndpointConnection(resourceGroupName: string, diskAccessName: string, privateEndpointConnectionName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteAPrivateEndpointConnection(resourceGroupName,diskAccessName,privateEndpointConnectionName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * List information about private endpoint connections under a disk access resource
   * @param resourceGroupName The name of the resource group.
   * @param diskAccessName The name of the disk access resource that is being created. The name can't
   * be changed after the disk encryption set is created. Supported characters for the name are a-z,
   * A-Z, 0-9 and _. The maximum name length is 80 characters.
   * @param [options] The optional parameters
   * @returns Promise<Models.DiskAccessesListPrivateEndpointConnectionsResponse>
   */
  listPrivateEndpointConnections(resourceGroupName: string, diskAccessName: string, options?: msRest.RequestOptionsBase): Promise<Models.DiskAccessesListPrivateEndpointConnectionsResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param diskAccessName The name of the disk access resource that is being created. The name can't
   * be changed after the disk encryption set is created. Supported characters for the name are a-z,
   * A-Z, 0-9 and _. The maximum name length is 80 characters.
   * @param callback The callback
   */
  listPrivateEndpointConnections(resourceGroupName: string, diskAccessName: string, callback: msRest.ServiceCallback<Models.PrivateEndpointConnectionListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param diskAccessName The name of the disk access resource that is being created. The name can't
   * be changed after the disk encryption set is created. Supported characters for the name are a-z,
   * A-Z, 0-9 and _. The maximum name length is 80 characters.
   * @param options The optional parameters
   * @param callback The callback
   */
  listPrivateEndpointConnections(resourceGroupName: string, diskAccessName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PrivateEndpointConnectionListResult>): void;
  listPrivateEndpointConnections(resourceGroupName: string, diskAccessName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PrivateEndpointConnectionListResult>, callback?: msRest.ServiceCallback<Models.PrivateEndpointConnectionListResult>): Promise<Models.DiskAccessesListPrivateEndpointConnectionsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        diskAccessName,
        options
      },
      listPrivateEndpointConnectionsOperationSpec,
      callback) as Promise<Models.DiskAccessesListPrivateEndpointConnectionsResponse>;
  }

  /**
   * Creates or updates a disk access resource
   * @param resourceGroupName The name of the resource group.
   * @param diskAccessName The name of the disk access resource that is being created. The name can't
   * be changed after the disk encryption set is created. Supported characters for the name are a-z,
   * A-Z, 0-9 and _. The maximum name length is 80 characters.
   * @param diskAccess disk access object supplied in the body of the Put disk access operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, diskAccessName: string, diskAccess: Models.DiskAccess, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        diskAccessName,
        diskAccess,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Updates (patches) a disk access resource.
   * @param resourceGroupName The name of the resource group.
   * @param diskAccessName The name of the disk access resource that is being created. The name can't
   * be changed after the disk encryption set is created. Supported characters for the name are a-z,
   * A-Z, 0-9 and _. The maximum name length is 80 characters.
   * @param diskAccess disk access object supplied in the body of the Patch disk access operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(resourceGroupName: string, diskAccessName: string, diskAccess: Models.DiskAccessUpdate, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        diskAccessName,
        diskAccess,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * Deletes a disk access resource.
   * @param resourceGroupName The name of the resource group.
   * @param diskAccessName The name of the disk access resource that is being created. The name can't
   * be changed after the disk encryption set is created. Supported characters for the name are a-z,
   * A-Z, 0-9 and _. The maximum name length is 80 characters.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, diskAccessName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        diskAccessName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Approve or reject a private endpoint connection under disk access resource, this can't be used
   * to create a new private endpoint connection.
   * @param resourceGroupName The name of the resource group.
   * @param diskAccessName The name of the disk access resource that is being created. The name can't
   * be changed after the disk encryption set is created. Supported characters for the name are a-z,
   * A-Z, 0-9 and _. The maximum name length is 80 characters.
   * @param privateEndpointConnectionName The name of the private endpoint connection
   * @param privateEndpointConnection private endpoint connection object supplied in the body of the
   * Put private endpoint connection operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdateAPrivateEndpointConnection(resourceGroupName: string, diskAccessName: string, privateEndpointConnectionName: string, privateEndpointConnection: Models.PrivateEndpointConnection, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        diskAccessName,
        privateEndpointConnectionName,
        privateEndpointConnection,
        options
      },
      beginUpdateAPrivateEndpointConnectionOperationSpec,
      options);
  }

  /**
   * Deletes a private endpoint connection under a disk access resource.
   * @param resourceGroupName The name of the resource group.
   * @param diskAccessName The name of the disk access resource that is being created. The name can't
   * be changed after the disk encryption set is created. Supported characters for the name are a-z,
   * A-Z, 0-9 and _. The maximum name length is 80 characters.
   * @param privateEndpointConnectionName The name of the private endpoint connection
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteAPrivateEndpointConnection(resourceGroupName: string, diskAccessName: string, privateEndpointConnectionName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        diskAccessName,
        privateEndpointConnectionName,
        options
      },
      beginDeleteAPrivateEndpointConnectionOperationSpec,
      options);
  }

  /**
   * Lists all the disk access resources under a resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DiskAccessesListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DiskAccessesListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DiskAccessList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DiskAccessList>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DiskAccessList>, callback?: msRest.ServiceCallback<Models.DiskAccessList>): Promise<Models.DiskAccessesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.DiskAccessesListByResourceGroupNextResponse>;
  }

  /**
   * Lists all the disk access resources under a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DiskAccessesListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DiskAccessesListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DiskAccessList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DiskAccessList>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DiskAccessList>, callback?: msRest.ServiceCallback<Models.DiskAccessList>): Promise<Models.DiskAccessesListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.DiskAccessesListNextResponse>;
  }

  /**
   * List information about private endpoint connections under a disk access resource
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DiskAccessesListPrivateEndpointConnectionsNextResponse>
   */
  listPrivateEndpointConnectionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DiskAccessesListPrivateEndpointConnectionsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listPrivateEndpointConnectionsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PrivateEndpointConnectionListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listPrivateEndpointConnectionsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PrivateEndpointConnectionListResult>): void;
  listPrivateEndpointConnectionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PrivateEndpointConnectionListResult>, callback?: msRest.ServiceCallback<Models.PrivateEndpointConnectionListResult>): Promise<Models.DiskAccessesListPrivateEndpointConnectionsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listPrivateEndpointConnectionsNextOperationSpec,
      callback) as Promise<Models.DiskAccessesListPrivateEndpointConnectionsNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.diskAccessName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DiskAccess
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DiskAccessList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/diskAccesses",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DiskAccessList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getPrivateLinkResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}/privateLinkResources",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.diskAccessName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PrivateLinkResourceListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAPrivateEndpointConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}/privateEndpointConnections/{privateEndpointConnectionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.diskAccessName,
    Parameters.privateEndpointConnectionName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PrivateEndpointConnection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listPrivateEndpointConnectionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}/privateEndpointConnections",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.diskAccessName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PrivateEndpointConnectionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.diskAccessName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "diskAccess",
    mapper: {
      ...Mappers.DiskAccess,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DiskAccess
    },
    202: {
      bodyMapper: Mappers.DiskAccess
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.diskAccessName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "diskAccess",
    mapper: {
      ...Mappers.DiskAccessUpdate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DiskAccess
    },
    202: {
      bodyMapper: Mappers.DiskAccess
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.diskAccessName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUpdateAPrivateEndpointConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}/privateEndpointConnections/{privateEndpointConnectionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.diskAccessName,
    Parameters.privateEndpointConnectionName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "privateEndpointConnection",
    mapper: {
      ...Mappers.PrivateEndpointConnection,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PrivateEndpointConnection
    },
    202: {
      bodyMapper: Mappers.PrivateEndpointConnection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteAPrivateEndpointConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}/privateEndpointConnections/{privateEndpointConnectionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.diskAccessName,
    Parameters.privateEndpointConnectionName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DiskAccessList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DiskAccessList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listPrivateEndpointConnectionsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PrivateEndpointConnectionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
