/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/proximityPlacementGroupsMappers";
import * as Parameters from "../models/parameters";
import { ComputeManagementClientContext } from "../computeManagementClientContext";

/** Class representing a ProximityPlacementGroups. */
export class ProximityPlacementGroups {
  private readonly client: ComputeManagementClientContext;

  /**
   * Create a ProximityPlacementGroups.
   * @param {ComputeManagementClientContext} client Reference to the service client.
   */
  constructor(client: ComputeManagementClientContext) {
    this.client = client;
  }

  /**
   * Create or update a proximity placement group.
   * @param resourceGroupName The name of the resource group.
   * @param proximityPlacementGroupName The name of the proximity placement group.
   * @param parameters Parameters supplied to the Create Proximity Placement Group operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProximityPlacementGroupsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, proximityPlacementGroupName: string, parameters: Models.ProximityPlacementGroup, options?: msRest.RequestOptionsBase): Promise<Models.ProximityPlacementGroupsCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param proximityPlacementGroupName The name of the proximity placement group.
   * @param parameters Parameters supplied to the Create Proximity Placement Group operation.
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, proximityPlacementGroupName: string, parameters: Models.ProximityPlacementGroup, callback: msRest.ServiceCallback<Models.ProximityPlacementGroup>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param proximityPlacementGroupName The name of the proximity placement group.
   * @param parameters Parameters supplied to the Create Proximity Placement Group operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, proximityPlacementGroupName: string, parameters: Models.ProximityPlacementGroup, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProximityPlacementGroup>): void;
  createOrUpdate(resourceGroupName: string, proximityPlacementGroupName: string, parameters: Models.ProximityPlacementGroup, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProximityPlacementGroup>, callback?: msRest.ServiceCallback<Models.ProximityPlacementGroup>): Promise<Models.ProximityPlacementGroupsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        proximityPlacementGroupName,
        parameters,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.ProximityPlacementGroupsCreateOrUpdateResponse>;
  }

  /**
   * Update a proximity placement group.
   * @param resourceGroupName The name of the resource group.
   * @param proximityPlacementGroupName The name of the proximity placement group.
   * @param parameters Parameters supplied to the Update Proximity Placement Group operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProximityPlacementGroupsUpdateResponse>
   */
  update(resourceGroupName: string, proximityPlacementGroupName: string, parameters: Models.ProximityPlacementGroupUpdate, options?: msRest.RequestOptionsBase): Promise<Models.ProximityPlacementGroupsUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param proximityPlacementGroupName The name of the proximity placement group.
   * @param parameters Parameters supplied to the Update Proximity Placement Group operation.
   * @param callback The callback
   */
  update(resourceGroupName: string, proximityPlacementGroupName: string, parameters: Models.ProximityPlacementGroupUpdate, callback: msRest.ServiceCallback<Models.ProximityPlacementGroup>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param proximityPlacementGroupName The name of the proximity placement group.
   * @param parameters Parameters supplied to the Update Proximity Placement Group operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, proximityPlacementGroupName: string, parameters: Models.ProximityPlacementGroupUpdate, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProximityPlacementGroup>): void;
  update(resourceGroupName: string, proximityPlacementGroupName: string, parameters: Models.ProximityPlacementGroupUpdate, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProximityPlacementGroup>, callback?: msRest.ServiceCallback<Models.ProximityPlacementGroup>): Promise<Models.ProximityPlacementGroupsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        proximityPlacementGroupName,
        parameters,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.ProximityPlacementGroupsUpdateResponse>;
  }

  /**
   * Delete a proximity placement group.
   * @param resourceGroupName The name of the resource group.
   * @param proximityPlacementGroupName The name of the proximity placement group.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, proximityPlacementGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param proximityPlacementGroupName The name of the proximity placement group.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, proximityPlacementGroupName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param proximityPlacementGroupName The name of the proximity placement group.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, proximityPlacementGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, proximityPlacementGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        proximityPlacementGroupName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Retrieves information about a proximity placement group .
   * @param resourceGroupName The name of the resource group.
   * @param proximityPlacementGroupName The name of the proximity placement group.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProximityPlacementGroupsGetResponse>
   */
  get(resourceGroupName: string, proximityPlacementGroupName: string, options?: Models.ProximityPlacementGroupsGetOptionalParams): Promise<Models.ProximityPlacementGroupsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param proximityPlacementGroupName The name of the proximity placement group.
   * @param callback The callback
   */
  get(resourceGroupName: string, proximityPlacementGroupName: string, callback: msRest.ServiceCallback<Models.ProximityPlacementGroup>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param proximityPlacementGroupName The name of the proximity placement group.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, proximityPlacementGroupName: string, options: Models.ProximityPlacementGroupsGetOptionalParams, callback: msRest.ServiceCallback<Models.ProximityPlacementGroup>): void;
  get(resourceGroupName: string, proximityPlacementGroupName: string, options?: Models.ProximityPlacementGroupsGetOptionalParams | msRest.ServiceCallback<Models.ProximityPlacementGroup>, callback?: msRest.ServiceCallback<Models.ProximityPlacementGroup>): Promise<Models.ProximityPlacementGroupsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        proximityPlacementGroupName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ProximityPlacementGroupsGetResponse>;
  }

  /**
   * Lists all proximity placement groups in a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProximityPlacementGroupsListBySubscriptionResponse>
   */
  listBySubscription(options?: msRest.RequestOptionsBase): Promise<Models.ProximityPlacementGroupsListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: msRest.ServiceCallback<Models.ProximityPlacementGroupListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProximityPlacementGroupListResult>): void;
  listBySubscription(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProximityPlacementGroupListResult>, callback?: msRest.ServiceCallback<Models.ProximityPlacementGroupListResult>): Promise<Models.ProximityPlacementGroupsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.ProximityPlacementGroupsListBySubscriptionResponse>;
  }

  /**
   * Lists all proximity placement groups in a resource group.
   * @param resourceGroupName The name of the resource group.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProximityPlacementGroupsListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.ProximityPlacementGroupsListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.ProximityPlacementGroupListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProximityPlacementGroupListResult>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProximityPlacementGroupListResult>, callback?: msRest.ServiceCallback<Models.ProximityPlacementGroupListResult>): Promise<Models.ProximityPlacementGroupsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.ProximityPlacementGroupsListByResourceGroupResponse>;
  }

  /**
   * Lists all proximity placement groups in a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProximityPlacementGroupsListBySubscriptionNextResponse>
   */
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ProximityPlacementGroupsListBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProximityPlacementGroupListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProximityPlacementGroupListResult>): void;
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProximityPlacementGroupListResult>, callback?: msRest.ServiceCallback<Models.ProximityPlacementGroupListResult>): Promise<Models.ProximityPlacementGroupsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBySubscriptionNextOperationSpec,
      callback) as Promise<Models.ProximityPlacementGroupsListBySubscriptionNextResponse>;
  }

  /**
   * Lists all proximity placement groups in a resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProximityPlacementGroupsListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ProximityPlacementGroupsListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProximityPlacementGroupListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProximityPlacementGroupListResult>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProximityPlacementGroupListResult>, callback?: msRest.ServiceCallback<Models.ProximityPlacementGroupListResult>): Promise<Models.ProximityPlacementGroupsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.ProximityPlacementGroupsListByResourceGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/proximityPlacementGroups/{proximityPlacementGroupName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.proximityPlacementGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.ProximityPlacementGroup,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ProximityPlacementGroup
    },
    201: {
      bodyMapper: Mappers.ProximityPlacementGroup
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/proximityPlacementGroups/{proximityPlacementGroupName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.proximityPlacementGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.ProximityPlacementGroupUpdate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ProximityPlacementGroup
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/proximityPlacementGroups/{proximityPlacementGroupName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.proximityPlacementGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/proximityPlacementGroups/{proximityPlacementGroupName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.proximityPlacementGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.includeColocationStatus,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProximityPlacementGroup
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/proximityPlacementGroups",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProximityPlacementGroupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/proximityPlacementGroups",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProximityPlacementGroupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listBySubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProximityPlacementGroupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProximityPlacementGroupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
