/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/cloudServiceOperatingSystemsMappers";
import * as Parameters from "../models/parameters";
import { ComputeManagementClientContext } from "../computeManagementClientContext";

/** Class representing a CloudServiceOperatingSystems. */
export class CloudServiceOperatingSystems {
  private readonly client: ComputeManagementClientContext;

  /**
   * Create a CloudServiceOperatingSystems.
   * @param {ComputeManagementClientContext} client Reference to the service client.
   */
  constructor(client: ComputeManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets properties of a guest operating system version that can be specified in the XML service
   * configuration (.cscfg) for a cloud service.
   * @param location Name of the location that the OS version pertains to.
   * @param osVersionName Name of the OS version.
   * @param [options] The optional parameters
   * @returns Promise<Models.CloudServiceOperatingSystemsGetOSVersionResponse>
   */
  getOSVersion(location: string, osVersionName: string, options?: msRest.RequestOptionsBase): Promise<Models.CloudServiceOperatingSystemsGetOSVersionResponse>;
  /**
   * @param location Name of the location that the OS version pertains to.
   * @param osVersionName Name of the OS version.
   * @param callback The callback
   */
  getOSVersion(location: string, osVersionName: string, callback: msRest.ServiceCallback<Models.OSVersion>): void;
  /**
   * @param location Name of the location that the OS version pertains to.
   * @param osVersionName Name of the OS version.
   * @param options The optional parameters
   * @param callback The callback
   */
  getOSVersion(location: string, osVersionName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OSVersion>): void;
  getOSVersion(location: string, osVersionName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OSVersion>, callback?: msRest.ServiceCallback<Models.OSVersion>): Promise<Models.CloudServiceOperatingSystemsGetOSVersionResponse> {
    return this.client.sendOperationRequest(
      {
        location,
        osVersionName,
        options
      },
      getOSVersionOperationSpec,
      callback) as Promise<Models.CloudServiceOperatingSystemsGetOSVersionResponse>;
  }

  /**
   * Gets a list of all guest operating system versions available to be specified in the XML service
   * configuration (.cscfg) for a cloud service. Use nextLink property in the response to get the
   * next page of OS versions. Do this till nextLink is null to fetch all the OS versions.
   * @param location Name of the location that the OS versions pertain to.
   * @param [options] The optional parameters
   * @returns Promise<Models.CloudServiceOperatingSystemsListOSVersionsResponse>
   */
  listOSVersions(location: string, options?: msRest.RequestOptionsBase): Promise<Models.CloudServiceOperatingSystemsListOSVersionsResponse>;
  /**
   * @param location Name of the location that the OS versions pertain to.
   * @param callback The callback
   */
  listOSVersions(location: string, callback: msRest.ServiceCallback<Models.OSVersionListResult>): void;
  /**
   * @param location Name of the location that the OS versions pertain to.
   * @param options The optional parameters
   * @param callback The callback
   */
  listOSVersions(location: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OSVersionListResult>): void;
  listOSVersions(location: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OSVersionListResult>, callback?: msRest.ServiceCallback<Models.OSVersionListResult>): Promise<Models.CloudServiceOperatingSystemsListOSVersionsResponse> {
    return this.client.sendOperationRequest(
      {
        location,
        options
      },
      listOSVersionsOperationSpec,
      callback) as Promise<Models.CloudServiceOperatingSystemsListOSVersionsResponse>;
  }

  /**
   * Gets properties of a guest operating system family that can be specified in the XML service
   * configuration (.cscfg) for a cloud service.
   * @param location Name of the location that the OS family pertains to.
   * @param osFamilyName Name of the OS family.
   * @param [options] The optional parameters
   * @returns Promise<Models.CloudServiceOperatingSystemsGetOSFamilyResponse>
   */
  getOSFamily(location: string, osFamilyName: string, options?: msRest.RequestOptionsBase): Promise<Models.CloudServiceOperatingSystemsGetOSFamilyResponse>;
  /**
   * @param location Name of the location that the OS family pertains to.
   * @param osFamilyName Name of the OS family.
   * @param callback The callback
   */
  getOSFamily(location: string, osFamilyName: string, callback: msRest.ServiceCallback<Models.OSFamily>): void;
  /**
   * @param location Name of the location that the OS family pertains to.
   * @param osFamilyName Name of the OS family.
   * @param options The optional parameters
   * @param callback The callback
   */
  getOSFamily(location: string, osFamilyName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OSFamily>): void;
  getOSFamily(location: string, osFamilyName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OSFamily>, callback?: msRest.ServiceCallback<Models.OSFamily>): Promise<Models.CloudServiceOperatingSystemsGetOSFamilyResponse> {
    return this.client.sendOperationRequest(
      {
        location,
        osFamilyName,
        options
      },
      getOSFamilyOperationSpec,
      callback) as Promise<Models.CloudServiceOperatingSystemsGetOSFamilyResponse>;
  }

  /**
   * Gets a list of all guest operating system families available to be specified in the XML service
   * configuration (.cscfg) for a cloud service. Use nextLink property in the response to get the
   * next page of OS Families. Do this till nextLink is null to fetch all the OS Families.
   * @param location Name of the location that the OS families pertain to.
   * @param [options] The optional parameters
   * @returns Promise<Models.CloudServiceOperatingSystemsListOSFamiliesResponse>
   */
  listOSFamilies(location: string, options?: msRest.RequestOptionsBase): Promise<Models.CloudServiceOperatingSystemsListOSFamiliesResponse>;
  /**
   * @param location Name of the location that the OS families pertain to.
   * @param callback The callback
   */
  listOSFamilies(location: string, callback: msRest.ServiceCallback<Models.OSFamilyListResult>): void;
  /**
   * @param location Name of the location that the OS families pertain to.
   * @param options The optional parameters
   * @param callback The callback
   */
  listOSFamilies(location: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OSFamilyListResult>): void;
  listOSFamilies(location: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OSFamilyListResult>, callback?: msRest.ServiceCallback<Models.OSFamilyListResult>): Promise<Models.CloudServiceOperatingSystemsListOSFamiliesResponse> {
    return this.client.sendOperationRequest(
      {
        location,
        options
      },
      listOSFamiliesOperationSpec,
      callback) as Promise<Models.CloudServiceOperatingSystemsListOSFamiliesResponse>;
  }

  /**
   * Gets a list of all guest operating system versions available to be specified in the XML service
   * configuration (.cscfg) for a cloud service. Use nextLink property in the response to get the
   * next page of OS versions. Do this till nextLink is null to fetch all the OS versions.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.CloudServiceOperatingSystemsListOSVersionsNextResponse>
   */
  listOSVersionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.CloudServiceOperatingSystemsListOSVersionsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listOSVersionsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.OSVersionListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listOSVersionsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OSVersionListResult>): void;
  listOSVersionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OSVersionListResult>, callback?: msRest.ServiceCallback<Models.OSVersionListResult>): Promise<Models.CloudServiceOperatingSystemsListOSVersionsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listOSVersionsNextOperationSpec,
      callback) as Promise<Models.CloudServiceOperatingSystemsListOSVersionsNextResponse>;
  }

  /**
   * Gets a list of all guest operating system families available to be specified in the XML service
   * configuration (.cscfg) for a cloud service. Use nextLink property in the response to get the
   * next page of OS Families. Do this till nextLink is null to fetch all the OS Families.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.CloudServiceOperatingSystemsListOSFamiliesNextResponse>
   */
  listOSFamiliesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.CloudServiceOperatingSystemsListOSFamiliesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listOSFamiliesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.OSFamilyListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listOSFamiliesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OSFamilyListResult>): void;
  listOSFamiliesNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OSFamilyListResult>, callback?: msRest.ServiceCallback<Models.OSFamilyListResult>): Promise<Models.CloudServiceOperatingSystemsListOSFamiliesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listOSFamiliesNextOperationSpec,
      callback) as Promise<Models.CloudServiceOperatingSystemsListOSFamiliesNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOSVersionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/cloudServiceOsVersions/{osVersionName}",
  urlParameters: [
    Parameters.location0,
    Parameters.osVersionName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion3
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OSVersion
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOSVersionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/cloudServiceOsVersions",
  urlParameters: [
    Parameters.location0,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion3
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OSVersionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOSFamilyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/cloudServiceOsFamilies/{osFamilyName}",
  urlParameters: [
    Parameters.location0,
    Parameters.osFamilyName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion3
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OSFamily
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOSFamiliesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/cloudServiceOsFamilies",
  urlParameters: [
    Parameters.location0,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion3
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OSFamilyListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOSVersionsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion3
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OSVersionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOSFamiliesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion3
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OSFamilyListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
