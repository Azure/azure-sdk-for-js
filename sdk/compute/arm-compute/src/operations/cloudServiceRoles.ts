/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/cloudServiceRolesMappers";
import * as Parameters from "../models/parameters";
import { ComputeManagementClientContext } from "../computeManagementClientContext";

/** Class representing a CloudServiceRoles. */
export class CloudServiceRoles {
  private readonly client: ComputeManagementClientContext;

  /**
   * Create a CloudServiceRoles.
   * @param {ComputeManagementClientContext} client Reference to the service client.
   */
  constructor(client: ComputeManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets a role from a cloud service.
   * @param roleName Name of the role.
   * @param resourceGroupName
   * @param cloudServiceName
   * @param [options] The optional parameters
   * @returns Promise<Models.CloudServiceRolesGetResponse>
   */
  get(roleName: string, resourceGroupName: string, cloudServiceName: string, options?: msRest.RequestOptionsBase): Promise<Models.CloudServiceRolesGetResponse>;
  /**
   * @param roleName Name of the role.
   * @param resourceGroupName
   * @param cloudServiceName
   * @param callback The callback
   */
  get(roleName: string, resourceGroupName: string, cloudServiceName: string, callback: msRest.ServiceCallback<Models.CloudServiceRole>): void;
  /**
   * @param roleName Name of the role.
   * @param resourceGroupName
   * @param cloudServiceName
   * @param options The optional parameters
   * @param callback The callback
   */
  get(roleName: string, resourceGroupName: string, cloudServiceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CloudServiceRole>): void;
  get(roleName: string, resourceGroupName: string, cloudServiceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CloudServiceRole>, callback?: msRest.ServiceCallback<Models.CloudServiceRole>): Promise<Models.CloudServiceRolesGetResponse> {
    return this.client.sendOperationRequest(
      {
        roleName,
        resourceGroupName,
        cloudServiceName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.CloudServiceRolesGetResponse>;
  }

  /**
   * Gets a list of all roles in a cloud service. Use nextLink property in the response to get the
   * next page of roles. Do this till nextLink is null to fetch all the roles.
   * @param resourceGroupName
   * @param cloudServiceName
   * @param [options] The optional parameters
   * @returns Promise<Models.CloudServiceRolesListResponse>
   */
  list(resourceGroupName: string, cloudServiceName: string, options?: msRest.RequestOptionsBase): Promise<Models.CloudServiceRolesListResponse>;
  /**
   * @param resourceGroupName
   * @param cloudServiceName
   * @param callback The callback
   */
  list(resourceGroupName: string, cloudServiceName: string, callback: msRest.ServiceCallback<Models.CloudServiceRoleListResult>): void;
  /**
   * @param resourceGroupName
   * @param cloudServiceName
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, cloudServiceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CloudServiceRoleListResult>): void;
  list(resourceGroupName: string, cloudServiceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CloudServiceRoleListResult>, callback?: msRest.ServiceCallback<Models.CloudServiceRoleListResult>): Promise<Models.CloudServiceRolesListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        cloudServiceName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.CloudServiceRolesListResponse>;
  }

  /**
   * Gets a list of all roles in a cloud service. Use nextLink property in the response to get the
   * next page of roles. Do this till nextLink is null to fetch all the roles.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.CloudServiceRolesListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.CloudServiceRolesListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CloudServiceRoleListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CloudServiceRoleListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CloudServiceRoleListResult>, callback?: msRest.ServiceCallback<Models.CloudServiceRoleListResult>): Promise<Models.CloudServiceRolesListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.CloudServiceRolesListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roles/{roleName}",
  urlParameters: [
    Parameters.roleName,
    Parameters.resourceGroupName,
    Parameters.cloudServiceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion3
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CloudServiceRole
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roles",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.cloudServiceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion3
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CloudServiceRoleListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion3
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CloudServiceRoleListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
