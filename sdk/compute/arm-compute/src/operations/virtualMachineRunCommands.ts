/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/virtualMachineRunCommandsMappers";
import * as Parameters from "../models/parameters";
import { ComputeManagementClientContext } from "../computeManagementClientContext";

/** Class representing a VirtualMachineRunCommands. */
export class VirtualMachineRunCommands {
  private readonly client: ComputeManagementClientContext;

  /**
   * Create a VirtualMachineRunCommands.
   * @param {ComputeManagementClientContext} client Reference to the service client.
   */
  constructor(client: ComputeManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists all available run commands for a subscription in a location.
   * @param location The location upon which run commands is queried.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualMachineRunCommandsListResponse>
   */
  list(location: string, options?: msRest.RequestOptionsBase): Promise<Models.VirtualMachineRunCommandsListResponse>;
  /**
   * @param location The location upon which run commands is queried.
   * @param callback The callback
   */
  list(location: string, callback: msRest.ServiceCallback<Models.RunCommandListResult>): void;
  /**
   * @param location The location upon which run commands is queried.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(location: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RunCommandListResult>): void;
  list(location: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RunCommandListResult>, callback?: msRest.ServiceCallback<Models.RunCommandListResult>): Promise<Models.VirtualMachineRunCommandsListResponse> {
    return this.client.sendOperationRequest(
      {
        location,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.VirtualMachineRunCommandsListResponse>;
  }

  /**
   * Gets specific run command for a subscription in a location.
   * @param location The location upon which run commands is queried.
   * @param commandId The command id.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualMachineRunCommandsGetResponse>
   */
  get(location: string, commandId: string, options?: msRest.RequestOptionsBase): Promise<Models.VirtualMachineRunCommandsGetResponse>;
  /**
   * @param location The location upon which run commands is queried.
   * @param commandId The command id.
   * @param callback The callback
   */
  get(location: string, commandId: string, callback: msRest.ServiceCallback<Models.RunCommandDocument>): void;
  /**
   * @param location The location upon which run commands is queried.
   * @param commandId The command id.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(location: string, commandId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RunCommandDocument>): void;
  get(location: string, commandId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RunCommandDocument>, callback?: msRest.ServiceCallback<Models.RunCommandDocument>): Promise<Models.VirtualMachineRunCommandsGetResponse> {
    return this.client.sendOperationRequest(
      {
        location,
        commandId,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.VirtualMachineRunCommandsGetResponse>;
  }

  /**
   * The operation to create or update the run command.
   * @param resourceGroupName The name of the resource group.
   * @param vmName The name of the virtual machine where the run command should be created or
   * updated.
   * @param runCommandName The name of the virtual machine run command.
   * @param runCommand Parameters supplied to the Create Virtual Machine RunCommand operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualMachineRunCommandsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, vmName: string, runCommandName: string, runCommand: Models.VirtualMachineRunCommand, options?: msRest.RequestOptionsBase): Promise<Models.VirtualMachineRunCommandsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,vmName,runCommandName,runCommand,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VirtualMachineRunCommandsCreateOrUpdateResponse>;
  }

  /**
   * The operation to update the run command.
   * @param resourceGroupName The name of the resource group.
   * @param vmName The name of the virtual machine where the run command should be updated.
   * @param runCommandName The name of the virtual machine run command.
   * @param runCommand Parameters supplied to the Update Virtual Machine RunCommand operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualMachineRunCommandsUpdateResponse>
   */
  update(resourceGroupName: string, vmName: string, runCommandName: string, runCommand: Models.VirtualMachineRunCommandUpdate, options?: msRest.RequestOptionsBase): Promise<Models.VirtualMachineRunCommandsUpdateResponse> {
    return this.beginUpdate(resourceGroupName,vmName,runCommandName,runCommand,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VirtualMachineRunCommandsUpdateResponse>;
  }

  /**
   * The operation to delete the run command.
   * @param resourceGroupName The name of the resource group.
   * @param vmName The name of the virtual machine where the run command should be deleted.
   * @param runCommandName The name of the virtual machine run command.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, vmName: string, runCommandName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,vmName,runCommandName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * The operation to get the run command.
   * @param resourceGroupName The name of the resource group.
   * @param vmName The name of the virtual machine containing the run command.
   * @param runCommandName The name of the virtual machine run command.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualMachineRunCommandsGetByVirtualMachineResponse>
   */
  getByVirtualMachine(resourceGroupName: string, vmName: string, runCommandName: string, options?: Models.VirtualMachineRunCommandsGetByVirtualMachineOptionalParams): Promise<Models.VirtualMachineRunCommandsGetByVirtualMachineResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param vmName The name of the virtual machine containing the run command.
   * @param runCommandName The name of the virtual machine run command.
   * @param callback The callback
   */
  getByVirtualMachine(resourceGroupName: string, vmName: string, runCommandName: string, callback: msRest.ServiceCallback<Models.VirtualMachineRunCommand>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param vmName The name of the virtual machine containing the run command.
   * @param runCommandName The name of the virtual machine run command.
   * @param options The optional parameters
   * @param callback The callback
   */
  getByVirtualMachine(resourceGroupName: string, vmName: string, runCommandName: string, options: Models.VirtualMachineRunCommandsGetByVirtualMachineOptionalParams, callback: msRest.ServiceCallback<Models.VirtualMachineRunCommand>): void;
  getByVirtualMachine(resourceGroupName: string, vmName: string, runCommandName: string, options?: Models.VirtualMachineRunCommandsGetByVirtualMachineOptionalParams | msRest.ServiceCallback<Models.VirtualMachineRunCommand>, callback?: msRest.ServiceCallback<Models.VirtualMachineRunCommand>): Promise<Models.VirtualMachineRunCommandsGetByVirtualMachineResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        vmName,
        runCommandName,
        options
      },
      getByVirtualMachineOperationSpec,
      callback) as Promise<Models.VirtualMachineRunCommandsGetByVirtualMachineResponse>;
  }

  /**
   * The operation to get all run commands of a Virtual Machine.
   * @param resourceGroupName The name of the resource group.
   * @param vmName The name of the virtual machine containing the run command.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualMachineRunCommandsListByVirtualMachineResponse>
   */
  listByVirtualMachine(resourceGroupName: string, vmName: string, options?: Models.VirtualMachineRunCommandsListByVirtualMachineOptionalParams): Promise<Models.VirtualMachineRunCommandsListByVirtualMachineResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param vmName The name of the virtual machine containing the run command.
   * @param callback The callback
   */
  listByVirtualMachine(resourceGroupName: string, vmName: string, callback: msRest.ServiceCallback<Models.VirtualMachineRunCommandsListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param vmName The name of the virtual machine containing the run command.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByVirtualMachine(resourceGroupName: string, vmName: string, options: Models.VirtualMachineRunCommandsListByVirtualMachineOptionalParams, callback: msRest.ServiceCallback<Models.VirtualMachineRunCommandsListResult>): void;
  listByVirtualMachine(resourceGroupName: string, vmName: string, options?: Models.VirtualMachineRunCommandsListByVirtualMachineOptionalParams | msRest.ServiceCallback<Models.VirtualMachineRunCommandsListResult>, callback?: msRest.ServiceCallback<Models.VirtualMachineRunCommandsListResult>): Promise<Models.VirtualMachineRunCommandsListByVirtualMachineResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        vmName,
        options
      },
      listByVirtualMachineOperationSpec,
      callback) as Promise<Models.VirtualMachineRunCommandsListByVirtualMachineResponse>;
  }

  /**
   * The operation to create or update the run command.
   * @param resourceGroupName The name of the resource group.
   * @param vmName The name of the virtual machine where the run command should be created or
   * updated.
   * @param runCommandName The name of the virtual machine run command.
   * @param runCommand Parameters supplied to the Create Virtual Machine RunCommand operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, vmName: string, runCommandName: string, runCommand: Models.VirtualMachineRunCommand, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        vmName,
        runCommandName,
        runCommand,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * The operation to update the run command.
   * @param resourceGroupName The name of the resource group.
   * @param vmName The name of the virtual machine where the run command should be updated.
   * @param runCommandName The name of the virtual machine run command.
   * @param runCommand Parameters supplied to the Update Virtual Machine RunCommand operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(resourceGroupName: string, vmName: string, runCommandName: string, runCommand: Models.VirtualMachineRunCommandUpdate, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        vmName,
        runCommandName,
        runCommand,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * The operation to delete the run command.
   * @param resourceGroupName The name of the resource group.
   * @param vmName The name of the virtual machine where the run command should be deleted.
   * @param runCommandName The name of the virtual machine run command.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, vmName: string, runCommandName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        vmName,
        runCommandName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Lists all available run commands for a subscription in a location.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualMachineRunCommandsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.VirtualMachineRunCommandsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.RunCommandListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RunCommandListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RunCommandListResult>, callback?: msRest.ServiceCallback<Models.RunCommandListResult>): Promise<Models.VirtualMachineRunCommandsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.VirtualMachineRunCommandsListNextResponse>;
  }

  /**
   * The operation to get all run commands of a Virtual Machine.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualMachineRunCommandsListByVirtualMachineNextResponse>
   */
  listByVirtualMachineNext(nextPageLink: string, options?: Models.VirtualMachineRunCommandsListByVirtualMachineNextOptionalParams): Promise<Models.VirtualMachineRunCommandsListByVirtualMachineNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByVirtualMachineNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.VirtualMachineRunCommandsListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByVirtualMachineNext(nextPageLink: string, options: Models.VirtualMachineRunCommandsListByVirtualMachineNextOptionalParams, callback: msRest.ServiceCallback<Models.VirtualMachineRunCommandsListResult>): void;
  listByVirtualMachineNext(nextPageLink: string, options?: Models.VirtualMachineRunCommandsListByVirtualMachineNextOptionalParams | msRest.ServiceCallback<Models.VirtualMachineRunCommandsListResult>, callback?: msRest.ServiceCallback<Models.VirtualMachineRunCommandsListResult>): Promise<Models.VirtualMachineRunCommandsListByVirtualMachineNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByVirtualMachineNextOperationSpec,
      callback) as Promise<Models.VirtualMachineRunCommandsListByVirtualMachineNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/runCommands",
  urlParameters: [
    Parameters.location1,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RunCommandListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/runCommands/{commandId}",
  urlParameters: [
    Parameters.location1,
    Parameters.commandId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RunCommandDocument
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getByVirtualMachineOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/runCommands/{runCommandName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.vmName,
    Parameters.runCommandName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.expand0,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachineRunCommand
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByVirtualMachineOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/runCommands",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.vmName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.expand0,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachineRunCommandsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/runCommands/{runCommandName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.vmName,
    Parameters.runCommandName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "runCommand",
    mapper: {
      ...Mappers.VirtualMachineRunCommand,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachineRunCommand
    },
    201: {
      bodyMapper: Mappers.VirtualMachineRunCommand
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/runCommands/{runCommandName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.vmName,
    Parameters.runCommandName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "runCommand",
    mapper: {
      ...Mappers.VirtualMachineRunCommandUpdate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachineRunCommand
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/runCommands/{runCommandName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.vmName,
    Parameters.runCommandName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RunCommandListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByVirtualMachineNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.expand0,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachineRunCommandsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
