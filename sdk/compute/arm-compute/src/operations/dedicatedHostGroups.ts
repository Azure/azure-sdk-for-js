/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/dedicatedHostGroupsMappers";
import * as Parameters from "../models/parameters";
import { ComputeManagementClientContext } from "../computeManagementClientContext";

/** Class representing a DedicatedHostGroups. */
export class DedicatedHostGroups {
  private readonly client: ComputeManagementClientContext;

  /**
   * Create a DedicatedHostGroups.
   * @param {ComputeManagementClientContext} client Reference to the service client.
   */
  constructor(client: ComputeManagementClientContext) {
    this.client = client;
  }

  /**
   * Create or update a dedicated host group. For details of Dedicated Host and Dedicated Host Groups
   * please see [Dedicated Host Documentation] (https://go.microsoft.com/fwlink/?linkid=2082596)
   * @param resourceGroupName The name of the resource group.
   * @param hostGroupName The name of the dedicated host group.
   * @param parameters Parameters supplied to the Create Dedicated Host Group.
   * @param [options] The optional parameters
   * @returns Promise<Models.DedicatedHostGroupsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, hostGroupName: string, parameters: Models.DedicatedHostGroup, options?: coreHttp.RequestOptionsBase): Promise<Models.DedicatedHostGroupsCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param hostGroupName The name of the dedicated host group.
   * @param parameters Parameters supplied to the Create Dedicated Host Group.
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, hostGroupName: string, parameters: Models.DedicatedHostGroup, callback: coreHttp.ServiceCallback<Models.DedicatedHostGroup>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param hostGroupName The name of the dedicated host group.
   * @param parameters Parameters supplied to the Create Dedicated Host Group.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, hostGroupName: string, parameters: Models.DedicatedHostGroup, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.DedicatedHostGroup>): void;
  createOrUpdate(resourceGroupName: string, hostGroupName: string, parameters: Models.DedicatedHostGroup, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DedicatedHostGroup>, callback?: coreHttp.ServiceCallback<Models.DedicatedHostGroup>): Promise<Models.DedicatedHostGroupsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        hostGroupName,
        parameters,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.DedicatedHostGroupsCreateOrUpdateResponse>;
  }

  /**
   * Update an dedicated host group.
   * @param resourceGroupName The name of the resource group.
   * @param hostGroupName The name of the dedicated host group.
   * @param parameters Parameters supplied to the Update Dedicated Host Group operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DedicatedHostGroupsUpdateResponse>
   */
  update(resourceGroupName: string, hostGroupName: string, parameters: Models.DedicatedHostGroupUpdate, options?: coreHttp.RequestOptionsBase): Promise<Models.DedicatedHostGroupsUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param hostGroupName The name of the dedicated host group.
   * @param parameters Parameters supplied to the Update Dedicated Host Group operation.
   * @param callback The callback
   */
  update(resourceGroupName: string, hostGroupName: string, parameters: Models.DedicatedHostGroupUpdate, callback: coreHttp.ServiceCallback<Models.DedicatedHostGroup>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param hostGroupName The name of the dedicated host group.
   * @param parameters Parameters supplied to the Update Dedicated Host Group operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, hostGroupName: string, parameters: Models.DedicatedHostGroupUpdate, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.DedicatedHostGroup>): void;
  update(resourceGroupName: string, hostGroupName: string, parameters: Models.DedicatedHostGroupUpdate, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DedicatedHostGroup>, callback?: coreHttp.ServiceCallback<Models.DedicatedHostGroup>): Promise<Models.DedicatedHostGroupsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        hostGroupName,
        parameters,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.DedicatedHostGroupsUpdateResponse>;
  }

  /**
   * Delete a dedicated host group.
   * @param resourceGroupName The name of the resource group.
   * @param hostGroupName The name of the dedicated host group.
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  deleteMethod(resourceGroupName: string, hostGroupName: string, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param hostGroupName The name of the dedicated host group.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, hostGroupName: string, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param hostGroupName The name of the dedicated host group.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, hostGroupName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, hostGroupName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        hostGroupName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Retrieves information about a dedicated host group.
   * @param resourceGroupName The name of the resource group.
   * @param hostGroupName The name of the dedicated host group.
   * @param [options] The optional parameters
   * @returns Promise<Models.DedicatedHostGroupsGetResponse>
   */
  get(resourceGroupName: string, hostGroupName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.DedicatedHostGroupsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param hostGroupName The name of the dedicated host group.
   * @param callback The callback
   */
  get(resourceGroupName: string, hostGroupName: string, callback: coreHttp.ServiceCallback<Models.DedicatedHostGroup>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param hostGroupName The name of the dedicated host group.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, hostGroupName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.DedicatedHostGroup>): void;
  get(resourceGroupName: string, hostGroupName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DedicatedHostGroup>, callback?: coreHttp.ServiceCallback<Models.DedicatedHostGroup>): Promise<Models.DedicatedHostGroupsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        hostGroupName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.DedicatedHostGroupsGetResponse>;
  }

  /**
   * Lists all of the dedicated host groups in the specified resource group. Use the nextLink
   * property in the response to get the next page of dedicated host groups.
   * @param resourceGroupName The name of the resource group.
   * @param [options] The optional parameters
   * @returns Promise<Models.DedicatedHostGroupsListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.DedicatedHostGroupsListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: coreHttp.ServiceCallback<Models.DedicatedHostGroupListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.DedicatedHostGroupListResult>): void;
  listByResourceGroup(resourceGroupName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DedicatedHostGroupListResult>, callback?: coreHttp.ServiceCallback<Models.DedicatedHostGroupListResult>): Promise<Models.DedicatedHostGroupsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.DedicatedHostGroupsListByResourceGroupResponse>;
  }

  /**
   * Lists all of the dedicated host groups in the subscription. Use the nextLink property in the
   * response to get the next page of dedicated host groups.
   * @param [options] The optional parameters
   * @returns Promise<Models.DedicatedHostGroupsListBySubscriptionResponse>
   */
  listBySubscription(options?: coreHttp.RequestOptionsBase): Promise<Models.DedicatedHostGroupsListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: coreHttp.ServiceCallback<Models.DedicatedHostGroupListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.DedicatedHostGroupListResult>): void;
  listBySubscription(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DedicatedHostGroupListResult>, callback?: coreHttp.ServiceCallback<Models.DedicatedHostGroupListResult>): Promise<Models.DedicatedHostGroupsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.DedicatedHostGroupsListBySubscriptionResponse>;
  }

  /**
   * Lists all of the dedicated host groups in the specified resource group. Use the nextLink
   * property in the response to get the next page of dedicated host groups.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DedicatedHostGroupsListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase): Promise<Models.DedicatedHostGroupsListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: coreHttp.ServiceCallback<Models.DedicatedHostGroupListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.DedicatedHostGroupListResult>): void;
  listByResourceGroupNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DedicatedHostGroupListResult>, callback?: coreHttp.ServiceCallback<Models.DedicatedHostGroupListResult>): Promise<Models.DedicatedHostGroupsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.DedicatedHostGroupsListByResourceGroupNextResponse>;
  }

  /**
   * Lists all of the dedicated host groups in the subscription. Use the nextLink property in the
   * response to get the next page of dedicated host groups.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DedicatedHostGroupsListBySubscriptionNextResponse>
   */
  listBySubscriptionNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase): Promise<Models.DedicatedHostGroupsListBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, callback: coreHttp.ServiceCallback<Models.DedicatedHostGroupListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.DedicatedHostGroupListResult>): void;
  listBySubscriptionNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DedicatedHostGroupListResult>, callback?: coreHttp.ServiceCallback<Models.DedicatedHostGroupListResult>): Promise<Models.DedicatedHostGroupsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBySubscriptionNextOperationSpec,
      callback) as Promise<Models.DedicatedHostGroupsListBySubscriptionNextResponse>;
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.hostGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.DedicatedHostGroup,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedHostGroup
    },
    201: {
      bodyMapper: Mappers.DedicatedHostGroup
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.hostGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.DedicatedHostGroupUpdate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedHostGroup
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.hostGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.hostGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedHostGroup
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedHostGroupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listBySubscriptionOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/hostGroups",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedHostGroupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedHostGroupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listBySubscriptionNextOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedHostGroupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
