/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as coreArm from "@azure/core-arm";
import * as Models from "../models";
import * as Mappers from "../models/dedicatedHostsMappers";
import * as Parameters from "../models/parameters";
import { ComputeManagementClientContext } from "../computeManagementClientContext";

/** Class representing a DedicatedHosts. */
export class DedicatedHosts {
  private readonly client: ComputeManagementClientContext;

  /**
   * Create a DedicatedHosts.
   * @param {ComputeManagementClientContext} client Reference to the service client.
   */
  constructor(client: ComputeManagementClientContext) {
    this.client = client;
  }

  /**
   * Create or update a dedicated host .
   * @param resourceGroupName The name of the resource group.
   * @param hostGroupName The name of the dedicated host group.
   * @param hostName The name of the dedicated host .
   * @param parameters Parameters supplied to the Create Dedicated Host.
   * @param [options] The optional parameters
   * @returns Promise<Models.DedicatedHostsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, hostGroupName: string, hostName: string, parameters: Models.DedicatedHost, options?: coreHttp.RequestOptionsBase): Promise<Models.DedicatedHostsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,hostGroupName,hostName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DedicatedHostsCreateOrUpdateResponse>;
  }

  /**
   * Update an dedicated host .
   * @param resourceGroupName The name of the resource group.
   * @param hostGroupName The name of the dedicated host group.
   * @param hostName The name of the dedicated host .
   * @param parameters Parameters supplied to the Update Dedicated Host operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DedicatedHostsUpdateResponse>
   */
  update(resourceGroupName: string, hostGroupName: string, hostName: string, parameters: Models.DedicatedHostUpdate, options?: coreHttp.RequestOptionsBase): Promise<Models.DedicatedHostsUpdateResponse> {
    return this.beginUpdate(resourceGroupName,hostGroupName,hostName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DedicatedHostsUpdateResponse>;
  }

  /**
   * Delete a dedicated host.
   * @param resourceGroupName The name of the resource group.
   * @param hostGroupName The name of the dedicated host group.
   * @param hostName The name of the dedicated host.
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  deleteMethod(resourceGroupName: string, hostGroupName: string, hostName: string, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,hostGroupName,hostName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Retrieves information about a dedicated host.
   * @param resourceGroupName The name of the resource group.
   * @param hostGroupName The name of the dedicated host group.
   * @param hostName The name of the dedicated host.
   * @param [options] The optional parameters
   * @returns Promise<Models.DedicatedHostsGetResponse>
   */
  get(resourceGroupName: string, hostGroupName: string, hostName: string, options?: Models.DedicatedHostsGetOptionalParams): Promise<Models.DedicatedHostsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param hostGroupName The name of the dedicated host group.
   * @param hostName The name of the dedicated host.
   * @param callback The callback
   */
  get(resourceGroupName: string, hostGroupName: string, hostName: string, callback: coreHttp.ServiceCallback<Models.DedicatedHost>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param hostGroupName The name of the dedicated host group.
   * @param hostName The name of the dedicated host.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, hostGroupName: string, hostName: string, options: Models.DedicatedHostsGetOptionalParams, callback: coreHttp.ServiceCallback<Models.DedicatedHost>): void;
  get(resourceGroupName: string, hostGroupName: string, hostName: string, options?: Models.DedicatedHostsGetOptionalParams | coreHttp.ServiceCallback<Models.DedicatedHost>, callback?: coreHttp.ServiceCallback<Models.DedicatedHost>): Promise<Models.DedicatedHostsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        hostGroupName,
        hostName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.DedicatedHostsGetResponse>;
  }

  /**
   * Lists all of the dedicated hosts in the specified dedicated host group. Use the nextLink
   * property in the response to get the next page of dedicated hosts.
   * @param resourceGroupName The name of the resource group.
   * @param hostGroupName The name of the dedicated host group.
   * @param [options] The optional parameters
   * @returns Promise<Models.DedicatedHostsListByHostGroupResponse>
   */
  listByHostGroup(resourceGroupName: string, hostGroupName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.DedicatedHostsListByHostGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param hostGroupName The name of the dedicated host group.
   * @param callback The callback
   */
  listByHostGroup(resourceGroupName: string, hostGroupName: string, callback: coreHttp.ServiceCallback<Models.DedicatedHostListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param hostGroupName The name of the dedicated host group.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByHostGroup(resourceGroupName: string, hostGroupName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.DedicatedHostListResult>): void;
  listByHostGroup(resourceGroupName: string, hostGroupName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DedicatedHostListResult>, callback?: coreHttp.ServiceCallback<Models.DedicatedHostListResult>): Promise<Models.DedicatedHostsListByHostGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        hostGroupName,
        options
      },
      listByHostGroupOperationSpec,
      callback) as Promise<Models.DedicatedHostsListByHostGroupResponse>;
  }

  /**
   * Create or update a dedicated host .
   * @param resourceGroupName The name of the resource group.
   * @param hostGroupName The name of the dedicated host group.
   * @param hostName The name of the dedicated host .
   * @param parameters Parameters supplied to the Create Dedicated Host.
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, hostGroupName: string, hostName: string, parameters: Models.DedicatedHost, options?: coreHttp.RequestOptionsBase): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        hostGroupName,
        hostName,
        parameters,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Update an dedicated host .
   * @param resourceGroupName The name of the resource group.
   * @param hostGroupName The name of the dedicated host group.
   * @param hostName The name of the dedicated host .
   * @param parameters Parameters supplied to the Update Dedicated Host operation.
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginUpdate(resourceGroupName: string, hostGroupName: string, hostName: string, parameters: Models.DedicatedHostUpdate, options?: coreHttp.RequestOptionsBase): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        hostGroupName,
        hostName,
        parameters,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * Delete a dedicated host.
   * @param resourceGroupName The name of the resource group.
   * @param hostGroupName The name of the dedicated host group.
   * @param hostName The name of the dedicated host.
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, hostGroupName: string, hostName: string, options?: coreHttp.RequestOptionsBase): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        hostGroupName,
        hostName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Lists all of the dedicated hosts in the specified dedicated host group. Use the nextLink
   * property in the response to get the next page of dedicated hosts.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DedicatedHostsListByHostGroupNextResponse>
   */
  listByHostGroupNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase): Promise<Models.DedicatedHostsListByHostGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByHostGroupNext(nextPageLink: string, callback: coreHttp.ServiceCallback<Models.DedicatedHostListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByHostGroupNext(nextPageLink: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.DedicatedHostListResult>): void;
  listByHostGroupNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DedicatedHostListResult>, callback?: coreHttp.ServiceCallback<Models.DedicatedHostListResult>): Promise<Models.DedicatedHostsListByHostGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByHostGroupNextOperationSpec,
      callback) as Promise<Models.DedicatedHostsListByHostGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const getOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}/hosts/{hostName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.hostGroupName,
    Parameters.hostName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.expand0,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedHost
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByHostGroupOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}/hosts",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.hostGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedHostListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}/hosts/{hostName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.hostGroupName,
    Parameters.hostName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.DedicatedHost,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedHost
    },
    201: {
      bodyMapper: Mappers.DedicatedHost
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUpdateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}/hosts/{hostName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.hostGroupName,
    Parameters.hostName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.DedicatedHostUpdate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedHost
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}/hosts/{hostName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.hostGroupName,
    Parameters.hostName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByHostGroupNextOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedHostListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
