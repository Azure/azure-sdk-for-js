/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/cloudServiceRoleInstancesMappers";
import * as Parameters from "../models/parameters";
import { ComputeManagementClientContext } from "../computeManagementClientContext";

/** Class representing a CloudServiceRoleInstances. */
export class CloudServiceRoleInstances {
  private readonly client: ComputeManagementClientContext;

  /**
   * Create a CloudServiceRoleInstances.
   * @param {ComputeManagementClientContext} client Reference to the service client.
   */
  constructor(client: ComputeManagementClientContext) {
    this.client = client;
  }

  /**
   * Deletes a role instance from a cloud service.
   * @param roleInstanceName Name of the role instance.
   * @param resourceGroupName
   * @param cloudServiceName
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(roleInstanceName,resourceGroupName,cloudServiceName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Gets a role instance from a cloud service.
   * @param roleInstanceName Name of the role instance.
   * @param resourceGroupName
   * @param cloudServiceName
   * @param [options] The optional parameters
   * @returns Promise<Models.CloudServiceRoleInstancesGetResponse>
   */
  get(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options?: Models.CloudServiceRoleInstancesGetOptionalParams): Promise<Models.CloudServiceRoleInstancesGetResponse>;
  /**
   * @param roleInstanceName Name of the role instance.
   * @param resourceGroupName
   * @param cloudServiceName
   * @param callback The callback
   */
  get(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, callback: msRest.ServiceCallback<Models.RoleInstance>): void;
  /**
   * @param roleInstanceName Name of the role instance.
   * @param resourceGroupName
   * @param cloudServiceName
   * @param options The optional parameters
   * @param callback The callback
   */
  get(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options: Models.CloudServiceRoleInstancesGetOptionalParams, callback: msRest.ServiceCallback<Models.RoleInstance>): void;
  get(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options?: Models.CloudServiceRoleInstancesGetOptionalParams | msRest.ServiceCallback<Models.RoleInstance>, callback?: msRest.ServiceCallback<Models.RoleInstance>): Promise<Models.CloudServiceRoleInstancesGetResponse> {
    return this.client.sendOperationRequest(
      {
        roleInstanceName,
        resourceGroupName,
        cloudServiceName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.CloudServiceRoleInstancesGetResponse>;
  }

  /**
   * Retrieves information about the run-time state of a role instance in a cloud service.
   * @param roleInstanceName Name of the role instance.
   * @param resourceGroupName
   * @param cloudServiceName
   * @param [options] The optional parameters
   * @returns Promise<Models.CloudServiceRoleInstancesGetInstanceViewResponse>
   */
  getInstanceView(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options?: msRest.RequestOptionsBase): Promise<Models.CloudServiceRoleInstancesGetInstanceViewResponse>;
  /**
   * @param roleInstanceName Name of the role instance.
   * @param resourceGroupName
   * @param cloudServiceName
   * @param callback The callback
   */
  getInstanceView(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, callback: msRest.ServiceCallback<Models.RoleInstanceInstanceView>): void;
  /**
   * @param roleInstanceName Name of the role instance.
   * @param resourceGroupName
   * @param cloudServiceName
   * @param options The optional parameters
   * @param callback The callback
   */
  getInstanceView(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RoleInstanceInstanceView>): void;
  getInstanceView(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RoleInstanceInstanceView>, callback?: msRest.ServiceCallback<Models.RoleInstanceInstanceView>): Promise<Models.CloudServiceRoleInstancesGetInstanceViewResponse> {
    return this.client.sendOperationRequest(
      {
        roleInstanceName,
        resourceGroupName,
        cloudServiceName,
        options
      },
      getInstanceViewOperationSpec,
      callback) as Promise<Models.CloudServiceRoleInstancesGetInstanceViewResponse>;
  }

  /**
   * Gets the list of all role instances in a cloud service. Use nextLink property in the response to
   * get the next page of role instances. Do this till nextLink is null to fetch all the role
   * instances.
   * @param resourceGroupName
   * @param cloudServiceName
   * @param [options] The optional parameters
   * @returns Promise<Models.CloudServiceRoleInstancesListResponse>
   */
  list(resourceGroupName: string, cloudServiceName: string, options?: Models.CloudServiceRoleInstancesListOptionalParams): Promise<Models.CloudServiceRoleInstancesListResponse>;
  /**
   * @param resourceGroupName
   * @param cloudServiceName
   * @param callback The callback
   */
  list(resourceGroupName: string, cloudServiceName: string, callback: msRest.ServiceCallback<Models.RoleInstanceListResult>): void;
  /**
   * @param resourceGroupName
   * @param cloudServiceName
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, cloudServiceName: string, options: Models.CloudServiceRoleInstancesListOptionalParams, callback: msRest.ServiceCallback<Models.RoleInstanceListResult>): void;
  list(resourceGroupName: string, cloudServiceName: string, options?: Models.CloudServiceRoleInstancesListOptionalParams | msRest.ServiceCallback<Models.RoleInstanceListResult>, callback?: msRest.ServiceCallback<Models.RoleInstanceListResult>): Promise<Models.CloudServiceRoleInstancesListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        cloudServiceName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.CloudServiceRoleInstancesListResponse>;
  }

  /**
   * The Reboot Role Instance asynchronous operation requests a reboot of a role instance in the
   * cloud service.
   * @param roleInstanceName Name of the role instance.
   * @param resourceGroupName
   * @param cloudServiceName
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  restart(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginRestart(roleInstanceName,resourceGroupName,cloudServiceName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * The Reimage Role Instance asynchronous operation reinstalls the operating system on instances of
   * web roles or worker roles.
   * @param roleInstanceName Name of the role instance.
   * @param resourceGroupName
   * @param cloudServiceName
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  reimage(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginReimage(roleInstanceName,resourceGroupName,cloudServiceName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * The Rebuild Role Instance asynchronous operation reinstalls the operating system on instances of
   * web roles or worker roles and initializes the storage resources that are used by them. If you do
   * not want to initialize storage resources, you can use Reimage Role Instance.
   * @param roleInstanceName Name of the role instance.
   * @param resourceGroupName
   * @param cloudServiceName
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  rebuild(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginRebuild(roleInstanceName,resourceGroupName,cloudServiceName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Gets a remote desktop file for a role instance in a cloud service.
   * @param roleInstanceName Name of the role instance.
   * @param resourceGroupName
   * @param cloudServiceName
   * @param [options] The optional parameters
   * @returns Promise<Models.CloudServiceRoleInstancesGetRemoteDesktopFileResponse>
   */
  getRemoteDesktopFile(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options?: msRest.RequestOptionsBase): Promise<Models.CloudServiceRoleInstancesGetRemoteDesktopFileResponse>;
  /**
   * @param roleInstanceName Name of the role instance.
   * @param resourceGroupName
   * @param cloudServiceName
   * @param callback The callback
   */
  getRemoteDesktopFile(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param roleInstanceName Name of the role instance.
   * @param resourceGroupName
   * @param cloudServiceName
   * @param options The optional parameters
   * @param callback The callback
   */
  getRemoteDesktopFile(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  getRemoteDesktopFile(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.CloudServiceRoleInstancesGetRemoteDesktopFileResponse> {
    return this.client.sendOperationRequest(
      {
        roleInstanceName,
        resourceGroupName,
        cloudServiceName,
        options
      },
      getRemoteDesktopFileOperationSpec,
      callback) as Promise<Models.CloudServiceRoleInstancesGetRemoteDesktopFileResponse>;
  }

  /**
   * Deletes a role instance from a cloud service.
   * @param roleInstanceName Name of the role instance.
   * @param resourceGroupName
   * @param cloudServiceName
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        roleInstanceName,
        resourceGroupName,
        cloudServiceName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * The Reboot Role Instance asynchronous operation requests a reboot of a role instance in the
   * cloud service.
   * @param roleInstanceName Name of the role instance.
   * @param resourceGroupName
   * @param cloudServiceName
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginRestart(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        roleInstanceName,
        resourceGroupName,
        cloudServiceName,
        options
      },
      beginRestartOperationSpec,
      options);
  }

  /**
   * The Reimage Role Instance asynchronous operation reinstalls the operating system on instances of
   * web roles or worker roles.
   * @param roleInstanceName Name of the role instance.
   * @param resourceGroupName
   * @param cloudServiceName
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginReimage(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        roleInstanceName,
        resourceGroupName,
        cloudServiceName,
        options
      },
      beginReimageOperationSpec,
      options);
  }

  /**
   * The Rebuild Role Instance asynchronous operation reinstalls the operating system on instances of
   * web roles or worker roles and initializes the storage resources that are used by them. If you do
   * not want to initialize storage resources, you can use Reimage Role Instance.
   * @param roleInstanceName Name of the role instance.
   * @param resourceGroupName
   * @param cloudServiceName
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginRebuild(roleInstanceName: string, resourceGroupName: string, cloudServiceName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        roleInstanceName,
        resourceGroupName,
        cloudServiceName,
        options
      },
      beginRebuildOperationSpec,
      options);
  }

  /**
   * Gets the list of all role instances in a cloud service. Use nextLink property in the response to
   * get the next page of role instances. Do this till nextLink is null to fetch all the role
   * instances.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.CloudServiceRoleInstancesListNextResponse>
   */
  listNext(nextPageLink: string, options?: Models.CloudServiceRoleInstancesListNextOptionalParams): Promise<Models.CloudServiceRoleInstancesListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.RoleInstanceListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: Models.CloudServiceRoleInstancesListNextOptionalParams, callback: msRest.ServiceCallback<Models.RoleInstanceListResult>): void;
  listNext(nextPageLink: string, options?: Models.CloudServiceRoleInstancesListNextOptionalParams | msRest.ServiceCallback<Models.RoleInstanceListResult>, callback?: msRest.ServiceCallback<Models.RoleInstanceListResult>): Promise<Models.CloudServiceRoleInstancesListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.CloudServiceRoleInstancesListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}",
  urlParameters: [
    Parameters.roleInstanceName,
    Parameters.resourceGroupName,
    Parameters.cloudServiceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion3,
    Parameters.expand1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RoleInstance
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getInstanceViewOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/instanceView",
  urlParameters: [
    Parameters.roleInstanceName,
    Parameters.resourceGroupName,
    Parameters.cloudServiceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion3
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RoleInstanceInstanceView
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.cloudServiceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion3,
    Parameters.expand1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RoleInstanceListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getRemoteDesktopFileOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/remoteDesktopFile",
  urlParameters: [
    Parameters.roleInstanceName,
    Parameters.resourceGroupName,
    Parameters.cloudServiceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion3
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}",
  urlParameters: [
    Parameters.roleInstanceName,
    Parameters.resourceGroupName,
    Parameters.cloudServiceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion3
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginRestartOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/restart",
  urlParameters: [
    Parameters.roleInstanceName,
    Parameters.resourceGroupName,
    Parameters.cloudServiceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion3
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginReimageOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/reimage",
  urlParameters: [
    Parameters.roleInstanceName,
    Parameters.resourceGroupName,
    Parameters.cloudServiceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion3
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginRebuildOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/rebuild",
  urlParameters: [
    Parameters.roleInstanceName,
    Parameters.resourceGroupName,
    Parameters.cloudServiceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion3
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion3,
    Parameters.expand1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RoleInstanceListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
