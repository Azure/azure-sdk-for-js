/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import type * as coreClient from "@azure/core-client";

/** The List Galleries operation response. */
export interface GalleryList {
  /** A list of galleries. */
  value: Gallery[];
  /** The uri to fetch the next page of galleries. Call ListNext() with this to fetch the next page of galleries. */
  nextLink?: string;
  /** The security profile of a gallery image version */
  securityProfile?: ImageVersionSecurityProfile;
}

/** Describes the gallery unique name. */
export interface GalleryIdentifier {
  /**
   * The unique name of the Shared Image Gallery. This name is generated automatically by Azure.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueName?: string;
}

/** Profile for gallery sharing to subscription or tenant */
export interface SharingProfile {
  /** This property allows you to specify the permission of sharing gallery. Possible values are: **Private,** **Groups,** **Community.** */
  permissions?: GallerySharingPermissionTypes;
  /**
   * A list of sharing profile groups.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly groups?: SharingProfileGroup[];
  /** Information of community gallery if current gallery is shared to community. */
  communityGalleryInfo?: CommunityGalleryInfo;
}

/** Group of the gallery sharing profile */
export interface SharingProfileGroup {
  /** This property allows you to specify the type of sharing group. Possible values are: **Subscriptions,** **AADTenants.** */
  type?: SharingProfileGroupTypes;
  /** A list of subscription/tenant ids the gallery is aimed to be shared to. */
  ids?: string[];
}

/** Information of community gallery if current gallery is shared to community */
export interface CommunityGalleryInfo {
  /** The link to the publisher website. Visible to all users. */
  publisherUri?: string;
  /** Community gallery publisher support email. The email address of the publisher. Visible to all users. */
  publisherContact?: string;
  /** End-user license agreement for community gallery image. */
  eula?: string;
  /** The prefix of the gallery name that will be displayed publicly. Visible to all users. */
  publicNamePrefix?: string;
  /**
   * Contains info about whether community gallery sharing is enabled.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly communityGalleryEnabled?: boolean;
  /**
   * Community gallery public name list.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly publicNames?: string[];
}

/** Contains information about the soft deletion policy of the gallery. */
export interface SoftDeletePolicy {
  /** Enables soft-deletion for resources in this gallery, allowing them to be recovered within retention time. */
  isSoftDeleteEnabled?: boolean;
}

/** Sharing status of current gallery. */
export interface SharingStatus {
  /**
   * Aggregated sharing state of current gallery.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly aggregatedState?: SharingState;
  /** Summary of all regional sharing status. */
  summary?: RegionalSharingStatus[];
}

/** Gallery regional sharing status */
export interface RegionalSharingStatus {
  /** Region name */
  region?: string;
  /**
   * Gallery sharing state in current region
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: SharingState;
  /** Details of gallery regional sharing failure. */
  details?: string;
}

/** Identity for the virtual machine. */
export interface GalleryIdentity {
  /**
   * The principal id of the gallery identity. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The AAD tenant id of the gallery identity. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** The type of identity used for the gallery. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove all identities from the gallery. */
  type?: ResourceIdentityType;
  /** The list of user identities associated with the gallery. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'. */
  userAssignedIdentities?: {
    [propertyName: string]: UserAssignedIdentitiesValue;
  };
}

export interface UserAssignedIdentitiesValue {
  /**
   * The principal id of user assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The client id of user assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clientId?: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** The security profile of a gallery image version */
export interface ImageVersionSecurityProfile {
  /** Contains UEFI settings for the image version. */
  uefiSettings?: GalleryImageVersionUefiSettings;
}

/** Contains UEFI settings for the image version. */
export interface GalleryImageVersionUefiSettings {
  /** The name of the template(s) that contains default UEFI key signatures that will be added to the image. */
  signatureTemplateNames?: UefiSignatureTemplateName[];
  /** Additional UEFI key signatures that will be added to the image in addition to the signature templates */
  additionalSignatures?: UefiKeySignatures;
}

/** Additional UEFI key signatures that will be added to the image in addition to the signature templates */
export interface UefiKeySignatures {
  /** The Platform Key of this image version. */
  pk?: UefiKey;
  /** The Key Encryption Keys of this image version. */
  kek?: UefiKey[];
  /** The database of UEFI keys for this image version. */
  db?: UefiKey[];
  /** The database of revoked UEFI keys for this image version. */
  dbx?: UefiKey[];
}

/** A UEFI key signature. */
export interface UefiKey {
  /** The type of key signature. */
  type?: UefiKeyType;
  /** The value of the key signature. */
  value?: string[];
}

/** An error response from the Compute service. */
export interface CloudError {
  /** Api error. */
  error?: ApiError;
}

/** Api error. */
export interface ApiError {
  /** The Api error details */
  details?: ApiErrorBase[];
  /** The Api inner error */
  innererror?: InnerError;
  /** The error code. */
  code?: string;
  /** The target of the particular error. */
  target?: string;
  /** The error message. */
  message?: string;
}

/** Api error base. */
export interface ApiErrorBase {
  /** The error code. */
  code?: string;
  /** The target of the particular error. */
  target?: string;
  /** The error message. */
  message?: string;
}

/** Inner error details. */
export interface InnerError {
  /** The exception type. */
  exceptiontype?: string;
  /** The internal error message or exception dump. */
  errordetail?: string;
}

/** The metadata of community gallery. */
export interface CommunityGalleryMetadata {
  /** The publisher URI of this community gallery. */
  publisherUri?: string;
  /** The publisher email id of this community gallery. */
  publisherContact: string;
  /** The end-user license agreement for this community gallery. */
  eula?: string;
  /** A list of public names the gallery has. */
  publicNames: string[];
  /** The link for the privacy statement of this community gallery from the gallery publisher. */
  privacyStatementUri?: string;
}

/** Base information about the community gallery resource in azure compute gallery. */
export interface PirCommunityGalleryResource {
  /**
   * Resource name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Resource location
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly location?: string;
  /**
   * Resource type
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** The unique id of this community gallery. */
  uniqueId?: string;
}

/** The List Community Gallery Images operation response. */
export interface CommunityGalleryImageList {
  /** A list of community gallery images. */
  value: CommunityGalleryImage[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** This is the community gallery image definition identifier. */
export interface CommunityGalleryImageIdentifier {
  /** The name of the gallery image definition publisher. */
  publisher?: string;
  /** The name of the gallery image definition offer. */
  offer?: string;
  /** The name of the gallery image definition SKU. */
  sku?: string;
}

/** The properties describe the recommended machine configuration for this Image Definition. These properties are updatable. */
export interface RecommendedMachineConfiguration {
  /** Describes the resource range. */
  vCPUs?: ResourceRange;
  /** Describes the resource range. */
  memory?: ResourceRange;
}

/** Describes the resource range. */
export interface ResourceRange {
  /** The minimum number of the resource. */
  min?: number;
  /** The maximum number of the resource. */
  max?: number;
}

/** Describes the disallowed disk types. */
export interface Disallowed {
  /** A list of disk types. */
  diskTypes?: string[];
}

/** A feature for gallery image. */
export interface GalleryImageFeature {
  /** The name of the gallery image feature. */
  name?: string;
  /** The value of the gallery image feature. */
  value?: string;
  /** The minimum gallery image version which supports this feature. */
  startsAtVersion?: string;
}

/** Describes the gallery image definition purchase plan. This is used by marketplace images. */
export interface ImagePurchasePlan {
  /** The plan ID. */
  name?: string;
  /** The publisher ID. */
  publisher?: string;
  /** The product ID. */
  product?: string;
}

/** The List Community Gallery Image versions operation response. */
export interface CommunityGalleryImageVersionList {
  /** A list of community gallery image versions. */
  value: CommunityGalleryImageVersion[];
  /** The URI to fetch the next page of community gallery image versions. Call ListNext() with this to fetch the next page of community gallery image versions. */
  nextLink?: string;
}

/** This is the storage profile of a Gallery Image Version. */
export interface SharedGalleryImageVersionStorageProfile {
  /** This is the OS disk image. */
  osDiskImage?: SharedGalleryOSDiskImage;
  /** A list of data disk images. */
  dataDiskImages?: SharedGalleryDataDiskImage[];
}

/** This is the disk image base class. */
export interface SharedGalleryDiskImage {
  /**
   * This property indicates the size of the VHD to be created.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly diskSizeGB?: number;
  /** The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite' */
  hostCaching?: SharedGalleryHostCaching;
}

/** The List Shared Galleries operation response. */
export interface SharedGalleryList {
  /** A list of shared galleries. */
  value: SharedGallery[];
  /** The uri to fetch the next page of shared galleries. Call ListNext() with this to fetch the next page of shared galleries. */
  nextLink?: string;
}

/** The Resource model definition. */
export interface PirResource {
  /**
   * Resource name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Resource location
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly location?: string;
}

/** The List Shared Gallery Images operation response. */
export interface SharedGalleryImageList {
  /** A list of shared gallery images. */
  value: SharedGalleryImage[];
  /** The uri to fetch the next page of shared gallery images. Call ListNext() with this to fetch the next page of shared gallery images. */
  nextLink?: string;
}

/** This is the gallery image definition identifier. */
export interface GalleryImageIdentifier {
  /** The name of the gallery image definition publisher. */
  publisher: string;
  /** The name of the gallery image definition offer. */
  offer: string;
  /** The name of the gallery image definition SKU. */
  sku: string;
}

/** The List Shared Gallery Image versions operation response. */
export interface SharedGalleryImageVersionList {
  /** The SharedGalleryImageVersion items on this page */
  value: SharedGalleryImageVersion[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The Update Resource model definition. */
export interface UpdateResourceDefinition {
  /**
   * Resource Id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Resource name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Resource type
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Resource tags */
  tags?: { [propertyName: string]: string };
}

/** The List Gallery Applications operation response. */
export interface GalleryApplicationList {
  /** The GalleryApplication items on this page */
  value: GalleryApplication[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** A custom action that can be performed with a Gallery Application Version. */
export interface GalleryApplicationCustomAction {
  /** The name of the custom action.  Must be unique within the Gallery Application Version. */
  name: string;
  /** The script to run when executing this custom action. */
  script: string;
  /** Description to help the users understand what this custom action does. */
  description?: string;
  /** The parameters that this custom action uses */
  parameters?: GalleryApplicationCustomActionParameter[];
}

/** The definition of a parameter that can be passed to a custom action of a Gallery Application Version. */
export interface GalleryApplicationCustomActionParameter {
  /** The name of the custom action.  Must be unique within the Gallery Application Version. */
  name: string;
  /** Indicates whether this parameter must be passed when running the custom action. */
  required?: boolean;
  /** Specifies the type of the custom action parameter. Possible values are: String, ConfigurationDataBlob or LogOutputBlob */
  type?: GalleryApplicationCustomActionParameterType;
  /** The default value of the parameter.  Only applies to string types */
  defaultValue?: string;
  /** A description to help users understand what this parameter means */
  description?: string;
}

/** The List Gallery Application version operation response. */
export interface GalleryApplicationVersionList {
  /** A list of gallery Application Versions. */
  value: GalleryApplicationVersion[];
  /** The uri to fetch the next page of gallery Application Versions. Call ListNext() with this to fetch the next page of gallery Application Versions. */
  nextLink?: string;
}

/** The source image from which the Image Version is going to be created. */
export interface UserArtifactSource {
  /** Required. The mediaLink of the artifact, must be a readable storage page blob. */
  mediaLink: string;
  /** Optional. The defaultConfigurationLink of the artifact, must be a readable storage page blob. */
  defaultConfigurationLink?: string;
}

export interface UserArtifactManage {
  /** Required. The path and arguments to install the gallery application. This is limited to 4096 characters. */
  install: string;
  /** Required. The path and arguments to remove the gallery application. This is limited to 4096 characters. */
  remove: string;
  /** Optional. The path and arguments to update the gallery application. If not present, then update operation will invoke remove command on the previous version and install command on the current version of the gallery application. This is limited to 4096 characters. */
  update?: string;
}

/** Additional settings for the VM app that contains the target package and config file name when it is deployed to target VM or VM scale set. */
export interface UserArtifactSettings {
  /** Optional. The name to assign the downloaded package file on the VM. This is limited to 4096 characters. If not specified, the package file will be named the same as the Gallery Application name. */
  packageFileName?: string;
  /** Optional. The name to assign the downloaded config file on the VM. This is limited to 4096 characters. If not specified, the config file will be named the Gallery Application name appended with "_config". */
  configFileName?: string;
  /** Optional. The action to be taken with regards to install/update/remove of the gallery application in the event of a reboot. */
  scriptBehaviorAfterReboot?: GalleryApplicationScriptRebootBehavior;
}

/** Describes the basic gallery artifact publishing profile. */
export interface GalleryArtifactPublishingProfileBase {
  /** The target regions where the Image Version is going to be replicated to. This property is updatable. */
  targetRegions?: TargetRegion[];
  /** The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable. */
  replicaCount?: number;
  /** If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version. */
  excludeFromLatest?: boolean;
  /**
   * The timestamp for when the gallery image version is published.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly publishedDate?: Date;
  /** The end of life date of the gallery image version. This property can be used for decommissioning purposes. This property is updatable. */
  endOfLifeDate?: Date;
  /** Specifies the storage account type to be used to store the image. This property is not updatable. */
  storageAccountType?: StorageAccountType;
  /** Optional parameter which specifies the mode to be used for replication. This property is not updatable. */
  replicationMode?: ReplicationMode;
  /** The target extended locations where the Image Version is going to be replicated to. This property is updatable. */
  targetExtendedLocations?: GalleryTargetExtendedLocation[];
}

/** Describes the target region information. */
export interface TargetRegion {
  /** The name of the region. */
  name: string;
  /** The number of replicas of the Image Version to be created per region. This property is updatable. */
  regionalReplicaCount?: number;
  /** Specifies the storage account type to be used to store the image. This property is not updatable. */
  storageAccountType?: StorageAccountType;
  /** Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact. */
  encryption?: EncryptionImages;
  /** Contains the flag setting to hide an image when users specify version='latest' */
  excludeFromLatest?: boolean;
  /** List of storage sku with replica count to create direct drive replicas. */
  additionalReplicaSets?: AdditionalReplicaSet[];
}

/** Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact. */
export interface EncryptionImages {
  /** Contains encryption settings for an OS disk image. */
  osDiskImage?: OSDiskImageEncryption;
  /** A list of encryption specifications for data disk images. */
  dataDiskImages?: DataDiskImageEncryption[];
}

/** Contains security profile for an OS disk image. */
export interface OSDiskImageSecurityProfile {
  /** confidential VM encryption types */
  confidentialVMEncryptionType?: ConfidentialVMEncryptionType;
  /** secure VM disk encryption set id */
  secureVMDiskEncryptionSetId?: string;
}

/** This is the disk image encryption base class. */
export interface DiskImageEncryption {
  /** A relative URI containing the resource ID of the disk encryption set. */
  diskEncryptionSetId?: string;
}

/** Describes the additional replica set information. */
export interface AdditionalReplicaSet {
  /** Specifies the storage account type to be used to create the direct drive replicas */
  storageAccountType?: StorageAccountType;
  /** The number of direct drive replicas of the Image Version to be created.This Property is updatable */
  regionalReplicaCount?: number;
}

export interface GalleryTargetExtendedLocation {
  /** The name of the region. */
  name?: string;
  /** The name of the extended location. */
  extendedLocation?: GalleryExtendedLocation;
  /** The number of replicas of the Image Version to be created per extended location. This property is updatable. */
  extendedLocationReplicaCount?: number;
  /** Specifies the storage account type to be used to store the image. This property is not updatable. */
  storageAccountType?: EdgeZoneStorageAccountType;
  /** Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact. */
  encryption?: EncryptionImages;
}

/** The name of the extended location. */
export interface GalleryExtendedLocation {
  name?: string;
  /** It is type of the extended location. */
  type?: GalleryExtendedLocationType;
}

/** This is the safety profile of the Gallery Artifact Version. */
export interface GalleryArtifactSafetyProfileBase {
  /** Indicates whether or not removing this Gallery Image Version from replicated regions is allowed. */
  allowDeletionOfReplicatedLocations?: boolean;
}

/** This is the replication status of the gallery image version. */
export interface ReplicationStatus {
  /**
   * This is the aggregated replication status based on all the regional replication status flags.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly aggregatedState?: AggregatedReplicationState;
  /**
   * This is a summary of replication status for each region.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly summary?: RegionalReplicationStatus[];
}

/** This is the regional replication status. */
export interface RegionalReplicationStatus {
  /**
   * The region to which the gallery image version is being replicated to.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly region?: string;
  /**
   * This is the regional replication state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: ReplicationState;
  /**
   * The details of the replication status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: string;
  /**
   * It indicates progress of the replication job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly progress?: number;
}

/** The List Gallery Images operation response. */
export interface GalleryImageList {
  /** A list of Shared Image Gallery images. */
  value: GalleryImage[];
  /** The uri to fetch the next page of Image Definitions in the Shared Image Gallery. Call ListNext() with this to fetch the next page of gallery image definitions. */
  nextLink?: string;
}

/** The List Gallery Image version operation response. */
export interface GalleryImageVersionList {
  /** A list of gallery image versions. */
  value: GalleryImageVersion[];
  /** The uri to fetch the next page of gallery image versions. Call ListNext() with this to fetch the next page of gallery image versions. */
  nextLink?: string;
}

/** This is the storage profile of a Gallery Image Version. */
export interface GalleryImageVersionStorageProfile {
  /** The source of the gallery artifact version. */
  source?: GalleryArtifactVersionFullSource;
  /** This is the OS disk image. */
  osDiskImage?: GalleryOSDiskImage;
  /** A list of data disk images. */
  dataDiskImages?: GalleryDataDiskImage[];
}

/** The gallery artifact version source. */
export interface GalleryArtifactVersionSource {
  /** The id of the gallery artifact version source. */
  id?: string;
}

/** This is the disk image base class. */
export interface GalleryDiskImage {
  /**
   * This property indicates the size of the VHD to be created.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sizeInGB?: number;
  /** The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite' */
  hostCaching?: HostCaching;
  /** The source for the disk image. */
  source?: GalleryDiskImageSource;
}

/** A policy violation reported against a gallery artifact. */
export interface PolicyViolation {
  /** Describes the nature of the policy violation. */
  category?: PolicyViolationCategory;
  /** Describes specific details about why this policy violation was reported. */
  details?: string;
}

/** This is the validations profile of a Gallery Image Version. */
export interface ValidationsProfile {
  /** The published time of the image version */
  validationEtag?: string;
  executedValidations?: ExecutedValidation[];
  /** This specifies the pub, offer, sku and version of the image version metadata */
  platformAttributes?: PlatformAttribute[];
}

/** This is the executed Validation. */
export interface ExecutedValidation {
  /** This property specifies the type of image version validation. */
  type?: string;
  /** This property specifies the status of the validationProfile of the image version. */
  status?: ValidationStatus;
  /** This property specifies the valid version of the validation. */
  version?: string;
  /** This property specifies the starting timestamp. */
  executionTime?: Date;
}

/** This is the platform attribute of the image version. */
export interface PlatformAttribute {
  /**
   * This property specifies the name of the platformAttribute. It is read-only.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * This property specifies the value of the corresponding name property. It is read-only.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: string;
}

/** The List Gallery InVMAccessControlProfiles operation response. */
export interface GalleryInVMAccessControlProfileList {
  /** The GalleryInVMAccessControlProfile items on this page */
  value: GalleryInVMAccessControlProfile[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The properties of a gallery ResourceProfile. */
export interface GalleryResourceProfilePropertiesBase {
  /**
   * The provisioning state, which only appears in the response.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: GalleryProvisioningState;
}

/** The List Gallery InVMAccessControlProfile Versions operation response. */
export interface GalleryInVMAccessControlProfileVersionList {
  /** The GalleryInVMAccessControlProfileVersion items on this page */
  value: GalleryInVMAccessControlProfileVersion[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** This is the Access Control Rules specification for an inVMAccessControlProfile version. */
export interface AccessControlRules {
  /** A list of privileges. */
  privileges?: AccessControlRulesPrivilege[];
  /** A list of roles. */
  roles?: AccessControlRulesRole[];
  /** A list of identities. */
  identities?: AccessControlRulesIdentity[];
  /** A list of role assignments. */
  roleAssignments?: AccessControlRulesRoleAssignment[];
}

/** The properties of an Access Control Rule Privilege. */
export interface AccessControlRulesPrivilege {
  /** The name of the privilege. */
  name: string;
  /** The HTTP path corresponding to the privilege. */
  path: string;
  /** The query parameters to match in the path. */
  queryParameters?: { [propertyName: string]: string };
}

/** The properties of an Access Control Rule Role. */
export interface AccessControlRulesRole {
  /** The name of the role. */
  name: string;
  /** A list of privileges needed by this role. */
  privileges: string[];
}

/** The properties of an Access Control Rule Identity. */
export interface AccessControlRulesIdentity {
  /** The name of the identity. */
  name: string;
  /** The username corresponding to this identity. */
  userName?: string;
  /** The groupName corresponding to this identity. */
  groupName?: string;
  /** The path to the executable. */
  exePath?: string;
  /** The process name of the executable. */
  processName?: string;
}

/** The properties of an Access Control Rule RoleAssignment. */
export interface AccessControlRulesRoleAssignment {
  /** The name of the role. */
  role: string;
  /** A list of identities that can access the privileges defined by the role. */
  identities: string[];
}

/** The properties of a gallery ResourceProfile version. */
export interface GalleryResourceProfileVersionPropertiesBase {
  /** The target regions where the Resource Profile version is going to be replicated to. This property is updatable. */
  targetLocations?: TargetRegion[];
  /** If set to true, Virtual Machines deployed from the latest version of the Resource Profile won't use this Profile version. */
  excludeFromLatest?: boolean;
  /**
   * The timestamp for when the Resource Profile Version is published.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly publishedDate?: Date;
  /**
   * The provisioning state, which only appears in the response.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: GalleryProvisioningState;
  /**
   * This is the replication status of the gallery image version.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly replicationStatus?: ReplicationStatus;
}

/** Specifies information about the gallery sharing profile update. */
export interface SharingUpdate {
  /** This property allows you to specify the operation type of gallery sharing update. Possible values are: **Add,** **Remove,** **Reset.** */
  operationType: SharingUpdateOperationTypes;
  /** A list of sharing profile groups. */
  groups?: SharingProfileGroup[];
}

/** The List Soft-deleted Resources operation response. */
export interface GallerySoftDeletedResourceList {
  /** The GallerySoftDeletedResource items on this page */
  value: GallerySoftDeletedResource[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export interface TrackedResource extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
}

/** Specifies information about the Community Gallery that you want to create or update. */
export interface CommunityGallery extends PirCommunityGalleryResource {
  /** The disclaimer for a community gallery resource. */
  disclaimer?: string;
  /** The artifact tags of a community gallery resource. */
  artifactTags?: { [propertyName: string]: string };
  /** The metadata of community gallery. */
  communityMetadata?: CommunityGalleryMetadata;
}

/** Specifies information about the gallery image definition that you want to create or update. */
export interface CommunityGalleryImage extends PirCommunityGalleryResource {
  /** This property allows you to specify the type of the OS that is included in the disk when creating a VM from a managed image. Possible values are: **Windows,** **Linux.** */
  osType?: OperatingSystemTypes;
  /** This property allows the user to specify whether the virtual machines created under this image are 'Generalized' or 'Specialized'. */
  osState?: OperatingSystemStateTypes;
  /** The end of life date of the gallery image definition. This property can be used for decommissioning purposes. This property is updatable. */
  endOfLifeDate?: Date;
  /** This is the community gallery image definition identifier. */
  identifier?: CommunityGalleryImageIdentifier;
  /** The properties describe the recommended machine configuration for this Image Definition. These properties are updatable. */
  recommended?: RecommendedMachineConfiguration;
  /** Describes the disallowed disk types. */
  disallowed?: Disallowed;
  /** The hypervisor generation of the Virtual Machine. Applicable to OS disks only. */
  hyperVGeneration?: HyperVGeneration;
  /** A list of gallery image features. */
  features?: GalleryImageFeature[];
  /** Describes the gallery image definition purchase plan. This is used by marketplace images. */
  purchasePlan?: ImagePurchasePlan;
  /** The architecture of the image. Applicable to OS disks only. */
  architecture?: Architecture;
  /** Privacy statement URI for the current community gallery image. */
  privacyStatementUri?: string;
  /** The end-user license agreement for the current community gallery image. */
  eula?: string;
  /** The disclaimer for a community gallery resource. */
  disclaimer?: string;
  /** The artifact tags of a community gallery resource. */
  artifactTags?: { [propertyName: string]: string };
}

/** Specifies information about the gallery image version that you want to create or update. */
export interface CommunityGalleryImageVersion
  extends PirCommunityGalleryResource {
  /** The published date of the gallery image version Definition. This property can be used for decommissioning purposes. This property is updatable. */
  publishedDate?: Date;
  /** The end of life date of the gallery image version Definition. This property can be used for decommissioning purposes. This property is updatable. */
  endOfLifeDate?: Date;
  /** If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version. */
  excludeFromLatest?: boolean;
  /** Describes the storage profile of the image version. */
  storageProfile?: SharedGalleryImageVersionStorageProfile;
  /** The disclaimer for a community gallery resource. */
  disclaimer?: string;
  /** The artifact tags of a community gallery resource. */
  artifactTags?: { [propertyName: string]: string };
}

/** This is the OS disk image. */
export interface SharedGalleryOSDiskImage extends SharedGalleryDiskImage {}

/** This is the data disk image. */
export interface SharedGalleryDataDiskImage extends SharedGalleryDiskImage {
  /** This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine. */
  lun: number;
}

/** Base information about the shared gallery resource in pir. */
export interface PirSharedGalleryResource extends PirResource {
  /** The unique id of this shared gallery. */
  uniqueId?: string;
}

/** Specifies information about the Shared Image Gallery that you want to update. */
export interface GalleryUpdate extends UpdateResourceDefinition {
  /** The identity of the gallery, if configured. */
  identity?: GalleryIdentity;
  /** The description of this Shared Image Gallery resource. This property is updatable. */
  description?: string;
  /** Describes the gallery unique name. */
  identifier?: GalleryIdentifier;
  /**
   * The provisioning state, which only appears in the response.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: GalleryProvisioningState;
  /** Profile for gallery sharing to subscription or tenant */
  sharingProfile?: SharingProfile;
  /** Contains information about the soft deletion policy of the gallery. */
  softDeletePolicy?: SoftDeletePolicy;
  /**
   * Sharing status of current gallery.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sharingStatus?: SharingStatus;
}

/** Specifies information about the gallery Application Definition that you want to update. */
export interface GalleryApplicationUpdate extends UpdateResourceDefinition {
  /** The description of this gallery Application Definition resource. This property is updatable. */
  description?: string;
  /** The Eula agreement for the gallery Application Definition. */
  eula?: string;
  /** The privacy statement uri. */
  privacyStatementUri?: string;
  /** The release note uri. */
  releaseNoteUri?: string;
  /** The end of life date of the gallery Application Definition. This property can be used for decommissioning purposes. This property is updatable. */
  endOfLifeDate?: Date;
  /** This property allows you to specify the supported type of the OS that application is built for. Possible values are: **Windows,** **Linux.** */
  supportedOSType?: OperatingSystemTypes;
  /** A list of custom actions that can be performed with all of the Gallery Application Versions within this Gallery Application. */
  customActions?: GalleryApplicationCustomAction[];
}

/** Specifies information about the gallery Application Version that you want to update. */
export interface GalleryApplicationVersionUpdate
  extends UpdateResourceDefinition {
  /** The publishing profile of a gallery image version. */
  publishingProfile?: GalleryApplicationVersionPublishingProfile;
  /** The safety profile of the Gallery Application Version. */
  safetyProfile?: GalleryApplicationVersionSafetyProfile;
  /**
   * The provisioning state, which only appears in the response.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: GalleryProvisioningState;
  /**
   * This is the replication status of the gallery image version.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly replicationStatus?: ReplicationStatus;
}

/** Specifies information about the gallery image definition that you want to update. */
export interface GalleryImageUpdate extends UpdateResourceDefinition {
  /** The description of this gallery image definition resource. This property is updatable. */
  description?: string;
  /** The Eula agreement for the gallery image definition. */
  eula?: string;
  /** The privacy statement uri. */
  privacyStatementUri?: string;
  /** The release note uri. */
  releaseNoteUri?: string;
  /** This property allows you to specify the type of the OS that is included in the disk when creating a VM from a managed image. Possible values are: **Windows,** **Linux.** */
  osType?: OperatingSystemTypes;
  /** This property allows the user to specify whether the virtual machines created under this image are 'Generalized' or 'Specialized'. */
  osState?: OperatingSystemStateTypes;
  /** The hypervisor generation of the Virtual Machine. Applicable to OS disks only. */
  hyperVGeneration?: HyperVGeneration;
  /** The end of life date of the gallery image definition. This property can be used for decommissioning purposes. This property is updatable. */
  endOfLifeDate?: Date;
  /** This is the gallery image definition identifier. */
  identifier?: GalleryImageIdentifier;
  /** The properties describe the recommended machine configuration for this Image Definition. These properties are updatable. */
  recommended?: RecommendedMachineConfiguration;
  /** Describes the disallowed disk types. */
  disallowed?: Disallowed;
  /** Describes the gallery image definition purchase plan. This is used by marketplace images. */
  purchasePlan?: ImagePurchasePlan;
  /**
   * The provisioning state, which only appears in the response.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: GalleryProvisioningState;
  /** A list of gallery image features. */
  features?: GalleryImageFeature[];
  /** The architecture of the image. Applicable to OS disks only. */
  architecture?: Architecture;
  /** Optional. Must be set to true if the gallery image features are being updated. */
  allowUpdateImage?: boolean;
}

/** Specifies information about the gallery image version that you want to update. */
export interface GalleryImageVersionUpdate extends UpdateResourceDefinition {
  /** The publishing profile of a gallery image Version. */
  publishingProfile?: GalleryImageVersionPublishingProfile;
  /**
   * The provisioning state, which only appears in the response.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: GalleryProvisioningState;
  /** This is the storage profile of a Gallery Image Version. */
  storageProfile?: GalleryImageVersionStorageProfile;
  /** This is the safety profile of the Gallery Image Version. */
  safetyProfile?: GalleryImageVersionSafetyProfile;
  /**
   * This is the replication status of the gallery image version.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly replicationStatus?: ReplicationStatus;
  /** The security profile of a gallery image version */
  securityProfile?: ImageVersionSecurityProfile;
  /** Indicates if this is a soft-delete resource restoration request. */
  restore?: boolean;
  /**
   * This is the validations profile of a Gallery Image Version.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationsProfile?: ValidationsProfile;
}

/** Specifies information about the gallery inVMAccessControlProfile that you want to update. */
export interface GalleryInVMAccessControlProfileUpdate
  extends UpdateResourceDefinition {
  /** Describes the properties of a gallery inVMAccessControlProfile. */
  properties?: GalleryInVMAccessControlProfileProperties;
}

/** Specifies information about the gallery inVMAccessControlProfile version that you want to update. */
export interface GalleryInVMAccessControlProfileVersionUpdate
  extends UpdateResourceDefinition {
  /** The target regions where the Resource Profile version is going to be replicated to. This property is updatable. */
  targetLocations?: TargetRegion[];
  /** If set to true, Virtual Machines deployed from the latest version of the Resource Profile won't use this Profile version. */
  excludeFromLatest?: boolean;
  /**
   * The timestamp for when the Resource Profile Version is published.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly publishedDate?: Date;
  /**
   * The provisioning state, which only appears in the response.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: GalleryProvisioningState;
  /**
   * This is the replication status of the gallery image version.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly replicationStatus?: ReplicationStatus;
  /** This property allows you to specify whether the access control rules are in Audit mode, in Enforce mode or Disabled. Possible values are: 'Audit', 'Enforce' or 'Disabled'. */
  mode?: AccessControlRulesMode;
  /** This property allows you to specify if the requests will be allowed to access the host endpoints. Possible values are: 'Allow', 'Deny'. */
  defaultAccess?: EndpointAccess;
  /** This is the Access Control Rules specification for an inVMAccessControlProfile version. */
  rules?: AccessControlRules;
}

/** The publishing profile of a gallery image version. */
export interface GalleryApplicationVersionPublishingProfile
  extends GalleryArtifactPublishingProfileBase {
  /** The source image from which the Image Version is going to be created. */
  source: UserArtifactSource;
  manageActions?: UserArtifactManage;
  /** Additional settings for the VM app that contains the target package and config file name when it is deployed to target VM or VM scale set. */
  settings?: UserArtifactSettings;
  /** Optional. Additional settings to pass to the vm-application-manager extension. For advanced use only. */
  advancedSettings?: { [propertyName: string]: string };
  /** Optional. Whether or not this application reports health. */
  enableHealthCheck?: boolean;
  /** A list of custom actions that can be performed with this Gallery Application Version. */
  customActions?: GalleryApplicationCustomAction[];
}

/** The publishing profile of a gallery image Version. */
export interface GalleryImageVersionPublishingProfile
  extends GalleryArtifactPublishingProfileBase {}

/** Contains encryption settings for an OS disk image. */
export interface OSDiskImageEncryption extends DiskImageEncryption {
  /** This property specifies the security profile of an OS disk image. */
  securityProfile?: OSDiskImageSecurityProfile;
}

/** Contains encryption settings for a data disk image. */
export interface DataDiskImageEncryption extends DiskImageEncryption {
  /** This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine. */
  lun: number;
}

/** The safety profile of the Gallery Application Version. */
export interface GalleryApplicationVersionSafetyProfile
  extends GalleryArtifactSafetyProfileBase {}

/** This is the safety profile of the Gallery Image Version. */
export interface GalleryImageVersionSafetyProfile
  extends GalleryArtifactSafetyProfileBase {
  /**
   * Indicates whether this image has been reported as violating Microsoft's policies.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly reportedForPolicyViolation?: boolean;
  /**
   * A list of Policy Violations that have been reported for this Gallery Image Version.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly policyViolations?: PolicyViolation[];
  /** Indicates whether or not the deletion is blocked for this Gallery Image Version if its End Of Life has not expired. */
  blockDeletionBeforeEndOfLife?: boolean;
}

/** The source of the gallery artifact version. */
export interface GalleryArtifactVersionFullSource
  extends GalleryArtifactVersionSource {
  /** The resource Id of the source Community Gallery Image.  Only required when using Community Gallery Image as a source. */
  communityGalleryImageId?: string;
  /** The resource Id of the source virtual machine.  Only required when capturing a virtual machine to source this Gallery Image Version. */
  virtualMachineId?: string;
}

/** The source for the disk image. */
export interface GalleryDiskImageSource extends GalleryArtifactVersionSource {
  /** The uri of the gallery artifact version source. Currently used to specify vhd/blob source. */
  uri?: string;
  /** The Storage Account Id that contains the vhd blob being used as a source for this artifact version. */
  storageAccountId?: string;
}

/** This is the OS disk image. */
export interface GalleryOSDiskImage extends GalleryDiskImage {}

/** This is the data disk image. */
export interface GalleryDataDiskImage extends GalleryDiskImage {
  /** This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine. */
  lun: number;
}

/** Describes the properties of a gallery inVMAccessControlProfile. */
export interface GalleryInVMAccessControlProfileProperties
  extends GalleryResourceProfilePropertiesBase {
  /** The description of this gallery inVMAccessControlProfile resources. This property is updatable. */
  description?: string;
  /** This property allows you to specify the OS type of the VMs/VMSS for which this profile can be used against. Possible values are: 'Windows' or 'Linux' */
  osType: OperatingSystemTypes;
  /** This property allows you to specify the Endpoint type for which this profile is defining the access control for. Possible values are: 'WireServer' or 'IMDS' */
  applicableHostEndpoint: EndpointTypes;
}

/** Describes the properties of an inVMAccessControlProfile version. */
export interface GalleryInVMAccessControlProfileVersionProperties
  extends GalleryResourceProfileVersionPropertiesBase {
  /** This property allows you to specify whether the access control rules are in Audit mode, in Enforce mode or Disabled. Possible values are: 'Audit', 'Enforce' or 'Disabled'. */
  mode: AccessControlRulesMode;
  /** This property allows you to specify if the requests will be allowed to access the host endpoints. Possible values are: 'Allow', 'Deny'. */
  defaultAccess: EndpointAccess;
  /** This is the Access Control Rules specification for an inVMAccessControlProfile version. */
  rules?: AccessControlRules;
}

/** Specifies information about the Shared Image Gallery that you want to create or update. */
export interface Gallery extends TrackedResource {
  /** The identity of the gallery, if configured. */
  identity?: GalleryIdentity;
  /** The description of this Shared Image Gallery resource. This property is updatable. */
  description?: string;
  /** Describes the gallery unique name. */
  identifier?: GalleryIdentifier;
  /**
   * The provisioning state, which only appears in the response.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: GalleryProvisioningState;
  /** Profile for gallery sharing to subscription or tenant */
  sharingProfile?: SharingProfile;
  /** Contains information about the soft deletion policy of the gallery. */
  softDeletePolicy?: SoftDeletePolicy;
  /**
   * Sharing status of current gallery.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sharingStatus?: SharingStatus;
}

/** Specifies information about the gallery Application Definition that you want to create or update. */
export interface GalleryApplication extends TrackedResource {
  /** The description of this gallery Application Definition resource. This property is updatable. */
  description?: string;
  /** The Eula agreement for the gallery Application Definition. */
  eula?: string;
  /** The privacy statement uri. */
  privacyStatementUri?: string;
  /** The release note uri. */
  releaseNoteUri?: string;
  /** The end of life date of the gallery Application Definition. This property can be used for decommissioning purposes. This property is updatable. */
  endOfLifeDate?: Date;
  /** This property allows you to specify the supported type of the OS that application is built for. Possible values are: **Windows,** **Linux.** */
  supportedOSType?: OperatingSystemTypes;
  /** A list of custom actions that can be performed with all of the Gallery Application Versions within this Gallery Application. */
  customActions?: GalleryApplicationCustomAction[];
}

/** Specifies information about the gallery Application Version that you want to create or update. */
export interface GalleryApplicationVersion extends TrackedResource {
  /** The publishing profile of a gallery image version. */
  publishingProfile?: GalleryApplicationVersionPublishingProfile;
  /** The safety profile of the Gallery Application Version. */
  safetyProfile?: GalleryApplicationVersionSafetyProfile;
  /**
   * The provisioning state, which only appears in the response.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: GalleryProvisioningState;
  /**
   * This is the replication status of the gallery image version.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly replicationStatus?: ReplicationStatus;
}

/** Specifies information about the gallery image definition that you want to create or update. */
export interface GalleryImage extends TrackedResource {
  /** The description of this gallery image definition resource. This property is updatable. */
  description?: string;
  /** The Eula agreement for the gallery image definition. */
  eula?: string;
  /** The privacy statement uri. */
  privacyStatementUri?: string;
  /** The release note uri. */
  releaseNoteUri?: string;
  /** This property allows you to specify the type of the OS that is included in the disk when creating a VM from a managed image. Possible values are: **Windows,** **Linux.** */
  osType?: OperatingSystemTypes;
  /** This property allows the user to specify whether the virtual machines created under this image are 'Generalized' or 'Specialized'. */
  osState?: OperatingSystemStateTypes;
  /** The hypervisor generation of the Virtual Machine. Applicable to OS disks only. */
  hyperVGeneration?: HyperVGeneration;
  /** The end of life date of the gallery image definition. This property can be used for decommissioning purposes. This property is updatable. */
  endOfLifeDate?: Date;
  /** This is the gallery image definition identifier. */
  identifier?: GalleryImageIdentifier;
  /** The properties describe the recommended machine configuration for this Image Definition. These properties are updatable. */
  recommended?: RecommendedMachineConfiguration;
  /** Describes the disallowed disk types. */
  disallowed?: Disallowed;
  /** Describes the gallery image definition purchase plan. This is used by marketplace images. */
  purchasePlan?: ImagePurchasePlan;
  /**
   * The provisioning state, which only appears in the response.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: GalleryProvisioningState;
  /** A list of gallery image features. */
  features?: GalleryImageFeature[];
  /** The architecture of the image. Applicable to OS disks only. */
  architecture?: Architecture;
  /** Optional. Must be set to true if the gallery image features are being updated. */
  allowUpdateImage?: boolean;
}

/** Specifies information about the gallery image version that you want to create or update. */
export interface GalleryImageVersion extends TrackedResource {
  /** The publishing profile of a gallery image Version. */
  publishingProfile?: GalleryImageVersionPublishingProfile;
  /**
   * The provisioning state, which only appears in the response.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: GalleryProvisioningState;
  /** This is the storage profile of a Gallery Image Version. */
  storageProfile?: GalleryImageVersionStorageProfile;
  /** This is the safety profile of the Gallery Image Version. */
  safetyProfile?: GalleryImageVersionSafetyProfile;
  /**
   * This is the replication status of the gallery image version.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly replicationStatus?: ReplicationStatus;
  /** The security profile of a gallery image version */
  securityProfile?: ImageVersionSecurityProfile;
  /** Indicates if this is a soft-delete resource restoration request. */
  restore?: boolean;
  /**
   * This is the validations profile of a Gallery Image Version.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationsProfile?: ValidationsProfile;
}

/** Specifies information about the gallery inVMAccessControlProfile that you want to create or update. */
export interface GalleryInVMAccessControlProfile extends TrackedResource {
  /** Describes the properties of a gallery inVMAccessControlProfile. */
  properties?: GalleryInVMAccessControlProfileProperties;
}

/** Specifies information about the gallery inVMAccessControlProfile version that you want to create or update. */
export interface GalleryInVMAccessControlProfileVersion
  extends TrackedResource {
  /** The target regions where the Resource Profile version is going to be replicated to. This property is updatable. */
  targetLocations?: TargetRegion[];
  /** If set to true, Virtual Machines deployed from the latest version of the Resource Profile won't use this Profile version. */
  excludeFromLatest?: boolean;
  /**
   * The timestamp for when the Resource Profile Version is published.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly publishedDate?: Date;
  /**
   * The provisioning state, which only appears in the response.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: GalleryProvisioningState;
  /**
   * This is the replication status of the gallery image version.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly replicationStatus?: ReplicationStatus;
  /** This property allows you to specify whether the access control rules are in Audit mode, in Enforce mode or Disabled. Possible values are: 'Audit', 'Enforce' or 'Disabled'. */
  mode?: AccessControlRulesMode;
  /** This property allows you to specify if the requests will be allowed to access the host endpoints. Possible values are: 'Allow', 'Deny'. */
  defaultAccess?: EndpointAccess;
  /** This is the Access Control Rules specification for an inVMAccessControlProfile version. */
  rules?: AccessControlRules;
}

/** The details information of soft-deleted resource. */
export interface GallerySoftDeletedResource extends TrackedResource {
  /** arm id of the soft-deleted resource */
  resourceArmId?: string;
  /** artifact type of the soft-deleted resource */
  softDeletedArtifactType?: SoftDeletedArtifactTypes;
  /** The timestamp for when the resource is soft-deleted. In dateTime offset format. */
  softDeletedTime?: string;
}

/** Specifies information about the Shared Gallery that you want to create or update. */
export interface SharedGallery extends PirSharedGalleryResource {
  /**
   * The artifact tags of a shared gallery resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly artifactTags?: { [propertyName: string]: string };
}

/** Specifies information about the gallery image definition that you want to create or update. */
export interface SharedGalleryImage extends PirSharedGalleryResource {
  /** This property allows you to specify the type of the OS that is included in the disk when creating a VM from a managed image. Possible values are: **Windows,** **Linux.** */
  osType?: OperatingSystemTypes;
  /** This property allows the user to specify whether the virtual machines created under this image are 'Generalized' or 'Specialized'. */
  osState?: OperatingSystemStateTypes;
  /** The end of life date of the gallery image definition. This property can be used for decommissioning purposes. This property is updatable. */
  endOfLifeDate?: Date;
  /** This is the gallery image definition identifier. */
  identifier?: GalleryImageIdentifier;
  /** The properties describe the recommended machine configuration for this Image Definition. These properties are updatable. */
  recommended?: RecommendedMachineConfiguration;
  /** Describes the disallowed disk types. */
  disallowed?: Disallowed;
  /** The hypervisor generation of the Virtual Machine. Applicable to OS disks only. */
  hyperVGeneration?: HyperVGeneration;
  /** A list of gallery image features. */
  features?: GalleryImageFeature[];
  /** Describes the gallery image definition purchase plan. This is used by marketplace images. */
  purchasePlan?: ImagePurchasePlan;
  /** The architecture of the image. Applicable to OS disks only. */
  architecture?: Architecture;
  /** Privacy statement uri for the current community gallery image. */
  privacyStatementUri?: string;
  /** End-user license agreement for the current community gallery image. */
  eula?: string;
  /** The artifact tags of a shared gallery resource. */
  artifactTags?: { [propertyName: string]: string };
}

/** Specifies information about the gallery image version that you want to create or update. */
export interface SharedGalleryImageVersion extends PirSharedGalleryResource {
  /** The published date of the gallery image version Definition. This property can be used for decommissioning purposes. This property is updatable. */
  publishedDate?: Date;
  /** The end of life date of the gallery image version Definition. This property can be used for decommissioning purposes. This property is updatable. */
  endOfLifeDate?: Date;
  /** If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version. */
  excludeFromLatest?: boolean;
  /** Describes the storage profile of the image version. */
  storageProfile?: SharedGalleryImageVersionStorageProfile;
  /** The artifact tags of a shared gallery resource. */
  artifactTags?: { [propertyName: string]: string };
}

/** Defines headers for Galleries_createOrUpdate operation. */
export interface GalleriesCreateOrUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Galleries_update operation. */
export interface GalleriesUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Galleries_delete operation. */
export interface GalleriesDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for GalleryApplications_createOrUpdate operation. */
export interface GalleryApplicationsCreateOrUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for GalleryApplications_update operation. */
export interface GalleryApplicationsUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for GalleryApplications_delete operation. */
export interface GalleryApplicationsDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for GalleryApplicationVersions_createOrUpdate operation. */
export interface GalleryApplicationVersionsCreateOrUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for GalleryApplicationVersions_update operation. */
export interface GalleryApplicationVersionsUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for GalleryApplicationVersions_delete operation. */
export interface GalleryApplicationVersionsDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for GalleryImages_createOrUpdate operation. */
export interface GalleryImagesCreateOrUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for GalleryImages_update operation. */
export interface GalleryImagesUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for GalleryImages_delete operation. */
export interface GalleryImagesDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for GalleryImageVersions_createOrUpdate operation. */
export interface GalleryImageVersionsCreateOrUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for GalleryImageVersions_update operation. */
export interface GalleryImageVersionsUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for GalleryImageVersions_delete operation. */
export interface GalleryImageVersionsDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for GalleryInVMAccessControlProfiles_createOrUpdate operation. */
export interface GalleryInVMAccessControlProfilesCreateOrUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for GalleryInVMAccessControlProfiles_update operation. */
export interface GalleryInVMAccessControlProfilesUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for GalleryInVMAccessControlProfiles_delete operation. */
export interface GalleryInVMAccessControlProfilesDeleteHeaders {
  /** A link to the status monitor */
  azureAsyncOperation?: string;
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
}

/** Defines headers for GalleryInVMAccessControlProfileVersions_createOrUpdate operation. */
export interface GalleryInVMAccessControlProfileVersionsCreateOrUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for GalleryInVMAccessControlProfileVersions_update operation. */
export interface GalleryInVMAccessControlProfileVersionsUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for GalleryInVMAccessControlProfileVersions_delete operation. */
export interface GalleryInVMAccessControlProfileVersionsDeleteHeaders {
  /** A link to the status monitor */
  azureAsyncOperation?: string;
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
}

/** Defines headers for GallerySharingProfile_update operation. */
export interface GallerySharingProfileUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Known values of {@link GalleryProvisioningState} that the service accepts. */
export enum KnownGalleryProvisioningState {
  /** Creating */
  Creating = "Creating",
  /** Updating */
  Updating = "Updating",
  /** Failed */
  Failed = "Failed",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Deleting */
  Deleting = "Deleting",
  /** Migrating */
  Migrating = "Migrating",
}

/**
 * Defines values for GalleryProvisioningState. \
 * {@link KnownGalleryProvisioningState} can be used interchangeably with GalleryProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Failed** \
 * **Succeeded** \
 * **Deleting** \
 * **Migrating**
 */
export type GalleryProvisioningState = string;

/** Known values of {@link GallerySharingPermissionTypes} that the service accepts. */
export enum KnownGallerySharingPermissionTypes {
  /** Private */
  Private = "Private",
  /** Groups */
  Groups = "Groups",
  /** Community */
  Community = "Community",
}

/**
 * Defines values for GallerySharingPermissionTypes. \
 * {@link KnownGallerySharingPermissionTypes} can be used interchangeably with GallerySharingPermissionTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Private** \
 * **Groups** \
 * **Community**
 */
export type GallerySharingPermissionTypes = string;

/** Known values of {@link SharingProfileGroupTypes} that the service accepts. */
export enum KnownSharingProfileGroupTypes {
  /** Subscriptions */
  Subscriptions = "Subscriptions",
  /** AADTenants */
  AADTenants = "AADTenants",
}

/**
 * Defines values for SharingProfileGroupTypes. \
 * {@link KnownSharingProfileGroupTypes} can be used interchangeably with SharingProfileGroupTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Subscriptions** \
 * **AADTenants**
 */
export type SharingProfileGroupTypes = string;

/** Known values of {@link SharingState} that the service accepts. */
export enum KnownSharingState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** InProgress */
  InProgress = "InProgress",
  /** Failed */
  Failed = "Failed",
  /** Unknown */
  Unknown = "Unknown",
}

/**
 * Defines values for SharingState. \
 * {@link KnownSharingState} can be used interchangeably with SharingState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **InProgress** \
 * **Failed** \
 * **Unknown**
 */
export type SharingState = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key",
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link UefiSignatureTemplateName} that the service accepts. */
export enum KnownUefiSignatureTemplateName {
  /** NoSignatureTemplate */
  NoSignatureTemplate = "NoSignatureTemplate",
  /** MicrosoftUefiCertificateAuthorityTemplate */
  MicrosoftUefiCertificateAuthorityTemplate = "MicrosoftUefiCertificateAuthorityTemplate",
  /** MicrosoftWindowsTemplate */
  MicrosoftWindowsTemplate = "MicrosoftWindowsTemplate",
}

/**
 * Defines values for UefiSignatureTemplateName. \
 * {@link KnownUefiSignatureTemplateName} can be used interchangeably with UefiSignatureTemplateName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NoSignatureTemplate** \
 * **MicrosoftUefiCertificateAuthorityTemplate** \
 * **MicrosoftWindowsTemplate**
 */
export type UefiSignatureTemplateName = string;

/** Known values of {@link UefiKeyType} that the service accepts. */
export enum KnownUefiKeyType {
  /** Sha256 */
  Sha256 = "sha256",
  /** X509 */
  X509 = "x509",
}

/**
 * Defines values for UefiKeyType. \
 * {@link KnownUefiKeyType} can be used interchangeably with UefiKeyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **sha256** \
 * **x509**
 */
export type UefiKeyType = string;

/** Known values of {@link HyperVGeneration} that the service accepts. */
export enum KnownHyperVGeneration {
  /** V1 */
  V1 = "V1",
  /** V2 */
  V2 = "V2",
}

/**
 * Defines values for HyperVGeneration. \
 * {@link KnownHyperVGeneration} can be used interchangeably with HyperVGeneration,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **V1** \
 * **V2**
 */
export type HyperVGeneration = string;

/** Known values of {@link Architecture} that the service accepts. */
export enum KnownArchitecture {
  /** X64 */
  X64 = "x64",
  /** Arm64 */
  Arm64 = "Arm64",
}

/**
 * Defines values for Architecture. \
 * {@link KnownArchitecture} can be used interchangeably with Architecture,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **x64** \
 * **Arm64**
 */
export type Architecture = string;

/** Known values of {@link SharedGalleryHostCaching} that the service accepts. */
export enum KnownSharedGalleryHostCaching {
  /** None */
  None = "None",
  /** ReadOnly */
  ReadOnly = "ReadOnly",
  /** ReadWrite */
  ReadWrite = "ReadWrite",
}

/**
 * Defines values for SharedGalleryHostCaching. \
 * {@link KnownSharedGalleryHostCaching} can be used interchangeably with SharedGalleryHostCaching,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **ReadOnly** \
 * **ReadWrite**
 */
export type SharedGalleryHostCaching = string;

/** Known values of {@link SharedToValues} that the service accepts. */
export enum KnownSharedToValues {
  /** Tenant */
  Tenant = "tenant",
}

/**
 * Defines values for SharedToValues. \
 * {@link KnownSharedToValues} can be used interchangeably with SharedToValues,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **tenant**
 */
export type SharedToValues = string;

/** Known values of {@link SelectPermissions} that the service accepts. */
export enum KnownSelectPermissions {
  /** Permissions */
  Permissions = "Permissions",
}

/**
 * Defines values for SelectPermissions. \
 * {@link KnownSelectPermissions} can be used interchangeably with SelectPermissions,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Permissions**
 */
export type SelectPermissions = string;

/** Known values of {@link GalleryExpandParams} that the service accepts. */
export enum KnownGalleryExpandParams {
  /** SharingProfileGroups */
  SharingProfileGroups = "SharingProfile/Groups",
}

/**
 * Defines values for GalleryExpandParams. \
 * {@link KnownGalleryExpandParams} can be used interchangeably with GalleryExpandParams,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SharingProfile\/Groups**
 */
export type GalleryExpandParams = string;

/** Known values of {@link GalleryApplicationScriptRebootBehavior} that the service accepts. */
export enum KnownGalleryApplicationScriptRebootBehavior {
  /** None */
  None = "None",
  /** Rerun */
  Rerun = "Rerun",
}

/**
 * Defines values for GalleryApplicationScriptRebootBehavior. \
 * {@link KnownGalleryApplicationScriptRebootBehavior} can be used interchangeably with GalleryApplicationScriptRebootBehavior,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Rerun**
 */
export type GalleryApplicationScriptRebootBehavior = string;

/** Known values of {@link StorageAccountType} that the service accepts. */
export enum KnownStorageAccountType {
  /** StandardLRS */
  StandardLRS = "Standard_LRS",
  /** StandardZRS */
  StandardZRS = "Standard_ZRS",
  /** PremiumLRS */
  PremiumLRS = "Premium_LRS",
  /** PremiumV2LRS */
  PremiumV2LRS = "PremiumV2_LRS",
}

/**
 * Defines values for StorageAccountType. \
 * {@link KnownStorageAccountType} can be used interchangeably with StorageAccountType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard_LRS** \
 * **Standard_ZRS** \
 * **Premium_LRS** \
 * **PremiumV2_LRS**
 */
export type StorageAccountType = string;

/** Known values of {@link ConfidentialVMEncryptionType} that the service accepts. */
export enum KnownConfidentialVMEncryptionType {
  /** EncryptedVMGuestStateOnlyWithPmk */
  EncryptedVMGuestStateOnlyWithPmk = "EncryptedVMGuestStateOnlyWithPmk",
  /** EncryptedWithPmk */
  EncryptedWithPmk = "EncryptedWithPmk",
  /** EncryptedWithCmk */
  EncryptedWithCmk = "EncryptedWithCmk",
  /** NonPersistedTPM */
  NonPersistedTPM = "NonPersistedTPM",
}

/**
 * Defines values for ConfidentialVMEncryptionType. \
 * {@link KnownConfidentialVMEncryptionType} can be used interchangeably with ConfidentialVMEncryptionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **EncryptedVMGuestStateOnlyWithPmk** \
 * **EncryptedWithPmk** \
 * **EncryptedWithCmk** \
 * **NonPersistedTPM**
 */
export type ConfidentialVMEncryptionType = string;

/** Known values of {@link ReplicationMode} that the service accepts. */
export enum KnownReplicationMode {
  /** Full */
  Full = "Full",
  /** Shallow */
  Shallow = "Shallow",
}

/**
 * Defines values for ReplicationMode. \
 * {@link KnownReplicationMode} can be used interchangeably with ReplicationMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Full** \
 * **Shallow**
 */
export type ReplicationMode = string;

/** Known values of {@link GalleryExtendedLocationType} that the service accepts. */
export enum KnownGalleryExtendedLocationType {
  /** EdgeZone */
  EdgeZone = "EdgeZone",
  /** Unknown */
  Unknown = "Unknown",
}

/**
 * Defines values for GalleryExtendedLocationType. \
 * {@link KnownGalleryExtendedLocationType} can be used interchangeably with GalleryExtendedLocationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **EdgeZone** \
 * **Unknown**
 */
export type GalleryExtendedLocationType = string;

/** Known values of {@link EdgeZoneStorageAccountType} that the service accepts. */
export enum KnownEdgeZoneStorageAccountType {
  /** StandardLRS */
  StandardLRS = "Standard_LRS",
  /** StandardZRS */
  StandardZRS = "Standard_ZRS",
  /** StandardSSDLRS */
  StandardSSDLRS = "StandardSSD_LRS",
  /** PremiumLRS */
  PremiumLRS = "Premium_LRS",
}

/**
 * Defines values for EdgeZoneStorageAccountType. \
 * {@link KnownEdgeZoneStorageAccountType} can be used interchangeably with EdgeZoneStorageAccountType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard_LRS** \
 * **Standard_ZRS** \
 * **StandardSSD_LRS** \
 * **Premium_LRS**
 */
export type EdgeZoneStorageAccountType = string;

/** Known values of {@link AggregatedReplicationState} that the service accepts. */
export enum KnownAggregatedReplicationState {
  /** Unknown */
  Unknown = "Unknown",
  /** InProgress */
  InProgress = "InProgress",
  /** Completed */
  Completed = "Completed",
  /** Failed */
  Failed = "Failed",
}

/**
 * Defines values for AggregatedReplicationState. \
 * {@link KnownAggregatedReplicationState} can be used interchangeably with AggregatedReplicationState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **InProgress** \
 * **Completed** \
 * **Failed**
 */
export type AggregatedReplicationState = string;

/** Known values of {@link ReplicationState} that the service accepts. */
export enum KnownReplicationState {
  /** Unknown */
  Unknown = "Unknown",
  /** Replicating */
  Replicating = "Replicating",
  /** Completed */
  Completed = "Completed",
  /** Failed */
  Failed = "Failed",
}

/**
 * Defines values for ReplicationState. \
 * {@link KnownReplicationState} can be used interchangeably with ReplicationState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Replicating** \
 * **Completed** \
 * **Failed**
 */
export type ReplicationState = string;

/** Known values of {@link ReplicationStatusTypes} that the service accepts. */
export enum KnownReplicationStatusTypes {
  /** ReplicationStatus */
  ReplicationStatus = "ReplicationStatus",
  /** UefiSettings */
  UefiSettings = "UefiSettings",
}

/**
 * Defines values for ReplicationStatusTypes. \
 * {@link KnownReplicationStatusTypes} can be used interchangeably with ReplicationStatusTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ReplicationStatus** \
 * **UefiSettings**
 */
export type ReplicationStatusTypes = string;

/** Known values of {@link PolicyViolationCategory} that the service accepts. */
export enum KnownPolicyViolationCategory {
  /** Other */
  Other = "Other",
  /** ImageFlaggedUnsafe */
  ImageFlaggedUnsafe = "ImageFlaggedUnsafe",
  /** CopyrightValidation */
  CopyrightValidation = "CopyrightValidation",
  /** IpTheft */
  IpTheft = "IpTheft",
}

/**
 * Defines values for PolicyViolationCategory. \
 * {@link KnownPolicyViolationCategory} can be used interchangeably with PolicyViolationCategory,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Other** \
 * **ImageFlaggedUnsafe** \
 * **CopyrightValidation** \
 * **IpTheft**
 */
export type PolicyViolationCategory = string;

/** Known values of {@link ValidationStatus} that the service accepts. */
export enum KnownValidationStatus {
  /** Unknown */
  Unknown = "Unknown",
  /** Failed */
  Failed = "Failed",
  /** Succeeded */
  Succeeded = "Succeeded",
}

/**
 * Defines values for ValidationStatus. \
 * {@link KnownValidationStatus} can be used interchangeably with ValidationStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Failed** \
 * **Succeeded**
 */
export type ValidationStatus = string;

/** Known values of {@link AccessControlRulesMode} that the service accepts. */
export enum KnownAccessControlRulesMode {
  /** Audit */
  Audit = "Audit",
  /** Enforce */
  Enforce = "Enforce",
  /** Disabled */
  Disabled = "Disabled",
}

/**
 * Defines values for AccessControlRulesMode. \
 * {@link KnownAccessControlRulesMode} can be used interchangeably with AccessControlRulesMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Audit** \
 * **Enforce** \
 * **Disabled**
 */
export type AccessControlRulesMode = string;

/** Known values of {@link EndpointAccess} that the service accepts. */
export enum KnownEndpointAccess {
  /** Allow */
  Allow = "Allow",
  /** Deny */
  Deny = "Deny",
}

/**
 * Defines values for EndpointAccess. \
 * {@link KnownEndpointAccess} can be used interchangeably with EndpointAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Allow** \
 * **Deny**
 */
export type EndpointAccess = string;

/** Known values of {@link SharingUpdateOperationTypes} that the service accepts. */
export enum KnownSharingUpdateOperationTypes {
  /** Add */
  Add = "Add",
  /** Remove */
  Remove = "Remove",
  /** Reset */
  Reset = "Reset",
  /** EnableCommunity */
  EnableCommunity = "EnableCommunity",
}

/**
 * Defines values for SharingUpdateOperationTypes. \
 * {@link KnownSharingUpdateOperationTypes} can be used interchangeably with SharingUpdateOperationTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Add** \
 * **Remove** \
 * **Reset** \
 * **EnableCommunity**
 */
export type SharingUpdateOperationTypes = string;

/** Known values of {@link SoftDeletedArtifactTypes} that the service accepts. */
export enum KnownSoftDeletedArtifactTypes {
  /** Images */
  Images = "Images",
}

/**
 * Defines values for SoftDeletedArtifactTypes. \
 * {@link KnownSoftDeletedArtifactTypes} can be used interchangeably with SoftDeletedArtifactTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Images**
 */
export type SoftDeletedArtifactTypes = string;
/** Defines values for ResourceIdentityType. */
export type ResourceIdentityType =
  | "SystemAssigned"
  | "UserAssigned"
  | "SystemAssigned, UserAssigned"
  | "None";
/** Defines values for OperatingSystemTypes. */
export type OperatingSystemTypes = "Windows" | "Linux";
/** Defines values for OperatingSystemStateTypes. */
export type OperatingSystemStateTypes = "Generalized" | "Specialized";
/** Defines values for GalleryApplicationCustomActionParameterType. */
export type GalleryApplicationCustomActionParameterType =
  | "String"
  | "ConfigurationDataBlob"
  | "LogOutputBlob";
/** Defines values for HostCaching. */
export type HostCaching = "None" | "ReadOnly" | "ReadWrite";
/** Defines values for EndpointTypes. */
export type EndpointTypes = "WireServer" | "IMDS";

/** Optional parameters. */
export interface GalleriesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type GalleriesListResponse = GalleryList;

/** Optional parameters. */
export interface GalleriesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type GalleriesListByResourceGroupResponse = GalleryList;

/** Optional parameters. */
export interface GalleriesGetOptionalParams
  extends coreClient.OperationOptions {
  /** The select expression to apply on the operation. */
  select?: SelectPermissions;
  /** The expand query option to apply on the operation. */
  expand?: GalleryExpandParams;
}

/** Contains response data for the get operation. */
export type GalleriesGetResponse = Gallery;

/** Optional parameters. */
export interface GalleriesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type GalleriesCreateOrUpdateResponse = Gallery;

/** Optional parameters. */
export interface GalleriesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type GalleriesUpdateResponse = GalleriesUpdateHeaders & Gallery;

/** Optional parameters. */
export interface GalleriesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface GalleriesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type GalleriesListNextResponse = GalleryList;

/** Optional parameters. */
export interface GalleriesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type GalleriesListByResourceGroupNextResponse = GalleryList;

/** Optional parameters. */
export interface CommunityGalleriesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type CommunityGalleriesGetResponse = CommunityGallery;

/** Optional parameters. */
export interface CommunityGalleryImagesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type CommunityGalleryImagesListResponse = CommunityGalleryImageList;

/** Optional parameters. */
export interface CommunityGalleryImagesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type CommunityGalleryImagesGetResponse = CommunityGalleryImage;

/** Optional parameters. */
export interface CommunityGalleryImagesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type CommunityGalleryImagesListNextResponse = CommunityGalleryImageList;

/** Optional parameters. */
export interface CommunityGalleryImageVersionsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type CommunityGalleryImageVersionsListResponse =
  CommunityGalleryImageVersionList;

/** Optional parameters. */
export interface CommunityGalleryImageVersionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type CommunityGalleryImageVersionsGetResponse =
  CommunityGalleryImageVersion;

/** Optional parameters. */
export interface CommunityGalleryImageVersionsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type CommunityGalleryImageVersionsListNextResponse =
  CommunityGalleryImageVersionList;

/** Optional parameters. */
export interface SharedGalleriesListOptionalParams
  extends coreClient.OperationOptions {
  /** The query parameter to decide what shared galleries to fetch when doing listing operations. */
  sharedTo?: SharedToValues;
}

/** Contains response data for the list operation. */
export type SharedGalleriesListResponse = SharedGalleryList;

/** Optional parameters. */
export interface SharedGalleriesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SharedGalleriesGetResponse = SharedGallery;

/** Optional parameters. */
export interface SharedGalleriesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type SharedGalleriesListNextResponse = SharedGalleryList;

/** Optional parameters. */
export interface SharedGalleryImagesListOptionalParams
  extends coreClient.OperationOptions {
  /** The query parameter to decide what shared galleries to fetch when doing listing operations. */
  sharedTo?: SharedToValues;
}

/** Contains response data for the list operation. */
export type SharedGalleryImagesListResponse = SharedGalleryImageList;

/** Optional parameters. */
export interface SharedGalleryImagesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SharedGalleryImagesGetResponse = SharedGalleryImage;

/** Optional parameters. */
export interface SharedGalleryImagesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type SharedGalleryImagesListNextResponse = SharedGalleryImageList;

/** Optional parameters. */
export interface SharedGalleryImageVersionsListOptionalParams
  extends coreClient.OperationOptions {
  /** The query parameter to decide what shared galleries to fetch when doing listing operations. */
  sharedTo?: SharedToValues;
}

/** Contains response data for the list operation. */
export type SharedGalleryImageVersionsListResponse =
  SharedGalleryImageVersionList;

/** Optional parameters. */
export interface SharedGalleryImageVersionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SharedGalleryImageVersionsGetResponse = SharedGalleryImageVersion;

/** Optional parameters. */
export interface SharedGalleryImageVersionsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type SharedGalleryImageVersionsListNextResponse =
  SharedGalleryImageVersionList;

/** Optional parameters. */
export interface GalleryApplicationsListByGalleryOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByGallery operation. */
export type GalleryApplicationsListByGalleryResponse = GalleryApplicationList;

/** Optional parameters. */
export interface GalleryApplicationsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type GalleryApplicationsGetResponse = GalleryApplication;

/** Optional parameters. */
export interface GalleryApplicationsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type GalleryApplicationsCreateOrUpdateResponse = GalleryApplication;

/** Optional parameters. */
export interface GalleryApplicationsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type GalleryApplicationsUpdateResponse =
  GalleryApplicationsUpdateHeaders & GalleryApplication;

/** Optional parameters. */
export interface GalleryApplicationsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface GalleryApplicationsListByGalleryNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByGalleryNext operation. */
export type GalleryApplicationsListByGalleryNextResponse =
  GalleryApplicationList;

/** Optional parameters. */
export interface GalleryApplicationVersionsListByGalleryApplicationOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByGalleryApplication operation. */
export type GalleryApplicationVersionsListByGalleryApplicationResponse =
  GalleryApplicationVersionList;

/** Optional parameters. */
export interface GalleryApplicationVersionsGetOptionalParams
  extends coreClient.OperationOptions {
  /** The expand expression to apply on the operation. */
  expand?: ReplicationStatusTypes;
}

/** Contains response data for the get operation. */
export type GalleryApplicationVersionsGetResponse = GalleryApplicationVersion;

/** Optional parameters. */
export interface GalleryApplicationVersionsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type GalleryApplicationVersionsCreateOrUpdateResponse =
  GalleryApplicationVersion;

/** Optional parameters. */
export interface GalleryApplicationVersionsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type GalleryApplicationVersionsUpdateResponse =
  GalleryApplicationVersionsUpdateHeaders & GalleryApplicationVersion;

/** Optional parameters. */
export interface GalleryApplicationVersionsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface GalleryApplicationVersionsListByGalleryApplicationNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByGalleryApplicationNext operation. */
export type GalleryApplicationVersionsListByGalleryApplicationNextResponse =
  GalleryApplicationVersionList;

/** Optional parameters. */
export interface GalleryImagesListByGalleryOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByGallery operation. */
export type GalleryImagesListByGalleryResponse = GalleryImageList;

/** Optional parameters. */
export interface GalleryImagesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type GalleryImagesGetResponse = GalleryImage;

/** Optional parameters. */
export interface GalleryImagesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type GalleryImagesCreateOrUpdateResponse = GalleryImage;

/** Optional parameters. */
export interface GalleryImagesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type GalleryImagesUpdateResponse = GalleryImagesUpdateHeaders &
  GalleryImage;

/** Optional parameters. */
export interface GalleryImagesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface GalleryImagesListByGalleryNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByGalleryNext operation. */
export type GalleryImagesListByGalleryNextResponse = GalleryImageList;

/** Optional parameters. */
export interface GalleryImageVersionsListByGalleryImageOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByGalleryImage operation. */
export type GalleryImageVersionsListByGalleryImageResponse =
  GalleryImageVersionList;

/** Optional parameters. */
export interface GalleryImageVersionsGetOptionalParams
  extends coreClient.OperationOptions {
  /** The expand expression to apply on the operation. */
  expand?: ReplicationStatusTypes;
}

/** Contains response data for the get operation. */
export type GalleryImageVersionsGetResponse = GalleryImageVersion;

/** Optional parameters. */
export interface GalleryImageVersionsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type GalleryImageVersionsCreateOrUpdateResponse = GalleryImageVersion;

/** Optional parameters. */
export interface GalleryImageVersionsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type GalleryImageVersionsUpdateResponse =
  GalleryImageVersionsUpdateHeaders & GalleryImageVersion;

/** Optional parameters. */
export interface GalleryImageVersionsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface GalleryImageVersionsListByGalleryImageNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByGalleryImageNext operation. */
export type GalleryImageVersionsListByGalleryImageNextResponse =
  GalleryImageVersionList;

/** Optional parameters. */
export interface GalleryInVMAccessControlProfilesListByGalleryOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByGallery operation. */
export type GalleryInVMAccessControlProfilesListByGalleryResponse =
  GalleryInVMAccessControlProfileList;

/** Optional parameters. */
export interface GalleryInVMAccessControlProfilesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type GalleryInVMAccessControlProfilesGetResponse =
  GalleryInVMAccessControlProfile;

/** Optional parameters. */
export interface GalleryInVMAccessControlProfilesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type GalleryInVMAccessControlProfilesCreateOrUpdateResponse =
  GalleryInVMAccessControlProfile;

/** Optional parameters. */
export interface GalleryInVMAccessControlProfilesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type GalleryInVMAccessControlProfilesUpdateResponse =
  GalleryInVMAccessControlProfilesUpdateHeaders &
    GalleryInVMAccessControlProfile;

/** Optional parameters. */
export interface GalleryInVMAccessControlProfilesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type GalleryInVMAccessControlProfilesDeleteResponse =
  GalleryInVMAccessControlProfilesDeleteHeaders;

/** Optional parameters. */
export interface GalleryInVMAccessControlProfilesListByGalleryNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByGalleryNext operation. */
export type GalleryInVMAccessControlProfilesListByGalleryNextResponse =
  GalleryInVMAccessControlProfileList;

/** Optional parameters. */
export interface GalleryInVMAccessControlProfileVersionsListByGalleryInVMAccessControlProfileOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByGalleryInVMAccessControlProfile operation. */
export type GalleryInVMAccessControlProfileVersionsListByGalleryInVMAccessControlProfileResponse =
  GalleryInVMAccessControlProfileVersionList;

/** Optional parameters. */
export interface GalleryInVMAccessControlProfileVersionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type GalleryInVMAccessControlProfileVersionsGetResponse =
  GalleryInVMAccessControlProfileVersion;

/** Optional parameters. */
export interface GalleryInVMAccessControlProfileVersionsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type GalleryInVMAccessControlProfileVersionsCreateOrUpdateResponse =
  GalleryInVMAccessControlProfileVersion;

/** Optional parameters. */
export interface GalleryInVMAccessControlProfileVersionsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type GalleryInVMAccessControlProfileVersionsUpdateResponse =
  GalleryInVMAccessControlProfileVersionsUpdateHeaders &
    GalleryInVMAccessControlProfileVersion;

/** Optional parameters. */
export interface GalleryInVMAccessControlProfileVersionsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type GalleryInVMAccessControlProfileVersionsDeleteResponse =
  GalleryInVMAccessControlProfileVersionsDeleteHeaders;

/** Optional parameters. */
export interface GalleryInVMAccessControlProfileVersionsListByGalleryInVMAccessControlProfileNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByGalleryInVMAccessControlProfileNext operation. */
export type GalleryInVMAccessControlProfileVersionsListByGalleryInVMAccessControlProfileNextResponse =
  GalleryInVMAccessControlProfileVersionList;

/** Optional parameters. */
export interface GallerySharingProfileUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type GallerySharingProfileUpdateResponse = SharingUpdate;

/** Optional parameters. */
export interface SoftDeletedResourceListByArtifactNameOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByArtifactName operation. */
export type SoftDeletedResourceListByArtifactNameResponse =
  GallerySoftDeletedResourceList;

/** Optional parameters. */
export interface SoftDeletedResourceListByArtifactNameNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByArtifactNameNext operation. */
export type SoftDeletedResourceListByArtifactNameNextResponse =
  GallerySoftDeletedResourceList;

/** Optional parameters. */
export interface ComputeManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
