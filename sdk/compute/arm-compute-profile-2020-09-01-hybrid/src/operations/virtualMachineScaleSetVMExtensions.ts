/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/virtualMachineScaleSetVMExtensionsMappers";
import * as Parameters from "../models/parameters";
import { ComputeManagementClientContext } from "../computeManagementClientContext";

/** Class representing a VirtualMachineScaleSetVMExtensions. */
export class VirtualMachineScaleSetVMExtensions {
  private readonly client: ComputeManagementClientContext;

  /**
   * Create a VirtualMachineScaleSetVMExtensions.
   * @param {ComputeManagementClientContext} client Reference to the service client.
   */
  constructor(client: ComputeManagementClientContext) {
    this.client = client;
  }

  /**
   * The operation to create or update the VMSS VM extension.
   * @param resourceGroupName The name of the resource group.
   * @param vmScaleSetName The name of the VM scale set.
   * @param instanceId The instance ID of the virtual machine.
   * @param vmExtensionName The name of the virtual machine extension.
   * @param extensionParameters Parameters supplied to the Create Virtual Machine Extension
   * operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualMachineScaleSetVMExtensionsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, vmScaleSetName: string, instanceId: string, vmExtensionName: string, extensionParameters: Models.VirtualMachineScaleSetVMExtension, options?: msRest.RequestOptionsBase): Promise<Models.VirtualMachineScaleSetVMExtensionsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,vmScaleSetName,instanceId,vmExtensionName,extensionParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VirtualMachineScaleSetVMExtensionsCreateOrUpdateResponse>;
  }

  /**
   * The operation to update the VMSS VM extension.
   * @param resourceGroupName The name of the resource group.
   * @param vmScaleSetName The name of the VM scale set.
   * @param instanceId The instance ID of the virtual machine.
   * @param vmExtensionName The name of the virtual machine extension.
   * @param extensionParameters Parameters supplied to the Update Virtual Machine Extension
   * operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualMachineScaleSetVMExtensionsUpdateResponse>
   */
  update(resourceGroupName: string, vmScaleSetName: string, instanceId: string, vmExtensionName: string, extensionParameters: Models.VirtualMachineScaleSetVMExtensionUpdate, options?: msRest.RequestOptionsBase): Promise<Models.VirtualMachineScaleSetVMExtensionsUpdateResponse> {
    return this.beginUpdate(resourceGroupName,vmScaleSetName,instanceId,vmExtensionName,extensionParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VirtualMachineScaleSetVMExtensionsUpdateResponse>;
  }

  /**
   * The operation to delete the VMSS VM extension.
   * @param resourceGroupName The name of the resource group.
   * @param vmScaleSetName The name of the VM scale set.
   * @param instanceId The instance ID of the virtual machine.
   * @param vmExtensionName The name of the virtual machine extension.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, vmScaleSetName: string, instanceId: string, vmExtensionName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,vmScaleSetName,instanceId,vmExtensionName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * The operation to get the VMSS VM extension.
   * @param resourceGroupName The name of the resource group.
   * @param vmScaleSetName The name of the VM scale set.
   * @param instanceId The instance ID of the virtual machine.
   * @param vmExtensionName The name of the virtual machine extension.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualMachineScaleSetVMExtensionsGetResponse>
   */
  get(resourceGroupName: string, vmScaleSetName: string, instanceId: string, vmExtensionName: string, options?: Models.VirtualMachineScaleSetVMExtensionsGetOptionalParams): Promise<Models.VirtualMachineScaleSetVMExtensionsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param vmScaleSetName The name of the VM scale set.
   * @param instanceId The instance ID of the virtual machine.
   * @param vmExtensionName The name of the virtual machine extension.
   * @param callback The callback
   */
  get(resourceGroupName: string, vmScaleSetName: string, instanceId: string, vmExtensionName: string, callback: msRest.ServiceCallback<Models.VirtualMachineScaleSetVMExtension>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param vmScaleSetName The name of the VM scale set.
   * @param instanceId The instance ID of the virtual machine.
   * @param vmExtensionName The name of the virtual machine extension.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, vmScaleSetName: string, instanceId: string, vmExtensionName: string, options: Models.VirtualMachineScaleSetVMExtensionsGetOptionalParams, callback: msRest.ServiceCallback<Models.VirtualMachineScaleSetVMExtension>): void;
  get(resourceGroupName: string, vmScaleSetName: string, instanceId: string, vmExtensionName: string, options?: Models.VirtualMachineScaleSetVMExtensionsGetOptionalParams | msRest.ServiceCallback<Models.VirtualMachineScaleSetVMExtension>, callback?: msRest.ServiceCallback<Models.VirtualMachineScaleSetVMExtension>): Promise<Models.VirtualMachineScaleSetVMExtensionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        vmScaleSetName,
        instanceId,
        vmExtensionName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.VirtualMachineScaleSetVMExtensionsGetResponse>;
  }

  /**
   * The operation to get all extensions of an instance in Virtual Machine Scaleset.
   * @param resourceGroupName The name of the resource group.
   * @param vmScaleSetName The name of the VM scale set.
   * @param instanceId The instance ID of the virtual machine.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualMachineScaleSetVMExtensionsListResponse>
   */
  list(resourceGroupName: string, vmScaleSetName: string, instanceId: string, options?: Models.VirtualMachineScaleSetVMExtensionsListOptionalParams): Promise<Models.VirtualMachineScaleSetVMExtensionsListResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param vmScaleSetName The name of the VM scale set.
   * @param instanceId The instance ID of the virtual machine.
   * @param callback The callback
   */
  list(resourceGroupName: string, vmScaleSetName: string, instanceId: string, callback: msRest.ServiceCallback<Models.VirtualMachineScaleSetVMExtensionsListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param vmScaleSetName The name of the VM scale set.
   * @param instanceId The instance ID of the virtual machine.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, vmScaleSetName: string, instanceId: string, options: Models.VirtualMachineScaleSetVMExtensionsListOptionalParams, callback: msRest.ServiceCallback<Models.VirtualMachineScaleSetVMExtensionsListResult>): void;
  list(resourceGroupName: string, vmScaleSetName: string, instanceId: string, options?: Models.VirtualMachineScaleSetVMExtensionsListOptionalParams | msRest.ServiceCallback<Models.VirtualMachineScaleSetVMExtensionsListResult>, callback?: msRest.ServiceCallback<Models.VirtualMachineScaleSetVMExtensionsListResult>): Promise<Models.VirtualMachineScaleSetVMExtensionsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        vmScaleSetName,
        instanceId,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.VirtualMachineScaleSetVMExtensionsListResponse>;
  }

  /**
   * The operation to create or update the VMSS VM extension.
   * @param resourceGroupName The name of the resource group.
   * @param vmScaleSetName The name of the VM scale set.
   * @param instanceId The instance ID of the virtual machine.
   * @param vmExtensionName The name of the virtual machine extension.
   * @param extensionParameters Parameters supplied to the Create Virtual Machine Extension
   * operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, vmScaleSetName: string, instanceId: string, vmExtensionName: string, extensionParameters: Models.VirtualMachineScaleSetVMExtension, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        vmScaleSetName,
        instanceId,
        vmExtensionName,
        extensionParameters,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * The operation to update the VMSS VM extension.
   * @param resourceGroupName The name of the resource group.
   * @param vmScaleSetName The name of the VM scale set.
   * @param instanceId The instance ID of the virtual machine.
   * @param vmExtensionName The name of the virtual machine extension.
   * @param extensionParameters Parameters supplied to the Update Virtual Machine Extension
   * operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(resourceGroupName: string, vmScaleSetName: string, instanceId: string, vmExtensionName: string, extensionParameters: Models.VirtualMachineScaleSetVMExtensionUpdate, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        vmScaleSetName,
        instanceId,
        vmExtensionName,
        extensionParameters,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * The operation to delete the VMSS VM extension.
   * @param resourceGroupName The name of the resource group.
   * @param vmScaleSetName The name of the VM scale set.
   * @param instanceId The instance ID of the virtual machine.
   * @param vmExtensionName The name of the virtual machine extension.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, vmScaleSetName: string, instanceId: string, vmExtensionName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        vmScaleSetName,
        instanceId,
        vmExtensionName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualMachines/{instanceId}/extensions/{vmExtensionName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.vmScaleSetName,
    Parameters.instanceId,
    Parameters.vmExtensionName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.expand0,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachineScaleSetVMExtension
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualMachines/{instanceId}/extensions",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.vmScaleSetName,
    Parameters.instanceId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.expand0,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachineScaleSetVMExtensionsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualMachines/{instanceId}/extensions/{vmExtensionName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.vmScaleSetName,
    Parameters.instanceId,
    Parameters.vmExtensionName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "extensionParameters",
    mapper: {
      ...Mappers.VirtualMachineScaleSetVMExtension,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachineScaleSetVMExtension
    },
    201: {
      bodyMapper: Mappers.VirtualMachineScaleSetVMExtension
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualMachines/{instanceId}/extensions/{vmExtensionName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.vmScaleSetName,
    Parameters.instanceId,
    Parameters.vmExtensionName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "extensionParameters",
    mapper: {
      ...Mappers.VirtualMachineScaleSetVMExtensionUpdate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachineScaleSetVMExtension
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualMachines/{instanceId}/extensions/{vmExtensionName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.vmScaleSetName,
    Parameters.instanceId,
    Parameters.vmExtensionName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
