/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import type * as coreClient from "@azure/core-client";

/** The List disk access operation response. */
export interface DiskAccessList {
  /** The DiskAccess items on this page */
  value: DiskAccess[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The Private Endpoint resource. */
export interface PrivateEndpoint {
  /**
   * The ARM identifier for Private Endpoint
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
}

/** A collection of information about the state of the connection between service consumer and provider. */
export interface PrivateLinkServiceConnectionState {
  /** Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service. */
  status?: PrivateEndpointServiceConnectionStatus;
  /** The reason for approval/rejection of the connection. */
  description?: string;
  /** A message indicating if changes on the service provider require any updates on the consumer. */
  actionsRequired?: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** The complex type of the extended location. */
export interface ExtendedLocation {
  /** The name of the extended location. */
  name?: string;
  /** The type of the extended location. */
  type?: ExtendedLocationTypes;
}

/** An error response from the Compute service. */
export interface CloudError {
  /** Api error. */
  error?: ApiError;
}

/** Api error. */
export interface ApiError {
  /** The Api error details */
  details?: ApiErrorBase[];
  /** The Api inner error */
  innererror?: InnerError;
  /** The error code. */
  code?: string;
  /** The target of the particular error. */
  target?: string;
  /** The error message. */
  message?: string;
}

/** Api error base. */
export interface ApiErrorBase {
  /** The error code. */
  code?: string;
  /** The target of the particular error. */
  target?: string;
  /** The error message. */
  message?: string;
}

/** Inner error details. */
export interface InnerError {
  /** The exception type. */
  exceptiontype?: string;
  /** The internal error message or exception dump. */
  errordetail?: string;
}

/** The List disk encryption set operation response. */
export interface DiskEncryptionSetList {
  /** The DiskEncryptionSet items on this page */
  value: DiskEncryptionSet[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Key Vault Key Url to be used for server side encryption of Managed Disks and Snapshots */
export interface KeyForDiskEncryptionSet {
  /** Resource id of the KeyVault containing the key or secret. This property is optional and cannot be used if the KeyVault subscription is not the same as the Disk Encryption Set subscription. */
  sourceVault?: SourceVault;
  /** Fully versioned Key Url pointing to a key in KeyVault. Version segment of the Url is required regardless of rotationToLatestKeyVersionEnabled value. */
  keyUrl: string;
}

/** The vault id is an Azure Resource Manager Resource id in the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName} */
export interface SourceVault {
  /** Resource Id */
  id?: string;
}

/** The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks. */
export interface EncryptionSetIdentity {
  /** The type of Managed Identity used by the DiskEncryptionSet. Only SystemAssigned is supported for new creations. Disk Encryption Sets can be updated with Identity type None during migration of subscription to a new Azure Active Directory tenant; it will cause the encrypted resources to lose access to the keys. */
  type?: DiskEncryptionSetIdentityType;
  /**
   * The object id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-identity-principal-id header in the PUT request if the resource has a systemAssigned(implicit) identity
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-client-tenant-id header in the PUT request if the resource has a systemAssigned(implicit) identity
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** The list of user identities associated with the disk encryption set. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'. */
  userAssignedIdentities?: {
    [propertyName: string]: UserAssignedIdentitiesValue;
  };
}

export interface UserAssignedIdentitiesValue {
  /**
   * The principal id of user assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The client id of user assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clientId?: string;
}

/** The List Disks operation response. */
export interface DiskList {
  /** The Disk items on this page */
  value: Disk[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Used for establishing the purchase context of any 3rd Party artifact through MarketPlace. */
export interface DiskPurchasePlan {
  /** The plan ID. */
  name: string;
  /** The publisher ID. */
  publisher: string;
  /** Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element. */
  product: string;
  /** The Offer Promotion Code. */
  promotionCode?: string;
}

/** List of supported capabilities persisted on the disk resource for VM use. */
export interface SupportedCapabilities {
  /** The disk controllers that an OS disk supports. If set it can be SCSI or SCSI, NVME or NVME, SCSI. */
  diskControllerTypes?: string;
  /** True if the image from which the OS disk is created supports accelerated networking. */
  acceleratedNetwork?: boolean;
  /** CPU architecture supported by an OS disk. */
  architecture?: Architecture;
  /** Refers to the security capability of the disk supported to create a Trusted launch or Confidential VM */
  supportedSecurityOption?: SupportedSecurityOption;
}

/** Data used when creating a disk. */
export interface CreationData {
  /** This enumerates the possible sources of a disk's creation. */
  createOption: DiskCreateOption;
  /** Required if createOption is Import. The Azure Resource Manager identifier of the storage account containing the blob to import as a disk. */
  storageAccountId?: string;
  /** Disk source information for PIR or user images. */
  imageReference?: ImageDiskReference;
  /** Required if creating from a Gallery Image. The id/sharedGalleryImageId/communityGalleryImageId of the ImageDiskReference will be the ARM id of the shared galley image version from which to create a disk. */
  galleryImageReference?: ImageDiskReference;
  /** If createOption is Import, this is the URI of a blob to be imported into a managed disk. */
  sourceUri?: string;
  /** If createOption is Copy, this is the ARM id of the source snapshot or disk. */
  sourceResourceId?: string;
  /**
   * If this field is set, this is the unique id identifying the source of this resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceUniqueId?: string;
  /** If createOption is Upload, this is the size of the contents of the upload including the VHD footer. This value should be between 20972032 (20 MiB + 512 bytes for the VHD footer) and 35183298347520 bytes (32 TiB + 512 bytes for the VHD footer). */
  uploadSizeBytes?: number;
  /** Logical sector size in bytes for Ultra disks. Supported values are 512 ad 4096. 4096 is the default. */
  logicalSectorSize?: number;
  /** If createOption is ImportSecure, this is the URI of a blob to be imported into VM guest state. */
  securityDataUri?: string;
  /** If createOption is ImportSecure, this is the URI of a blob to be imported into VM metadata for Confidential VM. */
  securityMetadataUri?: string;
  /** Set this flag to true to get a boost on the performance target of the disk deployed, see here on the respective performance target. This flag can only be set on disk creation time and cannot be disabled after enabled. */
  performancePlus?: boolean;
  /** Required if createOption is CopyFromSanSnapshot. This is the ARM id of the source elastic san volume snapshot. */
  elasticSanResourceId?: string;
  /** If this field is set on a snapshot and createOption is CopyStart, the snapshot will be copied at a quicker speed. */
  provisionedBandwidthCopySpeed?: ProvisionedBandwidthCopyOption;
  /** For snapshots created from Premium SSD v2 or Ultra disk, this property determines the time in minutes the snapshot is retained for instant access to enable faster restore. */
  instantAccessDurationMinutes?: number;
}

/** The source image used for creating the disk. */
export interface ImageDiskReference {
  /** A relative uri containing either a Platform Image Repository, user image, or Azure Compute Gallery image reference. */
  id?: string;
  /** A relative uri containing a direct shared Azure Compute Gallery image reference. */
  sharedGalleryImageId?: string;
  /** A relative uri containing a community Azure Compute Gallery image reference. */
  communityGalleryImageId?: string;
  /** If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null. */
  lun?: number;
}

/** Encryption settings for disk or snapshot */
export interface EncryptionSettingsCollection {
  /** Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged. */
  enabled: boolean;
  /** A collection of encryption settings, one for each disk volume. */
  encryptionSettings?: EncryptionSettingsElement[];
  /** Describes what type of encryption is used for the disks. Once this field is set, it cannot be overwritten. '1.0' corresponds to Azure Disk Encryption with AAD app.'1.1' corresponds to Azure Disk Encryption. */
  encryptionSettingsVersion?: string;
}

/** Encryption settings for one disk volume. */
export interface EncryptionSettingsElement {
  /** Key Vault Secret Url and vault id of the disk encryption key */
  diskEncryptionKey?: KeyVaultAndSecretReference;
  /** Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key. */
  keyEncryptionKey?: KeyVaultAndKeyReference;
}

/** Key Vault Secret Url and vault id of the encryption key */
export interface KeyVaultAndSecretReference {
  /** Resource id of the KeyVault containing the key or secret */
  sourceVault: SourceVault;
  /** Url pointing to a key or secret in KeyVault */
  secretUrl: string;
}

/** Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey */
export interface KeyVaultAndKeyReference {
  /** Resource id of the KeyVault containing the key or secret */
  sourceVault: SourceVault;
  /** Url pointing to a key or secret in KeyVault */
  keyUrl: string;
}

/** Encryption at rest settings for disk or snapshot */
export interface Encryption {
  /** ResourceId of the disk encryption set to use for enabling encryption at rest. */
  diskEncryptionSetId?: string;
  /** The type of key used to encrypt the data of the disk. */
  type?: EncryptionType;
}

export interface ShareInfoElement {
  /**
   * A relative URI containing the ID of the VM that has the disk attached.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vmUri?: string;
}

/** Properties of the disk for which update is pending. */
export interface PropertyUpdatesInProgress {
  /** The target performance tier of the disk if a tier change operation is in progress. */
  targetTier?: string;
}

/** Contains the security related information for the resource. */
export interface DiskSecurityProfile {
  /** Specifies the SecurityType of the VM. Applicable for OS disks only. */
  securityType?: DiskSecurityTypes;
  /** ResourceId of the disk encryption set associated to Confidential VM supported disk encrypted with customer managed key */
  secureVMDiskEncryptionSetId?: string;
}

/** In the case of an availability or connectivity issue with the data disk, specify the behavior of your VM */
export interface AvailabilityPolicy {
  /** Determines on how to handle disks with slow I/O. */
  actionOnDiskDelay?: AvailabilityPolicyDiskDelay;
}

/** The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, UltraSSD_LRS, Premium_ZRS, StandardSSD_ZRS, or PremiumV2_LRS. */
export interface DiskSku {
  /** The sku name. */
  name?: DiskStorageAccountTypes;
  /**
   * The sku tier.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tier?: string;
}

/** The List Snapshots operation response. */
export interface SnapshotList {
  /** A list of snapshots. */
  value: Snapshot[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Indicates the error details if the background copy of a resource created via the CopyStart operation fails. */
export interface CopyCompletionError {
  /** Indicates the error code if the background copy of a resource created via the CopyStart operation fails. */
  errorCode: CopyCompletionErrorReason;
  /** Indicates the error message if the background copy of a resource created via the CopyStart operation fails. */
  errorMessage: string;
}

/** The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS. This is an optional parameter for incremental snapshot and the default behavior is the SKU will be set to the same sku as the previous snapshot */
export interface SnapshotSku {
  /** The sku name. */
  name?: SnapshotStorageAccountTypes;
  /**
   * The sku tier.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tier?: string;
}

/** Used for updating a disk access resource. */
export interface DiskAccessUpdate {
  /** Resource tags */
  tags?: { [propertyName: string]: string };
}

/** A list of private link resources */
export interface PrivateEndpointConnectionListResult {
  /** The PrivateEndpointConnection items on this page */
  value: PrivateEndpointConnection[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** A list of private link resources */
export interface PrivateLinkResourceListResult {
  /** Array of private link resources */
  value?: PrivateLinkResource[];
}

/** A private link resource */
export interface PrivateLinkResource {
  /**
   * private link resource Id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * private link resource name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * private link resource type
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The private link resource group id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly groupId?: string;
  /**
   * The private link resource required member names.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly requiredMembers?: string[];
  /** The private link resource DNS zone name. */
  requiredZoneNames?: string[];
}

/** disk encryption set update resource. */
export interface DiskEncryptionSetUpdate {
  /** Resource tags */
  tags?: { [propertyName: string]: string };
  /** The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks. */
  identity?: EncryptionSetIdentity;
  /** The type of key used to encrypt the data of the disk. */
  encryptionType?: DiskEncryptionSetType;
  /** Key Vault Key Url to be used for server side encryption of Managed Disks and Snapshots */
  activeKey?: KeyForDiskEncryptionSet;
  /** Set this flag to true to enable auto-updating of this disk encryption set to the latest key version. */
  rotationToLatestKeyVersionEnabled?: boolean;
  /** Multi-tenant application client id to access key vault in a different tenant. Setting the value to 'None' will clear the property. */
  federatedClientId?: string;
}

/** The List resources which are encrypted with the disk encryption set. */
export interface ResourceUriList {
  /** A list of IDs or Owner IDs of resources which are encrypted with the disk encryption set. */
  value: string[];
  /** The uri to fetch the next page of encrypted resources. Call ListNext() with this to fetch the next page of encrypted resources. */
  nextLink?: string;
}

/** Disk update resource. */
export interface DiskUpdate {
  /** Resource tags */
  tags?: { [propertyName: string]: string };
  /** The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, UltraSSD_LRS, Premium_ZRS, StandardSSD_ZRS, or PremiumV2_LRS. */
  sku?: DiskSku;
  /** the Operating System type. */
  osType?: OperatingSystemTypes;
  /** If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size. */
  diskSizeGB?: number;
  /** Encryption settings collection used be Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot. */
  encryptionSettingsCollection?: EncryptionSettingsCollection;
  /** The number of IOPS allowed for this disk; only settable for UltraSSD disks. One operation can transfer between 4k and 256k bytes. */
  diskIopsReadWrite?: number;
  /** The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10. */
  diskMBpsReadWrite?: number;
  /** The total number of IOPS that will be allowed across all VMs mounting the shared disk as ReadOnly. One operation can transfer between 4k and 256k bytes. */
  diskIopsReadOnly?: number;
  /** The total throughput (MBps) that will be allowed across all VMs mounting the shared disk as ReadOnly. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10. */
  diskMBpsReadOnly?: number;
  /** The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time. */
  maxShares?: number;
  /** Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys. */
  encryption?: Encryption;
  /** Policy for accessing the disk via network. */
  networkAccessPolicy?: NetworkAccessPolicy;
  /** ARM id of the DiskAccess resource for using private endpoints on disks. */
  diskAccessId?: string;
  /** Performance tier of the disk (e.g, P4, S10) as described here: https://azure.microsoft.com/en-us/pricing/details/managed-disks/. Does not apply to Ultra disks. */
  tier?: string;
  /** Set to true to enable bursting beyond the provisioned performance target of the disk. Bursting is disabled by default. Does not apply to Ultra disks. */
  burstingEnabled?: boolean;
  /** Purchase plan information to be added on the OS disk */
  purchasePlan?: DiskPurchasePlan;
  /** List of supported capabilities to be added on the OS disk. */
  supportedCapabilities?: SupportedCapabilities;
  /**
   * Properties of the disk for which update is pending.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly propertyUpdatesInProgress?: PropertyUpdatesInProgress;
  /** Indicates the OS on a disk supports hibernation. */
  supportsHibernation?: boolean;
  /** Policy for controlling export on the disk. */
  publicNetworkAccess?: PublicNetworkAccess;
  /** Additional authentication requirements when exporting or uploading to a disk or snapshot. */
  dataAccessAuthMode?: DataAccessAuthMode;
  /** Setting this property to true improves reliability and performance of data disks that are frequently (more than 5 times a day) by detached from one virtual machine and attached to another. This property should not be set for disks that are not detached and attached frequently as it causes the disks to not align with the fault domain of the virtual machine. */
  optimizedForFrequentAttach?: boolean;
  /** Determines how platform treats disk failures */
  availabilityPolicy?: AvailabilityPolicy;
}

/** Data used for requesting a SAS. */
export interface GrantAccessData {
  /** The Access Level, accepted values include None, Read, Write. */
  access: AccessLevel;
  /** Time duration in seconds until the SAS access expires. */
  durationInSeconds: number;
  /** Set this flag to true to get additional SAS for VM guest state */
  getSecureVMGuestStateSAS?: boolean;
  /** Used to specify the file format when making request for SAS on a VHDX file format snapshot */
  fileFormat?: FileFormat;
}

/** A disk access SAS uri. */
export interface AccessUri {
  /**
   * A SAS uri for accessing a disk.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly accessSAS?: string;
  /**
   * A SAS uri for accessing a VM guest state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly securityDataAccessSAS?: string;
  /**
   * A SAS uri for accessing a VM metadata.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly securityMetadataAccessSAS?: string;
}

/** The List Disk Restore Points operation response. */
export interface DiskRestorePointList {
  /** The DiskRestorePoint items on this page */
  value: DiskRestorePoint[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Snapshot update resource. */
export interface SnapshotUpdate {
  /** Resource tags */
  tags?: { [propertyName: string]: string };
  /** The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS. This is an optional parameter for incremental snapshot and the default behavior is the SKU will be set to the same sku as the previous snapshot */
  sku?: SnapshotSku;
  /** the Operating System type. */
  osType?: OperatingSystemTypes;
  /** If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size. */
  diskSizeGB?: number;
  /** Encryption settings collection used be Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot. */
  encryptionSettingsCollection?: EncryptionSettingsCollection;
  /** Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys. */
  encryption?: Encryption;
  /** Policy for accessing the disk via network. */
  networkAccessPolicy?: NetworkAccessPolicy;
  /** ARM id of the DiskAccess resource for using private endpoints on disks. */
  diskAccessId?: string;
  /** Indicates the OS on a snapshot supports hibernation. */
  supportsHibernation?: boolean;
  /** Policy for controlling export on the disk. */
  publicNetworkAccess?: PublicNetworkAccess;
  /** Additional authentication requirements when exporting or uploading to a disk or snapshot. */
  dataAccessAuthMode?: DataAccessAuthMode;
  /** List of supported capabilities for the image from which the OS disk was created. */
  supportedCapabilities?: SupportedCapabilities;
  /**
   * The state of snapshot which determines the access availability of the snapshot.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly snapshotAccessState?: SnapshotAccessState;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export interface TrackedResource extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
}

/** The Private Endpoint Connection resource. */
export interface PrivateEndpointConnection extends ProxyResource {
  /**
   * The resource of private end point.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly privateEndpoint?: PrivateEndpoint;
  /** A collection of information about the state of the connection between DiskAccess and Virtual Network. */
  privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
  /**
   * The provisioning state of the private endpoint connection resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: PrivateEndpointConnectionProvisioningState;
}

/** Properties of disk restore point */
export interface DiskRestorePoint extends ProxyResource {
  /**
   * The timestamp of restorePoint creation
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly timeCreated?: Date;
  /**
   * arm id of source disk or source disk restore point.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceResourceId?: string;
  /**
   * The Operating System type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osType?: OperatingSystemTypes;
  /** The hypervisor generation of the Virtual Machine. Applicable to OS disks only. */
  hyperVGeneration?: HyperVGeneration;
  /** Purchase plan information for the the image from which the OS disk was created. */
  purchasePlan?: DiskPurchasePlan;
  /** List of supported capabilities for the image from which the OS disk was created. */
  supportedCapabilities?: SupportedCapabilities;
  /**
   * id of the backing snapshot's MIS family
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly familyId?: string;
  /**
   * unique incarnation id of the source disk
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceUniqueId?: string;
  /**
   * Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly encryption?: Encryption;
  /** Indicates the OS on a disk supports hibernation. */
  supportsHibernation?: boolean;
  /** Policy for accessing the disk via network. */
  networkAccessPolicy?: NetworkAccessPolicy;
  /** Policy for controlling export on the disk. */
  publicNetworkAccess?: PublicNetworkAccess;
  /** ARM id of the DiskAccess resource for using private endpoints on disks. */
  diskAccessId?: string;
  /** Percentage complete for the background copy of disk restore point when source resource is from a different region. */
  completionPercent?: number;
  /**
   * Replication state of disk restore point when source resource is from a different region.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly replicationState?: string;
  /**
   * Location of source disk or source disk restore point when source resource is from a different region.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceResourceLocation?: string;
  /** Contains the security related information for the resource. */
  securityProfile?: DiskSecurityProfile;
  /**
   * Logical sector size in bytes for disk restore points of UltraSSD_LRS and PremiumV2_LRS disks. Supported values are 512 and 4096. 4096 is the default.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly logicalSectorSize?: number;
}

/** disk access resource. */
export interface DiskAccess extends TrackedResource {
  /** The extended location where the disk access will be created. Extended location cannot be changed. */
  extendedLocation?: ExtendedLocation;
  /**
   * A readonly collection of private endpoint connections created on the disk. Currently only one endpoint connection is supported.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly privateEndpointConnections?: PrivateEndpointConnection[];
  /**
   * The disk access resource provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The time when the disk access was created.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly timeCreated?: Date;
}

/** disk encryption set resource. */
export interface DiskEncryptionSet extends TrackedResource {
  /** The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks. */
  identity?: EncryptionSetIdentity;
  /** The type of key used to encrypt the data of the disk. */
  encryptionType?: DiskEncryptionSetType;
  /** The key vault key which is currently used by this disk encryption set. */
  activeKey?: KeyForDiskEncryptionSet;
  /**
   * A readonly collection of key vault keys previously used by this disk encryption set while a key rotation is in progress. It will be empty if there is no ongoing key rotation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly previousKeys?: KeyForDiskEncryptionSet[];
  /**
   * The disk encryption set provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** Set this flag to true to enable auto-updating of this disk encryption set to the latest key version. */
  rotationToLatestKeyVersionEnabled?: boolean;
  /**
   * The time when the active key of this disk encryption set was updated.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastKeyRotationTimestamp?: Date;
  /**
   * The error that was encountered during auto-key rotation. If an error is present, then auto-key rotation will not be attempted until the error on this disk encryption set is fixed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly autoKeyRotationError?: ApiError;
  /** Multi-tenant application client id to access key vault in a different tenant. Setting the value to 'None' will clear the property. */
  federatedClientId?: string;
}

/** Disk resource. */
export interface Disk extends TrackedResource {
  /**
   * A relative URI containing the ID of the VM that has the disk attached.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly managedBy?: string;
  /**
   * List of relative URIs containing the IDs of the VMs that have the disk attached. maxShares should be set to a value greater than one for disks to allow attaching them to multiple VMs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly managedByExtended?: string[];
  /** The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, UltraSSD_LRS, Premium_ZRS, StandardSSD_ZRS, or PremiumV2_LRS. */
  sku?: DiskSku;
  /** The Logical zone list for Disk. */
  zones?: string[];
  /** The extended location where the disk will be created. Extended location cannot be changed. */
  extendedLocation?: ExtendedLocation;
  /**
   * The time when the disk was created.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly timeCreated?: Date;
  /** The Operating System type. */
  osType?: OperatingSystemTypes;
  /** The hypervisor generation of the Virtual Machine. Applicable to OS disks only. */
  hyperVGeneration?: HyperVGeneration;
  /** Purchase plan information for the the image from which the OS disk was created. E.g. - {name: 2019-Datacenter, publisher: MicrosoftWindowsServer, product: WindowsServer} */
  purchasePlan?: DiskPurchasePlan;
  /** List of supported capabilities for the image from which the OS disk was created. */
  supportedCapabilities?: SupportedCapabilities;
  /** Disk source information. CreationData information cannot be changed after the disk has been created. */
  creationData?: CreationData;
  /** If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size. */
  diskSizeGB?: number;
  /**
   * The size of the disk in bytes. This field is read only.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly diskSizeBytes?: number;
  /**
   * Unique Guid identifying the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueId?: string;
  /** Encryption settings collection used for Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot. */
  encryptionSettingsCollection?: EncryptionSettingsCollection;
  /**
   * The disk provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** The number of IOPS allowed for this disk; only settable for UltraSSD disks. One operation can transfer between 4k and 256k bytes. */
  diskIopsReadWrite?: number;
  /** The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10. */
  diskMBpsReadWrite?: number;
  /** The total number of IOPS that will be allowed across all VMs mounting the shared disk as ReadOnly. One operation can transfer between 4k and 256k bytes. */
  diskIopsReadOnly?: number;
  /** The total throughput (MBps) that will be allowed across all VMs mounting the shared disk as ReadOnly. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10. */
  diskMBpsReadOnly?: number;
  /**
   * The state of the disk.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly diskState?: DiskState;
  /** Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys. */
  encryption?: Encryption;
  /** The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time. */
  maxShares?: number;
  /**
   * Details of the list of all VMs that have the disk attached. maxShares should be set to a value greater than one for disks to allow attaching them to multiple VMs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly shareInfo?: ShareInfoElement[];
  /** Policy for accessing the disk via network. */
  networkAccessPolicy?: NetworkAccessPolicy;
  /** ARM id of the DiskAccess resource for using private endpoints on disks. */
  diskAccessId?: string;
  /**
   * Latest time when bursting was last enabled on a disk.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly burstingEnabledTime?: Date;
  /** Performance tier of the disk (e.g, P4, S10) as described here: https://azure.microsoft.com/en-us/pricing/details/managed-disks/. Does not apply to Ultra disks. */
  tier?: string;
  /** Set to true to enable bursting beyond the provisioned performance target of the disk. Bursting is disabled by default. Does not apply to Ultra disks. */
  burstingEnabled?: boolean;
  /**
   * Properties of the disk for which update is pending.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly propertyUpdatesInProgress?: PropertyUpdatesInProgress;
  /** Indicates the OS on a disk supports hibernation. */
  supportsHibernation?: boolean;
  /** Contains the security related information for the resource. */
  securityProfile?: DiskSecurityProfile;
  /** Percentage complete for the background copy when a resource is created via the CopyStart operation. */
  completionPercent?: number;
  /** Policy for controlling export on the disk. */
  publicNetworkAccess?: PublicNetworkAccess;
  /** Additional authentication requirements when exporting or uploading to a disk or snapshot. */
  dataAccessAuthMode?: DataAccessAuthMode;
  /** Setting this property to true improves reliability and performance of data disks that are frequently (more than 5 times a day) by detached from one virtual machine and attached to another. This property should not be set for disks that are not detached and attached frequently as it causes the disks to not align with the fault domain of the virtual machine. */
  optimizedForFrequentAttach?: boolean;
  /**
   * The UTC time when the ownership state of the disk was last changed i.e., the time the disk was last attached or detached from a VM or the time when the VM to which the disk was attached was deallocated or started.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastOwnershipUpdateTime?: Date;
  /** Determines how platform treats disk failures */
  availabilityPolicy?: AvailabilityPolicy;
}

/** Snapshot resource. */
export interface Snapshot extends TrackedResource {
  /**
   * Unused. Always Null.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly managedBy?: string;
  /** The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS. This is an optional parameter for incremental snapshot and the default behavior is the SKU will be set to the same sku as the previous snapshot */
  sku?: SnapshotSku;
  /** The extended location where the snapshot will be created. Extended location cannot be changed. */
  extendedLocation?: ExtendedLocation;
  /**
   * The time when the snapshot was created.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly timeCreated?: Date;
  /** The Operating System type. */
  osType?: OperatingSystemTypes;
  /** The hypervisor generation of the Virtual Machine. Applicable to OS disks only. */
  hyperVGeneration?: HyperVGeneration;
  /** Purchase plan information for the image from which the source disk for the snapshot was originally created. */
  purchasePlan?: DiskPurchasePlan;
  /** List of supported capabilities for the image from which the source disk from the snapshot was originally created. */
  supportedCapabilities?: SupportedCapabilities;
  /** Disk source information. CreationData information cannot be changed after the disk has been created. */
  creationData?: CreationData;
  /** If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size. */
  diskSizeGB?: number;
  /**
   * The size of the disk in bytes. This field is read only.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly diskSizeBytes?: number;
  /**
   * The state of the snapshot.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly diskState?: DiskState;
  /**
   * Unique Guid identifying the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueId?: string;
  /** Encryption settings collection used be Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot. */
  encryptionSettingsCollection?: EncryptionSettingsCollection;
  /**
   * The disk provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** Whether a snapshot is incremental. Incremental snapshots on the same disk occupy less space than full snapshots and can be diffed. */
  incremental?: boolean;
  /**
   * Incremental snapshots for a disk share an incremental snapshot family id. The Get Page Range Diff API can only be called on incremental snapshots with the same family id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly incrementalSnapshotFamilyId?: string;
  /** Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys. */
  encryption?: Encryption;
  /** Policy for accessing the disk via network. */
  networkAccessPolicy?: NetworkAccessPolicy;
  /** ARM id of the DiskAccess resource for using private endpoints on disks. */
  diskAccessId?: string;
  /** Contains the security related information for the resource. */
  securityProfile?: DiskSecurityProfile;
  /** Indicates the OS on a snapshot supports hibernation. */
  supportsHibernation?: boolean;
  /** Policy for controlling export on the disk. */
  publicNetworkAccess?: PublicNetworkAccess;
  /** Percentage complete for the background copy when a resource is created via the CopyStart operation. */
  completionPercent?: number;
  /** Indicates the error details if the background copy of a resource created via the CopyStart operation fails. */
  copyCompletionError?: CopyCompletionError;
  /** Additional authentication requirements when exporting or uploading to a disk or snapshot. */
  dataAccessAuthMode?: DataAccessAuthMode;
  /**
   * The state of snapshot which determines the access availability of the snapshot.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly snapshotAccessState?: SnapshotAccessState;
}

/** Defines headers for DiskAccesses_createOrUpdate operation. */
export interface DiskAccessesCreateOrUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for DiskAccesses_update operation. */
export interface DiskAccessesUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for DiskAccesses_delete operation. */
export interface DiskAccessesDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for DiskAccesses_updateAPrivateEndpointConnection operation. */
export interface DiskAccessesUpdateAPrivateEndpointConnectionHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for DiskAccesses_deleteAPrivateEndpointConnection operation. */
export interface DiskAccessesDeleteAPrivateEndpointConnectionHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for DiskEncryptionSets_createOrUpdate operation. */
export interface DiskEncryptionSetsCreateOrUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for DiskEncryptionSets_update operation. */
export interface DiskEncryptionSetsUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for DiskEncryptionSets_delete operation. */
export interface DiskEncryptionSetsDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Disks_createOrUpdate operation. */
export interface DisksCreateOrUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Disks_update operation. */
export interface DisksUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Disks_delete operation. */
export interface DisksDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Disks_grantAccess operation. */
export interface DisksGrantAccessHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Disks_revokeAccess operation. */
export interface DisksRevokeAccessHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Snapshots_createOrUpdate operation. */
export interface SnapshotsCreateOrUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Snapshots_update operation. */
export interface SnapshotsUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Snapshots_delete operation. */
export interface SnapshotsDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Snapshots_grantAccess operation. */
export interface SnapshotsGrantAccessHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Snapshots_revokeAccess operation. */
export interface SnapshotsRevokeAccessHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for DiskRestorePoint_grantAccess operation. */
export interface DiskRestorePointGrantAccessHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for DiskRestorePoint_revokeAccess operation. */
export interface DiskRestorePointRevokeAccessHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Known values of {@link PrivateEndpointServiceConnectionStatus} that the service accepts. */
export enum KnownPrivateEndpointServiceConnectionStatus {
  /** Pending */
  Pending = "Pending",
  /** Approved */
  Approved = "Approved",
  /** Rejected */
  Rejected = "Rejected",
}

/**
 * Defines values for PrivateEndpointServiceConnectionStatus. \
 * {@link KnownPrivateEndpointServiceConnectionStatus} can be used interchangeably with PrivateEndpointServiceConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Approved** \
 * **Rejected**
 */
export type PrivateEndpointServiceConnectionStatus = string;

/** Known values of {@link PrivateEndpointConnectionProvisioningState} that the service accepts. */
export enum KnownPrivateEndpointConnectionProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Creating */
  Creating = "Creating",
  /** Deleting */
  Deleting = "Deleting",
  /** Failed */
  Failed = "Failed",
}

/**
 * Defines values for PrivateEndpointConnectionProvisioningState. \
 * {@link KnownPrivateEndpointConnectionProvisioningState} can be used interchangeably with PrivateEndpointConnectionProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Creating** \
 * **Deleting** \
 * **Failed**
 */
export type PrivateEndpointConnectionProvisioningState = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key",
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link ExtendedLocationTypes} that the service accepts. */
export enum KnownExtendedLocationTypes {
  /** EdgeZone */
  EdgeZone = "EdgeZone",
}

/**
 * Defines values for ExtendedLocationTypes. \
 * {@link KnownExtendedLocationTypes} can be used interchangeably with ExtendedLocationTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **EdgeZone**
 */
export type ExtendedLocationTypes = string;

/** Known values of {@link DiskEncryptionSetType} that the service accepts. */
export enum KnownDiskEncryptionSetType {
  /** Resource using diskEncryptionSet would be encrypted at rest with Customer managed key that can be changed and revoked by a customer. */
  EncryptionAtRestWithCustomerKey = "EncryptionAtRestWithCustomerKey",
  /** Resource using diskEncryptionSet would be encrypted at rest with two layers of encryption. One of the keys is Customer managed and the other key is Platform managed. */
  EncryptionAtRestWithPlatformAndCustomerKeys = "EncryptionAtRestWithPlatformAndCustomerKeys",
  /** Confidential VM supported disk and VM guest state would be encrypted with customer managed key. */
  ConfidentialVmEncryptedWithCustomerKey = "ConfidentialVmEncryptedWithCustomerKey",
}

/**
 * Defines values for DiskEncryptionSetType. \
 * {@link KnownDiskEncryptionSetType} can be used interchangeably with DiskEncryptionSetType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **EncryptionAtRestWithCustomerKey**: Resource using diskEncryptionSet would be encrypted at rest with Customer managed key that can be changed and revoked by a customer. \
 * **EncryptionAtRestWithPlatformAndCustomerKeys**: Resource using diskEncryptionSet would be encrypted at rest with two layers of encryption. One of the keys is Customer managed and the other key is Platform managed. \
 * **ConfidentialVmEncryptedWithCustomerKey**: Confidential VM supported disk and VM guest state would be encrypted with customer managed key.
 */
export type DiskEncryptionSetType = string;

/** Known values of {@link DiskEncryptionSetIdentityType} that the service accepts. */
export enum KnownDiskEncryptionSetIdentityType {
  /** SystemAssigned */
  SystemAssigned = "SystemAssigned",
  /** UserAssigned */
  UserAssigned = "UserAssigned",
  /** SystemAssignedUserAssigned */
  SystemAssignedUserAssigned = "SystemAssigned, UserAssigned",
  /** None */
  None = "None",
}

/**
 * Defines values for DiskEncryptionSetIdentityType. \
 * {@link KnownDiskEncryptionSetIdentityType} can be used interchangeably with DiskEncryptionSetIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAssigned, UserAssigned** \
 * **None**
 */
export type DiskEncryptionSetIdentityType = string;

/** Known values of {@link HyperVGeneration} that the service accepts. */
export enum KnownHyperVGeneration {
  /** V1 */
  V1 = "V1",
  /** V2 */
  V2 = "V2",
}

/**
 * Defines values for HyperVGeneration. \
 * {@link KnownHyperVGeneration} can be used interchangeably with HyperVGeneration,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **V1** \
 * **V2**
 */
export type HyperVGeneration = string;

/** Known values of {@link Architecture} that the service accepts. */
export enum KnownArchitecture {
  /** X64 */
  X64 = "x64",
  /** Arm64 */
  Arm64 = "Arm64",
}

/**
 * Defines values for Architecture. \
 * {@link KnownArchitecture} can be used interchangeably with Architecture,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **x64** \
 * **Arm64**
 */
export type Architecture = string;

/** Known values of {@link SupportedSecurityOption} that the service accepts. */
export enum KnownSupportedSecurityOption {
  /** The disk supports creating Trusted Launch VMs. */
  TrustedLaunchSupported = "TrustedLaunchSupported",
  /** The disk supports creating both Trusted Launch and Confidential VMs. */
  TrustedLaunchAndConfidentialVMSupported = "TrustedLaunchAndConfidentialVMSupported",
}

/**
 * Defines values for SupportedSecurityOption. \
 * {@link KnownSupportedSecurityOption} can be used interchangeably with SupportedSecurityOption,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **TrustedLaunchSupported**: The disk supports creating Trusted Launch VMs. \
 * **TrustedLaunchAndConfidentialVMSupported**: The disk supports creating both Trusted Launch and Confidential VMs.
 */
export type SupportedSecurityOption = string;

/** Known values of {@link DiskCreateOption} that the service accepts. */
export enum KnownDiskCreateOption {
  /** Create an empty data disk of a size given by diskSizeGB. */
  Empty = "Empty",
  /** Disk will be attached to a VM. */
  Attach = "Attach",
  /** Create a new disk from a platform image specified by the given imageReference or galleryImageReference. */
  FromImage = "FromImage",
  /** Create a disk by importing from a blob specified by a sourceUri in a storage account specified by storageAccountId. */
  Import = "Import",
  /** Create a new disk or snapshot by copying from a disk or snapshot specified by the given sourceResourceId. */
  Copy = "Copy",
  /** Create a new disk by copying from a backup recovery point. */
  Restore = "Restore",
  /** Create a new disk by obtaining a write token and using it to directly upload the contents of the disk. */
  Upload = "Upload",
  /** Create a new disk by using a deep copy process, where the resource creation is considered complete only after all data has been copied from the source. */
  CopyStart = "CopyStart",
  /** Similar to Import create option. Create a new Trusted Launch VM or Confidential VM supported disk by importing additional blobs for VM guest state specified by securityDataUri and VM metadata specified by securityMetadataUri in storage account specified by storageAccountId. The VM metadata is optional and only required for certain Confidential VM configurations and not required for Trusted Launch VM. */
  ImportSecure = "ImportSecure",
  /** Similar to Upload create option. Create a new Trusted Launch VM or Confidential VM supported disk and upload using write token in disk, VM guest state and VM metadata. The VM metadata is optional and only required for certain Confidential VM configurations and not required for Trusted Launch VM. */
  UploadPreparedSecure = "UploadPreparedSecure",
  /** Create a new disk by exporting from elastic san volume snapshot */
  CopyFromSanSnapshot = "CopyFromSanSnapshot",
}

/**
 * Defines values for DiskCreateOption. \
 * {@link KnownDiskCreateOption} can be used interchangeably with DiskCreateOption,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Empty**: Create an empty data disk of a size given by diskSizeGB. \
 * **Attach**: Disk will be attached to a VM. \
 * **FromImage**: Create a new disk from a platform image specified by the given imageReference or galleryImageReference. \
 * **Import**: Create a disk by importing from a blob specified by a sourceUri in a storage account specified by storageAccountId. \
 * **Copy**: Create a new disk or snapshot by copying from a disk or snapshot specified by the given sourceResourceId. \
 * **Restore**: Create a new disk by copying from a backup recovery point. \
 * **Upload**: Create a new disk by obtaining a write token and using it to directly upload the contents of the disk. \
 * **CopyStart**: Create a new disk by using a deep copy process, where the resource creation is considered complete only after all data has been copied from the source. \
 * **ImportSecure**: Similar to Import create option. Create a new Trusted Launch VM or Confidential VM supported disk by importing additional blobs for VM guest state specified by securityDataUri and VM metadata specified by securityMetadataUri in storage account specified by storageAccountId. The VM metadata is optional and only required for certain Confidential VM configurations and not required for Trusted Launch VM. \
 * **UploadPreparedSecure**: Similar to Upload create option. Create a new Trusted Launch VM or Confidential VM supported disk and upload using write token in disk, VM guest state and VM metadata. The VM metadata is optional and only required for certain Confidential VM configurations and not required for Trusted Launch VM. \
 * **CopyFromSanSnapshot**: Create a new disk by exporting from elastic san volume snapshot
 */
export type DiskCreateOption = string;

/** Known values of {@link ProvisionedBandwidthCopyOption} that the service accepts. */
export enum KnownProvisionedBandwidthCopyOption {
  /** None */
  None = "None",
  /** Enhanced */
  Enhanced = "Enhanced",
}

/**
 * Defines values for ProvisionedBandwidthCopyOption. \
 * {@link KnownProvisionedBandwidthCopyOption} can be used interchangeably with ProvisionedBandwidthCopyOption,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Enhanced**
 */
export type ProvisionedBandwidthCopyOption = string;

/** Known values of {@link DiskState} that the service accepts. */
export enum KnownDiskState {
  /** The disk is not being used and can be attached to a VM. */
  Unattached = "Unattached",
  /** The disk is currently attached to a running VM. */
  Attached = "Attached",
  /** The disk is attached to a stopped-deallocated VM. */
  Reserved = "Reserved",
  /** The disk is attached to a VM which is in hibernated state. */
  Frozen = "Frozen",
  /** The disk currently has an Active SAS Uri associated with it. */
  ActiveSAS = "ActiveSAS",
  /** The disk is attached to a VM in hibernated state and has an active SAS URI associated with it. */
  ActiveSASFrozen = "ActiveSASFrozen",
  /** A disk is ready to be created by upload by requesting a write token. */
  ReadyToUpload = "ReadyToUpload",
  /** A disk is created for upload and a write token has been issued for uploading to it. */
  ActiveUpload = "ActiveUpload",
}

/**
 * Defines values for DiskState. \
 * {@link KnownDiskState} can be used interchangeably with DiskState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unattached**: The disk is not being used and can be attached to a VM. \
 * **Attached**: The disk is currently attached to a running VM. \
 * **Reserved**: The disk is attached to a stopped-deallocated VM. \
 * **Frozen**: The disk is attached to a VM which is in hibernated state. \
 * **ActiveSAS**: The disk currently has an Active SAS Uri associated with it. \
 * **ActiveSASFrozen**: The disk is attached to a VM in hibernated state and has an active SAS URI associated with it. \
 * **ReadyToUpload**: A disk is ready to be created by upload by requesting a write token. \
 * **ActiveUpload**: A disk is created for upload and a write token has been issued for uploading to it.
 */
export type DiskState = string;

/** Known values of {@link EncryptionType} that the service accepts. */
export enum KnownEncryptionType {
  /** Disk is encrypted at rest with Platform managed key. It is the default encryption type. This is not a valid encryption type for disk encryption sets. */
  EncryptionAtRestWithPlatformKey = "EncryptionAtRestWithPlatformKey",
  /** Disk is encrypted at rest with Customer managed key that can be changed and revoked by a customer. */
  EncryptionAtRestWithCustomerKey = "EncryptionAtRestWithCustomerKey",
  /** Disk is encrypted at rest with 2 layers of encryption. One of the keys is Customer managed and the other key is Platform managed. */
  EncryptionAtRestWithPlatformAndCustomerKeys = "EncryptionAtRestWithPlatformAndCustomerKeys",
}

/**
 * Defines values for EncryptionType. \
 * {@link KnownEncryptionType} can be used interchangeably with EncryptionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **EncryptionAtRestWithPlatformKey**: Disk is encrypted at rest with Platform managed key. It is the default encryption type. This is not a valid encryption type for disk encryption sets. \
 * **EncryptionAtRestWithCustomerKey**: Disk is encrypted at rest with Customer managed key that can be changed and revoked by a customer. \
 * **EncryptionAtRestWithPlatformAndCustomerKeys**: Disk is encrypted at rest with 2 layers of encryption. One of the keys is Customer managed and the other key is Platform managed.
 */
export type EncryptionType = string;

/** Known values of {@link NetworkAccessPolicy} that the service accepts. */
export enum KnownNetworkAccessPolicy {
  /** The disk can be exported or uploaded to from any network. */
  AllowAll = "AllowAll",
  /** The disk can be exported or uploaded to using a DiskAccess resource's private endpoints. */
  AllowPrivate = "AllowPrivate",
  /** The disk cannot be exported. */
  DenyAll = "DenyAll",
}

/**
 * Defines values for NetworkAccessPolicy. \
 * {@link KnownNetworkAccessPolicy} can be used interchangeably with NetworkAccessPolicy,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AllowAll**: The disk can be exported or uploaded to from any network. \
 * **AllowPrivate**: The disk can be exported or uploaded to using a DiskAccess resource's private endpoints. \
 * **DenyAll**: The disk cannot be exported.
 */
export type NetworkAccessPolicy = string;

/** Known values of {@link DiskSecurityTypes} that the service accepts. */
export enum KnownDiskSecurityTypes {
  /** Trusted Launch provides security features such as secure boot and virtual Trusted Platform Module (vTPM) */
  TrustedLaunch = "TrustedLaunch",
  /** Indicates Confidential VM disk with only VM guest state encrypted */
  ConfidentialVMVmguestStateOnlyEncryptedWithPlatformKey = "ConfidentialVM_VMGuestStateOnlyEncryptedWithPlatformKey",
  /** Indicates Confidential VM disk with both OS disk and VM guest state encrypted with a platform managed key */
  ConfidentialVMDiskEncryptedWithPlatformKey = "ConfidentialVM_DiskEncryptedWithPlatformKey",
  /** Indicates Confidential VM disk with both OS disk and VM guest state encrypted with a customer managed key */
  ConfidentialVMDiskEncryptedWithCustomerKey = "ConfidentialVM_DiskEncryptedWithCustomerKey",
  /** Indicates Confidential VM disk with a ephemeral vTPM. vTPM state is not persisted across VM reboots. */
  ConfidentialVMNonPersistedTPM = "ConfidentialVM_NonPersistedTPM",
}

/**
 * Defines values for DiskSecurityTypes. \
 * {@link KnownDiskSecurityTypes} can be used interchangeably with DiskSecurityTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **TrustedLaunch**: Trusted Launch provides security features such as secure boot and virtual Trusted Platform Module (vTPM) \
 * **ConfidentialVM_VMGuestStateOnlyEncryptedWithPlatformKey**: Indicates Confidential VM disk with only VM guest state encrypted \
 * **ConfidentialVM_DiskEncryptedWithPlatformKey**: Indicates Confidential VM disk with both OS disk and VM guest state encrypted with a platform managed key \
 * **ConfidentialVM_DiskEncryptedWithCustomerKey**: Indicates Confidential VM disk with both OS disk and VM guest state encrypted with a customer managed key \
 * **ConfidentialVM_NonPersistedTPM**: Indicates Confidential VM disk with a ephemeral vTPM. vTPM state is not persisted across VM reboots.
 */
export type DiskSecurityTypes = string;

/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export enum KnownPublicNetworkAccess {
  /** You can generate a SAS URI to access the underlying data of the disk publicly on the internet when NetworkAccessPolicy is set to AllowAll. You can access the data via the SAS URI only from your trusted Azure VNET when NetworkAccessPolicy is set to AllowPrivate. */
  Enabled = "Enabled",
  /** You cannot access the underlying data of the disk publicly on the internet even when NetworkAccessPolicy is set to AllowAll. You can access the data via the SAS URI only from your trusted Azure VNET when NetworkAccessPolicy is set to AllowPrivate. */
  Disabled = "Disabled",
}

/**
 * Defines values for PublicNetworkAccess. \
 * {@link KnownPublicNetworkAccess} can be used interchangeably with PublicNetworkAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled**: You can generate a SAS URI to access the underlying data of the disk publicly on the internet when NetworkAccessPolicy is set to AllowAll. You can access the data via the SAS URI only from your trusted Azure VNET when NetworkAccessPolicy is set to AllowPrivate. \
 * **Disabled**: You cannot access the underlying data of the disk publicly on the internet even when NetworkAccessPolicy is set to AllowAll. You can access the data via the SAS URI only from your trusted Azure VNET when NetworkAccessPolicy is set to AllowPrivate.
 */
export type PublicNetworkAccess = string;

/** Known values of {@link DataAccessAuthMode} that the service accepts. */
export enum KnownDataAccessAuthMode {
  /** When export\/upload URL is used, the system checks if the user has an identity in Azure Active Directory and has necessary permissions to export\/upload the data. Please refer to aka.ms\/DisksAzureADAuth. */
  AzureActiveDirectory = "AzureActiveDirectory",
  /** No additional authentication would be performed when accessing export\/upload URL. */
  None = "None",
}

/**
 * Defines values for DataAccessAuthMode. \
 * {@link KnownDataAccessAuthMode} can be used interchangeably with DataAccessAuthMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AzureActiveDirectory**: When export\/upload URL is used, the system checks if the user has an identity in Azure Active Directory and has necessary permissions to export\/upload the data. Please refer to aka.ms\/DisksAzureADAuth. \
 * **None**: No additional authentication would be performed when accessing export\/upload URL.
 */
export type DataAccessAuthMode = string;

/** Known values of {@link AvailabilityPolicyDiskDelay} that the service accepts. */
export enum KnownAvailabilityPolicyDiskDelay {
  /** Defaults to behavior without av policy specified, which is VM restart upon slow disk io. */
  None = "None",
  /** Upon a disk io failure or slow response, try detaching then reattaching the disk. */
  AutomaticReattach = "AutomaticReattach",
}

/**
 * Defines values for AvailabilityPolicyDiskDelay. \
 * {@link KnownAvailabilityPolicyDiskDelay} can be used interchangeably with AvailabilityPolicyDiskDelay,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None**: Defaults to behavior without av policy specified, which is VM restart upon slow disk io. \
 * **AutomaticReattach**: Upon a disk io failure or slow response, try detaching then reattaching the disk.
 */
export type AvailabilityPolicyDiskDelay = string;

/** Known values of {@link DiskStorageAccountTypes} that the service accepts. */
export enum KnownDiskStorageAccountTypes {
  /** Standard HDD locally redundant storage. Best for backup, non-critical, and infrequent access. */
  StandardLRS = "Standard_LRS",
  /** Premium SSD locally redundant storage. Best for production and performance sensitive workloads. */
  PremiumLRS = "Premium_LRS",
  /** Standard SSD locally redundant storage. Best for web servers, lightly used enterprise applications and dev\/test. */
  StandardSSDLRS = "StandardSSD_LRS",
  /** Ultra SSD locally redundant storage. Best for IO-intensive workloads such as SAP HANA, top tier databases (for example, SQL, Oracle), and other transaction-heavy workloads. */
  UltraSSDLRS = "UltraSSD_LRS",
  /** Premium SSD zone redundant storage. Best for the production workloads that need storage resiliency against zone failures. */
  PremiumZRS = "Premium_ZRS",
  /** Standard SSD zone redundant storage. Best for web servers, lightly used enterprise applications and dev\/test that need storage resiliency against zone failures. */
  StandardSSDZRS = "StandardSSD_ZRS",
  /** Premium SSD v2 locally redundant storage. Best for production and performance-sensitive workloads that consistently require low latency and high IOPS and throughput. */
  PremiumV2LRS = "PremiumV2_LRS",
}

/**
 * Defines values for DiskStorageAccountTypes. \
 * {@link KnownDiskStorageAccountTypes} can be used interchangeably with DiskStorageAccountTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard_LRS**: Standard HDD locally redundant storage. Best for backup, non-critical, and infrequent access. \
 * **Premium_LRS**: Premium SSD locally redundant storage. Best for production and performance sensitive workloads. \
 * **StandardSSD_LRS**: Standard SSD locally redundant storage. Best for web servers, lightly used enterprise applications and dev\/test. \
 * **UltraSSD_LRS**: Ultra SSD locally redundant storage. Best for IO-intensive workloads such as SAP HANA, top tier databases (for example, SQL, Oracle), and other transaction-heavy workloads. \
 * **Premium_ZRS**: Premium SSD zone redundant storage. Best for the production workloads that need storage resiliency against zone failures. \
 * **StandardSSD_ZRS**: Standard SSD zone redundant storage. Best for web servers, lightly used enterprise applications and dev\/test that need storage resiliency against zone failures. \
 * **PremiumV2_LRS**: Premium SSD v2 locally redundant storage. Best for production and performance-sensitive workloads that consistently require low latency and high IOPS and throughput.
 */
export type DiskStorageAccountTypes = string;

/** Known values of {@link CopyCompletionErrorReason} that the service accepts. */
export enum KnownCopyCompletionErrorReason {
  /** Indicates that the source snapshot was deleted while the background copy of the resource created via CopyStart operation was in progress. */
  CopySourceNotFound = "CopySourceNotFound",
}

/**
 * Defines values for CopyCompletionErrorReason. \
 * {@link KnownCopyCompletionErrorReason} can be used interchangeably with CopyCompletionErrorReason,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CopySourceNotFound**: Indicates that the source snapshot was deleted while the background copy of the resource created via CopyStart operation was in progress.
 */
export type CopyCompletionErrorReason = string;

/** Known values of {@link SnapshotAccessState} that the service accepts. */
export enum KnownSnapshotAccessState {
  /** Default value. */
  Unknown = "Unknown",
  /** The snapshot cannot be used for restore, copy or download to offline. */
  Pending = "Pending",
  /** The snapshot can be used for restore, copy to different region, and download to offline. */
  Available = "Available",
  /** The snapshot can be used for restoring disks with fast performance but cannot be copied or downloaded. */
  InstantAccess = "InstantAccess",
  /** The snapshot can be used for restoring disks with fast performance, copied and downloaded. */
  AvailableWithInstantAccess = "AvailableWithInstantAccess",
}

/**
 * Defines values for SnapshotAccessState. \
 * {@link KnownSnapshotAccessState} can be used interchangeably with SnapshotAccessState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown**: Default value. \
 * **Pending**: The snapshot cannot be used for restore, copy or download to offline. \
 * **Available**: The snapshot can be used for restore, copy to different region, and download to offline. \
 * **InstantAccess**: The snapshot can be used for restoring disks with fast performance but cannot be copied or downloaded. \
 * **AvailableWithInstantAccess**: The snapshot can be used for restoring disks with fast performance, copied and downloaded.
 */
export type SnapshotAccessState = string;

/** Known values of {@link SnapshotStorageAccountTypes} that the service accepts. */
export enum KnownSnapshotStorageAccountTypes {
  /** Standard HDD locally redundant storage */
  StandardLRS = "Standard_LRS",
  /** Premium SSD locally redundant storage */
  PremiumLRS = "Premium_LRS",
  /** Standard zone redundant storage */
  StandardZRS = "Standard_ZRS",
}

/**
 * Defines values for SnapshotStorageAccountTypes. \
 * {@link KnownSnapshotStorageAccountTypes} can be used interchangeably with SnapshotStorageAccountTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard_LRS**: Standard HDD locally redundant storage \
 * **Premium_LRS**: Premium SSD locally redundant storage \
 * **Standard_ZRS**: Standard zone redundant storage
 */
export type SnapshotStorageAccountTypes = string;

/** Known values of {@link AccessLevel} that the service accepts. */
export enum KnownAccessLevel {
  /** None */
  None = "None",
  /** Read */
  Read = "Read",
  /** Write */
  Write = "Write",
}

/**
 * Defines values for AccessLevel. \
 * {@link KnownAccessLevel} can be used interchangeably with AccessLevel,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Read** \
 * **Write**
 */
export type AccessLevel = string;

/** Known values of {@link FileFormat} that the service accepts. */
export enum KnownFileFormat {
  /** A VHD file is a disk image file in the Virtual Hard Disk file format. */
  VHD = "VHD",
  /** A VHDX file is a disk image file in the Virtual Hard Disk v2 file format. */
  Vhdx = "VHDX",
}

/**
 * Defines values for FileFormat. \
 * {@link KnownFileFormat} can be used interchangeably with FileFormat,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **VHD**: A VHD file is a disk image file in the Virtual Hard Disk file format. \
 * **VHDX**: A VHDX file is a disk image file in the Virtual Hard Disk v2 file format.
 */
export type FileFormat = string;
/** Defines values for OperatingSystemTypes. */
export type OperatingSystemTypes = "Windows" | "Linux";

/** Optional parameters. */
export interface DiskAccessesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type DiskAccessesListResponse = DiskAccessList;

/** Optional parameters. */
export interface DiskAccessesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type DiskAccessesListByResourceGroupResponse = DiskAccessList;

/** Optional parameters. */
export interface DiskAccessesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DiskAccessesGetResponse = DiskAccess;

/** Optional parameters. */
export interface DiskAccessesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type DiskAccessesCreateOrUpdateResponse = DiskAccess;

/** Optional parameters. */
export interface DiskAccessesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type DiskAccessesUpdateResponse = DiskAccess;

/** Optional parameters. */
export interface DiskAccessesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DiskAccessesListPrivateEndpointConnectionsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listPrivateEndpointConnections operation. */
export type DiskAccessesListPrivateEndpointConnectionsResponse =
  PrivateEndpointConnectionListResult;

/** Optional parameters. */
export interface DiskAccessesGetAPrivateEndpointConnectionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getAPrivateEndpointConnection operation. */
export type DiskAccessesGetAPrivateEndpointConnectionResponse =
  PrivateEndpointConnection;

/** Optional parameters. */
export interface DiskAccessesUpdateAPrivateEndpointConnectionOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateAPrivateEndpointConnection operation. */
export type DiskAccessesUpdateAPrivateEndpointConnectionResponse =
  PrivateEndpointConnection;

/** Optional parameters. */
export interface DiskAccessesDeleteAPrivateEndpointConnectionOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DiskAccessesGetPrivateLinkResourcesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getPrivateLinkResources operation. */
export type DiskAccessesGetPrivateLinkResourcesResponse =
  PrivateLinkResourceListResult;

/** Optional parameters. */
export interface DiskAccessesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type DiskAccessesListNextResponse = DiskAccessList;

/** Optional parameters. */
export interface DiskAccessesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type DiskAccessesListByResourceGroupNextResponse = DiskAccessList;

/** Optional parameters. */
export interface DiskAccessesListPrivateEndpointConnectionsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listPrivateEndpointConnectionsNext operation. */
export type DiskAccessesListPrivateEndpointConnectionsNextResponse =
  PrivateEndpointConnectionListResult;

/** Optional parameters. */
export interface DiskEncryptionSetsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type DiskEncryptionSetsListResponse = DiskEncryptionSetList;

/** Optional parameters. */
export interface DiskEncryptionSetsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type DiskEncryptionSetsListByResourceGroupResponse =
  DiskEncryptionSetList;

/** Optional parameters. */
export interface DiskEncryptionSetsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DiskEncryptionSetsGetResponse = DiskEncryptionSet;

/** Optional parameters. */
export interface DiskEncryptionSetsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type DiskEncryptionSetsCreateOrUpdateResponse = DiskEncryptionSet;

/** Optional parameters. */
export interface DiskEncryptionSetsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type DiskEncryptionSetsUpdateResponse = DiskEncryptionSet;

/** Optional parameters. */
export interface DiskEncryptionSetsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DiskEncryptionSetsListAssociatedResourcesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listAssociatedResources operation. */
export type DiskEncryptionSetsListAssociatedResourcesResponse = ResourceUriList;

/** Optional parameters. */
export interface DiskEncryptionSetsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type DiskEncryptionSetsListNextResponse = DiskEncryptionSetList;

/** Optional parameters. */
export interface DiskEncryptionSetsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type DiskEncryptionSetsListByResourceGroupNextResponse =
  DiskEncryptionSetList;

/** Optional parameters. */
export interface DiskEncryptionSetsListAssociatedResourcesNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listAssociatedResourcesNext operation. */
export type DiskEncryptionSetsListAssociatedResourcesNextResponse =
  ResourceUriList;

/** Optional parameters. */
export interface DisksListOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type DisksListResponse = DiskList;

/** Optional parameters. */
export interface DisksListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type DisksListByResourceGroupResponse = DiskList;

/** Optional parameters. */
export interface DisksGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DisksGetResponse = Disk;

/** Optional parameters. */
export interface DisksCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type DisksCreateOrUpdateResponse = Disk;

/** Optional parameters. */
export interface DisksUpdateOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type DisksUpdateResponse = Disk;

/** Optional parameters. */
export interface DisksDeleteOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DisksGrantAccessOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the grantAccess operation. */
export type DisksGrantAccessResponse = AccessUri;

/** Optional parameters. */
export interface DisksRevokeAccessOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DisksListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type DisksListNextResponse = DiskList;

/** Optional parameters. */
export interface DisksListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type DisksListByResourceGroupNextResponse = DiskList;

/** Optional parameters. */
export interface SnapshotsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type SnapshotsListResponse = SnapshotList;

/** Optional parameters. */
export interface SnapshotsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type SnapshotsListByResourceGroupResponse = SnapshotList;

/** Optional parameters. */
export interface SnapshotsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SnapshotsGetResponse = Snapshot;

/** Optional parameters. */
export interface SnapshotsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type SnapshotsCreateOrUpdateResponse = Snapshot;

/** Optional parameters. */
export interface SnapshotsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type SnapshotsUpdateResponse = Snapshot;

/** Optional parameters. */
export interface SnapshotsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface SnapshotsGrantAccessOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the grantAccess operation. */
export type SnapshotsGrantAccessResponse = AccessUri;

/** Optional parameters. */
export interface SnapshotsRevokeAccessOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface SnapshotsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type SnapshotsListNextResponse = SnapshotList;

/** Optional parameters. */
export interface SnapshotsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type SnapshotsListByResourceGroupNextResponse = SnapshotList;

/** Optional parameters. */
export interface DiskRestorePointListByRestorePointOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByRestorePoint operation. */
export type DiskRestorePointListByRestorePointResponse = DiskRestorePointList;

/** Optional parameters. */
export interface DiskRestorePointGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DiskRestorePointGetResponse = DiskRestorePoint;

/** Optional parameters. */
export interface DiskRestorePointGrantAccessOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the grantAccess operation. */
export type DiskRestorePointGrantAccessResponse = AccessUri;

/** Optional parameters. */
export interface DiskRestorePointRevokeAccessOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DiskRestorePointListByRestorePointNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByRestorePointNext operation. */
export type DiskRestorePointListByRestorePointNextResponse =
  DiskRestorePointList;

/** Optional parameters. */
export interface ComputeManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
