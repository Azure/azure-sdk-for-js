/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import type {
  PipelineRequest,
  PipelineResponse,
  SendRequest,
} from "@azure/core-rest-pipeline";
import type * as coreAuth from "@azure/core-auth";
import {
  OperationsImpl,
  AvailabilitySetsImpl,
  CapacityReservationGroupsImpl,
  DedicatedHostGroupsImpl,
  ImagesImpl,
  VirtualMachineImagesEdgeZoneImpl,
  VirtualMachineImagesImpl,
  LogAnalyticsImpl,
  VirtualMachineExtensionImagesImpl,
  VirtualMachineRunCommandsImpl,
  UsageOperationsImpl,
  VirtualMachineScaleSetsImpl,
  VirtualMachinesImpl,
  VirtualMachineSizesImpl,
  ProximityPlacementGroupsImpl,
  RestorePointCollectionsImpl,
  SshPublicKeysImpl,
  CapacityReservationsImpl,
  DedicatedHostsImpl,
  RestorePointsImpl,
  VirtualMachineScaleSetRollingUpgradesImpl,
  VirtualMachineScaleSetExtensionsImpl,
  VirtualMachineScaleSetVMsImpl,
  VirtualMachineScaleSetVMExtensionsImpl,
  VirtualMachineScaleSetVMRunCommandsImpl,
  VirtualMachineExtensionsImpl,
} from "./operations/index.js";
import type {
  Operations,
  AvailabilitySets,
  CapacityReservationGroups,
  DedicatedHostGroups,
  Images,
  VirtualMachineImagesEdgeZone,
  VirtualMachineImages,
  LogAnalytics,
  VirtualMachineExtensionImages,
  VirtualMachineRunCommands,
  UsageOperations,
  VirtualMachineScaleSets,
  VirtualMachines,
  VirtualMachineSizes,
  ProximityPlacementGroups,
  RestorePointCollections,
  SshPublicKeys,
  CapacityReservations,
  DedicatedHosts,
  RestorePoints,
  VirtualMachineScaleSetRollingUpgrades,
  VirtualMachineScaleSetExtensions,
  VirtualMachineScaleSetVMs,
  VirtualMachineScaleSetVMExtensions,
  VirtualMachineScaleSetVMRunCommands,
  VirtualMachineExtensions,
} from "./operationsInterfaces/index.js";
import type { ComputeManagementClientOptionalParams } from "./models/index.js";

export class ComputeManagementClient extends coreClient.ServiceClient {
  $host: string;
  apiVersion: string;
  subscriptionId: string;

  /**
   * Initializes a new instance of the ComputeManagementClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The ID of the target subscription.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: ComputeManagementClientOptionalParams,
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (subscriptionId === undefined) {
      throw new Error("'subscriptionId' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: ComputeManagementClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials,
    };

    const packageDetails = `azsdk-js-arm-compute-compute/1.0.0`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix,
      },
      endpoint:
        options.endpoint ?? options.baseUri ?? "https://management.azure.com",
    };
    super(optionsWithDefaults);

    let bearerTokenAuthenticationPolicyFound: boolean = false;
    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] =
        options.pipeline.getOrderedPolicies();
      bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName,
      );
    }
    if (
      !options ||
      !options.pipeline ||
      options.pipeline.getOrderedPolicies().length == 0 ||
      !bearerTokenAuthenticationPolicyFound
    ) {
      this.pipeline.removePolicy({
        name: coreRestPipeline.bearerTokenAuthenticationPolicyName,
      });
      this.pipeline.addPolicy(
        coreRestPipeline.bearerTokenAuthenticationPolicy({
          credential: credentials,
          scopes:
            optionsWithDefaults.credentialScopes ??
            `${optionsWithDefaults.endpoint}/.default`,
          challengeCallbacks: {
            authorizeRequestOnChallenge:
              coreClient.authorizeRequestOnClaimChallenge,
          },
        }),
      );
    }
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.apiVersion = options.apiVersion || "2025-04-01";
    this.operations = new OperationsImpl(this);
    this.availabilitySets = new AvailabilitySetsImpl(this);
    this.capacityReservationGroups = new CapacityReservationGroupsImpl(this);
    this.dedicatedHostGroups = new DedicatedHostGroupsImpl(this);
    this.images = new ImagesImpl(this);
    this.virtualMachineImagesEdgeZone = new VirtualMachineImagesEdgeZoneImpl(
      this,
    );
    this.virtualMachineImages = new VirtualMachineImagesImpl(this);
    this.logAnalytics = new LogAnalyticsImpl(this);
    this.virtualMachineExtensionImages = new VirtualMachineExtensionImagesImpl(
      this,
    );
    this.virtualMachineRunCommands = new VirtualMachineRunCommandsImpl(this);
    this.usageOperations = new UsageOperationsImpl(this);
    this.virtualMachineScaleSets = new VirtualMachineScaleSetsImpl(this);
    this.virtualMachines = new VirtualMachinesImpl(this);
    this.virtualMachineSizes = new VirtualMachineSizesImpl(this);
    this.proximityPlacementGroups = new ProximityPlacementGroupsImpl(this);
    this.restorePointCollections = new RestorePointCollectionsImpl(this);
    this.sshPublicKeys = new SshPublicKeysImpl(this);
    this.capacityReservations = new CapacityReservationsImpl(this);
    this.dedicatedHosts = new DedicatedHostsImpl(this);
    this.restorePoints = new RestorePointsImpl(this);
    this.virtualMachineScaleSetRollingUpgrades =
      new VirtualMachineScaleSetRollingUpgradesImpl(this);
    this.virtualMachineScaleSetExtensions =
      new VirtualMachineScaleSetExtensionsImpl(this);
    this.virtualMachineScaleSetVMs = new VirtualMachineScaleSetVMsImpl(this);
    this.virtualMachineScaleSetVMExtensions =
      new VirtualMachineScaleSetVMExtensionsImpl(this);
    this.virtualMachineScaleSetVMRunCommands =
      new VirtualMachineScaleSetVMRunCommandsImpl(this);
    this.virtualMachineExtensions = new VirtualMachineExtensionsImpl(this);
    this.addCustomApiVersionPolicy(options.apiVersion);
  }

  /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
  private addCustomApiVersionPolicy(apiVersion?: string) {
    if (!apiVersion) {
      return;
    }
    const apiVersionPolicy = {
      name: "CustomApiVersionPolicy",
      async sendRequest(
        request: PipelineRequest,
        next: SendRequest,
      ): Promise<PipelineResponse> {
        const param = request.url.split("?");
        if (param.length > 1) {
          const newParams = param[1].split("&").map((item) => {
            if (item.indexOf("api-version") > -1) {
              return "api-version=" + apiVersion;
            } else {
              return item;
            }
          });
          request.url = param[0] + "?" + newParams.join("&");
        }
        return next(request);
      },
    };
    this.pipeline.addPolicy(apiVersionPolicy);
  }

  operations: Operations;
  availabilitySets: AvailabilitySets;
  capacityReservationGroups: CapacityReservationGroups;
  dedicatedHostGroups: DedicatedHostGroups;
  images: Images;
  virtualMachineImagesEdgeZone: VirtualMachineImagesEdgeZone;
  virtualMachineImages: VirtualMachineImages;
  logAnalytics: LogAnalytics;
  virtualMachineExtensionImages: VirtualMachineExtensionImages;
  virtualMachineRunCommands: VirtualMachineRunCommands;
  usageOperations: UsageOperations;
  virtualMachineScaleSets: VirtualMachineScaleSets;
  virtualMachines: VirtualMachines;
  virtualMachineSizes: VirtualMachineSizes;
  proximityPlacementGroups: ProximityPlacementGroups;
  restorePointCollections: RestorePointCollections;
  sshPublicKeys: SshPublicKeys;
  capacityReservations: CapacityReservations;
  dedicatedHosts: DedicatedHosts;
  restorePoints: RestorePoints;
  virtualMachineScaleSetRollingUpgrades: VirtualMachineScaleSetRollingUpgrades;
  virtualMachineScaleSetExtensions: VirtualMachineScaleSetExtensions;
  virtualMachineScaleSetVMs: VirtualMachineScaleSetVMs;
  virtualMachineScaleSetVMExtensions: VirtualMachineScaleSetVMExtensions;
  virtualMachineScaleSetVMRunCommands: VirtualMachineScaleSetVMRunCommands;
  virtualMachineExtensions: VirtualMachineExtensions;
}
