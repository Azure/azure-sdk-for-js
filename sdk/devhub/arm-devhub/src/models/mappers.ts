/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const GitHubOAuthCallRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GitHubOAuthCallRequest",
    modelProperties: {
      redirectUrl: {
        serializedName: "redirectUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GitHubOAuthInfoResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GitHubOAuthInfoResponse",
    modelProperties: {
      authURL: {
        serializedName: "authURL",
        type: {
          name: "String"
        }
      },
      token: {
        serializedName: "token",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const GitHubOAuthListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GitHubOAuthListResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GitHubOAuthResponse"
            }
          }
        }
      }
    }
  }
};

export const WorkflowListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkflowListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Workflow"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeploymentProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeploymentProperties",
    modelProperties: {
      manifestType: {
        serializedName: "manifestType",
        type: {
          name: "String"
        }
      },
      kubeManifestLocations: {
        serializedName: "kubeManifestLocations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      helmChartPath: {
        serializedName: "helmChartPath",
        type: {
          name: "String"
        }
      },
      helmValues: {
        serializedName: "helmValues",
        type: {
          name: "String"
        }
      },
      overrides: {
        serializedName: "overrides",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const Acr: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Acr",
    modelProperties: {
      acrSubscriptionId: {
        serializedName: "acrSubscriptionId",
        type: {
          name: "String"
        }
      },
      acrResourceGroup: {
        serializedName: "acrResourceGroup",
        type: {
          name: "String"
        }
      },
      acrRegistryName: {
        serializedName: "acrRegistryName",
        type: {
          name: "String"
        }
      },
      acrRepositoryName: {
        serializedName: "acrRepositoryName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GitHubWorkflowProfileOidcCredentials: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GitHubWorkflowProfileOidcCredentials",
    modelProperties: {
      azureClientId: {
        serializedName: "azureClientId",
        type: {
          name: "String"
        }
      },
      azureTenantId: {
        serializedName: "azureTenantId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkflowRun: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkflowRun",
    modelProperties: {
      succeeded: {
        serializedName: "succeeded",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      workflowRunURL: {
        serializedName: "workflowRunURL",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastRunAt: {
        serializedName: "lastRunAt",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const DeleteWorkflowResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeleteWorkflowResponse",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TagsObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TagsObject",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GitHubOAuthResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GitHubOAuthResponse",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      username: {
        serializedName: "properties.username",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Workflow: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Workflow",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      repositoryOwner: {
        serializedName: "properties.githubWorkflowProfile.repositoryOwner",
        type: {
          name: "String"
        }
      },
      repositoryName: {
        serializedName: "properties.githubWorkflowProfile.repositoryName",
        type: {
          name: "String"
        }
      },
      branchName: {
        serializedName: "properties.githubWorkflowProfile.branchName",
        type: {
          name: "String"
        }
      },
      dockerfile: {
        serializedName: "properties.githubWorkflowProfile.dockerfile",
        type: {
          name: "String"
        }
      },
      dockerBuildContext: {
        serializedName: "properties.githubWorkflowProfile.dockerBuildContext",
        type: {
          name: "String"
        }
      },
      deploymentProperties: {
        serializedName: "properties.githubWorkflowProfile.deploymentProperties",
        type: {
          name: "Composite",
          className: "DeploymentProperties"
        }
      },
      namespace: {
        serializedName: "properties.githubWorkflowProfile.namespace",
        type: {
          name: "String"
        }
      },
      acr: {
        serializedName: "properties.githubWorkflowProfile.acr",
        type: {
          name: "Composite",
          className: "Acr"
        }
      },
      oidcCredentials: {
        serializedName: "properties.githubWorkflowProfile.oidcCredentials",
        type: {
          name: "Composite",
          className: "GitHubWorkflowProfileOidcCredentials"
        }
      },
      aksResourceId: {
        serializedName: "properties.githubWorkflowProfile.aksResourceId",
        type: {
          name: "String"
        }
      },
      prURL: {
        serializedName: "properties.githubWorkflowProfile.prURL",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      pullNumber: {
        serializedName: "properties.githubWorkflowProfile.pullNumber",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      prStatus: {
        serializedName: "properties.githubWorkflowProfile.prStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastWorkflowRun: {
        serializedName: "properties.githubWorkflowProfile.lastWorkflowRun",
        type: {
          name: "Composite",
          className: "WorkflowRun"
        }
      },
      authStatus: {
        serializedName: "properties.githubWorkflowProfile.authStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};
