/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { WorkflowOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DeveloperHubServiceClient } from "../developerHubServiceClient";
import {
  Workflow,
  WorkflowListNextOptionalParams,
  WorkflowListOptionalParams,
  WorkflowListResponse,
  WorkflowListByResourceGroupNextOptionalParams,
  WorkflowListByResourceGroupOptionalParams,
  WorkflowListByResourceGroupResponse,
  WorkflowGetOptionalParams,
  WorkflowGetResponse,
  WorkflowCreateOrUpdateOptionalParams,
  WorkflowCreateOrUpdateResponse,
  WorkflowDeleteOptionalParams,
  WorkflowDeleteResponse,
  TagsObject,
  WorkflowUpdateTagsOptionalParams,
  WorkflowUpdateTagsResponse,
  WorkflowListNextResponse,
  WorkflowListByResourceGroupNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing WorkflowOperations operations. */
export class WorkflowOperationsImpl implements WorkflowOperations {
  private readonly client: DeveloperHubServiceClient;

  /**
   * Initialize a new instance of the class WorkflowOperations class.
   * @param client Reference to the service client
   */
  constructor(client: DeveloperHubServiceClient) {
    this.client = client;
  }

  /**
   * Gets a list of workflows associated with the specified subscription.
   * @param options The options parameters.
   */
  public list(
    options?: WorkflowListOptionalParams
  ): PagedAsyncIterableIterator<Workflow> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(options, settings);
      }
    };
  }

  private async *listPagingPage(
    options?: WorkflowListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Workflow[]> {
    let result: WorkflowListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    options?: WorkflowListOptionalParams
  ): AsyncIterableIterator<Workflow> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets a list of workflows within a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: WorkflowListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<Workflow> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: WorkflowListByResourceGroupOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Workflow[]> {
    let result: WorkflowListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: WorkflowListByResourceGroupOptionalParams
  ): AsyncIterableIterator<Workflow> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets a list of workflows associated with the specified subscription.
   * @param options The options parameters.
   */
  private _list(
    options?: WorkflowListOptionalParams
  ): Promise<WorkflowListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Gets a list of workflows within a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: WorkflowListByResourceGroupOptionalParams
  ): Promise<WorkflowListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Gets a workflow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workflowName The name of the workflow resource.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    workflowName: string,
    options?: WorkflowGetOptionalParams
  ): Promise<WorkflowGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workflowName, options },
      getOperationSpec
    );
  }

  /**
   * Creates or updates a workflow
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workflowName The name of the workflow resource.
   * @param parameters Resource representation of a workflow
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    workflowName: string,
    parameters: Workflow,
    options?: WorkflowCreateOrUpdateOptionalParams
  ): Promise<WorkflowCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workflowName, parameters, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Deletes a workflow
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workflowName The name of the workflow resource.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    workflowName: string,
    options?: WorkflowDeleteOptionalParams
  ): Promise<WorkflowDeleteResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workflowName, options },
      deleteOperationSpec
    );
  }

  /**
   * Updates tags on a workflow.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workflowName The name of the workflow resource.
   * @param parameters Parameters supplied to the Update Workflow Tags operation.
   * @param options The options parameters.
   */
  updateTags(
    resourceGroupName: string,
    workflowName: string,
    parameters: TagsObject,
    options?: WorkflowUpdateTagsOptionalParams
  ): Promise<WorkflowUpdateTagsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workflowName, parameters, options },
      updateTagsOperationSpec
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: WorkflowListNextOptionalParams
  ): Promise<WorkflowListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: WorkflowListByResourceGroupNextOptionalParams
  ): Promise<WorkflowListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.DevHub/workflows",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevHub/workflows",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.managedClusterResource],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevHub/workflows/{workflowName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Workflow
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevHub/workflows/{workflowName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Workflow
    },
    201: {
      bodyMapper: Mappers.Workflow
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevHub/workflows/{workflowName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.DeleteWorkflowResponse
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateTagsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevHub/workflows/{workflowName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Workflow
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
