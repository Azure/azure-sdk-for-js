/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { OperationOptions, OperationSpec, createSerializer } from "@azure/core-client";
import * as Models from "../models";
import * as Mappers from "../models/serviceMappers";
import * as Parameters from "../models/parameters";
import { StorageClientContext } from "../storageClientContext";
import { RequestBodyType } from "@azure/core-https";

/** Class representing a Service. */
export class Service {
  private readonly client: StorageClientContext;

  /**
   * Create a Service.
   * @param {StorageClientContext} client Reference to the service client.
   */
  constructor(client: StorageClientContext) {
    this.client = client;
  }

  /**
   * Sets properties for a storage account's Blob service endpoint, including properties for Storage
   * Analytics and CORS (Cross-Origin Resource Sharing) rules
   * @param blobServiceProperties The StorageService properties.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceSetPropertiesResponse>
   */
  setProperties(blobServiceProperties: Models.BlobServiceProperties, options?: Models.ServiceSetPropertiesOptionalParams){
    return this.client.sendOperationRequest(
      {
        blobServiceProperties,
        options
      },
      setPropertiesOperationSpec) as Promise<Models.ServiceSetPropertiesResponse>;
  }

  /**
   * gets the properties of a storage account's Blob service, including properties for Storage
   * Analytics and CORS (Cross-Origin Resource Sharing) rules.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceGetPropertiesResponse>
   */
  getProperties(options?: Models.ServiceGetPropertiesOptionalParams): Promise<Models.ServiceGetPropertiesResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getPropertiesOperationSpec) as Promise<Models.ServiceGetPropertiesResponse>;
  }

  /**
   * Retrieves statistics related to replication for the Blob service. It is only available on the
   * secondary location endpoint when read-access geo-redundant replication is enabled for the
   * storage account.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceGetStatisticsResponse>
   */
  getStatistics(options?: Models.ServiceGetStatisticsOptionalParams): Promise<Models.ServiceGetStatisticsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getStatisticsOperationSpec) as Promise<Models.ServiceGetStatisticsResponse>;
  }

  /**
   * The List Containers Segment operation returns a list of the containers under the specified
   * account
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceListContainersSegmentResponse>
   */
  listContainersSegment(options?: Models.ServiceListContainersSegmentOptionalParams): Promise<Models.ServiceListContainersSegmentResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listContainersSegmentOperationSpec) as Promise<Models.ServiceListContainersSegmentResponse>;
  }

  /**
   * Retrieves a user delegation key for the Blob service. This is only a valid operation when using
   * bearer token authentication.
   * @param keyInfo
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceGetUserDelegationKeyResponse>
   */
  getUserDelegationKey(keyInfo: Models.KeyInfo, options?: Models.ServiceGetUserDelegationKeyOptionalParams): Promise<Models.ServiceGetUserDelegationKeyResponse> {
    return this.client.sendOperationRequest(
      {
        keyInfo,
        options
      },
      getUserDelegationKeyOperationSpec) as Promise<Models.ServiceGetUserDelegationKeyResponse>;
  }

  /**
   * Returns the sku name and account kind
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceGetAccountInfoResponse>
   */
  getAccountInfo(options?: OperationOptions): Promise<Models.ServiceGetAccountInfoResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getAccountInfoOperationSpec) as Promise<Models.ServiceGetAccountInfoResponse>;
  }

  /**
   * The Batch operation allows multiple API calls to be embedded into a single HTTP request.
   * @param body Initial data
   * @param contentLength The length of the request.
   * @param multipartContentType Required. The value of this header must be multipart/mixed with a
   * batch boundary. Example header value: multipart/mixed; boundary=batch_<GUID>
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceSubmitBatchResponse>
   */
  submitBatch(body: RequestBodyType, contentLength: number, multipartContentType: string, options?: Models.ServiceSubmitBatchOptionalParams): Promise<Models.ServiceSubmitBatchResponse> {
    return this.client.sendOperationRequest(
      {
        body,
        contentLength,
        multipartContentType,
        options
      },
      submitBatchOperationSpec) as Promise<Models.ServiceSubmitBatchResponse>;
  }

  /**
   * The Filter Blobs operation enables callers to list blobs across all containers whose tags match
   * a given search expression.  Filter blobs searches across all containers within a storage account
   * but can be scoped within the expression to a single container.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceFilterBlobsResponse>
   */
  filterBlobs(options?: Models.ServiceFilterBlobsOptionalParams): Promise<Models.ServiceFilterBlobsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      filterBlobsOperationSpec) as Promise<Models.ServiceFilterBlobsResponse>;
  }
}

// Operation Specifications
const serializer = createSerializer(Mappers, true);
const setPropertiesOperationSpec: OperationSpec = {
  httpMethod: "PUT",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeoutInSeconds,
    Parameters.restype0,
    Parameters.comp0
  ],
  headerParameters: [
    Parameters.version,
    Parameters.requestId
  ],
  requestBody: {
    parameterPath: "blobServiceProperties",
    mapper: {
      ...Mappers.BlobServiceProperties,
      required: true
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    202: {
      headersMapper: Mappers.ServiceSetPropertiesHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ServiceSetPropertiesHeaders
    }
  },
  isXML: true,
  serializer
};

const getPropertiesOperationSpec: OperationSpec = {
  httpMethod: "GET",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeoutInSeconds,
    Parameters.restype0,
    Parameters.comp0
  ],
  headerParameters: [
    Parameters.version,
    Parameters.requestId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BlobServiceProperties,
      headersMapper: Mappers.ServiceGetPropertiesHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ServiceGetPropertiesHeaders
    }
  },
  isXML: true,
  serializer
};

const getStatisticsOperationSpec: OperationSpec = {
  httpMethod: "GET",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeoutInSeconds,
    Parameters.restype0,
    Parameters.comp1
  ],
  headerParameters: [
    Parameters.version,
    Parameters.requestId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BlobServiceStatistics,
      headersMapper: Mappers.ServiceGetStatisticsHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ServiceGetStatisticsHeaders
    }
  },
  isXML: true,
  serializer
};

const listContainersSegmentOperationSpec: OperationSpec = {
  httpMethod: "GET",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.prefix,
    Parameters.marker0,
    Parameters.maxPageSize,
    Parameters.include0,
    Parameters.timeoutInSeconds,
    Parameters.comp2
  ],
  headerParameters: [
    Parameters.version,
    Parameters.requestId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListContainersSegmentResponse,
      headersMapper: Mappers.ServiceListContainersSegmentHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ServiceListContainersSegmentHeaders
    }
  },
  isXML: true,
  serializer
};

const getUserDelegationKeyOperationSpec: OperationSpec = {
  httpMethod: "POST",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeoutInSeconds,
    Parameters.restype0,
    Parameters.comp3
  ],
  headerParameters: [
    Parameters.version,
    Parameters.requestId
  ],
  requestBody: {
    parameterPath: "keyInfo",
    mapper: {
      ...Mappers.KeyInfo,
      required: true
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.UserDelegationKey,
      headersMapper: Mappers.ServiceGetUserDelegationKeyHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ServiceGetUserDelegationKeyHeaders
    }
  },
  isXML: true,
  serializer
};

const getAccountInfoOperationSpec: OperationSpec = {
  httpMethod: "GET",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.restype1,
    Parameters.comp0
  ],
  headerParameters: [
    Parameters.version
  ],
  responses: {
    200: {
      headersMapper: Mappers.ServiceGetAccountInfoHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ServiceGetAccountInfoHeaders
    }
  },
  isXML: true,
  serializer
};

const submitBatchOperationSpec: OperationSpec = {
  httpMethod: "POST",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeoutInSeconds,
    Parameters.comp4
  ],
  headerParameters: [
    Parameters.contentLength,
    Parameters.multipartContentType,
    Parameters.version,
    Parameters.requestId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Stream"
      }
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    202: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      },
      headersMapper: Mappers.ServiceSubmitBatchHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ServiceSubmitBatchHeaders
    }
  },
  isXML: true,
  serializer
};

const filterBlobsOperationSpec: OperationSpec = {
  httpMethod: "GET",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeoutInSeconds,
    Parameters.where,
    Parameters.marker0,
    Parameters.maxPageSize,
    Parameters.comp5
  ],
  headerParameters: [
    Parameters.version,
    Parameters.requestId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FilterBlobSegment,
      headersMapper: Mappers.ServiceFilterBlobsHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ServiceFilterBlobsHeaders
    }
  },
  isXML: true,
  serializer
};
