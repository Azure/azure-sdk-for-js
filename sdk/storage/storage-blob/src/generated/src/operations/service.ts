/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Service } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { StorageClient } from "../storageClient";
import {
  BlobServiceProperties,
  ServiceSetPropertiesOptionalParams,
  ServiceSetPropertiesResponse,
  ServiceGetPropertiesOptionalParams,
  ServiceGetPropertiesResponse,
  ServiceGetStatisticsOptionalParams,
  ServiceGetStatisticsResponse,
  ServiceListContainersSegmentOptionalParams,
  ServiceListContainersSegmentResponse,
  KeyInfo,
  ServiceGetUserDelegationKeyOptionalParams,
  ServiceGetUserDelegationKeyResponse,
  ServiceGetAccountInfoOptionalParams,
  ServiceGetAccountInfoResponse,
  ServiceSubmitBatchOptionalParams,
  ServiceSubmitBatchResponse,
  ServiceFilterBlobsOptionalParams,
  ServiceFilterBlobsResponse
} from "../models";

/** Class containing Service operations. */
export class ServiceImpl implements Service {
  private readonly client: StorageClient;

  /**
   * Initialize a new instance of the class Service class.
   * @param client Reference to the service client
   */
  constructor(client: StorageClient) {
    this.client = client;
  }

  /**
   * Sets properties for a storage account's Blob service endpoint, including properties for Storage
   * Analytics and CORS (Cross-Origin Resource Sharing) rules
   * @param blobServiceProperties The StorageService properties.
   * @param options The options parameters.
   */
  setProperties(
    blobServiceProperties: BlobServiceProperties,
    options?: ServiceSetPropertiesOptionalParams
  ): Promise<ServiceSetPropertiesResponse> {
    return this.client.sendOperationRequest(
      { blobServiceProperties, options },
      setPropertiesOperationSpec
    );
  }

  /**
   * gets the properties of a storage account's Blob service, including properties for Storage Analytics
   * and CORS (Cross-Origin Resource Sharing) rules.
   * @param options The options parameters.
   */
  getProperties(
    options?: ServiceGetPropertiesOptionalParams
  ): Promise<ServiceGetPropertiesResponse> {
    return this.client.sendOperationRequest(
      { options },
      getPropertiesOperationSpec
    );
  }

  /**
   * Retrieves statistics related to replication for the Blob service. It is only available on the
   * secondary location endpoint when read-access geo-redundant replication is enabled for the storage
   * account.
   * @param options The options parameters.
   */
  getStatistics(
    options?: ServiceGetStatisticsOptionalParams
  ): Promise<ServiceGetStatisticsResponse> {
    return this.client.sendOperationRequest(
      { options },
      getStatisticsOperationSpec
    );
  }

  /**
   * The List Containers Segment operation returns a list of the containers under the specified account
   * @param options The options parameters.
   */
  listContainersSegment(
    options?: ServiceListContainersSegmentOptionalParams
  ): Promise<ServiceListContainersSegmentResponse> {
    return this.client.sendOperationRequest(
      { options },
      listContainersSegmentOperationSpec
    );
  }

  /**
   * Retrieves a user delegation key for the Blob service. This is only a valid operation when using
   * bearer token authentication.
   * @param keyInfo Key information
   * @param options The options parameters.
   */
  getUserDelegationKey(
    keyInfo: KeyInfo,
    options?: ServiceGetUserDelegationKeyOptionalParams
  ): Promise<ServiceGetUserDelegationKeyResponse> {
    return this.client.sendOperationRequest(
      { keyInfo, options },
      getUserDelegationKeyOperationSpec
    );
  }

  /**
   * Returns the sku name and account kind
   * @param options The options parameters.
   */
  getAccountInfo(
    options?: ServiceGetAccountInfoOptionalParams
  ): Promise<ServiceGetAccountInfoResponse> {
    return this.client.sendOperationRequest(
      { options },
      getAccountInfoOperationSpec
    );
  }

  /**
   * The Batch operation allows multiple API calls to be embedded into a single HTTP request.
   * @param contentLength The length of the request.
   * @param multipartContentType Required. The value of this header must be multipart/mixed with a batch
   *                             boundary. Example header value: multipart/mixed; boundary=batch_<GUID>
   * @param body Initial data
   * @param options The options parameters.
   */
  submitBatch(
    contentLength: number,
    multipartContentType: string,
    body: coreRestPipeline.RequestBodyType,
    options?: ServiceSubmitBatchOptionalParams
  ): Promise<ServiceSubmitBatchResponse> {
    return this.client.sendOperationRequest(
      { contentLength, multipartContentType, body, options },
      submitBatchOperationSpec
    );
  }

  /**
   * The Filter Blobs operation enables callers to list blobs across all containers whose tags match a
   * given search expression.  Filter blobs searches across all containers within a storage account but
   * can be scoped within the expression to a single container.
   * @param options The options parameters.
   */
  filterBlobs(
    options?: ServiceFilterBlobsOptionalParams
  ): Promise<ServiceFilterBlobsResponse> {
    return this.client.sendOperationRequest(
      { options },
      filterBlobsOperationSpec
    );
  }
}
// Operation Specifications
const xmlSerializer = coreClient.createSerializer(Mappers, /* isXml */ true);

const setPropertiesOperationSpec: coreClient.OperationSpec = {
  path: "/",
  httpMethod: "PUT",
  responses: {
    202: {
      headersMapper: Mappers.ServiceSetPropertiesHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ServiceSetPropertiesExceptionHeaders
    }
  },
  requestBody: Parameters.blobServiceProperties,
  queryParameters: [
    Parameters.restype,
    Parameters.comp,
    Parameters.timeoutInSeconds
  ],
  urlParameters: [Parameters.url],
  headerParameters: [
    Parameters.contentType,
    Parameters.accept,
    Parameters.version,
    Parameters.requestId
  ],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "xml",
  serializer: xmlSerializer
};
const getPropertiesOperationSpec: coreClient.OperationSpec = {
  path: "/",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BlobServiceProperties,
      headersMapper: Mappers.ServiceGetPropertiesHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ServiceGetPropertiesExceptionHeaders
    }
  },
  queryParameters: [
    Parameters.restype,
    Parameters.comp,
    Parameters.timeoutInSeconds
  ],
  urlParameters: [Parameters.url],
  headerParameters: [
    Parameters.version,
    Parameters.requestId,
    Parameters.accept1
  ],
  isXML: true,
  serializer: xmlSerializer
};
const getStatisticsOperationSpec: coreClient.OperationSpec = {
  path: "/",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BlobServiceStatistics,
      headersMapper: Mappers.ServiceGetStatisticsHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ServiceGetStatisticsExceptionHeaders
    }
  },
  queryParameters: [
    Parameters.restype,
    Parameters.timeoutInSeconds,
    Parameters.comp1
  ],
  urlParameters: [Parameters.url],
  headerParameters: [
    Parameters.version,
    Parameters.requestId,
    Parameters.accept1
  ],
  isXML: true,
  serializer: xmlSerializer
};
const listContainersSegmentOperationSpec: coreClient.OperationSpec = {
  path: "/",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ListContainersSegmentResponse,
      headersMapper: Mappers.ServiceListContainersSegmentHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ServiceListContainersSegmentExceptionHeaders
    }
  },
  queryParameters: [
    Parameters.timeoutInSeconds,
    Parameters.comp2,
    Parameters.prefix,
    Parameters.marker,
    Parameters.maxPageSize,
    Parameters.include
  ],
  urlParameters: [Parameters.url],
  headerParameters: [
    Parameters.version,
    Parameters.requestId,
    Parameters.accept1
  ],
  isXML: true,
  serializer: xmlSerializer
};
const getUserDelegationKeyOperationSpec: coreClient.OperationSpec = {
  path: "/",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.UserDelegationKey,
      headersMapper: Mappers.ServiceGetUserDelegationKeyHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ServiceGetUserDelegationKeyExceptionHeaders
    }
  },
  requestBody: Parameters.keyInfo,
  queryParameters: [
    Parameters.restype,
    Parameters.timeoutInSeconds,
    Parameters.comp3
  ],
  urlParameters: [Parameters.url],
  headerParameters: [
    Parameters.contentType,
    Parameters.accept,
    Parameters.version,
    Parameters.requestId
  ],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "xml",
  serializer: xmlSerializer
};
const getAccountInfoOperationSpec: coreClient.OperationSpec = {
  path: "/",
  httpMethod: "GET",
  responses: {
    200: {
      headersMapper: Mappers.ServiceGetAccountInfoHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ServiceGetAccountInfoExceptionHeaders
    }
  },
  queryParameters: [Parameters.comp, Parameters.restype1],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.version, Parameters.accept1],
  isXML: true,
  serializer: xmlSerializer
};
const submitBatchOperationSpec: coreClient.OperationSpec = {
  path: "/",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper: {
        type: { name: "Stream" },
        serializedName: "parsedResponse"
      },
      headersMapper: Mappers.ServiceSubmitBatchHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ServiceSubmitBatchExceptionHeaders
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp4],
  urlParameters: [Parameters.url],
  headerParameters: [
    Parameters.accept,
    Parameters.version,
    Parameters.requestId,
    Parameters.contentLength,
    Parameters.multipartContentType
  ],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "xml",
  serializer: xmlSerializer
};
const filterBlobsOperationSpec: coreClient.OperationSpec = {
  path: "/",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FilterBlobSegment,
      headersMapper: Mappers.ServiceFilterBlobsHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ServiceFilterBlobsExceptionHeaders
    }
  },
  queryParameters: [
    Parameters.timeoutInSeconds,
    Parameters.marker,
    Parameters.maxPageSize,
    Parameters.comp5,
    Parameters.where
  ],
  urlParameters: [Parameters.url],
  headerParameters: [
    Parameters.version,
    Parameters.requestId,
    Parameters.accept1
  ],
  isXML: true,
  serializer: xmlSerializer
};
