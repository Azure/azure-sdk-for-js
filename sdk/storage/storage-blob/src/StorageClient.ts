// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

import { StorageClientContext } from "./generated/src/storageClientContext";
import { escapeURLPath, getURLScheme, iEqual, getAccountNameFromUrl } from "./utils/utils.common";
import { AnonymousCredential } from "./credentials/AnonymousCredential";
import { SharedKeyCredential } from "./credentials/SharedKeyCredential";
import { TokenCredential, ServiceClientOptions } from "@azure/core-http";
import { SpanOptions } from "@azure/core-tracing";

/**
 * An interface for options common to every remote operation.
 */
export interface CommonOptions {
  spanOptions?: SpanOptions;
}

/**
 * A StorageClient represents a based URL class for BlobServiceClient, ContainerClient and etc.
 *
 * @export
 * @class StorageClient
 */
export abstract class StorageClient {
  /**
   * Encoded URL string value.
   *
   * @type {string}
   * @memberof StorageClient
   */
  public readonly url: string;
  public readonly accountName: string;

  /**
   * Credential used for authentication and authorization.
   *
   * @type {string}
   * @memberof StorageClient
   */
  public readonly credential: SharedKeyCredential | AnonymousCredential | TokenCredential;
  /**
   * StorageClient is a reference to protocol layer operations entry, which is
   * generated by AutoRest generator.
   *
   * @protected
   * @type {StorageClientContext}
   * @memberof StorageClient
   */
  protected readonly storageClientContext: StorageClientContext;
  /**
   * @protected
   * @type {boolean}
   * @memberof StorageClient
   */
  protected readonly isHttps: boolean;

  /**
   * Creates an instance of StorageClient.
   * @param {string} url url to resource
   * @param {ServiceClientOptions} options The ServiceClientOptions for this client's pipeline
   * @param {SharedKeyCredential | AnonymousCredential | TokenCredential} credential Such as AnonymousCredential, SharedKeyCredential
   *        or a TokenCredential from @azure/identity.
   * @memberof StorageClient
   */
  protected constructor(
    url: string,
    options: ServiceClientOptions,
    credential: SharedKeyCredential | AnonymousCredential | TokenCredential
  ) {
    // URL should be encoded and only once, protocol layer shouldn't encode URL again
    this.url = escapeURLPath(url);
    this.accountName = getAccountNameFromUrl(url);
    this.storageClientContext = new StorageClientContext(this.url, options);

    this.isHttps = iEqual(getURLScheme(this.url) || "", "https");

    this.credential = credential;

    // Override protocol layer's default content-type
    const storageClientContext = this.storageClientContext as any;
    storageClientContext.requestContentType = undefined;
  }
}
