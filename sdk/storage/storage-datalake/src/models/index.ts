/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * The service error response object.
 */
export interface DataLakeStorageErrorError {
  /**
   * The service error code.
   */
  code?: string;
  /**
   * The service error message.
   */
  message?: string;
}

/**
 * An interface representing DataLakeStorageError.
 */
export interface DataLakeStorageError {
  /**
   * The service error response object.
   */
  error?: DataLakeStorageErrorError;
}

/**
 * An interface representing Path.
 */
export interface Path {
  name?: string;
  /**
   * Default value: false.
   */
  isDirectory?: boolean;
  lastModified?: string;
  eTag?: string;
  contentLength?: number;
  owner?: string;
  group?: string;
  permissions?: string;
}

/**
 * An interface representing Filesystem.
 */
export interface Filesystem {
  name?: string;
  lastModified?: string;
  eTag?: string;
}

/**
 * Optional Parameters.
 */
export interface FilesystemListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Filters results to filesystems within the specified prefix.
   */
  prefix?: string;
  /**
   * The number of filesystems returned with each invocation is limited. If the number of
   * filesystems to be returned exceeds this limit, a continuation token is returned in the
   * response header x-ms-continuation. When a continuation token is  returned in the response, it
   * must be specified in a subsequent invocation of the list operation to continue listing the
   * filesystems.
   */
  continuation?: string;
  /**
   * An optional value that specifies the maximum number of items to return. If omitted or greater
   * than 5,000, the response will include up to 5,000 items.
   */
  maxResults?: number;
  /**
   * A UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsClientRequestId?: string;
  /**
   * An optional operation timeout value in seconds. The period begins when the request is received
   * by the service. If the timeout value elapses before the operation completes, the operation
   * fails.
   */
  timeoutParameter?: number;
  /**
   * Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using
   * shared key authorization.
   */
  xMsDate?: string;
}

/**
 * Optional Parameters.
 */
export interface FilesystemCreateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * User-defined properties to be stored with the filesystem, in the format of a comma-separated
   * list of name and value pairs "n1=v1, n2=v2, ...", where each value is a base64 encoded string.
   * Note that the string may only contain ASCII characters in the ISO-8859-1 character set.
   */
  xMsProperties?: string;
  /**
   * A UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsClientRequestId?: string;
  /**
   * An optional operation timeout value in seconds. The period begins when the request is received
   * by the service. If the timeout value elapses before the operation completes, the operation
   * fails.
   */
  timeoutParameter?: number;
  /**
   * Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using
   * shared key authorization.
   */
  xMsDate?: string;
}

/**
 * Optional Parameters.
 */
export interface FilesystemSetPropertiesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Optional. User-defined properties to be stored with the filesystem, in the format of a
   * comma-separated list of name and value pairs "n1=v1, n2=v2, ...", where each value is a base64
   * encoded string. Note that the string may only contain ASCII characters in the ISO-8859-1
   * character set.  If the filesystem exists, any properties not included in the list will be
   * removed.  All properties are removed if the header is omitted.  To merge new and existing
   * properties, first get all existing properties and the current E-Tag, then make a conditional
   * request with the E-Tag and include values for all properties.
   */
  xMsProperties?: string;
  /**
   * Optional. A date and time value. Specify this header to perform the operation only if the
   * resource has been modified since the specified date and time.
   */
  ifModifiedSince?: string;
  /**
   * Optional. A date and time value. Specify this header to perform the operation only if the
   * resource has not been modified since the specified date and time.
   */
  ifUnmodifiedSince?: string;
  /**
   * A UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsClientRequestId?: string;
  /**
   * An optional operation timeout value in seconds. The period begins when the request is received
   * by the service. If the timeout value elapses before the operation completes, the operation
   * fails.
   */
  timeoutParameter?: number;
  /**
   * Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using
   * shared key authorization.
   */
  xMsDate?: string;
}

/**
 * Optional Parameters.
 */
export interface FilesystemGetPropertiesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * A UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsClientRequestId?: string;
  /**
   * An optional operation timeout value in seconds. The period begins when the request is received
   * by the service. If the timeout value elapses before the operation completes, the operation
   * fails.
   */
  timeoutParameter?: number;
  /**
   * Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using
   * shared key authorization.
   */
  xMsDate?: string;
}

/**
 * Optional Parameters.
 */
export interface FilesystemDeleteMethodOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Optional. A date and time value. Specify this header to perform the operation only if the
   * resource has been modified since the specified date and time.
   */
  ifModifiedSince?: string;
  /**
   * Optional. A date and time value. Specify this header to perform the operation only if the
   * resource has not been modified since the specified date and time.
   */
  ifUnmodifiedSince?: string;
  /**
   * A UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsClientRequestId?: string;
  /**
   * An optional operation timeout value in seconds. The period begins when the request is received
   * by the service. If the timeout value elapses before the operation completes, the operation
   * fails.
   */
  timeoutParameter?: number;
  /**
   * Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using
   * shared key authorization.
   */
  xMsDate?: string;
}

/**
 * Optional Parameters.
 */
export interface PathListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Filters results to paths within the specified directory. An error occurs if the directory does
   * not exist.
   */
  directory?: string;
  /**
   * The number of paths returned with each invocation is limited. If the number of paths to be
   * returned exceeds this limit, a continuation token is returned in the response header
   * x-ms-continuation. When a continuation token is  returned in the response, it must be
   * specified in a subsequent invocation of the list operation to continue listing the paths.
   */
  continuation?: string;
  /**
   * An optional value that specifies the maximum number of items to return. If omitted or greater
   * than 5,000, the response will include up to 5,000 items.
   */
  maxResults?: number;
  /**
   * Optional. Valid only when Hierarchical Namespace is enabled for the account. If "true", the
   * user identity values returned in the owner and group fields of each list entry will be
   * transformed from Azure Active Directory Object IDs to User Principal Names.  If "false", the
   * values will be returned as Azure Active Directory Object IDs. The default value is false. Note
   * that group and application Object IDs are not translated because they do not have unique
   * friendly names.
   */
  upn?: boolean;
  /**
   * A UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsClientRequestId?: string;
  /**
   * An optional operation timeout value in seconds. The period begins when the request is received
   * by the service. If the timeout value elapses before the operation completes, the operation
   * fails.
   */
  timeoutParameter?: number;
  /**
   * Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using
   * shared key authorization.
   */
  xMsDate?: string;
}

/**
 * Optional Parameters.
 */
export interface PathCreateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Required only for Create File and Create Directory. The value must be "file" or "directory".
   * Possible values include: 'directory', 'file'
   */
  resource?: PathResourceType;
  /**
   * Optional.  When renaming a directory, the number of paths that are renamed with each
   * invocation is limited.  If the number of paths to be renamed exceeds this limit, a
   * continuation token is returned in this response header.  When a continuation token is returned
   * in the response, it must be specified in a subsequent invocation of the rename operation to
   * continue renaming the directory.
   */
  continuation?: string;
  /**
   * Optional. Valid only when namespace is enabled. This parameter determines the behavior of the
   * rename operation. The value must be "legacy" or "posix", and the default value will be
   * "posix". Possible values include: 'legacy', 'posix'
   */
  mode?: PathRenameMode;
  /**
   * Optional.  The service stores this value and includes it in the "Cache-Control" response
   * header for "Read File" operations for "Read File" operations.
   */
  cacheControl?: string;
  /**
   * Optional.  Specifies which content encodings have been applied to the file. This value is
   * returned to the client when the "Read File" operation is performed.
   */
  contentEncoding?: string;
  /**
   * Optional.  Specifies the natural language used by the intended audience for the file.
   */
  contentLanguage?: string;
  /**
   * Optional.  The service stores this value and includes it in the "Content-Disposition" response
   * header for "Read File" operations.
   */
  contentDisposition?: string;
  /**
   * Optional.  The service stores this value and includes it in the "Cache-Control" response
   * header for "Read File" operations.
   */
  xMsCacheControl?: string;
  /**
   * Optional.  The service stores this value and includes it in the "Content-Type" response header
   * for "Read File" operations.
   */
  xMsContentType?: string;
  /**
   * Optional.  The service stores this value and includes it in the "Content-Encoding" response
   * header for "Read File" operations.
   */
  xMsContentEncoding?: string;
  /**
   * Optional.  The service stores this value and includes it in the "Content-Language" response
   * header for "Read File" operations.
   */
  xMsContentLanguage?: string;
  /**
   * Optional.  The service stores this value and includes it in the "Content-Disposition" response
   * header for "Read File" operations.
   */
  xMsContentDisposition?: string;
  /**
   * An optional file or directory to be renamed.  The value must have the following format:
   * "/{filesystem}/{path}".  If "x-ms-properties" is specified, the properties will overwrite the
   * existing properties; otherwise, the existing properties will be preserved. This value must be
   * a URL percent-encoded string. Note that the string may only contain ASCII characters in the
   * ISO-8859-1 character set.
   */
  xMsRenameSource?: string;
  /**
   * Optional.  A lease ID for the path specified in the URI.  The path to be overwritten must have
   * an active lease and the lease ID must match.
   */
  xMsLeaseId?: string;
  /**
   * Optional for rename operations.  A lease ID for the source path.  The source path must have an
   * active lease and the lease ID must match.
   */
  xMsSourceLeaseId?: string;
  /**
   * Optional.  User-defined properties to be stored with the file or directory, in the format of a
   * comma-separated list of name and value pairs "n1=v1, n2=v2, ...", where each value is a base64
   * encoded string. Note that the string may only contain ASCII characters in the ISO-8859-1
   * character set.
   */
  xMsProperties?: string;
  /**
   * Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX
   * access permissions for the file owner, the file owning group, and others. Each class may be
   * granted read, write, or execute permission.  The sticky bit is also supported.  Both symbolic
   * (rwxrw-rw-) and 4-digit octal notation (e.g. 0766) are supported.
   */
  xMsPermissions?: string;
  /**
   * Optional and only valid if Hierarchical Namespace is enabled for the account. When creating a
   * file or directory and the parent folder does not have a default ACL, the umask restricts the
   * permissions of the file or directory to be created.  The resulting permission is given by p &
   * ^u, where p is the permission and u is the umask.  For example, if p is 0777 and u is 0057,
   * then the resulting permission is 0720.  The default permission is 0777 for a directory and
   * 0666 for a file.  The default umask is 0027.  The umask must be specified in 4-digit octal
   * notation (e.g. 0766).
   */
  xMsUmask?: string;
  /**
   * Optional.  An ETag value. Specify this header to perform the operation only if the resource's
   * ETag matches the value specified. The ETag must be specified in quotes.
   */
  ifMatch?: string;
  /**
   * Optional.  An ETag value or the special wildcard ("*") value. Specify this header to perform
   * the operation only if the resource's ETag does not match the value specified. The ETag must be
   * specified in quotes.
   */
  ifNoneMatch?: string;
  /**
   * Optional. A date and time value. Specify this header to perform the operation only if the
   * resource has been modified since the specified date and time.
   */
  ifModifiedSince?: string;
  /**
   * Optional. A date and time value. Specify this header to perform the operation only if the
   * resource has not been modified since the specified date and time.
   */
  ifUnmodifiedSince?: string;
  /**
   * Optional.  An ETag value. Specify this header to perform the rename operation only if the
   * source's ETag matches the value specified. The ETag must be specified in quotes.
   */
  xMsSourceIfMatch?: string;
  /**
   * Optional.  An ETag value or the special wildcard ("*") value. Specify this header to perform
   * the rename operation only if the source's ETag does not match the value specified. The ETag
   * must be specified in quotes.
   */
  xMsSourceIfNoneMatch?: string;
  /**
   * Optional. A date and time value. Specify this header to perform the rename operation only if
   * the source has been modified since the specified date and time.
   */
  xMsSourceIfModifiedSince?: string;
  /**
   * Optional. A date and time value. Specify this header to perform the rename operation only if
   * the source has not been modified since the specified date and time.
   */
  xMsSourceIfUnmodifiedSince?: string;
  /**
   * A UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsClientRequestId?: string;
  /**
   * An optional operation timeout value in seconds. The period begins when the request is received
   * by the service. If the timeout value elapses before the operation completes, the operation
   * fails.
   */
  timeoutParameter?: number;
  /**
   * Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using
   * shared key authorization.
   */
  xMsDate?: string;
}

/**
 * Optional Parameters.
 */
export interface PathUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * This parameter allows the caller to upload data in parallel and control the order in which it
   * is appended to the file.  It is required when uploading data to be appended to the file and
   * when flushing previously uploaded data to the file.  The value must be the position where the
   * data is to be appended.  Uploaded data is not immediately flushed, or written, to the file.
   * To flush, the previously uploaded data must be contiguous, the position parameter must be
   * specified and equal to the length of the file after all data has been written, and there must
   * not be a request entity body included with the request.
   */
  position?: number;
  /**
   * Valid only for flush operations.  If "true", uncommitted data is retained after the flush
   * operation completes; otherwise, the uncommitted data is deleted after the flush operation.
   * The default is false.  Data at offsets less than the specified position are written to the
   * file when flush succeeds, but this optional parameter allows data after the flush position to
   * be retained for a future flush operation.
   */
  retainUncommittedData?: boolean;
  /**
   * Azure Storage Events allow applications to receive notifications when files change. When Azure
   * Storage Events are enabled, a file changed event is raised. This event has a property
   * indicating whether this is the final change to distinguish the difference between an
   * intermediate flush to a file stream and the final close of a file stream. The close query
   * parameter is valid only when the action is "flush" and change notifications are enabled. If
   * the value of close is "true" and the flush operation completes successfully, the service
   * raises a file change notification with a property indicating that this is the final update
   * (the file stream has been closed). If "false" a change notification is raised indicating the
   * file has changed. The default is false. This query parameter is set to true by the Hadoop ABFS
   * driver to indicate that the file stream has been closed."
   */
  close?: boolean;
  /**
   * Required for "Append Data" and "Flush Data".  Must be 0 for "Flush Data".  Must be the length
   * of the request content in bytes for "Append Data".
   */
  contentLength?: number;
  /**
   * Optional. An MD5 hash of the request content. This header is valid on "Append" and "Flush"
   * operations. This hash is used to verify the integrity of the request content during transport.
   * When this header is specified, the storage service compares the hash of the content that has
   * arrived with this header value. If the two hashes do not match, the operation will fail with
   * error code 400 (Bad Request). Note that this MD5 hash is not stored with the file. This header
   * is associated with the request content, and not with the stored content of the file itself.
   */
  contentMD5?: string;
  /**
   * The lease ID must be specified if there is an active lease.
   */
  xMsLeaseId?: string;
  /**
   * Optional and only valid for flush and set properties operations.  The service stores this
   * value and includes it in the "Cache-Control" response header for "Read File" operations.
   */
  xMsCacheControl?: string;
  /**
   * Optional and only valid for flush and set properties operations.  The service stores this
   * value and includes it in the "Content-Type" response header for "Read File" operations.
   */
  xMsContentType?: string;
  /**
   * Optional and only valid for flush and set properties operations.  The service stores this
   * value and includes it in the "Content-Disposition" response header for "Read File" operations.
   */
  xMsContentDisposition?: string;
  /**
   * Optional and only valid for flush and set properties operations.  The service stores this
   * value and includes it in the "Content-Encoding" response header for "Read File" operations.
   */
  xMsContentEncoding?: string;
  /**
   * Optional and only valid for flush and set properties operations.  The service stores this
   * value and includes it in the "Content-Language" response header for "Read File" operations.
   */
  xMsContentLanguage?: string;
  /**
   * Optional and only valid for "Flush & Set Properties" operations.  The service stores this
   * value and includes it in the "Content-Md5" response header for "Read & Get Properties"
   * operations. If this property is not specified on the request, then the property will be
   * cleared for the file. Subsequent calls to "Read & Get Properties" will not return this
   * property unless it is explicitly set on that file again.
   */
  xMsContentMd5?: string;
  /**
   * Optional.  User-defined properties to be stored with the file or directory, in the format of a
   * comma-separated list of name and value pairs "n1=v1, n2=v2, ...", where each value is a base64
   * encoded string. Note that the string may only contain ASCII characters in the ISO-8859-1
   * character set. Valid only for the setProperties operation. If the file or directory exists,
   * any properties not included in the list will be removed.  All properties are removed if the
   * header is omitted.  To merge new and existing properties, first get all existing properties
   * and the current E-Tag, then make a conditional request with the E-Tag and include values for
   * all properties.
   */
  xMsProperties?: string;
  /**
   * Optional and valid only for the setAccessControl operation. Sets the owner of the file or
   * directory.
   */
  xMsOwner?: string;
  /**
   * Optional and valid only for the setAccessControl operation. Sets the owning group of the file
   * or directory.
   */
  xMsGroup?: string;
  /**
   * Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX
   * access permissions for the file owner, the file owning group, and others. Each class may be
   * granted read, write, or execute permission.  The sticky bit is also supported.  Both symbolic
   * (rwxrw-rw-) and 4-digit octal notation (e.g. 0766) are supported. Invalid in conjunction with
   * x-ms-acl.
   */
  xMsPermissions?: string;
  /**
   * Optional and valid only for the setAccessControl operation. Sets POSIX access control rights
   * on files and directories. The value is a comma-separated list of access control entries that
   * fully replaces the existing access control list (ACL).  Each access control entry (ACE)
   * consists of a scope, a type, a user or group identifier, and permissions in the format
   * "[scope:][type]:[id]:[permissions]". The scope must be "default" to indicate the ACE belongs
   * to the default ACL for a directory; otherwise scope is implicit and the ACE belongs to the
   * access ACL.  There are four ACE types: "user" grants rights to the owner or a named user,
   * "group" grants rights to the owning group or a named group, "mask" restricts rights granted to
   * named users and the members of groups, and "other" grants rights to all users not found in any
   * of the other entries. The user or group identifier is omitted for entries of type "mask" and
   * "other".  The user or group identifier is also omitted for the owner and owning group.  The
   * permission field is a 3-character sequence where the first character is 'r' to grant read
   * access, the second character is 'w' to grant write access, and the third character is 'x' to
   * grant execute permission.  If access is not granted, the '-' character is used to denote that
   * the permission is denied. For example, the following ACL grants read, write, and execute
   * rights to the file owner and john.doe@contoso, the read right to the owning group, and nothing
   * to everyone else: "user::rwx,user:john.doe@contoso:rwx,group::r--,other::---,mask=rwx".
   * Invalid in conjunction with x-ms-permissions.
   */
  xMsAcl?: string;
  /**
   * Optional for Flush Data and Set Properties, but invalid for Append Data.  An ETag value.
   * Specify this header to perform the operation only if the resource's ETag matches the value
   * specified. The ETag must be specified in quotes.
   */
  ifMatch?: string;
  /**
   * Optional for Flush Data and Set Properties, but invalid for Append Data.  An ETag value or the
   * special wildcard ("*") value. Specify this header to perform the operation only if the
   * resource's ETag does not match the value specified. The ETag must be specified in quotes.
   */
  ifNoneMatch?: string;
  /**
   * Optional for Flush Data and Set Properties, but invalid for Append Data. A date and time
   * value. Specify this header to perform the operation only if the resource has been modified
   * since the specified date and time.
   */
  ifModifiedSince?: string;
  /**
   * Optional for Flush Data and Set Properties, but invalid for Append Data. A date and time
   * value. Specify this header to perform the operation only if the resource has not been modified
   * since the specified date and time.
   */
  ifUnmodifiedSince?: string;
  /**
   * Valid only for append operations.  The data to be uploaded and appended to the file.
   */
  requestBody?: msRest.HttpRequestBody;
  /**
   * A UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsClientRequestId?: string;
  /**
   * An optional operation timeout value in seconds. The period begins when the request is received
   * by the service. If the timeout value elapses before the operation completes, the operation
   * fails.
   */
  timeoutParameter?: number;
  /**
   * Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using
   * shared key authorization.
   */
  xMsDate?: string;
}

/**
 * Optional Parameters.
 */
export interface PathLeaseOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The lease duration is required to acquire a lease, and specifies the duration of the lease in
   * seconds.  The lease duration must be between 15 and 60 seconds or -1 for infinite lease.
   */
  xMsLeaseDuration?: number;
  /**
   * The lease break period duration is optional to break a lease, and  specifies the break period
   * of the lease in seconds.  The lease break  duration must be between 0 and 60 seconds.
   */
  xMsLeaseBreakPeriod?: number;
  /**
   * Required when "x-ms-lease-action" is "renew", "change" or "release". For the renew and release
   * actions, this must match the current lease ID.
   */
  xMsLeaseId?: string;
  /**
   * Required when "x-ms-lease-action" is "acquire" or "change".  A lease will be acquired with
   * this lease ID if the operation is successful.
   */
  xMsProposedLeaseId?: string;
  /**
   * Optional.  An ETag value. Specify this header to perform the operation only if the resource's
   * ETag matches the value specified. The ETag must be specified in quotes.
   */
  ifMatch?: string;
  /**
   * Optional.  An ETag value or the special wildcard ("*") value. Specify this header to perform
   * the operation only if the resource's ETag does not match the value specified. The ETag must be
   * specified in quotes.
   */
  ifNoneMatch?: string;
  /**
   * Optional. A date and time value. Specify this header to perform the operation only if the
   * resource has been modified since the specified date and time.
   */
  ifModifiedSince?: string;
  /**
   * Optional. A date and time value. Specify this header to perform the operation only if the
   * resource has not been modified since the specified date and time.
   */
  ifUnmodifiedSince?: string;
  /**
   * A UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsClientRequestId?: string;
  /**
   * An optional operation timeout value in seconds. The period begins when the request is received
   * by the service. If the timeout value elapses before the operation completes, the operation
   * fails.
   */
  timeoutParameter?: number;
  /**
   * Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using
   * shared key authorization.
   */
  xMsDate?: string;
}

/**
 * Optional Parameters.
 */
export interface PathReadOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The HTTP Range request header specifies one or more byte ranges of the resource to be
   * retrieved.
   */
  range?: string;
  /**
   * Optional. If this header is specified, the operation will be performed only if both of the
   * following conditions are met: i) the path's lease is currently active and ii) the lease ID
   * specified in the request matches that of the path.
   */
  xMsLeaseId?: string;
  /**
   * Optional. When this header is set to "true" and specified together with the Range header, the
   * service returns the MD5 hash for the range, as long as the range is less than or equal to 4MB
   * in size. If this header is specified without the Range header, the service returns status code
   * 400 (Bad Request). If this header is set to true when the range exceeds 4 MB in size, the
   * service returns status code 400 (Bad Request).
   */
  xMsRangeGetContentMd5?: boolean;
  /**
   * Optional.  An ETag value. Specify this header to perform the operation only if the resource's
   * ETag matches the value specified. The ETag must be specified in quotes.
   */
  ifMatch?: string;
  /**
   * Optional.  An ETag value or the special wildcard ("*") value. Specify this header to perform
   * the operation only if the resource's ETag does not match the value specified. The ETag must be
   * specified in quotes.
   */
  ifNoneMatch?: string;
  /**
   * Optional. A date and time value. Specify this header to perform the operation only if the
   * resource has been modified since the specified date and time.
   */
  ifModifiedSince?: string;
  /**
   * Optional. A date and time value. Specify this header to perform the operation only if the
   * resource has not been modified since the specified date and time.
   */
  ifUnmodifiedSince?: string;
  /**
   * A UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsClientRequestId?: string;
  /**
   * An optional operation timeout value in seconds. The period begins when the request is received
   * by the service. If the timeout value elapses before the operation completes, the operation
   * fails.
   */
  timeoutParameter?: number;
  /**
   * Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using
   * shared key authorization.
   */
  xMsDate?: string;
}

/**
 * Optional Parameters.
 */
export interface PathGetPropertiesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Optional. If the value is "getStatus" only the system defined properties for the path are
   * returned. If the value is "getAccessControl" the access control list is returned in the
   * response headers (Hierarchical Namespace must be enabled for the account), otherwise the
   * properties are returned. Possible values include: 'getAccessControl', 'getStatus'
   */
  action?: PathGetPropertiesAction;
  /**
   * Optional. Valid only when Hierarchical Namespace is enabled for the account. If "true", the
   * user identity values returned in the x-ms-owner, x-ms-group, and x-ms-acl response headers
   * will be transformed from Azure Active Directory Object IDs to User Principal Names.  If
   * "false", the values will be returned as Azure Active Directory Object IDs. The default value
   * is false. Note that group and application Object IDs are not translated because they do not
   * have unique friendly names.
   */
  upn?: boolean;
  /**
   * Optional. If this header is specified, the operation will be performed only if both of the
   * following conditions are met: i) the path's lease is currently active and ii) the lease ID
   * specified in the request matches that of the path.
   */
  xMsLeaseId?: string;
  /**
   * Optional.  An ETag value. Specify this header to perform the operation only if the resource's
   * ETag matches the value specified. The ETag must be specified in quotes.
   */
  ifMatch?: string;
  /**
   * Optional.  An ETag value or the special wildcard ("*") value. Specify this header to perform
   * the operation only if the resource's ETag does not match the value specified. The ETag must be
   * specified in quotes.
   */
  ifNoneMatch?: string;
  /**
   * Optional. A date and time value. Specify this header to perform the operation only if the
   * resource has been modified since the specified date and time.
   */
  ifModifiedSince?: string;
  /**
   * Optional. A date and time value. Specify this header to perform the operation only if the
   * resource has not been modified since the specified date and time.
   */
  ifUnmodifiedSince?: string;
  /**
   * A UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsClientRequestId?: string;
  /**
   * An optional operation timeout value in seconds. The period begins when the request is received
   * by the service. If the timeout value elapses before the operation completes, the operation
   * fails.
   */
  timeoutParameter?: number;
  /**
   * Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using
   * shared key authorization.
   */
  xMsDate?: string;
}

/**
 * Optional Parameters.
 */
export interface PathDeleteMethodOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Required and valid only when the resource is a directory.  If "true", all paths beneath the
   * directory will be deleted. If "false" and the directory is non-empty, an error occurs.
   */
  recursive?: boolean;
  /**
   * Optional.  When deleting a directory, the number of paths that are deleted with each
   * invocation is limited.  If the number of paths to be deleted exceeds this limit, a
   * continuation token is returned in this response header.  When a continuation token is returned
   * in the response, it must be specified in a subsequent invocation of the delete operation to
   * continue deleting the directory.
   */
  continuation?: string;
  /**
   * The lease ID must be specified if there is an active lease.
   */
  xMsLeaseId?: string;
  /**
   * Optional.  An ETag value. Specify this header to perform the operation only if the resource's
   * ETag matches the value specified. The ETag must be specified in quotes.
   */
  ifMatch?: string;
  /**
   * Optional.  An ETag value or the special wildcard ("*") value. Specify this header to perform
   * the operation only if the resource's ETag does not match the value specified. The ETag must be
   * specified in quotes.
   */
  ifNoneMatch?: string;
  /**
   * Optional. A date and time value. Specify this header to perform the operation only if the
   * resource has been modified since the specified date and time.
   */
  ifModifiedSince?: string;
  /**
   * Optional. A date and time value. Specify this header to perform the operation only if the
   * resource has not been modified since the specified date and time.
   */
  ifUnmodifiedSince?: string;
  /**
   * A UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsClientRequestId?: string;
  /**
   * An optional operation timeout value in seconds. The period begins when the request is received
   * by the service. If the timeout value elapses before the operation completes, the operation
   * fails.
   */
  timeoutParameter?: number;
  /**
   * Specifies the Coordinated Universal Time (UTC) for the request.  This is required when using
   * shared key authorization.
   */
  xMsDate?: string;
}

/**
 * An interface representing DataLakeStorageClientOptions.
 */
export interface DataLakeStorageClientOptions extends AzureServiceClientOptions {
  /**
   * Specifies the version of the REST protocol used for processing the request. This is required
   * when using shared key authorization.
   */
  xMsVersion?: string;
  /**
   * The DNS suffix for the Azure Data Lake Storage endpoint. Default value:
   * 'dfs.core.windows.net'.
   */
  dnsSuffix?: string;
}

/**
 * Defines headers for List operation.
 */
export interface FilesystemListHeaders {
  /**
   * A UTC date/time value generated by the service that indicates the time at which the response
   * was initiated.
   */
  date: string;
  /**
   * A server-generated UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsRequestId: string;
  /**
   * The version of the REST protocol used to process the request.
   */
  xMsVersion: string;
  /**
   * If the number of filesystems to be listed exceeds the maxResults limit, a continuation token
   * is returned in this response header.  When a continuation token is returned in the response,
   * it must be specified in a subsequent invocation of the list operation to continue listing the
   * filesystems.
   */
  xMsContinuation: string;
  /**
   * The content type of list filesystem response. The default content type is application/json.
   */
  contentType: string;
}

/**
 * Defines headers for Create operation.
 */
export interface FilesystemCreateHeaders {
  /**
   * A UTC date/time value generated by the service that indicates the time at which the response
   * was initiated.
   */
  date: string;
  /**
   * An HTTP entity tag associated with the filesystem.
   */
  eTag: string;
  /**
   * The data and time the filesystem was last modified.  Operations on files and directories do
   * not affect the last modified time.
   */
  lastModified: string;
  /**
   * A server-generated UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsRequestId: string;
  /**
   * The version of the REST protocol used to process the request.
   */
  xMsVersion: string;
  /**
   * A bool string indicates whether the namespace feature is enabled. If "true", the namespace is
   * enabled for the filesystem.
   */
  xMsNamespaceEnabled: string;
}

/**
 * Defines headers for SetProperties operation.
 */
export interface FilesystemSetPropertiesHeaders {
  /**
   * A UTC date/time value generated by the service that indicates the time at which the response
   * was initiated.
   */
  date: string;
  /**
   * An HTTP entity tag associated with the filesystem.  Changes to filesystem properties affect
   * the entity tag, but operations on files and directories do not.
   */
  eTag: string;
  /**
   * The data and time the filesystem was last modified.  Changes to filesystem properties update
   * the last modified time, but operations on files and directories do not.
   */
  lastModified: string;
  /**
   * A server-generated UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsRequestId: string;
  /**
   * The version of the REST protocol used to process the request.
   */
  xMsVersion: string;
}

/**
 * Defines headers for List operation.
 */
export interface PathListHeaders {
  /**
   * A UTC date/time value generated by the service that indicates the time at which the response
   * was initiated.
   */
  date: string;
  /**
   * An HTTP entity tag associated with the filesystem.  Changes to filesystem properties affect
   * the entity tag, but operations on files and directories do not.
   */
  eTag: string;
  /**
   * The data and time the filesystem was last modified.  Changes to filesystem properties update
   * the last modified time, but operations on files and directories do not.
   */
  lastModified: string;
  /**
   * A server-generated UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsRequestId: string;
  /**
   * The version of the REST protocol used to process the request.
   */
  xMsVersion: string;
  /**
   * If the number of paths to be listed exceeds the maxResults limit, a continuation token is
   * returned in this response header.  When a continuation token is returned in the response, it
   * must be specified in a subsequent invocation of the list operation to continue listing the
   * paths.
   */
  xMsContinuation: string;
}

/**
 * Defines headers for GetProperties operation.
 */
export interface FilesystemGetPropertiesHeaders {
  /**
   * A UTC date/time value generated by the service that indicates the time at which the response
   * was initiated.
   */
  date: string;
  /**
   * An HTTP entity tag associated with the filesystem.  Changes to filesystem properties affect
   * the entity tag, but operations on files and directories do not.
   */
  eTag: string;
  /**
   * The data and time the filesystem was last modified.  Changes to filesystem properties update
   * the last modified time, but operations on files and directories do not.
   */
  lastModified: string;
  /**
   * A server-generated UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsRequestId: string;
  /**
   * The version of the REST protocol used to process the request.
   */
  xMsVersion: string;
  /**
   * The user-defined properties associated with the filesystem.  A comma-separated list of name
   * and value pairs in the format "n1=v1, n2=v2, ...", where each value is a base64 encoded
   * string. Note that the string may only contain ASCII characters in the ISO-8859-1 character
   * set.
   */
  xMsProperties: string;
  /**
   * A bool string indicates whether the namespace feature is enabled. If "true", the namespace is
   * enabled for the filesystem.
   */
  xMsNamespaceEnabled: string;
}

/**
 * Defines headers for Delete operation.
 */
export interface FilesystemDeleteHeaders {
  /**
   * A server-generated UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsRequestId: string;
  /**
   * The version of the REST protocol used to process the request.
   */
  xMsVersion: string;
  /**
   * A UTC date/time value generated by the service that indicates the time at which the response
   * was initiated.
   */
  date: string;
}

/**
 * Defines headers for Create operation.
 */
export interface PathCreateHeaders {
  /**
   * A UTC date/time value generated by the service that indicates the time at which the response
   * was initiated.
   */
  date: string;
  /**
   * An HTTP entity tag associated with the file or directory.
   */
  eTag: string;
  /**
   * The data and time the file or directory was last modified.  Write operations on the file or
   * directory update the last modified time.
   */
  lastModified: string;
  /**
   * A server-generated UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsRequestId: string;
  /**
   * The version of the REST protocol used to process the request.
   */
  xMsVersion: string;
  /**
   * When renaming a directory, the number of paths that are renamed with each invocation is
   * limited.  If the number of paths to be renamed exceeds this limit, a continuation token is
   * returned in this response header.  When a continuation token is returned in the response, it
   * must be specified in a subsequent invocation of the rename operation to continue renaming the
   * directory.
   */
  xMsContinuation: string;
  /**
   * The size of the resource in bytes.
   */
  contentLength: number;
}

/**
 * Defines headers for Update operation.
 */
export interface PathUpdateHeaders {
  /**
   * A UTC date/time value generated by the service that indicates the time at which the response
   * was initiated.
   */
  date: string;
  /**
   * An HTTP entity tag associated with the file or directory.
   */
  eTag: string;
  /**
   * The data and time the file or directory was last modified.  Write operations on the file or
   * directory update the last modified time.
   */
  lastModified: string;
  /**
   * Indicates that the service supports requests for partial file content.
   */
  acceptRanges: string;
  /**
   * If the Cache-Control request header has previously been set for the resource, that value is
   * returned in this header.
   */
  cacheControl: string;
  /**
   * If the Content-Disposition request header has previously been set for the resource, that value
   * is returned in this header.
   */
  contentDisposition: string;
  /**
   * If the Content-Encoding request header has previously been set for the resource, that value is
   * returned in this header.
   */
  contentEncoding: string;
  /**
   * If the Content-Language request header has previously been set for the resource, that value is
   * returned in this header.
   */
  contentLanguage: string;
  /**
   * The size of the resource in bytes.
   */
  contentLength: number;
  /**
   * Indicates the range of bytes returned in the event that the client requested a subset of the
   * file by setting the Range request header.
   */
  contentRange: string;
  /**
   * The content type specified for the resource. If no content type was specified, the default
   * content type is application/octet-stream.
   */
  contentType: string;
  /**
   * An MD5 hash of the request content. This header is only returned for "Append" operation. This
   * header is returned so that the client can check for message content integrity. The value of
   * this header is computed by the service; it is not necessarily the same value specified in the
   * request headers.
   */
  contentMD5: string;
  /**
   * User-defined properties associated with the file or directory, in the format of a
   * comma-separated list of name and value pairs "n1=v1, n2=v2, ...", where each value is a base64
   * encoded string. Note that the string may only contain ASCII characters in the ISO-8859-1
   * character set.
   */
  xMsProperties: string;
  /**
   * A server-generated UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsRequestId: string;
  /**
   * The version of the REST protocol used to process the request.
   */
  xMsVersion: string;
}

/**
 * Defines headers for Lease operation.
 */
export interface PathLeaseHeaders {
  /**
   * A UTC date/time value generated by the service that indicates the time at which the response
   * was initiated.
   */
  date: string;
  /**
   * An HTTP entity tag associated with the file or directory.
   */
  eTag: string;
  /**
   * The data and time the file or directory was last modified.  Write operations on the file or
   * directory update the last modified time.
   */
  lastModified: string;
  /**
   * A server-generated UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsRequestId: string;
  /**
   * The version of the REST protocol used to process the request.
   */
  xMsVersion: string;
  /**
   * A successful "acquire" action returns the lease ID.
   */
  xMsLeaseId: string;
  /**
   * The time remaining in the lease period in seconds.
   */
  xMsLeaseTime: string;
}

/**
 * Defines headers for Read operation.
 */
export interface PathReadHeaders {
  /**
   * Indicates that the service supports requests for partial file content.
   */
  acceptRanges: string;
  /**
   * If the Cache-Control request header has previously been set for the resource, that value is
   * returned in this header.
   */
  cacheControl: string;
  /**
   * If the Content-Disposition request header has previously been set for the resource, that value
   * is returned in this header.
   */
  contentDisposition: string;
  /**
   * If the Content-Encoding request header has previously been set for the resource, that value is
   * returned in this header.
   */
  contentEncoding: string;
  /**
   * If the Content-Language request header has previously been set for the resource, that value is
   * returned in this header.
   */
  contentLanguage: string;
  /**
   * The size of the resource in bytes.
   */
  contentLength: number;
  /**
   * Indicates the range of bytes returned in the event that the client requested a subset of the
   * file by setting the Range request header.
   */
  contentRange: string;
  /**
   * The content type specified for the resource. If no content type was specified, the default
   * content type is application/octet-stream.
   */
  contentType: string;
  /**
   * The MD5 hash of read range. If the request is to read a specified range and the
   * "x-ms-range-get-content-md5" is set to true, then the request returns an MD5 hash for the
   * range, as long as the range size is less than or equal to 4 MB.
   */
  contentMD5: string;
  /**
   * A UTC date/time value generated by the service that indicates the time at which the response
   * was initiated.
   */
  date: string;
  /**
   * An HTTP entity tag associated with the file or directory.
   */
  eTag: string;
  /**
   * The data and time the file or directory was last modified.  Write operations on the file or
   * directory update the last modified time.
   */
  lastModified: string;
  /**
   * A server-generated UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsRequestId: string;
  /**
   * The version of the REST protocol used to process the request.
   */
  xMsVersion: string;
  /**
   * The type of the resource.  The value may be "file" or "directory".  If not set, the value is
   * "file".
   */
  xMsResourceType: string;
  /**
   * The user-defined properties associated with the file or directory, in the format of a
   * comma-separated list of name and value pairs "n1=v1, n2=v2, ...", where each value is a base64
   * encoded string. Note that the string may only contain ASCII characters in the ISO-8859-1
   * character set.
   */
  xMsProperties: string;
  /**
   * When a resource is leased, specifies whether the lease is of infinite or fixed duration.
   */
  xMsLeaseDuration: string;
  /**
   * Lease state of the resource.
   */
  xMsLeaseState: string;
  /**
   * The lease status of the resource.
   */
  xMsLeaseStatus: string;
  /**
   * The MD5 hash of complete file stored in storage. If the file has a MD5 hash, and if request
   * contains range header (Range or x-ms-range), this response header is returned with the value
   * of the complete file's MD5 value. This value may or may not be equal to the value returned in
   * Content-MD5 header, with the latter calculated from the requested range.
   */
  xMsContentMd5: string;
}

/**
 * Defines headers for GetProperties operation.
 */
export interface PathGetPropertiesHeaders {
  /**
   * Indicates that the service supports requests for partial file content.
   */
  acceptRanges: string;
  /**
   * If the Cache-Control request header has previously been set for the resource, that value is
   * returned in this header.
   */
  cacheControl: string;
  /**
   * If the Content-Disposition request header has previously been set for the resource, that value
   * is returned in this header.
   */
  contentDisposition: string;
  /**
   * If the Content-Encoding request header has previously been set for the resource, that value is
   * returned in this header.
   */
  contentEncoding: string;
  /**
   * If the Content-Language request header has previously been set for the resource, that value is
   * returned in this header.
   */
  contentLanguage: string;
  /**
   * The size of the resource in bytes.
   */
  contentLength: number;
  /**
   * Indicates the range of bytes returned in the event that the client requested a subset of the
   * file by setting the Range request header.
   */
  contentRange: string;
  /**
   * The content type specified for the resource. If no content type was specified, the default
   * content type is application/octet-stream.
   */
  contentType: string;
  /**
   * The MD5 hash of complete file stored in storage. This header is returned only for
   * "GetProperties" operation. If the Content-MD5 header has been set for the file, this response
   * header is returned for GetProperties call so that the client can check for message content
   * integrity.
   */
  contentMD5: string;
  /**
   * A UTC date/time value generated by the service that indicates the time at which the response
   * was initiated.
   */
  date: string;
  /**
   * An HTTP entity tag associated with the file or directory.
   */
  eTag: string;
  /**
   * The data and time the file or directory was last modified.  Write operations on the file or
   * directory update the last modified time.
   */
  lastModified: string;
  /**
   * A server-generated UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsRequestId: string;
  /**
   * The version of the REST protocol used to process the request.
   */
  xMsVersion: string;
  /**
   * The type of the resource.  The value may be "file" or "directory".  If not set, the value is
   * "file".
   */
  xMsResourceType: string;
  /**
   * The user-defined properties associated with the file or directory, in the format of a
   * comma-separated list of name and value pairs "n1=v1, n2=v2, ...", where each value is a base64
   * encoded string. Note that the string may only contain ASCII characters in the ISO-8859-1
   * character set.
   */
  xMsProperties: string;
  /**
   * The owner of the file or directory. Included in the response if Hierarchical Namespace is
   * enabled for the account.
   */
  xMsOwner: string;
  /**
   * The owning group of the file or directory. Included in the response if Hierarchical Namespace
   * is enabled for the account.
   */
  xMsGroup: string;
  /**
   * The POSIX access permissions for the file owner, the file owning group, and others. Included
   * in the response if Hierarchical Namespace is enabled for the account.
   */
  xMsPermissions: string;
  /**
   * The POSIX access control list for the file or directory.  Included in the response only if the
   * action is "getAccessControl" and Hierarchical Namespace is enabled for the account.
   */
  xMsAcl: string;
  /**
   * When a resource is leased, specifies whether the lease is of infinite or fixed duration.
   */
  xMsLeaseDuration: string;
  /**
   * Lease state of the resource.
   */
  xMsLeaseState: string;
  /**
   * The lease status of the resource.
   */
  xMsLeaseStatus: string;
}

/**
 * Defines headers for Delete operation.
 */
export interface PathDeleteHeaders {
  /**
   * A UTC date/time value generated by the service that indicates the time at which the response
   * was initiated.
   */
  date: string;
  /**
   * A server-generated UUID recorded in the analytics logs for troubleshooting and correlation.
   */
  xMsRequestId: string;
  /**
   * The version of the REST protocol used to process the request.
   */
  xMsVersion: string;
  /**
   * When deleting a directory, the number of paths that are deleted with each invocation is
   * limited.  If the number of paths to be deleted exceeds this limit, a continuation token is
   * returned in this response header.  When a continuation token is returned in the response, it
   * must be specified in a subsequent invocation of the delete operation to continue deleting the
   * directory.
   */
  xMsContinuation: string;
}

/**
 * @interface
 * An interface representing the FilesystemList.
 */
export interface FilesystemList extends Array<Filesystem> {
  filesystems?: Filesystem[];
}

/**
 * @interface
 * An interface representing the PathList.
 */
export interface PathList extends Array<Path> {
  paths?: Path[];
}

/**
 * Defines values for PathResourceType.
 * Possible values include: 'directory', 'file'
 * @readonly
 */
export type PathResourceType = 'directory' | 'file';

/**
 * Defines values for PathRenameMode.
 * Possible values include: 'legacy', 'posix'
 * @readonly
 */
export type PathRenameMode = 'legacy' | 'posix';

/**
 * Defines values for PathUpdateAction.
 * Possible values include: 'append', 'flush', 'setProperties', 'setAccessControl'
 * @readonly
 */
export type PathUpdateAction = 'append' | 'flush' | 'setProperties' | 'setAccessControl';

/**
 * Defines values for PathLeaseAction.
 * Possible values include: 'acquire', 'break', 'change', 'renew', 'release'
 * @readonly
 */
export type PathLeaseAction = 'acquire' | 'break' | 'change' | 'renew' | 'release';

/**
 * Defines values for PathGetPropertiesAction.
 * Possible values include: 'getAccessControl', 'getStatus'
 * @readonly
 */
export type PathGetPropertiesAction = 'getAccessControl' | 'getStatus';

/**
 * Contains response data for the list operation.
 */
export type FilesystemListResponse = FilesystemList & FilesystemListHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: FilesystemListHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FilesystemList;
    };
};

/**
 * Contains response data for the create operation.
 */
export type FilesystemCreateResponse = FilesystemCreateHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: FilesystemCreateHeaders;
    };
};

/**
 * Contains response data for the setProperties operation.
 */
export type FilesystemSetPropertiesResponse = FilesystemSetPropertiesHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: FilesystemSetPropertiesHeaders;
    };
};

/**
 * Contains response data for the getProperties operation.
 */
export type FilesystemGetPropertiesResponse = FilesystemGetPropertiesHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: FilesystemGetPropertiesHeaders;
    };
};

/**
 * Contains response data for the deleteMethod operation.
 */
export type FilesystemDeleteResponse = FilesystemDeleteHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: FilesystemDeleteHeaders;
    };
};

/**
 * Contains response data for the list operation.
 */
export type PathListResponse = PathList & PathListHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PathListHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PathList;
    };
};

/**
 * Contains response data for the create operation.
 */
export type PathCreateResponse = PathCreateHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PathCreateHeaders;
    };
};

/**
 * Contains response data for the update operation.
 */
export type PathUpdateResponse = PathUpdateHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PathUpdateHeaders;
    };
};

/**
 * Contains response data for the lease operation.
 */
export type PathLeaseResponse = PathLeaseHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PathLeaseHeaders;
    };
};

/**
 * Contains response data for the read operation.
 */
export type PathReadResponse = PathReadHeaders & {
  /**
   * BROWSER ONLY
   *
   * The response body as a browser Blob.
   * Always undefined in node.js.
   */
  blobBody?: Promise<Blob>;

  /**
   * NODEJS ONLY
   *
   * The response body as a node.js Readable stream.
   * Always undefined in the browser.
   */
  readableStreamBody?: NodeJS.ReadableStream;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PathReadHeaders;
    };
};

/**
 * Contains response data for the getProperties operation.
 */
export type PathGetPropertiesResponse = PathGetPropertiesHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PathGetPropertiesHeaders;
    };
};

/**
 * Contains response data for the deleteMethod operation.
 */
export type PathDeleteResponse = PathDeleteHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PathDeleteHeaders;
    };
};
