/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";

export const acceptLanguage: msRest.OperationParameter = {
  parameterPath: "acceptLanguage",
  mapper: {
    serializedName: "accept-language",
    defaultValue: 'en-US',
    type: {
      name: "String"
    }
  }
};
export const accountName: msRest.OperationURLParameter = {
  parameterPath: "accountName",
  mapper: {
    required: true,
    serializedName: "accountName",
    defaultValue: '',
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};
export const action0: msRest.OperationQueryParameter = {
  parameterPath: "action",
  mapper: {
    required: true,
    serializedName: "action",
    type: {
      name: "Enum",
      allowedValues: [
        "append",
        "flush",
        "setProperties",
        "setAccessControl"
      ]
    }
  }
};
export const action1: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "action"
  ],
  mapper: {
    serializedName: "action",
    type: {
      name: "Enum",
      allowedValues: [
        "getAccessControl",
        "getStatus"
      ]
    }
  }
};
export const cacheControl: msRest.OperationParameter = {
  parameterPath: [
    "options",
    "cacheControl"
  ],
  mapper: {
    serializedName: "Cache-Control",
    type: {
      name: "String"
    }
  }
};
export const close: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "close"
  ],
  mapper: {
    serializedName: "close",
    type: {
      name: "Boolean"
    }
  }
};
export const contentDisposition: msRest.OperationParameter = {
  parameterPath: [
    "options",
    "contentDisposition"
  ],
  mapper: {
    serializedName: "Content-Disposition",
    type: {
      name: "String"
    }
  }
};
export const contentEncoding: msRest.OperationParameter = {
  parameterPath: [
    "options",
    "contentEncoding"
  ],
  mapper: {
    serializedName: "Content-Encoding",
    type: {
      name: "String"
    }
  }
};
export const contentLanguage: msRest.OperationParameter = {
  parameterPath: [
    "options",
    "contentLanguage"
  ],
  mapper: {
    serializedName: "Content-Language",
    type: {
      name: "String"
    }
  }
};
export const contentLength: msRest.OperationParameter = {
  parameterPath: [
    "options",
    "contentLength"
  ],
  mapper: {
    serializedName: "Content-Length",
    constraints: {
      InclusiveMinimum: 0
    },
    type: {
      name: "Number"
    }
  }
};
export const contentMD5: msRest.OperationParameter = {
  parameterPath: [
    "options",
    "contentMD5"
  ],
  mapper: {
    serializedName: "Content-MD5",
    type: {
      name: "String"
    }
  }
};
export const continuation: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "continuation"
  ],
  mapper: {
    serializedName: "continuation",
    type: {
      name: "String"
    }
  }
};
export const directory: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "directory"
  ],
  mapper: {
    serializedName: "directory",
    type: {
      name: "String"
    }
  }
};
export const dnsSuffix: msRest.OperationURLParameter = {
  parameterPath: "dnsSuffix",
  mapper: {
    required: true,
    serializedName: "dnsSuffix",
    defaultValue: 'dfs.core.windows.net',
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};
export const filesystem: msRest.OperationURLParameter = {
  parameterPath: "filesystem",
  mapper: {
    required: true,
    serializedName: "filesystem",
    constraints: {
      MaxLength: 63,
      MinLength: 3,
      Pattern: /^[$a-z0-9](?!.*--)[-a-z0-9]{1,61}[a-z0-9]$/
    },
    type: {
      name: "String"
    }
  }
};
export const ifMatch: msRest.OperationParameter = {
  parameterPath: [
    "options",
    "ifMatch"
  ],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};
export const ifModifiedSince: msRest.OperationParameter = {
  parameterPath: [
    "options",
    "ifModifiedSince"
  ],
  mapper: {
    serializedName: "If-Modified-Since",
    type: {
      name: "String"
    }
  }
};
export const ifNoneMatch: msRest.OperationParameter = {
  parameterPath: [
    "options",
    "ifNoneMatch"
  ],
  mapper: {
    serializedName: "If-None-Match",
    type: {
      name: "String"
    }
  }
};
export const ifUnmodifiedSince: msRest.OperationParameter = {
  parameterPath: [
    "options",
    "ifUnmodifiedSince"
  ],
  mapper: {
    serializedName: "If-Unmodified-Since",
    type: {
      name: "String"
    }
  }
};
export const maxResults: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "maxResults"
  ],
  mapper: {
    serializedName: "maxResults",
    constraints: {
      InclusiveMinimum: 1
    },
    type: {
      name: "Number"
    }
  }
};
export const mode: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "mode"
  ],
  mapper: {
    serializedName: "mode",
    type: {
      name: "Enum",
      allowedValues: [
        "legacy",
        "posix"
      ]
    }
  }
};
export const path: msRest.OperationURLParameter = {
  parameterPath: "path",
  mapper: {
    required: true,
    serializedName: "path",
    type: {
      name: "String"
    }
  }
};
export const position: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "position"
  ],
  mapper: {
    serializedName: "position",
    type: {
      name: "Number"
    }
  }
};
export const prefix: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "prefix"
  ],
  mapper: {
    serializedName: "prefix",
    type: {
      name: "String"
    }
  }
};
export const range: msRest.OperationParameter = {
  parameterPath: [
    "options",
    "range"
  ],
  mapper: {
    serializedName: "Range",
    type: {
      name: "String"
    }
  }
};
export const recursive0: msRest.OperationQueryParameter = {
  parameterPath: "recursive",
  mapper: {
    required: true,
    serializedName: "recursive",
    type: {
      name: "Boolean"
    }
  }
};
export const recursive1: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "recursive"
  ],
  mapper: {
    serializedName: "recursive",
    type: {
      name: "Boolean"
    }
  }
};
export const resource0: msRest.OperationQueryParameter = {
  parameterPath: "resource",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "resource",
    defaultValue: 'account',
    type: {
      name: "String"
    }
  }
};
export const resource1: msRest.OperationQueryParameter = {
  parameterPath: "resource",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "resource",
    defaultValue: 'filesystem',
    type: {
      name: "String"
    }
  }
};
export const resource2: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "resource"
  ],
  mapper: {
    serializedName: "resource",
    type: {
      name: "Enum",
      allowedValues: [
        "directory",
        "file"
      ]
    }
  }
};
export const retainUncommittedData: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "retainUncommittedData"
  ],
  mapper: {
    serializedName: "retainUncommittedData",
    type: {
      name: "Boolean"
    }
  }
};
export const timeout: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "timeout"
  ],
  mapper: {
    serializedName: "timeout",
    constraints: {
      InclusiveMinimum: 1
    },
    type: {
      name: "Number"
    }
  }
};
export const upn: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "upn"
  ],
  mapper: {
    serializedName: "upn",
    type: {
      name: "Boolean"
    }
  }
};
export const xMsAcl: msRest.OperationParameter = {
  parameterPath: [
    "options",
    "xMsAcl"
  ],
  mapper: {
    serializedName: "x-ms-acl",
    type: {
      name: "String"
    }
  }
};
export const xMsCacheControl: msRest.OperationParameter = {
  parameterPath: [
    "options",
    "xMsCacheControl"
  ],
  mapper: {
    serializedName: "x-ms-cache-control",
    type: {
      name: "String"
    }
  }
};
export const xMsClientRequestId: msRest.OperationParameter = {
  parameterPath: [
    "options",
    "xMsClientRequestId"
  ],
  mapper: {
    serializedName: "x-ms-client-request-id",
    constraints: {
      Pattern: /^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$/
    },
    type: {
      name: "String"
    }
  }
};
export const xMsContentDisposition: msRest.OperationParameter = {
  parameterPath: [
    "options",
    "xMsContentDisposition"
  ],
  mapper: {
    serializedName: "x-ms-content-disposition",
    type: {
      name: "String"
    }
  }
};
export const xMsContentEncoding: msRest.OperationParameter = {
  parameterPath: [
    "options",
    "xMsContentEncoding"
  ],
  mapper: {
    serializedName: "x-ms-content-encoding",
    type: {
      name: "String"
    }
  }
};
export const xMsContentLanguage: msRest.OperationParameter = {
  parameterPath: [
    "options",
    "xMsContentLanguage"
  ],
  mapper: {
    serializedName: "x-ms-content-language",
    type: {
      name: "String"
    }
  }
};
export const xMsContentMd5: msRest.OperationParameter = {
  parameterPath: [
    "options",
    "xMsContentMd5"
  ],
  mapper: {
    serializedName: "x-ms-content-md5",
    type: {
      name: "String"
    }
  }
};
export const xMsContentType: msRest.OperationParameter = {
  parameterPath: [
    "options",
    "xMsContentType"
  ],
  mapper: {
    serializedName: "x-ms-content-type",
    type: {
      name: "String"
    }
  }
};
export const xMsDate: msRest.OperationParameter = {
  parameterPath: [
    "options",
    "xMsDate"
  ],
  mapper: {
    serializedName: "x-ms-date",
    type: {
      name: "String"
    }
  }
};
export const xMsGroup: msRest.OperationParameter = {
  parameterPath: [
    "options",
    "xMsGroup"
  ],
  mapper: {
    serializedName: "x-ms-group",
    type: {
      name: "String"
    }
  }
};
export const xMsLeaseAction: msRest.OperationParameter = {
  parameterPath: "xMsLeaseAction",
  mapper: {
    required: true,
    serializedName: "x-ms-lease-action",
    type: {
      name: "Enum",
      allowedValues: [
        "acquire",
        "break",
        "change",
        "renew",
        "release"
      ]
    }
  }
};
export const xMsLeaseBreakPeriod: msRest.OperationParameter = {
  parameterPath: [
    "options",
    "xMsLeaseBreakPeriod"
  ],
  mapper: {
    serializedName: "x-ms-lease-break-period",
    type: {
      name: "Number"
    }
  }
};
export const xMsLeaseDuration: msRest.OperationParameter = {
  parameterPath: [
    "options",
    "xMsLeaseDuration"
  ],
  mapper: {
    serializedName: "x-ms-lease-duration",
    type: {
      name: "Number"
    }
  }
};
export const xMsLeaseId: msRest.OperationParameter = {
  parameterPath: [
    "options",
    "xMsLeaseId"
  ],
  mapper: {
    serializedName: "x-ms-lease-id",
    constraints: {
      Pattern: /^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$/
    },
    type: {
      name: "String"
    }
  }
};
export const xMsOwner: msRest.OperationParameter = {
  parameterPath: [
    "options",
    "xMsOwner"
  ],
  mapper: {
    serializedName: "x-ms-owner",
    type: {
      name: "String"
    }
  }
};
export const xMsPermissions: msRest.OperationParameter = {
  parameterPath: [
    "options",
    "xMsPermissions"
  ],
  mapper: {
    serializedName: "x-ms-permissions",
    type: {
      name: "String"
    }
  }
};
export const xMsProperties: msRest.OperationParameter = {
  parameterPath: [
    "options",
    "xMsProperties"
  ],
  mapper: {
    serializedName: "x-ms-properties",
    type: {
      name: "String"
    }
  }
};
export const xMsProposedLeaseId: msRest.OperationParameter = {
  parameterPath: [
    "options",
    "xMsProposedLeaseId"
  ],
  mapper: {
    serializedName: "x-ms-proposed-lease-id",
    constraints: {
      Pattern: /^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$/
    },
    type: {
      name: "String"
    }
  }
};
export const xMsRangeGetContentMd5: msRest.OperationParameter = {
  parameterPath: [
    "options",
    "xMsRangeGetContentMd5"
  ],
  mapper: {
    serializedName: "x-ms-range-get-content-md5",
    type: {
      name: "Boolean"
    }
  }
};
export const xMsRenameSource: msRest.OperationParameter = {
  parameterPath: [
    "options",
    "xMsRenameSource"
  ],
  mapper: {
    serializedName: "x-ms-rename-source",
    type: {
      name: "String"
    }
  }
};
export const xMsSourceIfMatch: msRest.OperationParameter = {
  parameterPath: [
    "options",
    "xMsSourceIfMatch"
  ],
  mapper: {
    serializedName: "x-ms-source-if-match",
    type: {
      name: "String"
    }
  }
};
export const xMsSourceIfModifiedSince: msRest.OperationParameter = {
  parameterPath: [
    "options",
    "xMsSourceIfModifiedSince"
  ],
  mapper: {
    serializedName: "x-ms-source-if-modified-since",
    type: {
      name: "String"
    }
  }
};
export const xMsSourceIfNoneMatch: msRest.OperationParameter = {
  parameterPath: [
    "options",
    "xMsSourceIfNoneMatch"
  ],
  mapper: {
    serializedName: "x-ms-source-if-none-match",
    type: {
      name: "String"
    }
  }
};
export const xMsSourceIfUnmodifiedSince: msRest.OperationParameter = {
  parameterPath: [
    "options",
    "xMsSourceIfUnmodifiedSince"
  ],
  mapper: {
    serializedName: "x-ms-source-if-unmodified-since",
    type: {
      name: "String"
    }
  }
};
export const xMsSourceLeaseId: msRest.OperationParameter = {
  parameterPath: [
    "options",
    "xMsSourceLeaseId"
  ],
  mapper: {
    serializedName: "x-ms-source-lease-id",
    constraints: {
      Pattern: /^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$/
    },
    type: {
      name: "String"
    }
  }
};
export const xMsUmask: msRest.OperationParameter = {
  parameterPath: [
    "options",
    "xMsUmask"
  ],
  mapper: {
    serializedName: "x-ms-umask",
    type: {
      name: "String"
    }
  }
};
export const xMsVersion: msRest.OperationParameter = {
  parameterPath: "xMsVersion",
  mapper: {
    serializedName: "x-ms-version",
    type: {
      name: "String"
    }
  }
};
