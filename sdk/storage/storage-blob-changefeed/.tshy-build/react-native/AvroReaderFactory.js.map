{"version":3,"file":"AvroReaderFactory.js","sourceRoot":"","sources":["../../src/AvroReaderFactory.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAGlC,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAE1D;;GAEG;AACH,MAAM,OAAO,iBAAiB;IAUrB,MAAM,CACX,UAAwB,EACxB,YAA2B,EAC3B,WAAoB,EACpB,UAAmB;QAEnB,IAAI,YAAY,EAAE,CAAC;YACjB,OAAO,IAAI,UAAU,CAAC,UAAU,EAAE,YAAY,EAAE,WAAY,EAAE,UAAW,CAAC,CAAC;QAC7E,CAAC;aAAM,CAAC;YACN,OAAO,IAAI,UAAU,CAAC,UAAU,CAAC,CAAC;QACpC,CAAC;IACH,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { AvroReadable } from \"@azure/storage-internal-avro\";\nimport { AvroReader } from \"@azure/storage-internal-avro\";\n\n/**\n * Creates AvroReaders.  Allows us to inject mock AvroReaders in the Chunk unit tests.\n */\nexport class AvroReaderFactory {\n  public create(headerAndDataStream: AvroReadable): AvroReader;\n\n  public create(\n    dataStream: AvroReadable,\n    headerStream: AvroReadable,\n    blockOffset: number,\n    eventIndex: number,\n  ): AvroReader;\n\n  public create(\n    dataStream: AvroReadable,\n    headerStream?: AvroReadable,\n    blockOffset?: number,\n    eventIndex?: number,\n  ): AvroReader {\n    if (headerStream) {\n      return new AvroReader(dataStream, headerStream, blockOffset!, eventIndex!);\n    } else {\n      return new AvroReader(dataStream);\n    }\n  }\n}\n"]}