{"version":3,"file":"BlobChangeFeedClient.js","sourceRoot":"","sources":["../../src/BlobChangeFeedClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  StoragePipelineOptions,\n  StorageSharedKeyCredential,\n  AnonymousCredential,\n} from \"@azure/storage-blob\";\nimport { BlobServiceClient, Pipeline } from \"@azure/storage-blob\";\nimport type { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport type { BlobChangeFeedEvent } from \"./models/BlobChangeFeedEvent.js\";\nimport { ChangeFeedFactory } from \"./ChangeFeedFactory.js\";\nimport type { ChangeFeed } from \"./ChangeFeed.js\";\nimport { CHANGE_FEED_MAX_PAGE_SIZE, SDK_VERSION } from \"./utils/constants.js\";\nimport type { BlobChangeFeedListChangesOptions } from \"./models/models.js\";\nimport type { TokenCredential } from \"@azure/core-auth\";\n\n/**\n * Contains paged response data for the {@link BlobChangeFeedClient.listChanges} operation.\n */\nexport class BlobChangeFeedEventPage {\n  /**\n   * Array of {@link BlobChangeFeedEvent}.\n   */\n  public events: BlobChangeFeedEvent[];\n\n  /**\n   * The token that keeps track of where to continue the iterator.\n   */\n  public continuationToken: string;\n\n  constructor() {\n    this.events = [];\n    this.continuationToken = \"\";\n  }\n}\n\n/**\n * Creates a new Pipeline object with Credential provided.\n *\n * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n * @param pipelineOptions - Optional. Options.\n * @returns A new Pipeline object.\n */\nexport function newPipeline(\n  credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n  pipelineOptions: StoragePipelineOptions = {},\n): Pipeline {\n  return newPipeline(credential, appendUserAgentPrefix(pipelineOptions));\n}\n\nfunction appendUserAgentPrefix(options?: StoragePipelineOptions): StoragePipelineOptions {\n  if (!options) {\n    options = {};\n  }\n  if (options.userAgentOptions === undefined) {\n    options.userAgentOptions = {};\n  }\n\n  if (options.userAgentOptions.userAgentPrefix === undefined) {\n    options.userAgentOptions.userAgentPrefix = \"\";\n  } else if (options.userAgentOptions.userAgentPrefix !== \"\") {\n    options.userAgentOptions.userAgentPrefix += \" \";\n  }\n  options.userAgentOptions.userAgentPrefix += `changefeed-js/${SDK_VERSION}`;\n  return options;\n}\n\n/**\n * Blob Change Feed client options.\n */\nexport interface BlobChangeFeedClientOptions {\n  /**\n   * The maximum length of an transfer in bytes.\n   */\n  maximumTransferSize?: number;\n}\n\n/**\n * BlobChangeFeedClient.\n * @see https://learn.microsoft.com/en-us/azure/storage/blobs/storage-blob-change-feed?tabs=azure-portal\n */\nexport class BlobChangeFeedClient {\n  /**\n   * blobServiceClient provided by `@azure/storage-blob` package.\n   */\n  private blobServiceClient: BlobServiceClient;\n  private changeFeedFactory: ChangeFeedFactory;\n  private changeFeedClientOptions: BlobChangeFeedClientOptions;\n\n  /**\n   *\n   * Creates an instance of BlobChangeFeedClient from connection string.\n   *\n   * @param connectionString - Account connection string or a SAS connection string of an Azure storage account.\n   *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]\n   *                                  Account connection string example -\n   *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`\n   *                                  SAS connection string example -\n   *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  public static fromConnectionString(\n    connectionString: string,\n    // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */\n    options?: StoragePipelineOptions,\n    // Static method to construct an object, the option is for the object not for the method.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */\n    changeFeedClientOptions?: BlobChangeFeedClientOptions,\n  ): BlobChangeFeedClient {\n    const blobServiceClient = BlobServiceClient.fromConnectionString(connectionString, options);\n    return new BlobChangeFeedClient(\n      blobServiceClient.url,\n      blobServiceClient.credential,\n      appendUserAgentPrefix(options),\n      changeFeedClientOptions,\n    );\n  }\n\n  /**\n   * Creates an instance of BlobChangeFeedClient.\n   *\n   * @param url - A Client string pointing to Azure Storage blob service, such as\n   *                     \"https://myaccount.blob.core.windows.net\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.blob.core.windows.net?sasString\".\n   * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   *\n   * Example using DefaultAzureCredential from `@azure/identity`:\n   *\n   * ```ts snippet:ReadmeSampleCreateClient_TokenCredential\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { BlobChangeFeedClient } from \"@azure/storage-blob-changefeed\";\n   *\n   * // Enter your storage account name and shared key\n   * const account = \"<account>\";\n   * const credential = new DefaultAzureCredential();\n   * const changeFeedClient = new BlobChangeFeedClient(\n   *   // When using AnonymousCredential, following url should include a valid SAS or support public access\n   *   `https://${account}.blob.core.windows.net`,\n   *   credential,\n   * );\n   * ```\n   *\n   * Example using an account name/key:\n   *\n   * ```ts snippet:ReadmeSampleCreateClient\n   * import { StorageSharedKeyCredential } from \"@azure/storage-blob\";\n   * import { BlobChangeFeedClient } from \"@azure/storage-blob-changefeed\";\n   *\n   * // Enter your storage account name and shared key\n   * const account = \"<account>\";\n   * const accountKey = \"<accountkey>\";\n   * // Use StorageSharedKeyCredential with storage account and account key\n   * // StorageSharedKeyCredential is only available in Node.js runtime, not in browsers\n   * const sharedKeyCredential = new StorageSharedKeyCredential(account, accountKey);\n   * const changeFeedClient = new BlobChangeFeedClient(\n   *   // When using AnonymousCredential, following url should include a valid SAS or support public access\n   *   `https://${account}.blob.core.windows.net`,\n   *   sharedKeyCredential,\n   * );\n   * ```\n   */\n  constructor(\n    url: string,\n    credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */\n    options?: StoragePipelineOptions,\n    changeFeedClientOptions?: BlobChangeFeedClientOptions,\n  );\n\n  /**\n   * Creates an instance of BlobChangeFeedClient.\n   *\n   * @param url - A Client string pointing to Azure Storage blob service, such as\n   *                     \"https://myaccount.blob.core.windows.net\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.blob.core.windows.net?sasString\".\n   * @param pipeline - Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   */\n  constructor(url: string, pipeline: Pipeline);\n  constructor(\n    urlOrClient: string,\n    credentialOrPipeline?:\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | Pipeline,\n    // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */\n    options?: StoragePipelineOptions,\n    changeFeedClientOptions?: BlobChangeFeedClientOptions,\n  ) {\n    this.changeFeedClientOptions = changeFeedClientOptions || {};\n    this.changeFeedFactory = new ChangeFeedFactory(\n      this.changeFeedClientOptions.maximumTransferSize,\n    );\n\n    if (credentialOrPipeline instanceof Pipeline) {\n      this.blobServiceClient = new BlobServiceClient(urlOrClient, credentialOrPipeline);\n    } else {\n      this.blobServiceClient = new BlobServiceClient(\n        urlOrClient,\n        credentialOrPipeline,\n        appendUserAgentPrefix(options),\n      );\n    }\n  }\n\n  private async *getChange(\n    options: BlobChangeFeedListChangesOptions = {},\n  ): AsyncIterableIterator<BlobChangeFeedEvent> {\n    const changeFeed: ChangeFeed = await this.changeFeedFactory.create(\n      this.blobServiceClient,\n      undefined,\n      options,\n    );\n\n    while (changeFeed.hasNext()) {\n      const event = await changeFeed.getChange({\n        abortSignal: options.abortSignal,\n        tracingOptions: options.tracingOptions,\n      });\n      if (event) {\n        yield event;\n      } else {\n        return;\n      }\n    }\n  }\n\n  // start in ChangeFeedListChangesOptions will be ignored when continuationToken is specified.\n  private async *getPage(\n    continuationToken?: string,\n    maxPageSize?: number,\n    options: BlobChangeFeedListChangesOptions = {},\n  ): AsyncIterableIterator<BlobChangeFeedEventPage> {\n    const changeFeed: ChangeFeed = await this.changeFeedFactory.create(\n      this.blobServiceClient,\n      continuationToken,\n      options,\n    );\n\n    if (!maxPageSize || maxPageSize > CHANGE_FEED_MAX_PAGE_SIZE) {\n      maxPageSize = CHANGE_FEED_MAX_PAGE_SIZE;\n    }\n    while (changeFeed.hasNext()) {\n      const eventPage = new BlobChangeFeedEventPage();\n      while (changeFeed.hasNext() && eventPage.events.length < maxPageSize) {\n        const event = await changeFeed.getChange({\n          abortSignal: options.abortSignal,\n          tracingOptions: options.tracingOptions,\n        });\n        if (event) {\n          eventPage.events.push(event);\n        }\n      }\n      if (changeFeed.hasNext()) {\n        eventPage.continuationToken = JSON.stringify(changeFeed.getCursor());\n      }\n      if (eventPage.events.length > 0) {\n        yield eventPage;\n      } else {\n        return;\n      }\n    }\n  }\n\n  /**\n   * Returns an async iterable iterator to list all the change feed events\n   * in the specified account.\n   *\n   * .byPage() returns an async iterable iterator to list the change feed events in pages.\n   *\n   * Example using `for await` syntax:\n   *\n   * ```ts snippet:ReadmeSampleListChanges\n   * import { StorageSharedKeyCredential } from \"@azure/storage-blob\";\n   * import { BlobChangeFeedClient } from \"@azure/storage-blob-changefeed\";\n   *\n   * const account = \"<account>\";\n   * const accountKey = \"<accountkey>\";\n   * const sharedKeyCredential = new StorageSharedKeyCredential(account, accountKey);\n   * const changeFeedClient = new BlobChangeFeedClient(\n   *   `https://${account}.blob.core.windows.net`,\n   *   sharedKeyCredential,\n   * );\n   *\n   * // Use for await to iterate through the change feed\n   * for await (const event of changeFeedClient.listChanges()) {\n   *   console.log(`Event: ${event.eventType}`);\n   *   console.log(`Event time: ${event.eventTime}`);\n   *   console.log(`Event data: ${JSON.stringify(event.data)}`);\n   * }\n   *\n   * // Use `byPage` to iterate through the change feed\n   * for await (const page of changeFeedClient.listChanges().byPage()) {\n   *   console.log(`Page: ${JSON.stringify(page)}`);\n   *   for (const event of page.events) {\n   *     console.log(`Event: ${event.eventType}`);\n   *     console.log(`Event time: ${event.eventTime}`);\n   *     console.log(`Event data: ${JSON.stringify(event.data)}`);\n   *   }\n   * }\n   * ```\n   *\n   * Example using paging with a marker:\n   *\n   * ```ts snippet:ReadmeSampleListChanges_Continuation\n   * import { StorageSharedKeyCredential } from \"@azure/storage-blob\";\n   * import { BlobChangeFeedClient } from \"@azure/storage-blob-changefeed\";\n   *\n   * const account = \"<account>\";\n   * const accountKey = \"<accountkey>\";\n   * const sharedKeyCredential = new StorageSharedKeyCredential(account, accountKey);\n   * const changeFeedClient = new BlobChangeFeedClient(\n   *   `https://${account}.blob.core.windows.net`,\n   *   sharedKeyCredential,\n   * );\n   *\n   * let iterator = changeFeedClient.listChanges().byPage({ maxPageSize: 2 });\n   * let response = (await iterator.next()).value;\n   * // Prints 2 page ranges\n   * if (response.pageRange) {\n   *   for (const pageRange of response.pageRange) {\n   *     console.log(`Event: ${pageRange.eventType}`);\n   *     console.log(`Event time: ${pageRange.eventTime}`);\n   *     console.log(`Event data: ${JSON.stringify(pageRange.data)}`);\n   *   }\n   * }\n   * // Gets next marker\n   * let marker = response.continuationToken;\n   * // Passing next marker as continuationToken\n   * iterator = changeFeedClient.listChanges().byPage({ continuationToken: marker, maxPageSize: 10 });\n   * response = (await iterator.next()).value;\n   * // Prints 10 page ranges\n   * if (response.pageRange) {\n   *   for (const pageRange of response.pageRange) {\n   *     console.log(`Event: ${pageRange.eventType}`);\n   *     console.log(`Event time: ${pageRange.eventTime}`);\n   *     console.log(`Event data: ${JSON.stringify(pageRange.data)}`);\n   *   }\n   * }\n   * ```\n   *\n   * @param options - Options to list change feed events.\n   * @returns An asyncIterableIterator that supports paging.\n   */\n  public listChanges(\n    options: BlobChangeFeedListChangesOptions = {},\n  ): PagedAsyncIterableIterator<BlobChangeFeedEvent, BlobChangeFeedEventPage> {\n    const iter = this.getChange(options);\n    return {\n      /**\n       * The next method, part of the iteration protocol\n       */\n      async next() {\n        return iter.next();\n      },\n      /**\n       * The connection to the async iterator, part of the iteration protocol\n       */\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      /**\n       * Return an AsyncIterableIterator that works a page at a time\n       */\n      byPage: (settings: PageSettings = {}) => {\n        return this.getPage(settings.continuationToken, settings.maxPageSize, options);\n      },\n    };\n  }\n}\n"]}