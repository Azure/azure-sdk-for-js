{"version":3,"file":"ChunkFactory.js","sourceRoot":"","sources":["../../src/ChunkFactory.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAIlC,OAAO,EAAE,KAAK,EAAE,MAAM,YAAY,CAAC;AACnC,OAAO,EAAE,oBAAoB,EAAE,MAAM,uBAAuB,CAAC;AAG7D,OAAO,EAAE,qCAAqC,EAAE,MAAM,sBAAsB,CAAC;AAc7E,MAAM,OAAO,YAAY;IAKvB,YACE,iBAAoC,EACpC,4BAA0D,EAC1D,eAAwB;QAExB,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,IAAI,CAAC,4BAA4B,GAAG,4BAA4B,CAAC;QACjE,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;IACzC,CAAC;IAEM,KAAK,CAAC,MAAM,CACjB,eAAgC,EAChC,SAAiB,EACjB,WAAoB,EACpB,UAAmB,EACnB,UAA8B,EAAE;QAEhC,MAAM,UAAU,GAAG,eAAe,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;QAC5D,WAAW,GAAG,WAAW,IAAI,CAAC,CAAC;QAC/B,UAAU,GAAG,UAAU,IAAI,CAAC,CAAC;QAE7B,MAAM,UAAU,GAAG,oBAAoB,CACrC,IAAI,CAAC,4BAA4B,CAAC,MAAM,CACtC,UAAU,EACV,WAAW,EACX,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,qCAAqC,EACnF,OAAO,CACR,CACF,CAAC;QAEF,IAAI,UAAsB,CAAC;QAC3B,IAAI,WAAW,KAAK,CAAC,EAAE,CAAC;YACtB,MAAM,YAAY,GAAG,oBAAoB,CACvC,IAAI,CAAC,4BAA4B,CAAC,MAAM,CACtC,UAAU,EACV,CAAC,EACD,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,qCAAqC,EACnF,OAAO,CACR,CACF,CAAC;YACF,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,UAAU,EAAE,YAAY,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;QAChG,CAAC;aAAM,CAAC;YACN,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QACzD,CAAC;QAED,OAAO,IAAI,KAAK,CAAC,UAAU,EAAE,WAAW,EAAE,UAAU,EAAE,SAAS,EAAE;YAC/D,WAAW,EAAE,OAAO,CAAC,WAAW;SACjC,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { AvroReaderFactory } from \"./AvroReaderFactory.js\";\nimport type { ContainerClient, CommonOptions } from \"@azure/storage-blob\";\nimport { Chunk } from \"./Chunk.js\";\nimport { streamToAvroReadable } from \"./utils/utils.node.js\";\nimport type { AbortSignalLike } from \"@azure/abort-controller\";\nimport type { LazyLoadingBlobStreamFactory } from \"./LazyLoadingBlobStreamFactory.js\";\nimport { CHANGE_FEED_CHUNK_BLOCK_DOWNLOAD_SIZE } from \"./utils/constants.js\";\nimport type { AvroReader } from \"@azure/storage-internal-avro\";\n\n/**\n * Options to configure {@link ChunkFactory.create} operation.\n */\nexport interface CreateChunkOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n}\n\nexport class ChunkFactory {\n  private readonly avroReaderFactory: AvroReaderFactory;\n  private readonly lazyLoadingBlobStreamFactory: LazyLoadingBlobStreamFactory;\n  private readonly maxTransferSize?: number;\n\n  constructor(\n    avroReaderFactory: AvroReaderFactory,\n    lazyLoadingBlobStreamFactory: LazyLoadingBlobStreamFactory,\n    maxTransferSize?: number,\n  ) {\n    this.avroReaderFactory = avroReaderFactory;\n    this.lazyLoadingBlobStreamFactory = lazyLoadingBlobStreamFactory;\n    this.maxTransferSize = maxTransferSize;\n  }\n\n  public async create(\n    containerClient: ContainerClient,\n    chunkPath: string,\n    blockOffset?: number,\n    eventIndex?: number,\n    options: CreateChunkOptions = {},\n  ): Promise<Chunk> {\n    const blobClient = containerClient.getBlobClient(chunkPath);\n    blockOffset = blockOffset || 0;\n    eventIndex = eventIndex || 0;\n\n    const dataStream = streamToAvroReadable(\n      this.lazyLoadingBlobStreamFactory.create(\n        blobClient,\n        blockOffset,\n        this.maxTransferSize ? this.maxTransferSize : CHANGE_FEED_CHUNK_BLOCK_DOWNLOAD_SIZE,\n        options,\n      ),\n    );\n\n    let avroReader: AvroReader;\n    if (blockOffset !== 0) {\n      const headerStream = streamToAvroReadable(\n        this.lazyLoadingBlobStreamFactory.create(\n          blobClient,\n          0,\n          this.maxTransferSize ? this.maxTransferSize : CHANGE_FEED_CHUNK_BLOCK_DOWNLOAD_SIZE,\n          options,\n        ),\n      );\n      avroReader = this.avroReaderFactory.create(dataStream, headerStream, blockOffset, eventIndex);\n    } else {\n      avroReader = this.avroReaderFactory.create(dataStream);\n    }\n\n    return new Chunk(avroReader, blockOffset, eventIndex, chunkPath, {\n      abortSignal: options.abortSignal,\n    });\n  }\n}\n"]}