{"version":3,"file":"ChangeFeed.js","sourceRoot":"","sources":["../../src/ChangeFeed.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { ContainerClient, CommonOptions } from \"@azure/storage-blob\";\nimport type { Segment } from \"./Segment.js\";\nimport type { SegmentFactory } from \"./SegmentFactory.js\";\nimport type { BlobChangeFeedEvent } from \"./models/BlobChangeFeedEvent.js\";\nimport type { ChangeFeedCursor } from \"./models/ChangeFeedCursor.js\";\nimport { getSegmentsInYear, minDate, getHost } from \"./utils/utils.common.js\";\nimport type { AbortSignalLike } from \"@azure/abort-controller\";\nimport { tracingClient } from \"./utils/tracing.js\";\n\n/**\n * Options to configure {@link ChangeFeed.getChange} operation.\n */\nexport interface ChangeFeedGetChangeOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n}\n\nexport class ChangeFeed {\n  /**\n   * BlobContainerClient for making List Blob requests and creating Segments.\n   */\n  private readonly containerClient?: ContainerClient;\n\n  private readonly segmentFactory?: SegmentFactory;\n\n  private readonly years: number[];\n\n  private segments: string[];\n\n  private currentSegment?: Segment;\n\n  private lastConsumable?: Date;\n\n  private startTime?: Date;\n\n  private endTime?: Date;\n\n  private end?: Date;\n\n  constructor();\n  constructor(\n    containerClient: ContainerClient,\n    segmentFactory: SegmentFactory,\n    years: number[],\n    segments: string[],\n    currentSegment: Segment,\n    lastConsumable: Date,\n    startTime?: Date,\n    endTime?: Date,\n  );\n\n  constructor(\n    containerClient?: ContainerClient,\n    segmentFactory?: SegmentFactory,\n    years?: number[],\n    segments?: string[],\n    currentSegment?: Segment,\n    lastConsumable?: Date,\n    startTime?: Date,\n    endTime?: Date,\n  ) {\n    this.containerClient = containerClient;\n    this.segmentFactory = segmentFactory;\n    this.years = years || [];\n    this.segments = segments || [];\n    this.currentSegment = currentSegment;\n    this.lastConsumable = lastConsumable;\n    this.startTime = startTime;\n    this.endTime = endTime;\n    if (this.lastConsumable) {\n      this.end = minDate(this.lastConsumable, this.endTime);\n    }\n  }\n\n  private async advanceSegmentIfNecessary(options: ChangeFeedGetChangeOptions = {}): Promise<void> {\n    return tracingClient.withSpan(\n      \"ChangeFeed-advanceSegmentIfNecessary\",\n      options,\n      async (updatedOptions) => {\n        if (!this.currentSegment) {\n          throw new Error(\"Empty Change Feed shouldn't call this function.\");\n        }\n\n        // If the current segment has more Events, we don't need to do anything.\n        if (this.currentSegment.hasNext()) {\n          return;\n        }\n\n        // If the current segment is completed, remove it\n        if (this.segments.length > 0) {\n          this.currentSegment = await this.segmentFactory!.create(\n            this.containerClient!,\n            this.segments.shift()!,\n            undefined,\n            {\n              abortSignal: options.abortSignal,\n              tracingOptions: updatedOptions.tracingOptions,\n            },\n          );\n        }\n        // If segments is empty, refill it\n        else if (this.segments.length === 0 && this.years.length > 0) {\n          const year = this.years.shift();\n          this.segments = await getSegmentsInYear(\n            this.containerClient!,\n            year!,\n            this.startTime,\n            this.end,\n            {\n              abortSignal: options.abortSignal,\n              tracingOptions: updatedOptions.tracingOptions,\n            },\n          );\n\n          if (this.segments.length > 0) {\n            this.currentSegment = await this.segmentFactory!.create(\n              this.containerClient!,\n              this.segments.shift()!,\n              undefined,\n              {\n                abortSignal: options.abortSignal,\n                tracingOptions: updatedOptions.tracingOptions,\n              },\n            );\n          } else {\n            this.currentSegment = undefined;\n          }\n        }\n      },\n    );\n  }\n\n  public hasNext(): boolean {\n    // Empty ChangeFeed, using currentSegment as the indicator.\n    if (!this.currentSegment) {\n      return false;\n    }\n\n    if (this.segments.length === 0 && this.years.length === 0 && !this.currentSegment.hasNext()) {\n      return false;\n    }\n\n    return this.currentSegment.dateTime < this.end!;\n  }\n\n  public async getChange(\n    options: ChangeFeedGetChangeOptions = {},\n  ): Promise<BlobChangeFeedEvent | undefined> {\n    return tracingClient.withSpan(\"ChangeFeed-getChange\", options, async (updatedOptions) => {\n      let event: BlobChangeFeedEvent | undefined = undefined;\n      while (event === undefined && this.hasNext()) {\n        event = await this.currentSegment!.getChange({\n          abortSignal: options.abortSignal,\n          tracingOptions: updatedOptions.tracingOptions,\n        });\n        await this.advanceSegmentIfNecessary({\n          abortSignal: options.abortSignal,\n          tracingOptions: updatedOptions.tracingOptions,\n        });\n      }\n      return event;\n    });\n  }\n\n  public getCursor(): ChangeFeedCursor {\n    if (!this.currentSegment) {\n      throw new Error(\"Empty Change Feed shouldn't call this function.\");\n    }\n\n    return {\n      CursorVersion: 1,\n      UrlHost: getHost(this.containerClient!.url)!,\n      EndTime: this.endTime?.toJSON(),\n      CurrentSegmentCursor: this.currentSegment!.getCursor(),\n    };\n  }\n}\n"]}