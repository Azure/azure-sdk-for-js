{"version":3,"file":"Shard.js","sourceRoot":"","sources":["../../src/Shard.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAQlC,mDAAmD;AAanD,MAAa,KAAK;IAShB,YACE,eAAgC,EAChC,YAA0B,EAC1B,MAAgB,EAChB,YAA+B,EACf,SAAiB;QAAjB,cAAS,GAAT,SAAS,CAAQ;QAEjC,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,CAAC;IAEM,OAAO;QACZ,OAAO,CACL,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,KAAK,SAAS,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,CAC3F,CAAC;IACJ,CAAC;IAEM,KAAK,CAAC,SAAS,CACpB,UAAiC,EAAE;QAEnC,OAAO,0BAAa,CAAC,QAAQ,CAAC,iBAAiB,EAAE,OAAO,EAAE,KAAK,EAAE,cAAc,EAAE,EAAE;YACjF,IAAI,KAAK,GAAoC,SAAS,CAAC;YACvD,OAAO,KAAK,KAAK,SAAS,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC;gBAC7C,KAAK,GAAG,MAAM,IAAI,CAAC,YAAa,CAAC,SAAS,EAAE,CAAC;gBAE7C,sDAAsD;gBACtD,IAAI,CAAC,IAAI,CAAC,YAAa,CAAC,OAAO,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oBAC5D,IAAI,CAAC,YAAY,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAChD,IAAI,CAAC,eAAe,EACpB,IAAI,CAAC,MAAM,CAAC,KAAK,EAAG,EACpB,SAAS,EACT,SAAS,EACT;wBACE,WAAW,EAAE,OAAO,CAAC,WAAW;wBAChC,cAAc,EAAE,cAAc,CAAC,cAAc;qBAC9C,CACF,CAAC;gBACJ,CAAC;YACH,CAAC;YACD,OAAO,KAAK,CAAC;QACf,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,SAAS;QACd,OAAO,IAAI,CAAC,YAAY,KAAK,SAAS;YACpC,CAAC,CAAC,SAAS;YACX,CAAC,CAAC;gBACE,gBAAgB,EAAE,IAAI,CAAC,YAAY,CAAC,SAAS;gBAC7C,WAAW,EAAE,IAAI,CAAC,YAAY,CAAC,WAAW;gBAC1C,UAAU,EAAE,IAAI,CAAC,YAAY,CAAC,UAAU;aACzC,CAAC;IACR,CAAC;CACF;AA/DD,sBA+DC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { ContainerClient, CommonOptions } from \"@azure/storage-blob\";\nimport type { ChunkFactory } from \"./ChunkFactory.js\";\nimport type { Chunk } from \"./Chunk.js\";\nimport type { BlobChangeFeedEvent } from \"./models/BlobChangeFeedEvent.js\";\nimport type { ShardCursor } from \"./models/ChangeFeedCursor.js\";\nimport type { AbortSignalLike } from \"@azure/abort-controller\";\nimport { tracingClient } from \"./utils/tracing.js\";\n\n/**\n * Options to configure {@link Shard.getChange} operation.\n */\nexport interface ShardGetChangeOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n}\n\nexport class Shard {\n  private readonly containerClient: ContainerClient;\n\n  private readonly chunkFactory: ChunkFactory;\n\n  private readonly chunks: string[];\n\n  private currentChunk: Chunk | undefined;\n\n  constructor(\n    containerClient: ContainerClient,\n    chunkFactory: ChunkFactory,\n    chunks: string[],\n    currentChunk: Chunk | undefined,\n    public readonly shardPath: string,\n  ) {\n    this.containerClient = containerClient;\n    this.chunkFactory = chunkFactory;\n    this.chunks = chunks;\n    this.currentChunk = currentChunk;\n  }\n\n  public hasNext(): boolean {\n    return (\n      this.chunks.length > 0 || (this.currentChunk !== undefined && this.currentChunk.hasNext())\n    );\n  }\n\n  public async getChange(\n    options: ShardGetChangeOptions = {},\n  ): Promise<BlobChangeFeedEvent | undefined> {\n    return tracingClient.withSpan(\"Shard-getChange\", options, async (updatedOptions) => {\n      let event: BlobChangeFeedEvent | undefined = undefined;\n      while (event === undefined && this.hasNext()) {\n        event = await this.currentChunk!.getChange();\n\n        // Remove currentChunk if it doesn't have more events.\n        if (!this.currentChunk!.hasNext() && this.chunks.length > 0) {\n          this.currentChunk = await this.chunkFactory.create(\n            this.containerClient,\n            this.chunks.shift()!,\n            undefined,\n            undefined,\n            {\n              abortSignal: options.abortSignal,\n              tracingOptions: updatedOptions.tracingOptions,\n            },\n          );\n        }\n      }\n      return event;\n    });\n  }\n\n  public getCursor(): ShardCursor | undefined {\n    return this.currentChunk === undefined\n      ? undefined\n      : {\n          CurrentChunkPath: this.currentChunk.chunkPath,\n          BlockOffset: this.currentChunk.blockOffset,\n          EventIndex: this.currentChunk.eventIndex,\n        };\n  }\n}\n"]}