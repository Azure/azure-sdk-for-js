{"version":3,"file":"utils.browser.js","sourceRoot":"","sources":["../../../src/utils/utils.browser.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AASlC,oCAUC;AAED,oCASC;AAED,gDAEC;AAhCD;;;;;;GAMG;AACI,KAAK,UAAU,YAAY,CAChC,QAGC;AACD,yCAAyC;AACzC,OAAgB;IAEhB,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,QAAS,CAAC;IACtC,OAAO,YAAY,CAAC,IAAI,CAAC,CAAC;AAC5B,CAAC;AAEM,KAAK,UAAU,YAAY,CAAC,IAAU;IAC3C,MAAM,UAAU,GAAG,IAAI,UAAU,EAAE,CAAC;IACpC,OAAO,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAC7C,UAAU,CAAC,SAAS,GAAG,CAAC,EAAO,EAAE,EAAE;YACjC,OAAO,CAAC,EAAE,CAAC,MAAO,CAAC,MAAM,CAAC,CAAC;QAC7B,CAAC,CAAC;QACF,UAAU,CAAC,OAAO,GAAG,MAAM,CAAC;QAC5B,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,kBAAkB;IAChC,WAAW;AACb,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Read body from downloading operation methods to string.\n * Works in both Node.js and browsers.\n *\n * @param response - Convenience layer methods response with downloaded body\n * @param length - Length of Readable stream, needed for Node.js environment\n */\nexport async function bodyToString(\n  response: {\n    readableStreamBody?: NodeJS.ReadableStream;\n    blobBody?: Promise<Blob>;\n  },\n  // tslint:disable-next-line:variable-name\n  _length?: number,\n): Promise<string> {\n  const blob = await response.blobBody!;\n  return blobToString(blob);\n}\n\nexport async function blobToString(blob: Blob): Promise<string> {\n  const fileReader = new FileReader();\n  return new Promise<string>((resolve, reject) => {\n    fileReader.onloadend = (ev: any) => {\n      resolve(ev.target!.result);\n    };\n    fileReader.onerror = reject;\n    fileReader.readAsText(blob);\n  });\n}\n\nexport function bodyToAvroReadable(): void {\n  /* empty */\n}\n"]}