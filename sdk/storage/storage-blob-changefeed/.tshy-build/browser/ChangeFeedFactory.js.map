{"version":3,"file":"ChangeFeedFactory.js","sourceRoot":"","sources":["../../src/ChangeFeedFactory.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAGlC,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAE7C,OAAO,EAAE,0BAA0B,EAAE,6BAA6B,EAAE,MAAM,sBAAsB,CAAC;AACjG,OAAO,EACL,iBAAiB,EACjB,kBAAkB,EAClB,aAAa,EACb,iBAAiB,EACjB,OAAO,EACP,OAAO,EACP,wBAAwB,GACzB,MAAM,yBAAyB,CAAC;AACjC,OAAO,EAAE,YAAY,EAAE,MAAM,uBAAuB,CAAC;AACrD,OAAO,EAAE,cAAc,EAAE,MAAM,qBAAqB,CAAC;AACrD,OAAO,EAAE,YAAY,EAAE,MAAM,mBAAmB,CAAC;AACjD,OAAO,EAAE,YAAY,EAAE,MAAM,mBAAmB,CAAC;AACjD,OAAO,EAAE,iBAAiB,EAAE,MAAM,wBAAwB,CAAC;AAG3D,OAAO,EAAE,aAAa,EAAE,MAAM,oBAAoB,CAAC;AACnD,OAAO,EAAE,4BAA4B,EAAE,MAAM,mCAAmC,CAAC;AAOjF,SAAS,gBAAgB,CACvB,+BAAwD;IAExD,OAAQ,+BAAkD,CAAC,MAAM,KAAK,SAAS,CAAC;AAClF,CAAC;AAED,MAAM,OAAO,iBAAiB;IAM5B,YAAY,+BAAyD;QACnE,IAAI,cAA0C,CAAC;QAC/C,IAAI,+BAA+B,EAAE,CAAC;YACpC,IAAI,MAAM,CAAC,QAAQ,CAAC,+BAA+B,CAAC,EAAE,CAAC;gBACrD,IAAI,CAAC,eAAe,GAAG,+BAAyC,CAAC;YACnE,CAAC;iBAAM,IAAI,gBAAgB,CAAC,+BAA+B,CAAC,EAAE,CAAC;gBAC7D,cAAc,GAAG,+BAAiD,CAAC;YACrE,CAAC;QACH,CAAC;QAED,IAAI,cAAc,EAAE,CAAC;YACnB,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACvC,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,cAAc,GAAG,IAAI,cAAc,CACtC,IAAI,YAAY,CACd,IAAI,YAAY,CACd,IAAI,iBAAiB,EAAE,EACvB,IAAI,4BAA4B,EAAE,EAClC,IAAI,CAAC,eAAe,CACrB,CACF,CACF,CAAC;QACJ,CAAC;IACH,CAAC;IAEO,MAAM,CAAC,cAAc,CAAC,eAAgC,EAAE,MAAwB;QACtF,IAAI,OAAO,CAAC,eAAe,CAAC,GAAG,CAAC,KAAK,MAAM,CAAC,OAAO,EAAE,CAAC;YACpD,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;QACxE,CAAC;QACD,IAAI,MAAM,CAAC,aAAa,KAAK,CAAC,EAAE,CAAC;YAC/B,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;QACjD,CAAC;IACH,CAAC;IAEM,KAAK,CAAC,MAAM,CACjB,iBAAoC,EACpC,iBAA0B,EAC1B,UAA4C,EAAE;QAE9C,OAAO,aAAa,CAAC,QAAQ,CAAC,0BAA0B,EAAE,OAAO,EAAE,KAAK,EAAE,cAAc,EAAE,EAAE;YAC1F,MAAM,eAAe,GAAG,iBAAiB,CAAC,kBAAkB,CAAC,0BAA0B,CAAC,CAAC;YACzF,IAAI,MAAM,GAAiC,SAAS,CAAC;YACrD,iBAAiB;YACjB,IAAI,iBAAiB,EAAE,CAAC;gBACtB,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;gBACvC,iBAAiB,CAAC,cAAc,CAAC,eAAe,EAAE,MAAO,CAAC,CAAC;gBAC3D,OAAO,CAAC,KAAK,GAAG,wBAAwB,CAAC,MAAO,CAAC,oBAAoB,CAAC,WAAY,CAAC,CAAC;gBACpF,OAAO,CAAC,GAAG,GAAG,IAAI,IAAI,CAAC,MAAO,CAAC,OAAQ,CAAC,CAAC;YAC3C,CAAC;YACD,2DAA2D;iBACtD,CAAC;gBACJ,OAAO,CAAC,KAAK,GAAG,kBAAkB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBAClD,OAAO,CAAC,GAAG,GAAG,iBAAiB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAC/C,CAAC;YAED,0DAA0D;YAC1D,MAAM,yBAAyB,GAAG,MAAM,eAAe,CAAC,MAAM,CAAC;gBAC7D,WAAW,EAAE,OAAO,CAAC,WAAW;gBAChC,cAAc,EAAE,cAAc,CAAC,cAAc;aAC9C,CAAC,CAAC;YACH,IAAI,CAAC,yBAAyB,EAAE,CAAC;gBAC/B,MAAM,IAAI,KAAK,CACb,iFAAiF,CAClF,CAAC;YACJ,CAAC;YAED,IAAI,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,GAAG,IAAI,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,GAAG,EAAE,CAAC;gBACjE,OAAO,IAAI,UAAU,EAAE,CAAC;YAC1B,CAAC;YAED,uBAAuB;YACvB,MAAM,UAAU,GAAG,eAAe,CAAC,aAAa,CAAC,6BAA6B,CAAC,CAAC;YAChF,IAAI,eAAe,CAAC;YACpB,IAAI,CAAC;gBACH,eAAe,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,SAAS,EAAE,SAAS,EAAE;oBAChE,WAAW,EAAE,OAAO,CAAC,WAAW;oBAChC,cAAc,EAAE,cAAc,CAAC,cAAc;iBAC9C,CAAC,CAAC;YACL,CAAC;YAAC,OAAO,GAAQ,EAAE,CAAC;gBAClB,IAAI,GAAG,CAAC,UAAU,KAAK,GAAG,EAAE,CAAC;oBAC3B,OAAO,IAAI,UAAU,EAAE,CAAC;gBAC1B,CAAC;qBAAM,CAAC;oBACN,MAAM,GAAG,CAAC;gBACZ,CAAC;YACH,CAAC;YACD,MAAM,cAAc,GAAG,IAAI,IAAI,CAC5B,IAAI,CAAC,KAAK,CAAC,MAAM,YAAY,CAAC,eAAe,CAAC,CAAkB,CAAC,cAAc,CACjF,CAAC;YAEF,iBAAiB;YACjB,MAAM,KAAK,GAAa,MAAM,aAAa,CAAC,eAAe,EAAE;gBAC3D,WAAW,EAAE,OAAO,CAAC,WAAW;gBAChC,cAAc,EAAE,cAAc,CAAC,cAAc;aAC9C,CAAC,CAAC;YAEH,kDAAkD;YAClD,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC;gBAClB,MAAM,SAAS,GAAG,OAAO,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC;gBACjD,OAAO,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,GAAG,SAAS,EAAE,CAAC;oBAChD,KAAK,CAAC,KAAK,EAAE,CAAC;gBAChB,CAAC;YACH,CAAC;YACD,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACvB,OAAO,IAAI,UAAU,EAAE,CAAC;YAC1B,CAAC;YAED,IAAI,QAAQ,GAAa,EAAE,CAAC;YAC5B,OAAO,QAAQ,CAAC,MAAM,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACnD,QAAQ,GAAG,MAAM,iBAAiB,CAChC,eAAe,EACf,KAAK,CAAC,KAAK,EAAG,EACd,OAAO,CAAC,KAAK,EACb,OAAO,CAAC,cAAc,EAAE,OAAO,CAAC,GAAG,CAAC,EACpC;oBACE,WAAW,EAAE,OAAO,CAAC,WAAW;oBAChC,cAAc,EAAE,cAAc,CAAC,cAAc;iBAC9C,CACF,CAAC;YACJ,CAAC;YACD,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBAC1B,OAAO,IAAI,UAAU,EAAE,CAAC;YAC1B,CAAC;YACD,MAAM,cAAc,GAAY,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,CAC9D,eAAe,EACf,QAAQ,CAAC,KAAK,EAAG,EACjB,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,oBAAoB,EAC5B;gBACE,WAAW,EAAE,OAAO,CAAC,WAAW;gBAChC,cAAc,EAAE,cAAc,CAAC,cAAc;aAC9C,CACF,CAAC;YAEF,OAAO,IAAI,UAAU,CACnB,eAAe,EACf,IAAI,CAAC,cAAc,EACnB,KAAK,EACL,QAAQ,EACR,cAAc,EACd,cAAc,EACd,OAAO,CAAC,KAAK,EACb,OAAO,CAAC,GAAG,CACZ,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { BlobServiceClient, ContainerClient } from \"@azure/storage-blob\";\nimport { ChangeFeed } from \"./ChangeFeed.js\";\nimport type { ChangeFeedCursor } from \"./models/ChangeFeedCursor.js\";\nimport { CHANGE_FEED_CONTAINER_NAME, CHANGE_FEED_META_SEGMENT_PATH } from \"./utils/constants.js\";\nimport {\n  ceilToNearestHour,\n  floorToNearestHour,\n  getYearsPaths,\n  getSegmentsInYear,\n  minDate,\n  getHost,\n  parseDateFromSegmentPath,\n} from \"./utils/utils.common.js\";\nimport { bodyToString } from \"./utils/utils.node.js\";\nimport { SegmentFactory } from \"./SegmentFactory.js\";\nimport { ShardFactory } from \"./ShardFactory.js\";\nimport { ChunkFactory } from \"./ChunkFactory.js\";\nimport { AvroReaderFactory } from \"./AvroReaderFactory.js\";\nimport type { Segment } from \"./Segment.js\";\nimport type { BlobChangeFeedListChangesOptions } from \"./models/models.js\";\nimport { tracingClient } from \"./utils/tracing.js\";\nimport { LazyLoadingBlobStreamFactory } from \"./LazyLoadingBlobStreamFactory.js\";\n\ninterface MetaSegments {\n  version?: number;\n  lastConsumable: string;\n}\n\nfunction isSegmentFactory(\n  segmentFactoryOrMaxTransferSize: SegmentFactory | number,\n): segmentFactoryOrMaxTransferSize is SegmentFactory {\n  return (segmentFactoryOrMaxTransferSize as SegmentFactory).create !== undefined;\n}\n\nexport class ChangeFeedFactory {\n  private readonly segmentFactory: SegmentFactory;\n  private readonly maxTransferSize?: number;\n\n  constructor(maxTransferSize?: number);\n  constructor(segmentFactory: SegmentFactory);\n  constructor(segmentFactoryOrMaxTransferSize?: SegmentFactory | number) {\n    let segmentFactory: SegmentFactory | undefined;\n    if (segmentFactoryOrMaxTransferSize) {\n      if (Number.isFinite(segmentFactoryOrMaxTransferSize)) {\n        this.maxTransferSize = segmentFactoryOrMaxTransferSize as number;\n      } else if (isSegmentFactory(segmentFactoryOrMaxTransferSize)) {\n        segmentFactory = segmentFactoryOrMaxTransferSize as SegmentFactory;\n      }\n    }\n\n    if (segmentFactory) {\n      this.segmentFactory = segmentFactory;\n    } else {\n      this.segmentFactory = new SegmentFactory(\n        new ShardFactory(\n          new ChunkFactory(\n            new AvroReaderFactory(),\n            new LazyLoadingBlobStreamFactory(),\n            this.maxTransferSize,\n          ),\n        ),\n      );\n    }\n  }\n\n  private static validateCursor(containerClient: ContainerClient, cursor: ChangeFeedCursor): void {\n    if (getHost(containerClient.url) !== cursor.UrlHost) {\n      throw new Error(\"Cursor URL host does not match container URL host.\");\n    }\n    if (cursor.CursorVersion !== 1) {\n      throw new Error(\"Unsupported cursor version.\");\n    }\n  }\n\n  public async create(\n    blobServiceClient: BlobServiceClient,\n    continuationToken?: string,\n    options: BlobChangeFeedListChangesOptions = {},\n  ): Promise<ChangeFeed> {\n    return tracingClient.withSpan(\"ChangeFeedFactory-create\", options, async (updatedOptions) => {\n      const containerClient = blobServiceClient.getContainerClient(CHANGE_FEED_CONTAINER_NAME);\n      let cursor: ChangeFeedCursor | undefined = undefined;\n      // Create cursor.\n      if (continuationToken) {\n        cursor = JSON.parse(continuationToken);\n        ChangeFeedFactory.validateCursor(containerClient, cursor!);\n        options.start = parseDateFromSegmentPath(cursor!.CurrentSegmentCursor.SegmentPath!);\n        options.end = new Date(cursor!.EndTime!);\n      }\n      // Round start and end time if we are not using the cursor.\n      else {\n        options.start = floorToNearestHour(options.start);\n        options.end = ceilToNearestHour(options.end);\n      }\n\n      // Check if Change Feed has been enabled for this account.\n      const changeFeedContainerExists = await containerClient.exists({\n        abortSignal: options.abortSignal,\n        tracingOptions: updatedOptions.tracingOptions,\n      });\n      if (!changeFeedContainerExists) {\n        throw new Error(\n          \"Change Feed hasn't been enabled on this account, or is currently being enabled.\",\n        );\n      }\n\n      if (options.start && options.end && options.start >= options.end) {\n        return new ChangeFeed();\n      }\n\n      // Get last consumable.\n      const blobClient = containerClient.getBlobClient(CHANGE_FEED_META_SEGMENT_PATH);\n      let blobDownloadRes;\n      try {\n        blobDownloadRes = await blobClient.download(undefined, undefined, {\n          abortSignal: options.abortSignal,\n          tracingOptions: updatedOptions.tracingOptions,\n        });\n      } catch (err: any) {\n        if (err.statusCode === 404) {\n          return new ChangeFeed();\n        } else {\n          throw err;\n        }\n      }\n      const lastConsumable = new Date(\n        (JSON.parse(await bodyToString(blobDownloadRes)) as MetaSegments).lastConsumable,\n      );\n\n      // Get year paths\n      const years: number[] = await getYearsPaths(containerClient, {\n        abortSignal: options.abortSignal,\n        tracingOptions: updatedOptions.tracingOptions,\n      });\n\n      // Dequeue any years that occur before start time.\n      if (options.start) {\n        const startYear = options.start.getUTCFullYear();\n        while (years.length > 0 && years[0] < startYear) {\n          years.shift();\n        }\n      }\n      if (years.length === 0) {\n        return new ChangeFeed();\n      }\n\n      let segments: string[] = [];\n      while (segments.length === 0 && years.length !== 0) {\n        segments = await getSegmentsInYear(\n          containerClient,\n          years.shift()!,\n          options.start,\n          minDate(lastConsumable, options.end),\n          {\n            abortSignal: options.abortSignal,\n            tracingOptions: updatedOptions.tracingOptions,\n          },\n        );\n      }\n      if (segments.length === 0) {\n        return new ChangeFeed();\n      }\n      const currentSegment: Segment = await this.segmentFactory.create(\n        containerClient,\n        segments.shift()!,\n        cursor?.CurrentSegmentCursor,\n        {\n          abortSignal: options.abortSignal,\n          tracingOptions: updatedOptions.tracingOptions,\n        },\n      );\n\n      return new ChangeFeed(\n        containerClient,\n        this.segmentFactory,\n        years,\n        segments,\n        currentSegment,\n        lastConsumable,\n        options.start,\n        options.end,\n      );\n    });\n  }\n}\n"]}