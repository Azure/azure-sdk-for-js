{"version":3,"file":"utils.node.js","sourceRoot":"","sources":["../../../src/utils/utils.node.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAGlC,OAAO,EAAE,sBAAsB,EAAE,MAAM,8BAA8B,CAAC;AAEtE;;;;;;GAMG;AACH,MAAM,CAAC,KAAK,UAAU,YAAY,CAChC,QAGC,EACD,MAAe;IAEf,OAAO,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAC7C,QAAQ,CAAC,kBAAmB,CAAC,EAAE,CAAC,UAAU,EAAE,GAAG,EAAE;YAC/C,MAAM,KAAK,GAAG,QAAQ,CAAC,kBAAmB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACxD,IAAI,KAAK,EAAE,CAAC;gBACV,OAAO,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC5B,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,kBAAmB,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QACjD,QAAQ,CAAC,kBAAmB,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;YAC1C,OAAO,CAAC,EAAE,CAAC,CAAC;QACd,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AAED,MAAM,UAAU,oBAAoB,CAAC,cAAqC;IACxE,OAAO,IAAI,sBAAsB,CAAC,cAAc,CAAC,CAAC;AACpD,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { AvroReadable } from \"@azure/storage-internal-avro\";\nimport { AvroReadableFromStream } from \"@azure/storage-internal-avro\";\n\n/**\n * Read body from downloading operation methods to string.\n * Works in both Node.js and browsers.\n *\n * @param response - Convenience layer methods response with downloaded body\n * @param length - Length of Readable stream, needed for Node.js environment\n */\nexport async function bodyToString(\n  response: {\n    readableStreamBody?: NodeJS.ReadableStream;\n    blobBody?: Promise<Blob>;\n  },\n  length?: number,\n): Promise<string> {\n  return new Promise<string>((resolve, reject) => {\n    response.readableStreamBody!.on(\"readable\", () => {\n      const chunk = response.readableStreamBody!.read(length);\n      if (chunk) {\n        resolve(chunk.toString());\n      }\n    });\n\n    response.readableStreamBody!.on(\"error\", reject);\n    response.readableStreamBody!.on(\"end\", () => {\n      resolve(\"\");\n    });\n  });\n}\n\nexport function streamToAvroReadable(readableStream: NodeJS.ReadableStream): AvroReadable {\n  return new AvroReadableFromStream(readableStream);\n}\n"]}