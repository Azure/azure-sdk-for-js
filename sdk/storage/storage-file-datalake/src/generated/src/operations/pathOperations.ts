/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/pathOperationsMappers";
import * as Parameters from "../models/parameters";
import { StorageClientContext } from "../storageClientContext";

/** Class representing a PathOperations. */
export class PathOperations {
  private readonly client: StorageClientContext;

  /**
   * Create a PathOperations.
   * @param {StorageClientContext} client Reference to the service client.
   */
  constructor(client: StorageClientContext) {
    this.client = client;
  }

  /**
   * Create or rename a file or directory.    By default, the destination is overwritten and if the
   * destination already exists and has a lease the lease is broken.  This operation supports
   * conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob
   * Service
   * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   * To fail if the destination already exists, use a conditional request with If-None-Match: "*".
   * @summary Create File | Create Directory | Rename File | Rename Directory
   * @param [options] The optional parameters
   * @returns Promise<Models.PathCreateResponse>
   */
  create(options?: Models.PathCreateOptionalParams): Promise<Models.PathCreateResponse>;
  /**
   * @param callback The callback
   */
  create(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  create(options: Models.PathCreateOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
  create(options?: Models.PathCreateOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.PathCreateResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      createOperationSpec,
      callback) as Promise<Models.PathCreateResponse>;
  }

  /**
   * Uploads data to be appended to a file, flushes (writes) previously uploaded data to a file, sets
   * properties for a file or directory, or sets access control for a file or directory. Data can
   * only be appended to a file. This operation supports conditional HTTP requests. For more
   * information, see [Specifying Conditional Headers for Blob Service
   * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   * @summary Append Data | Flush Data | Set Properties | Set Access Control
   * @param action The action must be "append" to upload data to be appended to a file, "flush" to
   * flush previously uploaded data to a file, "setProperties" to set the properties of a file or
   * directory, or "setAccessControl" to set the owner, group, permissions, or access control list
   * for a file or directory.  Note that Hierarchical Namespace must be enabled for the account in
   * order to use access control.  Also note that the Access Control List (ACL) includes permissions
   * for the owner, owning group, and others, so the x-ms-permissions and x-ms-acl request headers
   * are mutually exclusive. Possible values include: 'append', 'flush', 'setProperties',
   * 'setAccessControl'
   * @param body Initial data
   * @param [options] The optional parameters
   * @returns Promise<Models.PathUpdateResponse>
   */
  update(action: Models.PathUpdateAction, body: coreHttp.HttpRequestBody, options?: Models.PathUpdateOptionalParams): Promise<Models.PathUpdateResponse>;
  /**
   * @param action The action must be "append" to upload data to be appended to a file, "flush" to
   * flush previously uploaded data to a file, "setProperties" to set the properties of a file or
   * directory, or "setAccessControl" to set the owner, group, permissions, or access control list
   * for a file or directory.  Note that Hierarchical Namespace must be enabled for the account in
   * order to use access control.  Also note that the Access Control List (ACL) includes permissions
   * for the owner, owning group, and others, so the x-ms-permissions and x-ms-acl request headers
   * are mutually exclusive. Possible values include: 'append', 'flush', 'setProperties',
   * 'setAccessControl'
   * @param body Initial data
   * @param callback The callback
   */
  update(action: Models.PathUpdateAction, body: coreHttp.HttpRequestBody, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param action The action must be "append" to upload data to be appended to a file, "flush" to
   * flush previously uploaded data to a file, "setProperties" to set the properties of a file or
   * directory, or "setAccessControl" to set the owner, group, permissions, or access control list
   * for a file or directory.  Note that Hierarchical Namespace must be enabled for the account in
   * order to use access control.  Also note that the Access Control List (ACL) includes permissions
   * for the owner, owning group, and others, so the x-ms-permissions and x-ms-acl request headers
   * are mutually exclusive. Possible values include: 'append', 'flush', 'setProperties',
   * 'setAccessControl'
   * @param body Initial data
   * @param options The optional parameters
   * @param callback The callback
   */
  update(action: Models.PathUpdateAction, body: coreHttp.HttpRequestBody, options: Models.PathUpdateOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
  update(action: Models.PathUpdateAction, body: coreHttp.HttpRequestBody, options?: Models.PathUpdateOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.PathUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        action,
        body,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.PathUpdateResponse>;
  }

  /**
   * Create and manage a lease to restrict write and delete access to the path. This operation
   * supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers
   * for Blob Service
   * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   * @summary Lease Path
   * @param xMsLeaseAction There are five lease actions: "acquire", "break", "change", "renew", and
   * "release". Use "acquire" and specify the "x-ms-proposed-lease-id" and "x-ms-lease-duration" to
   * acquire a new lease. Use "break" to break an existing lease. When a lease is broken, the lease
   * break period is allowed to elapse, during which time no lease operation except break and release
   * can be performed on the file. When a lease is successfully broken, the response indicates the
   * interval in seconds until a new lease can be acquired. Use "change" and specify the current
   * lease ID in "x-ms-lease-id" and the new lease ID in "x-ms-proposed-lease-id" to change the lease
   * ID of an active lease. Use "renew" and specify the "x-ms-lease-id" to renew an existing lease.
   * Use "release" and specify the "x-ms-lease-id" to release a lease. Possible values include:
   * 'acquire', 'break', 'change', 'renew', 'release'
   * @param [options] The optional parameters
   * @returns Promise<Models.PathLeaseResponse>
   */
  lease(xMsLeaseAction: Models.PathLeaseAction, options?: Models.PathLeaseOptionalParams): Promise<Models.PathLeaseResponse>;
  /**
   * @param xMsLeaseAction There are five lease actions: "acquire", "break", "change", "renew", and
   * "release". Use "acquire" and specify the "x-ms-proposed-lease-id" and "x-ms-lease-duration" to
   * acquire a new lease. Use "break" to break an existing lease. When a lease is broken, the lease
   * break period is allowed to elapse, during which time no lease operation except break and release
   * can be performed on the file. When a lease is successfully broken, the response indicates the
   * interval in seconds until a new lease can be acquired. Use "change" and specify the current
   * lease ID in "x-ms-lease-id" and the new lease ID in "x-ms-proposed-lease-id" to change the lease
   * ID of an active lease. Use "renew" and specify the "x-ms-lease-id" to renew an existing lease.
   * Use "release" and specify the "x-ms-lease-id" to release a lease. Possible values include:
   * 'acquire', 'break', 'change', 'renew', 'release'
   * @param callback The callback
   */
  lease(xMsLeaseAction: Models.PathLeaseAction, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param xMsLeaseAction There are five lease actions: "acquire", "break", "change", "renew", and
   * "release". Use "acquire" and specify the "x-ms-proposed-lease-id" and "x-ms-lease-duration" to
   * acquire a new lease. Use "break" to break an existing lease. When a lease is broken, the lease
   * break period is allowed to elapse, during which time no lease operation except break and release
   * can be performed on the file. When a lease is successfully broken, the response indicates the
   * interval in seconds until a new lease can be acquired. Use "change" and specify the current
   * lease ID in "x-ms-lease-id" and the new lease ID in "x-ms-proposed-lease-id" to change the lease
   * ID of an active lease. Use "renew" and specify the "x-ms-lease-id" to renew an existing lease.
   * Use "release" and specify the "x-ms-lease-id" to release a lease. Possible values include:
   * 'acquire', 'break', 'change', 'renew', 'release'
   * @param options The optional parameters
   * @param callback The callback
   */
  lease(xMsLeaseAction: Models.PathLeaseAction, options: Models.PathLeaseOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
  lease(xMsLeaseAction: Models.PathLeaseAction, options?: Models.PathLeaseOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.PathLeaseResponse> {
    return this.client.sendOperationRequest(
      {
        xMsLeaseAction,
        options
      },
      leaseOperationSpec,
      callback) as Promise<Models.PathLeaseResponse>;
  }

  /**
   * Read the contents of a file.  For read operations, range requests are supported. This operation
   * supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers
   * for Blob Service
   * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   * @summary Read File
   * @param [options] The optional parameters
   * @returns Promise<Models.PathReadResponse>
   */
  read(options?: Models.PathReadOptionalParams): Promise<Models.PathReadResponse>;
  /**
   * @param callback The callback
   */
  read(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  read(options: Models.PathReadOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
  read(options?: Models.PathReadOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.PathReadResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      readOperationSpec,
      callback) as Promise<Models.PathReadResponse>;
  }

  /**
   * Get Properties returns all system and user defined properties for a path. Get Status returns all
   * system defined properties for a path. Get Access Control List returns the access control list
   * for a path. This operation supports conditional HTTP requests.  For more information, see
   * [Specifying Conditional Headers for Blob Service
   * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   * @summary Get Properties | Get Status | Get Access Control List
   * @param [options] The optional parameters
   * @returns Promise<Models.PathGetPropertiesResponse>
   */
  getProperties(options?: Models.PathGetPropertiesOptionalParams): Promise<Models.PathGetPropertiesResponse>;
  /**
   * @param callback The callback
   */
  getProperties(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getProperties(options: Models.PathGetPropertiesOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
  getProperties(options?: Models.PathGetPropertiesOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.PathGetPropertiesResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getPropertiesOperationSpec,
      callback) as Promise<Models.PathGetPropertiesResponse>;
  }

  /**
   * Delete the file or directory. This operation supports conditional HTTP requests.  For more
   * information, see [Specifying Conditional Headers for Blob Service
   * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
   * @summary Delete File | Delete Directory
   * @param [options] The optional parameters
   * @returns Promise<Models.PathDeleteResponse>
   */
  deleteMethod(options?: Models.PathDeleteMethodOptionalParams): Promise<Models.PathDeleteResponse>;
  /**
   * @param callback The callback
   */
  deleteMethod(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(options: Models.PathDeleteMethodOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
  deleteMethod(options?: Models.PathDeleteMethodOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.PathDeleteResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      deleteMethodOperationSpec,
      callback) as Promise<Models.PathDeleteResponse>;
  }

  /**
   * Set the owner, group, permissions, or access control list for a path.
   * @param [options] The optional parameters
   * @returns Promise<Models.PathSetAccessControlResponse>
   */
  setAccessControl(options?: Models.PathSetAccessControlOptionalParams): Promise<Models.PathSetAccessControlResponse>;
  /**
   * @param callback The callback
   */
  setAccessControl(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  setAccessControl(options: Models.PathSetAccessControlOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
  setAccessControl(options?: Models.PathSetAccessControlOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.PathSetAccessControlResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      setAccessControlOperationSpec,
      callback) as Promise<Models.PathSetAccessControlResponse>;
  }

  /**
   * Set the owner, group, permissions, or access control list for a path.
   * @param [options] The optional parameters
   * @returns Promise<Models.PathFlushDataResponse>
   */
  flushData(options?: Models.PathFlushDataOptionalParams): Promise<Models.PathFlushDataResponse>;
  /**
   * @param callback The callback
   */
  flushData(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  flushData(options: Models.PathFlushDataOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
  flushData(options?: Models.PathFlushDataOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.PathFlushDataResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      flushDataOperationSpec,
      callback) as Promise<Models.PathFlushDataResponse>;
  }

  /**
   * Append data to the file.
   * @param body Initial data
   * @param [options] The optional parameters
   * @returns Promise<Models.PathAppendDataResponse>
   */
  appendData(body: coreHttp.HttpRequestBody, options?: Models.PathAppendDataOptionalParams): Promise<Models.PathAppendDataResponse>;
  /**
   * @param body Initial data
   * @param callback The callback
   */
  appendData(body: coreHttp.HttpRequestBody, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param body Initial data
   * @param options The optional parameters
   * @param callback The callback
   */
  appendData(body: coreHttp.HttpRequestBody, options: Models.PathAppendDataOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
  appendData(body: coreHttp.HttpRequestBody, options?: Models.PathAppendDataOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.PathAppendDataResponse> {
    return this.client.sendOperationRequest(
      {
        body,
        options
      },
      appendDataOperationSpec,
      callback) as Promise<Models.PathAppendDataResponse>;
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const createOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "{filesystem}/{path}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.resource2,
    Parameters.continuation,
    Parameters.mode,
    Parameters.timeout
  ],
  headerParameters: [
    Parameters.renameSource,
    Parameters.sourceLeaseId,
    Parameters.properties,
    Parameters.permissions,
    Parameters.umask,
    Parameters.requestId,
    Parameters.version,
    Parameters.cacheControl,
    Parameters.contentEncoding,
    Parameters.contentLanguage,
    Parameters.contentDisposition,
    Parameters.contentType,
    Parameters.leaseId,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince,
    Parameters.sourceIfMatch,
    Parameters.sourceIfNoneMatch,
    Parameters.sourceIfModifiedSince,
    Parameters.sourceIfUnmodifiedSince
  ],
  responses: {
    201: {
      headersMapper: Mappers.PathCreateHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.PathCreateHeaders
    }
  },
  serializer
};

const updateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PATCH",
  path: "{filesystem}/{path}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.action0,
    Parameters.position,
    Parameters.retainUncommittedData,
    Parameters.close,
    Parameters.timeout
  ],
  headerParameters: [
    Parameters.contentLength,
    Parameters.properties,
    Parameters.owner,
    Parameters.group,
    Parameters.permissions,
    Parameters.acl,
    Parameters.requestId,
    Parameters.version,
    Parameters.contentMD5,
    Parameters.cacheControl,
    Parameters.contentType,
    Parameters.contentDisposition,
    Parameters.contentEncoding,
    Parameters.contentLanguage,
    Parameters.leaseId,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Stream"
      }
    }
  },
  contentType: "application/octet-stream",
  responses: {
    200: {
      headersMapper: Mappers.PathUpdateHeaders
    },
    202: {
      headersMapper: Mappers.PathUpdateHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.PathUpdateHeaders
    }
  },
  serializer
};

const leaseOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "{filesystem}/{path}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout
  ],
  headerParameters: [
    Parameters.xMsLeaseAction,
    Parameters.xMsLeaseDuration,
    Parameters.xMsLeaseBreakPeriod,
    Parameters.proposedLeaseId,
    Parameters.requestId,
    Parameters.version,
    Parameters.leaseId,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince
  ],
  responses: {
    200: {
      headersMapper: Mappers.PathLeaseHeaders
    },
    201: {
      headersMapper: Mappers.PathLeaseHeaders
    },
    202: {
      headersMapper: Mappers.PathLeaseHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.PathLeaseHeaders
    }
  },
  serializer
};

const readOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "{filesystem}/{path}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout
  ],
  headerParameters: [
    Parameters.range,
    Parameters.xMsRangeGetContentMd5,
    Parameters.requestId,
    Parameters.version,
    Parameters.leaseId,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      },
      headersMapper: Mappers.PathReadHeaders
    },
    206: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      },
      headersMapper: Mappers.PathReadHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.PathReadHeaders
    }
  },
  serializer
};

const getPropertiesOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "HEAD",
  path: "{filesystem}/{path}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.action1,
    Parameters.upn,
    Parameters.timeout
  ],
  headerParameters: [
    Parameters.requestId,
    Parameters.version,
    Parameters.leaseId,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince
  ],
  responses: {
    200: {
      headersMapper: Mappers.PathGetPropertiesHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.PathGetPropertiesHeaders
    }
  },
  serializer
};

const deleteMethodOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "{filesystem}/{path}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.recursive1,
    Parameters.continuation,
    Parameters.timeout
  ],
  headerParameters: [
    Parameters.requestId,
    Parameters.version,
    Parameters.leaseId,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince
  ],
  responses: {
    200: {
      headersMapper: Mappers.PathDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.PathDeleteHeaders
    }
  },
  serializer
};

const setAccessControlOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PATCH",
  path: "{filesystem}/{path}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.action2
  ],
  headerParameters: [
    Parameters.owner,
    Parameters.group,
    Parameters.permissions,
    Parameters.acl,
    Parameters.requestId,
    Parameters.version,
    Parameters.leaseId,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince
  ],
  responses: {
    200: {
      headersMapper: Mappers.PathSetAccessControlHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.PathSetAccessControlHeaders
    }
  },
  serializer
};

const flushDataOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PATCH",
  path: "{filesystem}/{path}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.position,
    Parameters.retainUncommittedData,
    Parameters.close,
    Parameters.action3
  ],
  headerParameters: [
    Parameters.contentLength,
    Parameters.requestId,
    Parameters.version,
    Parameters.contentMD5,
    Parameters.cacheControl,
    Parameters.contentType,
    Parameters.contentDisposition,
    Parameters.contentEncoding,
    Parameters.contentLanguage,
    Parameters.leaseId,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince
  ],
  responses: {
    200: {
      headersMapper: Mappers.PathFlushDataHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.PathFlushDataHeaders
    }
  },
  serializer
};

const appendDataOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PATCH",
  path: "{filesystem}/{path}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.position,
    Parameters.timeout,
    Parameters.action4
  ],
  headerParameters: [
    Parameters.contentLength,
    Parameters.requestId,
    Parameters.version,
    Parameters.transactionalContentHash,
    Parameters.leaseId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Stream"
      }
    }
  },
  responses: {
    202: {
      headersMapper: Mappers.PathAppendDataHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.PathAppendDataHeaders
    }
  },
  serializer
};
