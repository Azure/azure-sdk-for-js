/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";


export const AccessPolicy: coreHttp.CompositeMapper = {
  serializedName: "AccessPolicy",
  type: {
    name: "Composite",
    className: "AccessPolicy",
    modelProperties: {
      start: {
        xmlName: "Start",
        serializedName: "Start",
        type: {
          name: "String"
        }
      },
      expiry: {
        xmlName: "Expiry",
        serializedName: "Expiry",
        type: {
          name: "String"
        }
      },
      permissions: {
        xmlName: "Permission",
        serializedName: "Permission",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CorsRule: coreHttp.CompositeMapper = {
  serializedName: "CorsRule",
  type: {
    name: "Composite",
    className: "CorsRule",
    modelProperties: {
      allowedOrigins: {
        xmlName: "AllowedOrigins",
        required: true,
        serializedName: "AllowedOrigins",
        type: {
          name: "String"
        }
      },
      allowedMethods: {
        xmlName: "AllowedMethods",
        required: true,
        serializedName: "AllowedMethods",
        type: {
          name: "String"
        }
      },
      allowedHeaders: {
        xmlName: "AllowedHeaders",
        required: true,
        serializedName: "AllowedHeaders",
        type: {
          name: "String"
        }
      },
      exposedHeaders: {
        xmlName: "ExposedHeaders",
        required: true,
        serializedName: "ExposedHeaders",
        type: {
          name: "String"
        }
      },
      maxAgeInSeconds: {
        xmlName: "MaxAgeInSeconds",
        required: true,
        serializedName: "MaxAgeInSeconds",
        constraints: {
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DirectoryItem: coreHttp.CompositeMapper = {
  xmlName: "Directory",
  serializedName: "DirectoryItem",
  type: {
    name: "Composite",
    className: "DirectoryItem",
    modelProperties: {
      name: {
        xmlName: "Name",
        required: true,
        serializedName: "Name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileProperty: coreHttp.CompositeMapper = {
  serializedName: "FileProperty",
  type: {
    name: "Composite",
    className: "FileProperty",
    modelProperties: {
      contentLength: {
        xmlName: "Content-Length",
        required: true,
        serializedName: "Content-Length",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const FileItem: coreHttp.CompositeMapper = {
  xmlName: "File",
  serializedName: "FileItem",
  type: {
    name: "Composite",
    className: "FileItem",
    modelProperties: {
      name: {
        xmlName: "Name",
        required: true,
        serializedName: "Name",
        type: {
          name: "String"
        }
      },
      properties: {
        xmlName: "Properties",
        required: true,
        serializedName: "Properties",
        type: {
          name: "Composite",
          className: "FileProperty"
        }
      }
    }
  }
};

export const FilesAndDirectoriesListSegment: coreHttp.CompositeMapper = {
  xmlName: "Entries",
  serializedName: "FilesAndDirectoriesListSegment",
  type: {
    name: "Composite",
    className: "FilesAndDirectoriesListSegment",
    modelProperties: {
      directoryItems: {
        xmlName: "DirectoryItems",
        xmlElementName: "Directory",
        required: true,
        serializedName: "DirectoryItems",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DirectoryItem"
            }
          }
        }
      },
      fileItems: {
        xmlName: "FileItems",
        xmlElementName: "File",
        required: true,
        serializedName: "FileItems",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FileItem"
            }
          }
        }
      }
    }
  }
};

export const HandleItem: coreHttp.CompositeMapper = {
  xmlName: "Handle",
  serializedName: "HandleItem",
  type: {
    name: "Composite",
    className: "HandleItem",
    modelProperties: {
      handleId: {
        xmlName: "HandleId",
        required: true,
        serializedName: "HandleId",
        type: {
          name: "String"
        }
      },
      path: {
        xmlName: "Path",
        required: true,
        serializedName: "Path",
        type: {
          name: "String"
        }
      },
      fileId: {
        xmlName: "FileId",
        required: true,
        serializedName: "FileId",
        type: {
          name: "String"
        }
      },
      parentId: {
        xmlName: "ParentId",
        serializedName: "ParentId",
        type: {
          name: "String"
        }
      },
      sessionId: {
        xmlName: "SessionId",
        required: true,
        serializedName: "SessionId",
        type: {
          name: "String"
        }
      },
      clientIp: {
        xmlName: "ClientIp",
        required: true,
        serializedName: "ClientIp",
        type: {
          name: "String"
        }
      },
      openTime: {
        xmlName: "OpenTime",
        required: true,
        serializedName: "OpenTime",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      lastReconnectTime: {
        xmlName: "LastReconnectTime",
        serializedName: "LastReconnectTime",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const ListFilesAndDirectoriesSegmentResponse: coreHttp.CompositeMapper = {
  xmlName: "EnumerationResults",
  serializedName: "ListFilesAndDirectoriesSegmentResponse",
  type: {
    name: "Composite",
    className: "ListFilesAndDirectoriesSegmentResponse",
    modelProperties: {
      serviceEndpoint: {
        xmlIsAttribute: true,
        xmlName: "ServiceEndpoint",
        required: true,
        serializedName: "ServiceEndpoint",
        type: {
          name: "String"
        }
      },
      shareName: {
        xmlIsAttribute: true,
        xmlName: "ShareName",
        required: true,
        serializedName: "ShareName",
        type: {
          name: "String"
        }
      },
      shareSnapshot: {
        xmlIsAttribute: true,
        xmlName: "ShareSnapshot",
        serializedName: "ShareSnapshot",
        type: {
          name: "String"
        }
      },
      directoryPath: {
        xmlIsAttribute: true,
        xmlName: "DirectoryPath",
        required: true,
        serializedName: "DirectoryPath",
        type: {
          name: "String"
        }
      },
      prefix: {
        xmlName: "Prefix",
        required: true,
        serializedName: "Prefix",
        type: {
          name: "String"
        }
      },
      marker: {
        xmlName: "Marker",
        serializedName: "Marker",
        type: {
          name: "String"
        }
      },
      maxResults: {
        xmlName: "MaxResults",
        serializedName: "MaxResults",
        type: {
          name: "Number"
        }
      },
      segment: {
        xmlName: "Entries",
        required: true,
        serializedName: "Segment",
        type: {
          name: "Composite",
          className: "FilesAndDirectoriesListSegment"
        }
      },
      continuationToken: {
        xmlName: "NextMarker",
        required: true,
        serializedName: "NextMarker",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListHandlesResponse: coreHttp.CompositeMapper = {
  xmlName: "EnumerationResults",
  serializedName: "ListHandlesResponse",
  type: {
    name: "Composite",
    className: "ListHandlesResponse",
    modelProperties: {
      handleList: {
        xmlIsWrapped: true,
        xmlName: "Entries",
        xmlElementName: "Handle",
        serializedName: "HandleList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HandleItem"
            }
          }
        }
      },
      continuationToken: {
        xmlName: "NextMarker",
        required: true,
        serializedName: "NextMarker",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ShareProperties: coreHttp.CompositeMapper = {
  serializedName: "ShareProperties",
  type: {
    name: "Composite",
    className: "ShareProperties",
    modelProperties: {
      lastModified: {
        xmlName: "Last-Modified",
        required: true,
        serializedName: "Last-Modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      etag: {
        xmlName: "Etag",
        required: true,
        serializedName: "Etag",
        type: {
          name: "String"
        }
      },
      quota: {
        xmlName: "Quota",
        required: true,
        serializedName: "Quota",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ShareItem: coreHttp.CompositeMapper = {
  xmlName: "Share",
  serializedName: "ShareItem",
  type: {
    name: "Composite",
    className: "ShareItem",
    modelProperties: {
      name: {
        xmlName: "Name",
        required: true,
        serializedName: "Name",
        type: {
          name: "String"
        }
      },
      snapshot: {
        xmlName: "Snapshot",
        serializedName: "Snapshot",
        type: {
          name: "String"
        }
      },
      properties: {
        xmlName: "Properties",
        required: true,
        serializedName: "Properties",
        type: {
          name: "Composite",
          className: "ShareProperties"
        }
      },
      metadata: {
        xmlName: "Metadata",
        serializedName: "Metadata",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ListSharesResponse: coreHttp.CompositeMapper = {
  xmlName: "EnumerationResults",
  serializedName: "ListSharesResponse",
  type: {
    name: "Composite",
    className: "ListSharesResponse",
    modelProperties: {
      serviceEndpoint: {
        xmlIsAttribute: true,
        xmlName: "ServiceEndpoint",
        required: true,
        serializedName: "ServiceEndpoint",
        type: {
          name: "String"
        }
      },
      prefix: {
        xmlName: "Prefix",
        serializedName: "Prefix",
        type: {
          name: "String"
        }
      },
      marker: {
        xmlName: "Marker",
        serializedName: "Marker",
        type: {
          name: "String"
        }
      },
      maxResults: {
        xmlName: "MaxResults",
        serializedName: "MaxResults",
        type: {
          name: "Number"
        }
      },
      shareItems: {
        xmlIsWrapped: true,
        xmlName: "Shares",
        xmlElementName: "Share",
        serializedName: "ShareItems",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ShareItem"
            }
          }
        }
      },
      continuationToken: {
        xmlName: "NextMarker",
        required: true,
        serializedName: "NextMarker",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RetentionPolicy: coreHttp.CompositeMapper = {
  serializedName: "RetentionPolicy",
  type: {
    name: "Composite",
    className: "RetentionPolicy",
    modelProperties: {
      enabled: {
        xmlName: "Enabled",
        required: true,
        serializedName: "Enabled",
        type: {
          name: "Boolean"
        }
      },
      days: {
        xmlName: "Days",
        serializedName: "Days",
        constraints: {
          InclusiveMaximum: 365,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Metrics: coreHttp.CompositeMapper = {
  serializedName: "Metrics",
  type: {
    name: "Composite",
    className: "Metrics",
    modelProperties: {
      version: {
        xmlName: "Version",
        required: true,
        serializedName: "Version",
        type: {
          name: "String"
        }
      },
      enabled: {
        xmlName: "Enabled",
        required: true,
        serializedName: "Enabled",
        type: {
          name: "Boolean"
        }
      },
      includeAPIs: {
        xmlName: "IncludeAPIs",
        serializedName: "IncludeAPIs",
        type: {
          name: "Boolean"
        }
      },
      retentionPolicy: {
        xmlName: "RetentionPolicy",
        serializedName: "RetentionPolicy",
        type: {
          name: "Composite",
          className: "RetentionPolicy"
        }
      }
    }
  }
};

export const Range: coreHttp.CompositeMapper = {
  serializedName: "Range",
  type: {
    name: "Composite",
    className: "Range",
    modelProperties: {
      start: {
        xmlName: "Start",
        required: true,
        serializedName: "Start",
        type: {
          name: "Number"
        }
      },
      end: {
        xmlName: "End",
        required: true,
        serializedName: "End",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const StorageError: coreHttp.CompositeMapper = {
  serializedName: "StorageError",
  type: {
    name: "Composite",
    className: "StorageError",
    modelProperties: {
      message: {
        xmlName: "Message",
        serializedName: "Message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ShareStats: coreHttp.CompositeMapper = {
  serializedName: "ShareStats",
  type: {
    name: "Composite",
    className: "ShareStats",
    modelProperties: {
      shareUsageBytes: {
        xmlName: "ShareUsageBytes",
        required: true,
        serializedName: "ShareUsageBytes",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SignedIdentifier: coreHttp.CompositeMapper = {
  serializedName: "SignedIdentifier",
  type: {
    name: "Composite",
    className: "SignedIdentifier",
    modelProperties: {
      id: {
        xmlName: "Id",
        required: true,
        serializedName: "Id",
        type: {
          name: "String"
        }
      },
      accessPolicy: {
        xmlName: "AccessPolicy",
        serializedName: "AccessPolicy",
        type: {
          name: "Composite",
          className: "AccessPolicy"
        }
      }
    }
  }
};

export const Permission: coreHttp.CompositeMapper = {
  serializedName: "Permission",
  type: {
    name: "Composite",
    className: "Permission",
    modelProperties: {
      permission: {
        xmlName: "Permission",
        required: true,
        serializedName: "Permission",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileServiceProperties: coreHttp.CompositeMapper = {
  xmlName: "StorageServiceProperties",
  serializedName: "FileServiceProperties",
  type: {
    name: "Composite",
    className: "FileServiceProperties",
    modelProperties: {
      hourMetrics: {
        xmlName: "HourMetrics",
        serializedName: "HourMetrics",
        type: {
          name: "Composite",
          className: "Metrics"
        }
      },
      minuteMetrics: {
        xmlName: "MinuteMetrics",
        serializedName: "MinuteMetrics",
        type: {
          name: "Composite",
          className: "Metrics"
        }
      },
      cors: {
        xmlIsWrapped: true,
        xmlName: "Cors",
        xmlElementName: "CorsRule",
        serializedName: "Cors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CorsRule"
            }
          }
        }
      }
    }
  }
};

export const FileHTTPHeaders: coreHttp.CompositeMapper = {
  xmlName: "file-HTTP-headers",
  type: {
    name: "Composite",
    className: "FileHTTPHeaders",
    modelProperties: {
      fileContentType: {
        xmlName: "fileContentType",
        type: {
          name: "String"
        }
      },
      fileContentEncoding: {
        xmlName: "fileContentEncoding",
        type: {
          name: "String"
        }
      },
      fileContentLanguage: {
        xmlName: "fileContentLanguage",
        type: {
          name: "String"
        }
      },
      fileCacheControl: {
        xmlName: "fileCacheControl",
        type: {
          name: "String"
        }
      },
      fileContentMD5: {
        xmlName: "fileContentMD5",
        type: {
          name: "ByteArray"
        }
      },
      fileContentDisposition: {
        xmlName: "fileContentDisposition",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SourceModifiedAccessConditions: coreHttp.CompositeMapper = {
  xmlName: "source-modified-access-conditions",
  type: {
    name: "Composite",
    className: "SourceModifiedAccessConditions",
    modelProperties: {
      sourceIfMatchCrc64: {
        xmlName: "sourceIfMatchCrc64",
        type: {
          name: "ByteArray"
        }
      },
      sourceIfNoneMatchCrc64: {
        xmlName: "sourceIfNoneMatchCrc64",
        type: {
          name: "ByteArray"
        }
      }
    }
  }
};

export const ServiceSetPropertiesHeaders: coreHttp.CompositeMapper = {
  serializedName: "service-setproperties-headers",
  type: {
    name: "Composite",
    className: "ServiceSetPropertiesHeaders",
    modelProperties: {
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceGetPropertiesHeaders: coreHttp.CompositeMapper = {
  serializedName: "service-getproperties-headers",
  type: {
    name: "Composite",
    className: "ServiceGetPropertiesHeaders",
    modelProperties: {
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceListSharesSegmentHeaders: coreHttp.CompositeMapper = {
  serializedName: "service-listsharessegment-headers",
  type: {
    name: "Composite",
    className: "ServiceListSharesSegmentHeaders",
    modelProperties: {
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ShareCreateHeaders: coreHttp.CompositeMapper = {
  serializedName: "share-create-headers",
  type: {
    name: "Composite",
    className: "ShareCreateHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ShareGetPropertiesHeaders: coreHttp.CompositeMapper = {
  serializedName: "share-getproperties-headers",
  type: {
    name: "Composite",
    className: "ShareGetPropertiesHeaders",
    modelProperties: {
      metadata: {
        serializedName: "x-ms-meta",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        },
        headerCollectionPrefix: "x-ms-meta-"
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      quota: {
        serializedName: "x-ms-share-quota",
        type: {
          name: "Number"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ShareDeleteHeaders: coreHttp.CompositeMapper = {
  serializedName: "share-delete-headers",
  type: {
    name: "Composite",
    className: "ShareDeleteHeaders",
    modelProperties: {
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ShareCreateSnapshotHeaders: coreHttp.CompositeMapper = {
  serializedName: "share-createsnapshot-headers",
  type: {
    name: "Composite",
    className: "ShareCreateSnapshotHeaders",
    modelProperties: {
      snapshot: {
        serializedName: "x-ms-snapshot",
        type: {
          name: "String"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ShareCreatePermissionHeaders: coreHttp.CompositeMapper = {
  serializedName: "share-createpermission-headers",
  type: {
    name: "Composite",
    className: "ShareCreatePermissionHeaders",
    modelProperties: {
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      filePermissionKey: {
        serializedName: "x-ms-file-permission-key",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ShareGetPermissionHeaders: coreHttp.CompositeMapper = {
  serializedName: "share-getpermission-headers",
  type: {
    name: "Composite",
    className: "ShareGetPermissionHeaders",
    modelProperties: {
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ShareSetQuotaHeaders: coreHttp.CompositeMapper = {
  serializedName: "share-setquota-headers",
  type: {
    name: "Composite",
    className: "ShareSetQuotaHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ShareSetMetadataHeaders: coreHttp.CompositeMapper = {
  serializedName: "share-setmetadata-headers",
  type: {
    name: "Composite",
    className: "ShareSetMetadataHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ShareGetAccessPolicyHeaders: coreHttp.CompositeMapper = {
  serializedName: "share-getaccesspolicy-headers",
  type: {
    name: "Composite",
    className: "ShareGetAccessPolicyHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ShareSetAccessPolicyHeaders: coreHttp.CompositeMapper = {
  serializedName: "share-setaccesspolicy-headers",
  type: {
    name: "Composite",
    className: "ShareSetAccessPolicyHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ShareGetStatisticsHeaders: coreHttp.CompositeMapper = {
  serializedName: "share-getstatistics-headers",
  type: {
    name: "Composite",
    className: "ShareGetStatisticsHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DirectoryCreateHeaders: coreHttp.CompositeMapper = {
  serializedName: "directory-create-headers",
  type: {
    name: "Composite",
    className: "DirectoryCreateHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      filePermissionKey: {
        serializedName: "x-ms-file-permission-key",
        type: {
          name: "String"
        }
      },
      fileAttributes: {
        serializedName: "x-ms-file-attributes",
        type: {
          name: "String"
        }
      },
      fileCreatedOn: {
        serializedName: "x-ms-file-creation-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      fileLastWriteOn: {
        serializedName: "x-ms-file-last-write-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      fileChangeOn: {
        serializedName: "x-ms-file-change-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      fileId: {
        serializedName: "x-ms-file-id",
        type: {
          name: "String"
        }
      },
      fileParentId: {
        serializedName: "x-ms-file-parent-id",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DirectoryGetPropertiesHeaders: coreHttp.CompositeMapper = {
  serializedName: "directory-getproperties-headers",
  type: {
    name: "Composite",
    className: "DirectoryGetPropertiesHeaders",
    modelProperties: {
      metadata: {
        serializedName: "x-ms-meta",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        },
        headerCollectionPrefix: "x-ms-meta-"
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      fileAttributes: {
        serializedName: "x-ms-file-attributes",
        type: {
          name: "String"
        }
      },
      fileCreatedOn: {
        serializedName: "x-ms-file-creation-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      fileLastWriteOn: {
        serializedName: "x-ms-file-last-write-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      fileChangeOn: {
        serializedName: "x-ms-file-change-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      filePermissionKey: {
        serializedName: "x-ms-file-permission-key",
        type: {
          name: "String"
        }
      },
      fileId: {
        serializedName: "x-ms-file-id",
        type: {
          name: "String"
        }
      },
      fileParentId: {
        serializedName: "x-ms-file-parent-id",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DirectoryDeleteHeaders: coreHttp.CompositeMapper = {
  serializedName: "directory-delete-headers",
  type: {
    name: "Composite",
    className: "DirectoryDeleteHeaders",
    modelProperties: {
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DirectorySetPropertiesHeaders: coreHttp.CompositeMapper = {
  serializedName: "directory-setproperties-headers",
  type: {
    name: "Composite",
    className: "DirectorySetPropertiesHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      filePermissionKey: {
        serializedName: "x-ms-file-permission-key",
        type: {
          name: "String"
        }
      },
      fileAttributes: {
        serializedName: "x-ms-file-attributes",
        type: {
          name: "String"
        }
      },
      fileCreatedOn: {
        serializedName: "x-ms-file-creation-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      fileLastWriteOn: {
        serializedName: "x-ms-file-last-write-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      fileChangeOn: {
        serializedName: "x-ms-file-change-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      fileId: {
        serializedName: "x-ms-file-id",
        type: {
          name: "String"
        }
      },
      fileParentId: {
        serializedName: "x-ms-file-parent-id",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DirectorySetMetadataHeaders: coreHttp.CompositeMapper = {
  serializedName: "directory-setmetadata-headers",
  type: {
    name: "Composite",
    className: "DirectorySetMetadataHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DirectoryListFilesAndDirectoriesSegmentHeaders: coreHttp.CompositeMapper = {
  serializedName: "directory-listfilesanddirectoriessegment-headers",
  type: {
    name: "Composite",
    className: "DirectoryListFilesAndDirectoriesSegmentHeaders",
    modelProperties: {
      contentType: {
        serializedName: "content-type",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DirectoryListHandlesHeaders: coreHttp.CompositeMapper = {
  serializedName: "directory-listhandles-headers",
  type: {
    name: "Composite",
    className: "DirectoryListHandlesHeaders",
    modelProperties: {
      contentType: {
        serializedName: "content-type",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DirectoryForceCloseHandlesHeaders: coreHttp.CompositeMapper = {
  serializedName: "directory-forceclosehandles-headers",
  type: {
    name: "Composite",
    className: "DirectoryForceCloseHandlesHeaders",
    modelProperties: {
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      marker: {
        serializedName: "x-ms-marker",
        type: {
          name: "String"
        }
      },
      numberOfHandlesClosed: {
        serializedName: "x-ms-number-of-handles-closed",
        type: {
          name: "Number"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileCreateHeaders: coreHttp.CompositeMapper = {
  serializedName: "file-create-headers",
  type: {
    name: "Composite",
    className: "FileCreateHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      filePermissionKey: {
        serializedName: "x-ms-file-permission-key",
        type: {
          name: "String"
        }
      },
      fileAttributes: {
        serializedName: "x-ms-file-attributes",
        type: {
          name: "String"
        }
      },
      fileCreatedOn: {
        serializedName: "x-ms-file-creation-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      fileLastWriteOn: {
        serializedName: "x-ms-file-last-write-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      fileChangeOn: {
        serializedName: "x-ms-file-change-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      fileId: {
        serializedName: "x-ms-file-id",
        type: {
          name: "String"
        }
      },
      fileParentId: {
        serializedName: "x-ms-file-parent-id",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileDownloadHeaders: coreHttp.CompositeMapper = {
  serializedName: "file-download-headers",
  type: {
    name: "Composite",
    className: "FileDownloadHeaders",
    modelProperties: {
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      metadata: {
        serializedName: "x-ms-meta",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        },
        headerCollectionPrefix: "x-ms-meta-"
      },
      contentLength: {
        serializedName: "content-length",
        type: {
          name: "Number"
        }
      },
      contentType: {
        serializedName: "content-type",
        type: {
          name: "String"
        }
      },
      contentRange: {
        serializedName: "content-range",
        type: {
          name: "String"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      contentEncoding: {
        serializedName: "content-encoding",
        type: {
          name: "String"
        }
      },
      cacheControl: {
        serializedName: "cache-control",
        type: {
          name: "String"
        }
      },
      contentDisposition: {
        serializedName: "content-disposition",
        type: {
          name: "String"
        }
      },
      contentLanguage: {
        serializedName: "content-language",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      acceptRanges: {
        serializedName: "accept-ranges",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      copyCompletedOn: {
        serializedName: "x-ms-copy-completion-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      copyStatusDescription: {
        serializedName: "x-ms-copy-status-description",
        type: {
          name: "String"
        }
      },
      copyId: {
        serializedName: "x-ms-copy-id",
        type: {
          name: "String"
        }
      },
      copyProgress: {
        serializedName: "x-ms-copy-progress",
        type: {
          name: "String"
        }
      },
      copySource: {
        serializedName: "x-ms-copy-source",
        type: {
          name: "String"
        }
      },
      copyStatus: {
        serializedName: "x-ms-copy-status",
        type: {
          name: "Enum",
          allowedValues: [
            "pending",
            "success",
            "aborted",
            "failed"
          ]
        }
      },
      fileContentMD5: {
        serializedName: "x-ms-content-md5",
        type: {
          name: "ByteArray"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      fileAttributes: {
        serializedName: "x-ms-file-attributes",
        type: {
          name: "String"
        }
      },
      fileCreatedOn: {
        serializedName: "x-ms-file-creation-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      fileLastWriteOn: {
        serializedName: "x-ms-file-last-write-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      fileChangeOn: {
        serializedName: "x-ms-file-change-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      filePermissionKey: {
        serializedName: "x-ms-file-permission-key",
        type: {
          name: "String"
        }
      },
      fileId: {
        serializedName: "x-ms-file-id",
        type: {
          name: "String"
        }
      },
      fileParentId: {
        serializedName: "x-ms-file-parent-id",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileGetPropertiesHeaders: coreHttp.CompositeMapper = {
  serializedName: "file-getproperties-headers",
  type: {
    name: "Composite",
    className: "FileGetPropertiesHeaders",
    modelProperties: {
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      metadata: {
        serializedName: "x-ms-meta",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        },
        headerCollectionPrefix: "x-ms-meta-"
      },
      fileType: {
        serializedName: "x-ms-type",
        type: {
          name: "String"
        }
      },
      contentLength: {
        serializedName: "content-length",
        type: {
          name: "Number"
        }
      },
      contentType: {
        serializedName: "content-type",
        type: {
          name: "String"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      contentEncoding: {
        serializedName: "content-encoding",
        type: {
          name: "String"
        }
      },
      cacheControl: {
        serializedName: "cache-control",
        type: {
          name: "String"
        }
      },
      contentDisposition: {
        serializedName: "content-disposition",
        type: {
          name: "String"
        }
      },
      contentLanguage: {
        serializedName: "content-language",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      copyCompletedOn: {
        serializedName: "x-ms-copy-completion-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      copyStatusDescription: {
        serializedName: "x-ms-copy-status-description",
        type: {
          name: "String"
        }
      },
      copyId: {
        serializedName: "x-ms-copy-id",
        type: {
          name: "String"
        }
      },
      copyProgress: {
        serializedName: "x-ms-copy-progress",
        type: {
          name: "String"
        }
      },
      copySource: {
        serializedName: "x-ms-copy-source",
        type: {
          name: "String"
        }
      },
      copyStatus: {
        serializedName: "x-ms-copy-status",
        type: {
          name: "Enum",
          allowedValues: [
            "pending",
            "success",
            "aborted",
            "failed"
          ]
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      fileAttributes: {
        serializedName: "x-ms-file-attributes",
        type: {
          name: "String"
        }
      },
      fileCreatedOn: {
        serializedName: "x-ms-file-creation-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      fileLastWriteOn: {
        serializedName: "x-ms-file-last-write-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      fileChangeOn: {
        serializedName: "x-ms-file-change-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      filePermissionKey: {
        serializedName: "x-ms-file-permission-key",
        type: {
          name: "String"
        }
      },
      fileId: {
        serializedName: "x-ms-file-id",
        type: {
          name: "String"
        }
      },
      fileParentId: {
        serializedName: "x-ms-file-parent-id",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileDeleteHeaders: coreHttp.CompositeMapper = {
  serializedName: "file-delete-headers",
  type: {
    name: "Composite",
    className: "FileDeleteHeaders",
    modelProperties: {
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileSetHTTPHeadersHeaders: coreHttp.CompositeMapper = {
  serializedName: "file-sethttpheaders-headers",
  type: {
    name: "Composite",
    className: "FileSetHTTPHeadersHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      filePermissionKey: {
        serializedName: "x-ms-file-permission-key",
        type: {
          name: "String"
        }
      },
      fileAttributes: {
        serializedName: "x-ms-file-attributes",
        type: {
          name: "String"
        }
      },
      fileCreatedOn: {
        serializedName: "x-ms-file-creation-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      fileLastWriteOn: {
        serializedName: "x-ms-file-last-write-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      fileChangeOn: {
        serializedName: "x-ms-file-change-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      fileId: {
        serializedName: "x-ms-file-id",
        type: {
          name: "String"
        }
      },
      fileParentId: {
        serializedName: "x-ms-file-parent-id",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileSetMetadataHeaders: coreHttp.CompositeMapper = {
  serializedName: "file-setmetadata-headers",
  type: {
    name: "Composite",
    className: "FileSetMetadataHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileUploadRangeHeaders: coreHttp.CompositeMapper = {
  serializedName: "file-uploadrange-headers",
  type: {
    name: "Composite",
    className: "FileUploadRangeHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileUploadRangeFromURLHeaders: coreHttp.CompositeMapper = {
  serializedName: "file-uploadrangefromurl-headers",
  type: {
    name: "Composite",
    className: "FileUploadRangeFromURLHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      xMsContentCrc64: {
        serializedName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileGetRangeListHeaders: coreHttp.CompositeMapper = {
  serializedName: "file-getrangelist-headers",
  type: {
    name: "Composite",
    className: "FileGetRangeListHeaders",
    modelProperties: {
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      fileContentLength: {
        serializedName: "x-ms-content-length",
        type: {
          name: "Number"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileStartCopyHeaders: coreHttp.CompositeMapper = {
  serializedName: "file-startcopy-headers",
  type: {
    name: "Composite",
    className: "FileStartCopyHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      copyId: {
        serializedName: "x-ms-copy-id",
        type: {
          name: "String"
        }
      },
      copyStatus: {
        serializedName: "x-ms-copy-status",
        type: {
          name: "Enum",
          allowedValues: [
            "pending",
            "success",
            "aborted",
            "failed"
          ]
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileAbortCopyHeaders: coreHttp.CompositeMapper = {
  serializedName: "file-abortcopy-headers",
  type: {
    name: "Composite",
    className: "FileAbortCopyHeaders",
    modelProperties: {
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileListHandlesHeaders: coreHttp.CompositeMapper = {
  serializedName: "file-listhandles-headers",
  type: {
    name: "Composite",
    className: "FileListHandlesHeaders",
    modelProperties: {
      contentType: {
        serializedName: "content-type",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileForceCloseHandlesHeaders: coreHttp.CompositeMapper = {
  serializedName: "file-forceclosehandles-headers",
  type: {
    name: "Composite",
    className: "FileForceCloseHandlesHeaders",
    modelProperties: {
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      marker: {
        serializedName: "x-ms-marker",
        type: {
          name: "String"
        }
      },
      numberOfHandlesClosed: {
        serializedName: "x-ms-number-of-handles-closed",
        type: {
          name: "Number"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
