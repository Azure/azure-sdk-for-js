/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const OperationDisplay: msRest.CompositeMapper = {
  serializedName: "Operation_display",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Dimension: msRest.CompositeMapper = {
  serializedName: "Dimension",
  type: {
    name: "Composite",
    className: "Dimension",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricSpecification: msRest.CompositeMapper = {
  serializedName: "MetricSpecification",
  type: {
    name: "Composite",
    className: "MetricSpecification",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      displayDescription: {
        serializedName: "displayDescription",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      dimensions: {
        serializedName: "dimensions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Dimension"
            }
          }
        }
      },
      aggregationType: {
        serializedName: "aggregationType",
        type: {
          name: "String"
        }
      },
      fillGapWithZero: {
        serializedName: "fillGapWithZero",
        type: {
          name: "Boolean"
        }
      },
      category: {
        serializedName: "category",
        type: {
          name: "String"
        }
      },
      resourceIdDimensionNameOverride: {
        serializedName: "resourceIdDimensionNameOverride",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceSpecification: msRest.CompositeMapper = {
  serializedName: "ServiceSpecification",
  type: {
    name: "Composite",
    className: "ServiceSpecification",
    modelProperties: {
      metricSpecifications: {
        serializedName: "metricSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricSpecification"
            }
          }
        }
      }
    }
  }
};

export const Operation: msRest.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      serviceSpecification: {
        serializedName: "properties.serviceSpecification",
        type: {
          name: "Composite",
          className: "ServiceSpecification"
        }
      }
    }
  }
};

export const StorageAccountCheckNameAvailabilityParameters: msRest.CompositeMapper = {
  serializedName: "StorageAccountCheckNameAvailabilityParameters",
  type: {
    name: "Composite",
    className: "StorageAccountCheckNameAvailabilityParameters",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        required: true,
        isConstant: true,
        serializedName: "type",
        defaultValue: 'Microsoft.Storage/storageAccounts',
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SKUCapability: msRest.CompositeMapper = {
  serializedName: "SKUCapability",
  type: {
    name: "Composite",
    className: "SKUCapability",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Restriction: msRest.CompositeMapper = {
  serializedName: "Restriction",
  type: {
    name: "Composite",
    className: "Restriction",
    modelProperties: {
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      values: {
        readOnly: true,
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      reasonCode: {
        serializedName: "reasonCode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Sku: msRest.CompositeMapper = {
  serializedName: "Sku",
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "Enum",
          allowedValues: [
            "Standard_LRS",
            "Standard_GRS",
            "Standard_RAGRS",
            "Standard_ZRS",
            "Premium_LRS"
          ]
        }
      },
      tier: {
        readOnly: true,
        serializedName: "tier",
        type: {
          name: "Enum",
          allowedValues: [
            "Standard",
            "Premium"
          ]
        }
      },
      resourceType: {
        readOnly: true,
        serializedName: "resourceType",
        type: {
          name: "String"
        }
      },
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "Enum",
          allowedValues: [
            "Storage",
            "StorageV2",
            "BlobStorage"
          ]
        }
      },
      locations: {
        readOnly: true,
        serializedName: "locations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      capabilities: {
        readOnly: true,
        serializedName: "capabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SKUCapability"
            }
          }
        }
      },
      restrictions: {
        serializedName: "restrictions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Restriction"
            }
          }
        }
      }
    }
  }
};

export const CheckNameAvailabilityResult: msRest.CompositeMapper = {
  serializedName: "CheckNameAvailabilityResult",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityResult",
    modelProperties: {
      nameAvailable: {
        readOnly: true,
        serializedName: "nameAvailable",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        readOnly: true,
        serializedName: "reason",
        type: {
          name: "Enum",
          allowedValues: [
            "AccountNameInvalid",
            "AlreadyExists"
          ]
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomDomain: msRest.CompositeMapper = {
  serializedName: "CustomDomain",
  type: {
    name: "Composite",
    className: "CustomDomain",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      useSubDomainName: {
        serializedName: "useSubDomainName",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const EncryptionService: msRest.CompositeMapper = {
  serializedName: "EncryptionService",
  type: {
    name: "Composite",
    className: "EncryptionService",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      lastEnabledTime: {
        readOnly: true,
        serializedName: "lastEnabledTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const EncryptionServices: msRest.CompositeMapper = {
  serializedName: "EncryptionServices",
  type: {
    name: "Composite",
    className: "EncryptionServices",
    modelProperties: {
      blob: {
        serializedName: "blob",
        type: {
          name: "Composite",
          className: "EncryptionService"
        }
      },
      file: {
        serializedName: "file",
        type: {
          name: "Composite",
          className: "EncryptionService"
        }
      },
      table: {
        readOnly: true,
        serializedName: "table",
        type: {
          name: "Composite",
          className: "EncryptionService"
        }
      },
      queue: {
        readOnly: true,
        serializedName: "queue",
        type: {
          name: "Composite",
          className: "EncryptionService"
        }
      }
    }
  }
};

export const KeyVaultProperties: msRest.CompositeMapper = {
  serializedName: "KeyVaultProperties",
  type: {
    name: "Composite",
    className: "KeyVaultProperties",
    modelProperties: {
      keyName: {
        serializedName: "keyname",
        type: {
          name: "String"
        }
      },
      keyVersion: {
        serializedName: "keyversion",
        type: {
          name: "String"
        }
      },
      keyVaultUri: {
        serializedName: "keyvaulturi",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Encryption: msRest.CompositeMapper = {
  serializedName: "Encryption",
  type: {
    name: "Composite",
    className: "Encryption",
    modelProperties: {
      services: {
        serializedName: "services",
        type: {
          name: "Composite",
          className: "EncryptionServices"
        }
      },
      keySource: {
        required: true,
        serializedName: "keySource",
        defaultValue: 'Microsoft.Storage',
        type: {
          name: "String"
        }
      },
      keyVaultProperties: {
        serializedName: "keyvaultproperties",
        type: {
          name: "Composite",
          className: "KeyVaultProperties"
        }
      }
    }
  }
};

export const VirtualNetworkRule: msRest.CompositeMapper = {
  serializedName: "VirtualNetworkRule",
  type: {
    name: "Composite",
    className: "VirtualNetworkRule",
    modelProperties: {
      virtualNetworkResourceId: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      action: {
        serializedName: "action",
        defaultValue: 'Allow',
        type: {
          name: "Enum",
          allowedValues: [
            "Allow"
          ]
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "Enum",
          allowedValues: [
            "provisioning",
            "deprovisioning",
            "succeeded",
            "failed",
            "networkSourceDeleted"
          ]
        }
      }
    }
  }
};

export const IPRule: msRest.CompositeMapper = {
  serializedName: "IPRule",
  type: {
    name: "Composite",
    className: "IPRule",
    modelProperties: {
      iPAddressOrRange: {
        required: true,
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      action: {
        serializedName: "action",
        defaultValue: 'Allow',
        type: {
          name: "Enum",
          allowedValues: [
            "Allow"
          ]
        }
      }
    }
  }
};

export const NetworkRuleSet: msRest.CompositeMapper = {
  serializedName: "NetworkRuleSet",
  type: {
    name: "Composite",
    className: "NetworkRuleSet",
    modelProperties: {
      bypass: {
        serializedName: "bypass",
        defaultValue: 'AzureServices',
        type: {
          name: "String"
        }
      },
      virtualNetworkRules: {
        serializedName: "virtualNetworkRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkRule"
            }
          }
        }
      },
      ipRules: {
        serializedName: "ipRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IPRule"
            }
          }
        }
      },
      defaultAction: {
        required: true,
        serializedName: "defaultAction",
        defaultValue: 'Allow',
        type: {
          name: "Enum",
          allowedValues: [
            "Allow",
            "Deny"
          ]
        }
      }
    }
  }
};

export const Identity: msRest.CompositeMapper = {
  serializedName: "Identity",
  type: {
    name: "Composite",
    className: "Identity",
    modelProperties: {
      principalId: {
        readOnly: true,
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      tenantId: {
        readOnly: true,
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      },
      type: {
        required: true,
        isConstant: true,
        serializedName: "type",
        defaultValue: 'SystemAssigned',
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAccountCreateParameters: msRest.CompositeMapper = {
  serializedName: "StorageAccountCreateParameters",
  type: {
    name: "Composite",
    className: "StorageAccountCreateParameters",
    modelProperties: {
      sku: {
        required: true,
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      kind: {
        required: true,
        serializedName: "kind",
        type: {
          name: "Enum",
          allowedValues: [
            "Storage",
            "StorageV2",
            "BlobStorage"
          ]
        }
      },
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      },
      customDomain: {
        serializedName: "properties.customDomain",
        type: {
          name: "Composite",
          className: "CustomDomain"
        }
      },
      encryption: {
        serializedName: "properties.encryption",
        type: {
          name: "Composite",
          className: "Encryption"
        }
      },
      networkRuleSet: {
        serializedName: "properties.networkAcls",
        type: {
          name: "Composite",
          className: "NetworkRuleSet"
        }
      },
      accessTier: {
        serializedName: "properties.accessTier",
        type: {
          name: "Enum",
          allowedValues: [
            "Hot",
            "Cool"
          ]
        }
      },
      enableHttpsTrafficOnly: {
        serializedName: "properties.supportsHttpsTrafficOnly",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const Endpoints: msRest.CompositeMapper = {
  serializedName: "Endpoints",
  type: {
    name: "Composite",
    className: "Endpoints",
    modelProperties: {
      blob: {
        readOnly: true,
        serializedName: "blob",
        type: {
          name: "String"
        }
      },
      queue: {
        readOnly: true,
        serializedName: "queue",
        type: {
          name: "String"
        }
      },
      table: {
        readOnly: true,
        serializedName: "table",
        type: {
          name: "String"
        }
      },
      file: {
        readOnly: true,
        serializedName: "file",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: msRest.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const StorageAccount: msRest.CompositeMapper = {
  serializedName: "StorageAccount",
  type: {
    name: "Composite",
    className: "StorageAccount",
    modelProperties: {
      ...Resource.type.modelProperties,
      sku: {
        readOnly: true,
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "Enum",
          allowedValues: [
            "Storage",
            "StorageV2",
            "BlobStorage"
          ]
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Creating",
            "ResolvingDNS",
            "Succeeded"
          ]
        }
      },
      primaryEndpoints: {
        readOnly: true,
        serializedName: "properties.primaryEndpoints",
        type: {
          name: "Composite",
          className: "Endpoints"
        }
      },
      primaryLocation: {
        readOnly: true,
        serializedName: "properties.primaryLocation",
        type: {
          name: "String"
        }
      },
      statusOfPrimary: {
        readOnly: true,
        serializedName: "properties.statusOfPrimary",
        type: {
          name: "Enum",
          allowedValues: [
            "available",
            "unavailable"
          ]
        }
      },
      lastGeoFailoverTime: {
        readOnly: true,
        serializedName: "properties.lastGeoFailoverTime",
        type: {
          name: "DateTime"
        }
      },
      secondaryLocation: {
        readOnly: true,
        serializedName: "properties.secondaryLocation",
        type: {
          name: "String"
        }
      },
      statusOfSecondary: {
        readOnly: true,
        serializedName: "properties.statusOfSecondary",
        type: {
          name: "Enum",
          allowedValues: [
            "available",
            "unavailable"
          ]
        }
      },
      creationTime: {
        readOnly: true,
        serializedName: "properties.creationTime",
        type: {
          name: "DateTime"
        }
      },
      customDomain: {
        readOnly: true,
        serializedName: "properties.customDomain",
        type: {
          name: "Composite",
          className: "CustomDomain"
        }
      },
      secondaryEndpoints: {
        readOnly: true,
        serializedName: "properties.secondaryEndpoints",
        type: {
          name: "Composite",
          className: "Endpoints"
        }
      },
      encryption: {
        readOnly: true,
        serializedName: "properties.encryption",
        type: {
          name: "Composite",
          className: "Encryption"
        }
      },
      accessTier: {
        readOnly: true,
        serializedName: "properties.accessTier",
        type: {
          name: "Enum",
          allowedValues: [
            "Hot",
            "Cool"
          ]
        }
      },
      enableHttpsTrafficOnly: {
        serializedName: "properties.supportsHttpsTrafficOnly",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      networkRuleSet: {
        readOnly: true,
        serializedName: "properties.networkAcls",
        type: {
          name: "Composite",
          className: "NetworkRuleSet"
        }
      }
    }
  }
};

export const StorageAccountKey: msRest.CompositeMapper = {
  serializedName: "StorageAccountKey",
  type: {
    name: "Composite",
    className: "StorageAccountKey",
    modelProperties: {
      keyName: {
        readOnly: true,
        serializedName: "keyName",
        type: {
          name: "String"
        }
      },
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      permissions: {
        readOnly: true,
        serializedName: "permissions",
        type: {
          name: "Enum",
          allowedValues: [
            "Read",
            "Full"
          ]
        }
      }
    }
  }
};

export const StorageAccountListKeysResult: msRest.CompositeMapper = {
  serializedName: "StorageAccountListKeysResult",
  type: {
    name: "Composite",
    className: "StorageAccountListKeysResult",
    modelProperties: {
      keys: {
        readOnly: true,
        serializedName: "keys",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageAccountKey"
            }
          }
        }
      }
    }
  }
};

export const StorageAccountRegenerateKeyParameters: msRest.CompositeMapper = {
  serializedName: "StorageAccountRegenerateKeyParameters",
  type: {
    name: "Composite",
    className: "StorageAccountRegenerateKeyParameters",
    modelProperties: {
      keyName: {
        required: true,
        serializedName: "keyName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAccountUpdateParameters: msRest.CompositeMapper = {
  serializedName: "StorageAccountUpdateParameters",
  type: {
    name: "Composite",
    className: "StorageAccountUpdateParameters",
    modelProperties: {
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      },
      customDomain: {
        serializedName: "properties.customDomain",
        type: {
          name: "Composite",
          className: "CustomDomain"
        }
      },
      encryption: {
        serializedName: "properties.encryption",
        type: {
          name: "Composite",
          className: "Encryption"
        }
      },
      accessTier: {
        serializedName: "properties.accessTier",
        type: {
          name: "Enum",
          allowedValues: [
            "Hot",
            "Cool"
          ]
        }
      },
      enableHttpsTrafficOnly: {
        serializedName: "properties.supportsHttpsTrafficOnly",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      networkRuleSet: {
        serializedName: "properties.networkAcls",
        type: {
          name: "Composite",
          className: "NetworkRuleSet"
        }
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "Enum",
          allowedValues: [
            "Storage",
            "StorageV2",
            "BlobStorage"
          ]
        }
      }
    }
  }
};

export const UsageName: msRest.CompositeMapper = {
  serializedName: "UsageName",
  type: {
    name: "Composite",
    className: "UsageName",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      localizedValue: {
        readOnly: true,
        serializedName: "localizedValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Usage: msRest.CompositeMapper = {
  serializedName: "Usage",
  type: {
    name: "Composite",
    className: "Usage",
    modelProperties: {
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "Enum",
          allowedValues: [
            "Count",
            "Bytes",
            "Seconds",
            "Percent",
            "CountsPerSecond",
            "BytesPerSecond"
          ]
        }
      },
      currentValue: {
        readOnly: true,
        serializedName: "currentValue",
        type: {
          name: "Number"
        }
      },
      limit: {
        readOnly: true,
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "Composite",
          className: "UsageName"
        }
      }
    }
  }
};

export const AccountSasParameters: msRest.CompositeMapper = {
  serializedName: "AccountSasParameters",
  type: {
    name: "Composite",
    className: "AccountSasParameters",
    modelProperties: {
      services: {
        required: true,
        serializedName: "signedServices",
        type: {
          name: "String"
        }
      },
      resourceTypes: {
        required: true,
        serializedName: "signedResourceTypes",
        type: {
          name: "String"
        }
      },
      permissions: {
        required: true,
        serializedName: "signedPermission",
        type: {
          name: "String"
        }
      },
      iPAddressOrRange: {
        serializedName: "signedIp",
        type: {
          name: "String"
        }
      },
      protocols: {
        serializedName: "signedProtocol",
        type: {
          name: "Enum",
          allowedValues: [
            "https,http",
            "https"
          ]
        }
      },
      sharedAccessStartTime: {
        serializedName: "signedStart",
        type: {
          name: "DateTime"
        }
      },
      sharedAccessExpiryTime: {
        required: true,
        serializedName: "signedExpiry",
        type: {
          name: "DateTime"
        }
      },
      keyToSign: {
        serializedName: "keyToSign",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListAccountSasResponse: msRest.CompositeMapper = {
  serializedName: "ListAccountSasResponse",
  type: {
    name: "Composite",
    className: "ListAccountSasResponse",
    modelProperties: {
      accountSasToken: {
        readOnly: true,
        serializedName: "accountSasToken",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceSasParameters: msRest.CompositeMapper = {
  serializedName: "ServiceSasParameters",
  type: {
    name: "Composite",
    className: "ServiceSasParameters",
    modelProperties: {
      canonicalizedResource: {
        required: true,
        serializedName: "canonicalizedResource",
        type: {
          name: "String"
        }
      },
      resource: {
        required: true,
        serializedName: "signedResource",
        type: {
          name: "String"
        }
      },
      permissions: {
        serializedName: "signedPermission",
        type: {
          name: "String"
        }
      },
      iPAddressOrRange: {
        serializedName: "signedIp",
        type: {
          name: "String"
        }
      },
      protocols: {
        serializedName: "signedProtocol",
        type: {
          name: "Enum",
          allowedValues: [
            "https,http",
            "https"
          ]
        }
      },
      sharedAccessStartTime: {
        serializedName: "signedStart",
        type: {
          name: "DateTime"
        }
      },
      sharedAccessExpiryTime: {
        serializedName: "signedExpiry",
        type: {
          name: "DateTime"
        }
      },
      identifier: {
        serializedName: "signedIdentifier",
        constraints: {
          MaxLength: 64
        },
        type: {
          name: "String"
        }
      },
      partitionKeyStart: {
        serializedName: "startPk",
        type: {
          name: "String"
        }
      },
      partitionKeyEnd: {
        serializedName: "endPk",
        type: {
          name: "String"
        }
      },
      rowKeyStart: {
        serializedName: "startRk",
        type: {
          name: "String"
        }
      },
      rowKeyEnd: {
        serializedName: "endRk",
        type: {
          name: "String"
        }
      },
      keyToSign: {
        serializedName: "keyToSign",
        type: {
          name: "String"
        }
      },
      cacheControl: {
        serializedName: "rscc",
        type: {
          name: "String"
        }
      },
      contentDisposition: {
        serializedName: "rscd",
        type: {
          name: "String"
        }
      },
      contentEncoding: {
        serializedName: "rsce",
        type: {
          name: "String"
        }
      },
      contentLanguage: {
        serializedName: "rscl",
        type: {
          name: "String"
        }
      },
      contentType: {
        serializedName: "rsct",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListServiceSasResponse: msRest.CompositeMapper = {
  serializedName: "ListServiceSasResponse",
  type: {
    name: "Composite",
    className: "ListServiceSasResponse",
    modelProperties: {
      serviceSasToken: {
        readOnly: true,
        serializedName: "serviceSasToken",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: msRest.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      }
    }
  }
};

export const StorageSkuListResult: msRest.CompositeMapper = {
  serializedName: "StorageSkuListResult",
  type: {
    name: "Composite",
    className: "StorageSkuListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Sku"
            }
          }
        }
      }
    }
  }
};

export const StorageAccountListResult: msRest.CompositeMapper = {
  serializedName: "StorageAccountListResult",
  type: {
    name: "Composite",
    className: "StorageAccountListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageAccount"
            }
          }
        }
      }
    }
  }
};

export const UsageListResult: msRest.CompositeMapper = {
  serializedName: "UsageListResult",
  type: {
    name: "Composite",
    className: "UsageListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Usage"
            }
          }
        }
      }
    }
  }
};
