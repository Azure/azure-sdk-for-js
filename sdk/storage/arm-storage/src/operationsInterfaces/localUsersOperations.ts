/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  LocalUser,
  LocalUsersListOptionalParams,
  LocalUsersGetOptionalParams,
  LocalUsersGetResponse,
  LocalUsersCreateOrUpdateOptionalParams,
  LocalUsersCreateOrUpdateResponse,
  LocalUsersDeleteOptionalParams,
  LocalUsersListKeysOptionalParams,
  LocalUsersListKeysResponse,
  LocalUsersRegeneratePasswordOptionalParams,
  LocalUsersRegeneratePasswordResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a LocalUsersOperations. */
export interface LocalUsersOperations {
  /**
   * List the local users associated with the storage account.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
   *                    only.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    accountName: string,
    options?: LocalUsersListOptionalParams
  ): PagedAsyncIterableIterator<LocalUser>;
  /**
   * Get the local user of the storage account by username.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
   *                    only.
   * @param username The name of local user. The username must contain lowercase letters and numbers
   *                 only. It must be unique only within the storage account.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    username: string,
    options?: LocalUsersGetOptionalParams
  ): Promise<LocalUsersGetResponse>;
  /**
   * Create or update the properties of a local user associated with the storage account
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
   *                    only.
   * @param username The name of local user. The username must contain lowercase letters and numbers
   *                 only. It must be unique only within the storage account.
   * @param properties The local user associated with a storage account.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    accountName: string,
    username: string,
    properties: LocalUser,
    options?: LocalUsersCreateOrUpdateOptionalParams
  ): Promise<LocalUsersCreateOrUpdateResponse>;
  /**
   * Deletes the local user associated with the specified storage account.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
   *                    only.
   * @param username The name of local user. The username must contain lowercase letters and numbers
   *                 only. It must be unique only within the storage account.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    accountName: string,
    username: string,
    options?: LocalUsersDeleteOptionalParams
  ): Promise<void>;
  /**
   * List SSH authorized keys and shared key of the local user.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
   *                    only.
   * @param username The name of local user. The username must contain lowercase letters and numbers
   *                 only. It must be unique only within the storage account.
   * @param options The options parameters.
   */
  listKeys(
    resourceGroupName: string,
    accountName: string,
    username: string,
    options?: LocalUsersListKeysOptionalParams
  ): Promise<LocalUsersListKeysResponse>;
  /**
   * Regenerate the local user SSH password.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
   *                    only.
   * @param username The name of local user. The username must contain lowercase letters and numbers
   *                 only. It must be unique only within the storage account.
   * @param options The options parameters.
   */
  regeneratePassword(
    resourceGroupName: string,
    accountName: string,
    username: string,
    options?: LocalUsersRegeneratePasswordOptionalParams
  ): Promise<LocalUsersRegeneratePasswordResponse>;
}
