/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Result of the request to list Storage operations. It contains a list of operations and a URL link to get the next set of results. */
export interface OperationListResult {
  /** List of Storage operations supported by the Storage resource provider. */
  value?: Operation[];
}

/** Storage REST API operation definition. */
export interface Operation {
  /** Operation name: {provider}/{resource}/{operation} */
  name?: string;
  /** Display metadata associated with the operation. */
  display?: OperationDisplay;
  /** The origin of operations. */
  origin?: string;
  /** One property of operation, include metric specifications. */
  serviceSpecification?: ServiceSpecification;
}

/** Display metadata associated with the operation. */
export interface OperationDisplay {
  /** Service provider: Microsoft Storage. */
  provider?: string;
  /** Resource on which the operation is performed etc. */
  resource?: string;
  /** Type of operation: get, read, delete, etc. */
  operation?: string;
  /** Description of the operation. */
  description?: string;
}

/** One property of operation, include metric specifications. */
export interface ServiceSpecification {
  /** Metric specifications of operation. */
  metricSpecifications?: MetricSpecification[];
}

/** Metric specification of operation. */
export interface MetricSpecification {
  /** Name of metric specification. */
  name?: string;
  /** Display name of metric specification. */
  displayName?: string;
  /** Display description of metric specification. */
  displayDescription?: string;
  /** Unit could be Bytes or Count. */
  unit?: string;
  /** Dimensions of blobs, including blob type and access tier. */
  dimensions?: Dimension[];
  /** Aggregation type could be Average. */
  aggregationType?: string;
  /** The property to decide fill gap with zero or not. */
  fillGapWithZero?: boolean;
  /** The category this metric specification belong to, could be Capacity. */
  category?: string;
  /** Account Resource Id. */
  resourceIdDimensionNameOverride?: string;
}

/** Dimension of blobs, possibly be blob type or access tier. */
export interface Dimension {
  /** Display name of dimension. */
  name?: string;
  /** Display name of dimension. */
  displayName?: string;
}

/** The response from the List Storage SKUs operation. */
export interface StorageSkuListResult {
  /**
   * Get the list result of storage SKUs and their properties.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: SkuInformation[];
}

/** Storage SKU and its properties */
export interface SkuInformation {
  /** The SKU name. Required for account creation; optional for update. Note that in older versions, SKU name was called accountType. */
  name: SkuName;
  /**
   * The SKU tier. This is based on the SKU name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tier?: SkuTier;
  /**
   * The type of the resource, usually it is 'storageAccounts'.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceType?: string;
  /**
   * Indicates the type of storage account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly kind?: Kind;
  /**
   * The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly locations?: string[];
  /**
   * The capability information in the specified SKU, including file encryption, network ACLs, change notification, etc.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly capabilities?: SKUCapability[];
  /** The restrictions because of which SKU cannot be used. This is empty if there are no restrictions. */
  restrictions?: Restriction[];
}

/** The capability information in the specified SKU, including file encryption, network ACLs, change notification, etc. */
export interface SKUCapability {
  /**
   * The name of capability, The capability information in the specified SKU, including file encryption, network ACLs, change notification, etc.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * A string value to indicate states of given capability. Possibly 'true' or 'false'.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: string;
}

/** The restriction because of which SKU cannot be used. */
export interface Restriction {
  /**
   * The type of restrictions. As of now only possible value for this is location.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly values?: string[];
  /** The reason for the restriction. As of now this can be "QuotaId" or "NotAvailableForSubscription". Quota Id is set when the SKU has requiredQuotas parameter as the subscription does not belong to that quota. The "NotAvailableForSubscription" is related to capacity at DC. */
  reasonCode?: ReasonCode;
}

/** The parameters used to check the availability of the storage account name. */
export interface StorageAccountCheckNameAvailabilityParameters {
  /** The storage account name. */
  name: string;
  /** The type of resource, Microsoft.Storage/storageAccounts */
  type: "Microsoft.Storage/storageAccounts";
}

/** The CheckNameAvailability operation response. */
export interface CheckNameAvailabilityResult {
  /**
   * Gets a boolean value that indicates whether the name is available for you to use. If true, the name is available. If false, the name has already been taken or is invalid and cannot be used.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nameAvailable?: boolean;
  /**
   * Gets the reason that a storage account name could not be used. The Reason element is only returned if NameAvailable is false.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly reason?: Reason;
  /**
   * Gets an error message explaining the Reason value in more detail.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
}

/** The parameters used when creating a storage account. */
export interface StorageAccountCreateParameters {
  /** Required. Gets or sets the SKU name. */
  sku: Sku;
  /** Required. Indicates the type of storage account. */
  kind: Kind;
  /** Required. Gets or sets the location of the resource. This will be one of the supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.). The geo region of a resource cannot be changed once it is created, but if an identical geo region is specified on update, the request will succeed. */
  location: string;
  /** Optional. Set the extended location of the resource. If not set, the storage account will be created in Azure main region. Otherwise it will be created in the specified extended location */
  extendedLocation?: ExtendedLocation;
  /** Gets or sets a list of key value pairs that describe the resource. These tags can be used for viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key with a length no greater than 128 characters and a value with a length no greater than 256 characters. */
  tags?: { [propertyName: string]: string };
  /** The identity of the resource. */
  identity?: Identity;
  /** Restrict copy to and from Storage Accounts within an AAD tenant or with Private Links to the same VNet. */
  allowedCopyScope?: AllowedCopyScope;
  /** Allow or disallow public network access to Storage Account. Value is optional but if passed in, must be 'Enabled' or 'Disabled'. */
  publicNetworkAccess?: PublicNetworkAccess;
  /** SasPolicy assigned to the storage account. */
  sasPolicy?: SasPolicy;
  /** KeyPolicy assigned to the storage account. */
  keyPolicy?: KeyPolicy;
  /** User domain assigned to the storage account. Name is the CNAME source. Only one custom domain is supported per storage account at this time. To clear the existing custom domain, use an empty string for the custom domain name property. */
  customDomain?: CustomDomain;
  /** Encryption settings to be used for server-side encryption for the storage account. */
  encryption?: Encryption;
  /** Network rule set */
  networkRuleSet?: NetworkRuleSet;
  /** Required for storage accounts where kind = BlobStorage. The access tier is used for billing. The 'Premium' access tier is the default value for premium block blobs storage account type and it cannot be changed for the premium block blobs storage account type. */
  accessTier?: AccessTier;
  /** Provides the identity based authentication settings for Azure Files. */
  azureFilesIdentityBasedAuthentication?: AzureFilesIdentityBasedAuthentication;
  /** Allows https traffic only to storage service if sets to true. The default value is true since API version 2019-04-01. */
  enableHttpsTrafficOnly?: boolean;
  /** Enables Secure File Transfer Protocol, if set to true */
  isSftpEnabled?: boolean;
  /** Enables local users feature, if set to true */
  isLocalUserEnabled?: boolean;
  /** Account HierarchicalNamespace enabled if sets to true. */
  isHnsEnabled?: boolean;
  /** Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled. */
  largeFileSharesState?: LargeFileSharesState;
  /** Maintains information about the network routing choice opted by the user for data transfer */
  routingPreference?: RoutingPreference;
  /** Allow or disallow public access to all blobs or containers in the storage account. The default interpretation is true for this property. */
  allowBlobPublicAccess?: boolean;
  /** Set the minimum TLS version to be permitted on requests to storage. The default interpretation is TLS 1.0 for this property. */
  minimumTlsVersion?: MinimumTlsVersion;
  /** Indicates whether the storage account permits requests to be authorized with the account access key via Shared Key. If false, then all requests, including shared access signatures, must be authorized with Azure Active Directory (Azure AD). The default value is null, which is equivalent to true. */
  allowSharedKeyAccess?: boolean;
  /** NFS 3.0 protocol support enabled if set to true. */
  enableNfsV3?: boolean;
  /** Allow or disallow cross AAD tenant object replication. The default interpretation is true for this property. */
  allowCrossTenantReplication?: boolean;
  /** A boolean flag which indicates whether the default authentication is OAuth or not. The default interpretation is false for this property. */
  defaultToOAuthAuthentication?: boolean;
  /** The property is immutable and can only be set to true at the account creation time. When set to true, it enables object level immutability for all the new containers in the account by default. */
  immutableStorageWithVersioning?: ImmutableStorageAccount;
  /** Allows you to specify the type of endpoint. Set this to AzureDNSZone to create a large number of accounts in a single subscription, which creates accounts in an Azure DNS Zone and the endpoint URL will have an alphanumeric DNS Zone identifier. */
  dnsEndpointType?: DnsEndpointType;
}

/** The SKU of the storage account. */
export interface Sku {
  /** The SKU name. Required for account creation; optional for update. Note that in older versions, SKU name was called accountType. */
  name: SkuName;
  /**
   * The SKU tier. This is based on the SKU name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tier?: SkuTier;
}

/** The complex type of the extended location. */
export interface ExtendedLocation {
  /** The name of the extended location. */
  name?: string;
  /** The type of the extended location. */
  type?: ExtendedLocationTypes;
}

/** Identity for the resource. */
export interface Identity {
  /**
   * The principal ID of resource identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant ID of resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** The identity type. */
  type: IdentityType;
  /** Gets or sets a list of key value pairs that describe the set of User Assigned identities that will be used with this storage account. The key is the ARM resource identifier of the identity. Only 1 User Assigned identity is permitted here. */
  userAssignedIdentities?: { [propertyName: string]: UserAssignedIdentity };
}

/** UserAssignedIdentity for the resource. */
export interface UserAssignedIdentity {
  /**
   * The principal ID of the identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The client ID of the identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clientId?: string;
}

/** SasPolicy assigned to the storage account. */
export interface SasPolicy {
  /** The SAS expiration period, DD.HH:MM:SS. */
  sasExpirationPeriod: string;
  /** The SAS expiration action. Can only be Log. */
  expirationAction: ExpirationAction;
}

/** KeyPolicy assigned to the storage account. */
export interface KeyPolicy {
  /** The key expiration period in days. */
  keyExpirationPeriodInDays: number;
}

/** The custom domain assigned to this storage account. This can be set via Update. */
export interface CustomDomain {
  /** Gets or sets the custom domain name assigned to the storage account. Name is the CNAME source. */
  name: string;
  /** Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates. */
  useSubDomainName?: boolean;
}

/** The encryption settings on the storage account. */
export interface Encryption {
  /** List of services which support encryption. */
  services?: EncryptionServices;
  /** The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault */
  keySource: KeySource;
  /** A boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest. */
  requireInfrastructureEncryption?: boolean;
  /** Properties provided by key vault. */
  keyVaultProperties?: KeyVaultProperties;
  /** The identity to be used with service-side encryption at rest. */
  encryptionIdentity?: EncryptionIdentity;
}

/** A list of services that support encryption. */
export interface EncryptionServices {
  /** The encryption function of the blob storage service. */
  blob?: EncryptionService;
  /** The encryption function of the file storage service. */
  file?: EncryptionService;
  /** The encryption function of the table storage service. */
  table?: EncryptionService;
  /** The encryption function of the queue storage service. */
  queue?: EncryptionService;
}

/** A service that allows server-side encryption to be used. */
export interface EncryptionService {
  /** A boolean indicating whether or not the service encrypts the data as it is stored. Encryption at rest is enabled by default today and cannot be disabled. */
  enabled?: boolean;
  /**
   * Gets a rough estimate of the date/time when the encryption was last enabled by the user. Data is encrypted at rest by default today and cannot be disabled.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastEnabledTime?: Date;
  /** Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption key will be used. 'Service' key type implies that a default service key is used. */
  keyType?: KeyType;
}

/** Properties of key vault. */
export interface KeyVaultProperties {
  /** The name of KeyVault key. */
  keyName?: string;
  /** The version of KeyVault key. */
  keyVersion?: string;
  /** The Uri of KeyVault. */
  keyVaultUri?: string;
  /**
   * The object identifier of the current versioned Key Vault Key in use.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly currentVersionedKeyIdentifier?: string;
  /**
   * Timestamp of last rotation of the Key Vault Key.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastKeyRotationTimestamp?: Date;
  /**
   * This is a read only property that represents the expiration time of the current version of the customer managed key used for encryption.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly currentVersionedKeyExpirationTimestamp?: Date;
}

/** Encryption identity for the storage account. */
export interface EncryptionIdentity {
  /** Resource identifier of the UserAssigned identity to be associated with server-side encryption on the storage account. */
  encryptionUserAssignedIdentity?: string;
  /** ClientId of the multi-tenant application to be used in conjunction with the user-assigned identity for cross-tenant customer-managed-keys server-side encryption on the storage account. */
  encryptionFederatedIdentityClientId?: string;
}

/** Network rule set */
export interface NetworkRuleSet {
  /** Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, "Logging, Metrics"), or None to bypass none of those traffics. */
  bypass?: Bypass;
  /** Sets the resource access rules */
  resourceAccessRules?: ResourceAccessRule[];
  /** Sets the virtual network rules */
  virtualNetworkRules?: VirtualNetworkRule[];
  /** Sets the IP ACL rules */
  ipRules?: IPRule[];
  /** Specifies the default action of allow or deny when no other rules match. */
  defaultAction: DefaultAction;
}

/** Resource Access Rule. */
export interface ResourceAccessRule {
  /** Tenant Id */
  tenantId?: string;
  /** Resource Id */
  resourceId?: string;
}

/** Virtual Network rule. */
export interface VirtualNetworkRule {
  /** Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}. */
  virtualNetworkResourceId: string;
  /** The action of virtual network rule. */
  action?: "Allow";
  /** Gets the state of virtual network rule. */
  state?: State;
}

/** IP rule with specific IP or IP range in CIDR format. */
export interface IPRule {
  /** Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed. */
  iPAddressOrRange: string;
  /** The action of IP ACL rule. */
  action?: "Allow";
}

/** Settings for Azure Files identity based authentication. */
export interface AzureFilesIdentityBasedAuthentication {
  /** Indicates the directory service used. */
  directoryServiceOptions: DirectoryServiceOptions;
  /** Required if choose AD. */
  activeDirectoryProperties?: ActiveDirectoryProperties;
  /** Default share permission for users using Kerberos authentication if RBAC role is not assigned. */
  defaultSharePermission?: DefaultSharePermission;
}

/** Settings properties for Active Directory (AD). */
export interface ActiveDirectoryProperties {
  /** Specifies the primary domain that the AD DNS server is authoritative for. */
  domainName: string;
  /** Specifies the NetBIOS domain name. */
  netBiosDomainName: string;
  /** Specifies the Active Directory forest to get. */
  forestName: string;
  /** Specifies the domain GUID. */
  domainGuid: string;
  /** Specifies the security identifier (SID). */
  domainSid: string;
  /** Specifies the security identifier (SID) for Azure Storage. */
  azureStorageSid: string;
  /** Specifies the Active Directory SAMAccountName for Azure Storage. */
  samAccountName?: string;
  /** Specifies the Active Directory account type for Azure Storage. */
  accountType?: ActiveDirectoryPropertiesAccountType;
}

/** Routing preference defines the type of network, either microsoft or internet routing to be used to deliver the user data, the default option is microsoft routing */
export interface RoutingPreference {
  /** Routing Choice defines the kind of network routing opted by the user. */
  routingChoice?: RoutingChoice;
  /** A boolean flag which indicates whether microsoft routing storage endpoints are to be published */
  publishMicrosoftEndpoints?: boolean;
  /** A boolean flag which indicates whether internet routing storage endpoints are to be published */
  publishInternetEndpoints?: boolean;
}

/** This property enables and defines account-level immutability. Enabling the feature auto-enables Blob Versioning. */
export interface ImmutableStorageAccount {
  /** A boolean flag which enables account-level immutability. All the containers under such an account have object-level immutability enabled by default. */
  enabled?: boolean;
  /** Specifies the default account-level immutability policy which is inherited and applied to objects that do not possess an explicit immutability policy at the object level. The object-level immutability policy has higher precedence than the container-level immutability policy, which has a higher precedence than the account-level immutability policy. */
  immutabilityPolicy?: AccountImmutabilityPolicyProperties;
}

/** This defines account-level immutability policy properties. */
export interface AccountImmutabilityPolicyProperties {
  /** The immutability period for the blobs in the container since the policy creation, in days. */
  immutabilityPeriodSinceCreationInDays?: number;
  /** The ImmutabilityPolicy state defines the mode of the policy. Disabled state disables the policy, Unlocked state allows increase and decrease of immutability retention time and also allows toggling allowProtectedAppendWrites property, Locked state only allows the increase of the immutability retention time. A policy can only be created in a Disabled or Unlocked state and can be toggled between the two states. Only a policy in an Unlocked state can transition to a Locked state which cannot be reverted. */
  state?: AccountImmutabilityPolicyState;
  /** This property can only be changed for disabled and unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. */
  allowProtectedAppendWrites?: boolean;
}

/** The URIs that are used to perform a retrieval of a public blob, queue, table, web or dfs object. */
export interface Endpoints {
  /**
   * Gets the blob endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly blob?: string;
  /**
   * Gets the queue endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly queue?: string;
  /**
   * Gets the table endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly table?: string;
  /**
   * Gets the file endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly file?: string;
  /**
   * Gets the web endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly web?: string;
  /**
   * Gets the dfs endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dfs?: string;
  /** Gets the microsoft routing storage endpoints. */
  microsoftEndpoints?: StorageAccountMicrosoftEndpoints;
  /** Gets the internet routing storage endpoints */
  internetEndpoints?: StorageAccountInternetEndpoints;
}

/** The URIs that are used to perform a retrieval of a public blob, queue, table, web or dfs object via a microsoft routing endpoint. */
export interface StorageAccountMicrosoftEndpoints {
  /**
   * Gets the blob endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly blob?: string;
  /**
   * Gets the queue endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly queue?: string;
  /**
   * Gets the table endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly table?: string;
  /**
   * Gets the file endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly file?: string;
  /**
   * Gets the web endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly web?: string;
  /**
   * Gets the dfs endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dfs?: string;
}

/** The URIs that are used to perform a retrieval of a public blob, file, web or dfs object via a internet routing endpoint. */
export interface StorageAccountInternetEndpoints {
  /**
   * Gets the blob endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly blob?: string;
  /**
   * Gets the file endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly file?: string;
  /**
   * Gets the web endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly web?: string;
  /**
   * Gets the dfs endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dfs?: string;
}

/** Storage account keys creation time. */
export interface KeyCreationTime {
  key1?: Date;
  key2?: Date;
}

/** Statistics related to replication for storage account's Blob, Table, Queue and File services. It is only available when geo-redundant replication is enabled for the storage account. */
export interface GeoReplicationStats {
  /**
   * The status of the secondary location. Possible values are: - Live: Indicates that the secondary location is active and operational. - Bootstrap: Indicates initial synchronization from the primary location to the secondary location is in progress.This typically occurs when replication is first enabled. - Unavailable: Indicates that the secondary location is temporarily unavailable.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: GeoReplicationStatus;
  /**
   * All primary writes preceding this UTC date/time value are guaranteed to be available for read operations. Primary writes following this point in time may or may not be available for reads. Element may be default value if value of LastSyncTime is not available, this can happen if secondary is offline or we are in bootstrap.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastSyncTime?: Date;
  /**
   * A boolean flag which indicates whether or not account failover is supported for the account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly canFailover?: boolean;
}

/** The Private Endpoint resource. */
export interface PrivateEndpoint {
  /**
   * The ARM identifier for Private Endpoint
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
}

/** A collection of information about the state of the connection between service consumer and provider. */
export interface PrivateLinkServiceConnectionState {
  /** Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service. */
  status?: PrivateEndpointServiceConnectionStatus;
  /** The reason for approval/rejection of the connection. */
  description?: string;
  /** A message indicating if changes on the service provider require any updates on the consumer. */
  actionRequired?: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** Blob restore status. */
export interface BlobRestoreStatus {
  /**
   * The status of blob restore progress. Possible values are: - InProgress: Indicates that blob restore is ongoing. - Complete: Indicates that blob restore has been completed successfully. - Failed: Indicates that blob restore is failed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: BlobRestoreProgressStatus;
  /**
   * Failure reason when blob restore is failed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly failureReason?: string;
  /**
   * Id for tracking blob restore request.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly restoreId?: string;
  /**
   * Blob restore request parameters.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly parameters?: BlobRestoreParameters;
}

/** Blob restore parameters */
export interface BlobRestoreParameters {
  /** Restore blob to the specified time. */
  timeToRestore: Date;
  /** Blob ranges to restore. */
  blobRanges: BlobRestoreRange[];
}

/** Blob range */
export interface BlobRestoreRange {
  /** Blob start range. This is inclusive. Empty means account start. */
  startRange: string;
  /** Blob end range. This is exclusive. Empty means account end. */
  endRange: string;
}

/** This defines the sku conversion status object for asynchronous sku conversions. */
export interface StorageAccountSkuConversionStatus {
  /**
   * This property indicates the current sku conversion status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly skuConversionStatus?: SkuConversionStatus;
  /** This property represents the target sku name to which the account sku is being converted asynchronously. */
  targetSkuName?: SkuName;
  /**
   * This property represents the sku conversion start time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startTime?: string;
  /**
   * This property represents the sku conversion end time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endTime?: string;
}

/** The parameters that can be provided when updating the storage account properties. */
export interface StorageAccountUpdateParameters {
  /** Gets or sets the SKU name. Note that the SKU name cannot be updated to Standard_ZRS, Premium_LRS or Premium_ZRS, nor can accounts of those SKU names be updated to any other value. */
  sku?: Sku;
  /** Gets or sets a list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater in length than 128 characters and a value no greater in length than 256 characters. */
  tags?: { [propertyName: string]: string };
  /** The identity of the resource. */
  identity?: Identity;
  /** Optional. Indicates the type of storage account. Currently only StorageV2 value supported by server. */
  kind?: Kind;
  /** Custom domain assigned to the storage account by the user. Name is the CNAME source. Only one custom domain is supported per storage account at this time. To clear the existing custom domain, use an empty string for the custom domain name property. */
  customDomain?: CustomDomain;
  /** Not applicable. Azure Storage encryption at rest is enabled by default for all storage accounts and cannot be disabled. */
  encryption?: Encryption;
  /** SasPolicy assigned to the storage account. */
  sasPolicy?: SasPolicy;
  /** KeyPolicy assigned to the storage account. */
  keyPolicy?: KeyPolicy;
  /** Required for storage accounts where kind = BlobStorage. The access tier is used for billing. The 'Premium' access tier is the default value for premium block blobs storage account type and it cannot be changed for the premium block blobs storage account type. */
  accessTier?: AccessTier;
  /** Provides the identity based authentication settings for Azure Files. */
  azureFilesIdentityBasedAuthentication?: AzureFilesIdentityBasedAuthentication;
  /** Allows https traffic only to storage service if sets to true. */
  enableHttpsTrafficOnly?: boolean;
  /** Enables Secure File Transfer Protocol, if set to true */
  isSftpEnabled?: boolean;
  /** Enables local users feature, if set to true */
  isLocalUserEnabled?: boolean;
  /** Network rule set */
  networkRuleSet?: NetworkRuleSet;
  /** Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled. */
  largeFileSharesState?: LargeFileSharesState;
  /** Maintains information about the network routing choice opted by the user for data transfer */
  routingPreference?: RoutingPreference;
  /** Allow or disallow public access to all blobs or containers in the storage account. The default interpretation is true for this property. */
  allowBlobPublicAccess?: boolean;
  /** Set the minimum TLS version to be permitted on requests to storage. The default interpretation is TLS 1.0 for this property. */
  minimumTlsVersion?: MinimumTlsVersion;
  /** Indicates whether the storage account permits requests to be authorized with the account access key via Shared Key. If false, then all requests, including shared access signatures, must be authorized with Azure Active Directory (Azure AD). The default value is null, which is equivalent to true. */
  allowSharedKeyAccess?: boolean;
  /** Allow or disallow cross AAD tenant object replication. The default interpretation is true for this property. */
  allowCrossTenantReplication?: boolean;
  /** A boolean flag which indicates whether the default authentication is OAuth or not. The default interpretation is false for this property. */
  defaultToOAuthAuthentication?: boolean;
  /** Allow or disallow public network access to Storage Account. Value is optional but if passed in, must be 'Enabled' or 'Disabled'. */
  publicNetworkAccess?: PublicNetworkAccess;
  /** The property is immutable and can only be set to true at the account creation time. When set to true, it enables object level immutability for all the containers in the account by default. */
  immutableStorageWithVersioning?: ImmutableStorageAccount;
  /** Restrict copy to and from Storage Accounts within an AAD tenant or with Private Links to the same VNet. */
  allowedCopyScope?: AllowedCopyScope;
  /** Allows you to specify the type of endpoint. Set this to AzureDNSZone to create a large number of accounts in a single subscription, which creates accounts in an Azure DNS Zone and the endpoint URL will have an alphanumeric DNS Zone identifier. */
  dnsEndpointType?: DnsEndpointType;
}

/** The response from the List Deleted Accounts operation. */
export interface DeletedAccountListResult {
  /**
   * Gets the list of deleted accounts and their properties.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: DeletedAccount[];
  /**
   * Request URL that can be used to query next page of deleted accounts. Returned when total number of requested deleted accounts exceed maximum page size.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** An error response from the storage resource provider. */
export interface ErrorResponse {
  /** Azure Storage Resource Provider error response body. */
  error?: ErrorResponseBody;
}

/** Error response body contract. */
export interface ErrorResponseBody {
  /** An identifier for the error. Codes are invariant and are intended to be consumed programmatically. */
  code?: string;
  /** A message describing the error, intended to be suitable for display in a user interface. */
  message?: string;
}

/** The response from the List Storage Accounts operation. */
export interface StorageAccountListResult {
  /**
   * Gets the list of storage accounts and their properties.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: StorageAccount[];
  /**
   * Request URL that can be used to query next page of storage accounts. Returned when total number of requested storage accounts exceed maximum page size.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The response from the ListKeys operation. */
export interface StorageAccountListKeysResult {
  /**
   * Gets the list of storage account keys and their properties for the specified storage account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly keys?: StorageAccountKey[];
}

/** An access key for the storage account. */
export interface StorageAccountKey {
  /**
   * Name of the key.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly keyName?: string;
  /**
   * Base 64-encoded value of the key.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: string;
  /**
   * Permissions for the key -- read-only or full permissions.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly permissions?: KeyPermission;
  /**
   * Creation time of the key, in round trip date format.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly creationTime?: Date;
}

/** The parameters used to regenerate the storage account key. */
export interface StorageAccountRegenerateKeyParameters {
  /** The name of storage keys that want to be regenerated, possible values are key1, key2, kerb1, kerb2. */
  keyName: string;
}

/** The response from the List Usages operation. */
export interface UsageListResult {
  /** Gets or sets the list of Storage Resource Usages. */
  value?: Usage[];
}

/** Describes Storage Resource Usage. */
export interface Usage {
  /**
   * Gets the unit of measurement.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly unit?: UsageUnit;
  /**
   * Gets the current count of the allocated resources in the subscription.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly currentValue?: number;
  /**
   * Gets the maximum count of the resources that can be allocated in the subscription.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly limit?: number;
  /**
   * Gets the name of the type of usage.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: UsageName;
}

/** The usage names that can be used; currently limited to StorageAccount. */
export interface UsageName {
  /**
   * Gets a string describing the resource name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: string;
  /**
   * Gets a localized string describing the resource name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly localizedValue?: string;
}

/** The parameters to list SAS credentials of a storage account. */
export interface AccountSasParameters {
  /** The signed services accessible with the account SAS. Possible values include: Blob (b), Queue (q), Table (t), File (f). */
  services: Services;
  /** The signed resource types that are accessible with the account SAS. Service (s): Access to service-level APIs; Container (c): Access to container-level APIs; Object (o): Access to object-level APIs for blobs, queue messages, table entities, and files. */
  resourceTypes: SignedResourceTypes;
  /** The signed permissions for the account SAS. Possible values include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p). */
  permissions: Permissions;
  /** An IP address or a range of IP addresses from which to accept requests. */
  iPAddressOrRange?: string;
  /** The protocol permitted for a request made with the account SAS. */
  protocols?: HttpProtocol;
  /** The time at which the SAS becomes valid. */
  sharedAccessStartTime?: Date;
  /** The time at which the shared access signature becomes invalid. */
  sharedAccessExpiryTime: Date;
  /** The key to sign the account SAS token with. */
  keyToSign?: string;
}

/** The List SAS credentials operation response. */
export interface ListAccountSasResponse {
  /**
   * List SAS credentials of storage account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly accountSasToken?: string;
}

/** The parameters to list service SAS credentials of a specific resource. */
export interface ServiceSasParameters {
  /** The canonical path to the signed resource. */
  canonicalizedResource: string;
  /** The signed services accessible with the service SAS. Possible values include: Blob (b), Container (c), File (f), Share (s). */
  resource?: SignedResource;
  /** The signed permissions for the service SAS. Possible values include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p). */
  permissions?: Permissions;
  /** An IP address or a range of IP addresses from which to accept requests. */
  iPAddressOrRange?: string;
  /** The protocol permitted for a request made with the account SAS. */
  protocols?: HttpProtocol;
  /** The time at which the SAS becomes valid. */
  sharedAccessStartTime?: Date;
  /** The time at which the shared access signature becomes invalid. */
  sharedAccessExpiryTime?: Date;
  /** A unique value up to 64 characters in length that correlates to an access policy specified for the container, queue, or table. */
  identifier?: string;
  /** The start of partition key. */
  partitionKeyStart?: string;
  /** The end of partition key. */
  partitionKeyEnd?: string;
  /** The start of row key. */
  rowKeyStart?: string;
  /** The end of row key. */
  rowKeyEnd?: string;
  /** The key to sign the account SAS token with. */
  keyToSign?: string;
  /** The response header override for cache control. */
  cacheControl?: string;
  /** The response header override for content disposition. */
  contentDisposition?: string;
  /** The response header override for content encoding. */
  contentEncoding?: string;
  /** The response header override for content language. */
  contentLanguage?: string;
  /** The response header override for content type. */
  contentType?: string;
}

/** The List service SAS credentials operation response. */
export interface ListServiceSasResponse {
  /**
   * List service SAS credentials of specific resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly serviceSasToken?: string;
}

/** The Storage Account ManagementPolicies Rules. See more details in: https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts. */
export interface ManagementPolicySchema {
  /** The Storage Account ManagementPolicies Rules. See more details in: https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts. */
  rules: ManagementPolicyRule[];
}

/** An object that wraps the Lifecycle rule. Each rule is uniquely defined by name. */
export interface ManagementPolicyRule {
  /** Rule is enabled if set to true. */
  enabled?: boolean;
  /** A rule name can contain any combination of alpha numeric characters. Rule name is case-sensitive. It must be unique within a policy. */
  name: string;
  /** The valid value is Lifecycle */
  type: RuleType;
  /** An object that defines the Lifecycle rule. */
  definition: ManagementPolicyDefinition;
}

/** An object that defines the Lifecycle rule. Each definition is made up with a filters set and an actions set. */
export interface ManagementPolicyDefinition {
  /** An object that defines the action set. */
  actions: ManagementPolicyAction;
  /** An object that defines the filter set. */
  filters?: ManagementPolicyFilter;
}

/** Actions are applied to the filtered blobs when the execution condition is met. */
export interface ManagementPolicyAction {
  /** The management policy action for base blob */
  baseBlob?: ManagementPolicyBaseBlob;
  /** The management policy action for snapshot */
  snapshot?: ManagementPolicySnapShot;
  /** The management policy action for version */
  version?: ManagementPolicyVersion;
}

/** Management policy action for base blob. */
export interface ManagementPolicyBaseBlob {
  /** The function to tier blobs to cool storage. Support blobs currently at Hot tier */
  tierToCool?: DateAfterModification;
  /** The function to tier blobs to archive storage. Support blobs currently at Hot or Cool tier */
  tierToArchive?: DateAfterModification;
  /** The function to delete the blob */
  delete?: DateAfterModification;
  /** This property enables auto tiering of a blob from cool to hot on a blob access. This property requires tierToCool.daysAfterLastAccessTimeGreaterThan. */
  enableAutoTierToHotFromCool?: boolean;
}

/** Object to define the base blob action conditions. Properties daysAfterModificationGreaterThan, daysAfterLastAccessTimeGreaterThan and daysAfterCreationGreaterThan are mutually exclusive. The daysAfterLastTierChangeGreaterThan property is only applicable for tierToArchive actions which requires daysAfterModificationGreaterThan to be set, also it cannot be used in conjunction with daysAfterLastAccessTimeGreaterThan or daysAfterCreationGreaterThan. */
export interface DateAfterModification {
  /** Value indicating the age in days after last modification */
  daysAfterModificationGreaterThan?: number;
  /** Value indicating the age in days after last blob access. This property can only be used in conjunction with last access time tracking policy */
  daysAfterLastAccessTimeGreaterThan?: number;
  /** Value indicating the age in days after last blob tier change time. This property is only applicable for tierToArchive actions and requires daysAfterModificationGreaterThan to be set for baseBlobs based actions. The blob will be archived if both the conditions are satisfied. */
  daysAfterLastTierChangeGreaterThan?: number;
  /** Value indicating the age in days after blob creation. */
  daysAfterCreationGreaterThan?: number;
}

/** Management policy action for snapshot. */
export interface ManagementPolicySnapShot {
  /** The function to tier blob snapshot to cool storage. Support blob snapshot currently at Hot tier */
  tierToCool?: DateAfterCreation;
  /** The function to tier blob snapshot to archive storage. Support blob snapshot currently at Hot or Cool tier */
  tierToArchive?: DateAfterCreation;
  /** The function to delete the blob snapshot */
  delete?: DateAfterCreation;
}

/** Object to define snapshot and version action conditions. */
export interface DateAfterCreation {
  /** Value indicating the age in days after creation */
  daysAfterCreationGreaterThan: number;
  /** Value indicating the age in days after last blob tier change time. This property is only applicable for tierToArchive actions and requires daysAfterCreationGreaterThan to be set for snapshots and blob version based actions. The blob will be archived if both the conditions are satisfied. */
  daysAfterLastTierChangeGreaterThan?: number;
}

/** Management policy action for blob version. */
export interface ManagementPolicyVersion {
  /** The function to tier blob version to cool storage. Support blob version currently at Hot tier */
  tierToCool?: DateAfterCreation;
  /** The function to tier blob version to archive storage. Support blob version currently at Hot or Cool tier */
  tierToArchive?: DateAfterCreation;
  /** The function to delete the blob version */
  delete?: DateAfterCreation;
}

/** Filters limit rule actions to a subset of blobs within the storage account. If multiple filters are defined, a logical AND is performed on all filters. */
export interface ManagementPolicyFilter {
  /** An array of strings for prefixes to be match. */
  prefixMatch?: string[];
  /** An array of predefined enum values. Currently blockBlob supports all tiering and delete actions. Only delete actions are supported for appendBlob. */
  blobTypes: string[];
  /** An array of blob index tag based filters, there can be at most 10 tag filters */
  blobIndexMatch?: TagFilter[];
}

/** Blob index tag based filtering for blob objects */
export interface TagFilter {
  /** This is the filter tag name, it can have 1 - 128 characters */
  name: string;
  /** This is the comparison operator which is used for object comparison and filtering. Only == (equality operator) is currently supported */
  op: string;
  /** This is the filter tag value field used for tag based filtering, it can have 0 - 256 characters */
  value: string;
}

/** The storage account blob inventory policy rules. */
export interface BlobInventoryPolicySchema {
  /** Policy is enabled if set to true. */
  enabled: boolean;
  /**
   * Deprecated Property from API version 2021-04-01 onwards, the required destination container name must be specified at the rule level 'policy.rule.destination'
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly destination?: string;
  /** The valid value is Inventory */
  type: InventoryRuleType;
  /** The storage account blob inventory policy rules. The rule is applied when it is enabled. */
  rules: BlobInventoryPolicyRule[];
}

/** An object that wraps the blob inventory rule. Each rule is uniquely defined by name. */
export interface BlobInventoryPolicyRule {
  /** Rule is enabled when set to true. */
  enabled: boolean;
  /** A rule name can contain any combination of alpha numeric characters. Rule name is case-sensitive. It must be unique within a policy. */
  name: string;
  /** Container name where blob inventory files are stored. Must be pre-created. */
  destination: string;
  /** An object that defines the blob inventory policy rule. */
  definition: BlobInventoryPolicyDefinition;
}

/** An object that defines the blob inventory rule. */
export interface BlobInventoryPolicyDefinition {
  /** An object that defines the filter set. */
  filters?: BlobInventoryPolicyFilter;
  /** This is a required field, it specifies the format for the inventory files. */
  format: Format;
  /** This is a required field. This field is used to schedule an inventory formation. */
  schedule: Schedule;
  /** This is a required field. This field specifies the scope of the inventory created either at the blob or container level. */
  objectType: ObjectType;
  /** This is a required field. This field specifies the fields and properties of the object to be included in the inventory. The Schema field value 'Name' is always required. The valid values for this field for the 'Blob' definition.objectType include 'Name, Creation-Time, Last-Modified, Content-Length, Content-MD5, BlobType, AccessTier, AccessTierChangeTime, AccessTierInferred, Tags, Expiry-Time, hdi_isfolder, Owner, Group, Permissions, Acl, Snapshot, VersionId, IsCurrentVersion, Metadata, LastAccessTime, Tags, Etag, ContentType, ContentEncoding, ContentLanguage, ContentCRC64, CacheControl, ContentDisposition, LeaseStatus, LeaseState, LeaseDuration, ServerEncrypted, Deleted, DeletionId, DeletedTime, RemainingRetentionDays, ImmutabilityPolicyUntilDate, ImmutabilityPolicyMode, LegalHold, CopyId, CopyStatus, CopySource, CopyProgress, CopyCompletionTime, CopyStatusDescription, CustomerProvidedKeySha256, RehydratePriority, ArchiveStatus, XmsBlobSequenceNumber, EncryptionScope, IncrementalCopy, TagCount'. For Blob object type schema field value 'DeletedTime' is applicable only for Hns enabled accounts. The valid values for 'Container' definition.objectType include 'Name, Last-Modified, Metadata, LeaseStatus, LeaseState, LeaseDuration, PublicAccess, HasImmutabilityPolicy, HasLegalHold, Etag, DefaultEncryptionScope, DenyEncryptionScopeOverride, ImmutableStorageWithVersioningEnabled, Deleted, Version, DeletedTime, RemainingRetentionDays'. Schema field values 'Expiry-Time, hdi_isfolder, Owner, Group, Permissions, Acl, DeletionId' are valid only for Hns enabled accounts.Schema field values 'Tags, TagCount' are only valid for Non-Hns accounts. */
  schemaFields: string[];
}

/** An object that defines the blob inventory rule filter conditions. For 'Blob' definition.objectType all filter properties are applicable, 'blobTypes' is required and others are optional. For 'Container' definition.objectType only prefixMatch is applicable and is optional. */
export interface BlobInventoryPolicyFilter {
  /** An array of strings with maximum 10 blob prefixes to be included in the inventory. */
  prefixMatch?: string[];
  /** An array of strings with maximum 10 blob prefixes to be excluded from the inventory. */
  excludePrefix?: string[];
  /** An array of predefined enum values. Valid values include blockBlob, appendBlob, pageBlob. Hns accounts does not support pageBlobs. This field is required when definition.objectType property is set to 'Blob'. */
  blobTypes?: string[];
  /** Includes blob versions in blob inventory when value is set to true. The definition.schemaFields values 'VersionId and IsCurrentVersion' are required if this property is set to true, else they must be excluded. */
  includeBlobVersions?: boolean;
  /** Includes blob snapshots in blob inventory when value is set to true. The definition.schemaFields value 'Snapshot' is required if this property is set to true, else it must be excluded. */
  includeSnapshots?: boolean;
  /** For 'Container' definition.objectType the definition.schemaFields must include 'Deleted, Version, DeletedTime and RemainingRetentionDays'. For 'Blob' definition.objectType and HNS enabled storage accounts the definition.schemaFields must include 'DeletionId, Deleted, DeletedTime and RemainingRetentionDays' and for Hns disabled accounts the definition.schemaFields must include 'Deleted and RemainingRetentionDays', else it must be excluded. */
  includeDeleted?: boolean;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** An error response from the Storage service. */
export interface CloudError {
  /** An error response from the Storage service. */
  error?: CloudErrorBody;
}

/** An error response from the Storage service. */
export interface CloudErrorBody {
  /** An identifier for the error. Codes are invariant and are intended to be consumed programmatically. */
  code?: string;
  /** A message describing the error, intended to be suitable for display in a user interface. */
  message?: string;
  /** The target of the particular error. For example, the name of the property in error. */
  target?: string;
  /** A list of additional details about the error. */
  details?: CloudErrorBody[];
}

/** List of blob inventory policies returned. */
export interface ListBlobInventoryPolicy {
  /**
   * List of blob inventory policies.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: BlobInventoryPolicy[];
}

/** List of private endpoint connection associated with the specified storage account */
export interface PrivateEndpointConnectionListResult {
  /** Array of private endpoint connections */
  value?: PrivateEndpointConnection[];
}

/** A list of private link resources */
export interface PrivateLinkResourceListResult {
  /** Array of private link resources */
  value?: PrivateLinkResource[];
}

/** List storage account object replication policies. */
export interface ObjectReplicationPolicies {
  /** The replication policy between two storage accounts. */
  value?: ObjectReplicationPolicy[];
}

/** The replication policy rule between two containers. */
export interface ObjectReplicationPolicyRule {
  /** Rule Id is auto-generated for each new rule on destination account. It is required for put policy on source account. */
  ruleId?: string;
  /** Required. Source container name. */
  sourceContainer: string;
  /** Required. Destination container name. */
  destinationContainer: string;
  /** Optional. An object that defines the filter set. */
  filters?: ObjectReplicationPolicyFilter;
}

/** Filters limit replication to a subset of blobs within the storage account. A logical OR is performed on values in the filter. If multiple filters are defined, a logical AND is performed on all filters. */
export interface ObjectReplicationPolicyFilter {
  /** Optional. Filters the results to replicate only blobs whose names begin with the specified prefix. */
  prefixMatch?: string[];
  /** Blobs created after the time will be replicated to the destination. It must be in datetime format 'yyyy-MM-ddTHH:mm:ssZ'. Example: 2020-02-19T16:05:00Z */
  minCreationTime?: string;
}

/** List storage account local users. */
export interface LocalUsers {
  /** The local users associated with the storage account. */
  value?: LocalUser[];
}

export interface PermissionScope {
  /** The permissions for the local user. Possible values include: Read (r), Write (w), Delete (d), List (l), and Create (c). */
  permissions: string;
  /** The service used by the local user, e.g. blob, file. */
  service: string;
  /** The name of resource, normally the container name or the file share name, used by the local user. */
  resourceName: string;
}

export interface SshPublicKey {
  /** Optional. It is used to store the function/usage of the key */
  description?: string;
  /** Ssh public key base64 encoded. The format should be: '<keyType> <keyData>', e.g. ssh-rsa AAAABBBB */
  key?: string;
}

/** The Storage Account Local User keys. */
export interface LocalUserKeys {
  /** Optional, local user ssh authorized keys for SFTP. */
  sshAuthorizedKeys?: SshPublicKey[];
  /**
   * Auto generated by the server for SMB authentication.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sharedKey?: string;
}

/** The secrets of Storage Account Local User. */
export interface LocalUserRegeneratePasswordResult {
  /**
   * Auto generated password by the server for SSH authentication if hasSshPassword is set to true on the creation of local user.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sshPassword?: string;
}

/** The key vault properties for the encryption scope. This is a required field if encryption scope 'source' attribute is set to 'Microsoft.KeyVault'. */
export interface EncryptionScopeKeyVaultProperties {
  /** The object identifier for a key vault key object. When applied, the encryption scope will use the key referenced by the identifier to enable customer-managed key support on this encryption scope. */
  keyUri?: string;
  /**
   * The object identifier of the current versioned Key Vault Key in use.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly currentVersionedKeyIdentifier?: string;
  /**
   * Timestamp of last rotation of the Key Vault Key.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastKeyRotationTimestamp?: Date;
}

/** List of encryption scopes requested, and if paging is required, a URL to the next page of encryption scopes. */
export interface EncryptionScopeListResult {
  /**
   * List of encryption scopes requested.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: EncryptionScope[];
  /**
   * Request URL that can be used to query next page of encryption scopes. Returned when total number of requested encryption scopes exceeds the maximum page size.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

export interface BlobServiceItems {
  /**
   * List of blob services returned.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: BlobServiceProperties[];
}

/** Sets the CORS rules. You can include up to five CorsRule elements in the request. */
export interface CorsRules {
  /** The List of CORS rules. You can include up to five CorsRule elements in the request. */
  corsRules?: CorsRule[];
}

/** Specifies a CORS rule for the Blob service. */
export interface CorsRule {
  /** Required if CorsRule element is present. A list of origin domains that will be allowed via CORS, or "*" to allow all domains */
  allowedOrigins: string[];
  /** Required if CorsRule element is present. A list of HTTP methods that are allowed to be executed by the origin. */
  allowedMethods: CorsRuleAllowedMethodsItem[];
  /** Required if CorsRule element is present. The number of seconds that the client/browser should cache a preflight response. */
  maxAgeInSeconds: number;
  /** Required if CorsRule element is present. A list of response headers to expose to CORS clients. */
  exposedHeaders: string[];
  /** Required if CorsRule element is present. A list of headers allowed to be part of the cross-origin request. */
  allowedHeaders: string[];
}

/** The service properties for soft delete. */
export interface DeleteRetentionPolicy {
  /** Indicates whether DeleteRetentionPolicy is enabled. */
  enabled?: boolean;
  /** Indicates the number of days that the deleted item should be retained. The minimum specified value can be 1 and the maximum value can be 365. */
  days?: number;
  /** This property when set to true allows deletion of the soft deleted blob versions and snapshots. This property cannot be used blob restore policy. This property only applies to blob service and does not apply to containers or file share. */
  allowPermanentDelete?: boolean;
}

/** The blob service properties for change feed events. */
export interface ChangeFeed {
  /** Indicates whether change feed event logging is enabled for the Blob service. */
  enabled?: boolean;
  /** Indicates the duration of changeFeed retention in days. Minimum value is 1 day and maximum value is 146000 days (400 years). A null value indicates an infinite retention of the change feed. */
  retentionInDays?: number;
}

/** The blob service properties for blob restore policy */
export interface RestorePolicyProperties {
  /** Blob restore is enabled if set to true. */
  enabled: boolean;
  /** how long this blob can be restored. It should be great than zero and less than DeleteRetentionPolicy.days. */
  days?: number;
  /**
   * Deprecated in favor of minRestoreTime property.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastEnabledTime?: Date;
  /**
   * Returns the minimum date and time that the restore can be started.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly minRestoreTime?: Date;
}

/** The blob service properties for Last access time based tracking policy. */
export interface LastAccessTimeTrackingPolicy {
  /** When set to true last access time based tracking is enabled. */
  enable: boolean;
  /** Name of the policy. The valid value is AccessTimeTracking. This field is currently read only */
  name?: Name;
  /** The field specifies blob object tracking granularity in days, typically how often the blob object should be tracked.This field is currently read only with value as 1 */
  trackingGranularityInDays?: number;
  /** An array of predefined supported blob types. Only blockBlob is the supported value. This field is currently read only */
  blobType?: string[];
}

/** Response schema. Contains list of blobs returned, and if paging is requested or required, a URL to next page of containers. */
export interface ListContainerItems {
  /**
   * List of blobs containers returned.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: ListContainerItem[];
  /**
   * Request URL that can be used to query next page of containers. Returned when total number of requested containers exceed maximum page size.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The properties of an ImmutabilityPolicy of a blob container. */
export interface ImmutabilityPolicyProperties {
  /**
   * ImmutabilityPolicy Etag.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly etag?: string;
  /**
   * The ImmutabilityPolicy update history of the blob container.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly updateHistory?: UpdateHistoryProperty[];
  /** The immutability period for the blobs in the container since the policy creation, in days. */
  immutabilityPeriodSinceCreationInDays?: number;
  /**
   * The ImmutabilityPolicy state of a blob container, possible values include: Locked and Unlocked.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: ImmutabilityPolicyState;
  /** This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API. */
  allowProtectedAppendWrites?: boolean;
  /** This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to both 'Append and Bock Blobs' while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API. The 'allowProtectedAppendWrites' and 'allowProtectedAppendWritesAll' properties are mutually exclusive. */
  allowProtectedAppendWritesAll?: boolean;
}

/** An update history of the ImmutabilityPolicy of a blob container. */
export interface UpdateHistoryProperty {
  /**
   * The ImmutabilityPolicy update type of a blob container, possible values include: put, lock and extend.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly update?: ImmutabilityPolicyUpdateType;
  /**
   * The immutability period for the blobs in the container since the policy creation, in days.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly immutabilityPeriodSinceCreationInDays?: number;
  /**
   * Returns the date and time the ImmutabilityPolicy was updated.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly timestamp?: Date;
  /**
   * Returns the Object ID of the user who updated the ImmutabilityPolicy.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly objectIdentifier?: string;
  /**
   * Returns the Tenant ID that issued the token for the user who updated the ImmutabilityPolicy.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /**
   * Returns the User Principal Name of the user who updated the ImmutabilityPolicy.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly upn?: string;
  /** This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API. */
  allowProtectedAppendWrites?: boolean;
  /** This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to both 'Append and Bock Blobs' while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API. The 'allowProtectedAppendWrites' and 'allowProtectedAppendWritesAll' properties are mutually exclusive. */
  allowProtectedAppendWritesAll?: boolean;
}

/** The LegalHold property of a blob container. */
export interface LegalHoldProperties {
  /**
   * The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hasLegalHold?: boolean;
  /** The list of LegalHold tags of a blob container. */
  tags?: TagProperty[];
  /** Protected append blob writes history. */
  protectedAppendWritesHistory?: ProtectedAppendWritesHistory;
}

/** A tag of the LegalHold of a blob container. */
export interface TagProperty {
  /**
   * The tag value.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tag?: string;
  /**
   * Returns the date and time the tag was added.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly timestamp?: Date;
  /**
   * Returns the Object ID of the user who added the tag.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly objectIdentifier?: string;
  /**
   * Returns the Tenant ID that issued the token for the user who added the tag.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /**
   * Returns the User Principal Name of the user who added the tag.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly upn?: string;
}

/** Protected append writes history setting for the blob container with Legal holds. */
export interface ProtectedAppendWritesHistory {
  /** When enabled, new blocks can be written to both 'Append and Bock Blobs' while maintaining legal hold protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. */
  allowProtectedAppendWritesAll?: boolean;
  /**
   * Returns the date and time the tag was added.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly timestamp?: Date;
}

/** Object level immutability properties of the container. */
export interface ImmutableStorageWithVersioning {
  /** This is an immutable property, when set to true it enables object level immutability at the container level. */
  enabled?: boolean;
  /**
   * Returns the date and time the object level immutability was enabled.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly timeStamp?: Date;
  /**
   * This property denotes the container level immutability to object level immutability migration state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly migrationState?: MigrationState;
}

/** The LegalHold property of a blob container. */
export interface LegalHold {
  /**
   * The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hasLegalHold?: boolean;
  /** Each tag should be 3 to 23 alphanumeric characters and is normalized to lower case at SRP. */
  tags: string[];
  /** When enabled, new blocks can be written to both 'Append and Bock Blobs' while maintaining legal hold protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. */
  allowProtectedAppendWritesAll?: boolean;
}

/** Lease Container request schema. */
export interface LeaseContainerRequest {
  /** Specifies the lease action. Can be one of the available actions. */
  action: LeaseContainerRequestAction;
  /** Identifies the lease. Can be specified in any valid GUID string format. */
  leaseId?: string;
  /** Optional. For a break action, proposed duration the lease should continue before it is broken, in seconds, between 0 and 60. */
  breakPeriod?: number;
  /** Required for acquire. Specifies the duration of the lease, in seconds, or negative one (-1) for a lease that never expires. */
  leaseDuration?: number;
  /** Optional for acquire, required for change. Proposed lease ID, in a GUID string format. */
  proposedLeaseId?: string;
}

/** Lease Container response schema. */
export interface LeaseContainerResponse {
  /** Returned unique lease ID that must be included with any request to delete the container, or to renew, change, or release the lease. */
  leaseId?: string;
  /** Approximate time remaining in the lease period, in seconds. */
  leaseTimeSeconds?: string;
}

export interface FileServiceItems {
  /**
   * List of file services returned.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: FileServiceProperties[];
}

/** Protocol settings for file service */
export interface ProtocolSettings {
  /** Setting for SMB protocol */
  smb?: SmbSetting;
}

/** Setting for SMB protocol */
export interface SmbSetting {
  /** Multichannel setting. Applies to Premium FileStorage only. */
  multichannel?: Multichannel;
  /** SMB protocol versions supported by server. Valid values are SMB2.1, SMB3.0, SMB3.1.1. Should be passed as a string with delimiter ';'. */
  versions?: string;
  /** SMB authentication methods supported by server. Valid values are NTLMv2, Kerberos. Should be passed as a string with delimiter ';'. */
  authenticationMethods?: string;
  /** Kerberos ticket encryption supported by server. Valid values are RC4-HMAC, AES-256. Should be passed as a string with delimiter ';' */
  kerberosTicketEncryption?: string;
  /** SMB channel encryption supported by server. Valid values are AES-128-CCM, AES-128-GCM, AES-256-GCM. Should be passed as a string with delimiter ';'. */
  channelEncryption?: string;
}

/** Multichannel setting. Applies to Premium FileStorage only. */
export interface Multichannel {
  /** Indicates whether multichannel is enabled */
  enabled?: boolean;
}

/** Response schema. Contains list of shares returned, and if paging is requested or required, a URL to next page of shares. */
export interface FileShareItems {
  /**
   * List of file shares returned.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: FileShareItem[];
  /**
   * Request URL that can be used to query next page of shares. Returned when total number of requested shares exceed maximum page size.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

export interface SignedIdentifier {
  /** An unique identifier of the stored access policy. */
  id?: string;
  /** Access policy */
  accessPolicy?: AccessPolicy;
}

export interface AccessPolicy {
  /** Start time of the access policy */
  startTime?: Date;
  /** Expiry time of the access policy */
  expiryTime?: Date;
  /** List of abbreviated permissions. */
  permission?: string;
}

/** The deleted share to be restored. */
export interface DeletedShare {
  /** Required. Identify the name of the deleted share that will be restored. */
  deletedShareName: string;
  /** Required. Identify the version of the deleted share that will be restored. */
  deletedShareVersion: string;
}

/** Lease Share request schema. */
export interface LeaseShareRequest {
  /** Specifies the lease action. Can be one of the available actions. */
  action: LeaseShareAction;
  /** Identifies the lease. Can be specified in any valid GUID string format. */
  leaseId?: string;
  /** Optional. For a break action, proposed duration the lease should continue before it is broken, in seconds, between 0 and 60. */
  breakPeriod?: number;
  /** Required for acquire. Specifies the duration of the lease, in seconds, or negative one (-1) for a lease that never expires. */
  leaseDuration?: number;
  /** Optional for acquire, required for change. Proposed lease ID, in a GUID string format. */
  proposedLeaseId?: string;
}

/** Lease Share response schema. */
export interface LeaseShareResponse {
  /** Returned unique lease ID that must be included with any request to delete the share, or to renew, change, or release the lease. */
  leaseId?: string;
  /** Approximate time remaining in the lease period, in seconds. */
  leaseTimeSeconds?: string;
}

export interface ListQueueServices {
  /**
   * List of queue services returned.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: QueueServiceProperties[];
}

/** Response schema. Contains list of queues returned */
export interface ListQueueResource {
  /**
   * List of queues returned.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: ListQueue[];
  /**
   * Request URL that can be used to list next page of queues
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

export interface ListTableServices {
  /**
   * List of table services returned.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: TableServiceProperties[];
}

/** Object to set Table Access Policy. */
export interface TableSignedIdentifier {
  /** unique-64-character-value of the stored access policy. */
  id: string;
  /** Access policy */
  accessPolicy?: TableAccessPolicy;
}

/** Table Access Policy Properties Object. */
export interface TableAccessPolicy {
  /** Start time of the access policy */
  startTime?: Date;
  /** Expiry time of the access policy */
  expiryTime?: Date;
  /** Required. List of abbreviated permissions. Supported permission values include 'r','a','u','d' */
  permission: string;
}

/** Response schema. Contains list of tables returned */
export interface ListTableResource {
  /**
   * List of tables returned.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Table[];
  /**
   * Request URL that can be used to query next page of tables
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The Private Endpoint Connection resource. */
export type PrivateEndpointConnection = Resource & {
  /** The resource of private end point. */
  privateEndpoint?: PrivateEndpoint;
  /** A collection of information about the state of the connection between service consumer and provider. */
  privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
  /**
   * The provisioning state of the private endpoint connection resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: PrivateEndpointConnectionProvisioningState;
};

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export type TrackedResource = Resource & {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
};

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export type ProxyResource = Resource;

/** The Get Storage Account ManagementPolicies operation response. */
export type ManagementPolicy = Resource & {
  /**
   * Returns the date and time the ManagementPolicies was last modified.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedTime?: Date;
  /** The Storage Account ManagementPolicy, in JSON format. See more details in: https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts. */
  policy?: ManagementPolicySchema;
};

/** The storage account blob inventory policy. */
export type BlobInventoryPolicy = Resource & {
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /**
   * Returns the last modified date and time of the blob inventory policy.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedTime?: Date;
  /** The storage account blob inventory policy object. It is composed of policy rules. */
  policy?: BlobInventoryPolicySchema;
};

/** A private link resource */
export type PrivateLinkResource = Resource & {
  /**
   * The private link resource group id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly groupId?: string;
  /**
   * The private link resource required member names.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly requiredMembers?: string[];
  /** The private link resource Private link DNS zone name. */
  requiredZoneNames?: string[];
};

/** The replication policy between two storage accounts. Multiple rules can be defined in one policy. */
export type ObjectReplicationPolicy = Resource & {
  /**
   * A unique id for object replication policy.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly policyId?: string;
  /**
   * Indicates when the policy is enabled on the source account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly enabledTime?: Date;
  /** Required. Source account name. It should be full resource id if allowCrossTenantReplication set to false. */
  sourceAccount?: string;
  /** Required. Destination account name. It should be full resource id if allowCrossTenantReplication set to false. */
  destinationAccount?: string;
  /** The storage account object replication rules. */
  rules?: ObjectReplicationPolicyRule[];
};

/** The local user associated with the storage accounts. */
export type LocalUser = Resource & {
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** The permission scopes of the local user. */
  permissionScopes?: PermissionScope[];
  /** Optional, local user home directory. */
  homeDirectory?: string;
  /** Optional, local user ssh authorized keys for SFTP. */
  sshAuthorizedKeys?: SshPublicKey[];
  /**
   * A unique Security Identifier that is generated by the server.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sid?: string;
  /** Indicates whether shared key exists. Set it to false to remove existing shared key. */
  hasSharedKey?: boolean;
  /** Indicates whether ssh key exists. Set it to false to remove existing SSH key. */
  hasSshKey?: boolean;
  /** Indicates whether ssh password exists. Set it to false to remove existing SSH password. */
  hasSshPassword?: boolean;
};

/** The Encryption Scope resource. */
export type EncryptionScope = Resource & {
  /** The provider for the encryption scope. Possible values (case-insensitive):  Microsoft.Storage, Microsoft.KeyVault. */
  source?: EncryptionScopeSource;
  /** The state of the encryption scope. Possible values (case-insensitive):  Enabled, Disabled. */
  state?: EncryptionScopeState;
  /**
   * Gets the creation date and time of the encryption scope in UTC.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly creationTime?: Date;
  /**
   * Gets the last modification date and time of the encryption scope in UTC.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedTime?: Date;
  /** The key vault properties for the encryption scope. This is a required field if encryption scope 'source' attribute is set to 'Microsoft.KeyVault'. */
  keyVaultProperties?: EncryptionScopeKeyVaultProperties;
  /** A boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest. */
  requireInfrastructureEncryption?: boolean;
};

/** The properties of a storage account’s Blob service. */
export type BlobServiceProperties = Resource & {
  /**
   * Sku name and tier.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sku?: Sku;
  /** Specifies CORS rules for the Blob service. You can include up to five CorsRule elements in the request. If no CorsRule elements are included in the request body, all CORS rules will be deleted, and CORS will be disabled for the Blob service. */
  cors?: CorsRules;
  /** DefaultServiceVersion indicates the default version to use for requests to the Blob service if an incoming request’s version is not specified. Possible values include version 2008-10-27 and all more recent versions. */
  defaultServiceVersion?: string;
  /** The blob service properties for blob soft delete. */
  deleteRetentionPolicy?: DeleteRetentionPolicy;
  /** Versioning is enabled if set to true. */
  isVersioningEnabled?: boolean;
  /** Deprecated in favor of isVersioningEnabled property. */
  automaticSnapshotPolicyEnabled?: boolean;
  /** The blob service properties for change feed events. */
  changeFeed?: ChangeFeed;
  /** The blob service properties for blob restore policy. */
  restorePolicy?: RestorePolicyProperties;
  /** The blob service properties for container soft delete. */
  containerDeleteRetentionPolicy?: DeleteRetentionPolicy;
  /** The blob service property to configure last access time based tracking policy. */
  lastAccessTimeTrackingPolicy?: LastAccessTimeTrackingPolicy;
};

/** The resource model definition for an Azure Resource Manager resource with an etag. */
export type AzureEntityResource = Resource & {
  /**
   * Resource Etag.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly etag?: string;
};

/** The properties of File services in storage account. */
export type FileServiceProperties = Resource & {
  /**
   * Sku name and tier.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sku?: Sku;
  /** Specifies CORS rules for the File service. You can include up to five CorsRule elements in the request. If no CorsRule elements are included in the request body, all CORS rules will be deleted, and CORS will be disabled for the File service. */
  cors?: CorsRules;
  /** The file service properties for share soft delete. */
  shareDeleteRetentionPolicy?: DeleteRetentionPolicy;
  /** Protocol settings for file service */
  protocolSettings?: ProtocolSettings;
};

/** The properties of a storage account’s Queue service. */
export type QueueServiceProperties = Resource & {
  /** Specifies CORS rules for the Queue service. You can include up to five CorsRule elements in the request. If no CorsRule elements are included in the request body, all CORS rules will be deleted, and CORS will be disabled for the Queue service. */
  cors?: CorsRules;
};

export type StorageQueue = Resource & {
  /** A name-value pair that represents queue metadata. */
  metadata?: { [propertyName: string]: string };
  /**
   * Integer indicating an approximate number of messages in the queue. This number is not lower than the actual number of messages in the queue, but could be higher.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly approximateMessageCount?: number;
};

export type ListQueue = Resource & {
  /** A name-value pair that represents queue metadata. */
  metadata?: { [propertyName: string]: string };
};

/** The properties of a storage account’s Table service. */
export type TableServiceProperties = Resource & {
  /** Specifies CORS rules for the Table service. You can include up to five CorsRule elements in the request. If no CorsRule elements are included in the request body, all CORS rules will be deleted, and CORS will be disabled for the Table service. */
  cors?: CorsRules;
};

/** Properties of the table, including Id, resource name, resource type. */
export type Table = Resource & {
  /**
   * Table name under the specified account
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tableName?: string;
  /** List of stored access policies specified on the table. */
  signedIdentifiers?: TableSignedIdentifier[];
};

/** The storage account. */
export type StorageAccount = TrackedResource & {
  /**
   * Gets the SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sku?: Sku;
  /**
   * Gets the Kind.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly kind?: Kind;
  /** The identity of the resource. */
  identity?: Identity;
  /** The extendedLocation of the resource. */
  extendedLocation?: ExtendedLocation;
  /**
   * Gets the status of the storage account at the time the operation was called.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Gets the URLs that are used to perform a retrieval of a public blob, queue, or table object. Note that Standard_ZRS and Premium_LRS accounts only return the blob endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly primaryEndpoints?: Endpoints;
  /**
   * Gets the location of the primary data center for the storage account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly primaryLocation?: string;
  /**
   * Gets the status indicating whether the primary location of the storage account is available or unavailable.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusOfPrimary?: AccountStatus;
  /**
   * Gets the timestamp of the most recent instance of a failover to the secondary location. Only the most recent timestamp is retained. This element is not returned if there has never been a failover instance. Only available if the accountType is Standard_GRS or Standard_RAGRS.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastGeoFailoverTime?: Date;
  /**
   * Gets the location of the geo-replicated secondary for the storage account. Only available if the accountType is Standard_GRS or Standard_RAGRS.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly secondaryLocation?: string;
  /**
   * Gets the status indicating whether the secondary location of the storage account is available or unavailable. Only available if the SKU name is Standard_GRS or Standard_RAGRS.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusOfSecondary?: AccountStatus;
  /**
   * Gets the creation date and time of the storage account in UTC.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly creationTime?: Date;
  /**
   * Gets the custom domain the user assigned to this storage account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly customDomain?: CustomDomain;
  /**
   * SasPolicy assigned to the storage account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sasPolicy?: SasPolicy;
  /**
   * KeyPolicy assigned to the storage account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly keyPolicy?: KeyPolicy;
  /**
   * Storage account keys creation time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly keyCreationTime?: KeyCreationTime;
  /**
   * Gets the URLs that are used to perform a retrieval of a public blob, queue, or table object from the secondary location of the storage account. Only available if the SKU name is Standard_RAGRS.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly secondaryEndpoints?: Endpoints;
  /**
   * Encryption settings to be used for server-side encryption for the storage account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly encryption?: Encryption;
  /**
   * Required for storage accounts where kind = BlobStorage. The access tier is used for billing. The 'Premium' access tier is the default value for premium block blobs storage account type and it cannot be changed for the premium block blobs storage account type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly accessTier?: AccessTier;
  /** Provides the identity based authentication settings for Azure Files. */
  azureFilesIdentityBasedAuthentication?: AzureFilesIdentityBasedAuthentication;
  /** Allows https traffic only to storage service if sets to true. */
  enableHttpsTrafficOnly?: boolean;
  /**
   * Network rule set
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkRuleSet?: NetworkRuleSet;
  /** Enables Secure File Transfer Protocol, if set to true */
  isSftpEnabled?: boolean;
  /** Enables local users feature, if set to true */
  isLocalUserEnabled?: boolean;
  /** Account HierarchicalNamespace enabled if sets to true. */
  isHnsEnabled?: boolean;
  /**
   * Geo Replication Stats
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly geoReplicationStats?: GeoReplicationStats;
  /**
   * If the failover is in progress, the value will be true, otherwise, it will be null.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly failoverInProgress?: boolean;
  /** Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled. */
  largeFileSharesState?: LargeFileSharesState;
  /**
   * List of private endpoint connection associated with the specified storage account
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly privateEndpointConnections?: PrivateEndpointConnection[];
  /** Maintains information about the network routing choice opted by the user for data transfer */
  routingPreference?: RoutingPreference;
  /**
   * Blob restore status
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly blobRestoreStatus?: BlobRestoreStatus;
  /** Allow or disallow public access to all blobs or containers in the storage account. The default interpretation is true for this property. */
  allowBlobPublicAccess?: boolean;
  /** Set the minimum TLS version to be permitted on requests to storage. The default interpretation is TLS 1.0 for this property. */
  minimumTlsVersion?: MinimumTlsVersion;
  /** Indicates whether the storage account permits requests to be authorized with the account access key via Shared Key. If false, then all requests, including shared access signatures, must be authorized with Azure Active Directory (Azure AD). The default value is null, which is equivalent to true. */
  allowSharedKeyAccess?: boolean;
  /** NFS 3.0 protocol support enabled if set to true. */
  enableNfsV3?: boolean;
  /** Allow or disallow cross AAD tenant object replication. The default interpretation is true for this property. */
  allowCrossTenantReplication?: boolean;
  /** A boolean flag which indicates whether the default authentication is OAuth or not. The default interpretation is false for this property. */
  defaultToOAuthAuthentication?: boolean;
  /** Allow or disallow public network access to Storage Account. Value is optional but if passed in, must be 'Enabled' or 'Disabled'. */
  publicNetworkAccess?: PublicNetworkAccess;
  /** The property is immutable and can only be set to true at the account creation time. When set to true, it enables object level immutability for all the containers in the account by default. */
  immutableStorageWithVersioning?: ImmutableStorageAccount;
  /** Restrict copy to and from Storage Accounts within an AAD tenant or with Private Links to the same VNet. */
  allowedCopyScope?: AllowedCopyScope;
  /** This property is readOnly and is set by server during asynchronous storage account sku conversion operations. */
  storageAccountSkuConversionStatus?: StorageAccountSkuConversionStatus;
  /** Allows you to specify the type of endpoint. Set this to AzureDNSZone to create a large number of accounts in a single subscription, which creates accounts in an Azure DNS Zone and the endpoint URL will have an alphanumeric DNS Zone identifier. */
  dnsEndpointType?: DnsEndpointType;
};

/** Deleted storage account */
export type DeletedAccount = ProxyResource & {
  /**
   * Full resource id of the original storage account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly storageAccountResourceId?: string;
  /**
   * Location of the deleted account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly location?: string;
  /**
   * Can be used to attempt recovering this deleted account via PutStorageAccount API.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly restoreReference?: string;
  /**
   * Creation time of the deleted account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly creationTime?: string;
  /**
   * Deletion time of the deleted account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly deletionTime?: string;
};

/** The blob container properties be listed out. */
export type ListContainerItem = AzureEntityResource & {
  /**
   * The version of the deleted blob container.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly version?: string;
  /**
   * Indicates whether the blob container was deleted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly deleted?: boolean;
  /**
   * Blob container deletion time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly deletedTime?: Date;
  /**
   * Remaining retention days for soft deleted blob container.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly remainingRetentionDays?: number;
  /** Default the container to use specified encryption scope for all writes. */
  defaultEncryptionScope?: string;
  /** Block override of encryption scope from the container default. */
  denyEncryptionScopeOverride?: boolean;
  /** Specifies whether data in the container may be accessed publicly and the level of access. */
  publicAccess?: PublicAccess;
  /**
   * Returns the date and time the container was last modified.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedTime?: Date;
  /**
   * The lease status of the container.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly leaseStatus?: LeaseStatus;
  /**
   * Lease state of the container.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly leaseState?: LeaseState;
  /**
   * Specifies whether the lease on a container is of infinite or fixed duration, only when the container is leased.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly leaseDuration?: LeaseDuration;
  /** A name-value pair to associate with the container as metadata. */
  metadata?: { [propertyName: string]: string };
  /**
   * The ImmutabilityPolicy property of the container.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly immutabilityPolicy?: ImmutabilityPolicyProperties;
  /**
   * The LegalHold property of the container.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly legalHold?: LegalHoldProperties;
  /**
   * The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hasLegalHold?: boolean;
  /**
   * The hasImmutabilityPolicy public property is set to true by SRP if ImmutabilityPolicy has been created for this container. The hasImmutabilityPolicy public property is set to false by SRP if ImmutabilityPolicy has not been created for this container.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hasImmutabilityPolicy?: boolean;
  /** The object level immutability property of the container. The property is immutable and can only be set to true at the container creation time. Existing containers must undergo a migration process. */
  immutableStorageWithVersioning?: ImmutableStorageWithVersioning;
  /** Enable NFSv3 root squash on blob container. */
  enableNfsV3RootSquash?: boolean;
  /** Enable NFSv3 all squash on blob container. */
  enableNfsV3AllSquash?: boolean;
};

/** Properties of the blob container, including Id, resource name, resource type, Etag. */
export type BlobContainer = AzureEntityResource & {
  /**
   * The version of the deleted blob container.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly version?: string;
  /**
   * Indicates whether the blob container was deleted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly deleted?: boolean;
  /**
   * Blob container deletion time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly deletedTime?: Date;
  /**
   * Remaining retention days for soft deleted blob container.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly remainingRetentionDays?: number;
  /** Default the container to use specified encryption scope for all writes. */
  defaultEncryptionScope?: string;
  /** Block override of encryption scope from the container default. */
  denyEncryptionScopeOverride?: boolean;
  /** Specifies whether data in the container may be accessed publicly and the level of access. */
  publicAccess?: PublicAccess;
  /**
   * Returns the date and time the container was last modified.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedTime?: Date;
  /**
   * The lease status of the container.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly leaseStatus?: LeaseStatus;
  /**
   * Lease state of the container.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly leaseState?: LeaseState;
  /**
   * Specifies whether the lease on a container is of infinite or fixed duration, only when the container is leased.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly leaseDuration?: LeaseDuration;
  /** A name-value pair to associate with the container as metadata. */
  metadata?: { [propertyName: string]: string };
  /**
   * The ImmutabilityPolicy property of the container.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly immutabilityPolicy?: ImmutabilityPolicyProperties;
  /**
   * The LegalHold property of the container.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly legalHold?: LegalHoldProperties;
  /**
   * The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hasLegalHold?: boolean;
  /**
   * The hasImmutabilityPolicy public property is set to true by SRP if ImmutabilityPolicy has been created for this container. The hasImmutabilityPolicy public property is set to false by SRP if ImmutabilityPolicy has not been created for this container.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hasImmutabilityPolicy?: boolean;
  /** The object level immutability property of the container. The property is immutable and can only be set to true at the container creation time. Existing containers must undergo a migration process. */
  immutableStorageWithVersioning?: ImmutableStorageWithVersioning;
  /** Enable NFSv3 root squash on blob container. */
  enableNfsV3RootSquash?: boolean;
  /** Enable NFSv3 all squash on blob container. */
  enableNfsV3AllSquash?: boolean;
};

/** The ImmutabilityPolicy property of a blob container, including Id, resource name, resource type, Etag. */
export type ImmutabilityPolicy = AzureEntityResource & {
  /** The immutability period for the blobs in the container since the policy creation, in days. */
  immutabilityPeriodSinceCreationInDays?: number;
  /**
   * The ImmutabilityPolicy state of a blob container, possible values include: Locked and Unlocked.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: ImmutabilityPolicyState;
  /** This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API. */
  allowProtectedAppendWrites?: boolean;
  /** This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to both 'Append and Bock Blobs' while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API. The 'allowProtectedAppendWrites' and 'allowProtectedAppendWritesAll' properties are mutually exclusive. */
  allowProtectedAppendWritesAll?: boolean;
};

/** The file share properties be listed out. */
export type FileShareItem = AzureEntityResource & {
  /**
   * Returns the date and time the share was last modified.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedTime?: Date;
  /** A name-value pair to associate with the share as metadata. */
  metadata?: { [propertyName: string]: string };
  /** The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File Shares, the maximum size is 102400. */
  shareQuota?: number;
  /** The authentication protocol that is used for the file share. Can only be specified when creating a share. */
  enabledProtocols?: EnabledProtocols;
  /** The property is for NFS share only. The default is NoRootSquash. */
  rootSquash?: RootSquashType;
  /**
   * The version of the share.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly version?: string;
  /**
   * Indicates whether the share was deleted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly deleted?: boolean;
  /**
   * The deleted time if the share was deleted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly deletedTime?: Date;
  /**
   * Remaining retention days for share that was soft deleted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly remainingRetentionDays?: number;
  /** Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage account can choose Premium. */
  accessTier?: ShareAccessTier;
  /**
   * Indicates the last modification time for share access tier.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly accessTierChangeTime?: Date;
  /**
   * Indicates if there is a pending transition for access tier.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly accessTierStatus?: string;
  /**
   * The approximate size of the data stored on the share. Note that this value may not include all recently created or recently resized files.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly shareUsageBytes?: number;
  /**
   * The lease status of the share.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly leaseStatus?: LeaseStatus;
  /**
   * Lease state of the share.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly leaseState?: LeaseState;
  /**
   * Specifies whether the lease on a share is of infinite or fixed duration, only when the share is leased.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly leaseDuration?: LeaseDuration;
  /** List of stored access policies specified on the share. */
  signedIdentifiers?: SignedIdentifier[];
  /**
   * Creation time of share snapshot returned in the response of list shares with expand param "snapshots".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly snapshotTime?: Date;
};

/** Properties of the file share, including Id, resource name, resource type, Etag. */
export type FileShare = AzureEntityResource & {
  /**
   * Returns the date and time the share was last modified.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedTime?: Date;
  /** A name-value pair to associate with the share as metadata. */
  metadata?: { [propertyName: string]: string };
  /** The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File Shares, the maximum size is 102400. */
  shareQuota?: number;
  /** The authentication protocol that is used for the file share. Can only be specified when creating a share. */
  enabledProtocols?: EnabledProtocols;
  /** The property is for NFS share only. The default is NoRootSquash. */
  rootSquash?: RootSquashType;
  /**
   * The version of the share.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly version?: string;
  /**
   * Indicates whether the share was deleted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly deleted?: boolean;
  /**
   * The deleted time if the share was deleted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly deletedTime?: Date;
  /**
   * Remaining retention days for share that was soft deleted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly remainingRetentionDays?: number;
  /** Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage account can choose Premium. */
  accessTier?: ShareAccessTier;
  /**
   * Indicates the last modification time for share access tier.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly accessTierChangeTime?: Date;
  /**
   * Indicates if there is a pending transition for access tier.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly accessTierStatus?: string;
  /**
   * The approximate size of the data stored on the share. Note that this value may not include all recently created or recently resized files.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly shareUsageBytes?: number;
  /**
   * The lease status of the share.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly leaseStatus?: LeaseStatus;
  /**
   * Lease state of the share.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly leaseState?: LeaseState;
  /**
   * Specifies whether the lease on a share is of infinite or fixed duration, only when the share is leased.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly leaseDuration?: LeaseDuration;
  /** List of stored access policies specified on the share. */
  signedIdentifiers?: SignedIdentifier[];
  /**
   * Creation time of share snapshot returned in the response of list shares with expand param "snapshots".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly snapshotTime?: Date;
};

/** Defines headers for BlobContainers_createOrUpdateImmutabilityPolicy operation. */
export interface BlobContainersCreateOrUpdateImmutabilityPolicyHeaders {
  /** The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. */
  eTag?: string;
}

/** Defines headers for BlobContainers_getImmutabilityPolicy operation. */
export interface BlobContainersGetImmutabilityPolicyHeaders {
  /** The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. */
  eTag?: string;
}

/** Defines headers for BlobContainers_deleteImmutabilityPolicy operation. */
export interface BlobContainersDeleteImmutabilityPolicyHeaders {
  /** The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. */
  eTag?: string;
}

/** Defines headers for BlobContainers_lockImmutabilityPolicy operation. */
export interface BlobContainersLockImmutabilityPolicyHeaders {
  /** The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. */
  eTag?: string;
}

/** Defines headers for BlobContainers_extendImmutabilityPolicy operation. */
export interface BlobContainersExtendImmutabilityPolicyHeaders {
  /** The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. */
  eTag?: string;
}

/** Defines headers for FileShares_lease operation. */
export interface FileSharesLeaseHeaders {
  /** The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. */
  eTag?: string;
}

/** Known values of {@link SkuName} that the service accepts. */
export enum KnownSkuName {
  StandardLRS = "Standard_LRS",
  StandardGRS = "Standard_GRS",
  StandardRagrs = "Standard_RAGRS",
  StandardZRS = "Standard_ZRS",
  PremiumLRS = "Premium_LRS",
  PremiumZRS = "Premium_ZRS",
  StandardGzrs = "Standard_GZRS",
  StandardRagzrs = "Standard_RAGZRS"
}

/**
 * Defines values for SkuName. \
 * {@link KnownSkuName} can be used interchangeably with SkuName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard_LRS** \
 * **Standard_GRS** \
 * **Standard_RAGRS** \
 * **Standard_ZRS** \
 * **Premium_LRS** \
 * **Premium_ZRS** \
 * **Standard_GZRS** \
 * **Standard_RAGZRS**
 */
export type SkuName = string;

/** Known values of {@link Kind} that the service accepts. */
export enum KnownKind {
  Storage = "Storage",
  StorageV2 = "StorageV2",
  BlobStorage = "BlobStorage",
  FileStorage = "FileStorage",
  BlockBlobStorage = "BlockBlobStorage"
}

/**
 * Defines values for Kind. \
 * {@link KnownKind} can be used interchangeably with Kind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Storage** \
 * **StorageV2** \
 * **BlobStorage** \
 * **FileStorage** \
 * **BlockBlobStorage**
 */
export type Kind = string;

/** Known values of {@link ReasonCode} that the service accepts. */
export enum KnownReasonCode {
  QuotaId = "QuotaId",
  NotAvailableForSubscription = "NotAvailableForSubscription"
}

/**
 * Defines values for ReasonCode. \
 * {@link KnownReasonCode} can be used interchangeably with ReasonCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **QuotaId** \
 * **NotAvailableForSubscription**
 */
export type ReasonCode = string;

/** Known values of {@link ExtendedLocationTypes} that the service accepts. */
export enum KnownExtendedLocationTypes {
  EdgeZone = "EdgeZone"
}

/**
 * Defines values for ExtendedLocationTypes. \
 * {@link KnownExtendedLocationTypes} can be used interchangeably with ExtendedLocationTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **EdgeZone**
 */
export type ExtendedLocationTypes = string;

/** Known values of {@link IdentityType} that the service accepts. */
export enum KnownIdentityType {
  None = "None",
  SystemAssigned = "SystemAssigned",
  UserAssigned = "UserAssigned",
  SystemAssignedUserAssigned = "SystemAssigned,UserAssigned"
}

/**
 * Defines values for IdentityType. \
 * {@link KnownIdentityType} can be used interchangeably with IdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAssigned,UserAssigned**
 */
export type IdentityType = string;

/** Known values of {@link AllowedCopyScope} that the service accepts. */
export enum KnownAllowedCopyScope {
  PrivateLink = "PrivateLink",
  AAD = "AAD"
}

/**
 * Defines values for AllowedCopyScope. \
 * {@link KnownAllowedCopyScope} can be used interchangeably with AllowedCopyScope,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PrivateLink** \
 * **AAD**
 */
export type AllowedCopyScope = string;

/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export enum KnownPublicNetworkAccess {
  Enabled = "Enabled",
  Disabled = "Disabled"
}

/**
 * Defines values for PublicNetworkAccess. \
 * {@link KnownPublicNetworkAccess} can be used interchangeably with PublicNetworkAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type PublicNetworkAccess = string;

/** Known values of {@link ExpirationAction} that the service accepts. */
export enum KnownExpirationAction {
  Log = "Log"
}

/**
 * Defines values for ExpirationAction. \
 * {@link KnownExpirationAction} can be used interchangeably with ExpirationAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Log**
 */
export type ExpirationAction = string;

/** Known values of {@link KeyType} that the service accepts. */
export enum KnownKeyType {
  Service = "Service",
  Account = "Account"
}

/**
 * Defines values for KeyType. \
 * {@link KnownKeyType} can be used interchangeably with KeyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Service** \
 * **Account**
 */
export type KeyType = string;

/** Known values of {@link KeySource} that the service accepts. */
export enum KnownKeySource {
  MicrosoftStorage = "Microsoft.Storage",
  MicrosoftKeyvault = "Microsoft.Keyvault"
}

/**
 * Defines values for KeySource. \
 * {@link KnownKeySource} can be used interchangeably with KeySource,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Microsoft.Storage** \
 * **Microsoft.Keyvault**
 */
export type KeySource = string;

/** Known values of {@link Bypass} that the service accepts. */
export enum KnownBypass {
  None = "None",
  Logging = "Logging",
  Metrics = "Metrics",
  AzureServices = "AzureServices"
}

/**
 * Defines values for Bypass. \
 * {@link KnownBypass} can be used interchangeably with Bypass,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Logging** \
 * **Metrics** \
 * **AzureServices**
 */
export type Bypass = string;

/** Known values of {@link State} that the service accepts. */
export enum KnownState {
  Provisioning = "Provisioning",
  Deprovisioning = "Deprovisioning",
  Succeeded = "Succeeded",
  Failed = "Failed",
  NetworkSourceDeleted = "NetworkSourceDeleted"
}

/**
 * Defines values for State. \
 * {@link KnownState} can be used interchangeably with State,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Provisioning** \
 * **Deprovisioning** \
 * **Succeeded** \
 * **Failed** \
 * **NetworkSourceDeleted**
 */
export type State = string;

/** Known values of {@link DirectoryServiceOptions} that the service accepts. */
export enum KnownDirectoryServiceOptions {
  None = "None",
  Aadds = "AADDS",
  AD = "AD"
}

/**
 * Defines values for DirectoryServiceOptions. \
 * {@link KnownDirectoryServiceOptions} can be used interchangeably with DirectoryServiceOptions,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **AADDS** \
 * **AD**
 */
export type DirectoryServiceOptions = string;

/** Known values of {@link ActiveDirectoryPropertiesAccountType} that the service accepts. */
export enum KnownActiveDirectoryPropertiesAccountType {
  User = "User",
  Computer = "Computer"
}

/**
 * Defines values for ActiveDirectoryPropertiesAccountType. \
 * {@link KnownActiveDirectoryPropertiesAccountType} can be used interchangeably with ActiveDirectoryPropertiesAccountType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Computer**
 */
export type ActiveDirectoryPropertiesAccountType = string;

/** Known values of {@link DefaultSharePermission} that the service accepts. */
export enum KnownDefaultSharePermission {
  None = "None",
  StorageFileDataSmbShareReader = "StorageFileDataSmbShareReader",
  StorageFileDataSmbShareContributor = "StorageFileDataSmbShareContributor",
  StorageFileDataSmbShareElevatedContributor = "StorageFileDataSmbShareElevatedContributor"
}

/**
 * Defines values for DefaultSharePermission. \
 * {@link KnownDefaultSharePermission} can be used interchangeably with DefaultSharePermission,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **StorageFileDataSmbShareReader** \
 * **StorageFileDataSmbShareContributor** \
 * **StorageFileDataSmbShareElevatedContributor**
 */
export type DefaultSharePermission = string;

/** Known values of {@link LargeFileSharesState} that the service accepts. */
export enum KnownLargeFileSharesState {
  Disabled = "Disabled",
  Enabled = "Enabled"
}

/**
 * Defines values for LargeFileSharesState. \
 * {@link KnownLargeFileSharesState} can be used interchangeably with LargeFileSharesState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **Enabled**
 */
export type LargeFileSharesState = string;

/** Known values of {@link RoutingChoice} that the service accepts. */
export enum KnownRoutingChoice {
  MicrosoftRouting = "MicrosoftRouting",
  InternetRouting = "InternetRouting"
}

/**
 * Defines values for RoutingChoice. \
 * {@link KnownRoutingChoice} can be used interchangeably with RoutingChoice,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **MicrosoftRouting** \
 * **InternetRouting**
 */
export type RoutingChoice = string;

/** Known values of {@link MinimumTlsVersion} that the service accepts. */
export enum KnownMinimumTlsVersion {
  TLS10 = "TLS1_0",
  TLS11 = "TLS1_1",
  TLS12 = "TLS1_2"
}

/**
 * Defines values for MinimumTlsVersion. \
 * {@link KnownMinimumTlsVersion} can be used interchangeably with MinimumTlsVersion,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **TLS1_0** \
 * **TLS1_1** \
 * **TLS1_2**
 */
export type MinimumTlsVersion = string;

/** Known values of {@link AccountImmutabilityPolicyState} that the service accepts. */
export enum KnownAccountImmutabilityPolicyState {
  Unlocked = "Unlocked",
  Locked = "Locked",
  Disabled = "Disabled"
}

/**
 * Defines values for AccountImmutabilityPolicyState. \
 * {@link KnownAccountImmutabilityPolicyState} can be used interchangeably with AccountImmutabilityPolicyState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unlocked** \
 * **Locked** \
 * **Disabled**
 */
export type AccountImmutabilityPolicyState = string;

/** Known values of {@link DnsEndpointType} that the service accepts. */
export enum KnownDnsEndpointType {
  Standard = "Standard",
  AzureDnsZone = "AzureDnsZone"
}

/**
 * Defines values for DnsEndpointType. \
 * {@link KnownDnsEndpointType} can be used interchangeably with DnsEndpointType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard** \
 * **AzureDnsZone**
 */
export type DnsEndpointType = string;

/** Known values of {@link GeoReplicationStatus} that the service accepts. */
export enum KnownGeoReplicationStatus {
  Live = "Live",
  Bootstrap = "Bootstrap",
  Unavailable = "Unavailable"
}

/**
 * Defines values for GeoReplicationStatus. \
 * {@link KnownGeoReplicationStatus} can be used interchangeably with GeoReplicationStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Live** \
 * **Bootstrap** \
 * **Unavailable**
 */
export type GeoReplicationStatus = string;

/** Known values of {@link PrivateEndpointServiceConnectionStatus} that the service accepts. */
export enum KnownPrivateEndpointServiceConnectionStatus {
  Pending = "Pending",
  Approved = "Approved",
  Rejected = "Rejected"
}

/**
 * Defines values for PrivateEndpointServiceConnectionStatus. \
 * {@link KnownPrivateEndpointServiceConnectionStatus} can be used interchangeably with PrivateEndpointServiceConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Approved** \
 * **Rejected**
 */
export type PrivateEndpointServiceConnectionStatus = string;

/** Known values of {@link PrivateEndpointConnectionProvisioningState} that the service accepts. */
export enum KnownPrivateEndpointConnectionProvisioningState {
  Succeeded = "Succeeded",
  Creating = "Creating",
  Deleting = "Deleting",
  Failed = "Failed"
}

/**
 * Defines values for PrivateEndpointConnectionProvisioningState. \
 * {@link KnownPrivateEndpointConnectionProvisioningState} can be used interchangeably with PrivateEndpointConnectionProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Creating** \
 * **Deleting** \
 * **Failed**
 */
export type PrivateEndpointConnectionProvisioningState = string;

/** Known values of {@link BlobRestoreProgressStatus} that the service accepts. */
export enum KnownBlobRestoreProgressStatus {
  InProgress = "InProgress",
  Complete = "Complete",
  Failed = "Failed"
}

/**
 * Defines values for BlobRestoreProgressStatus. \
 * {@link KnownBlobRestoreProgressStatus} can be used interchangeably with BlobRestoreProgressStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **InProgress** \
 * **Complete** \
 * **Failed**
 */
export type BlobRestoreProgressStatus = string;

/** Known values of {@link SkuConversionStatus} that the service accepts. */
export enum KnownSkuConversionStatus {
  InProgress = "InProgress",
  Succeeded = "Succeeded",
  Failed = "Failed"
}

/**
 * Defines values for SkuConversionStatus. \
 * {@link KnownSkuConversionStatus} can be used interchangeably with SkuConversionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **InProgress** \
 * **Succeeded** \
 * **Failed**
 */
export type SkuConversionStatus = string;

/** Known values of {@link Services} that the service accepts. */
export enum KnownServices {
  B = "b",
  Q = "q",
  T = "t",
  F = "f"
}

/**
 * Defines values for Services. \
 * {@link KnownServices} can be used interchangeably with Services,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **b** \
 * **q** \
 * **t** \
 * **f**
 */
export type Services = string;

/** Known values of {@link SignedResourceTypes} that the service accepts. */
export enum KnownSignedResourceTypes {
  S = "s",
  C = "c",
  O = "o"
}

/**
 * Defines values for SignedResourceTypes. \
 * {@link KnownSignedResourceTypes} can be used interchangeably with SignedResourceTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **s** \
 * **c** \
 * **o**
 */
export type SignedResourceTypes = string;

/** Known values of {@link Permissions} that the service accepts. */
export enum KnownPermissions {
  R = "r",
  D = "d",
  W = "w",
  L = "l",
  A = "a",
  C = "c",
  U = "u",
  P = "p"
}

/**
 * Defines values for Permissions. \
 * {@link KnownPermissions} can be used interchangeably with Permissions,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **r** \
 * **d** \
 * **w** \
 * **l** \
 * **a** \
 * **c** \
 * **u** \
 * **p**
 */
export type Permissions = string;

/** Known values of {@link SignedResource} that the service accepts. */
export enum KnownSignedResource {
  B = "b",
  C = "c",
  F = "f",
  S = "s"
}

/**
 * Defines values for SignedResource. \
 * {@link KnownSignedResource} can be used interchangeably with SignedResource,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **b** \
 * **c** \
 * **f** \
 * **s**
 */
export type SignedResource = string;

/** Known values of {@link ManagementPolicyName} that the service accepts. */
export enum KnownManagementPolicyName {
  Default = "default"
}

/**
 * Defines values for ManagementPolicyName. \
 * {@link KnownManagementPolicyName} can be used interchangeably with ManagementPolicyName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **default**
 */
export type ManagementPolicyName = string;

/** Known values of {@link RuleType} that the service accepts. */
export enum KnownRuleType {
  Lifecycle = "Lifecycle"
}

/**
 * Defines values for RuleType. \
 * {@link KnownRuleType} can be used interchangeably with RuleType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Lifecycle**
 */
export type RuleType = string;

/** Known values of {@link BlobInventoryPolicyName} that the service accepts. */
export enum KnownBlobInventoryPolicyName {
  Default = "default"
}

/**
 * Defines values for BlobInventoryPolicyName. \
 * {@link KnownBlobInventoryPolicyName} can be used interchangeably with BlobInventoryPolicyName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **default**
 */
export type BlobInventoryPolicyName = string;

/** Known values of {@link InventoryRuleType} that the service accepts. */
export enum KnownInventoryRuleType {
  Inventory = "Inventory"
}

/**
 * Defines values for InventoryRuleType. \
 * {@link KnownInventoryRuleType} can be used interchangeably with InventoryRuleType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Inventory**
 */
export type InventoryRuleType = string;

/** Known values of {@link Format} that the service accepts. */
export enum KnownFormat {
  Csv = "Csv",
  Parquet = "Parquet"
}

/**
 * Defines values for Format. \
 * {@link KnownFormat} can be used interchangeably with Format,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Csv** \
 * **Parquet**
 */
export type Format = string;

/** Known values of {@link Schedule} that the service accepts. */
export enum KnownSchedule {
  Daily = "Daily",
  Weekly = "Weekly"
}

/**
 * Defines values for Schedule. \
 * {@link KnownSchedule} can be used interchangeably with Schedule,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Daily** \
 * **Weekly**
 */
export type Schedule = string;

/** Known values of {@link ObjectType} that the service accepts. */
export enum KnownObjectType {
  Blob = "Blob",
  Container = "Container"
}

/**
 * Defines values for ObjectType. \
 * {@link KnownObjectType} can be used interchangeably with ObjectType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Blob** \
 * **Container**
 */
export type ObjectType = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  User = "User",
  Application = "Application",
  ManagedIdentity = "ManagedIdentity",
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link EncryptionScopeSource} that the service accepts. */
export enum KnownEncryptionScopeSource {
  MicrosoftStorage = "Microsoft.Storage",
  MicrosoftKeyVault = "Microsoft.KeyVault"
}

/**
 * Defines values for EncryptionScopeSource. \
 * {@link KnownEncryptionScopeSource} can be used interchangeably with EncryptionScopeSource,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Microsoft.Storage** \
 * **Microsoft.KeyVault**
 */
export type EncryptionScopeSource = string;

/** Known values of {@link EncryptionScopeState} that the service accepts. */
export enum KnownEncryptionScopeState {
  Enabled = "Enabled",
  Disabled = "Disabled"
}

/**
 * Defines values for EncryptionScopeState. \
 * {@link KnownEncryptionScopeState} can be used interchangeably with EncryptionScopeState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type EncryptionScopeState = string;

/** Known values of {@link CorsRuleAllowedMethodsItem} that the service accepts. */
export enum KnownCorsRuleAllowedMethodsItem {
  Delete = "DELETE",
  GET = "GET",
  Head = "HEAD",
  Merge = "MERGE",
  Post = "POST",
  Options = "OPTIONS",
  PUT = "PUT",
  Patch = "PATCH"
}

/**
 * Defines values for CorsRuleAllowedMethodsItem. \
 * {@link KnownCorsRuleAllowedMethodsItem} can be used interchangeably with CorsRuleAllowedMethodsItem,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **DELETE** \
 * **GET** \
 * **HEAD** \
 * **MERGE** \
 * **POST** \
 * **OPTIONS** \
 * **PUT** \
 * **PATCH**
 */
export type CorsRuleAllowedMethodsItem = string;

/** Known values of {@link Name} that the service accepts. */
export enum KnownName {
  AccessTimeTracking = "AccessTimeTracking"
}

/**
 * Defines values for Name. \
 * {@link KnownName} can be used interchangeably with Name,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AccessTimeTracking**
 */
export type Name = string;

/** Known values of {@link ListContainersInclude} that the service accepts. */
export enum KnownListContainersInclude {
  Deleted = "deleted"
}

/**
 * Defines values for ListContainersInclude. \
 * {@link KnownListContainersInclude} can be used interchangeably with ListContainersInclude,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **deleted**
 */
export type ListContainersInclude = string;

/** Known values of {@link LeaseStatus} that the service accepts. */
export enum KnownLeaseStatus {
  Locked = "Locked",
  Unlocked = "Unlocked"
}

/**
 * Defines values for LeaseStatus. \
 * {@link KnownLeaseStatus} can be used interchangeably with LeaseStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Locked** \
 * **Unlocked**
 */
export type LeaseStatus = string;

/** Known values of {@link LeaseState} that the service accepts. */
export enum KnownLeaseState {
  Available = "Available",
  Leased = "Leased",
  Expired = "Expired",
  Breaking = "Breaking",
  Broken = "Broken"
}

/**
 * Defines values for LeaseState. \
 * {@link KnownLeaseState} can be used interchangeably with LeaseState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Available** \
 * **Leased** \
 * **Expired** \
 * **Breaking** \
 * **Broken**
 */
export type LeaseState = string;

/** Known values of {@link LeaseDuration} that the service accepts. */
export enum KnownLeaseDuration {
  Infinite = "Infinite",
  Fixed = "Fixed"
}

/**
 * Defines values for LeaseDuration. \
 * {@link KnownLeaseDuration} can be used interchangeably with LeaseDuration,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Infinite** \
 * **Fixed**
 */
export type LeaseDuration = string;

/** Known values of {@link ImmutabilityPolicyState} that the service accepts. */
export enum KnownImmutabilityPolicyState {
  Locked = "Locked",
  Unlocked = "Unlocked"
}

/**
 * Defines values for ImmutabilityPolicyState. \
 * {@link KnownImmutabilityPolicyState} can be used interchangeably with ImmutabilityPolicyState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Locked** \
 * **Unlocked**
 */
export type ImmutabilityPolicyState = string;

/** Known values of {@link ImmutabilityPolicyUpdateType} that the service accepts. */
export enum KnownImmutabilityPolicyUpdateType {
  Put = "put",
  Lock = "lock",
  Extend = "extend"
}

/**
 * Defines values for ImmutabilityPolicyUpdateType. \
 * {@link KnownImmutabilityPolicyUpdateType} can be used interchangeably with ImmutabilityPolicyUpdateType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **put** \
 * **lock** \
 * **extend**
 */
export type ImmutabilityPolicyUpdateType = string;

/** Known values of {@link MigrationState} that the service accepts. */
export enum KnownMigrationState {
  InProgress = "InProgress",
  Completed = "Completed"
}

/**
 * Defines values for MigrationState. \
 * {@link KnownMigrationState} can be used interchangeably with MigrationState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **InProgress** \
 * **Completed**
 */
export type MigrationState = string;

/** Known values of {@link LeaseContainerRequestAction} that the service accepts. */
export enum KnownLeaseContainerRequestAction {
  Acquire = "Acquire",
  Renew = "Renew",
  Change = "Change",
  Release = "Release",
  Break = "Break"
}

/**
 * Defines values for LeaseContainerRequestAction. \
 * {@link KnownLeaseContainerRequestAction} can be used interchangeably with LeaseContainerRequestAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Acquire** \
 * **Renew** \
 * **Change** \
 * **Release** \
 * **Break**
 */
export type LeaseContainerRequestAction = string;

/** Known values of {@link EnabledProtocols} that the service accepts. */
export enum KnownEnabledProtocols {
  SMB = "SMB",
  NFS = "NFS"
}

/**
 * Defines values for EnabledProtocols. \
 * {@link KnownEnabledProtocols} can be used interchangeably with EnabledProtocols,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SMB** \
 * **NFS**
 */
export type EnabledProtocols = string;

/** Known values of {@link RootSquashType} that the service accepts. */
export enum KnownRootSquashType {
  NoRootSquash = "NoRootSquash",
  RootSquash = "RootSquash",
  AllSquash = "AllSquash"
}

/**
 * Defines values for RootSquashType. \
 * {@link KnownRootSquashType} can be used interchangeably with RootSquashType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NoRootSquash** \
 * **RootSquash** \
 * **AllSquash**
 */
export type RootSquashType = string;

/** Known values of {@link ShareAccessTier} that the service accepts. */
export enum KnownShareAccessTier {
  TransactionOptimized = "TransactionOptimized",
  Hot = "Hot",
  Cool = "Cool",
  Premium = "Premium"
}

/**
 * Defines values for ShareAccessTier. \
 * {@link KnownShareAccessTier} can be used interchangeably with ShareAccessTier,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **TransactionOptimized** \
 * **Hot** \
 * **Cool** \
 * **Premium**
 */
export type ShareAccessTier = string;

/** Known values of {@link LeaseShareAction} that the service accepts. */
export enum KnownLeaseShareAction {
  Acquire = "Acquire",
  Renew = "Renew",
  Change = "Change",
  Release = "Release",
  Break = "Break"
}

/**
 * Defines values for LeaseShareAction. \
 * {@link KnownLeaseShareAction} can be used interchangeably with LeaseShareAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Acquire** \
 * **Renew** \
 * **Change** \
 * **Release** \
 * **Break**
 */
export type LeaseShareAction = string;
/** Defines values for SkuTier. */
export type SkuTier = "Standard" | "Premium";
/** Defines values for Reason. */
export type Reason = "AccountNameInvalid" | "AlreadyExists";
/** Defines values for DefaultAction. */
export type DefaultAction = "Allow" | "Deny";
/** Defines values for AccessTier. */
export type AccessTier = "Hot" | "Cool" | "Premium";
/** Defines values for ProvisioningState. */
export type ProvisioningState = "Creating" | "ResolvingDNS" | "Succeeded";
/** Defines values for AccountStatus. */
export type AccountStatus = "available" | "unavailable";
/** Defines values for StorageAccountExpand. */
export type StorageAccountExpand = "geoReplicationStats" | "blobRestoreStatus";
/** Defines values for KeyPermission. */
export type KeyPermission = "Read" | "Full";
/** Defines values for UsageUnit. */
export type UsageUnit =
  | "Count"
  | "Bytes"
  | "Seconds"
  | "Percent"
  | "CountsPerSecond"
  | "BytesPerSecond";
/** Defines values for HttpProtocol. */
export type HttpProtocol = "https,http" | "https";
/** Defines values for PublicAccess. */
export type PublicAccess = "Container" | "Blob" | "None";

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface SkusListOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type SkusListResponse = StorageSkuListResult;

/** Optional parameters. */
export interface StorageAccountsCheckNameAvailabilityOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the checkNameAvailability operation. */
export type StorageAccountsCheckNameAvailabilityResponse = CheckNameAvailabilityResult;

/** Optional parameters. */
export interface StorageAccountsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type StorageAccountsCreateResponse = StorageAccount;

/** Optional parameters. */
export interface StorageAccountsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface StorageAccountsGetPropertiesOptionalParams
  extends coreClient.OperationOptions {
  /** May be used to expand the properties within account's properties. By default, data is not included when fetching properties. Currently we only support geoReplicationStats and blobRestoreStatus. */
  expand?: StorageAccountExpand;
}

/** Contains response data for the getProperties operation. */
export type StorageAccountsGetPropertiesResponse = StorageAccount;

/** Optional parameters. */
export interface StorageAccountsUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type StorageAccountsUpdateResponse = StorageAccount;

/** Optional parameters. */
export interface StorageAccountsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type StorageAccountsListResponse = StorageAccountListResult;

/** Optional parameters. */
export interface StorageAccountsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type StorageAccountsListByResourceGroupResponse = StorageAccountListResult;

/** Optional parameters. */
export interface StorageAccountsListKeysOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listKeys operation. */
export type StorageAccountsListKeysResponse = StorageAccountListKeysResult;

/** Optional parameters. */
export interface StorageAccountsRegenerateKeyOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the regenerateKey operation. */
export type StorageAccountsRegenerateKeyResponse = StorageAccountListKeysResult;

/** Optional parameters. */
export interface StorageAccountsListAccountSASOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listAccountSAS operation. */
export type StorageAccountsListAccountSASResponse = ListAccountSasResponse;

/** Optional parameters. */
export interface StorageAccountsListServiceSASOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listServiceSAS operation. */
export type StorageAccountsListServiceSASResponse = ListServiceSasResponse;

/** Optional parameters. */
export interface StorageAccountsFailoverOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface StorageAccountsHierarchicalNamespaceMigrationOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface StorageAccountsAbortHierarchicalNamespaceMigrationOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface StorageAccountsRestoreBlobRangesOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the restoreBlobRanges operation. */
export type StorageAccountsRestoreBlobRangesResponse = BlobRestoreStatus;

/** Optional parameters. */
export interface StorageAccountsRevokeUserDelegationKeysOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface StorageAccountsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type StorageAccountsListNextResponse = StorageAccountListResult;

/** Optional parameters. */
export interface StorageAccountsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type StorageAccountsListByResourceGroupNextResponse = StorageAccountListResult;

/** Optional parameters. */
export interface DeletedAccountsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type DeletedAccountsListResponse = DeletedAccountListResult;

/** Optional parameters. */
export interface DeletedAccountsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DeletedAccountsGetResponse = DeletedAccount;

/** Optional parameters. */
export interface DeletedAccountsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type DeletedAccountsListNextResponse = DeletedAccountListResult;

/** Optional parameters. */
export interface UsagesListByLocationOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByLocation operation. */
export type UsagesListByLocationResponse = UsageListResult;

/** Optional parameters. */
export interface ManagementPoliciesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ManagementPoliciesGetResponse = ManagementPolicy;

/** Optional parameters. */
export interface ManagementPoliciesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type ManagementPoliciesCreateOrUpdateResponse = ManagementPolicy;

/** Optional parameters. */
export interface ManagementPoliciesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface BlobInventoryPoliciesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type BlobInventoryPoliciesGetResponse = BlobInventoryPolicy;

/** Optional parameters. */
export interface BlobInventoryPoliciesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type BlobInventoryPoliciesCreateOrUpdateResponse = BlobInventoryPolicy;

/** Optional parameters. */
export interface BlobInventoryPoliciesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface BlobInventoryPoliciesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type BlobInventoryPoliciesListResponse = ListBlobInventoryPolicy;

/** Optional parameters. */
export interface PrivateEndpointConnectionsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type PrivateEndpointConnectionsListResponse = PrivateEndpointConnectionListResult;

/** Optional parameters. */
export interface PrivateEndpointConnectionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PrivateEndpointConnectionsGetResponse = PrivateEndpointConnection;

/** Optional parameters. */
export interface PrivateEndpointConnectionsPutOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the put operation. */
export type PrivateEndpointConnectionsPutResponse = PrivateEndpointConnection;

/** Optional parameters. */
export interface PrivateEndpointConnectionsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface PrivateLinkResourcesListByStorageAccountOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByStorageAccount operation. */
export type PrivateLinkResourcesListByStorageAccountResponse = PrivateLinkResourceListResult;

/** Optional parameters. */
export interface ObjectReplicationPoliciesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ObjectReplicationPoliciesListResponse = ObjectReplicationPolicies;

/** Optional parameters. */
export interface ObjectReplicationPoliciesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ObjectReplicationPoliciesGetResponse = ObjectReplicationPolicy;

/** Optional parameters. */
export interface ObjectReplicationPoliciesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type ObjectReplicationPoliciesCreateOrUpdateResponse = ObjectReplicationPolicy;

/** Optional parameters. */
export interface ObjectReplicationPoliciesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface LocalUsersListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type LocalUsersListResponse = LocalUsers;

/** Optional parameters. */
export interface LocalUsersGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type LocalUsersGetResponse = LocalUser;

/** Optional parameters. */
export interface LocalUsersCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type LocalUsersCreateOrUpdateResponse = LocalUser;

/** Optional parameters. */
export interface LocalUsersDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface LocalUsersListKeysOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listKeys operation. */
export type LocalUsersListKeysResponse = LocalUserKeys;

/** Optional parameters. */
export interface LocalUsersRegeneratePasswordOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the regeneratePassword operation. */
export type LocalUsersRegeneratePasswordResponse = LocalUserRegeneratePasswordResult;

/** Optional parameters. */
export interface EncryptionScopesPutOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the put operation. */
export type EncryptionScopesPutResponse = EncryptionScope;

/** Optional parameters. */
export interface EncryptionScopesPatchOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the patch operation. */
export type EncryptionScopesPatchResponse = EncryptionScope;

/** Optional parameters. */
export interface EncryptionScopesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type EncryptionScopesGetResponse = EncryptionScope;

/** Optional parameters. */
export interface EncryptionScopesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type EncryptionScopesListResponse = EncryptionScopeListResult;

/** Optional parameters. */
export interface EncryptionScopesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type EncryptionScopesListNextResponse = EncryptionScopeListResult;

/** Optional parameters. */
export interface BlobServicesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type BlobServicesListResponse = BlobServiceItems;

/** Optional parameters. */
export interface BlobServicesSetServicePropertiesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the setServiceProperties operation. */
export type BlobServicesSetServicePropertiesResponse = BlobServiceProperties;

/** Optional parameters. */
export interface BlobServicesGetServicePropertiesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getServiceProperties operation. */
export type BlobServicesGetServicePropertiesResponse = BlobServiceProperties;

/** Optional parameters. */
export interface BlobContainersListOptionalParams
  extends coreClient.OperationOptions {
  /** Optional. Specified maximum number of containers that can be included in the list. */
  maxpagesize?: string;
  /** Optional. When specified, only container names starting with the filter will be listed. */
  filter?: string;
  /** Optional, used to include the properties for soft deleted blob containers. */
  include?: ListContainersInclude;
}

/** Contains response data for the list operation. */
export type BlobContainersListResponse = ListContainerItems;

/** Optional parameters. */
export interface BlobContainersCreateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type BlobContainersCreateResponse = BlobContainer;

/** Optional parameters. */
export interface BlobContainersUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type BlobContainersUpdateResponse = BlobContainer;

/** Optional parameters. */
export interface BlobContainersGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type BlobContainersGetResponse = BlobContainer;

/** Optional parameters. */
export interface BlobContainersDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface BlobContainersSetLegalHoldOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the setLegalHold operation. */
export type BlobContainersSetLegalHoldResponse = LegalHold;

/** Optional parameters. */
export interface BlobContainersClearLegalHoldOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the clearLegalHold operation. */
export type BlobContainersClearLegalHoldResponse = LegalHold;

/** Optional parameters. */
export interface BlobContainersCreateOrUpdateImmutabilityPolicyOptionalParams
  extends coreClient.OperationOptions {
  /** The ImmutabilityPolicy Properties that will be created or updated to a blob container. */
  parameters?: ImmutabilityPolicy;
  /** The entity state (ETag) version of the immutability policy to update. A value of "*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. */
  ifMatch?: string;
}

/** Contains response data for the createOrUpdateImmutabilityPolicy operation. */
export type BlobContainersCreateOrUpdateImmutabilityPolicyResponse = BlobContainersCreateOrUpdateImmutabilityPolicyHeaders &
  ImmutabilityPolicy;

/** Optional parameters. */
export interface BlobContainersGetImmutabilityPolicyOptionalParams
  extends coreClient.OperationOptions {
  /** The entity state (ETag) version of the immutability policy to update. A value of "*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. */
  ifMatch?: string;
}

/** Contains response data for the getImmutabilityPolicy operation. */
export type BlobContainersGetImmutabilityPolicyResponse = BlobContainersGetImmutabilityPolicyHeaders &
  ImmutabilityPolicy;

/** Optional parameters. */
export interface BlobContainersDeleteImmutabilityPolicyOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the deleteImmutabilityPolicy operation. */
export type BlobContainersDeleteImmutabilityPolicyResponse = BlobContainersDeleteImmutabilityPolicyHeaders &
  ImmutabilityPolicy;

/** Optional parameters. */
export interface BlobContainersLockImmutabilityPolicyOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the lockImmutabilityPolicy operation. */
export type BlobContainersLockImmutabilityPolicyResponse = BlobContainersLockImmutabilityPolicyHeaders &
  ImmutabilityPolicy;

/** Optional parameters. */
export interface BlobContainersExtendImmutabilityPolicyOptionalParams
  extends coreClient.OperationOptions {
  /** The ImmutabilityPolicy Properties that will be extended for a blob container. */
  parameters?: ImmutabilityPolicy;
}

/** Contains response data for the extendImmutabilityPolicy operation. */
export type BlobContainersExtendImmutabilityPolicyResponse = BlobContainersExtendImmutabilityPolicyHeaders &
  ImmutabilityPolicy;

/** Optional parameters. */
export interface BlobContainersLeaseOptionalParams
  extends coreClient.OperationOptions {
  /** Lease Container request body. */
  parameters?: LeaseContainerRequest;
}

/** Contains response data for the lease operation. */
export type BlobContainersLeaseResponse = LeaseContainerResponse;

/** Optional parameters. */
export interface BlobContainersObjectLevelWormOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface BlobContainersListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Optional. Specified maximum number of containers that can be included in the list. */
  maxpagesize?: string;
  /** Optional. When specified, only container names starting with the filter will be listed. */
  filter?: string;
  /** Optional, used to include the properties for soft deleted blob containers. */
  include?: ListContainersInclude;
}

/** Contains response data for the listNext operation. */
export type BlobContainersListNextResponse = ListContainerItems;

/** Optional parameters. */
export interface FileServicesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type FileServicesListResponse = FileServiceItems;

/** Optional parameters. */
export interface FileServicesSetServicePropertiesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the setServiceProperties operation. */
export type FileServicesSetServicePropertiesResponse = FileServiceProperties;

/** Optional parameters. */
export interface FileServicesGetServicePropertiesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getServiceProperties operation. */
export type FileServicesGetServicePropertiesResponse = FileServiceProperties;

/** Optional parameters. */
export interface FileSharesListOptionalParams
  extends coreClient.OperationOptions {
  /** Optional. Specified maximum number of shares that can be included in the list. */
  maxpagesize?: string;
  /** Optional. When specified, only share names starting with the filter will be listed. */
  filter?: string;
  /** Optional, used to expand the properties within share's properties. Valid values are: deleted, snapshots. Should be passed as a string with delimiter ',' */
  expand?: string;
}

/** Contains response data for the list operation. */
export type FileSharesListResponse = FileShareItems;

/** Optional parameters. */
export interface FileSharesCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Optional, used to expand the properties within share's properties. Valid values are: snapshots. Should be passed as a string with delimiter ',' */
  expand?: string;
}

/** Contains response data for the create operation. */
export type FileSharesCreateResponse = FileShare;

/** Optional parameters. */
export interface FileSharesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type FileSharesUpdateResponse = FileShare;

/** Optional parameters. */
export interface FileSharesGetOptionalParams
  extends coreClient.OperationOptions {
  /** Optional, used to expand the properties within share's properties. Valid values are: stats. Should be passed as a string with delimiter ','. */
  expand?: string;
  /** Optional, used to retrieve properties of a snapshot. */
  xMsSnapshot?: string;
}

/** Contains response data for the get operation. */
export type FileSharesGetResponse = FileShare;

/** Optional parameters. */
export interface FileSharesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Optional, used to delete a snapshot. */
  xMsSnapshot?: string;
  /** Optional. Valid values are: snapshots, leased-snapshots, none. The default value is snapshots. For 'snapshots', the file share is deleted including all of its file share snapshots. If the file share contains leased-snapshots, the deletion fails. For 'leased-snapshots', the file share is deleted included all of its file share snapshots (leased/unleased). For 'none', the file share is deleted if it has no share snapshots. If the file share contains any snapshots (leased or unleased), the deletion fails. */
  include?: string;
}

/** Optional parameters. */
export interface FileSharesRestoreOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface FileSharesLeaseOptionalParams
  extends coreClient.OperationOptions {
  /** Optional. Specify the snapshot time to lease a snapshot. */
  xMsSnapshot?: string;
  /** Lease Share request body. */
  parameters?: LeaseShareRequest;
}

/** Contains response data for the lease operation. */
export type FileSharesLeaseResponse = FileSharesLeaseHeaders &
  LeaseShareResponse;

/** Optional parameters. */
export interface FileSharesListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Optional. Specified maximum number of shares that can be included in the list. */
  maxpagesize?: string;
  /** Optional. When specified, only share names starting with the filter will be listed. */
  filter?: string;
  /** Optional, used to expand the properties within share's properties. Valid values are: deleted, snapshots. Should be passed as a string with delimiter ',' */
  expand?: string;
}

/** Contains response data for the listNext operation. */
export type FileSharesListNextResponse = FileShareItems;

/** Optional parameters. */
export interface QueueServicesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type QueueServicesListResponse = ListQueueServices;

/** Optional parameters. */
export interface QueueServicesSetServicePropertiesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the setServiceProperties operation. */
export type QueueServicesSetServicePropertiesResponse = QueueServiceProperties;

/** Optional parameters. */
export interface QueueServicesGetServicePropertiesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getServiceProperties operation. */
export type QueueServicesGetServicePropertiesResponse = QueueServiceProperties;

/** Optional parameters. */
export interface QueueCreateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type QueueCreateResponse = StorageQueue;

/** Optional parameters. */
export interface QueueUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type QueueUpdateResponse = StorageQueue;

/** Optional parameters. */
export interface QueueGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type QueueGetResponse = StorageQueue;

/** Optional parameters. */
export interface QueueDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface QueueListOptionalParams extends coreClient.OperationOptions {
  /** Optional, a maximum number of queues that should be included in a list queue response */
  maxpagesize?: string;
  /** Optional, When specified, only the queues with a name starting with the given filter will be listed. */
  filter?: string;
}

/** Contains response data for the list operation. */
export type QueueListResponse = ListQueueResource;

/** Optional parameters. */
export interface QueueListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Optional, a maximum number of queues that should be included in a list queue response */
  maxpagesize?: string;
  /** Optional, When specified, only the queues with a name starting with the given filter will be listed. */
  filter?: string;
}

/** Contains response data for the listNext operation. */
export type QueueListNextResponse = ListQueueResource;

/** Optional parameters. */
export interface TableServicesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type TableServicesListResponse = ListTableServices;

/** Optional parameters. */
export interface TableServicesSetServicePropertiesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the setServiceProperties operation. */
export type TableServicesSetServicePropertiesResponse = TableServiceProperties;

/** Optional parameters. */
export interface TableServicesGetServicePropertiesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getServiceProperties operation. */
export type TableServicesGetServicePropertiesResponse = TableServiceProperties;

/** Optional parameters. */
export interface TableCreateOptionalParams extends coreClient.OperationOptions {
  /** The parameters to provide to create a table. */
  parameters?: Table;
}

/** Contains response data for the create operation. */
export type TableCreateResponse = Table;

/** Optional parameters. */
export interface TableUpdateOptionalParams extends coreClient.OperationOptions {
  /** The parameters to provide to create a table. */
  parameters?: Table;
}

/** Contains response data for the update operation. */
export type TableUpdateResponse = Table;

/** Optional parameters. */
export interface TableGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type TableGetResponse = Table;

/** Optional parameters. */
export interface TableDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface TableListOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type TableListResponse = ListTableResource;

/** Optional parameters. */
export interface TableListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type TableListNextResponse = ListTableResource;

/** Optional parameters. */
export interface StorageManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
