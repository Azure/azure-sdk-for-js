/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * Display metadata associated with the operation.
 */
export interface OperationDisplay {
  /**
   * Service provider: Microsoft Storage.
   */
  provider?: string;
  /**
   * Resource on which the operation is performed etc.
   */
  resource?: string;
  /**
   * Type of operation: get, read, delete, etc.
   */
  operation?: string;
  /**
   * Description of the operation.
   */
  description?: string;
}

/**
 * Dimension of blobs, possibly be blob type or access tier.
 */
export interface Dimension {
  /**
   * Display name of dimension.
   */
  name?: string;
  /**
   * Display name of dimension.
   */
  displayName?: string;
}

/**
 * Metric specification of operation.
 */
export interface MetricSpecification {
  /**
   * Name of metric specification.
   */
  name?: string;
  /**
   * Display name of metric specification.
   */
  displayName?: string;
  /**
   * Display description of metric specification.
   */
  displayDescription?: string;
  /**
   * Unit could be Bytes or Count.
   */
  unit?: string;
  /**
   * Dimensions of blobs, including blob type and access tier.
   */
  dimensions?: Dimension[];
  /**
   * Aggregation type could be Average.
   */
  aggregationType?: string;
  /**
   * The property to decide fill gap with zero or not.
   */
  fillGapWithZero?: boolean;
  /**
   * The category this metric specification belong to, could be Capacity.
   */
  category?: string;
  /**
   * Account Resource Id.
   */
  resourceIdDimensionNameOverride?: string;
}

/**
 * One property of operation, include metric specifications.
 */
export interface ServiceSpecification {
  /**
   * Metric specifications of operation.
   */
  metricSpecifications?: MetricSpecification[];
}

/**
 * Storage REST API operation definition.
 */
export interface Operation {
  /**
   * Operation name: {provider}/{resource}/{operation}
   */
  name?: string;
  /**
   * Display metadata associated with the operation.
   */
  display?: OperationDisplay;
  /**
   * The origin of operations.
   */
  origin?: string;
  /**
   * One property of operation, include metric specifications.
   */
  serviceSpecification?: ServiceSpecification;
}

/**
 * The parameters used to check the availability of the storage account name.
 */
export interface StorageAccountCheckNameAvailabilityParameters {
  /**
   * The storage account name.
   */
  name: string;
}

/**
 * The capability information in the specified SKU, including file encryption, network ACLs, change
 * notification, etc.
 */
export interface SKUCapability {
  /**
   * The name of capability, The capability information in the specified SKU, including file
   * encryption, network ACLs, change notification, etc.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * A string value to indicate states of given capability. Possibly 'true' or 'false'.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: string;
}

/**
 * The restriction because of which SKU cannot be used.
 */
export interface Restriction {
  /**
   * The type of restrictions. As of now only possible value for this is location.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * The value of restrictions. If the restriction type is set to location. This would be different
   * locations where the SKU is restricted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly values?: string[];
  /**
   * The reason for the restriction. As of now this can be "QuotaId" or
   * "NotAvailableForSubscription". Quota Id is set when the SKU has requiredQuotas parameter as
   * the subscription does not belong to that quota. The "NotAvailableForSubscription" is related
   * to capacity at DC. Possible values include: 'QuotaId', 'NotAvailableForSubscription'
   */
  reasonCode?: ReasonCode;
}

/**
 * The SKU of the storage account.
 */
export interface Sku {
  /**
   * Gets or sets the SKU name. Required for account creation; optional for update. Note that in
   * older versions, SKU name was called accountType. Possible values include: 'Standard_LRS',
   * 'Standard_GRS', 'Standard_RAGRS', 'Standard_ZRS', 'Premium_LRS', 'Premium_ZRS',
   * 'Standard_GZRS', 'Standard_RAGZRS'
   */
  name: SkuName;
  /**
   * Gets the SKU tier. This is based on the SKU name. Possible values include: 'Standard',
   * 'Premium'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tier?: SkuTier;
  /**
   * The type of the resource, usually it is 'storageAccounts'.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resourceType?: string;
  /**
   * Indicates the type of storage account. Possible values include: 'Storage', 'StorageV2',
   * 'BlobStorage', 'FileStorage', 'BlockBlobStorage'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly kind?: Kind;
  /**
   * The set of locations that the SKU is available. This will be supported and registered Azure
   * Geo Regions (e.g. West US, East US, Southeast Asia, etc.).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly locations?: string[];
  /**
   * The capability information in the specified SKU, including file encryption, network ACLs,
   * change notification, etc.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly capabilities?: SKUCapability[];
  /**
   * The restrictions because of which SKU cannot be used. This is empty if there are no
   * restrictions.
   */
  restrictions?: Restriction[];
}

/**
 * The CheckNameAvailability operation response.
 */
export interface CheckNameAvailabilityResult {
  /**
   * Gets a boolean value that indicates whether the name is available for you to use. If true, the
   * name is available. If false, the name has already been taken or is invalid and cannot be used.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nameAvailable?: boolean;
  /**
   * Gets the reason that a storage account name could not be used. The Reason element is only
   * returned if NameAvailable is false. Possible values include: 'AccountNameInvalid',
   * 'AlreadyExists'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly reason?: Reason;
  /**
   * Gets an error message explaining the Reason value in more detail.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
}

/**
 * The custom domain assigned to this storage account. This can be set via Update.
 */
export interface CustomDomain {
  /**
   * Gets or sets the custom domain name assigned to the storage account. Name is the CNAME source.
   */
  name: string;
  /**
   * Indicates whether indirect CName validation is enabled. Default value is false. This should
   * only be set on updates.
   */
  useSubDomainName?: boolean;
}

/**
 * A service that allows server-side encryption to be used.
 */
export interface EncryptionService {
  /**
   * A boolean indicating whether or not the service encrypts the data as it is stored.
   */
  enabled?: boolean;
  /**
   * Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only
   * returned when encryption is enabled. There might be some unencrypted blobs which were written
   * after this time, as it is just a rough estimate.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastEnabledTime?: Date;
}

/**
 * A list of services that support encryption.
 */
export interface EncryptionServices {
  /**
   * The encryption function of the blob storage service.
   */
  blob?: EncryptionService;
  /**
   * The encryption function of the file storage service.
   */
  file?: EncryptionService;
  /**
   * The encryption function of the table storage service.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly table?: EncryptionService;
  /**
   * The encryption function of the queue storage service.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly queue?: EncryptionService;
}

/**
 * Properties of key vault.
 */
export interface KeyVaultProperties {
  /**
   * The name of KeyVault key.
   */
  keyName?: string;
  /**
   * The version of KeyVault key.
   */
  keyVersion?: string;
  /**
   * The Uri of KeyVault.
   */
  keyVaultUri?: string;
}

/**
 * The encryption settings on the storage account.
 */
export interface Encryption {
  /**
   * List of services which support encryption.
   */
  services?: EncryptionServices;
  /**
   * The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage,
   * Microsoft.Keyvault. Possible values include: 'Microsoft.Storage', 'Microsoft.Keyvault'.
   * Default value: 'Microsoft.Storage'.
   */
  keySource: KeySource;
  /**
   * Properties provided by key vault.
   */
  keyVaultProperties?: KeyVaultProperties;
}

/**
 * Virtual Network rule.
 */
export interface VirtualNetworkRule {
  /**
   * Resource ID of a subnet, for example:
   * /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
   */
  virtualNetworkResourceId: string;
  /**
   * The action of virtual network rule. Possible values include: 'Allow'. Default value: 'Allow'.
   */
  action?: Action;
  /**
   * Gets the state of virtual network rule. Possible values include: 'provisioning',
   * 'deprovisioning', 'succeeded', 'failed', 'networkSourceDeleted'
   */
  state?: State;
}

/**
 * IP rule with specific IP or IP range in CIDR format.
 */
export interface IPRule {
  /**
   * Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.
   */
  iPAddressOrRange: string;
  /**
   * The action of IP ACL rule. Possible values include: 'Allow'. Default value: 'Allow'.
   */
  action?: Action;
}

/**
 * Network rule set
 */
export interface NetworkRuleSet {
  /**
   * Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are
   * any combination of Logging|Metrics|AzureServices (For example, "Logging, Metrics"), or None to
   * bypass none of those traffics. Possible values include: 'None', 'Logging', 'Metrics',
   * 'AzureServices'. Default value: 'AzureServices'.
   */
  bypass?: Bypass;
  /**
   * Sets the virtual network rules
   */
  virtualNetworkRules?: VirtualNetworkRule[];
  /**
   * Sets the IP ACL rules
   */
  ipRules?: IPRule[];
  /**
   * Specifies the default action of allow or deny when no other rules match. Possible values
   * include: 'Allow', 'Deny'. Default value: 'Allow'.
   */
  defaultAction: DefaultAction;
}

/**
 * Settings for Azure Files identity based authentication.
 */
export interface AzureFilesIdentityBasedAuthentication {
  /**
   * Indicates the directory service used. Possible values include: 'None', 'AADDS'
   */
  directoryServiceOptions: DirectoryServiceOptions;
}

/**
 * Identity for the resource.
 */
export interface Identity {
  /**
   * The principal ID of resource identity.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalId?: string;
  /**
   * The tenant ID of resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tenantId?: string;
}

/**
 * The parameters used when creating a storage account.
 */
export interface StorageAccountCreateParameters {
  /**
   * Required. Gets or sets the SKU name.
   */
  sku: Sku;
  /**
   * Required. Indicates the type of storage account. Possible values include: 'Storage',
   * 'StorageV2', 'BlobStorage', 'FileStorage', 'BlockBlobStorage'
   */
  kind: Kind;
  /**
   * Required. Gets or sets the location of the resource. This will be one of the supported and
   * registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.). The geo region of
   * a resource cannot be changed once it is created, but if an identical geo region is specified
   * on update, the request will succeed.
   */
  location: string;
  /**
   * Gets or sets a list of key value pairs that describe the resource. These tags can be used for
   * viewing and grouping this resource (across resource groups). A maximum of 15 tags can be
   * provided for a resource. Each tag must have a key with a length no greater than 128 characters
   * and a value with a length no greater than 256 characters.
   */
  tags?: { [propertyName: string]: string };
  /**
   * The identity of the resource.
   */
  identity?: Identity;
  /**
   * User domain assigned to the storage account. Name is the CNAME source. Only one custom domain
   * is supported per storage account at this time. To clear the existing custom domain, use an
   * empty string for the custom domain name property.
   */
  customDomain?: CustomDomain;
  /**
   * Provides the encryption settings on the account. If left unspecified the account encryption
   * settings will remain the same. The default setting is unencrypted.
   */
  encryption?: Encryption;
  /**
   * Network rule set
   */
  networkRuleSet?: NetworkRuleSet;
  /**
   * Required for storage accounts where kind = BlobStorage. The access tier used for billing.
   * Possible values include: 'Hot', 'Cool'
   */
  accessTier?: AccessTier;
  /**
   * Provides the identity based authentication settings for Azure Files.
   */
  azureFilesIdentityBasedAuthentication?: AzureFilesIdentityBasedAuthentication;
  /**
   * Allows https traffic only to storage service if sets to true. The default value is true since
   * API version 2019-04-01.
   */
  enableHttpsTrafficOnly?: boolean;
  /**
   * Account HierarchicalNamespace enabled if sets to true.
   */
  isHnsEnabled?: boolean;
}

/**
 * The URIs that are used to perform a retrieval of a public blob, queue, table, web or dfs object.
 */
export interface Endpoints {
  /**
   * Gets the blob endpoint.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly blob?: string;
  /**
   * Gets the queue endpoint.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly queue?: string;
  /**
   * Gets the table endpoint.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly table?: string;
  /**
   * Gets the file endpoint.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly file?: string;
  /**
   * Gets the web endpoint.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly web?: string;
  /**
   * Gets the dfs endpoint.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly dfs?: string;
}

/**
 * Statistics related to replication for storage account's Blob, Table, Queue and File services. It
 * is only available when geo-redundant replication is enabled for the storage account.
 */
export interface GeoReplicationStats {
  /**
   * The status of the secondary location. Possible values are: - Live: Indicates that the
   * secondary location is active and operational. - Bootstrap: Indicates initial synchronization
   * from the primary location to the secondary location is in progress.This typically occurs when
   * replication is first enabled. - Unavailable: Indicates that the secondary location is
   * temporarily unavailable. Possible values include: 'Live', 'Bootstrap', 'Unavailable'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: GeoReplicationStatus;
  /**
   * All primary writes preceding this UTC date/time value are guaranteed to be available for read
   * operations. Primary writes following this point in time may or may not be available for reads.
   * Element may be default value if value of LastSyncTime is not available, this can happen if
   * secondary is offline or we are in bootstrap.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastSyncTime?: Date;
  /**
   * A boolean flag which indicates whether or not account failover is supported for the account.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly canFailover?: boolean;
}

/**
 * An interface representing Resource.
 */
export interface Resource extends BaseResource {
  /**
   * Fully qualified resource Id for the resource. Ex -
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The name of the resource
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The type of the resource. Ex- Microsoft.Compute/virtualMachines or
   * Microsoft.Storage/storageAccounts.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * The resource model definition for a ARM tracked top level resource
 */
export interface TrackedResource extends Resource {
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * The geo-location where the resource lives
   */
  location: string;
}

/**
 * The storage account.
 */
export interface StorageAccount extends TrackedResource {
  /**
   * Gets the SKU.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sku?: Sku;
  /**
   * Gets the Kind. Possible values include: 'Storage', 'StorageV2', 'BlobStorage', 'FileStorage',
   * 'BlockBlobStorage'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly kind?: Kind;
  /**
   * The identity of the resource.
   */
  identity?: Identity;
  /**
   * Gets the status of the storage account at the time the operation was called. Possible values
   * include: 'Creating', 'ResolvingDNS', 'Succeeded'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Gets the URLs that are used to perform a retrieval of a public blob, queue, or table object.
   * Note that Standard_ZRS and Premium_LRS accounts only return the blob endpoint.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly primaryEndpoints?: Endpoints;
  /**
   * Gets the location of the primary data center for the storage account.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly primaryLocation?: string;
  /**
   * Gets the status indicating whether the primary location of the storage account is available or
   * unavailable. Possible values include: 'available', 'unavailable'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly statusOfPrimary?: AccountStatus;
  /**
   * Gets the timestamp of the most recent instance of a failover to the secondary location. Only
   * the most recent timestamp is retained. This element is not returned if there has never been a
   * failover instance. Only available if the accountType is Standard_GRS or Standard_RAGRS.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastGeoFailoverTime?: Date;
  /**
   * Gets the location of the geo-replicated secondary for the storage account. Only available if
   * the accountType is Standard_GRS or Standard_RAGRS.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly secondaryLocation?: string;
  /**
   * Gets the status indicating whether the secondary location of the storage account is available
   * or unavailable. Only available if the SKU name is Standard_GRS or Standard_RAGRS. Possible
   * values include: 'available', 'unavailable'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly statusOfSecondary?: AccountStatus;
  /**
   * Gets the creation date and time of the storage account in UTC.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly creationTime?: Date;
  /**
   * Gets the custom domain the user assigned to this storage account.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly customDomain?: CustomDomain;
  /**
   * Gets the URLs that are used to perform a retrieval of a public blob, queue, or table object
   * from the secondary location of the storage account. Only available if the SKU name is
   * Standard_RAGRS.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly secondaryEndpoints?: Endpoints;
  /**
   * Gets the encryption settings on the account. If unspecified, the account is unencrypted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly encryption?: Encryption;
  /**
   * Required for storage accounts where kind = BlobStorage. The access tier used for billing.
   * Possible values include: 'Hot', 'Cool'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly accessTier?: AccessTier;
  /**
   * Provides the identity based authentication settings for Azure Files.
   */
  azureFilesIdentityBasedAuthentication?: AzureFilesIdentityBasedAuthentication;
  /**
   * Allows https traffic only to storage service if sets to true.
   */
  enableHttpsTrafficOnly?: boolean;
  /**
   * Network rule set
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly networkRuleSet?: NetworkRuleSet;
  /**
   * Account HierarchicalNamespace enabled if sets to true.
   */
  isHnsEnabled?: boolean;
  /**
   * Geo Replication Stats
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly geoReplicationStats?: GeoReplicationStats;
  /**
   * If the failover is in progress, the value will be true, otherwise, it will be null.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly failoverInProgress?: boolean;
}

/**
 * An access key for the storage account.
 */
export interface StorageAccountKey {
  /**
   * Name of the key.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly keyName?: string;
  /**
   * Base 64-encoded value of the key.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: string;
  /**
   * Permissions for the key -- read-only or full permissions. Possible values include: 'Read',
   * 'Full'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly permissions?: KeyPermission;
}

/**
 * The response from the ListKeys operation.
 */
export interface StorageAccountListKeysResult {
  /**
   * Gets the list of storage account keys and their properties for the specified storage account.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly keys?: StorageAccountKey[];
}

/**
 * The parameters used to regenerate the storage account key.
 */
export interface StorageAccountRegenerateKeyParameters {
  /**
   * The name of storage keys that want to be regenerated, possible values are key1, key2.
   */
  keyName: string;
}

/**
 * The parameters that can be provided when updating the storage account properties.
 */
export interface StorageAccountUpdateParameters {
  /**
   * Gets or sets the SKU name. Note that the SKU name cannot be updated to Standard_ZRS,
   * Premium_LRS or Premium_ZRS, nor can accounts of those SKU names be updated to any other value.
   */
  sku?: Sku;
  /**
   * Gets or sets a list of key value pairs that describe the resource. These tags can be used in
   * viewing and grouping this resource (across resource groups). A maximum of 15 tags can be
   * provided for a resource. Each tag must have a key no greater in length than 128 characters and
   * a value no greater in length than 256 characters.
   */
  tags?: { [propertyName: string]: string };
  /**
   * The identity of the resource.
   */
  identity?: Identity;
  /**
   * Custom domain assigned to the storage account by the user. Name is the CNAME source. Only one
   * custom domain is supported per storage account at this time. To clear the existing custom
   * domain, use an empty string for the custom domain name property.
   */
  customDomain?: CustomDomain;
  /**
   * Provides the encryption settings on the account. The default setting is unencrypted.
   */
  encryption?: Encryption;
  /**
   * Required for storage accounts where kind = BlobStorage. The access tier used for billing.
   * Possible values include: 'Hot', 'Cool'
   */
  accessTier?: AccessTier;
  /**
   * Provides the identity based authentication settings for Azure Files.
   */
  azureFilesIdentityBasedAuthentication?: AzureFilesIdentityBasedAuthentication;
  /**
   * Allows https traffic only to storage service if sets to true.
   */
  enableHttpsTrafficOnly?: boolean;
  /**
   * Network rule set
   */
  networkRuleSet?: NetworkRuleSet;
  /**
   * Optional. Indicates the type of storage account. Currently only StorageV2 value supported by
   * server. Possible values include: 'Storage', 'StorageV2', 'BlobStorage', 'FileStorage',
   * 'BlockBlobStorage'
   */
  kind?: Kind;
}

/**
 * The usage names that can be used; currently limited to StorageAccount.
 */
export interface UsageName {
  /**
   * Gets a string describing the resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: string;
  /**
   * Gets a localized string describing the resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly localizedValue?: string;
}

/**
 * Describes Storage Resource Usage.
 */
export interface Usage {
  /**
   * Gets the unit of measurement. Possible values include: 'Count', 'Bytes', 'Seconds', 'Percent',
   * 'CountsPerSecond', 'BytesPerSecond'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly unit?: UsageUnit;
  /**
   * Gets the current count of the allocated resources in the subscription.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly currentValue?: number;
  /**
   * Gets the maximum count of the resources that can be allocated in the subscription.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly limit?: number;
  /**
   * Gets the name of the type of usage.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: UsageName;
}

/**
 * The parameters to list SAS credentials of a storage account.
 */
export interface AccountSasParameters {
  /**
   * The signed services accessible with the account SAS. Possible values include: Blob (b), Queue
   * (q), Table (t), File (f). Possible values include: 'b', 'q', 't', 'f'
   */
  services: Services;
  /**
   * The signed resource types that are accessible with the account SAS. Service (s): Access to
   * service-level APIs; Container (c): Access to container-level APIs; Object (o): Access to
   * object-level APIs for blobs, queue messages, table entities, and files. Possible values
   * include: 's', 'c', 'o'
   */
  resourceTypes: SignedResourceTypes;
  /**
   * The signed permissions for the account SAS. Possible values include: Read (r), Write (w),
   * Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p). Possible values
   * include: 'r', 'd', 'w', 'l', 'a', 'c', 'u', 'p'
   */
  permissions: Permissions;
  /**
   * An IP address or a range of IP addresses from which to accept requests.
   */
  iPAddressOrRange?: string;
  /**
   * The protocol permitted for a request made with the account SAS. Possible values include:
   * 'https,http', 'https'
   */
  protocols?: HttpProtocol;
  /**
   * The time at which the SAS becomes valid.
   */
  sharedAccessStartTime?: Date;
  /**
   * The time at which the shared access signature becomes invalid.
   */
  sharedAccessExpiryTime: Date;
  /**
   * The key to sign the account SAS token with.
   */
  keyToSign?: string;
}

/**
 * The List SAS credentials operation response.
 */
export interface ListAccountSasResponse {
  /**
   * List SAS credentials of storage account.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly accountSasToken?: string;
}

/**
 * The parameters to list service SAS credentials of a specific resource.
 */
export interface ServiceSasParameters {
  /**
   * The canonical path to the signed resource.
   */
  canonicalizedResource: string;
  /**
   * The signed services accessible with the service SAS. Possible values include: Blob (b),
   * Container (c), File (f), Share (s). Possible values include: 'b', 'c', 'f', 's'
   */
  resource?: SignedResource;
  /**
   * The signed permissions for the service SAS. Possible values include: Read (r), Write (w),
   * Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p). Possible values
   * include: 'r', 'd', 'w', 'l', 'a', 'c', 'u', 'p'
   */
  permissions?: Permissions;
  /**
   * An IP address or a range of IP addresses from which to accept requests.
   */
  iPAddressOrRange?: string;
  /**
   * The protocol permitted for a request made with the account SAS. Possible values include:
   * 'https,http', 'https'
   */
  protocols?: HttpProtocol;
  /**
   * The time at which the SAS becomes valid.
   */
  sharedAccessStartTime?: Date;
  /**
   * The time at which the shared access signature becomes invalid.
   */
  sharedAccessExpiryTime?: Date;
  /**
   * A unique value up to 64 characters in length that correlates to an access policy specified for
   * the container, queue, or table.
   */
  identifier?: string;
  /**
   * The start of partition key.
   */
  partitionKeyStart?: string;
  /**
   * The end of partition key.
   */
  partitionKeyEnd?: string;
  /**
   * The start of row key.
   */
  rowKeyStart?: string;
  /**
   * The end of row key.
   */
  rowKeyEnd?: string;
  /**
   * The key to sign the account SAS token with.
   */
  keyToSign?: string;
  /**
   * The response header override for cache control.
   */
  cacheControl?: string;
  /**
   * The response header override for content disposition.
   */
  contentDisposition?: string;
  /**
   * The response header override for content encoding.
   */
  contentEncoding?: string;
  /**
   * The response header override for content language.
   */
  contentLanguage?: string;
  /**
   * The response header override for content type.
   */
  contentType?: string;
}

/**
 * The List service SAS credentials operation response.
 */
export interface ListServiceSasResponse {
  /**
   * List service SAS credentials of specific resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serviceSasToken?: string;
}

/**
 * Object to define the number of days after last modification.
 */
export interface DateAfterModification {
  /**
   * Integer value indicating the age in days after last modification
   */
  daysAfterModificationGreaterThan: number;
}

/**
 * Management policy action for base blob.
 */
export interface ManagementPolicyBaseBlob {
  /**
   * The function to tier blobs to cool storage. Support blobs currently at Hot tier
   */
  tierToCool?: DateAfterModification;
  /**
   * The function to tier blobs to archive storage. Support blobs currently at Hot or Cool tier
   */
  tierToArchive?: DateAfterModification;
  /**
   * The function to delete the blob
   */
  deleteProperty?: DateAfterModification;
}

/**
 * Object to define the number of days after creation.
 */
export interface DateAfterCreation {
  /**
   * Integer value indicating the age in days after creation
   */
  daysAfterCreationGreaterThan: number;
}

/**
 * Management policy action for snapshot.
 */
export interface ManagementPolicySnapShot {
  /**
   * The function to delete the blob snapshot
   */
  deleteProperty?: DateAfterCreation;
}

/**
 * Actions are applied to the filtered blobs when the execution condition is met.
 */
export interface ManagementPolicyAction {
  /**
   * The management policy action for base blob
   */
  baseBlob?: ManagementPolicyBaseBlob;
  /**
   * The management policy action for snapshot
   */
  snapshot?: ManagementPolicySnapShot;
}

/**
 * Filters limit rule actions to a subset of blobs within the storage account. If multiple filters
 * are defined, a logical AND is performed on all filters.
 */
export interface ManagementPolicyFilter {
  /**
   * An array of strings for prefixes to be match.
   */
  prefixMatch?: string[];
  /**
   * An array of predefined enum values. Only blockBlob is supported.
   */
  blobTypes: string[];
}

/**
 * An object that defines the Lifecycle rule. Each definition is made up with a filters set and an
 * actions set.
 */
export interface ManagementPolicyDefinition {
  /**
   * An object that defines the action set.
   */
  actions: ManagementPolicyAction;
  /**
   * An object that defines the filter set.
   */
  filters?: ManagementPolicyFilter;
}

/**
 * An object that wraps the Lifecycle rule. Each rule is uniquely defined by name.
 */
export interface ManagementPolicyRule {
  /**
   * Rule is enabled if set to true.
   */
  enabled?: boolean;
  /**
   * A rule name can contain any combination of alpha numeric characters. Rule name is
   * case-sensitive. It must be unique within a policy.
   */
  name: string;
  /**
   * An object that defines the Lifecycle rule.
   */
  definition: ManagementPolicyDefinition;
}

/**
 * The Storage Account ManagementPolicies Rules. See more details in:
 * https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts.
 */
export interface ManagementPolicySchema {
  /**
   * The Storage Account ManagementPolicies Rules. See more details in:
   * https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts.
   */
  rules: ManagementPolicyRule[];
}

/**
 * The Get Storage Account ManagementPolicies operation response.
 */
export interface ManagementPolicy extends Resource {
  /**
   * Returns the date and time the ManagementPolicies was last modified.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastModifiedTime?: Date;
  /**
   * The Storage Account ManagementPolicy, in JSON format. See more details in:
   * https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts.
   */
  policy: ManagementPolicySchema;
}

/**
 * The resource model definition for a ARM proxy resource. It will have everything other than
 * required location and tags
 */
export interface ProxyResource extends Resource {
}

/**
 * The resource model definition for a Azure Resource Manager resource with an etag.
 */
export interface AzureEntityResource extends Resource {
  /**
   * Resource Etag.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly etag?: string;
}

/**
 * An update history of the ImmutabilityPolicy of a blob container.
 */
export interface UpdateHistoryProperty {
  /**
   * The ImmutabilityPolicy update type of a blob container, possible values include: put, lock and
   * extend. Possible values include: 'put', 'lock', 'extend'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly update?: ImmutabilityPolicyUpdateType;
  /**
   * The immutability period for the blobs in the container since the policy creation, in days.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly immutabilityPeriodSinceCreationInDays?: number;
  /**
   * Returns the date and time the ImmutabilityPolicy was updated.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly timestamp?: Date;
  /**
   * Returns the Object ID of the user who updated the ImmutabilityPolicy.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly objectIdentifier?: string;
  /**
   * Returns the Tenant ID that issued the token for the user who updated the ImmutabilityPolicy.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tenantId?: string;
  /**
   * Returns the User Principal Name of the user who updated the ImmutabilityPolicy.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly upn?: string;
}

/**
 * The properties of an ImmutabilityPolicy of a blob container.
 */
export interface ImmutabilityPolicyProperties {
  /**
   * The immutability period for the blobs in the container since the policy creation, in days.
   */
  immutabilityPeriodSinceCreationInDays: number;
  /**
   * The ImmutabilityPolicy state of a blob container, possible values include: Locked and
   * Unlocked. Possible values include: 'Locked', 'Unlocked'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: ImmutabilityPolicyState;
  /**
   * ImmutabilityPolicy Etag.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly etag?: string;
  /**
   * The ImmutabilityPolicy update history of the blob container.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly updateHistory?: UpdateHistoryProperty[];
}

/**
 * A tag of the LegalHold of a blob container.
 */
export interface TagProperty {
  /**
   * The tag value.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tag?: string;
  /**
   * Returns the date and time the tag was added.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly timestamp?: Date;
  /**
   * Returns the Object ID of the user who added the tag.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly objectIdentifier?: string;
  /**
   * Returns the Tenant ID that issued the token for the user who added the tag.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tenantId?: string;
  /**
   * Returns the User Principal Name of the user who added the tag.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly upn?: string;
}

/**
 * The LegalHold property of a blob container.
 */
export interface LegalHoldProperties {
  /**
   * The hasLegalHold public property is set to true by SRP if there are at least one existing tag.
   * The hasLegalHold public property is set to false by SRP if all existing legal hold tags are
   * cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given
   * account.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly hasLegalHold?: boolean;
  /**
   * The list of LegalHold tags of a blob container.
   */
  tags?: TagProperty[];
}

/**
 * Properties of the blob container, including Id, resource name, resource type, Etag.
 */
export interface BlobContainer extends AzureEntityResource {
  /**
   * Specifies whether data in the container may be accessed publicly and the level of access.
   * Possible values include: 'Container', 'Blob', 'None'
   */
  publicAccess?: PublicAccess;
  /**
   * Returns the date and time the container was last modified.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastModifiedTime?: Date;
  /**
   * The lease status of the container. Possible values include: 'Locked', 'Unlocked'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly leaseStatus?: LeaseStatus;
  /**
   * Lease state of the container. Possible values include: 'Available', 'Leased', 'Expired',
   * 'Breaking', 'Broken'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly leaseState?: LeaseState;
  /**
   * Specifies whether the lease on a container is of infinite or fixed duration, only when the
   * container is leased. Possible values include: 'Infinite', 'Fixed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly leaseDuration?: LeaseDuration;
  /**
   * A name-value pair to associate with the container as metadata.
   */
  metadata?: { [propertyName: string]: string };
  /**
   * The ImmutabilityPolicy property of the container.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly immutabilityPolicy?: ImmutabilityPolicyProperties;
  /**
   * The LegalHold property of the container.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly legalHold?: LegalHoldProperties;
  /**
   * The hasLegalHold public property is set to true by SRP if there are at least one existing tag.
   * The hasLegalHold public property is set to false by SRP if all existing legal hold tags are
   * cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given
   * account.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly hasLegalHold?: boolean;
  /**
   * The hasImmutabilityPolicy public property is set to true by SRP if ImmutabilityPolicy has been
   * created for this container. The hasImmutabilityPolicy public property is set to false by SRP
   * if ImmutabilityPolicy has not been created for this container.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly hasImmutabilityPolicy?: boolean;
}

/**
 * The ImmutabilityPolicy property of a blob container, including Id, resource name, resource type,
 * Etag.
 */
export interface ImmutabilityPolicy extends AzureEntityResource {
  /**
   * The immutability period for the blobs in the container since the policy creation, in days.
   */
  immutabilityPeriodSinceCreationInDays: number;
  /**
   * The ImmutabilityPolicy state of a blob container, possible values include: Locked and
   * Unlocked. Possible values include: 'Locked', 'Unlocked'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: ImmutabilityPolicyState;
}

/**
 * The LegalHold property of a blob container.
 */
export interface LegalHold {
  /**
   * The hasLegalHold public property is set to true by SRP if there are at least one existing tag.
   * The hasLegalHold public property is set to false by SRP if all existing legal hold tags are
   * cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given
   * account.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly hasLegalHold?: boolean;
  /**
   * Each tag should be 3 to 23 alphanumeric characters and is normalized to lower case at SRP.
   */
  tags: string[];
}

/**
 * The blob container properties be listed out.
 */
export interface ListContainerItem extends AzureEntityResource {
  /**
   * Specifies whether data in the container may be accessed publicly and the level of access.
   * Possible values include: 'Container', 'Blob', 'None'
   */
  publicAccess?: PublicAccess;
  /**
   * Returns the date and time the container was last modified.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastModifiedTime?: Date;
  /**
   * The lease status of the container. Possible values include: 'Locked', 'Unlocked'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly leaseStatus?: LeaseStatus;
  /**
   * Lease state of the container. Possible values include: 'Available', 'Leased', 'Expired',
   * 'Breaking', 'Broken'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly leaseState?: LeaseState;
  /**
   * Specifies whether the lease on a container is of infinite or fixed duration, only when the
   * container is leased. Possible values include: 'Infinite', 'Fixed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly leaseDuration?: LeaseDuration;
  /**
   * A name-value pair to associate with the container as metadata.
   */
  metadata?: { [propertyName: string]: string };
  /**
   * The ImmutabilityPolicy property of the container.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly immutabilityPolicy?: ImmutabilityPolicyProperties;
  /**
   * The LegalHold property of the container.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly legalHold?: LegalHoldProperties;
  /**
   * The hasLegalHold public property is set to true by SRP if there are at least one existing tag.
   * The hasLegalHold public property is set to false by SRP if all existing legal hold tags are
   * cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given
   * account.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly hasLegalHold?: boolean;
  /**
   * The hasImmutabilityPolicy public property is set to true by SRP if ImmutabilityPolicy has been
   * created for this container. The hasImmutabilityPolicy public property is set to false by SRP
   * if ImmutabilityPolicy has not been created for this container.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly hasImmutabilityPolicy?: boolean;
}

/**
 * Response schema. Contains list of blobs returned, and if paging is requested or required, a URL
 * to next page of containers.
 */
export interface ListContainerItems {
  /**
   * List of blobs containers returned.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: ListContainerItem[];
  /**
   * Request URL that can be used to query next page of containers. Returned when total number of
   * requested containers exceed maximum page size.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * Specifies a CORS rule for the Blob service.
 */
export interface CorsRule {
  /**
   * Required if CorsRule element is present. A list of origin domains that will be allowed via
   * CORS, or "*" to allow all domains
   */
  allowedOrigins: string[];
  /**
   * Required if CorsRule element is present. A list of HTTP methods that are allowed to be
   * executed by the origin.
   */
  allowedMethods: string[];
  /**
   * Required if CorsRule element is present. The number of seconds that the client/browser should
   * cache a preflight response.
   */
  maxAgeInSeconds: number;
  /**
   * Required if CorsRule element is present. A list of response headers to expose to CORS clients.
   */
  exposedHeaders: string[];
  /**
   * Required if CorsRule element is present. A list of headers allowed to be part of the
   * cross-origin request.
   */
  allowedHeaders: string[];
}

/**
 * Sets the CORS rules. You can include up to five CorsRule elements in the request.
 */
export interface CorsRules {
  /**
   * The List of CORS rules. You can include up to five CorsRule elements in the request.
   */
  corsRules?: CorsRule[];
}

/**
 * The blob service properties for soft delete.
 */
export interface DeleteRetentionPolicy {
  /**
   * Indicates whether DeleteRetentionPolicy is enabled for the Blob service.
   */
  enabled?: boolean;
  /**
   * Indicates the number of days that the deleted blob should be retained. The minimum specified
   * value can be 1 and the maximum value can be 365.
   */
  days?: number;
}

/**
 * The properties of a storage account’s Blob service.
 */
export interface BlobServiceProperties extends Resource {
  /**
   * Specifies CORS rules for the Blob service. You can include up to five CorsRule elements in the
   * request. If no CorsRule elements are included in the request body, all CORS rules will be
   * deleted, and CORS will be disabled for the Blob service.
   */
  cors?: CorsRules;
  /**
   * DefaultServiceVersion indicates the default version to use for requests to the Blob service if
   * an incoming request’s version is not specified. Possible values include version 2008-10-27 and
   * all more recent versions.
   */
  defaultServiceVersion?: string;
  /**
   * The blob service properties for soft delete.
   */
  deleteRetentionPolicy?: DeleteRetentionPolicy;
  /**
   * Automatic Snapshot is enabled if set to true.
   */
  automaticSnapshotPolicyEnabled?: boolean;
}

/**
 * Lease Container request schema.
 */
export interface LeaseContainerRequest {
  /**
   * Specifies the lease action. Can be one of the available actions. Possible values include:
   * 'Acquire', 'Renew', 'Change', 'Release', 'Break'
   */
  action: Action1;
  /**
   * Identifies the lease. Can be specified in any valid GUID string format.
   */
  leaseId?: string;
  /**
   * Optional. For a break action, proposed duration the lease should continue before it is broken,
   * in seconds, between 0 and 60.
   */
  breakPeriod?: number;
  /**
   * Required for acquire. Specifies the duration of the lease, in seconds, or negative one (-1)
   * for a lease that never expires.
   */
  leaseDuration?: number;
  /**
   * Optional for acquire, required for change. Proposed lease ID, in a GUID string format.
   */
  proposedLeaseId?: string;
}

/**
 * Lease Container response schema.
 */
export interface LeaseContainerResponse {
  /**
   * Returned unique lease ID that must be included with any request to delete the container, or to
   * renew, change, or release the lease.
   */
  leaseId?: string;
  /**
   * Approximate time remaining in the lease period, in seconds.
   */
  leaseTimeSeconds?: string;
}

/**
 * Optional Parameters.
 */
export interface StorageAccountsGetPropertiesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * May be used to expand the properties within account's properties. By default, data is not
   * included when fetching properties. Currently we only support geoReplicationStats. Possible
   * values include: 'geoReplicationStats'
   */
  expand?: StorageAccountExpand;
}

/**
 * Optional Parameters.
 */
export interface BlobContainersListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Optional. Continuation token for the list operation.
   */
  skipToken?: string;
  /**
   * Optional. Specified maximum number of containers that can be included in the list.
   */
  maxpagesize?: string;
  /**
   * Optional. When specified, only container names starting with the filter will be listed.
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface BlobContainersCreateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Specifies whether data in the container may be accessed publicly and the level of access.
   * Possible values include: 'Container', 'Blob', 'None'
   */
  publicAccess?: PublicAccess;
  /**
   * A name-value pair to associate with the container as metadata.
   */
  metadata?: { [propertyName: string]: string };
}

/**
 * Optional Parameters.
 */
export interface BlobContainersUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Specifies whether data in the container may be accessed publicly and the level of access.
   * Possible values include: 'Container', 'Blob', 'None'
   */
  publicAccess?: PublicAccess;
  /**
   * A name-value pair to associate with the container as metadata.
   */
  metadata?: { [propertyName: string]: string };
}

/**
 * Optional Parameters.
 */
export interface BlobContainersCreateOrUpdateImmutabilityPolicyOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The entity state (ETag) version of the immutability policy to update. A value of "*" can be
   * used to apply the operation only if the immutability policy already exists. If omitted, this
   * operation will always be applied.
   */
  ifMatch?: string;
}

/**
 * Optional Parameters.
 */
export interface BlobContainersGetImmutabilityPolicyOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The entity state (ETag) version of the immutability policy to update. A value of "*" can be
   * used to apply the operation only if the immutability policy already exists. If omitted, this
   * operation will always be applied.
   */
  ifMatch?: string;
}

/**
 * Optional Parameters.
 */
export interface BlobContainersLeaseOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Lease Container request body.
   */
  parameters?: LeaseContainerRequest;
}

/**
 * An interface representing StorageManagementClientOptions.
 */
export interface StorageManagementClientOptions extends AzureServiceClientOptions {
  baseUri?: string;
}

/**
 * Defines headers for CreateOrUpdateImmutabilityPolicy operation.
 */
export interface BlobContainersCreateOrUpdateImmutabilityPolicyHeaders {
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Match or If-None-Match headers.
   */
  eTag: string;
}

/**
 * Defines headers for GetImmutabilityPolicy operation.
 */
export interface BlobContainersGetImmutabilityPolicyHeaders {
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Match or If-None-Match headers.
   */
  eTag: string;
}

/**
 * Defines headers for DeleteImmutabilityPolicy operation.
 */
export interface BlobContainersDeleteImmutabilityPolicyHeaders {
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Match or If-None-Match headers.
   */
  eTag: string;
}

/**
 * Defines headers for LockImmutabilityPolicy operation.
 */
export interface BlobContainersLockImmutabilityPolicyHeaders {
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Match or If-None-Match headers.
   */
  eTag: string;
}

/**
 * Defines headers for ExtendImmutabilityPolicy operation.
 */
export interface BlobContainersExtendImmutabilityPolicyHeaders {
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Match or If-None-Match headers.
   */
  eTag: string;
}

/**
 * @interface
 * Result of the request to list Storage operations. It contains a list of operations and a URL
 * link to get the next set of results.
 * @extends Array<Operation>
 */
export interface OperationListResult extends Array<Operation> {
}

/**
 * @interface
 * The response from the List Storage SKUs operation.
 * @extends Array<Sku>
 */
export interface StorageSkuListResult extends Array<Sku> {
}

/**
 * @interface
 * The response from the List Storage Accounts operation.
 * @extends Array<StorageAccount>
 */
export interface StorageAccountListResult extends Array<StorageAccount> {
}

/**
 * @interface
 * The response from the List Usages operation.
 * @extends Array<Usage>
 */
export interface UsageListResult extends Array<Usage> {
}

/**
 * Defines values for ReasonCode.
 * Possible values include: 'QuotaId', 'NotAvailableForSubscription'
 * @readonly
 * @enum {string}
 */
export type ReasonCode = 'QuotaId' | 'NotAvailableForSubscription';

/**
 * Defines values for SkuName.
 * Possible values include: 'Standard_LRS', 'Standard_GRS', 'Standard_RAGRS', 'Standard_ZRS',
 * 'Premium_LRS', 'Premium_ZRS', 'Standard_GZRS', 'Standard_RAGZRS'
 * @readonly
 * @enum {string}
 */
export type SkuName = 'Standard_LRS' | 'Standard_GRS' | 'Standard_RAGRS' | 'Standard_ZRS' | 'Premium_LRS' | 'Premium_ZRS' | 'Standard_GZRS' | 'Standard_RAGZRS';

/**
 * Defines values for SkuTier.
 * Possible values include: 'Standard', 'Premium'
 * @readonly
 * @enum {string}
 */
export type SkuTier = 'Standard' | 'Premium';

/**
 * Defines values for Kind.
 * Possible values include: 'Storage', 'StorageV2', 'BlobStorage', 'FileStorage',
 * 'BlockBlobStorage'
 * @readonly
 * @enum {string}
 */
export type Kind = 'Storage' | 'StorageV2' | 'BlobStorage' | 'FileStorage' | 'BlockBlobStorage';

/**
 * Defines values for Reason.
 * Possible values include: 'AccountNameInvalid', 'AlreadyExists'
 * @readonly
 * @enum {string}
 */
export type Reason = 'AccountNameInvalid' | 'AlreadyExists';

/**
 * Defines values for KeySource.
 * Possible values include: 'Microsoft.Storage', 'Microsoft.Keyvault'
 * @readonly
 * @enum {string}
 */
export type KeySource = 'Microsoft.Storage' | 'Microsoft.Keyvault';

/**
 * Defines values for Action.
 * Possible values include: 'Allow'
 * @readonly
 * @enum {string}
 */
export type Action = 'Allow';

/**
 * Defines values for State.
 * Possible values include: 'provisioning', 'deprovisioning', 'succeeded', 'failed',
 * 'networkSourceDeleted'
 * @readonly
 * @enum {string}
 */
export type State = 'provisioning' | 'deprovisioning' | 'succeeded' | 'failed' | 'networkSourceDeleted';

/**
 * Defines values for Bypass.
 * Possible values include: 'None', 'Logging', 'Metrics', 'AzureServices'
 * @readonly
 * @enum {string}
 */
export type Bypass = 'None' | 'Logging' | 'Metrics' | 'AzureServices';

/**
 * Defines values for DefaultAction.
 * Possible values include: 'Allow', 'Deny'
 * @readonly
 * @enum {string}
 */
export type DefaultAction = 'Allow' | 'Deny';

/**
 * Defines values for DirectoryServiceOptions.
 * Possible values include: 'None', 'AADDS'
 * @readonly
 * @enum {string}
 */
export type DirectoryServiceOptions = 'None' | 'AADDS';

/**
 * Defines values for AccessTier.
 * Possible values include: 'Hot', 'Cool'
 * @readonly
 * @enum {string}
 */
export type AccessTier = 'Hot' | 'Cool';

/**
 * Defines values for GeoReplicationStatus.
 * Possible values include: 'Live', 'Bootstrap', 'Unavailable'
 * @readonly
 * @enum {string}
 */
export type GeoReplicationStatus = 'Live' | 'Bootstrap' | 'Unavailable';

/**
 * Defines values for ProvisioningState.
 * Possible values include: 'Creating', 'ResolvingDNS', 'Succeeded'
 * @readonly
 * @enum {string}
 */
export type ProvisioningState = 'Creating' | 'ResolvingDNS' | 'Succeeded';

/**
 * Defines values for AccountStatus.
 * Possible values include: 'available', 'unavailable'
 * @readonly
 * @enum {string}
 */
export type AccountStatus = 'available' | 'unavailable';

/**
 * Defines values for KeyPermission.
 * Possible values include: 'Read', 'Full'
 * @readonly
 * @enum {string}
 */
export type KeyPermission = 'Read' | 'Full';

/**
 * Defines values for UsageUnit.
 * Possible values include: 'Count', 'Bytes', 'Seconds', 'Percent', 'CountsPerSecond',
 * 'BytesPerSecond'
 * @readonly
 * @enum {string}
 */
export type UsageUnit = 'Count' | 'Bytes' | 'Seconds' | 'Percent' | 'CountsPerSecond' | 'BytesPerSecond';

/**
 * Defines values for Services.
 * Possible values include: 'b', 'q', 't', 'f'
 * @readonly
 * @enum {string}
 */
export type Services = 'b' | 'q' | 't' | 'f';

/**
 * Defines values for SignedResourceTypes.
 * Possible values include: 's', 'c', 'o'
 * @readonly
 * @enum {string}
 */
export type SignedResourceTypes = 's' | 'c' | 'o';

/**
 * Defines values for Permissions.
 * Possible values include: 'r', 'd', 'w', 'l', 'a', 'c', 'u', 'p'
 * @readonly
 * @enum {string}
 */
export type Permissions = 'r' | 'd' | 'w' | 'l' | 'a' | 'c' | 'u' | 'p';

/**
 * Defines values for HttpProtocol.
 * Possible values include: 'https,http', 'https'
 * @readonly
 * @enum {string}
 */
export type HttpProtocol = 'https,http' | 'https';

/**
 * Defines values for SignedResource.
 * Possible values include: 'b', 'c', 'f', 's'
 * @readonly
 * @enum {string}
 */
export type SignedResource = 'b' | 'c' | 'f' | 's';

/**
 * Defines values for PublicAccess.
 * Possible values include: 'Container', 'Blob', 'None'
 * @readonly
 * @enum {string}
 */
export type PublicAccess = 'Container' | 'Blob' | 'None';

/**
 * Defines values for LeaseStatus.
 * Possible values include: 'Locked', 'Unlocked'
 * @readonly
 * @enum {string}
 */
export type LeaseStatus = 'Locked' | 'Unlocked';

/**
 * Defines values for LeaseState.
 * Possible values include: 'Available', 'Leased', 'Expired', 'Breaking', 'Broken'
 * @readonly
 * @enum {string}
 */
export type LeaseState = 'Available' | 'Leased' | 'Expired' | 'Breaking' | 'Broken';

/**
 * Defines values for LeaseDuration.
 * Possible values include: 'Infinite', 'Fixed'
 * @readonly
 * @enum {string}
 */
export type LeaseDuration = 'Infinite' | 'Fixed';

/**
 * Defines values for ImmutabilityPolicyState.
 * Possible values include: 'Locked', 'Unlocked'
 * @readonly
 * @enum {string}
 */
export type ImmutabilityPolicyState = 'Locked' | 'Unlocked';

/**
 * Defines values for ImmutabilityPolicyUpdateType.
 * Possible values include: 'put', 'lock', 'extend'
 * @readonly
 * @enum {string}
 */
export type ImmutabilityPolicyUpdateType = 'put' | 'lock' | 'extend';

/**
 * Defines values for StorageAccountExpand.
 * Possible values include: 'geoReplicationStats'
 * @readonly
 * @enum {string}
 */
export type StorageAccountExpand = 'geoReplicationStats';

/**
 * Defines values for Action1.
 * Possible values include: 'Acquire', 'Renew', 'Change', 'Release', 'Break'
 * @readonly
 * @enum {string}
 */
export type Action1 = 'Acquire' | 'Renew' | 'Change' | 'Release' | 'Break';

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type SkusListResponse = StorageSkuListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: StorageSkuListResult;
    };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type StorageAccountsCheckNameAvailabilityResponse = CheckNameAvailabilityResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CheckNameAvailabilityResult;
    };
};

/**
 * Contains response data for the create operation.
 */
export type StorageAccountsCreateResponse = StorageAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: StorageAccount;
    };
};

/**
 * Contains response data for the getProperties operation.
 */
export type StorageAccountsGetPropertiesResponse = StorageAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: StorageAccount;
    };
};

/**
 * Contains response data for the update operation.
 */
export type StorageAccountsUpdateResponse = StorageAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: StorageAccount;
    };
};

/**
 * Contains response data for the list operation.
 */
export type StorageAccountsListResponse = StorageAccountListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: StorageAccountListResult;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type StorageAccountsListByResourceGroupResponse = StorageAccountListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: StorageAccountListResult;
    };
};

/**
 * Contains response data for the listKeys operation.
 */
export type StorageAccountsListKeysResponse = StorageAccountListKeysResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: StorageAccountListKeysResult;
    };
};

/**
 * Contains response data for the regenerateKey operation.
 */
export type StorageAccountsRegenerateKeyResponse = StorageAccountListKeysResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: StorageAccountListKeysResult;
    };
};

/**
 * Contains response data for the listAccountSAS operation.
 */
export type StorageAccountsListAccountSASResponse = ListAccountSasResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListAccountSasResponse;
    };
};

/**
 * Contains response data for the listServiceSAS operation.
 */
export type StorageAccountsListServiceSASResponse = ListServiceSasResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListServiceSasResponse;
    };
};

/**
 * Contains response data for the beginCreate operation.
 */
export type StorageAccountsBeginCreateResponse = StorageAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: StorageAccount;
    };
};

/**
 * Contains response data for the listByLocation operation.
 */
export type UsagesListByLocationResponse = UsageListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: UsageListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ManagementPoliciesGetResponse = ManagementPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagementPolicy;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ManagementPoliciesCreateOrUpdateResponse = ManagementPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagementPolicy;
    };
};

/**
 * Contains response data for the setServiceProperties operation.
 */
export type BlobServicesSetServicePropertiesResponse = BlobServiceProperties & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BlobServiceProperties;
    };
};

/**
 * Contains response data for the getServiceProperties operation.
 */
export type BlobServicesGetServicePropertiesResponse = BlobServiceProperties & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BlobServiceProperties;
    };
};

/**
 * Contains response data for the list operation.
 */
export type BlobContainersListResponse = ListContainerItems & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListContainerItems;
    };
};

/**
 * Contains response data for the create operation.
 */
export type BlobContainersCreateResponse = BlobContainer & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BlobContainer;
    };
};

/**
 * Contains response data for the update operation.
 */
export type BlobContainersUpdateResponse = BlobContainer & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BlobContainer;
    };
};

/**
 * Contains response data for the get operation.
 */
export type BlobContainersGetResponse = BlobContainer & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BlobContainer;
    };
};

/**
 * Contains response data for the setLegalHold operation.
 */
export type BlobContainersSetLegalHoldResponse = LegalHold & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LegalHold;
    };
};

/**
 * Contains response data for the clearLegalHold operation.
 */
export type BlobContainersClearLegalHoldResponse = LegalHold & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LegalHold;
    };
};

/**
 * Contains response data for the createOrUpdateImmutabilityPolicy operation.
 */
export type BlobContainersCreateOrUpdateImmutabilityPolicyResponse = ImmutabilityPolicy & BlobContainersCreateOrUpdateImmutabilityPolicyHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: BlobContainersCreateOrUpdateImmutabilityPolicyHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImmutabilityPolicy;
    };
};

/**
 * Contains response data for the getImmutabilityPolicy operation.
 */
export type BlobContainersGetImmutabilityPolicyResponse = ImmutabilityPolicy & BlobContainersGetImmutabilityPolicyHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: BlobContainersGetImmutabilityPolicyHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImmutabilityPolicy;
    };
};

/**
 * Contains response data for the deleteImmutabilityPolicy operation.
 */
export type BlobContainersDeleteImmutabilityPolicyResponse = ImmutabilityPolicy & BlobContainersDeleteImmutabilityPolicyHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: BlobContainersDeleteImmutabilityPolicyHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImmutabilityPolicy;
    };
};

/**
 * Contains response data for the lockImmutabilityPolicy operation.
 */
export type BlobContainersLockImmutabilityPolicyResponse = ImmutabilityPolicy & BlobContainersLockImmutabilityPolicyHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: BlobContainersLockImmutabilityPolicyHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImmutabilityPolicy;
    };
};

/**
 * Contains response data for the extendImmutabilityPolicy operation.
 */
export type BlobContainersExtendImmutabilityPolicyResponse = ImmutabilityPolicy & BlobContainersExtendImmutabilityPolicyHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: BlobContainersExtendImmutabilityPolicyHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImmutabilityPolicy;
    };
};

/**
 * Contains response data for the lease operation.
 */
export type BlobContainersLeaseResponse = LeaseContainerResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LeaseContainerResponse;
    };
};
