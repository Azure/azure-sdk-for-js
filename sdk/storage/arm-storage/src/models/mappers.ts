/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      serviceSpecification: {
        serializedName: "properties.serviceSpecification",
        type: {
          name: "Composite",
          className: "ServiceSpecification"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceSpecification",
    modelProperties: {
      metricSpecifications: {
        serializedName: "metricSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricSpecification"
            }
          }
        }
      }
    }
  }
};

export const MetricSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricSpecification",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      displayDescription: {
        serializedName: "displayDescription",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      dimensions: {
        serializedName: "dimensions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Dimension"
            }
          }
        }
      },
      aggregationType: {
        serializedName: "aggregationType",
        type: {
          name: "String"
        }
      },
      fillGapWithZero: {
        serializedName: "fillGapWithZero",
        type: {
          name: "Boolean"
        }
      },
      category: {
        serializedName: "category",
        type: {
          name: "String"
        }
      },
      resourceIdDimensionNameOverride: {
        serializedName: "resourceIdDimensionNameOverride",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Dimension: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Dimension",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageSkuListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageSkuListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SkuInformation"
            }
          }
        }
      }
    }
  }
};

export const SkuInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuInformation",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Standard", "Premium"]
        }
      },
      resourceType: {
        serializedName: "resourceType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      locations: {
        serializedName: "locations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      capabilities: {
        serializedName: "capabilities",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SKUCapability"
            }
          }
        }
      },
      restrictions: {
        serializedName: "restrictions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Restriction"
            }
          }
        }
      }
    }
  }
};

export const SKUCapability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SKUCapability",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Restriction: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Restriction",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      values: {
        serializedName: "values",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      reasonCode: {
        serializedName: "reasonCode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAccountCheckNameAvailabilityParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAccountCheckNameAvailabilityParameters",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        defaultValue: "Microsoft.Storage/storageAccounts",
        isConstant: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityResult",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["AccountNameInvalid", "AlreadyExists"]
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAccountCreateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAccountCreateParameters",
    modelProperties: {
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      },
      allowedCopyScope: {
        serializedName: "properties.allowedCopyScope",
        type: {
          name: "String"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      sasPolicy: {
        serializedName: "properties.sasPolicy",
        type: {
          name: "Composite",
          className: "SasPolicy"
        }
      },
      keyPolicy: {
        serializedName: "properties.keyPolicy",
        type: {
          name: "Composite",
          className: "KeyPolicy"
        }
      },
      customDomain: {
        serializedName: "properties.customDomain",
        type: {
          name: "Composite",
          className: "CustomDomain"
        }
      },
      encryption: {
        serializedName: "properties.encryption",
        type: {
          name: "Composite",
          className: "Encryption"
        }
      },
      networkRuleSet: {
        serializedName: "properties.networkAcls",
        type: {
          name: "Composite",
          className: "NetworkRuleSet"
        }
      },
      accessTier: {
        serializedName: "properties.accessTier",
        type: {
          name: "Enum",
          allowedValues: ["Hot", "Cool", "Premium"]
        }
      },
      azureFilesIdentityBasedAuthentication: {
        serializedName: "properties.azureFilesIdentityBasedAuthentication",
        type: {
          name: "Composite",
          className: "AzureFilesIdentityBasedAuthentication"
        }
      },
      enableHttpsTrafficOnly: {
        serializedName: "properties.supportsHttpsTrafficOnly",
        type: {
          name: "Boolean"
        }
      },
      isSftpEnabled: {
        serializedName: "properties.isSftpEnabled",
        type: {
          name: "Boolean"
        }
      },
      isLocalUserEnabled: {
        serializedName: "properties.isLocalUserEnabled",
        type: {
          name: "Boolean"
        }
      },
      isHnsEnabled: {
        serializedName: "properties.isHnsEnabled",
        type: {
          name: "Boolean"
        }
      },
      largeFileSharesState: {
        serializedName: "properties.largeFileSharesState",
        type: {
          name: "String"
        }
      },
      routingPreference: {
        serializedName: "properties.routingPreference",
        type: {
          name: "Composite",
          className: "RoutingPreference"
        }
      },
      allowBlobPublicAccess: {
        serializedName: "properties.allowBlobPublicAccess",
        type: {
          name: "Boolean"
        }
      },
      minimumTlsVersion: {
        serializedName: "properties.minimumTlsVersion",
        type: {
          name: "String"
        }
      },
      allowSharedKeyAccess: {
        serializedName: "properties.allowSharedKeyAccess",
        type: {
          name: "Boolean"
        }
      },
      enableNfsV3: {
        serializedName: "properties.isNfsV3Enabled",
        type: {
          name: "Boolean"
        }
      },
      allowCrossTenantReplication: {
        serializedName: "properties.allowCrossTenantReplication",
        type: {
          name: "Boolean"
        }
      },
      defaultToOAuthAuthentication: {
        serializedName: "properties.defaultToOAuthAuthentication",
        type: {
          name: "Boolean"
        }
      },
      immutableStorageWithVersioning: {
        serializedName: "properties.immutableStorageWithVersioning",
        type: {
          name: "Composite",
          className: "ImmutableStorageAccount"
        }
      },
      dnsEndpointType: {
        serializedName: "properties.dnsEndpointType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Sku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Standard", "Premium"]
        }
      }
    }
  }
};

export const ExtendedLocation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtendedLocation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Identity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Identity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserAssignedIdentity" }
          }
        }
      }
    }
  }
};

export const UserAssignedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SasPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SasPolicy",
    modelProperties: {
      sasExpirationPeriod: {
        serializedName: "sasExpirationPeriod",
        required: true,
        type: {
          name: "String"
        }
      },
      expirationAction: {
        defaultValue: "Log",
        serializedName: "expirationAction",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyPolicy",
    modelProperties: {
      keyExpirationPeriodInDays: {
        serializedName: "keyExpirationPeriodInDays",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CustomDomain: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomDomain",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      useSubDomainName: {
        serializedName: "useSubDomainName",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const Encryption: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Encryption",
    modelProperties: {
      services: {
        serializedName: "services",
        type: {
          name: "Composite",
          className: "EncryptionServices"
        }
      },
      keySource: {
        defaultValue: "Microsoft.Storage",
        serializedName: "keySource",
        required: true,
        type: {
          name: "String"
        }
      },
      requireInfrastructureEncryption: {
        serializedName: "requireInfrastructureEncryption",
        type: {
          name: "Boolean"
        }
      },
      keyVaultProperties: {
        serializedName: "keyvaultproperties",
        type: {
          name: "Composite",
          className: "KeyVaultProperties"
        }
      },
      encryptionIdentity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "EncryptionIdentity"
        }
      }
    }
  }
};

export const EncryptionServices: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EncryptionServices",
    modelProperties: {
      blob: {
        serializedName: "blob",
        type: {
          name: "Composite",
          className: "EncryptionService"
        }
      },
      file: {
        serializedName: "file",
        type: {
          name: "Composite",
          className: "EncryptionService"
        }
      },
      table: {
        serializedName: "table",
        type: {
          name: "Composite",
          className: "EncryptionService"
        }
      },
      queue: {
        serializedName: "queue",
        type: {
          name: "Composite",
          className: "EncryptionService"
        }
      }
    }
  }
};

export const EncryptionService: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EncryptionService",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      lastEnabledTime: {
        serializedName: "lastEnabledTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      keyType: {
        serializedName: "keyType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyVaultProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyVaultProperties",
    modelProperties: {
      keyName: {
        serializedName: "keyname",
        type: {
          name: "String"
        }
      },
      keyVersion: {
        serializedName: "keyversion",
        type: {
          name: "String"
        }
      },
      keyVaultUri: {
        serializedName: "keyvaulturi",
        type: {
          name: "String"
        }
      },
      currentVersionedKeyIdentifier: {
        serializedName: "currentVersionedKeyIdentifier",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastKeyRotationTimestamp: {
        serializedName: "lastKeyRotationTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      currentVersionedKeyExpirationTimestamp: {
        serializedName: "currentVersionedKeyExpirationTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const EncryptionIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EncryptionIdentity",
    modelProperties: {
      encryptionUserAssignedIdentity: {
        serializedName: "userAssignedIdentity",
        type: {
          name: "String"
        }
      },
      encryptionFederatedIdentityClientId: {
        serializedName: "federatedIdentityClientId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkRuleSet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkRuleSet",
    modelProperties: {
      bypass: {
        defaultValue: "AzureServices",
        serializedName: "bypass",
        type: {
          name: "String"
        }
      },
      resourceAccessRules: {
        serializedName: "resourceAccessRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceAccessRule"
            }
          }
        }
      },
      virtualNetworkRules: {
        serializedName: "virtualNetworkRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkRule"
            }
          }
        }
      },
      ipRules: {
        serializedName: "ipRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IPRule"
            }
          }
        }
      },
      defaultAction: {
        defaultValue: "Allow",
        serializedName: "defaultAction",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Allow", "Deny"]
        }
      }
    }
  }
};

export const ResourceAccessRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceAccessRule",
    modelProperties: {
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkRule",
    modelProperties: {
      virtualNetworkResourceId: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      action: {
        defaultValue: "Allow",
        isConstant: true,
        serializedName: "action",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IPRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IPRule",
    modelProperties: {
      iPAddressOrRange: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      },
      action: {
        defaultValue: "Allow",
        isConstant: true,
        serializedName: "action",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureFilesIdentityBasedAuthentication: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureFilesIdentityBasedAuthentication",
    modelProperties: {
      directoryServiceOptions: {
        serializedName: "directoryServiceOptions",
        required: true,
        type: {
          name: "String"
        }
      },
      activeDirectoryProperties: {
        serializedName: "activeDirectoryProperties",
        type: {
          name: "Composite",
          className: "ActiveDirectoryProperties"
        }
      },
      defaultSharePermission: {
        serializedName: "defaultSharePermission",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ActiveDirectoryProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ActiveDirectoryProperties",
    modelProperties: {
      domainName: {
        serializedName: "domainName",
        required: true,
        type: {
          name: "String"
        }
      },
      netBiosDomainName: {
        serializedName: "netBiosDomainName",
        required: true,
        type: {
          name: "String"
        }
      },
      forestName: {
        serializedName: "forestName",
        required: true,
        type: {
          name: "String"
        }
      },
      domainGuid: {
        serializedName: "domainGuid",
        required: true,
        type: {
          name: "String"
        }
      },
      domainSid: {
        serializedName: "domainSid",
        required: true,
        type: {
          name: "String"
        }
      },
      azureStorageSid: {
        serializedName: "azureStorageSid",
        required: true,
        type: {
          name: "String"
        }
      },
      samAccountName: {
        serializedName: "samAccountName",
        type: {
          name: "String"
        }
      },
      accountType: {
        serializedName: "accountType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoutingPreference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoutingPreference",
    modelProperties: {
      routingChoice: {
        serializedName: "routingChoice",
        type: {
          name: "String"
        }
      },
      publishMicrosoftEndpoints: {
        serializedName: "publishMicrosoftEndpoints",
        type: {
          name: "Boolean"
        }
      },
      publishInternetEndpoints: {
        serializedName: "publishInternetEndpoints",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ImmutableStorageAccount: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImmutableStorageAccount",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      immutabilityPolicy: {
        serializedName: "immutabilityPolicy",
        type: {
          name: "Composite",
          className: "AccountImmutabilityPolicyProperties"
        }
      }
    }
  }
};

export const AccountImmutabilityPolicyProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountImmutabilityPolicyProperties",
    modelProperties: {
      immutabilityPeriodSinceCreationInDays: {
        constraints: {
          InclusiveMaximum: 146000,
          InclusiveMinimum: 1
        },
        serializedName: "immutabilityPeriodSinceCreationInDays",
        type: {
          name: "Number"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      allowProtectedAppendWrites: {
        serializedName: "allowProtectedAppendWrites",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const Endpoints: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Endpoints",
    modelProperties: {
      blob: {
        serializedName: "blob",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      queue: {
        serializedName: "queue",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      table: {
        serializedName: "table",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      file: {
        serializedName: "file",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      web: {
        serializedName: "web",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dfs: {
        serializedName: "dfs",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      microsoftEndpoints: {
        serializedName: "microsoftEndpoints",
        type: {
          name: "Composite",
          className: "StorageAccountMicrosoftEndpoints"
        }
      },
      internetEndpoints: {
        serializedName: "internetEndpoints",
        type: {
          name: "Composite",
          className: "StorageAccountInternetEndpoints"
        }
      }
    }
  }
};

export const StorageAccountMicrosoftEndpoints: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAccountMicrosoftEndpoints",
    modelProperties: {
      blob: {
        serializedName: "blob",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      queue: {
        serializedName: "queue",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      table: {
        serializedName: "table",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      file: {
        serializedName: "file",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      web: {
        serializedName: "web",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dfs: {
        serializedName: "dfs",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAccountInternetEndpoints: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAccountInternetEndpoints",
    modelProperties: {
      blob: {
        serializedName: "blob",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      file: {
        serializedName: "file",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      web: {
        serializedName: "web",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dfs: {
        serializedName: "dfs",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyCreationTime: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyCreationTime",
    modelProperties: {
      key1: {
        serializedName: "key1",
        type: {
          name: "DateTime"
        }
      },
      key2: {
        serializedName: "key2",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const GeoReplicationStats: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoReplicationStats",
    modelProperties: {
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastSyncTime: {
        serializedName: "lastSyncTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      canFailover: {
        serializedName: "canFailover",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const PrivateEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpoint",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkServiceConnectionState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionState",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      actionRequired: {
        serializedName: "actionRequired",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BlobRestoreStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BlobRestoreStatus",
    modelProperties: {
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      failureReason: {
        serializedName: "failureReason",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      restoreId: {
        serializedName: "restoreId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "BlobRestoreParameters"
        }
      }
    }
  }
};

export const BlobRestoreParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BlobRestoreParameters",
    modelProperties: {
      timeToRestore: {
        serializedName: "timeToRestore",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      blobRanges: {
        serializedName: "blobRanges",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BlobRestoreRange"
            }
          }
        }
      }
    }
  }
};

export const BlobRestoreRange: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BlobRestoreRange",
    modelProperties: {
      startRange: {
        serializedName: "startRange",
        required: true,
        type: {
          name: "String"
        }
      },
      endRange: {
        serializedName: "endRange",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAccountSkuConversionStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAccountSkuConversionStatus",
    modelProperties: {
      skuConversionStatus: {
        serializedName: "skuConversionStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetSkuName: {
        serializedName: "targetSkuName",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      endTime: {
        serializedName: "endTime",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAccountUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAccountUpdateParameters",
    modelProperties: {
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      customDomain: {
        serializedName: "properties.customDomain",
        type: {
          name: "Composite",
          className: "CustomDomain"
        }
      },
      encryption: {
        serializedName: "properties.encryption",
        type: {
          name: "Composite",
          className: "Encryption"
        }
      },
      sasPolicy: {
        serializedName: "properties.sasPolicy",
        type: {
          name: "Composite",
          className: "SasPolicy"
        }
      },
      keyPolicy: {
        serializedName: "properties.keyPolicy",
        type: {
          name: "Composite",
          className: "KeyPolicy"
        }
      },
      accessTier: {
        serializedName: "properties.accessTier",
        type: {
          name: "Enum",
          allowedValues: ["Hot", "Cool", "Premium"]
        }
      },
      azureFilesIdentityBasedAuthentication: {
        serializedName: "properties.azureFilesIdentityBasedAuthentication",
        type: {
          name: "Composite",
          className: "AzureFilesIdentityBasedAuthentication"
        }
      },
      enableHttpsTrafficOnly: {
        serializedName: "properties.supportsHttpsTrafficOnly",
        type: {
          name: "Boolean"
        }
      },
      isSftpEnabled: {
        serializedName: "properties.isSftpEnabled",
        type: {
          name: "Boolean"
        }
      },
      isLocalUserEnabled: {
        serializedName: "properties.isLocalUserEnabled",
        type: {
          name: "Boolean"
        }
      },
      networkRuleSet: {
        serializedName: "properties.networkAcls",
        type: {
          name: "Composite",
          className: "NetworkRuleSet"
        }
      },
      largeFileSharesState: {
        serializedName: "properties.largeFileSharesState",
        type: {
          name: "String"
        }
      },
      routingPreference: {
        serializedName: "properties.routingPreference",
        type: {
          name: "Composite",
          className: "RoutingPreference"
        }
      },
      allowBlobPublicAccess: {
        serializedName: "properties.allowBlobPublicAccess",
        type: {
          name: "Boolean"
        }
      },
      minimumTlsVersion: {
        serializedName: "properties.minimumTlsVersion",
        type: {
          name: "String"
        }
      },
      allowSharedKeyAccess: {
        serializedName: "properties.allowSharedKeyAccess",
        type: {
          name: "Boolean"
        }
      },
      allowCrossTenantReplication: {
        serializedName: "properties.allowCrossTenantReplication",
        type: {
          name: "Boolean"
        }
      },
      defaultToOAuthAuthentication: {
        serializedName: "properties.defaultToOAuthAuthentication",
        type: {
          name: "Boolean"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      immutableStorageWithVersioning: {
        serializedName: "properties.immutableStorageWithVersioning",
        type: {
          name: "Composite",
          className: "ImmutableStorageAccount"
        }
      },
      allowedCopyScope: {
        serializedName: "properties.allowedCopyScope",
        type: {
          name: "String"
        }
      },
      dnsEndpointType: {
        serializedName: "properties.dnsEndpointType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeletedAccountListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeletedAccountListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeletedAccount"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorResponseBody"
        }
      }
    }
  }
};

export const ErrorResponseBody: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponseBody",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAccountListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAccountListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageAccount"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAccountListKeysResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAccountListKeysResult",
    modelProperties: {
      keys: {
        serializedName: "keys",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageAccountKey"
            }
          }
        }
      }
    }
  }
};

export const StorageAccountKey: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAccountKey",
    modelProperties: {
      keyName: {
        serializedName: "keyName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      permissions: {
        serializedName: "permissions",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Read", "Full"]
        }
      },
      creationTime: {
        serializedName: "creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const StorageAccountRegenerateKeyParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAccountRegenerateKeyParameters",
    modelProperties: {
      keyName: {
        serializedName: "keyName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UsageListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsageListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Usage"
            }
          }
        }
      }
    }
  }
};

export const Usage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Usage",
    modelProperties: {
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Count",
            "Bytes",
            "Seconds",
            "Percent",
            "CountsPerSecond",
            "BytesPerSecond"
          ]
        }
      },
      currentValue: {
        serializedName: "currentValue",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      limit: {
        serializedName: "limit",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "UsageName"
        }
      }
    }
  }
};

export const UsageName: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsageName",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      localizedValue: {
        serializedName: "localizedValue",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AccountSasParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountSasParameters",
    modelProperties: {
      services: {
        serializedName: "signedServices",
        required: true,
        type: {
          name: "String"
        }
      },
      resourceTypes: {
        serializedName: "signedResourceTypes",
        required: true,
        type: {
          name: "String"
        }
      },
      permissions: {
        serializedName: "signedPermission",
        required: true,
        type: {
          name: "String"
        }
      },
      iPAddressOrRange: {
        serializedName: "signedIp",
        type: {
          name: "String"
        }
      },
      protocols: {
        serializedName: "signedProtocol",
        type: {
          name: "Enum",
          allowedValues: ["https,http", "https"]
        }
      },
      sharedAccessStartTime: {
        serializedName: "signedStart",
        type: {
          name: "DateTime"
        }
      },
      sharedAccessExpiryTime: {
        serializedName: "signedExpiry",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      keyToSign: {
        serializedName: "keyToSign",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListAccountSasResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListAccountSasResponse",
    modelProperties: {
      accountSasToken: {
        serializedName: "accountSasToken",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceSasParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceSasParameters",
    modelProperties: {
      canonicalizedResource: {
        serializedName: "canonicalizedResource",
        required: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "signedResource",
        type: {
          name: "String"
        }
      },
      permissions: {
        serializedName: "signedPermission",
        type: {
          name: "String"
        }
      },
      iPAddressOrRange: {
        serializedName: "signedIp",
        type: {
          name: "String"
        }
      },
      protocols: {
        serializedName: "signedProtocol",
        type: {
          name: "Enum",
          allowedValues: ["https,http", "https"]
        }
      },
      sharedAccessStartTime: {
        serializedName: "signedStart",
        type: {
          name: "DateTime"
        }
      },
      sharedAccessExpiryTime: {
        serializedName: "signedExpiry",
        type: {
          name: "DateTime"
        }
      },
      identifier: {
        constraints: {
          MaxLength: 64
        },
        serializedName: "signedIdentifier",
        type: {
          name: "String"
        }
      },
      partitionKeyStart: {
        serializedName: "startPk",
        type: {
          name: "String"
        }
      },
      partitionKeyEnd: {
        serializedName: "endPk",
        type: {
          name: "String"
        }
      },
      rowKeyStart: {
        serializedName: "startRk",
        type: {
          name: "String"
        }
      },
      rowKeyEnd: {
        serializedName: "endRk",
        type: {
          name: "String"
        }
      },
      keyToSign: {
        serializedName: "keyToSign",
        type: {
          name: "String"
        }
      },
      cacheControl: {
        serializedName: "rscc",
        type: {
          name: "String"
        }
      },
      contentDisposition: {
        serializedName: "rscd",
        type: {
          name: "String"
        }
      },
      contentEncoding: {
        serializedName: "rsce",
        type: {
          name: "String"
        }
      },
      contentLanguage: {
        serializedName: "rscl",
        type: {
          name: "String"
        }
      },
      contentType: {
        serializedName: "rsct",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListServiceSasResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListServiceSasResponse",
    modelProperties: {
      serviceSasToken: {
        serializedName: "serviceSasToken",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagementPolicySchema: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementPolicySchema",
    modelProperties: {
      rules: {
        serializedName: "rules",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagementPolicyRule"
            }
          }
        }
      }
    }
  }
};

export const ManagementPolicyRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementPolicyRule",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      definition: {
        serializedName: "definition",
        type: {
          name: "Composite",
          className: "ManagementPolicyDefinition"
        }
      }
    }
  }
};

export const ManagementPolicyDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementPolicyDefinition",
    modelProperties: {
      actions: {
        serializedName: "actions",
        type: {
          name: "Composite",
          className: "ManagementPolicyAction"
        }
      },
      filters: {
        serializedName: "filters",
        type: {
          name: "Composite",
          className: "ManagementPolicyFilter"
        }
      }
    }
  }
};

export const ManagementPolicyAction: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementPolicyAction",
    modelProperties: {
      baseBlob: {
        serializedName: "baseBlob",
        type: {
          name: "Composite",
          className: "ManagementPolicyBaseBlob"
        }
      },
      snapshot: {
        serializedName: "snapshot",
        type: {
          name: "Composite",
          className: "ManagementPolicySnapShot"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "Composite",
          className: "ManagementPolicyVersion"
        }
      }
    }
  }
};

export const ManagementPolicyBaseBlob: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementPolicyBaseBlob",
    modelProperties: {
      tierToCool: {
        serializedName: "tierToCool",
        type: {
          name: "Composite",
          className: "DateAfterModification"
        }
      },
      tierToArchive: {
        serializedName: "tierToArchive",
        type: {
          name: "Composite",
          className: "DateAfterModification"
        }
      },
      delete: {
        serializedName: "delete",
        type: {
          name: "Composite",
          className: "DateAfterModification"
        }
      },
      enableAutoTierToHotFromCool: {
        serializedName: "enableAutoTierToHotFromCool",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DateAfterModification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DateAfterModification",
    modelProperties: {
      daysAfterModificationGreaterThan: {
        constraints: {
          InclusiveMinimum: 0,
          MultipleOf: 1
        },
        serializedName: "daysAfterModificationGreaterThan",
        type: {
          name: "Number"
        }
      },
      daysAfterLastAccessTimeGreaterThan: {
        constraints: {
          InclusiveMinimum: 0,
          MultipleOf: 1
        },
        serializedName: "daysAfterLastAccessTimeGreaterThan",
        type: {
          name: "Number"
        }
      },
      daysAfterLastTierChangeGreaterThan: {
        constraints: {
          InclusiveMinimum: 0,
          MultipleOf: 1
        },
        serializedName: "daysAfterLastTierChangeGreaterThan",
        type: {
          name: "Number"
        }
      },
      daysAfterCreationGreaterThan: {
        constraints: {
          InclusiveMinimum: 0,
          MultipleOf: 1
        },
        serializedName: "daysAfterCreationGreaterThan",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ManagementPolicySnapShot: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementPolicySnapShot",
    modelProperties: {
      tierToCool: {
        serializedName: "tierToCool",
        type: {
          name: "Composite",
          className: "DateAfterCreation"
        }
      },
      tierToArchive: {
        serializedName: "tierToArchive",
        type: {
          name: "Composite",
          className: "DateAfterCreation"
        }
      },
      delete: {
        serializedName: "delete",
        type: {
          name: "Composite",
          className: "DateAfterCreation"
        }
      }
    }
  }
};

export const DateAfterCreation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DateAfterCreation",
    modelProperties: {
      daysAfterCreationGreaterThan: {
        constraints: {
          InclusiveMinimum: 0,
          MultipleOf: 1
        },
        serializedName: "daysAfterCreationGreaterThan",
        required: true,
        type: {
          name: "Number"
        }
      },
      daysAfterLastTierChangeGreaterThan: {
        constraints: {
          InclusiveMinimum: 0,
          MultipleOf: 1
        },
        serializedName: "daysAfterLastTierChangeGreaterThan",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ManagementPolicyVersion: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementPolicyVersion",
    modelProperties: {
      tierToCool: {
        serializedName: "tierToCool",
        type: {
          name: "Composite",
          className: "DateAfterCreation"
        }
      },
      tierToArchive: {
        serializedName: "tierToArchive",
        type: {
          name: "Composite",
          className: "DateAfterCreation"
        }
      },
      delete: {
        serializedName: "delete",
        type: {
          name: "Composite",
          className: "DateAfterCreation"
        }
      }
    }
  }
};

export const ManagementPolicyFilter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementPolicyFilter",
    modelProperties: {
      prefixMatch: {
        serializedName: "prefixMatch",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      blobTypes: {
        serializedName: "blobTypes",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      blobIndexMatch: {
        serializedName: "blobIndexMatch",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TagFilter"
            }
          }
        }
      }
    }
  }
};

export const TagFilter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TagFilter",
    modelProperties: {
      name: {
        constraints: {
          MaxLength: 128,
          MinLength: 1
        },
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      op: {
        serializedName: "op",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        constraints: {
          MaxLength: 256
        },
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BlobInventoryPolicySchema: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BlobInventoryPolicySchema",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      destination: {
        serializedName: "destination",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      rules: {
        serializedName: "rules",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BlobInventoryPolicyRule"
            }
          }
        }
      }
    }
  }
};

export const BlobInventoryPolicyRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BlobInventoryPolicyRule",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      destination: {
        serializedName: "destination",
        required: true,
        type: {
          name: "String"
        }
      },
      definition: {
        serializedName: "definition",
        type: {
          name: "Composite",
          className: "BlobInventoryPolicyDefinition"
        }
      }
    }
  }
};

export const BlobInventoryPolicyDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BlobInventoryPolicyDefinition",
    modelProperties: {
      filters: {
        serializedName: "filters",
        type: {
          name: "Composite",
          className: "BlobInventoryPolicyFilter"
        }
      },
      format: {
        serializedName: "format",
        required: true,
        type: {
          name: "String"
        }
      },
      schedule: {
        serializedName: "schedule",
        required: true,
        type: {
          name: "String"
        }
      },
      objectType: {
        serializedName: "objectType",
        required: true,
        type: {
          name: "String"
        }
      },
      schemaFields: {
        serializedName: "schemaFields",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const BlobInventoryPolicyFilter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BlobInventoryPolicyFilter",
    modelProperties: {
      prefixMatch: {
        serializedName: "prefixMatch",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      excludePrefix: {
        serializedName: "excludePrefix",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      blobTypes: {
        serializedName: "blobTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      includeBlobVersions: {
        serializedName: "includeBlobVersions",
        type: {
          name: "Boolean"
        }
      },
      includeSnapshots: {
        serializedName: "includeSnapshots",
        type: {
          name: "Boolean"
        }
      },
      includeDeleted: {
        serializedName: "includeDeleted",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const CloudError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CloudErrorBody"
        }
      }
    }
  }
};

export const CloudErrorBody: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudErrorBody",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CloudErrorBody"
            }
          }
        }
      }
    }
  }
};

export const ListBlobInventoryPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListBlobInventoryPolicy",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BlobInventoryPolicy"
            }
          }
        }
      }
    }
  }
};

export const PrivateEndpointConnectionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      }
    }
  }
};

export const PrivateLinkResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource"
            }
          }
        }
      }
    }
  }
};

export const ObjectReplicationPolicies: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ObjectReplicationPolicies",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ObjectReplicationPolicy"
            }
          }
        }
      }
    }
  }
};

export const ObjectReplicationPolicyRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ObjectReplicationPolicyRule",
    modelProperties: {
      ruleId: {
        serializedName: "ruleId",
        type: {
          name: "String"
        }
      },
      sourceContainer: {
        serializedName: "sourceContainer",
        required: true,
        type: {
          name: "String"
        }
      },
      destinationContainer: {
        serializedName: "destinationContainer",
        required: true,
        type: {
          name: "String"
        }
      },
      filters: {
        serializedName: "filters",
        type: {
          name: "Composite",
          className: "ObjectReplicationPolicyFilter"
        }
      }
    }
  }
};

export const ObjectReplicationPolicyFilter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ObjectReplicationPolicyFilter",
    modelProperties: {
      prefixMatch: {
        serializedName: "prefixMatch",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      minCreationTime: {
        serializedName: "minCreationTime",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LocalUsers: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LocalUsers",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LocalUser"
            }
          }
        }
      }
    }
  }
};

export const PermissionScope: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PermissionScope",
    modelProperties: {
      permissions: {
        serializedName: "permissions",
        required: true,
        type: {
          name: "String"
        }
      },
      service: {
        serializedName: "service",
        required: true,
        type: {
          name: "String"
        }
      },
      resourceName: {
        serializedName: "resourceName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SshPublicKey: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SshPublicKey",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      key: {
        serializedName: "key",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LocalUserKeys: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LocalUserKeys",
    modelProperties: {
      sshAuthorizedKeys: {
        serializedName: "sshAuthorizedKeys",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SshPublicKey"
            }
          }
        }
      },
      sharedKey: {
        serializedName: "sharedKey",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LocalUserRegeneratePasswordResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LocalUserRegeneratePasswordResult",
    modelProperties: {
      sshPassword: {
        serializedName: "sshPassword",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EncryptionScopeKeyVaultProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EncryptionScopeKeyVaultProperties",
    modelProperties: {
      keyUri: {
        serializedName: "keyUri",
        type: {
          name: "String"
        }
      },
      currentVersionedKeyIdentifier: {
        serializedName: "currentVersionedKeyIdentifier",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastKeyRotationTimestamp: {
        serializedName: "lastKeyRotationTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const EncryptionScopeListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EncryptionScopeListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EncryptionScope"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BlobServiceItems: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BlobServiceItems",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BlobServiceProperties"
            }
          }
        }
      }
    }
  }
};

export const CorsRules: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CorsRules",
    modelProperties: {
      corsRules: {
        serializedName: "corsRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CorsRule"
            }
          }
        }
      }
    }
  }
};

export const CorsRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CorsRule",
    modelProperties: {
      allowedOrigins: {
        serializedName: "allowedOrigins",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      allowedMethods: {
        serializedName: "allowedMethods",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      maxAgeInSeconds: {
        serializedName: "maxAgeInSeconds",
        required: true,
        type: {
          name: "Number"
        }
      },
      exposedHeaders: {
        serializedName: "exposedHeaders",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      allowedHeaders: {
        serializedName: "allowedHeaders",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DeleteRetentionPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeleteRetentionPolicy",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      days: {
        constraints: {
          InclusiveMaximum: 365,
          InclusiveMinimum: 1
        },
        serializedName: "days",
        type: {
          name: "Number"
        }
      },
      allowPermanentDelete: {
        serializedName: "allowPermanentDelete",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ChangeFeed: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ChangeFeed",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      retentionInDays: {
        constraints: {
          InclusiveMaximum: 146000,
          InclusiveMinimum: 1
        },
        serializedName: "retentionInDays",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RestorePolicyProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorePolicyProperties",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      days: {
        constraints: {
          InclusiveMaximum: 365,
          InclusiveMinimum: 1
        },
        serializedName: "days",
        type: {
          name: "Number"
        }
      },
      lastEnabledTime: {
        serializedName: "lastEnabledTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      minRestoreTime: {
        serializedName: "minRestoreTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const LastAccessTimeTrackingPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LastAccessTimeTrackingPolicy",
    modelProperties: {
      enable: {
        serializedName: "enable",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      trackingGranularityInDays: {
        serializedName: "trackingGranularityInDays",
        type: {
          name: "Number"
        }
      },
      blobType: {
        serializedName: "blobType",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ListContainerItems: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListContainerItems",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ListContainerItem"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImmutabilityPolicyProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImmutabilityPolicyProperties",
    modelProperties: {
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      updateHistory: {
        serializedName: "updateHistory",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UpdateHistoryProperty"
            }
          }
        }
      },
      immutabilityPeriodSinceCreationInDays: {
        serializedName: "properties.immutabilityPeriodSinceCreationInDays",
        type: {
          name: "Number"
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      allowProtectedAppendWrites: {
        serializedName: "properties.allowProtectedAppendWrites",
        type: {
          name: "Boolean"
        }
      },
      allowProtectedAppendWritesAll: {
        serializedName: "properties.allowProtectedAppendWritesAll",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const UpdateHistoryProperty: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateHistoryProperty",
    modelProperties: {
      update: {
        serializedName: "update",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      immutabilityPeriodSinceCreationInDays: {
        serializedName: "immutabilityPeriodSinceCreationInDays",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      timestamp: {
        serializedName: "timestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      objectIdentifier: {
        serializedName: "objectIdentifier",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      upn: {
        serializedName: "upn",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      allowProtectedAppendWrites: {
        serializedName: "allowProtectedAppendWrites",
        type: {
          name: "Boolean"
        }
      },
      allowProtectedAppendWritesAll: {
        serializedName: "allowProtectedAppendWritesAll",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const LegalHoldProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LegalHoldProperties",
    modelProperties: {
      hasLegalHold: {
        serializedName: "hasLegalHold",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TagProperty"
            }
          }
        }
      },
      protectedAppendWritesHistory: {
        serializedName: "protectedAppendWritesHistory",
        type: {
          name: "Composite",
          className: "ProtectedAppendWritesHistory"
        }
      }
    }
  }
};

export const TagProperty: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TagProperty",
    modelProperties: {
      tag: {
        serializedName: "tag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      timestamp: {
        serializedName: "timestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      objectIdentifier: {
        serializedName: "objectIdentifier",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      upn: {
        serializedName: "upn",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProtectedAppendWritesHistory: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectedAppendWritesHistory",
    modelProperties: {
      allowProtectedAppendWritesAll: {
        serializedName: "allowProtectedAppendWritesAll",
        type: {
          name: "Boolean"
        }
      },
      timestamp: {
        serializedName: "timestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ImmutableStorageWithVersioning: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImmutableStorageWithVersioning",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      timeStamp: {
        serializedName: "timeStamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      migrationState: {
        serializedName: "migrationState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LegalHold: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LegalHold",
    modelProperties: {
      hasLegalHold: {
        serializedName: "hasLegalHold",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      tags: {
        serializedName: "tags",
        required: true,
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MaxLength: 23,
              MinLength: 3
            },
            type: {
              name: "String"
            }
          }
        }
      },
      allowProtectedAppendWritesAll: {
        serializedName: "allowProtectedAppendWritesAll",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const LeaseContainerRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LeaseContainerRequest",
    modelProperties: {
      action: {
        serializedName: "action",
        required: true,
        type: {
          name: "String"
        }
      },
      leaseId: {
        serializedName: "leaseId",
        type: {
          name: "String"
        }
      },
      breakPeriod: {
        serializedName: "breakPeriod",
        type: {
          name: "Number"
        }
      },
      leaseDuration: {
        serializedName: "leaseDuration",
        type: {
          name: "Number"
        }
      },
      proposedLeaseId: {
        serializedName: "proposedLeaseId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LeaseContainerResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LeaseContainerResponse",
    modelProperties: {
      leaseId: {
        serializedName: "leaseId",
        type: {
          name: "String"
        }
      },
      leaseTimeSeconds: {
        serializedName: "leaseTimeSeconds",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileServiceItems: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileServiceItems",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FileServiceProperties"
            }
          }
        }
      }
    }
  }
};

export const ProtocolSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtocolSettings",
    modelProperties: {
      smb: {
        serializedName: "smb",
        type: {
          name: "Composite",
          className: "SmbSetting"
        }
      }
    }
  }
};

export const SmbSetting: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SmbSetting",
    modelProperties: {
      multichannel: {
        serializedName: "multichannel",
        type: {
          name: "Composite",
          className: "Multichannel"
        }
      },
      versions: {
        serializedName: "versions",
        type: {
          name: "String"
        }
      },
      authenticationMethods: {
        serializedName: "authenticationMethods",
        type: {
          name: "String"
        }
      },
      kerberosTicketEncryption: {
        serializedName: "kerberosTicketEncryption",
        type: {
          name: "String"
        }
      },
      channelEncryption: {
        serializedName: "channelEncryption",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Multichannel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Multichannel",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const FileShareItems: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileShareItems",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FileShareItem"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SignedIdentifier: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SignedIdentifier",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      accessPolicy: {
        serializedName: "accessPolicy",
        type: {
          name: "Composite",
          className: "AccessPolicy"
        }
      }
    }
  }
};

export const AccessPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccessPolicy",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      expiryTime: {
        serializedName: "expiryTime",
        type: {
          name: "DateTime"
        }
      },
      permission: {
        serializedName: "permission",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeletedShare: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeletedShare",
    modelProperties: {
      deletedShareName: {
        serializedName: "deletedShareName",
        required: true,
        type: {
          name: "String"
        }
      },
      deletedShareVersion: {
        serializedName: "deletedShareVersion",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LeaseShareRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LeaseShareRequest",
    modelProperties: {
      action: {
        serializedName: "action",
        required: true,
        type: {
          name: "String"
        }
      },
      leaseId: {
        serializedName: "leaseId",
        type: {
          name: "String"
        }
      },
      breakPeriod: {
        serializedName: "breakPeriod",
        type: {
          name: "Number"
        }
      },
      leaseDuration: {
        serializedName: "leaseDuration",
        type: {
          name: "Number"
        }
      },
      proposedLeaseId: {
        serializedName: "proposedLeaseId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LeaseShareResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LeaseShareResponse",
    modelProperties: {
      leaseId: {
        serializedName: "leaseId",
        type: {
          name: "String"
        }
      },
      leaseTimeSeconds: {
        serializedName: "leaseTimeSeconds",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListQueueServices: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListQueueServices",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QueueServiceProperties"
            }
          }
        }
      }
    }
  }
};

export const ListQueueResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListQueueResource",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ListQueue"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListTableServices: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListTableServices",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TableServiceProperties"
            }
          }
        }
      }
    }
  }
};

export const TableSignedIdentifier: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TableSignedIdentifier",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      accessPolicy: {
        serializedName: "accessPolicy",
        type: {
          name: "Composite",
          className: "TableAccessPolicy"
        }
      }
    }
  }
};

export const TableAccessPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TableAccessPolicy",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      expiryTime: {
        serializedName: "expiryTime",
        type: {
          name: "DateTime"
        }
      },
      permission: {
        serializedName: "permission",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListTableResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListTableResource",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Table"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...Resource.type.modelProperties,
      privateEndpoint: {
        serializedName: "properties.privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "properties.privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const ManagementPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementPolicy",
    modelProperties: {
      ...Resource.type.modelProperties,
      lastModifiedTime: {
        serializedName: "properties.lastModifiedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      policy: {
        serializedName: "properties.policy",
        type: {
          name: "Composite",
          className: "ManagementPolicySchema"
        }
      }
    }
  }
};

export const BlobInventoryPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BlobInventoryPolicy",
    modelProperties: {
      ...Resource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      lastModifiedTime: {
        serializedName: "properties.lastModifiedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      policy: {
        serializedName: "properties.policy",
        type: {
          name: "Composite",
          className: "BlobInventoryPolicySchema"
        }
      }
    }
  }
};

export const PrivateLinkResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      groupId: {
        serializedName: "properties.groupId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      requiredMembers: {
        serializedName: "properties.requiredMembers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      requiredZoneNames: {
        serializedName: "properties.requiredZoneNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ObjectReplicationPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ObjectReplicationPolicy",
    modelProperties: {
      ...Resource.type.modelProperties,
      policyId: {
        serializedName: "properties.policyId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      enabledTime: {
        serializedName: "properties.enabledTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      sourceAccount: {
        serializedName: "properties.sourceAccount",
        type: {
          name: "String"
        }
      },
      destinationAccount: {
        serializedName: "properties.destinationAccount",
        type: {
          name: "String"
        }
      },
      rules: {
        serializedName: "properties.rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ObjectReplicationPolicyRule"
            }
          }
        }
      }
    }
  }
};

export const LocalUser: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LocalUser",
    modelProperties: {
      ...Resource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      permissionScopes: {
        serializedName: "properties.permissionScopes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PermissionScope"
            }
          }
        }
      },
      homeDirectory: {
        serializedName: "properties.homeDirectory",
        type: {
          name: "String"
        }
      },
      sshAuthorizedKeys: {
        serializedName: "properties.sshAuthorizedKeys",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SshPublicKey"
            }
          }
        }
      },
      sid: {
        serializedName: "properties.sid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hasSharedKey: {
        serializedName: "properties.hasSharedKey",
        type: {
          name: "Boolean"
        }
      },
      hasSshKey: {
        serializedName: "properties.hasSshKey",
        type: {
          name: "Boolean"
        }
      },
      hasSshPassword: {
        serializedName: "properties.hasSshPassword",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const EncryptionScope: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EncryptionScope",
    modelProperties: {
      ...Resource.type.modelProperties,
      source: {
        serializedName: "properties.source",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastModifiedTime: {
        serializedName: "properties.lastModifiedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      keyVaultProperties: {
        serializedName: "properties.keyVaultProperties",
        type: {
          name: "Composite",
          className: "EncryptionScopeKeyVaultProperties"
        }
      },
      requireInfrastructureEncryption: {
        serializedName: "properties.requireInfrastructureEncryption",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const BlobServiceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BlobServiceProperties",
    modelProperties: {
      ...Resource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      cors: {
        serializedName: "properties.cors",
        type: {
          name: "Composite",
          className: "CorsRules"
        }
      },
      defaultServiceVersion: {
        serializedName: "properties.defaultServiceVersion",
        type: {
          name: "String"
        }
      },
      deleteRetentionPolicy: {
        serializedName: "properties.deleteRetentionPolicy",
        type: {
          name: "Composite",
          className: "DeleteRetentionPolicy"
        }
      },
      isVersioningEnabled: {
        serializedName: "properties.isVersioningEnabled",
        type: {
          name: "Boolean"
        }
      },
      automaticSnapshotPolicyEnabled: {
        serializedName: "properties.automaticSnapshotPolicyEnabled",
        type: {
          name: "Boolean"
        }
      },
      changeFeed: {
        serializedName: "properties.changeFeed",
        type: {
          name: "Composite",
          className: "ChangeFeed"
        }
      },
      restorePolicy: {
        serializedName: "properties.restorePolicy",
        type: {
          name: "Composite",
          className: "RestorePolicyProperties"
        }
      },
      containerDeleteRetentionPolicy: {
        serializedName: "properties.containerDeleteRetentionPolicy",
        type: {
          name: "Composite",
          className: "DeleteRetentionPolicy"
        }
      },
      lastAccessTimeTrackingPolicy: {
        serializedName: "properties.lastAccessTimeTrackingPolicy",
        type: {
          name: "Composite",
          className: "LastAccessTimeTrackingPolicy"
        }
      }
    }
  }
};

export const AzureEntityResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureEntityResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileServiceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileServiceProperties",
    modelProperties: {
      ...Resource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      cors: {
        serializedName: "properties.cors",
        type: {
          name: "Composite",
          className: "CorsRules"
        }
      },
      shareDeleteRetentionPolicy: {
        serializedName: "properties.shareDeleteRetentionPolicy",
        type: {
          name: "Composite",
          className: "DeleteRetentionPolicy"
        }
      },
      protocolSettings: {
        serializedName: "properties.protocolSettings",
        type: {
          name: "Composite",
          className: "ProtocolSettings"
        }
      }
    }
  }
};

export const QueueServiceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QueueServiceProperties",
    modelProperties: {
      ...Resource.type.modelProperties,
      cors: {
        serializedName: "properties.cors",
        type: {
          name: "Composite",
          className: "CorsRules"
        }
      }
    }
  }
};

export const StorageQueue: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageQueue",
    modelProperties: {
      ...Resource.type.modelProperties,
      metadata: {
        serializedName: "properties.metadata",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      approximateMessageCount: {
        serializedName: "properties.approximateMessageCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ListQueue: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListQueue",
    modelProperties: {
      ...Resource.type.modelProperties,
      metadata: {
        serializedName: "properties.metadata",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const TableServiceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TableServiceProperties",
    modelProperties: {
      ...Resource.type.modelProperties,
      cors: {
        serializedName: "properties.cors",
        type: {
          name: "Composite",
          className: "CorsRules"
        }
      }
    }
  }
};

export const Table: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Table",
    modelProperties: {
      ...Resource.type.modelProperties,
      tableName: {
        serializedName: "properties.tableName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      signedIdentifiers: {
        serializedName: "properties.signedIdentifiers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TableSignedIdentifier"
            }
          }
        }
      }
    }
  }
};

export const StorageAccount: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAccount",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      kind: {
        serializedName: "kind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      },
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Creating", "ResolvingDNS", "Succeeded"]
        }
      },
      primaryEndpoints: {
        serializedName: "properties.primaryEndpoints",
        type: {
          name: "Composite",
          className: "Endpoints"
        }
      },
      primaryLocation: {
        serializedName: "properties.primaryLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      statusOfPrimary: {
        serializedName: "properties.statusOfPrimary",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["available", "unavailable"]
        }
      },
      lastGeoFailoverTime: {
        serializedName: "properties.lastGeoFailoverTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      secondaryLocation: {
        serializedName: "properties.secondaryLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      statusOfSecondary: {
        serializedName: "properties.statusOfSecondary",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["available", "unavailable"]
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      customDomain: {
        serializedName: "properties.customDomain",
        type: {
          name: "Composite",
          className: "CustomDomain"
        }
      },
      sasPolicy: {
        serializedName: "properties.sasPolicy",
        type: {
          name: "Composite",
          className: "SasPolicy"
        }
      },
      keyPolicy: {
        serializedName: "properties.keyPolicy",
        type: {
          name: "Composite",
          className: "KeyPolicy"
        }
      },
      keyCreationTime: {
        serializedName: "properties.keyCreationTime",
        type: {
          name: "Composite",
          className: "KeyCreationTime"
        }
      },
      secondaryEndpoints: {
        serializedName: "properties.secondaryEndpoints",
        type: {
          name: "Composite",
          className: "Endpoints"
        }
      },
      encryption: {
        serializedName: "properties.encryption",
        type: {
          name: "Composite",
          className: "Encryption"
        }
      },
      accessTier: {
        serializedName: "properties.accessTier",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Hot", "Cool", "Premium"]
        }
      },
      azureFilesIdentityBasedAuthentication: {
        serializedName: "properties.azureFilesIdentityBasedAuthentication",
        type: {
          name: "Composite",
          className: "AzureFilesIdentityBasedAuthentication"
        }
      },
      enableHttpsTrafficOnly: {
        serializedName: "properties.supportsHttpsTrafficOnly",
        type: {
          name: "Boolean"
        }
      },
      networkRuleSet: {
        serializedName: "properties.networkAcls",
        type: {
          name: "Composite",
          className: "NetworkRuleSet"
        }
      },
      isSftpEnabled: {
        serializedName: "properties.isSftpEnabled",
        type: {
          name: "Boolean"
        }
      },
      isLocalUserEnabled: {
        serializedName: "properties.isLocalUserEnabled",
        type: {
          name: "Boolean"
        }
      },
      isHnsEnabled: {
        serializedName: "properties.isHnsEnabled",
        type: {
          name: "Boolean"
        }
      },
      geoReplicationStats: {
        serializedName: "properties.geoReplicationStats",
        type: {
          name: "Composite",
          className: "GeoReplicationStats"
        }
      },
      failoverInProgress: {
        serializedName: "properties.failoverInProgress",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      largeFileSharesState: {
        serializedName: "properties.largeFileSharesState",
        type: {
          name: "String"
        }
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      },
      routingPreference: {
        serializedName: "properties.routingPreference",
        type: {
          name: "Composite",
          className: "RoutingPreference"
        }
      },
      blobRestoreStatus: {
        serializedName: "properties.blobRestoreStatus",
        type: {
          name: "Composite",
          className: "BlobRestoreStatus"
        }
      },
      allowBlobPublicAccess: {
        serializedName: "properties.allowBlobPublicAccess",
        type: {
          name: "Boolean"
        }
      },
      minimumTlsVersion: {
        serializedName: "properties.minimumTlsVersion",
        type: {
          name: "String"
        }
      },
      allowSharedKeyAccess: {
        serializedName: "properties.allowSharedKeyAccess",
        type: {
          name: "Boolean"
        }
      },
      enableNfsV3: {
        serializedName: "properties.isNfsV3Enabled",
        type: {
          name: "Boolean"
        }
      },
      allowCrossTenantReplication: {
        serializedName: "properties.allowCrossTenantReplication",
        type: {
          name: "Boolean"
        }
      },
      defaultToOAuthAuthentication: {
        serializedName: "properties.defaultToOAuthAuthentication",
        type: {
          name: "Boolean"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      immutableStorageWithVersioning: {
        serializedName: "properties.immutableStorageWithVersioning",
        type: {
          name: "Composite",
          className: "ImmutableStorageAccount"
        }
      },
      allowedCopyScope: {
        serializedName: "properties.allowedCopyScope",
        type: {
          name: "String"
        }
      },
      storageAccountSkuConversionStatus: {
        serializedName: "properties.storageAccountSkuConversionStatus",
        type: {
          name: "Composite",
          className: "StorageAccountSkuConversionStatus"
        }
      },
      dnsEndpointType: {
        serializedName: "properties.dnsEndpointType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeletedAccount: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeletedAccount",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      storageAccountResourceId: {
        serializedName: "properties.storageAccountResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "properties.location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      restoreReference: {
        serializedName: "properties.restoreReference",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      deletionTime: {
        serializedName: "properties.deletionTime",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListContainerItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListContainerItem",
    modelProperties: {
      ...AzureEntityResource.type.modelProperties,
      version: {
        serializedName: "properties.version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      deleted: {
        serializedName: "properties.deleted",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      deletedTime: {
        serializedName: "properties.deletedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      remainingRetentionDays: {
        serializedName: "properties.remainingRetentionDays",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      defaultEncryptionScope: {
        serializedName: "properties.defaultEncryptionScope",
        type: {
          name: "String"
        }
      },
      denyEncryptionScopeOverride: {
        serializedName: "properties.denyEncryptionScopeOverride",
        type: {
          name: "Boolean"
        }
      },
      publicAccess: {
        serializedName: "properties.publicAccess",
        type: {
          name: "Enum",
          allowedValues: ["Container", "Blob", "None"]
        }
      },
      lastModifiedTime: {
        serializedName: "properties.lastModifiedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      leaseStatus: {
        serializedName: "properties.leaseStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      leaseState: {
        serializedName: "properties.leaseState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      leaseDuration: {
        serializedName: "properties.leaseDuration",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      metadata: {
        serializedName: "properties.metadata",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      immutabilityPolicy: {
        serializedName: "properties.immutabilityPolicy",
        type: {
          name: "Composite",
          className: "ImmutabilityPolicyProperties"
        }
      },
      legalHold: {
        serializedName: "properties.legalHold",
        type: {
          name: "Composite",
          className: "LegalHoldProperties"
        }
      },
      hasLegalHold: {
        serializedName: "properties.hasLegalHold",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      hasImmutabilityPolicy: {
        serializedName: "properties.hasImmutabilityPolicy",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      immutableStorageWithVersioning: {
        serializedName: "properties.immutableStorageWithVersioning",
        type: {
          name: "Composite",
          className: "ImmutableStorageWithVersioning"
        }
      },
      enableNfsV3RootSquash: {
        serializedName: "properties.enableNfsV3RootSquash",
        type: {
          name: "Boolean"
        }
      },
      enableNfsV3AllSquash: {
        serializedName: "properties.enableNfsV3AllSquash",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const BlobContainer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BlobContainer",
    modelProperties: {
      ...AzureEntityResource.type.modelProperties,
      version: {
        serializedName: "properties.version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      deleted: {
        serializedName: "properties.deleted",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      deletedTime: {
        serializedName: "properties.deletedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      remainingRetentionDays: {
        serializedName: "properties.remainingRetentionDays",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      defaultEncryptionScope: {
        serializedName: "properties.defaultEncryptionScope",
        type: {
          name: "String"
        }
      },
      denyEncryptionScopeOverride: {
        serializedName: "properties.denyEncryptionScopeOverride",
        type: {
          name: "Boolean"
        }
      },
      publicAccess: {
        serializedName: "properties.publicAccess",
        type: {
          name: "Enum",
          allowedValues: ["Container", "Blob", "None"]
        }
      },
      lastModifiedTime: {
        serializedName: "properties.lastModifiedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      leaseStatus: {
        serializedName: "properties.leaseStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      leaseState: {
        serializedName: "properties.leaseState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      leaseDuration: {
        serializedName: "properties.leaseDuration",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      metadata: {
        serializedName: "properties.metadata",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      immutabilityPolicy: {
        serializedName: "properties.immutabilityPolicy",
        type: {
          name: "Composite",
          className: "ImmutabilityPolicyProperties"
        }
      },
      legalHold: {
        serializedName: "properties.legalHold",
        type: {
          name: "Composite",
          className: "LegalHoldProperties"
        }
      },
      hasLegalHold: {
        serializedName: "properties.hasLegalHold",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      hasImmutabilityPolicy: {
        serializedName: "properties.hasImmutabilityPolicy",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      immutableStorageWithVersioning: {
        serializedName: "properties.immutableStorageWithVersioning",
        type: {
          name: "Composite",
          className: "ImmutableStorageWithVersioning"
        }
      },
      enableNfsV3RootSquash: {
        serializedName: "properties.enableNfsV3RootSquash",
        type: {
          name: "Boolean"
        }
      },
      enableNfsV3AllSquash: {
        serializedName: "properties.enableNfsV3AllSquash",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ImmutabilityPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImmutabilityPolicy",
    modelProperties: {
      ...AzureEntityResource.type.modelProperties,
      immutabilityPeriodSinceCreationInDays: {
        serializedName: "properties.immutabilityPeriodSinceCreationInDays",
        type: {
          name: "Number"
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      allowProtectedAppendWrites: {
        serializedName: "properties.allowProtectedAppendWrites",
        type: {
          name: "Boolean"
        }
      },
      allowProtectedAppendWritesAll: {
        serializedName: "properties.allowProtectedAppendWritesAll",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const FileShareItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileShareItem",
    modelProperties: {
      ...AzureEntityResource.type.modelProperties,
      lastModifiedTime: {
        serializedName: "properties.lastModifiedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      metadata: {
        serializedName: "properties.metadata",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      shareQuota: {
        constraints: {
          InclusiveMaximum: 102400,
          InclusiveMinimum: 1
        },
        serializedName: "properties.shareQuota",
        type: {
          name: "Number"
        }
      },
      enabledProtocols: {
        serializedName: "properties.enabledProtocols",
        type: {
          name: "String"
        }
      },
      rootSquash: {
        serializedName: "properties.rootSquash",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "properties.version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      deleted: {
        serializedName: "properties.deleted",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      deletedTime: {
        serializedName: "properties.deletedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      remainingRetentionDays: {
        serializedName: "properties.remainingRetentionDays",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      accessTier: {
        serializedName: "properties.accessTier",
        type: {
          name: "String"
        }
      },
      accessTierChangeTime: {
        serializedName: "properties.accessTierChangeTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      accessTierStatus: {
        serializedName: "properties.accessTierStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      shareUsageBytes: {
        serializedName: "properties.shareUsageBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      leaseStatus: {
        serializedName: "properties.leaseStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      leaseState: {
        serializedName: "properties.leaseState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      leaseDuration: {
        serializedName: "properties.leaseDuration",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      signedIdentifiers: {
        serializedName: "properties.signedIdentifiers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SignedIdentifier"
            }
          }
        }
      },
      snapshotTime: {
        serializedName: "properties.snapshotTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const FileShare: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileShare",
    modelProperties: {
      ...AzureEntityResource.type.modelProperties,
      lastModifiedTime: {
        serializedName: "properties.lastModifiedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      metadata: {
        serializedName: "properties.metadata",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      shareQuota: {
        constraints: {
          InclusiveMaximum: 102400,
          InclusiveMinimum: 1
        },
        serializedName: "properties.shareQuota",
        type: {
          name: "Number"
        }
      },
      enabledProtocols: {
        serializedName: "properties.enabledProtocols",
        type: {
          name: "String"
        }
      },
      rootSquash: {
        serializedName: "properties.rootSquash",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "properties.version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      deleted: {
        serializedName: "properties.deleted",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      deletedTime: {
        serializedName: "properties.deletedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      remainingRetentionDays: {
        serializedName: "properties.remainingRetentionDays",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      accessTier: {
        serializedName: "properties.accessTier",
        type: {
          name: "String"
        }
      },
      accessTierChangeTime: {
        serializedName: "properties.accessTierChangeTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      accessTierStatus: {
        serializedName: "properties.accessTierStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      shareUsageBytes: {
        serializedName: "properties.shareUsageBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      leaseStatus: {
        serializedName: "properties.leaseStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      leaseState: {
        serializedName: "properties.leaseState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      leaseDuration: {
        serializedName: "properties.leaseDuration",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      signedIdentifiers: {
        serializedName: "properties.signedIdentifiers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SignedIdentifier"
            }
          }
        }
      },
      snapshotTime: {
        serializedName: "properties.snapshotTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const BlobContainersCreateOrUpdateImmutabilityPolicyHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BlobContainersCreateOrUpdateImmutabilityPolicyHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BlobContainersGetImmutabilityPolicyHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BlobContainersGetImmutabilityPolicyHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BlobContainersDeleteImmutabilityPolicyHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BlobContainersDeleteImmutabilityPolicyHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BlobContainersLockImmutabilityPolicyHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BlobContainersLockImmutabilityPolicyHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BlobContainersExtendImmutabilityPolicyHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BlobContainersExtendImmutabilityPolicyHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileSharesLeaseHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileSharesLeaseHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};
