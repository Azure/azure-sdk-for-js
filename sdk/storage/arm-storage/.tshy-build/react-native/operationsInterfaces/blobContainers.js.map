{"version":3,"file":"blobContainers.js","sourceRoot":"","sources":["../../../src/operationsInterfaces/blobContainers.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { SimplePollerLike, OperationState } from \"@azure/core-lro\";\nimport {\n  ListContainerItem,\n  BlobContainersListOptionalParams,\n  BlobContainer,\n  BlobContainersCreateOptionalParams,\n  BlobContainersCreateResponse,\n  BlobContainersUpdateOptionalParams,\n  BlobContainersUpdateResponse,\n  BlobContainersGetOptionalParams,\n  BlobContainersGetResponse,\n  BlobContainersDeleteOptionalParams,\n  LegalHold,\n  BlobContainersSetLegalHoldOptionalParams,\n  BlobContainersSetLegalHoldResponse,\n  BlobContainersClearLegalHoldOptionalParams,\n  BlobContainersClearLegalHoldResponse,\n  BlobContainersCreateOrUpdateImmutabilityPolicyOptionalParams,\n  BlobContainersCreateOrUpdateImmutabilityPolicyResponse,\n  BlobContainersGetImmutabilityPolicyOptionalParams,\n  BlobContainersGetImmutabilityPolicyResponse,\n  BlobContainersDeleteImmutabilityPolicyOptionalParams,\n  BlobContainersDeleteImmutabilityPolicyResponse,\n  BlobContainersLockImmutabilityPolicyOptionalParams,\n  BlobContainersLockImmutabilityPolicyResponse,\n  BlobContainersExtendImmutabilityPolicyOptionalParams,\n  BlobContainersExtendImmutabilityPolicyResponse,\n  BlobContainersLeaseOptionalParams,\n  BlobContainersLeaseResponse,\n  BlobContainersObjectLevelWormOptionalParams,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Interface representing a BlobContainers. */\nexport interface BlobContainers {\n  /**\n   * Lists all containers and does not support a prefix like data plane. Also SRP today does not return\n   * continuation token.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param options The options parameters.\n   */\n  list(\n    resourceGroupName: string,\n    accountName: string,\n    options?: BlobContainersListOptionalParams,\n  ): PagedAsyncIterableIterator<ListContainerItem>;\n  /**\n   * Creates a new container under the specified account as described by request body. The container\n   * resource includes metadata and properties for that container. It does not include a list of the\n   * blobs contained by the container.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param containerName The name of the blob container within the specified storage account. Blob\n   *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters\n   *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or\n   *                      number.\n   * @param blobContainer Properties of the blob container to create.\n   * @param options The options parameters.\n   */\n  create(\n    resourceGroupName: string,\n    accountName: string,\n    containerName: string,\n    blobContainer: BlobContainer,\n    options?: BlobContainersCreateOptionalParams,\n  ): Promise<BlobContainersCreateResponse>;\n  /**\n   * Updates container properties as specified in request body. Properties not mentioned in the request\n   * will be unchanged. Update fails if the specified container doesn't already exist.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param containerName The name of the blob container within the specified storage account. Blob\n   *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters\n   *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or\n   *                      number.\n   * @param blobContainer Properties to update for the blob container.\n   * @param options The options parameters.\n   */\n  update(\n    resourceGroupName: string,\n    accountName: string,\n    containerName: string,\n    blobContainer: BlobContainer,\n    options?: BlobContainersUpdateOptionalParams,\n  ): Promise<BlobContainersUpdateResponse>;\n  /**\n   * Gets properties of a specified container.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param containerName The name of the blob container within the specified storage account. Blob\n   *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters\n   *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or\n   *                      number.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    accountName: string,\n    containerName: string,\n    options?: BlobContainersGetOptionalParams,\n  ): Promise<BlobContainersGetResponse>;\n  /**\n   * Deletes specified container under its account.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param containerName The name of the blob container within the specified storage account. Blob\n   *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters\n   *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or\n   *                      number.\n   * @param options The options parameters.\n   */\n  delete(\n    resourceGroupName: string,\n    accountName: string,\n    containerName: string,\n    options?: BlobContainersDeleteOptionalParams,\n  ): Promise<void>;\n  /**\n   * Sets legal hold tags. Setting the same tag results in an idempotent operation. SetLegalHold follows\n   * an append pattern and does not clear out the existing tags that are not specified in the request.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param containerName The name of the blob container within the specified storage account. Blob\n   *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters\n   *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or\n   *                      number.\n   * @param legalHold The LegalHold property that will be set to a blob container.\n   * @param options The options parameters.\n   */\n  setLegalHold(\n    resourceGroupName: string,\n    accountName: string,\n    containerName: string,\n    legalHold: LegalHold,\n    options?: BlobContainersSetLegalHoldOptionalParams,\n  ): Promise<BlobContainersSetLegalHoldResponse>;\n  /**\n   * Clears legal hold tags. Clearing the same or non-existent tag results in an idempotent operation.\n   * ClearLegalHold clears out only the specified tags in the request.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param containerName The name of the blob container within the specified storage account. Blob\n   *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters\n   *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or\n   *                      number.\n   * @param legalHold The LegalHold property that will be clear from a blob container.\n   * @param options The options parameters.\n   */\n  clearLegalHold(\n    resourceGroupName: string,\n    accountName: string,\n    containerName: string,\n    legalHold: LegalHold,\n    options?: BlobContainersClearLegalHoldOptionalParams,\n  ): Promise<BlobContainersClearLegalHoldResponse>;\n  /**\n   * Creates or updates an unlocked immutability policy. ETag in If-Match is honored if given but not\n   * required for this operation.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param containerName The name of the blob container within the specified storage account. Blob\n   *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters\n   *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or\n   *                      number.\n   * @param options The options parameters.\n   */\n  createOrUpdateImmutabilityPolicy(\n    resourceGroupName: string,\n    accountName: string,\n    containerName: string,\n    options?: BlobContainersCreateOrUpdateImmutabilityPolicyOptionalParams,\n  ): Promise<BlobContainersCreateOrUpdateImmutabilityPolicyResponse>;\n  /**\n   * Gets the existing immutability policy along with the corresponding ETag in response headers and\n   * body.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param containerName The name of the blob container within the specified storage account. Blob\n   *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters\n   *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or\n   *                      number.\n   * @param options The options parameters.\n   */\n  getImmutabilityPolicy(\n    resourceGroupName: string,\n    accountName: string,\n    containerName: string,\n    options?: BlobContainersGetImmutabilityPolicyOptionalParams,\n  ): Promise<BlobContainersGetImmutabilityPolicyResponse>;\n  /**\n   * Aborts an unlocked immutability policy. The response of delete has\n   * immutabilityPeriodSinceCreationInDays set to 0. ETag in If-Match is required for this operation.\n   * Deleting a locked immutability policy is not allowed, the only way is to delete the container after\n   * deleting all expired blobs inside the policy locked container.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param containerName The name of the blob container within the specified storage account. Blob\n   *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters\n   *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or\n   *                      number.\n   * @param ifMatch The entity state (ETag) version of the immutability policy to update must be returned\n   *                to the server for all update operations. The ETag value must include the leading and trailing double\n   *                quotes as returned by the service.\n   * @param options The options parameters.\n   */\n  deleteImmutabilityPolicy(\n    resourceGroupName: string,\n    accountName: string,\n    containerName: string,\n    ifMatch: string,\n    options?: BlobContainersDeleteImmutabilityPolicyOptionalParams,\n  ): Promise<BlobContainersDeleteImmutabilityPolicyResponse>;\n  /**\n   * Sets the ImmutabilityPolicy to Locked state. The only action allowed on a Locked policy is\n   * ExtendImmutabilityPolicy action. ETag in If-Match is required for this operation.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param containerName The name of the blob container within the specified storage account. Blob\n   *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters\n   *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or\n   *                      number.\n   * @param ifMatch The entity state (ETag) version of the immutability policy to update must be returned\n   *                to the server for all update operations. The ETag value must include the leading and trailing double\n   *                quotes as returned by the service.\n   * @param options The options parameters.\n   */\n  lockImmutabilityPolicy(\n    resourceGroupName: string,\n    accountName: string,\n    containerName: string,\n    ifMatch: string,\n    options?: BlobContainersLockImmutabilityPolicyOptionalParams,\n  ): Promise<BlobContainersLockImmutabilityPolicyResponse>;\n  /**\n   * Extends the immutabilityPeriodSinceCreationInDays of a locked immutabilityPolicy. The only action\n   * allowed on a Locked policy will be this action. ETag in If-Match is required for this operation.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param containerName The name of the blob container within the specified storage account. Blob\n   *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters\n   *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or\n   *                      number.\n   * @param ifMatch The entity state (ETag) version of the immutability policy to update must be returned\n   *                to the server for all update operations. The ETag value must include the leading and trailing double\n   *                quotes as returned by the service.\n   * @param options The options parameters.\n   */\n  extendImmutabilityPolicy(\n    resourceGroupName: string,\n    accountName: string,\n    containerName: string,\n    ifMatch: string,\n    options?: BlobContainersExtendImmutabilityPolicyOptionalParams,\n  ): Promise<BlobContainersExtendImmutabilityPolicyResponse>;\n  /**\n   * The Lease Container operation establishes and manages a lock on a container for delete operations.\n   * The lock duration can be 15 to 60 seconds, or can be infinite.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param containerName The name of the blob container within the specified storage account. Blob\n   *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters\n   *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or\n   *                      number.\n   * @param options The options parameters.\n   */\n  lease(\n    resourceGroupName: string,\n    accountName: string,\n    containerName: string,\n    options?: BlobContainersLeaseOptionalParams,\n  ): Promise<BlobContainersLeaseResponse>;\n  /**\n   * This operation migrates a blob container from container level WORM to object level immutability\n   * enabled container. Prerequisites require a container level immutability policy either in locked or\n   * unlocked state, Account level versioning must be enabled and there should be no Legal hold on the\n   * container.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param containerName The name of the blob container within the specified storage account. Blob\n   *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters\n   *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or\n   *                      number.\n   * @param options The options parameters.\n   */\n  beginObjectLevelWorm(\n    resourceGroupName: string,\n    accountName: string,\n    containerName: string,\n    options?: BlobContainersObjectLevelWormOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * This operation migrates a blob container from container level WORM to object level immutability\n   * enabled container. Prerequisites require a container level immutability policy either in locked or\n   * unlocked state, Account level versioning must be enabled and there should be no Legal hold on the\n   * container.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param containerName The name of the blob container within the specified storage account. Blob\n   *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters\n   *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or\n   *                      number.\n   * @param options The options parameters.\n   */\n  beginObjectLevelWormAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    containerName: string,\n    options?: BlobContainersObjectLevelWormOptionalParams,\n  ): Promise<void>;\n}\n"]}