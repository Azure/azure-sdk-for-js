{"version":3,"file":"networkSecurityPerimeterConfigurations.js","sourceRoot":"","sources":["../../../src/operations/networkSecurityPerimeterConfigurations.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { NetworkSecurityPerimeterConfigurations } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { StorageManagementClient } from \"../storageManagementClient.js\";\nimport {\n  SimplePollerLike,\n  OperationState,\n  createHttpPoller,\n} from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl.js\";\nimport {\n  NetworkSecurityPerimeterConfiguration,\n  NetworkSecurityPerimeterConfigurationsListOptionalParams,\n  NetworkSecurityPerimeterConfigurationsListResponse,\n  NetworkSecurityPerimeterConfigurationsGetOptionalParams,\n  NetworkSecurityPerimeterConfigurationsGetResponse,\n  NetworkSecurityPerimeterConfigurationsReconcileOptionalParams,\n  NetworkSecurityPerimeterConfigurationsReconcileResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing NetworkSecurityPerimeterConfigurations operations. */\nexport class NetworkSecurityPerimeterConfigurationsImpl\n  implements NetworkSecurityPerimeterConfigurations\n{\n  private readonly client: StorageManagementClient;\n\n  /**\n   * Initialize a new instance of the class NetworkSecurityPerimeterConfigurations class.\n   * @param client Reference to the service client\n   */\n  constructor(client: StorageManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Gets list of effective NetworkSecurityPerimeterConfiguration for storage account\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param options The options parameters.\n   */\n  public list(\n    resourceGroupName: string,\n    accountName: string,\n    options?: NetworkSecurityPerimeterConfigurationsListOptionalParams,\n  ): PagedAsyncIterableIterator<NetworkSecurityPerimeterConfiguration> {\n    const iter = this.listPagingAll(resourceGroupName, accountName, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(\n          resourceGroupName,\n          accountName,\n          options,\n          settings,\n        );\n      },\n    };\n  }\n\n  private async *listPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    options?: NetworkSecurityPerimeterConfigurationsListOptionalParams,\n    _settings?: PageSettings,\n  ): AsyncIterableIterator<NetworkSecurityPerimeterConfiguration[]> {\n    let result: NetworkSecurityPerimeterConfigurationsListResponse;\n    result = await this._list(resourceGroupName, accountName, options);\n    yield result.value || [];\n  }\n\n  private async *listPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    options?: NetworkSecurityPerimeterConfigurationsListOptionalParams,\n  ): AsyncIterableIterator<NetworkSecurityPerimeterConfiguration> {\n    for await (const page of this.listPagingPage(\n      resourceGroupName,\n      accountName,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Gets list of effective NetworkSecurityPerimeterConfiguration for storage account\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param options The options parameters.\n   */\n  private _list(\n    resourceGroupName: string,\n    accountName: string,\n    options?: NetworkSecurityPerimeterConfigurationsListOptionalParams,\n  ): Promise<NetworkSecurityPerimeterConfigurationsListResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, options },\n      listOperationSpec,\n    );\n  }\n\n  /**\n   * Gets effective NetworkSecurityPerimeterConfiguration for association\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param networkSecurityPerimeterConfigurationName The name for Network Security Perimeter\n   *                                                  configuration\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    accountName: string,\n    networkSecurityPerimeterConfigurationName: string,\n    options?: NetworkSecurityPerimeterConfigurationsGetOptionalParams,\n  ): Promise<NetworkSecurityPerimeterConfigurationsGetResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        accountName,\n        networkSecurityPerimeterConfigurationName,\n        options,\n      },\n      getOperationSpec,\n    );\n  }\n\n  /**\n   * Refreshes any information about the association.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param networkSecurityPerimeterConfigurationName The name for Network Security Perimeter\n   *                                                  configuration\n   * @param options The options parameters.\n   */\n  async beginReconcile(\n    resourceGroupName: string,\n    accountName: string,\n    networkSecurityPerimeterConfigurationName: string,\n    options?: NetworkSecurityPerimeterConfigurationsReconcileOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<NetworkSecurityPerimeterConfigurationsReconcileResponse>,\n      NetworkSecurityPerimeterConfigurationsReconcileResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<NetworkSecurityPerimeterConfigurationsReconcileResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        accountName,\n        networkSecurityPerimeterConfigurationName,\n        options,\n      },\n      spec: reconcileOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      NetworkSecurityPerimeterConfigurationsReconcileResponse,\n      OperationState<NetworkSecurityPerimeterConfigurationsReconcileResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Refreshes any information about the association.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param networkSecurityPerimeterConfigurationName The name for Network Security Perimeter\n   *                                                  configuration\n   * @param options The options parameters.\n   */\n  async beginReconcileAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    networkSecurityPerimeterConfigurationName: string,\n    options?: NetworkSecurityPerimeterConfigurationsReconcileOptionalParams,\n  ): Promise<NetworkSecurityPerimeterConfigurationsReconcileResponse> {\n    const poller = await this.beginReconcile(\n      resourceGroupName,\n      accountName,\n      networkSecurityPerimeterConfigurationName,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/networkSecurityPerimeterConfigurations\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NetworkSecurityPerimeterConfigurationList,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponseAutoGenerated,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.subscriptionId,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/networkSecurityPerimeterConfigurations/{networkSecurityPerimeterConfigurationName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NetworkSecurityPerimeterConfiguration,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponseAutoGenerated,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.subscriptionId,\n    Parameters.networkSecurityPerimeterConfigurationName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst reconcileOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/networkSecurityPerimeterConfigurations/{networkSecurityPerimeterConfigurationName}/reconcile\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      headersMapper:\n        Mappers.NetworkSecurityPerimeterConfigurationsReconcileHeaders,\n    },\n    201: {\n      headersMapper:\n        Mappers.NetworkSecurityPerimeterConfigurationsReconcileHeaders,\n    },\n    202: {\n      headersMapper:\n        Mappers.NetworkSecurityPerimeterConfigurationsReconcileHeaders,\n    },\n    204: {\n      headersMapper:\n        Mappers.NetworkSecurityPerimeterConfigurationsReconcileHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponseAutoGenerated,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.subscriptionId,\n    Parameters.networkSecurityPerimeterConfigurationName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n"]}