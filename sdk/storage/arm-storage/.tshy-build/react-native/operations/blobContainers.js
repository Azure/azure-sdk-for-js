/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import { setContinuationToken } from "../pagingHelper.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { createHttpPoller, } from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
/// <reference lib="esnext.asynciterable" />
/** Class containing BlobContainers operations. */
export class BlobContainersImpl {
    /**
     * Initialize a new instance of the class BlobContainers class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all containers and does not support a prefix like data plane. Also SRP today does not return
     * continuation token.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
     *                    only.
     * @param options The options parameters.
     */
    list(resourceGroupName, accountName, options) {
        const iter = this.listPagingAll(resourceGroupName, accountName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, accountName, options, settings);
            },
        };
    }
    listPagingPage(resourceGroupName, accountName, options, settings) {
        return __asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._list(resourceGroupName, accountName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listNext(resourceGroupName, accountName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, accountName, options) {
        return __asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listPagingPage(resourceGroupName, accountName, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all containers and does not support a prefix like data plane. Also SRP today does not return
     * continuation token.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
     *                    only.
     * @param options The options parameters.
     */
    _list(resourceGroupName, accountName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, options }, listOperationSpec);
    }
    /**
     * Creates a new container under the specified account as described by request body. The container
     * resource includes metadata and properties for that container. It does not include a list of the
     * blobs contained by the container.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
     *                    only.
     * @param containerName The name of the blob container within the specified storage account. Blob
     *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters
     *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or
     *                      number.
     * @param blobContainer Properties of the blob container to create.
     * @param options The options parameters.
     */
    create(resourceGroupName, accountName, containerName, blobContainer, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, containerName, blobContainer, options }, createOperationSpec);
    }
    /**
     * Updates container properties as specified in request body. Properties not mentioned in the request
     * will be unchanged. Update fails if the specified container doesn't already exist.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
     *                    only.
     * @param containerName The name of the blob container within the specified storage account. Blob
     *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters
     *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or
     *                      number.
     * @param blobContainer Properties to update for the blob container.
     * @param options The options parameters.
     */
    update(resourceGroupName, accountName, containerName, blobContainer, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, containerName, blobContainer, options }, updateOperationSpec);
    }
    /**
     * Gets properties of a specified container.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
     *                    only.
     * @param containerName The name of the blob container within the specified storage account. Blob
     *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters
     *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or
     *                      number.
     * @param options The options parameters.
     */
    get(resourceGroupName, accountName, containerName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, containerName, options }, getOperationSpec);
    }
    /**
     * Deletes specified container under its account.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
     *                    only.
     * @param containerName The name of the blob container within the specified storage account. Blob
     *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters
     *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or
     *                      number.
     * @param options The options parameters.
     */
    delete(resourceGroupName, accountName, containerName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, containerName, options }, deleteOperationSpec);
    }
    /**
     * Sets legal hold tags. Setting the same tag results in an idempotent operation. SetLegalHold follows
     * an append pattern and does not clear out the existing tags that are not specified in the request.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
     *                    only.
     * @param containerName The name of the blob container within the specified storage account. Blob
     *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters
     *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or
     *                      number.
     * @param legalHold The LegalHold property that will be set to a blob container.
     * @param options The options parameters.
     */
    setLegalHold(resourceGroupName, accountName, containerName, legalHold, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, containerName, legalHold, options }, setLegalHoldOperationSpec);
    }
    /**
     * Clears legal hold tags. Clearing the same or non-existent tag results in an idempotent operation.
     * ClearLegalHold clears out only the specified tags in the request.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
     *                    only.
     * @param containerName The name of the blob container within the specified storage account. Blob
     *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters
     *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or
     *                      number.
     * @param legalHold The LegalHold property that will be clear from a blob container.
     * @param options The options parameters.
     */
    clearLegalHold(resourceGroupName, accountName, containerName, legalHold, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, containerName, legalHold, options }, clearLegalHoldOperationSpec);
    }
    /**
     * Creates or updates an unlocked immutability policy. ETag in If-Match is honored if given but not
     * required for this operation.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
     *                    only.
     * @param containerName The name of the blob container within the specified storage account. Blob
     *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters
     *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or
     *                      number.
     * @param options The options parameters.
     */
    createOrUpdateImmutabilityPolicy(resourceGroupName, accountName, containerName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, containerName, options }, createOrUpdateImmutabilityPolicyOperationSpec);
    }
    /**
     * Gets the existing immutability policy along with the corresponding ETag in response headers and
     * body.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
     *                    only.
     * @param containerName The name of the blob container within the specified storage account. Blob
     *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters
     *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or
     *                      number.
     * @param options The options parameters.
     */
    getImmutabilityPolicy(resourceGroupName, accountName, containerName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, containerName, options }, getImmutabilityPolicyOperationSpec);
    }
    /**
     * Aborts an unlocked immutability policy. The response of delete has
     * immutabilityPeriodSinceCreationInDays set to 0. ETag in If-Match is required for this operation.
     * Deleting a locked immutability policy is not allowed, the only way is to delete the container after
     * deleting all expired blobs inside the policy locked container.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
     *                    only.
     * @param containerName The name of the blob container within the specified storage account. Blob
     *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters
     *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or
     *                      number.
     * @param ifMatch The entity state (ETag) version of the immutability policy to update must be returned
     *                to the server for all update operations. The ETag value must include the leading and trailing double
     *                quotes as returned by the service.
     * @param options The options parameters.
     */
    deleteImmutabilityPolicy(resourceGroupName, accountName, containerName, ifMatch, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, containerName, ifMatch, options }, deleteImmutabilityPolicyOperationSpec);
    }
    /**
     * Sets the ImmutabilityPolicy to Locked state. The only action allowed on a Locked policy is
     * ExtendImmutabilityPolicy action. ETag in If-Match is required for this operation.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
     *                    only.
     * @param containerName The name of the blob container within the specified storage account. Blob
     *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters
     *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or
     *                      number.
     * @param ifMatch The entity state (ETag) version of the immutability policy to update must be returned
     *                to the server for all update operations. The ETag value must include the leading and trailing double
     *                quotes as returned by the service.
     * @param options The options parameters.
     */
    lockImmutabilityPolicy(resourceGroupName, accountName, containerName, ifMatch, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, containerName, ifMatch, options }, lockImmutabilityPolicyOperationSpec);
    }
    /**
     * Extends the immutabilityPeriodSinceCreationInDays of a locked immutabilityPolicy. The only action
     * allowed on a Locked policy will be this action. ETag in If-Match is required for this operation.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
     *                    only.
     * @param containerName The name of the blob container within the specified storage account. Blob
     *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters
     *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or
     *                      number.
     * @param ifMatch The entity state (ETag) version of the immutability policy to update must be returned
     *                to the server for all update operations. The ETag value must include the leading and trailing double
     *                quotes as returned by the service.
     * @param options The options parameters.
     */
    extendImmutabilityPolicy(resourceGroupName, accountName, containerName, ifMatch, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, containerName, ifMatch, options }, extendImmutabilityPolicyOperationSpec);
    }
    /**
     * The Lease Container operation establishes and manages a lock on a container for delete operations.
     * The lock duration can be 15 to 60 seconds, or can be infinite.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
     *                    only.
     * @param containerName The name of the blob container within the specified storage account. Blob
     *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters
     *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or
     *                      number.
     * @param options The options parameters.
     */
    lease(resourceGroupName, accountName, containerName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, containerName, options }, leaseOperationSpec);
    }
    /**
     * This operation migrates a blob container from container level WORM to object level immutability
     * enabled container. Prerequisites require a container level immutability policy either in locked or
     * unlocked state, Account level versioning must be enabled and there should be no Legal hold on the
     * container.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
     *                    only.
     * @param containerName The name of the blob container within the specified storage account. Blob
     *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters
     *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or
     *                      number.
     * @param options The options parameters.
     */
    async beginObjectLevelWorm(resourceGroupName, accountName, containerName, options) {
        const directSendOperation = async (args, spec) => {
            return this.client.sendOperationRequest(args, spec);
        };
        const sendOperationFn = async (args, spec) => {
            var _a;
            let currentRawResponse = undefined;
            const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
            };
            const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON(),
                },
            };
        };
        const lro = createLroSpec({
            sendOperationFn,
            args: { resourceGroupName, accountName, containerName, options },
            spec: objectLevelWormOperationSpec,
        });
        const poller = await createHttpPoller(lro, {
            restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
            intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            resourceLocationConfig: "location",
        });
        await poller.poll();
        return poller;
    }
    /**
     * This operation migrates a blob container from container level WORM to object level immutability
     * enabled container. Prerequisites require a container level immutability policy either in locked or
     * unlocked state, Account level versioning must be enabled and there should be no Legal hold on the
     * container.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
     *                    only.
     * @param containerName The name of the blob container within the specified storage account. Blob
     *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters
     *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or
     *                      number.
     * @param options The options parameters.
     */
    async beginObjectLevelWormAndWait(resourceGroupName, accountName, containerName, options) {
        const poller = await this.beginObjectLevelWorm(resourceGroupName, accountName, containerName, options);
        return poller.pollUntilDone();
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
     *                    only.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, accountName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ListContainerItems,
        },
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.maxpagesize,
        Parameters.filter,
        Parameters.include,
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.BlobContainer,
        },
        201: {
            bodyMapper: Mappers.BlobContainer,
        },
    },
    requestBody: Parameters.blobContainer,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId,
        Parameters.containerName,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.BlobContainer,
        },
    },
    requestBody: Parameters.blobContainer,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId,
        Parameters.containerName,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.BlobContainer,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId,
        Parameters.containerName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}",
    httpMethod: "DELETE",
    responses: { 200: {}, 204: {} },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId,
        Parameters.containerName,
    ],
    serializer,
};
const setLegalHoldOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/setLegalHold",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.LegalHold,
        },
    },
    requestBody: Parameters.legalHold,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId,
        Parameters.containerName,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const clearLegalHoldOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/clearLegalHold",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.LegalHold,
        },
    },
    requestBody: Parameters.legalHold,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId,
        Parameters.containerName,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const createOrUpdateImmutabilityPolicyOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.ImmutabilityPolicy,
            headersMapper: Mappers.BlobContainersCreateOrUpdateImmutabilityPolicyHeaders,
        },
    },
    requestBody: Parameters.parameters1,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId,
        Parameters.containerName,
        Parameters.immutabilityPolicyName,
    ],
    headerParameters: [
        Parameters.accept,
        Parameters.contentType,
        Parameters.ifMatch,
    ],
    mediaType: "json",
    serializer,
};
const getImmutabilityPolicyOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ImmutabilityPolicy,
            headersMapper: Mappers.BlobContainersGetImmutabilityPolicyHeaders,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId,
        Parameters.containerName,
        Parameters.immutabilityPolicyName,
    ],
    headerParameters: [Parameters.accept, Parameters.ifMatch],
    serializer,
};
const deleteImmutabilityPolicyOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: Mappers.ImmutabilityPolicy,
            headersMapper: Mappers.BlobContainersDeleteImmutabilityPolicyHeaders,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId,
        Parameters.containerName,
        Parameters.immutabilityPolicyName,
    ],
    headerParameters: [Parameters.accept, Parameters.ifMatch1],
    serializer,
};
const lockImmutabilityPolicyOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/default/lock",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.ImmutabilityPolicy,
            headersMapper: Mappers.BlobContainersLockImmutabilityPolicyHeaders,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId,
        Parameters.containerName,
    ],
    headerParameters: [Parameters.accept, Parameters.ifMatch1],
    serializer,
};
const extendImmutabilityPolicyOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/default/extend",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.ImmutabilityPolicy,
            headersMapper: Mappers.BlobContainersExtendImmutabilityPolicyHeaders,
        },
    },
    requestBody: Parameters.parameters1,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId,
        Parameters.containerName,
    ],
    headerParameters: [
        Parameters.accept,
        Parameters.contentType,
        Parameters.ifMatch1,
    ],
    mediaType: "json",
    serializer,
};
const leaseOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/lease",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.LeaseContainerResponse,
        },
    },
    requestBody: Parameters.parameters2,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId,
        Parameters.containerName,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const objectLevelWormOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/migrate",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId,
        Parameters.containerName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ListContainerItems,
        },
    },
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId,
        Parameters.nextLink,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
//# sourceMappingURL=blobContainers.js.map