/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import { setContinuationToken } from "../pagingHelper.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
/// <reference lib="esnext.asynciterable" />
/** Class containing FileShares operations. */
export class FileSharesImpl {
    /**
     * Initialize a new instance of the class FileShares class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all shares.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
     *                    only.
     * @param options The options parameters.
     */
    list(resourceGroupName, accountName, options) {
        const iter = this.listPagingAll(resourceGroupName, accountName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, accountName, options, settings);
            },
        };
    }
    listPagingPage(resourceGroupName, accountName, options, settings) {
        return __asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._list(resourceGroupName, accountName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listNext(resourceGroupName, accountName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, accountName, options) {
        return __asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listPagingPage(resourceGroupName, accountName, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all shares.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
     *                    only.
     * @param options The options parameters.
     */
    _list(resourceGroupName, accountName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, options }, listOperationSpec);
    }
    /**
     * Creates a new share under the specified account as described by request body. The share resource
     * includes metadata and properties for that share. It does not include a list of the files contained
     * by the share.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
     *                    only.
     * @param shareName The name of the file share within the specified storage account. File share names
     *                  must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only.
     *                  Every dash (-) character must be immediately preceded and followed by a letter or number.
     * @param fileShare Properties of the file share to create.
     * @param options The options parameters.
     */
    create(resourceGroupName, accountName, shareName, fileShare, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, shareName, fileShare, options }, createOperationSpec);
    }
    /**
     * Updates share properties as specified in request body. Properties not mentioned in the request will
     * not be changed. Update fails if the specified share does not already exist.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
     *                    only.
     * @param shareName The name of the file share within the specified storage account. File share names
     *                  must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only.
     *                  Every dash (-) character must be immediately preceded and followed by a letter or number.
     * @param fileShare Properties to update for the file share.
     * @param options The options parameters.
     */
    update(resourceGroupName, accountName, shareName, fileShare, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, shareName, fileShare, options }, updateOperationSpec);
    }
    /**
     * Gets properties of a specified share.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
     *                    only.
     * @param shareName The name of the file share within the specified storage account. File share names
     *                  must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only.
     *                  Every dash (-) character must be immediately preceded and followed by a letter or number.
     * @param options The options parameters.
     */
    get(resourceGroupName, accountName, shareName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, shareName, options }, getOperationSpec);
    }
    /**
     * Deletes specified share under its account.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
     *                    only.
     * @param shareName The name of the file share within the specified storage account. File share names
     *                  must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only.
     *                  Every dash (-) character must be immediately preceded and followed by a letter or number.
     * @param options The options parameters.
     */
    delete(resourceGroupName, accountName, shareName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, shareName, options }, deleteOperationSpec);
    }
    /**
     * Restore a file share within a valid retention days if share soft delete is enabled
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
     *                    only.
     * @param shareName The name of the file share within the specified storage account. File share names
     *                  must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only.
     *                  Every dash (-) character must be immediately preceded and followed by a letter or number.
     * @param deletedShare The deleted share to be restored.
     * @param options The options parameters.
     */
    restore(resourceGroupName, accountName, shareName, deletedShare, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, shareName, deletedShare, options }, restoreOperationSpec);
    }
    /**
     * The Lease Share operation establishes and manages a lock on a share for delete operations. The lock
     * duration can be 15 to 60 seconds, or can be infinite.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
     *                    only.
     * @param shareName The name of the file share within the specified storage account. File share names
     *                  must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only.
     *                  Every dash (-) character must be immediately preceded and followed by a letter or number.
     * @param options The options parameters.
     */
    lease(resourceGroupName, accountName, shareName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, shareName, options }, leaseOperationSpec);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
     *                    only.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, accountName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/default/shares",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.FileShareItems,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.maxpagesize,
        Parameters.filter,
        Parameters.expand,
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/default/shares/{shareName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.FileShare,
        },
        201: {
            bodyMapper: Mappers.FileShare,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    requestBody: Parameters.fileShare,
    queryParameters: [Parameters.apiVersion, Parameters.expand],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId,
        Parameters.shareName,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/default/shares/{shareName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.FileShare,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    requestBody: Parameters.fileShare,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId,
        Parameters.shareName,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/default/shares/{shareName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.FileShare,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    queryParameters: [Parameters.apiVersion, Parameters.expand],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId,
        Parameters.shareName,
    ],
    headerParameters: [Parameters.accept, Parameters.xMsSnapshot],
    serializer,
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/default/shares/{shareName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    queryParameters: [Parameters.apiVersion, Parameters.include1],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId,
        Parameters.shareName,
    ],
    headerParameters: [Parameters.accept, Parameters.xMsSnapshot],
    serializer,
};
const restoreOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/default/shares/{shareName}/restore",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    requestBody: Parameters.deletedShare,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId,
        Parameters.shareName,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const leaseOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/default/shares/{shareName}/lease",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.LeaseShareResponse,
            headersMapper: Mappers.FileSharesLeaseHeaders,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    requestBody: Parameters.parameters4,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId,
        Parameters.shareName,
    ],
    headerParameters: [
        Parameters.accept,
        Parameters.contentType,
        Parameters.xMsSnapshot,
    ],
    mediaType: "json",
    serializer,
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.FileShareItems,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId,
        Parameters.nextLink,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
//# sourceMappingURL=fileShares.js.map