/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
/** Class containing ManagementPolicies operations. */
export class ManagementPoliciesImpl {
    /**
     * Initialize a new instance of the class ManagementPolicies class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the managementpolicy associated with the specified storage account.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
     *                    only.
     * @param managementPolicyName The name of the Storage Account Management Policy. It should always be
     *                             'default'
     * @param options The options parameters.
     */
    get(resourceGroupName, accountName, managementPolicyName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, managementPolicyName, options }, getOperationSpec);
    }
    /**
     * Sets the managementpolicy to the specified storage account.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
     *                    only.
     * @param managementPolicyName The name of the Storage Account Management Policy. It should always be
     *                             'default'
     * @param properties The ManagementPolicy set to a storage account.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, accountName, managementPolicyName, properties, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            accountName,
            managementPolicyName,
            properties,
            options,
        }, createOrUpdateOperationSpec);
    }
    /**
     * Deletes the managementpolicy associated with the specified storage account.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
     *                    only.
     * @param managementPolicyName The name of the Storage Account Management Policy. It should always be
     *                             'default'
     * @param options The options parameters.
     */
    delete(resourceGroupName, accountName, managementPolicyName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, managementPolicyName, options }, deleteOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/managementPolicies/{managementPolicyName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ManagementPolicy,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId,
        Parameters.managementPolicyName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/managementPolicies/{managementPolicyName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.ManagementPolicy,
        },
    },
    requestBody: Parameters.properties,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId,
        Parameters.managementPolicyName,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/managementPolicies/{managementPolicyName}",
    httpMethod: "DELETE",
    responses: { 200: {}, 204: {} },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId,
        Parameters.managementPolicyName,
    ],
    serializer,
};
//# sourceMappingURL=managementPolicies.js.map