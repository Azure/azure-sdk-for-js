/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { BlobServiceProperties as BlobServicePropertiesMapper, BlobContainer as BlobContainerMapper, LegalHold as LegalHoldMapper, ImmutabilityPolicy as ImmutabilityPolicyMapper, LeaseContainerRequest as LeaseContainerRequestMapper, FileServiceProperties as FileServicePropertiesMapper, FileShare as FileShareMapper, DeletedShare as DeletedShareMapper, LeaseShareRequest as LeaseShareRequestMapper, QueueServiceProperties as QueueServicePropertiesMapper, StorageQueue as StorageQueueMapper, StorageAccountCheckNameAvailabilityParameters as StorageAccountCheckNameAvailabilityParametersMapper, StorageAccountCreateParameters as StorageAccountCreateParametersMapper, StorageAccountUpdateParameters as StorageAccountUpdateParametersMapper, StorageAccountRegenerateKeyParameters as StorageAccountRegenerateKeyParametersMapper, AccountSasParameters as AccountSasParametersMapper, ServiceSasParameters as ServiceSasParametersMapper, StorageAccountMigration as StorageAccountMigrationMapper, BlobRestoreParameters as BlobRestoreParametersMapper, ManagementPolicy as ManagementPolicyMapper, BlobInventoryPolicy as BlobInventoryPolicyMapper, PrivateEndpointConnection as PrivateEndpointConnectionMapper, ObjectReplicationPolicy as ObjectReplicationPolicyMapper, LocalUser as LocalUserMapper, EncryptionScope as EncryptionScopeMapper, TableServiceProperties as TableServicePropertiesMapper, Table as TableMapper, StorageTaskAssignment as StorageTaskAssignmentMapper, StorageTaskAssignmentUpdateParameters as StorageTaskAssignmentUpdateParametersMapper, } from "../models/mappers.js";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String",
        },
    },
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1,
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const accountName = {
    parameterPath: "accountName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-z0-9]+$"),
            MaxLength: 24,
            MinLength: 3,
        },
        serializedName: "accountName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2024-01-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String",
        },
    },
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1,
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String",
        },
    },
};
export const parameters = {
    parameterPath: "parameters",
    mapper: BlobServicePropertiesMapper,
};
export const blobServicesName = {
    parameterPath: "blobServicesName",
    mapper: {
        defaultValue: "default",
        isConstant: true,
        serializedName: "BlobServicesName",
        type: {
            name: "String",
        },
    },
};
export const maxpagesize = {
    parameterPath: ["options", "maxpagesize"],
    mapper: {
        serializedName: "$maxpagesize",
        type: {
            name: "String",
        },
    },
};
export const filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String",
        },
    },
};
export const include = {
    parameterPath: ["options", "include"],
    mapper: {
        serializedName: "$include",
        type: {
            name: "String",
        },
    },
};
export const blobContainer = {
    parameterPath: "blobContainer",
    mapper: BlobContainerMapper,
};
export const containerName = {
    parameterPath: "containerName",
    mapper: {
        constraints: {
            MaxLength: 63,
            MinLength: 3,
        },
        serializedName: "containerName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const legalHold = {
    parameterPath: "legalHold",
    mapper: LegalHoldMapper,
};
export const parameters1 = {
    parameterPath: ["options", "parameters"],
    mapper: ImmutabilityPolicyMapper,
};
export const immutabilityPolicyName = {
    parameterPath: "immutabilityPolicyName",
    mapper: {
        defaultValue: "default",
        isConstant: true,
        serializedName: "immutabilityPolicyName",
        type: {
            name: "String",
        },
    },
};
export const ifMatch = {
    parameterPath: ["options", "ifMatch"],
    mapper: {
        serializedName: "If-Match",
        type: {
            name: "String",
        },
    },
};
export const ifMatch1 = {
    parameterPath: "ifMatch",
    mapper: {
        serializedName: "If-Match",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const parameters2 = {
    parameterPath: ["options", "parameters"],
    mapper: LeaseContainerRequestMapper,
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
export const parameters3 = {
    parameterPath: "parameters",
    mapper: FileServicePropertiesMapper,
};
export const fileServicesName = {
    parameterPath: "fileServicesName",
    mapper: {
        defaultValue: "default",
        isConstant: true,
        serializedName: "FileServicesName",
        type: {
            name: "String",
        },
    },
};
export const maxpagesize1 = {
    parameterPath: ["options", "maxpagesize"],
    mapper: {
        serializedName: "$maxpagesize",
        type: {
            name: "Number",
        },
    },
};
export const fileServiceUsagesName = {
    parameterPath: "fileServiceUsagesName",
    mapper: {
        defaultValue: "default",
        isConstant: true,
        serializedName: "fileServiceUsagesName",
        type: {
            name: "String",
        },
    },
};
export const expand = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "String",
        },
    },
};
export const fileShare = {
    parameterPath: "fileShare",
    mapper: FileShareMapper,
};
export const shareName = {
    parameterPath: "shareName",
    mapper: {
        constraints: {
            MaxLength: 63,
            MinLength: 3,
        },
        serializedName: "shareName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const xMsSnapshot = {
    parameterPath: ["options", "xMsSnapshot"],
    mapper: {
        serializedName: "x-ms-snapshot",
        type: {
            name: "String",
        },
    },
};
export const include1 = {
    parameterPath: ["options", "include"],
    mapper: {
        serializedName: "$include",
        type: {
            name: "String",
        },
    },
};
export const deletedShare = {
    parameterPath: "deletedShare",
    mapper: DeletedShareMapper,
};
export const parameters4 = {
    parameterPath: ["options", "parameters"],
    mapper: LeaseShareRequestMapper,
};
export const parameters5 = {
    parameterPath: "parameters",
    mapper: QueueServicePropertiesMapper,
};
export const queueServiceName = {
    parameterPath: "queueServiceName",
    mapper: {
        defaultValue: "default",
        isConstant: true,
        serializedName: "queueServiceName",
        type: {
            name: "String",
        },
    },
};
export const queue = {
    parameterPath: "queue",
    mapper: StorageQueueMapper,
};
export const queueName = {
    parameterPath: "queueName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-z0-9]([a-z0-9]|(-(?!-))){1,61}[a-z0-9]$"),
            MaxLength: 63,
            MinLength: 3,
        },
        serializedName: "queueName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const accountName1 = {
    parameterPath: "accountName",
    mapper: StorageAccountCheckNameAvailabilityParametersMapper,
};
export const parameters6 = {
    parameterPath: "parameters",
    mapper: StorageAccountCreateParametersMapper,
};
export const expand1 = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "Enum",
            allowedValues: ["geoReplicationStats", "blobRestoreStatus"],
        },
    },
};
export const parameters7 = {
    parameterPath: "parameters",
    mapper: StorageAccountUpdateParametersMapper,
};
export const expand2 = {
    parameterPath: ["options", "expand"],
    mapper: {
        defaultValue: "kerb",
        isConstant: true,
        serializedName: "$expand",
        type: {
            name: "String",
        },
    },
};
export const regenerateKey = {
    parameterPath: "regenerateKey",
    mapper: StorageAccountRegenerateKeyParametersMapper,
};
export const parameters8 = {
    parameterPath: "parameters",
    mapper: AccountSasParametersMapper,
};
export const parameters9 = {
    parameterPath: "parameters",
    mapper: ServiceSasParametersMapper,
};
export const failoverType = {
    parameterPath: ["options", "failoverType"],
    mapper: {
        defaultValue: "Planned",
        isConstant: true,
        serializedName: "failoverType",
        type: {
            name: "String",
        },
    },
};
export const requestType = {
    parameterPath: "requestType",
    mapper: {
        serializedName: "requestType",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const parameters10 = {
    parameterPath: "parameters",
    mapper: StorageAccountMigrationMapper,
};
export const migrationName = {
    parameterPath: "migrationName",
    mapper: {
        serializedName: "migrationName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const parameters11 = {
    parameterPath: "parameters",
    mapper: BlobRestoreParametersMapper,
};
export const accountName2 = {
    parameterPath: "accountName",
    mapper: {
        constraints: {
            MaxLength: 24,
            MinLength: 3,
        },
        serializedName: "accountName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const deletedAccountName = {
    parameterPath: "deletedAccountName",
    mapper: {
        constraints: {
            MaxLength: 24,
            MinLength: 3,
        },
        serializedName: "deletedAccountName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const location = {
    parameterPath: "location",
    mapper: {
        serializedName: "location",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const managementPolicyName = {
    parameterPath: "managementPolicyName",
    mapper: {
        serializedName: "managementPolicyName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const properties = {
    parameterPath: "properties",
    mapper: ManagementPolicyMapper,
};
export const blobInventoryPolicyName = {
    parameterPath: "blobInventoryPolicyName",
    mapper: {
        serializedName: "blobInventoryPolicyName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const properties1 = {
    parameterPath: "properties",
    mapper: BlobInventoryPolicyMapper,
};
export const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const properties2 = {
    parameterPath: "properties",
    mapper: PrivateEndpointConnectionMapper,
};
export const objectReplicationPolicyId = {
    parameterPath: "objectReplicationPolicyId",
    mapper: {
        constraints: {
            MinLength: 1,
        },
        serializedName: "objectReplicationPolicyId",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const properties3 = {
    parameterPath: "properties",
    mapper: ObjectReplicationPolicyMapper,
};
export const maxpagesize2 = {
    parameterPath: ["options", "maxpagesize"],
    mapper: {
        constraints: {
            InclusiveMaximum: 5000,
            InclusiveMinimum: 1,
        },
        serializedName: "$maxpagesize",
        type: {
            name: "Number",
        },
    },
};
export const include2 = {
    parameterPath: ["options", "include"],
    mapper: {
        serializedName: "$include",
        type: {
            name: "String",
        },
    },
};
export const username = {
    parameterPath: "username",
    mapper: {
        constraints: {
            MaxLength: 64,
            MinLength: 3,
        },
        serializedName: "username",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const properties4 = {
    parameterPath: "properties",
    mapper: LocalUserMapper,
};
export const encryptionScope = {
    parameterPath: "encryptionScope",
    mapper: EncryptionScopeMapper,
};
export const encryptionScopeName = {
    parameterPath: "encryptionScopeName",
    mapper: {
        constraints: {
            MaxLength: 63,
            MinLength: 3,
        },
        serializedName: "encryptionScopeName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const include3 = {
    parameterPath: ["options", "include"],
    mapper: {
        serializedName: "$include",
        type: {
            name: "String",
        },
    },
};
export const parameters12 = {
    parameterPath: "parameters",
    mapper: TableServicePropertiesMapper,
};
export const tableServiceName = {
    parameterPath: "tableServiceName",
    mapper: {
        defaultValue: "default",
        isConstant: true,
        serializedName: "tableServiceName",
        type: {
            name: "String",
        },
    },
};
export const parameters13 = {
    parameterPath: ["options", "parameters"],
    mapper: TableMapper,
};
export const tableName = {
    parameterPath: "tableName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z][A-Za-z0-9]{2,62}$"),
            MaxLength: 63,
            MinLength: 3,
        },
        serializedName: "tableName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const networkSecurityPerimeterConfigurationName = {
    parameterPath: "networkSecurityPerimeterConfigurationName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^.*$"),
        },
        serializedName: "networkSecurityPerimeterConfigurationName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const parameters14 = {
    parameterPath: "parameters",
    mapper: StorageTaskAssignmentMapper,
};
export const storageTaskAssignmentName = {
    parameterPath: "storageTaskAssignmentName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-z0-9]{3,24}$"),
            MaxLength: 24,
            MinLength: 3,
        },
        serializedName: "storageTaskAssignmentName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const parameters15 = {
    parameterPath: "parameters",
    mapper: StorageTaskAssignmentUpdateParametersMapper,
};
//# sourceMappingURL=parameters.js.map