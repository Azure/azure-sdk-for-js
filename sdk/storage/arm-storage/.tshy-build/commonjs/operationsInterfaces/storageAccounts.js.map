{"version":3,"file":"storageAccounts.js","sourceRoot":"","sources":["../../../src/operationsInterfaces/storageAccounts.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { SimplePollerLike, OperationState } from \"@azure/core-lro\";\nimport {\n  StorageAccount,\n  StorageAccountsListOptionalParams,\n  StorageAccountsListByResourceGroupOptionalParams,\n  StorageAccountCheckNameAvailabilityParameters,\n  StorageAccountsCheckNameAvailabilityOptionalParams,\n  StorageAccountsCheckNameAvailabilityResponse,\n  StorageAccountCreateParameters,\n  StorageAccountsCreateOptionalParams,\n  StorageAccountsCreateResponse,\n  StorageAccountsDeleteOptionalParams,\n  StorageAccountsGetPropertiesOptionalParams,\n  StorageAccountsGetPropertiesResponse,\n  StorageAccountUpdateParameters,\n  StorageAccountsUpdateOptionalParams,\n  StorageAccountsUpdateResponse,\n  StorageAccountsListKeysOptionalParams,\n  StorageAccountsListKeysResponse,\n  StorageAccountRegenerateKeyParameters,\n  StorageAccountsRegenerateKeyOptionalParams,\n  StorageAccountsRegenerateKeyResponse,\n  AccountSasParameters,\n  StorageAccountsListAccountSASOptionalParams,\n  StorageAccountsListAccountSASResponse,\n  ServiceSasParameters,\n  StorageAccountsListServiceSASOptionalParams,\n  StorageAccountsListServiceSASResponse,\n  StorageAccountsFailoverOptionalParams,\n  StorageAccountsHierarchicalNamespaceMigrationOptionalParams,\n  StorageAccountsAbortHierarchicalNamespaceMigrationOptionalParams,\n  StorageAccountMigration,\n  StorageAccountsCustomerInitiatedMigrationOptionalParams,\n  MigrationName,\n  StorageAccountsGetCustomerInitiatedMigrationOptionalParams,\n  StorageAccountsGetCustomerInitiatedMigrationResponse,\n  BlobRestoreParameters,\n  StorageAccountsRestoreBlobRangesOptionalParams,\n  StorageAccountsRestoreBlobRangesResponse,\n  StorageAccountsRevokeUserDelegationKeysOptionalParams,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Interface representing a StorageAccounts. */\nexport interface StorageAccounts {\n  /**\n   * Lists all the storage accounts available under the subscription. Note that storage keys are not\n   * returned; use the ListKeys operation for this.\n   * @param options The options parameters.\n   */\n  list(\n    options?: StorageAccountsListOptionalParams,\n  ): PagedAsyncIterableIterator<StorageAccount>;\n  /**\n   * Lists all the storage accounts available under the given resource group. Note that storage keys are\n   * not returned; use the ListKeys operation for this.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param options The options parameters.\n   */\n  listByResourceGroup(\n    resourceGroupName: string,\n    options?: StorageAccountsListByResourceGroupOptionalParams,\n  ): PagedAsyncIterableIterator<StorageAccount>;\n  /**\n   * Checks that the storage account name is valid and is not already in use.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param options The options parameters.\n   */\n  checkNameAvailability(\n    accountName: StorageAccountCheckNameAvailabilityParameters,\n    options?: StorageAccountsCheckNameAvailabilityOptionalParams,\n  ): Promise<StorageAccountsCheckNameAvailabilityResponse>;\n  /**\n   * Asynchronously creates a new storage account with the specified parameters. If an account is already\n   * created and a subsequent create request is issued with different properties, the account properties\n   * will be updated. If an account is already created and a subsequent create or update request is\n   * issued with the exact same set of properties, the request will succeed.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param parameters The parameters to provide for the created account.\n   * @param options The options parameters.\n   */\n  beginCreate(\n    resourceGroupName: string,\n    accountName: string,\n    parameters: StorageAccountCreateParameters,\n    options?: StorageAccountsCreateOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<StorageAccountsCreateResponse>,\n      StorageAccountsCreateResponse\n    >\n  >;\n  /**\n   * Asynchronously creates a new storage account with the specified parameters. If an account is already\n   * created and a subsequent create request is issued with different properties, the account properties\n   * will be updated. If an account is already created and a subsequent create or update request is\n   * issued with the exact same set of properties, the request will succeed.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param parameters The parameters to provide for the created account.\n   * @param options The options parameters.\n   */\n  beginCreateAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    parameters: StorageAccountCreateParameters,\n    options?: StorageAccountsCreateOptionalParams,\n  ): Promise<StorageAccountsCreateResponse>;\n  /**\n   * Deletes a storage account in Microsoft Azure.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param options The options parameters.\n   */\n  delete(\n    resourceGroupName: string,\n    accountName: string,\n    options?: StorageAccountsDeleteOptionalParams,\n  ): Promise<void>;\n  /**\n   * Returns the properties for the specified storage account including but not limited to name, SKU\n   * name, location, and account status. The ListKeys operation should be used to retrieve storage keys.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param options The options parameters.\n   */\n  getProperties(\n    resourceGroupName: string,\n    accountName: string,\n    options?: StorageAccountsGetPropertiesOptionalParams,\n  ): Promise<StorageAccountsGetPropertiesResponse>;\n  /**\n   * The update operation can be used to update the SKU, encryption, access tier, or tags for a storage\n   * account. It can also be used to map the account to a custom domain. Only one custom domain is\n   * supported per storage account; the replacement/change of custom domain is not supported. In order to\n   * replace an old custom domain, the old value must be cleared/unregistered before a new value can be\n   * set. The update of multiple properties is supported. This call does not change the storage keys for\n   * the account. If you want to change the storage account keys, use the regenerate keys operation. The\n   * location and name of the storage account cannot be changed after creation.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param parameters The parameters to provide for the updated account.\n   * @param options The options parameters.\n   */\n  update(\n    resourceGroupName: string,\n    accountName: string,\n    parameters: StorageAccountUpdateParameters,\n    options?: StorageAccountsUpdateOptionalParams,\n  ): Promise<StorageAccountsUpdateResponse>;\n  /**\n   * Lists the access keys or Kerberos keys (if active directory enabled) for the specified storage\n   * account.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param options The options parameters.\n   */\n  listKeys(\n    resourceGroupName: string,\n    accountName: string,\n    options?: StorageAccountsListKeysOptionalParams,\n  ): Promise<StorageAccountsListKeysResponse>;\n  /**\n   * Regenerates one of the access keys or Kerberos keys for the specified storage account.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param regenerateKey Specifies name of the key which should be regenerated -- key1, key2, kerb1,\n   *                      kerb2.\n   * @param options The options parameters.\n   */\n  regenerateKey(\n    resourceGroupName: string,\n    accountName: string,\n    regenerateKey: StorageAccountRegenerateKeyParameters,\n    options?: StorageAccountsRegenerateKeyOptionalParams,\n  ): Promise<StorageAccountsRegenerateKeyResponse>;\n  /**\n   * List SAS credentials of a storage account.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param parameters The parameters to provide to list SAS credentials for the storage account.\n   * @param options The options parameters.\n   */\n  listAccountSAS(\n    resourceGroupName: string,\n    accountName: string,\n    parameters: AccountSasParameters,\n    options?: StorageAccountsListAccountSASOptionalParams,\n  ): Promise<StorageAccountsListAccountSASResponse>;\n  /**\n   * List service SAS credentials of a specific resource.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param parameters The parameters to provide to list service SAS credentials.\n   * @param options The options parameters.\n   */\n  listServiceSAS(\n    resourceGroupName: string,\n    accountName: string,\n    parameters: ServiceSasParameters,\n    options?: StorageAccountsListServiceSASOptionalParams,\n  ): Promise<StorageAccountsListServiceSASResponse>;\n  /**\n   * A failover request can be triggered for a storage account in the event a primary endpoint becomes\n   * unavailable for any reason. The failover occurs from the storage account's primary cluster to the\n   * secondary cluster for RA-GRS accounts. The secondary cluster will become primary after failover and\n   * the account is converted to LRS. In the case of a Planned Failover, the primary and secondary\n   * clusters are swapped after failover and the account remains geo-replicated. Failover should continue\n   * to be used in the event of availability issues as Planned failover is only available while the\n   * primary and secondary endpoints are available. The primary use case of a Planned Failover is\n   * disaster recovery testing drills. This type of failover is invoked by setting FailoverType parameter\n   * to 'Planned'. Learn more about the failover options here-\n   * https://learn.microsoft.com/azure/storage/common/storage-disaster-recovery-guidance\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param options The options parameters.\n   */\n  beginFailover(\n    resourceGroupName: string,\n    accountName: string,\n    options?: StorageAccountsFailoverOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * A failover request can be triggered for a storage account in the event a primary endpoint becomes\n   * unavailable for any reason. The failover occurs from the storage account's primary cluster to the\n   * secondary cluster for RA-GRS accounts. The secondary cluster will become primary after failover and\n   * the account is converted to LRS. In the case of a Planned Failover, the primary and secondary\n   * clusters are swapped after failover and the account remains geo-replicated. Failover should continue\n   * to be used in the event of availability issues as Planned failover is only available while the\n   * primary and secondary endpoints are available. The primary use case of a Planned Failover is\n   * disaster recovery testing drills. This type of failover is invoked by setting FailoverType parameter\n   * to 'Planned'. Learn more about the failover options here-\n   * https://learn.microsoft.com/azure/storage/common/storage-disaster-recovery-guidance\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param options The options parameters.\n   */\n  beginFailoverAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    options?: StorageAccountsFailoverOptionalParams,\n  ): Promise<void>;\n  /**\n   * Live Migration of storage account to enable Hns\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param requestType Required. Hierarchical namespace migration type can either be a hierarchical\n   *                    namespace validation request 'HnsOnValidationRequest' or a hydration request\n   *                    'HnsOnHydrationRequest'. The validation request will validate the migration whereas the hydration\n   *                    request will migrate the account.\n   * @param options The options parameters.\n   */\n  beginHierarchicalNamespaceMigration(\n    resourceGroupName: string,\n    accountName: string,\n    requestType: string,\n    options?: StorageAccountsHierarchicalNamespaceMigrationOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * Live Migration of storage account to enable Hns\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param requestType Required. Hierarchical namespace migration type can either be a hierarchical\n   *                    namespace validation request 'HnsOnValidationRequest' or a hydration request\n   *                    'HnsOnHydrationRequest'. The validation request will validate the migration whereas the hydration\n   *                    request will migrate the account.\n   * @param options The options parameters.\n   */\n  beginHierarchicalNamespaceMigrationAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    requestType: string,\n    options?: StorageAccountsHierarchicalNamespaceMigrationOptionalParams,\n  ): Promise<void>;\n  /**\n   * Abort live Migration of storage account to enable Hns\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param options The options parameters.\n   */\n  beginAbortHierarchicalNamespaceMigration(\n    resourceGroupName: string,\n    accountName: string,\n    options?: StorageAccountsAbortHierarchicalNamespaceMigrationOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * Abort live Migration of storage account to enable Hns\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param options The options parameters.\n   */\n  beginAbortHierarchicalNamespaceMigrationAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    options?: StorageAccountsAbortHierarchicalNamespaceMigrationOptionalParams,\n  ): Promise<void>;\n  /**\n   * Account Migration request can be triggered for a storage account to change its redundancy level. The\n   * migration updates the non-zonal redundant storage account to a zonal redundant account or vice-versa\n   * in order to have better reliability and availability. Zone-redundant storage (ZRS) replicates your\n   * storage account synchronously across three Azure availability zones in the primary region.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param parameters The request parameters required to perform storage account migration.\n   * @param options The options parameters.\n   */\n  beginCustomerInitiatedMigration(\n    resourceGroupName: string,\n    accountName: string,\n    parameters: StorageAccountMigration,\n    options?: StorageAccountsCustomerInitiatedMigrationOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * Account Migration request can be triggered for a storage account to change its redundancy level. The\n   * migration updates the non-zonal redundant storage account to a zonal redundant account or vice-versa\n   * in order to have better reliability and availability. Zone-redundant storage (ZRS) replicates your\n   * storage account synchronously across three Azure availability zones in the primary region.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param parameters The request parameters required to perform storage account migration.\n   * @param options The options parameters.\n   */\n  beginCustomerInitiatedMigrationAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    parameters: StorageAccountMigration,\n    options?: StorageAccountsCustomerInitiatedMigrationOptionalParams,\n  ): Promise<void>;\n  /**\n   * Gets the status of the ongoing migration for the specified storage account.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param migrationName The name of the Storage Account Migration. It should always be 'default'\n   * @param options The options parameters.\n   */\n  getCustomerInitiatedMigration(\n    resourceGroupName: string,\n    accountName: string,\n    migrationName: MigrationName,\n    options?: StorageAccountsGetCustomerInitiatedMigrationOptionalParams,\n  ): Promise<StorageAccountsGetCustomerInitiatedMigrationResponse>;\n  /**\n   * Restore blobs in the specified blob ranges\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param parameters The parameters to provide for restore blob ranges.\n   * @param options The options parameters.\n   */\n  beginRestoreBlobRanges(\n    resourceGroupName: string,\n    accountName: string,\n    parameters: BlobRestoreParameters,\n    options?: StorageAccountsRestoreBlobRangesOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<StorageAccountsRestoreBlobRangesResponse>,\n      StorageAccountsRestoreBlobRangesResponse\n    >\n  >;\n  /**\n   * Restore blobs in the specified blob ranges\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param parameters The parameters to provide for restore blob ranges.\n   * @param options The options parameters.\n   */\n  beginRestoreBlobRangesAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    parameters: BlobRestoreParameters,\n    options?: StorageAccountsRestoreBlobRangesOptionalParams,\n  ): Promise<StorageAccountsRestoreBlobRangesResponse>;\n  /**\n   * Revoke user delegation keys.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param options The options parameters.\n   */\n  revokeUserDelegationKeys(\n    resourceGroupName: string,\n    accountName: string,\n    options?: StorageAccountsRevokeUserDelegationKeysOptionalParams,\n  ): Promise<void>;\n}\n"]}