"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.accountName2 = exports.parameters11 = exports.migrationName = exports.parameters10 = exports.requestType = exports.failoverType = exports.parameters9 = exports.parameters8 = exports.regenerateKey = exports.expand2 = exports.parameters7 = exports.expand1 = exports.parameters6 = exports.accountName1 = exports.queueName = exports.queue = exports.queueServiceName = exports.parameters5 = exports.parameters4 = exports.deletedShare = exports.include1 = exports.xMsSnapshot = exports.shareName = exports.fileShare = exports.expand = exports.fileServiceUsagesName = exports.maxpagesize1 = exports.fileServicesName = exports.parameters3 = exports.nextLink = exports.parameters2 = exports.ifMatch1 = exports.ifMatch = exports.immutabilityPolicyName = exports.parameters1 = exports.legalHold = exports.containerName = exports.blobContainer = exports.include = exports.filter = exports.maxpagesize = exports.blobServicesName = exports.parameters = exports.contentType = exports.subscriptionId = exports.apiVersion = exports.accountName = exports.resourceGroupName = exports.$host = exports.accept = void 0;
exports.parameters15 = exports.storageTaskAssignmentName = exports.parameters14 = exports.networkSecurityPerimeterConfigurationName = exports.tableName = exports.parameters13 = exports.tableServiceName = exports.parameters12 = exports.include3 = exports.encryptionScopeName = exports.encryptionScope = exports.properties4 = exports.username = exports.include2 = exports.maxpagesize2 = exports.properties3 = exports.objectReplicationPolicyId = exports.properties2 = exports.privateEndpointConnectionName = exports.properties1 = exports.blobInventoryPolicyName = exports.properties = exports.managementPolicyName = exports.location = exports.deletedAccountName = void 0;
const mappers_js_1 = require("../models/mappers.js");
exports.accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String",
        },
    },
};
exports.$host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
exports.resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1,
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.accountName = {
    parameterPath: "accountName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-z0-9]+$"),
            MaxLength: 24,
            MinLength: 3,
        },
        serializedName: "accountName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2024-01-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String",
        },
    },
};
exports.subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1,
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String",
        },
    },
};
exports.parameters = {
    parameterPath: "parameters",
    mapper: mappers_js_1.BlobServiceProperties,
};
exports.blobServicesName = {
    parameterPath: "blobServicesName",
    mapper: {
        defaultValue: "default",
        isConstant: true,
        serializedName: "BlobServicesName",
        type: {
            name: "String",
        },
    },
};
exports.maxpagesize = {
    parameterPath: ["options", "maxpagesize"],
    mapper: {
        serializedName: "$maxpagesize",
        type: {
            name: "String",
        },
    },
};
exports.filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String",
        },
    },
};
exports.include = {
    parameterPath: ["options", "include"],
    mapper: {
        serializedName: "$include",
        type: {
            name: "String",
        },
    },
};
exports.blobContainer = {
    parameterPath: "blobContainer",
    mapper: mappers_js_1.BlobContainer,
};
exports.containerName = {
    parameterPath: "containerName",
    mapper: {
        constraints: {
            MaxLength: 63,
            MinLength: 3,
        },
        serializedName: "containerName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.legalHold = {
    parameterPath: "legalHold",
    mapper: mappers_js_1.LegalHold,
};
exports.parameters1 = {
    parameterPath: ["options", "parameters"],
    mapper: mappers_js_1.ImmutabilityPolicy,
};
exports.immutabilityPolicyName = {
    parameterPath: "immutabilityPolicyName",
    mapper: {
        defaultValue: "default",
        isConstant: true,
        serializedName: "immutabilityPolicyName",
        type: {
            name: "String",
        },
    },
};
exports.ifMatch = {
    parameterPath: ["options", "ifMatch"],
    mapper: {
        serializedName: "If-Match",
        type: {
            name: "String",
        },
    },
};
exports.ifMatch1 = {
    parameterPath: "ifMatch",
    mapper: {
        serializedName: "If-Match",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters2 = {
    parameterPath: ["options", "parameters"],
    mapper: mappers_js_1.LeaseContainerRequest,
};
exports.nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
exports.parameters3 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.FileServiceProperties,
};
exports.fileServicesName = {
    parameterPath: "fileServicesName",
    mapper: {
        defaultValue: "default",
        isConstant: true,
        serializedName: "FileServicesName",
        type: {
            name: "String",
        },
    },
};
exports.maxpagesize1 = {
    parameterPath: ["options", "maxpagesize"],
    mapper: {
        serializedName: "$maxpagesize",
        type: {
            name: "Number",
        },
    },
};
exports.fileServiceUsagesName = {
    parameterPath: "fileServiceUsagesName",
    mapper: {
        defaultValue: "default",
        isConstant: true,
        serializedName: "fileServiceUsagesName",
        type: {
            name: "String",
        },
    },
};
exports.expand = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "String",
        },
    },
};
exports.fileShare = {
    parameterPath: "fileShare",
    mapper: mappers_js_1.FileShare,
};
exports.shareName = {
    parameterPath: "shareName",
    mapper: {
        constraints: {
            MaxLength: 63,
            MinLength: 3,
        },
        serializedName: "shareName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.xMsSnapshot = {
    parameterPath: ["options", "xMsSnapshot"],
    mapper: {
        serializedName: "x-ms-snapshot",
        type: {
            name: "String",
        },
    },
};
exports.include1 = {
    parameterPath: ["options", "include"],
    mapper: {
        serializedName: "$include",
        type: {
            name: "String",
        },
    },
};
exports.deletedShare = {
    parameterPath: "deletedShare",
    mapper: mappers_js_1.DeletedShare,
};
exports.parameters4 = {
    parameterPath: ["options", "parameters"],
    mapper: mappers_js_1.LeaseShareRequest,
};
exports.parameters5 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.QueueServiceProperties,
};
exports.queueServiceName = {
    parameterPath: "queueServiceName",
    mapper: {
        defaultValue: "default",
        isConstant: true,
        serializedName: "queueServiceName",
        type: {
            name: "String",
        },
    },
};
exports.queue = {
    parameterPath: "queue",
    mapper: mappers_js_1.StorageQueue,
};
exports.queueName = {
    parameterPath: "queueName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-z0-9]([a-z0-9]|(-(?!-))){1,61}[a-z0-9]$"),
            MaxLength: 63,
            MinLength: 3,
        },
        serializedName: "queueName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.accountName1 = {
    parameterPath: "accountName",
    mapper: mappers_js_1.StorageAccountCheckNameAvailabilityParameters,
};
exports.parameters6 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.StorageAccountCreateParameters,
};
exports.expand1 = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "Enum",
            allowedValues: ["geoReplicationStats", "blobRestoreStatus"],
        },
    },
};
exports.parameters7 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.StorageAccountUpdateParameters,
};
exports.expand2 = {
    parameterPath: ["options", "expand"],
    mapper: {
        defaultValue: "kerb",
        isConstant: true,
        serializedName: "$expand",
        type: {
            name: "String",
        },
    },
};
exports.regenerateKey = {
    parameterPath: "regenerateKey",
    mapper: mappers_js_1.StorageAccountRegenerateKeyParameters,
};
exports.parameters8 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.AccountSasParameters,
};
exports.parameters9 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.ServiceSasParameters,
};
exports.failoverType = {
    parameterPath: ["options", "failoverType"],
    mapper: {
        defaultValue: "Planned",
        isConstant: true,
        serializedName: "failoverType",
        type: {
            name: "String",
        },
    },
};
exports.requestType = {
    parameterPath: "requestType",
    mapper: {
        serializedName: "requestType",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters10 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.StorageAccountMigration,
};
exports.migrationName = {
    parameterPath: "migrationName",
    mapper: {
        serializedName: "migrationName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters11 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.BlobRestoreParameters,
};
exports.accountName2 = {
    parameterPath: "accountName",
    mapper: {
        constraints: {
            MaxLength: 24,
            MinLength: 3,
        },
        serializedName: "accountName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.deletedAccountName = {
    parameterPath: "deletedAccountName",
    mapper: {
        constraints: {
            MaxLength: 24,
            MinLength: 3,
        },
        serializedName: "deletedAccountName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.location = {
    parameterPath: "location",
    mapper: {
        serializedName: "location",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.managementPolicyName = {
    parameterPath: "managementPolicyName",
    mapper: {
        serializedName: "managementPolicyName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.properties = {
    parameterPath: "properties",
    mapper: mappers_js_1.ManagementPolicy,
};
exports.blobInventoryPolicyName = {
    parameterPath: "blobInventoryPolicyName",
    mapper: {
        serializedName: "blobInventoryPolicyName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.properties1 = {
    parameterPath: "properties",
    mapper: mappers_js_1.BlobInventoryPolicy,
};
exports.privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.properties2 = {
    parameterPath: "properties",
    mapper: mappers_js_1.PrivateEndpointConnection,
};
exports.objectReplicationPolicyId = {
    parameterPath: "objectReplicationPolicyId",
    mapper: {
        constraints: {
            MinLength: 1,
        },
        serializedName: "objectReplicationPolicyId",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.properties3 = {
    parameterPath: "properties",
    mapper: mappers_js_1.ObjectReplicationPolicy,
};
exports.maxpagesize2 = {
    parameterPath: ["options", "maxpagesize"],
    mapper: {
        constraints: {
            InclusiveMaximum: 5000,
            InclusiveMinimum: 1,
        },
        serializedName: "$maxpagesize",
        type: {
            name: "Number",
        },
    },
};
exports.include2 = {
    parameterPath: ["options", "include"],
    mapper: {
        serializedName: "$include",
        type: {
            name: "String",
        },
    },
};
exports.username = {
    parameterPath: "username",
    mapper: {
        constraints: {
            MaxLength: 64,
            MinLength: 3,
        },
        serializedName: "username",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.properties4 = {
    parameterPath: "properties",
    mapper: mappers_js_1.LocalUser,
};
exports.encryptionScope = {
    parameterPath: "encryptionScope",
    mapper: mappers_js_1.EncryptionScope,
};
exports.encryptionScopeName = {
    parameterPath: "encryptionScopeName",
    mapper: {
        constraints: {
            MaxLength: 63,
            MinLength: 3,
        },
        serializedName: "encryptionScopeName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.include3 = {
    parameterPath: ["options", "include"],
    mapper: {
        serializedName: "$include",
        type: {
            name: "String",
        },
    },
};
exports.parameters12 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.TableServiceProperties,
};
exports.tableServiceName = {
    parameterPath: "tableServiceName",
    mapper: {
        defaultValue: "default",
        isConstant: true,
        serializedName: "tableServiceName",
        type: {
            name: "String",
        },
    },
};
exports.parameters13 = {
    parameterPath: ["options", "parameters"],
    mapper: mappers_js_1.Table,
};
exports.tableName = {
    parameterPath: "tableName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z][A-Za-z0-9]{2,62}$"),
            MaxLength: 63,
            MinLength: 3,
        },
        serializedName: "tableName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.networkSecurityPerimeterConfigurationName = {
    parameterPath: "networkSecurityPerimeterConfigurationName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^.*$"),
        },
        serializedName: "networkSecurityPerimeterConfigurationName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters14 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.StorageTaskAssignment,
};
exports.storageTaskAssignmentName = {
    parameterPath: "storageTaskAssignmentName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-z0-9]{3,24}$"),
            MaxLength: 24,
            MinLength: 3,
        },
        serializedName: "storageTaskAssignmentName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters15 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.StorageTaskAssignmentUpdateParameters,
};
//# sourceMappingURL=parameters.js.map