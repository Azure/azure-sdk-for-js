{"version":3,"file":"usages.js","sourceRoot":"","sources":["../../../src/operations/usages.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;;;AAIH,uEAAiD;AACjD,sEAAgD;AAChD,4EAAsD;AAQtD,4CAA4C;AAC5C,0CAA0C;AAC1C,MAAa,UAAU;IAGrB;;;OAGG;IACH,YAAY,MAA+B;QACzC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;;;OAIG;IACI,cAAc,CACnB,QAAgB,EAChB,OAA4C;QAE5C,MAAM,IAAI,GAAG,IAAI,CAAC,uBAAuB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QAC7D,OAAO;YACL,IAAI;gBACF,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC;YACrB,CAAC;YACD,CAAC,MAAM,CAAC,aAAa,CAAC;gBACpB,OAAO,IAAI,CAAC;YACd,CAAC;YACD,MAAM,EAAE,CAAC,QAAuB,EAAE,EAAE;gBAClC,IAAI,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,WAAW,EAAE,CAAC;oBAC1B,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;gBACrE,CAAC;gBACD,OAAO,IAAI,CAAC,wBAAwB,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;YACpE,CAAC;SACF,CAAC;IACJ,CAAC;IAEc,wBAAwB,CACrC,QAAgB,EAChB,OAA4C,EAC5C,SAAwB;;YAExB,IAAI,MAAoC,CAAC;YACzC,MAAM,GAAG,sBAAM,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAA,CAAC;YACvD,4BAAM,MAAM,CAAC,KAAK,IAAI,EAAE,CAAA,CAAC;QAC3B,CAAC;KAAA;IAEc,uBAAuB,CACpC,QAAgB,EAChB,OAA4C;;;;gBAE5C,KAAyB,eAAA,KAAA,sBAAA,IAAI,CAAC,wBAAwB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAA,IAAA,uEAAE,CAAC;oBAAnD,cAAgD;oBAAhD,WAAgD;oBAA9D,MAAM,IAAI,KAAA,CAAA;oBACnB,sBAAA,KAAK,CAAC,CAAC,yBAAA,sBAAA,IAAI,CAAA,CAAA,CAAA,CAAC;gBACd,CAAC;;;;;;;;;QACH,CAAC;KAAA;IAED;;;;OAIG;IACK,eAAe,CACrB,QAAgB,EAChB,OAA4C;QAE5C,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,QAAQ,EAAE,OAAO,EAAE,EACrB,2BAA2B,CAC5B,CAAC;IACJ,CAAC;CACF;AAtED,gCAsEC;AACD,2BAA2B;AAC3B,MAAM,UAAU,GAAG,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;AAE3E,MAAM,2BAA2B,GAA6B;IAC5D,IAAI,EAAE,yFAAyF;IAC/F,UAAU,EAAE,KAAK;IACjB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,eAAe;SACpC;KACF;IACD,eAAe,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC;IACxC,aAAa,EAAE;QACb,UAAU,CAAC,KAAK;QAChB,UAAU,CAAC,cAAc;QACzB,UAAU,CAAC,QAAQ;KACpB;IACD,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC;IACrC,UAAU;CACX,CAAC","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { Usages } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { StorageManagementClient } from \"../storageManagementClient.js\";\nimport {\n  Usage,\n  UsagesListByLocationOptionalParams,\n  UsagesListByLocationResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing Usages operations. */\nexport class UsagesImpl implements Usages {\n  private readonly client: StorageManagementClient;\n\n  /**\n   * Initialize a new instance of the class Usages class.\n   * @param client Reference to the service client\n   */\n  constructor(client: StorageManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Gets the current usage count and the limit for the resources of the location under the subscription.\n   * @param location The location of the Azure Storage resource.\n   * @param options The options parameters.\n   */\n  public listByLocation(\n    location: string,\n    options?: UsagesListByLocationOptionalParams,\n  ): PagedAsyncIterableIterator<Usage> {\n    const iter = this.listByLocationPagingAll(location, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listByLocationPagingPage(location, options, settings);\n      },\n    };\n  }\n\n  private async *listByLocationPagingPage(\n    location: string,\n    options?: UsagesListByLocationOptionalParams,\n    _settings?: PageSettings,\n  ): AsyncIterableIterator<Usage[]> {\n    let result: UsagesListByLocationResponse;\n    result = await this._listByLocation(location, options);\n    yield result.value || [];\n  }\n\n  private async *listByLocationPagingAll(\n    location: string,\n    options?: UsagesListByLocationOptionalParams,\n  ): AsyncIterableIterator<Usage> {\n    for await (const page of this.listByLocationPagingPage(location, options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Gets the current usage count and the limit for the resources of the location under the subscription.\n   * @param location The location of the Azure Storage resource.\n   * @param options The options parameters.\n   */\n  private _listByLocation(\n    location: string,\n    options?: UsagesListByLocationOptionalParams,\n  ): Promise<UsagesListByLocationResponse> {\n    return this.client.sendOperationRequest(\n      { location, options },\n      listByLocationOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listByLocationOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/providers/Microsoft.Storage/locations/{location}/usages\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.UsageListResult,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.location,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n"]}