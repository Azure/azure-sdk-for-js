{"version":3,"file":"blobContainers.js","sourceRoot":"","sources":["../../../src/operations/blobContainers.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper.js\";\nimport { BlobContainers } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { StorageManagementClient } from \"../storageManagementClient.js\";\nimport {\n  SimplePollerLike,\n  OperationState,\n  createHttpPoller,\n} from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl.js\";\nimport {\n  ListContainerItem,\n  BlobContainersListNextOptionalParams,\n  BlobContainersListOptionalParams,\n  BlobContainersListResponse,\n  BlobContainer,\n  BlobContainersCreateOptionalParams,\n  BlobContainersCreateResponse,\n  BlobContainersUpdateOptionalParams,\n  BlobContainersUpdateResponse,\n  BlobContainersGetOptionalParams,\n  BlobContainersGetResponse,\n  BlobContainersDeleteOptionalParams,\n  LegalHold,\n  BlobContainersSetLegalHoldOptionalParams,\n  BlobContainersSetLegalHoldResponse,\n  BlobContainersClearLegalHoldOptionalParams,\n  BlobContainersClearLegalHoldResponse,\n  BlobContainersCreateOrUpdateImmutabilityPolicyOptionalParams,\n  BlobContainersCreateOrUpdateImmutabilityPolicyResponse,\n  BlobContainersGetImmutabilityPolicyOptionalParams,\n  BlobContainersGetImmutabilityPolicyResponse,\n  BlobContainersDeleteImmutabilityPolicyOptionalParams,\n  BlobContainersDeleteImmutabilityPolicyResponse,\n  BlobContainersLockImmutabilityPolicyOptionalParams,\n  BlobContainersLockImmutabilityPolicyResponse,\n  BlobContainersExtendImmutabilityPolicyOptionalParams,\n  BlobContainersExtendImmutabilityPolicyResponse,\n  BlobContainersLeaseOptionalParams,\n  BlobContainersLeaseResponse,\n  BlobContainersObjectLevelWormOptionalParams,\n  BlobContainersListNextResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing BlobContainers operations. */\nexport class BlobContainersImpl implements BlobContainers {\n  private readonly client: StorageManagementClient;\n\n  /**\n   * Initialize a new instance of the class BlobContainers class.\n   * @param client Reference to the service client\n   */\n  constructor(client: StorageManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Lists all containers and does not support a prefix like data plane. Also SRP today does not return\n   * continuation token.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param options The options parameters.\n   */\n  public list(\n    resourceGroupName: string,\n    accountName: string,\n    options?: BlobContainersListOptionalParams,\n  ): PagedAsyncIterableIterator<ListContainerItem> {\n    const iter = this.listPagingAll(resourceGroupName, accountName, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(\n          resourceGroupName,\n          accountName,\n          options,\n          settings,\n        );\n      },\n    };\n  }\n\n  private async *listPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    options?: BlobContainersListOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<ListContainerItem[]> {\n    let result: BlobContainersListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(resourceGroupName, accountName, options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(\n        resourceGroupName,\n        accountName,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    options?: BlobContainersListOptionalParams,\n  ): AsyncIterableIterator<ListContainerItem> {\n    for await (const page of this.listPagingPage(\n      resourceGroupName,\n      accountName,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists all containers and does not support a prefix like data plane. Also SRP today does not return\n   * continuation token.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param options The options parameters.\n   */\n  private _list(\n    resourceGroupName: string,\n    accountName: string,\n    options?: BlobContainersListOptionalParams,\n  ): Promise<BlobContainersListResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, options },\n      listOperationSpec,\n    );\n  }\n\n  /**\n   * Creates a new container under the specified account as described by request body. The container\n   * resource includes metadata and properties for that container. It does not include a list of the\n   * blobs contained by the container.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param containerName The name of the blob container within the specified storage account. Blob\n   *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters\n   *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or\n   *                      number.\n   * @param blobContainer Properties of the blob container to create.\n   * @param options The options parameters.\n   */\n  create(\n    resourceGroupName: string,\n    accountName: string,\n    containerName: string,\n    blobContainer: BlobContainer,\n    options?: BlobContainersCreateOptionalParams,\n  ): Promise<BlobContainersCreateResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, containerName, blobContainer, options },\n      createOperationSpec,\n    );\n  }\n\n  /**\n   * Updates container properties as specified in request body. Properties not mentioned in the request\n   * will be unchanged. Update fails if the specified container doesn't already exist.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param containerName The name of the blob container within the specified storage account. Blob\n   *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters\n   *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or\n   *                      number.\n   * @param blobContainer Properties to update for the blob container.\n   * @param options The options parameters.\n   */\n  update(\n    resourceGroupName: string,\n    accountName: string,\n    containerName: string,\n    blobContainer: BlobContainer,\n    options?: BlobContainersUpdateOptionalParams,\n  ): Promise<BlobContainersUpdateResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, containerName, blobContainer, options },\n      updateOperationSpec,\n    );\n  }\n\n  /**\n   * Gets properties of a specified container.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param containerName The name of the blob container within the specified storage account. Blob\n   *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters\n   *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or\n   *                      number.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    accountName: string,\n    containerName: string,\n    options?: BlobContainersGetOptionalParams,\n  ): Promise<BlobContainersGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, containerName, options },\n      getOperationSpec,\n    );\n  }\n\n  /**\n   * Deletes specified container under its account.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param containerName The name of the blob container within the specified storage account. Blob\n   *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters\n   *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or\n   *                      number.\n   * @param options The options parameters.\n   */\n  delete(\n    resourceGroupName: string,\n    accountName: string,\n    containerName: string,\n    options?: BlobContainersDeleteOptionalParams,\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, containerName, options },\n      deleteOperationSpec,\n    );\n  }\n\n  /**\n   * Sets legal hold tags. Setting the same tag results in an idempotent operation. SetLegalHold follows\n   * an append pattern and does not clear out the existing tags that are not specified in the request.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param containerName The name of the blob container within the specified storage account. Blob\n   *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters\n   *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or\n   *                      number.\n   * @param legalHold The LegalHold property that will be set to a blob container.\n   * @param options The options parameters.\n   */\n  setLegalHold(\n    resourceGroupName: string,\n    accountName: string,\n    containerName: string,\n    legalHold: LegalHold,\n    options?: BlobContainersSetLegalHoldOptionalParams,\n  ): Promise<BlobContainersSetLegalHoldResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, containerName, legalHold, options },\n      setLegalHoldOperationSpec,\n    );\n  }\n\n  /**\n   * Clears legal hold tags. Clearing the same or non-existent tag results in an idempotent operation.\n   * ClearLegalHold clears out only the specified tags in the request.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param containerName The name of the blob container within the specified storage account. Blob\n   *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters\n   *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or\n   *                      number.\n   * @param legalHold The LegalHold property that will be clear from a blob container.\n   * @param options The options parameters.\n   */\n  clearLegalHold(\n    resourceGroupName: string,\n    accountName: string,\n    containerName: string,\n    legalHold: LegalHold,\n    options?: BlobContainersClearLegalHoldOptionalParams,\n  ): Promise<BlobContainersClearLegalHoldResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, containerName, legalHold, options },\n      clearLegalHoldOperationSpec,\n    );\n  }\n\n  /**\n   * Creates or updates an unlocked immutability policy. ETag in If-Match is honored if given but not\n   * required for this operation.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param containerName The name of the blob container within the specified storage account. Blob\n   *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters\n   *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or\n   *                      number.\n   * @param options The options parameters.\n   */\n  createOrUpdateImmutabilityPolicy(\n    resourceGroupName: string,\n    accountName: string,\n    containerName: string,\n    options?: BlobContainersCreateOrUpdateImmutabilityPolicyOptionalParams,\n  ): Promise<BlobContainersCreateOrUpdateImmutabilityPolicyResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, containerName, options },\n      createOrUpdateImmutabilityPolicyOperationSpec,\n    );\n  }\n\n  /**\n   * Gets the existing immutability policy along with the corresponding ETag in response headers and\n   * body.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param containerName The name of the blob container within the specified storage account. Blob\n   *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters\n   *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or\n   *                      number.\n   * @param options The options parameters.\n   */\n  getImmutabilityPolicy(\n    resourceGroupName: string,\n    accountName: string,\n    containerName: string,\n    options?: BlobContainersGetImmutabilityPolicyOptionalParams,\n  ): Promise<BlobContainersGetImmutabilityPolicyResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, containerName, options },\n      getImmutabilityPolicyOperationSpec,\n    );\n  }\n\n  /**\n   * Aborts an unlocked immutability policy. The response of delete has\n   * immutabilityPeriodSinceCreationInDays set to 0. ETag in If-Match is required for this operation.\n   * Deleting a locked immutability policy is not allowed, the only way is to delete the container after\n   * deleting all expired blobs inside the policy locked container.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param containerName The name of the blob container within the specified storage account. Blob\n   *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters\n   *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or\n   *                      number.\n   * @param ifMatch The entity state (ETag) version of the immutability policy to update must be returned\n   *                to the server for all update operations. The ETag value must include the leading and trailing double\n   *                quotes as returned by the service.\n   * @param options The options parameters.\n   */\n  deleteImmutabilityPolicy(\n    resourceGroupName: string,\n    accountName: string,\n    containerName: string,\n    ifMatch: string,\n    options?: BlobContainersDeleteImmutabilityPolicyOptionalParams,\n  ): Promise<BlobContainersDeleteImmutabilityPolicyResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, containerName, ifMatch, options },\n      deleteImmutabilityPolicyOperationSpec,\n    );\n  }\n\n  /**\n   * Sets the ImmutabilityPolicy to Locked state. The only action allowed on a Locked policy is\n   * ExtendImmutabilityPolicy action. ETag in If-Match is required for this operation.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param containerName The name of the blob container within the specified storage account. Blob\n   *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters\n   *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or\n   *                      number.\n   * @param ifMatch The entity state (ETag) version of the immutability policy to update must be returned\n   *                to the server for all update operations. The ETag value must include the leading and trailing double\n   *                quotes as returned by the service.\n   * @param options The options parameters.\n   */\n  lockImmutabilityPolicy(\n    resourceGroupName: string,\n    accountName: string,\n    containerName: string,\n    ifMatch: string,\n    options?: BlobContainersLockImmutabilityPolicyOptionalParams,\n  ): Promise<BlobContainersLockImmutabilityPolicyResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, containerName, ifMatch, options },\n      lockImmutabilityPolicyOperationSpec,\n    );\n  }\n\n  /**\n   * Extends the immutabilityPeriodSinceCreationInDays of a locked immutabilityPolicy. The only action\n   * allowed on a Locked policy will be this action. ETag in If-Match is required for this operation.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param containerName The name of the blob container within the specified storage account. Blob\n   *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters\n   *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or\n   *                      number.\n   * @param ifMatch The entity state (ETag) version of the immutability policy to update must be returned\n   *                to the server for all update operations. The ETag value must include the leading and trailing double\n   *                quotes as returned by the service.\n   * @param options The options parameters.\n   */\n  extendImmutabilityPolicy(\n    resourceGroupName: string,\n    accountName: string,\n    containerName: string,\n    ifMatch: string,\n    options?: BlobContainersExtendImmutabilityPolicyOptionalParams,\n  ): Promise<BlobContainersExtendImmutabilityPolicyResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, containerName, ifMatch, options },\n      extendImmutabilityPolicyOperationSpec,\n    );\n  }\n\n  /**\n   * The Lease Container operation establishes and manages a lock on a container for delete operations.\n   * The lock duration can be 15 to 60 seconds, or can be infinite.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param containerName The name of the blob container within the specified storage account. Blob\n   *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters\n   *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or\n   *                      number.\n   * @param options The options parameters.\n   */\n  lease(\n    resourceGroupName: string,\n    accountName: string,\n    containerName: string,\n    options?: BlobContainersLeaseOptionalParams,\n  ): Promise<BlobContainersLeaseResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, containerName, options },\n      leaseOperationSpec,\n    );\n  }\n\n  /**\n   * This operation migrates a blob container from container level WORM to object level immutability\n   * enabled container. Prerequisites require a container level immutability policy either in locked or\n   * unlocked state, Account level versioning must be enabled and there should be no Legal hold on the\n   * container.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param containerName The name of the blob container within the specified storage account. Blob\n   *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters\n   *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or\n   *                      number.\n   * @param options The options parameters.\n   */\n  async beginObjectLevelWorm(\n    resourceGroupName: string,\n    accountName: string,\n    containerName: string,\n    options?: BlobContainersObjectLevelWormOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, accountName, containerName, options },\n      spec: objectLevelWormOperationSpec,\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * This operation migrates a blob container from container level WORM to object level immutability\n   * enabled container. Prerequisites require a container level immutability policy either in locked or\n   * unlocked state, Account level versioning must be enabled and there should be no Legal hold on the\n   * container.\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param containerName The name of the blob container within the specified storage account. Blob\n   *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters\n   *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or\n   *                      number.\n   * @param options The options parameters.\n   */\n  async beginObjectLevelWormAndWait(\n    resourceGroupName: string,\n    accountName: string,\n    containerName: string,\n    options?: BlobContainersObjectLevelWormOptionalParams,\n  ): Promise<void> {\n    const poller = await this.beginObjectLevelWorm(\n      resourceGroupName,\n      accountName,\n      containerName,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * ListNext\n   * @param resourceGroupName The name of the resource group within the user's subscription. The name is\n   *                          case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    resourceGroupName: string,\n    accountName: string,\n    nextLink: string,\n    options?: BlobContainersListNextOptionalParams,\n  ): Promise<BlobContainersListNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, nextLink, options },\n      listNextOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListContainerItems,\n    },\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.maxpagesize,\n    Parameters.filter,\n    Parameters.include,\n  ],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.subscriptionId,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst createOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BlobContainer,\n    },\n    201: {\n      bodyMapper: Mappers.BlobContainer,\n    },\n  },\n  requestBody: Parameters.blobContainer,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.subscriptionId,\n    Parameters.containerName,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst updateOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BlobContainer,\n    },\n  },\n  requestBody: Parameters.blobContainer,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.subscriptionId,\n    Parameters.containerName,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BlobContainer,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.subscriptionId,\n    Parameters.containerName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}\",\n  httpMethod: \"DELETE\",\n  responses: { 200: {}, 204: {} },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.subscriptionId,\n    Parameters.containerName,\n  ],\n  serializer,\n};\nconst setLegalHoldOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/setLegalHold\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.LegalHold,\n    },\n  },\n  requestBody: Parameters.legalHold,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.subscriptionId,\n    Parameters.containerName,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst clearLegalHoldOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/clearLegalHold\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.LegalHold,\n    },\n  },\n  requestBody: Parameters.legalHold,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.subscriptionId,\n    Parameters.containerName,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst createOrUpdateImmutabilityPolicyOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}\",\n    httpMethod: \"PUT\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.ImmutabilityPolicy,\n        headersMapper:\n          Mappers.BlobContainersCreateOrUpdateImmutabilityPolicyHeaders,\n      },\n    },\n    requestBody: Parameters.parameters1,\n    queryParameters: [Parameters.apiVersion],\n    urlParameters: [\n      Parameters.$host,\n      Parameters.resourceGroupName,\n      Parameters.accountName,\n      Parameters.subscriptionId,\n      Parameters.containerName,\n      Parameters.immutabilityPolicyName,\n    ],\n    headerParameters: [\n      Parameters.accept,\n      Parameters.contentType,\n      Parameters.ifMatch,\n    ],\n    mediaType: \"json\",\n    serializer,\n  };\nconst getImmutabilityPolicyOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImmutabilityPolicy,\n      headersMapper: Mappers.BlobContainersGetImmutabilityPolicyHeaders,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.subscriptionId,\n    Parameters.containerName,\n    Parameters.immutabilityPolicyName,\n  ],\n  headerParameters: [Parameters.accept, Parameters.ifMatch],\n  serializer,\n};\nconst deleteImmutabilityPolicyOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImmutabilityPolicy,\n      headersMapper: Mappers.BlobContainersDeleteImmutabilityPolicyHeaders,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.subscriptionId,\n    Parameters.containerName,\n    Parameters.immutabilityPolicyName,\n  ],\n  headerParameters: [Parameters.accept, Parameters.ifMatch1],\n  serializer,\n};\nconst lockImmutabilityPolicyOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/default/lock\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImmutabilityPolicy,\n      headersMapper: Mappers.BlobContainersLockImmutabilityPolicyHeaders,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.subscriptionId,\n    Parameters.containerName,\n  ],\n  headerParameters: [Parameters.accept, Parameters.ifMatch1],\n  serializer,\n};\nconst extendImmutabilityPolicyOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/default/extend\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImmutabilityPolicy,\n      headersMapper: Mappers.BlobContainersExtendImmutabilityPolicyHeaders,\n    },\n  },\n  requestBody: Parameters.parameters1,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.subscriptionId,\n    Parameters.containerName,\n  ],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.contentType,\n    Parameters.ifMatch1,\n  ],\n  mediaType: \"json\",\n  serializer,\n};\nconst leaseOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/lease\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.LeaseContainerResponse,\n    },\n  },\n  requestBody: Parameters.parameters2,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.subscriptionId,\n    Parameters.containerName,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst objectLevelWormOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/migrate\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.subscriptionId,\n    Parameters.containerName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListContainerItems,\n    },\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.subscriptionId,\n    Parameters.nextLink,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n"]}