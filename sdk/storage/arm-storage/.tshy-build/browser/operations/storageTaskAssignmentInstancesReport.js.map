{"version":3,"file":"storageTaskAssignmentInstancesReport.js","sourceRoot":"","sources":["../../../src/operations/storageTaskAssignmentInstancesReport.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAGH,OAAO,EAAE,oBAAoB,EAAE,MAAM,oBAAoB,CAAC;AAE1D,OAAO,KAAK,UAAU,MAAM,oBAAoB,CAAC;AACjD,OAAO,KAAK,OAAO,MAAM,sBAAsB,CAAC;AAChD,OAAO,KAAK,UAAU,MAAM,yBAAyB,CAAC;AAUtD,4CAA4C;AAC5C,wEAAwE;AACxE,MAAM,OAAO,wCAAwC;IAKnD;;;OAGG;IACH,YAAY,MAA+B;QACzC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;;;;;;;;;OAUG;IACI,IAAI,CACT,iBAAyB,EACzB,WAAmB,EACnB,yBAAiC,EACjC,OAAgE;QAEhE,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,CAC7B,iBAAiB,EACjB,WAAW,EACX,yBAAyB,EACzB,OAAO,CACR,CAAC;QACF,OAAO;YACL,IAAI;gBACF,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC;YACrB,CAAC;YACD,CAAC,MAAM,CAAC,aAAa,CAAC;gBACpB,OAAO,IAAI,CAAC;YACd,CAAC;YACD,MAAM,EAAE,CAAC,QAAuB,EAAE,EAAE;gBAClC,IAAI,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,WAAW,EAAE,CAAC;oBAC1B,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;gBACrE,CAAC;gBACD,OAAO,IAAI,CAAC,cAAc,CACxB,iBAAiB,EACjB,WAAW,EACX,yBAAyB,EACzB,OAAO,EACP,QAAQ,CACT,CAAC;YACJ,CAAC;SACF,CAAC;IACJ,CAAC;IAEc,cAAc,CAC3B,iBAAyB,EACzB,WAAmB,EACnB,yBAAiC,EACjC,OAAgE,EAChE,QAAuB;;YAEvB,IAAI,MAAwD,CAAC;YAC7D,IAAI,iBAAiB,GAAG,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,iBAAiB,CAAC;YACpD,IAAI,CAAC,iBAAiB,EAAE,CAAC;gBACvB,MAAM,GAAG,cAAM,IAAI,CAAC,KAAK,CACvB,iBAAiB,EACjB,WAAW,EACX,yBAAyB,EACzB,OAAO,CACR,CAAA,CAAC;gBACF,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,IAAI,EAAE,CAAC;gBAC9B,iBAAiB,GAAG,MAAM,CAAC,QAAQ,CAAC;gBACpC,oBAAoB,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;gBAC9C,oBAAM,IAAI,CAAA,CAAC;YACb,CAAC;YACD,OAAO,iBAAiB,EAAE,CAAC;gBACzB,MAAM,GAAG,cAAM,IAAI,CAAC,SAAS,CAC3B,iBAAiB,EACjB,WAAW,EACX,yBAAyB,EACzB,iBAAiB,EACjB,OAAO,CACR,CAAA,CAAC;gBACF,iBAAiB,GAAG,MAAM,CAAC,QAAQ,CAAC;gBACpC,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,IAAI,EAAE,CAAC;gBAC9B,oBAAoB,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;gBAC9C,oBAAM,IAAI,CAAA,CAAC;YACb,CAAC;QACH,CAAC;KAAA;IAEc,aAAa,CAC1B,iBAAyB,EACzB,WAAmB,EACnB,yBAAiC,EACjC,OAAgE;;;;gBAEhE,KAAyB,eAAA,KAAA,cAAA,IAAI,CAAC,cAAc,CAC1C,iBAAiB,EACjB,WAAW,EACX,yBAAyB,EACzB,OAAO,CACR,CAAA,IAAA,+DAAE,CAAC;oBALqB,cAKxB;oBALwB,WAKxB;oBALU,MAAM,IAAI,KAAA,CAAA;oBAMnB,cAAA,KAAK,CAAC,CAAC,iBAAA,cAAA,IAAI,CAAA,CAAA,CAAA,CAAC;gBACd,CAAC;;;;;;;;;QACH,CAAC;KAAA;IAED;;;;;;;;;;OAUG;IACK,KAAK,CACX,iBAAyB,EACzB,WAAmB,EACnB,yBAAiC,EACjC,OAAgE;QAEhE,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,iBAAiB,EAAE,WAAW,EAAE,yBAAyB,EAAE,OAAO,EAAE,EACtE,iBAAiB,CAClB,CAAC;IACJ,CAAC;IAED;;;;;;;;;;;OAWG;IACK,SAAS,CACf,iBAAyB,EACzB,WAAmB,EACnB,yBAAiC,EACjC,QAAgB,EAChB,OAAoE;QAEpE,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC;YACE,iBAAiB;YACjB,WAAW;YACX,yBAAyB;YACzB,QAAQ;YACR,OAAO;SACR,EACD,qBAAqB,CACtB,CAAC;IACJ,CAAC;CACF;AACD,2BAA2B;AAC3B,MAAM,UAAU,GAAG,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;AAE3E,MAAM,iBAAiB,GAA6B;IAClD,IAAI,EAAE,yLAAyL;IAC/L,UAAU,EAAE,KAAK;IACjB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,wBAAwB;SAC7C;QACD,OAAO,EAAE;YACP,UAAU,EAAE,OAAO,CAAC,0BAA0B;SAC/C;KACF;IACD,eAAe,EAAE;QACf,UAAU,CAAC,UAAU;QACrB,UAAU,CAAC,MAAM;QACjB,UAAU,CAAC,YAAY;KACxB;IACD,aAAa,EAAE;QACb,UAAU,CAAC,KAAK;QAChB,UAAU,CAAC,iBAAiB;QAC5B,UAAU,CAAC,WAAW;QACtB,UAAU,CAAC,cAAc;QACzB,UAAU,CAAC,yBAAyB;KACrC;IACD,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC;IACrC,UAAU;CACX,CAAC;AACF,MAAM,qBAAqB,GAA6B;IACtD,IAAI,EAAE,YAAY;IAClB,UAAU,EAAE,KAAK;IACjB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,wBAAwB;SAC7C;QACD,OAAO,EAAE;YACP,UAAU,EAAE,OAAO,CAAC,0BAA0B;SAC/C;KACF;IACD,aAAa,EAAE;QACb,UAAU,CAAC,KAAK;QAChB,UAAU,CAAC,iBAAiB;QAC5B,UAAU,CAAC,WAAW;QACtB,UAAU,CAAC,cAAc;QACzB,UAAU,CAAC,QAAQ;QACnB,UAAU,CAAC,yBAAyB;KACrC;IACD,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC;IACrC,UAAU;CACX,CAAC","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper.js\";\nimport { StorageTaskAssignmentInstancesReport } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { StorageManagementClient } from \"../storageManagementClient.js\";\nimport {\n  StorageTaskReportInstance,\n  StorageTaskAssignmentInstancesReportListNextOptionalParams,\n  StorageTaskAssignmentInstancesReportListOptionalParams,\n  StorageTaskAssignmentInstancesReportListResponse,\n  StorageTaskAssignmentInstancesReportListNextResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing StorageTaskAssignmentInstancesReport operations. */\nexport class StorageTaskAssignmentInstancesReportImpl\n  implements StorageTaskAssignmentInstancesReport\n{\n  private readonly client: StorageManagementClient;\n\n  /**\n   * Initialize a new instance of the class StorageTaskAssignmentInstancesReport class.\n   * @param client Reference to the service client\n   */\n  constructor(client: StorageManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Fetch the report summary of a single storage task assignment's instances\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param storageTaskAssignmentName The name of the storage task assignment within the specified\n   *                                  resource group. Storage task assignment names must be between 3 and 24 characters in length and use\n   *                                  numbers and lower-case letters only.\n   * @param options The options parameters.\n   */\n  public list(\n    resourceGroupName: string,\n    accountName: string,\n    storageTaskAssignmentName: string,\n    options?: StorageTaskAssignmentInstancesReportListOptionalParams,\n  ): PagedAsyncIterableIterator<StorageTaskReportInstance> {\n    const iter = this.listPagingAll(\n      resourceGroupName,\n      accountName,\n      storageTaskAssignmentName,\n      options,\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(\n          resourceGroupName,\n          accountName,\n          storageTaskAssignmentName,\n          options,\n          settings,\n        );\n      },\n    };\n  }\n\n  private async *listPagingPage(\n    resourceGroupName: string,\n    accountName: string,\n    storageTaskAssignmentName: string,\n    options?: StorageTaskAssignmentInstancesReportListOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<StorageTaskReportInstance[]> {\n    let result: StorageTaskAssignmentInstancesReportListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(\n        resourceGroupName,\n        accountName,\n        storageTaskAssignmentName,\n        options,\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(\n        resourceGroupName,\n        accountName,\n        storageTaskAssignmentName,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    resourceGroupName: string,\n    accountName: string,\n    storageTaskAssignmentName: string,\n    options?: StorageTaskAssignmentInstancesReportListOptionalParams,\n  ): AsyncIterableIterator<StorageTaskReportInstance> {\n    for await (const page of this.listPagingPage(\n      resourceGroupName,\n      accountName,\n      storageTaskAssignmentName,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Fetch the report summary of a single storage task assignment's instances\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param storageTaskAssignmentName The name of the storage task assignment within the specified\n   *                                  resource group. Storage task assignment names must be between 3 and 24 characters in length and use\n   *                                  numbers and lower-case letters only.\n   * @param options The options parameters.\n   */\n  private _list(\n    resourceGroupName: string,\n    accountName: string,\n    storageTaskAssignmentName: string,\n    options?: StorageTaskAssignmentInstancesReportListOptionalParams,\n  ): Promise<StorageTaskAssignmentInstancesReportListResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, accountName, storageTaskAssignmentName, options },\n      listOperationSpec,\n    );\n  }\n\n  /**\n   * ListNext\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param accountName The name of the storage account within the specified resource group. Storage\n   *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters\n   *                    only.\n   * @param storageTaskAssignmentName The name of the storage task assignment within the specified\n   *                                  resource group. Storage task assignment names must be between 3 and 24 characters in length and use\n   *                                  numbers and lower-case letters only.\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    resourceGroupName: string,\n    accountName: string,\n    storageTaskAssignmentName: string,\n    nextLink: string,\n    options?: StorageTaskAssignmentInstancesReportListNextOptionalParams,\n  ): Promise<StorageTaskAssignmentInstancesReportListNextResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        accountName,\n        storageTaskAssignmentName,\n        nextLink,\n        options,\n      },\n      listNextOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/storageTaskAssignments/{storageTaskAssignmentName}/reports\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.StorageTaskReportSummary,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponseAutoGenerated,\n    },\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.filter,\n    Parameters.maxpagesize1,\n  ],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.subscriptionId,\n    Parameters.storageTaskAssignmentName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.StorageTaskReportSummary,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponseAutoGenerated,\n    },\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.accountName,\n    Parameters.subscriptionId,\n    Parameters.nextLink,\n    Parameters.storageTaskAssignmentName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n"]}