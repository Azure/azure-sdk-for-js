/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  env,
  Recorder,
  RecorderStartOptions,
  isPlaybackMode,
} from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { StorageManagementClient } from "../src/storageManagementClient.js";
import { describe, it, assert, beforeEach, afterEach } from "vitest";

const replaceableVariables: Record<string, string> = {
  SUBSCRIPTION_ID: "azure_subscription_id"
};

const recorderOptions: RecorderStartOptions = {
  envSetupForPlayback: replaceableVariables,
  removeCentralSanitizers: [
    "AZSDK3493", // .name in the body is not a secret and is listed below in the beforeEach section
    "AZSDK3430", // .id in the body is not a secret and is listed below in the beforeEach section
  ],
};

export const testPollingOptions = {
  updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};

describe("Storage test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: StorageManagementClient;
  let resourceGroup: string;
  let storageAccountName: string;
  let containerName: string;

  beforeEach(async (ctx) => {
    recorder = new Recorder(ctx);
    await recorder.start(recorderOptions);
    subscriptionId = env.SUBSCRIPTION_ID || '';
    // This is an example of how the environment variables are used
    const credential = createTestCredential();
    client = new StorageManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
    resourceGroup = "myjstest";
    storageAccountName = "storageaccountzzzxxx1";
    containerName = "mycontainerxxx";
  });

  afterEach(async () => {
    await recorder.stop();
  });

  it("storageAccounts create test", async () => {
    const res = await client.storageAccounts.beginCreateAndWait(resourceGroup, storageAccountName, {
      sku: {
        name: "Standard_GRS",
      },
      kind: "StorageV2",
      location: "westeurope",
      encryption: {
        services: {
          file: {
            keyType: "Account",
            enabled: true,
          },
          blob: {
            keyType: "Account",
            enabled: true,
          },
        },
        keySource: "Microsoft.Storage",
      },
      tags: {
        key1: "value1",
        key2: "value2",
      }
    }, testPollingOptions)
    assert.equal(res.name, storageAccountName)
  });

  it("blobContainers create test", async () => {
    const res = await client.blobContainers.create(resourceGroup, storageAccountName, containerName, {});
    assert.equal(res.name, containerName);
  });

  it("storageAccounts get test", async () => {
    const res = await client.storageAccounts.getProperties(resourceGroup, storageAccountName);
    assert.equal(res.name, storageAccountName);
  });

  it("blobContainers get test", async () => {
    const res = await client.blobContainers.get(resourceGroup, storageAccountName, containerName);
    assert.equal(res.name, containerName);
  });

  it("storageAccounts list test", async () => {
    const resArray = new Array();
    for await (const item of client.storageAccounts.listByResourceGroup(resourceGroup)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 1);
  });

  it("blobContainers list test", async () => {
    const resArray = new Array();
    for await (const item of client.blobContainers.list(resourceGroup, storageAccountName)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 1);
  });

  it("storageAccounts update test", async () => {
    const res = await client.storageAccounts.update(resourceGroup, storageAccountName, { tags: { tag1: "value1" } });
    assert.equal(res.type, "Microsoft.Storage/storageAccounts");
  });

  it("blobContainers update test", async () => {
    const res = await client.blobContainers.update(resourceGroup, storageAccountName, containerName, {});
    assert.equal(res.type, "Microsoft.Storage/storageAccounts/blobServices/containers");
  });

  it("blobContainers delete test", async () => {
    const resArray = new Array();
    await client.blobContainers.delete(resourceGroup, storageAccountName, containerName);
    for await (const item of client.blobContainers.list(resourceGroup, storageAccountName)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });

  it("storageAccounts delete test", async () => {
    const resArray = new Array();
    await client.storageAccounts.delete(resourceGroup, storageAccountName);
    for await (const item of client.storageAccounts.listByResourceGroup(resourceGroup)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });
});
