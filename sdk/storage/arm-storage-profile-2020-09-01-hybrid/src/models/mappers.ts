/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      serviceSpecification: {
        serializedName: "properties.serviceSpecification",
        type: {
          name: "Composite",
          className: "ServiceSpecification"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceSpecification",
    modelProperties: {
      metricSpecifications: {
        serializedName: "metricSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricSpecification"
            }
          }
        }
      }
    }
  }
};

export const MetricSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricSpecification",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      displayDescription: {
        serializedName: "displayDescription",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      dimensions: {
        serializedName: "dimensions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Dimension"
            }
          }
        }
      },
      aggregationType: {
        serializedName: "aggregationType",
        type: {
          name: "String"
        }
      },
      fillGapWithZero: {
        serializedName: "fillGapWithZero",
        type: {
          name: "Boolean"
        }
      },
      category: {
        serializedName: "category",
        type: {
          name: "String"
        }
      },
      resourceIdDimensionNameOverride: {
        serializedName: "resourceIdDimensionNameOverride",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Dimension: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Dimension",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageSkuListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageSkuListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SkuInformation"
            }
          }
        }
      }
    }
  }
};

export const SkuInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuInformation",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Standard", "Premium"]
        }
      },
      resourceType: {
        serializedName: "resourceType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      locations: {
        serializedName: "locations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      capabilities: {
        serializedName: "capabilities",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SKUCapability"
            }
          }
        }
      },
      restrictions: {
        serializedName: "restrictions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Restriction"
            }
          }
        }
      }
    }
  }
};

export const SKUCapability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SKUCapability",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Restriction: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Restriction",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      values: {
        serializedName: "values",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      reasonCode: {
        serializedName: "reasonCode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAccountCheckNameAvailabilityParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAccountCheckNameAvailabilityParameters",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        defaultValue: "Microsoft.Storage/storageAccounts",
        isConstant: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityResult",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["AccountNameInvalid", "AlreadyExists"]
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAccountCreateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAccountCreateParameters",
    modelProperties: {
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      },
      customDomain: {
        serializedName: "properties.customDomain",
        type: {
          name: "Composite",
          className: "CustomDomain"
        }
      },
      encryption: {
        serializedName: "properties.encryption",
        type: {
          name: "Composite",
          className: "Encryption"
        }
      },
      networkRuleSet: {
        serializedName: "properties.networkAcls",
        type: {
          name: "Composite",
          className: "NetworkRuleSet"
        }
      },
      accessTier: {
        serializedName: "properties.accessTier",
        type: {
          name: "Enum",
          allowedValues: ["Hot", "Cool"]
        }
      },
      azureFilesIdentityBasedAuthentication: {
        serializedName: "properties.azureFilesIdentityBasedAuthentication",
        type: {
          name: "Composite",
          className: "AzureFilesIdentityBasedAuthentication"
        }
      },
      enableHttpsTrafficOnly: {
        serializedName: "properties.supportsHttpsTrafficOnly",
        type: {
          name: "Boolean"
        }
      },
      isHnsEnabled: {
        serializedName: "properties.isHnsEnabled",
        type: {
          name: "Boolean"
        }
      },
      largeFileSharesState: {
        serializedName: "properties.largeFileSharesState",
        type: {
          name: "String"
        }
      },
      routingPreference: {
        serializedName: "properties.routingPreference",
        type: {
          name: "Composite",
          className: "RoutingPreference"
        }
      },
      allowBlobPublicAccess: {
        serializedName: "properties.allowBlobPublicAccess",
        type: {
          name: "Boolean"
        }
      },
      minimumTlsVersion: {
        serializedName: "properties.minimumTlsVersion",
        type: {
          name: "String"
        }
      },
      allowSharedKeyAccess: {
        serializedName: "properties.allowSharedKeyAccess",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const Sku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Standard", "Premium"]
        }
      }
    }
  }
};

export const Identity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Identity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        defaultValue: "SystemAssigned",
        isConstant: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomDomain: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomDomain",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      useSubDomainName: {
        serializedName: "useSubDomainName",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const Encryption: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Encryption",
    modelProperties: {
      services: {
        serializedName: "services",
        type: {
          name: "Composite",
          className: "EncryptionServices"
        }
      },
      keySource: {
        defaultValue: "Microsoft.Storage",
        serializedName: "keySource",
        required: true,
        type: {
          name: "String"
        }
      },
      requireInfrastructureEncryption: {
        serializedName: "requireInfrastructureEncryption",
        type: {
          name: "Boolean"
        }
      },
      keyVaultProperties: {
        serializedName: "keyvaultproperties",
        type: {
          name: "Composite",
          className: "KeyVaultProperties"
        }
      }
    }
  }
};

export const EncryptionServices: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EncryptionServices",
    modelProperties: {
      blob: {
        serializedName: "blob",
        type: {
          name: "Composite",
          className: "EncryptionService"
        }
      },
      file: {
        serializedName: "file",
        type: {
          name: "Composite",
          className: "EncryptionService"
        }
      },
      table: {
        serializedName: "table",
        type: {
          name: "Composite",
          className: "EncryptionService"
        }
      },
      queue: {
        serializedName: "queue",
        type: {
          name: "Composite",
          className: "EncryptionService"
        }
      }
    }
  }
};

export const EncryptionService: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EncryptionService",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      lastEnabledTime: {
        serializedName: "lastEnabledTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      keyType: {
        serializedName: "keyType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyVaultProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyVaultProperties",
    modelProperties: {
      keyName: {
        serializedName: "keyname",
        type: {
          name: "String"
        }
      },
      keyVersion: {
        serializedName: "keyversion",
        type: {
          name: "String"
        }
      },
      keyVaultUri: {
        serializedName: "keyvaulturi",
        type: {
          name: "String"
        }
      },
      currentVersionedKeyIdentifier: {
        serializedName: "currentVersionedKeyIdentifier",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastKeyRotationTimestamp: {
        serializedName: "lastKeyRotationTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const NetworkRuleSet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkRuleSet",
    modelProperties: {
      bypass: {
        defaultValue: "AzureServices",
        serializedName: "bypass",
        type: {
          name: "String"
        }
      },
      virtualNetworkRules: {
        serializedName: "virtualNetworkRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkRule"
            }
          }
        }
      },
      ipRules: {
        serializedName: "ipRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IPRule"
            }
          }
        }
      },
      defaultAction: {
        defaultValue: "Allow",
        serializedName: "defaultAction",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Allow", "Deny"]
        }
      }
    }
  }
};

export const VirtualNetworkRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkRule",
    modelProperties: {
      virtualNetworkResourceId: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      action: {
        defaultValue: "Allow",
        isConstant: true,
        serializedName: "action",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "Enum",
          allowedValues: [
            "provisioning",
            "deprovisioning",
            "succeeded",
            "failed",
            "networkSourceDeleted"
          ]
        }
      }
    }
  }
};

export const IPRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IPRule",
    modelProperties: {
      iPAddressOrRange: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      },
      action: {
        defaultValue: "Allow",
        isConstant: true,
        serializedName: "action",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureFilesIdentityBasedAuthentication: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureFilesIdentityBasedAuthentication",
    modelProperties: {
      directoryServiceOptions: {
        serializedName: "directoryServiceOptions",
        required: true,
        type: {
          name: "String"
        }
      },
      activeDirectoryProperties: {
        serializedName: "activeDirectoryProperties",
        type: {
          name: "Composite",
          className: "ActiveDirectoryProperties"
        }
      }
    }
  }
};

export const ActiveDirectoryProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ActiveDirectoryProperties",
    modelProperties: {
      domainName: {
        serializedName: "domainName",
        required: true,
        type: {
          name: "String"
        }
      },
      netBiosDomainName: {
        serializedName: "netBiosDomainName",
        required: true,
        type: {
          name: "String"
        }
      },
      forestName: {
        serializedName: "forestName",
        required: true,
        type: {
          name: "String"
        }
      },
      domainGuid: {
        serializedName: "domainGuid",
        required: true,
        type: {
          name: "String"
        }
      },
      domainSid: {
        serializedName: "domainSid",
        required: true,
        type: {
          name: "String"
        }
      },
      azureStorageSid: {
        serializedName: "azureStorageSid",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoutingPreference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoutingPreference",
    modelProperties: {
      routingChoice: {
        serializedName: "routingChoice",
        type: {
          name: "String"
        }
      },
      publishMicrosoftEndpoints: {
        serializedName: "publishMicrosoftEndpoints",
        type: {
          name: "Boolean"
        }
      },
      publishInternetEndpoints: {
        serializedName: "publishInternetEndpoints",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const Endpoints: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Endpoints",
    modelProperties: {
      blob: {
        serializedName: "blob",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      queue: {
        serializedName: "queue",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      table: {
        serializedName: "table",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      file: {
        serializedName: "file",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      web: {
        serializedName: "web",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dfs: {
        serializedName: "dfs",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      microsoftEndpoints: {
        serializedName: "microsoftEndpoints",
        type: {
          name: "Composite",
          className: "StorageAccountMicrosoftEndpoints"
        }
      },
      internetEndpoints: {
        serializedName: "internetEndpoints",
        type: {
          name: "Composite",
          className: "StorageAccountInternetEndpoints"
        }
      }
    }
  }
};

export const StorageAccountMicrosoftEndpoints: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAccountMicrosoftEndpoints",
    modelProperties: {
      blob: {
        serializedName: "blob",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      queue: {
        serializedName: "queue",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      table: {
        serializedName: "table",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      file: {
        serializedName: "file",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      web: {
        serializedName: "web",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dfs: {
        serializedName: "dfs",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAccountInternetEndpoints: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAccountInternetEndpoints",
    modelProperties: {
      blob: {
        serializedName: "blob",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      file: {
        serializedName: "file",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      web: {
        serializedName: "web",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dfs: {
        serializedName: "dfs",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GeoReplicationStats: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoReplicationStats",
    modelProperties: {
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastSyncTime: {
        serializedName: "lastSyncTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      canFailover: {
        serializedName: "canFailover",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const PrivateEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpoint",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkServiceConnectionState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionState",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      actionRequired: {
        serializedName: "actionRequired",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BlobRestoreStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BlobRestoreStatus",
    modelProperties: {
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      failureReason: {
        serializedName: "failureReason",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      restoreId: {
        serializedName: "restoreId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "BlobRestoreParameters"
        }
      }
    }
  }
};

export const BlobRestoreParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BlobRestoreParameters",
    modelProperties: {
      timeToRestore: {
        serializedName: "timeToRestore",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      blobRanges: {
        serializedName: "blobRanges",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BlobRestoreRange"
            }
          }
        }
      }
    }
  }
};

export const BlobRestoreRange: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BlobRestoreRange",
    modelProperties: {
      startRange: {
        serializedName: "startRange",
        required: true,
        type: {
          name: "String"
        }
      },
      endRange: {
        serializedName: "endRange",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAccountUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAccountUpdateParameters",
    modelProperties: {
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      customDomain: {
        serializedName: "properties.customDomain",
        type: {
          name: "Composite",
          className: "CustomDomain"
        }
      },
      encryption: {
        serializedName: "properties.encryption",
        type: {
          name: "Composite",
          className: "Encryption"
        }
      },
      accessTier: {
        serializedName: "properties.accessTier",
        type: {
          name: "Enum",
          allowedValues: ["Hot", "Cool"]
        }
      },
      azureFilesIdentityBasedAuthentication: {
        serializedName: "properties.azureFilesIdentityBasedAuthentication",
        type: {
          name: "Composite",
          className: "AzureFilesIdentityBasedAuthentication"
        }
      },
      enableHttpsTrafficOnly: {
        serializedName: "properties.supportsHttpsTrafficOnly",
        type: {
          name: "Boolean"
        }
      },
      networkRuleSet: {
        serializedName: "properties.networkAcls",
        type: {
          name: "Composite",
          className: "NetworkRuleSet"
        }
      },
      largeFileSharesState: {
        serializedName: "properties.largeFileSharesState",
        type: {
          name: "String"
        }
      },
      routingPreference: {
        serializedName: "properties.routingPreference",
        type: {
          name: "Composite",
          className: "RoutingPreference"
        }
      },
      allowBlobPublicAccess: {
        serializedName: "properties.allowBlobPublicAccess",
        type: {
          name: "Boolean"
        }
      },
      minimumTlsVersion: {
        serializedName: "properties.minimumTlsVersion",
        type: {
          name: "String"
        }
      },
      allowSharedKeyAccess: {
        serializedName: "properties.allowSharedKeyAccess",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const StorageAccountListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAccountListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageAccount"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAccountListKeysResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAccountListKeysResult",
    modelProperties: {
      keys: {
        serializedName: "keys",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageAccountKey"
            }
          }
        }
      }
    }
  }
};

export const StorageAccountKey: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAccountKey",
    modelProperties: {
      keyName: {
        serializedName: "keyName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      permissions: {
        serializedName: "permissions",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Read", "Full"]
        }
      }
    }
  }
};

export const StorageAccountRegenerateKeyParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAccountRegenerateKeyParameters",
    modelProperties: {
      keyName: {
        serializedName: "keyName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UsageListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsageListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Usage"
            }
          }
        }
      }
    }
  }
};

export const Usage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Usage",
    modelProperties: {
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Count",
            "Bytes",
            "Seconds",
            "Percent",
            "CountsPerSecond",
            "BytesPerSecond"
          ]
        }
      },
      currentValue: {
        serializedName: "currentValue",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      limit: {
        serializedName: "limit",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "UsageName"
        }
      }
    }
  }
};

export const UsageName: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsageName",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      localizedValue: {
        serializedName: "localizedValue",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AccountSasParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountSasParameters",
    modelProperties: {
      services: {
        serializedName: "signedServices",
        required: true,
        type: {
          name: "String"
        }
      },
      resourceTypes: {
        serializedName: "signedResourceTypes",
        required: true,
        type: {
          name: "String"
        }
      },
      permissions: {
        serializedName: "signedPermission",
        required: true,
        type: {
          name: "String"
        }
      },
      iPAddressOrRange: {
        serializedName: "signedIp",
        type: {
          name: "String"
        }
      },
      protocols: {
        serializedName: "signedProtocol",
        type: {
          name: "Enum",
          allowedValues: ["https,http", "https"]
        }
      },
      sharedAccessStartTime: {
        serializedName: "signedStart",
        type: {
          name: "DateTime"
        }
      },
      sharedAccessExpiryTime: {
        serializedName: "signedExpiry",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      keyToSign: {
        serializedName: "keyToSign",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListAccountSasResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListAccountSasResponse",
    modelProperties: {
      accountSasToken: {
        serializedName: "accountSasToken",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceSasParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceSasParameters",
    modelProperties: {
      canonicalizedResource: {
        serializedName: "canonicalizedResource",
        required: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "signedResource",
        type: {
          name: "String"
        }
      },
      permissions: {
        serializedName: "signedPermission",
        type: {
          name: "String"
        }
      },
      iPAddressOrRange: {
        serializedName: "signedIp",
        type: {
          name: "String"
        }
      },
      protocols: {
        serializedName: "signedProtocol",
        type: {
          name: "Enum",
          allowedValues: ["https,http", "https"]
        }
      },
      sharedAccessStartTime: {
        serializedName: "signedStart",
        type: {
          name: "DateTime"
        }
      },
      sharedAccessExpiryTime: {
        serializedName: "signedExpiry",
        type: {
          name: "DateTime"
        }
      },
      identifier: {
        constraints: {
          MaxLength: 64
        },
        serializedName: "signedIdentifier",
        type: {
          name: "String"
        }
      },
      partitionKeyStart: {
        serializedName: "startPk",
        type: {
          name: "String"
        }
      },
      partitionKeyEnd: {
        serializedName: "endPk",
        type: {
          name: "String"
        }
      },
      rowKeyStart: {
        serializedName: "startRk",
        type: {
          name: "String"
        }
      },
      rowKeyEnd: {
        serializedName: "endRk",
        type: {
          name: "String"
        }
      },
      keyToSign: {
        serializedName: "keyToSign",
        type: {
          name: "String"
        }
      },
      cacheControl: {
        serializedName: "rscc",
        type: {
          name: "String"
        }
      },
      contentDisposition: {
        serializedName: "rscd",
        type: {
          name: "String"
        }
      },
      contentEncoding: {
        serializedName: "rsce",
        type: {
          name: "String"
        }
      },
      contentLanguage: {
        serializedName: "rscl",
        type: {
          name: "String"
        }
      },
      contentType: {
        serializedName: "rsct",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListServiceSasResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListServiceSasResponse",
    modelProperties: {
      serviceSasToken: {
        serializedName: "serviceSasToken",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagementPolicySchema: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementPolicySchema",
    modelProperties: {
      rules: {
        serializedName: "rules",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagementPolicyRule"
            }
          }
        }
      }
    }
  }
};

export const ManagementPolicyRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementPolicyRule",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      definition: {
        serializedName: "definition",
        type: {
          name: "Composite",
          className: "ManagementPolicyDefinition"
        }
      }
    }
  }
};

export const ManagementPolicyDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementPolicyDefinition",
    modelProperties: {
      actions: {
        serializedName: "actions",
        type: {
          name: "Composite",
          className: "ManagementPolicyAction"
        }
      },
      filters: {
        serializedName: "filters",
        type: {
          name: "Composite",
          className: "ManagementPolicyFilter"
        }
      }
    }
  }
};

export const ManagementPolicyAction: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementPolicyAction",
    modelProperties: {
      baseBlob: {
        serializedName: "baseBlob",
        type: {
          name: "Composite",
          className: "ManagementPolicyBaseBlob"
        }
      },
      snapshot: {
        serializedName: "snapshot",
        type: {
          name: "Composite",
          className: "ManagementPolicySnapShot"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "Composite",
          className: "ManagementPolicyVersion"
        }
      }
    }
  }
};

export const ManagementPolicyBaseBlob: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementPolicyBaseBlob",
    modelProperties: {
      tierToCool: {
        serializedName: "tierToCool",
        type: {
          name: "Composite",
          className: "DateAfterModification"
        }
      },
      tierToArchive: {
        serializedName: "tierToArchive",
        type: {
          name: "Composite",
          className: "DateAfterModification"
        }
      },
      delete: {
        serializedName: "delete",
        type: {
          name: "Composite",
          className: "DateAfterModification"
        }
      },
      enableAutoTierToHotFromCool: {
        serializedName: "enableAutoTierToHotFromCool",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DateAfterModification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DateAfterModification",
    modelProperties: {
      daysAfterModificationGreaterThan: {
        constraints: {
          InclusiveMinimum: 0,
          MultipleOf: 1
        },
        serializedName: "daysAfterModificationGreaterThan",
        type: {
          name: "Number"
        }
      },
      daysAfterLastAccessTimeGreaterThan: {
        constraints: {
          InclusiveMinimum: 0,
          MultipleOf: 1
        },
        serializedName: "daysAfterLastAccessTimeGreaterThan",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ManagementPolicySnapShot: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementPolicySnapShot",
    modelProperties: {
      tierToCool: {
        serializedName: "tierToCool",
        type: {
          name: "Composite",
          className: "DateAfterCreation"
        }
      },
      tierToArchive: {
        serializedName: "tierToArchive",
        type: {
          name: "Composite",
          className: "DateAfterCreation"
        }
      },
      delete: {
        serializedName: "delete",
        type: {
          name: "Composite",
          className: "DateAfterCreation"
        }
      }
    }
  }
};

export const DateAfterCreation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DateAfterCreation",
    modelProperties: {
      daysAfterCreationGreaterThan: {
        constraints: {
          InclusiveMinimum: 0,
          MultipleOf: 1
        },
        serializedName: "daysAfterCreationGreaterThan",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ManagementPolicyVersion: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementPolicyVersion",
    modelProperties: {
      tierToCool: {
        serializedName: "tierToCool",
        type: {
          name: "Composite",
          className: "DateAfterCreation"
        }
      },
      tierToArchive: {
        serializedName: "tierToArchive",
        type: {
          name: "Composite",
          className: "DateAfterCreation"
        }
      },
      delete: {
        serializedName: "delete",
        type: {
          name: "Composite",
          className: "DateAfterCreation"
        }
      }
    }
  }
};

export const ManagementPolicyFilter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementPolicyFilter",
    modelProperties: {
      prefixMatch: {
        serializedName: "prefixMatch",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      blobTypes: {
        serializedName: "blobTypes",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      blobIndexMatch: {
        serializedName: "blobIndexMatch",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TagFilter"
            }
          }
        }
      }
    }
  }
};

export const TagFilter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TagFilter",
    modelProperties: {
      name: {
        constraints: {
          MaxLength: 128,
          MinLength: 1
        },
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      op: {
        serializedName: "op",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        constraints: {
          MaxLength: 256
        },
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BlobInventoryPolicySchema: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BlobInventoryPolicySchema",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      destination: {
        serializedName: "destination",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      rules: {
        serializedName: "rules",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BlobInventoryPolicyRule"
            }
          }
        }
      }
    }
  }
};

export const BlobInventoryPolicyRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BlobInventoryPolicyRule",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      definition: {
        serializedName: "definition",
        type: {
          name: "Composite",
          className: "BlobInventoryPolicyDefinition"
        }
      }
    }
  }
};

export const BlobInventoryPolicyDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BlobInventoryPolicyDefinition",
    modelProperties: {
      filters: {
        serializedName: "filters",
        type: {
          name: "Composite",
          className: "BlobInventoryPolicyFilter"
        }
      }
    }
  }
};

export const BlobInventoryPolicyFilter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BlobInventoryPolicyFilter",
    modelProperties: {
      prefixMatch: {
        serializedName: "prefixMatch",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      blobTypes: {
        serializedName: "blobTypes",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      includeBlobVersions: {
        serializedName: "includeBlobVersions",
        type: {
          name: "Boolean"
        }
      },
      includeSnapshots: {
        serializedName: "includeSnapshots",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorResponseBody"
        }
      }
    }
  }
};

export const ErrorResponseBody: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponseBody",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListBlobInventoryPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListBlobInventoryPolicy",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BlobInventoryPolicy"
            }
          }
        }
      }
    }
  }
};

export const PrivateEndpointConnectionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      }
    }
  }
};

export const PrivateLinkResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource"
            }
          }
        }
      }
    }
  }
};

export const ObjectReplicationPolicies: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ObjectReplicationPolicies",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ObjectReplicationPolicy"
            }
          }
        }
      }
    }
  }
};

export const ObjectReplicationPolicyRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ObjectReplicationPolicyRule",
    modelProperties: {
      ruleId: {
        serializedName: "ruleId",
        type: {
          name: "String"
        }
      },
      sourceContainer: {
        serializedName: "sourceContainer",
        required: true,
        type: {
          name: "String"
        }
      },
      destinationContainer: {
        serializedName: "destinationContainer",
        required: true,
        type: {
          name: "String"
        }
      },
      filters: {
        serializedName: "filters",
        type: {
          name: "Composite",
          className: "ObjectReplicationPolicyFilter"
        }
      }
    }
  }
};

export const ObjectReplicationPolicyFilter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ObjectReplicationPolicyFilter",
    modelProperties: {
      prefixMatch: {
        serializedName: "prefixMatch",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      minCreationTime: {
        serializedName: "minCreationTime",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EncryptionScopeKeyVaultProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EncryptionScopeKeyVaultProperties",
    modelProperties: {
      keyUri: {
        serializedName: "keyUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EncryptionScopeListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EncryptionScopeListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EncryptionScope"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...Resource.type.modelProperties,
      privateEndpoint: {
        serializedName: "properties.privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "properties.privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagementPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementPolicy",
    modelProperties: {
      ...Resource.type.modelProperties,
      lastModifiedTime: {
        serializedName: "properties.lastModifiedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      policy: {
        serializedName: "properties.policy",
        type: {
          name: "Composite",
          className: "ManagementPolicySchema"
        }
      }
    }
  }
};

export const BlobInventoryPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BlobInventoryPolicy",
    modelProperties: {
      ...Resource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      lastModifiedTime: {
        serializedName: "properties.lastModifiedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      policy: {
        serializedName: "properties.policy",
        type: {
          name: "Composite",
          className: "BlobInventoryPolicySchema"
        }
      }
    }
  }
};

export const PrivateLinkResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      groupId: {
        serializedName: "properties.groupId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      requiredMembers: {
        serializedName: "properties.requiredMembers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      requiredZoneNames: {
        serializedName: "properties.requiredZoneNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ObjectReplicationPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ObjectReplicationPolicy",
    modelProperties: {
      ...Resource.type.modelProperties,
      policyId: {
        serializedName: "properties.policyId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      enabledTime: {
        serializedName: "properties.enabledTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      sourceAccount: {
        serializedName: "properties.sourceAccount",
        type: {
          name: "String"
        }
      },
      destinationAccount: {
        serializedName: "properties.destinationAccount",
        type: {
          name: "String"
        }
      },
      rules: {
        serializedName: "properties.rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ObjectReplicationPolicyRule"
            }
          }
        }
      }
    }
  }
};

export const EncryptionScope: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EncryptionScope",
    modelProperties: {
      ...Resource.type.modelProperties,
      source: {
        serializedName: "properties.source",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastModifiedTime: {
        serializedName: "properties.lastModifiedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      keyVaultProperties: {
        serializedName: "properties.keyVaultProperties",
        type: {
          name: "Composite",
          className: "EncryptionScopeKeyVaultProperties"
        }
      }
    }
  }
};

export const StorageAccount: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAccount",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      kind: {
        serializedName: "kind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Creating", "ResolvingDNS", "Succeeded"]
        }
      },
      primaryEndpoints: {
        serializedName: "properties.primaryEndpoints",
        type: {
          name: "Composite",
          className: "Endpoints"
        }
      },
      primaryLocation: {
        serializedName: "properties.primaryLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      statusOfPrimary: {
        serializedName: "properties.statusOfPrimary",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["available", "unavailable"]
        }
      },
      lastGeoFailoverTime: {
        serializedName: "properties.lastGeoFailoverTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      secondaryLocation: {
        serializedName: "properties.secondaryLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      statusOfSecondary: {
        serializedName: "properties.statusOfSecondary",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["available", "unavailable"]
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      customDomain: {
        serializedName: "properties.customDomain",
        type: {
          name: "Composite",
          className: "CustomDomain"
        }
      },
      secondaryEndpoints: {
        serializedName: "properties.secondaryEndpoints",
        type: {
          name: "Composite",
          className: "Endpoints"
        }
      },
      encryption: {
        serializedName: "properties.encryption",
        type: {
          name: "Composite",
          className: "Encryption"
        }
      },
      accessTier: {
        serializedName: "properties.accessTier",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Hot", "Cool"]
        }
      },
      azureFilesIdentityBasedAuthentication: {
        serializedName: "properties.azureFilesIdentityBasedAuthentication",
        type: {
          name: "Composite",
          className: "AzureFilesIdentityBasedAuthentication"
        }
      },
      enableHttpsTrafficOnly: {
        serializedName: "properties.supportsHttpsTrafficOnly",
        type: {
          name: "Boolean"
        }
      },
      networkRuleSet: {
        serializedName: "properties.networkAcls",
        type: {
          name: "Composite",
          className: "NetworkRuleSet"
        }
      },
      isHnsEnabled: {
        serializedName: "properties.isHnsEnabled",
        type: {
          name: "Boolean"
        }
      },
      geoReplicationStats: {
        serializedName: "properties.geoReplicationStats",
        type: {
          name: "Composite",
          className: "GeoReplicationStats"
        }
      },
      failoverInProgress: {
        serializedName: "properties.failoverInProgress",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      largeFileSharesState: {
        serializedName: "properties.largeFileSharesState",
        type: {
          name: "String"
        }
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      },
      routingPreference: {
        serializedName: "properties.routingPreference",
        type: {
          name: "Composite",
          className: "RoutingPreference"
        }
      },
      blobRestoreStatus: {
        serializedName: "properties.blobRestoreStatus",
        type: {
          name: "Composite",
          className: "BlobRestoreStatus"
        }
      },
      allowBlobPublicAccess: {
        serializedName: "properties.allowBlobPublicAccess",
        type: {
          name: "Boolean"
        }
      },
      minimumTlsVersion: {
        serializedName: "properties.minimumTlsVersion",
        type: {
          name: "String"
        }
      },
      allowSharedKeyAccess: {
        serializedName: "properties.allowSharedKeyAccess",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};
