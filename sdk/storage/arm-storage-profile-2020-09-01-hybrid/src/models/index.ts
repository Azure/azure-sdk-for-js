/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Result of the request to list Storage operations. It contains a list of operations and a URL link to get the next set of results. */
export interface OperationListResult {
  /** List of Storage operations supported by the Storage resource provider. */
  value?: Operation[];
}

/** Storage REST API operation definition. */
export interface Operation {
  /** Operation name: {provider}/{resource}/{operation} */
  name?: string;
  /** Display metadata associated with the operation. */
  display?: OperationDisplay;
  /** The origin of operations. */
  origin?: string;
  /** One property of operation, include metric specifications. */
  serviceSpecification?: ServiceSpecification;
}

/** Display metadata associated with the operation. */
export interface OperationDisplay {
  /** Service provider: Microsoft Storage. */
  provider?: string;
  /** Resource on which the operation is performed etc. */
  resource?: string;
  /** Type of operation: get, read, delete, etc. */
  operation?: string;
  /** Description of the operation. */
  description?: string;
}

/** One property of operation, include metric specifications. */
export interface ServiceSpecification {
  /** Metric specifications of operation. */
  metricSpecifications?: MetricSpecification[];
}

/** Metric specification of operation. */
export interface MetricSpecification {
  /** Name of metric specification. */
  name?: string;
  /** Display name of metric specification. */
  displayName?: string;
  /** Display description of metric specification. */
  displayDescription?: string;
  /** Unit could be Bytes or Count. */
  unit?: string;
  /** Dimensions of blobs, including blob type and access tier. */
  dimensions?: Dimension[];
  /** Aggregation type could be Average. */
  aggregationType?: string;
  /** The property to decide fill gap with zero or not. */
  fillGapWithZero?: boolean;
  /** The category this metric specification belong to, could be Capacity. */
  category?: string;
  /** Account Resource Id. */
  resourceIdDimensionNameOverride?: string;
}

/** Dimension of blobs, possibly be blob type or access tier. */
export interface Dimension {
  /** Display name of dimension. */
  name?: string;
  /** Display name of dimension. */
  displayName?: string;
}

/** The response from the List Storage SKUs operation. */
export interface StorageSkuListResult {
  /**
   * Get the list result of storage SKUs and their properties.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: SkuInformation[];
}

/** Storage SKU and its properties */
export interface SkuInformation {
  /** The SKU name. Required for account creation; optional for update. Note that in older versions, SKU name was called accountType. */
  name: SkuName;
  /**
   * The SKU tier. This is based on the SKU name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tier?: SkuTier;
  /**
   * The type of the resource, usually it is 'storageAccounts'.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceType?: string;
  /**
   * Indicates the type of storage account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly kind?: Kind;
  /**
   * The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly locations?: string[];
  /**
   * The capability information in the specified SKU, including file encryption, network ACLs, change notification, etc.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly capabilities?: SKUCapability[];
  /** The restrictions because of which SKU cannot be used. This is empty if there are no restrictions. */
  restrictions?: Restriction[];
}

/** The capability information in the specified SKU, including file encryption, network ACLs, change notification, etc. */
export interface SKUCapability {
  /**
   * The name of capability, The capability information in the specified SKU, including file encryption, network ACLs, change notification, etc.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * A string value to indicate states of given capability. Possibly 'true' or 'false'.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: string;
}

/** The restriction because of which SKU cannot be used. */
export interface Restriction {
  /**
   * The type of restrictions. As of now only possible value for this is location.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly values?: string[];
  /** The reason for the restriction. As of now this can be "QuotaId" or "NotAvailableForSubscription". Quota Id is set when the SKU has requiredQuotas parameter as the subscription does not belong to that quota. The "NotAvailableForSubscription" is related to capacity at DC. */
  reasonCode?: ReasonCode;
}

/** The parameters used to check the availability of the storage account name. */
export interface StorageAccountCheckNameAvailabilityParameters {
  /** The storage account name. */
  name: string;
  /** The type of resource, Microsoft.Storage/storageAccounts */
  type: "Microsoft.Storage/storageAccounts";
}

/** The CheckNameAvailability operation response. */
export interface CheckNameAvailabilityResult {
  /**
   * Gets a boolean value that indicates whether the name is available for you to use. If true, the name is available. If false, the name has already been taken or is invalid and cannot be used.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nameAvailable?: boolean;
  /**
   * Gets the reason that a storage account name could not be used. The Reason element is only returned if NameAvailable is false.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly reason?: Reason;
  /**
   * Gets an error message explaining the Reason value in more detail.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
}

/** The parameters used when creating a storage account. */
export interface StorageAccountCreateParameters {
  /** Required. Gets or sets the SKU name. */
  sku: Sku;
  /** Required. Indicates the type of storage account. */
  kind: Kind;
  /** Required. Gets or sets the location of the resource. This will be one of the supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.). The geo region of a resource cannot be changed once it is created, but if an identical geo region is specified on update, the request will succeed. */
  location: string;
  /** Gets or sets a list of key value pairs that describe the resource. These tags can be used for viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key with a length no greater than 128 characters and a value with a length no greater than 256 characters. */
  tags?: { [propertyName: string]: string };
  /** The identity of the resource. */
  identity?: Identity;
  /** User domain assigned to the storage account. Name is the CNAME source. Only one custom domain is supported per storage account at this time. To clear the existing custom domain, use an empty string for the custom domain name property. */
  customDomain?: CustomDomain;
  /** Not applicable. Azure Storage encryption is enabled for all storage accounts and cannot be disabled. */
  encryption?: Encryption;
  /** Network rule set */
  networkRuleSet?: NetworkRuleSet;
  /** Required for storage accounts where kind = BlobStorage. The access tier used for billing. */
  accessTier?: AccessTier;
  /** Provides the identity based authentication settings for Azure Files. */
  azureFilesIdentityBasedAuthentication?: AzureFilesIdentityBasedAuthentication;
  /** Allows https traffic only to storage service if sets to true. The default value is true since API version 2019-04-01. */
  enableHttpsTrafficOnly?: boolean;
  /** Account HierarchicalNamespace enabled if sets to true. */
  isHnsEnabled?: boolean;
  /** Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled. */
  largeFileSharesState?: LargeFileSharesState;
  /** Maintains information about the network routing choice opted by the user for data transfer */
  routingPreference?: RoutingPreference;
  /** Allow or disallow public access to all blobs or containers in the storage account. The default interpretation is true for this property. */
  allowBlobPublicAccess?: boolean;
  /** Set the minimum TLS version to be permitted on requests to storage. The default interpretation is TLS 1.0 for this property. */
  minimumTlsVersion?: MinimumTlsVersion;
  /** Indicates whether the storage account permits requests to be authorized with the account access key via Shared Key. If false, then all requests, including shared access signatures, must be authorized with Azure Active Directory (Azure AD). The default value is null, which is equivalent to true. */
  allowSharedKeyAccess?: boolean;
}

/** The SKU of the storage account. */
export interface Sku {
  /** The SKU name. Required for account creation; optional for update. Note that in older versions, SKU name was called accountType. */
  name: SkuName;
  /**
   * The SKU tier. This is based on the SKU name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tier?: SkuTier;
}

/** Identity for the resource. */
export interface Identity {
  /**
   * The principal ID of resource identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant ID of resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** The identity type. */
  type: "SystemAssigned";
}

/** The custom domain assigned to this storage account. This can be set via Update. */
export interface CustomDomain {
  /** Gets or sets the custom domain name assigned to the storage account. Name is the CNAME source. */
  name: string;
  /** Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates. */
  useSubDomainName?: boolean;
}

/** The encryption settings on the storage account. */
export interface Encryption {
  /** List of services which support encryption. */
  services?: EncryptionServices;
  /** The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault */
  keySource: KeySource;
  /** A boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest. */
  requireInfrastructureEncryption?: boolean;
  /** Properties provided by key vault. */
  keyVaultProperties?: KeyVaultProperties;
}

/** A list of services that support encryption. */
export interface EncryptionServices {
  /** The encryption function of the blob storage service. */
  blob?: EncryptionService;
  /** The encryption function of the file storage service. */
  file?: EncryptionService;
  /** The encryption function of the table storage service. */
  table?: EncryptionService;
  /** The encryption function of the queue storage service. */
  queue?: EncryptionService;
}

/** A service that allows server-side encryption to be used. */
export interface EncryptionService {
  /** A boolean indicating whether or not the service encrypts the data as it is stored. */
  enabled?: boolean;
  /**
   * Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastEnabledTime?: Date;
  /** Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption key will be used. 'Service' key type implies that a default service key is used. */
  keyType?: KeyType;
}

/** Properties of key vault. */
export interface KeyVaultProperties {
  /** The name of KeyVault key. */
  keyName?: string;
  /** The version of KeyVault key. */
  keyVersion?: string;
  /** The Uri of KeyVault. */
  keyVaultUri?: string;
  /**
   * The object identifier of the current versioned Key Vault Key in use.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly currentVersionedKeyIdentifier?: string;
  /**
   * Timestamp of last rotation of the Key Vault Key.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastKeyRotationTimestamp?: Date;
}

/** Network rule set */
export interface NetworkRuleSet {
  /** Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, "Logging, Metrics"), or None to bypass none of those traffics. */
  bypass?: Bypass;
  /** Sets the virtual network rules */
  virtualNetworkRules?: VirtualNetworkRule[];
  /** Sets the IP ACL rules */
  ipRules?: IPRule[];
  /** Specifies the default action of allow or deny when no other rules match. */
  defaultAction: DefaultAction;
}

/** Virtual Network rule. */
export interface VirtualNetworkRule {
  /** Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}. */
  virtualNetworkResourceId: string;
  /** The action of virtual network rule. */
  action?: "Allow";
  /** Gets the state of virtual network rule. */
  state?: State;
}

/** IP rule with specific IP or IP range in CIDR format. */
export interface IPRule {
  /** Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed. */
  iPAddressOrRange: string;
  /** The action of IP ACL rule. */
  action?: "Allow";
}

/** Settings for Azure Files identity based authentication. */
export interface AzureFilesIdentityBasedAuthentication {
  /** Indicates the directory service used. */
  directoryServiceOptions: DirectoryServiceOptions;
  /** Required if choose AD. */
  activeDirectoryProperties?: ActiveDirectoryProperties;
}

/** Settings properties for Active Directory (AD). */
export interface ActiveDirectoryProperties {
  /** Specifies the primary domain that the AD DNS server is authoritative for. */
  domainName: string;
  /** Specifies the NetBIOS domain name. */
  netBiosDomainName: string;
  /** Specifies the Active Directory forest to get. */
  forestName: string;
  /** Specifies the domain GUID. */
  domainGuid: string;
  /** Specifies the security identifier (SID). */
  domainSid: string;
  /** Specifies the security identifier (SID) for Azure Storage. */
  azureStorageSid: string;
}

/** Routing preference defines the type of network, either microsoft or internet routing to be used to deliver the user data, the default option is microsoft routing */
export interface RoutingPreference {
  /** Routing Choice defines the kind of network routing opted by the user. */
  routingChoice?: RoutingChoice;
  /** A boolean flag which indicates whether microsoft routing storage endpoints are to be published */
  publishMicrosoftEndpoints?: boolean;
  /** A boolean flag which indicates whether internet routing storage endpoints are to be published */
  publishInternetEndpoints?: boolean;
}

/** The URIs that are used to perform a retrieval of a public blob, queue, table, web or dfs object. */
export interface Endpoints {
  /**
   * Gets the blob endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly blob?: string;
  /**
   * Gets the queue endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly queue?: string;
  /**
   * Gets the table endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly table?: string;
  /**
   * Gets the file endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly file?: string;
  /**
   * Gets the web endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly web?: string;
  /**
   * Gets the dfs endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dfs?: string;
  /** Gets the microsoft routing storage endpoints. */
  microsoftEndpoints?: StorageAccountMicrosoftEndpoints;
  /** Gets the internet routing storage endpoints */
  internetEndpoints?: StorageAccountInternetEndpoints;
}

/** The URIs that are used to perform a retrieval of a public blob, queue, table, web or dfs object via a microsoft routing endpoint. */
export interface StorageAccountMicrosoftEndpoints {
  /**
   * Gets the blob endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly blob?: string;
  /**
   * Gets the queue endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly queue?: string;
  /**
   * Gets the table endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly table?: string;
  /**
   * Gets the file endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly file?: string;
  /**
   * Gets the web endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly web?: string;
  /**
   * Gets the dfs endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dfs?: string;
}

/** The URIs that are used to perform a retrieval of a public blob, file, web or dfs object via a internet routing endpoint. */
export interface StorageAccountInternetEndpoints {
  /**
   * Gets the blob endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly blob?: string;
  /**
   * Gets the file endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly file?: string;
  /**
   * Gets the web endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly web?: string;
  /**
   * Gets the dfs endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dfs?: string;
}

/** Statistics related to replication for storage account's Blob, Table, Queue and File services. It is only available when geo-redundant replication is enabled for the storage account. */
export interface GeoReplicationStats {
  /**
   * The status of the secondary location. Possible values are: - Live: Indicates that the secondary location is active and operational. - Bootstrap: Indicates initial synchronization from the primary location to the secondary location is in progress.This typically occurs when replication is first enabled. - Unavailable: Indicates that the secondary location is temporarily unavailable.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: GeoReplicationStatus;
  /**
   * All primary writes preceding this UTC date/time value are guaranteed to be available for read operations. Primary writes following this point in time may or may not be available for reads. Element may be default value if value of LastSyncTime is not available, this can happen if secondary is offline or we are in bootstrap.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastSyncTime?: Date;
  /**
   * A boolean flag which indicates whether or not account failover is supported for the account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly canFailover?: boolean;
}

/** The Private Endpoint resource. */
export interface PrivateEndpoint {
  /**
   * The ARM identifier for Private Endpoint
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
}

/** A collection of information about the state of the connection between service consumer and provider. */
export interface PrivateLinkServiceConnectionState {
  /** Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service. */
  status?: PrivateEndpointServiceConnectionStatus;
  /** The reason for approval/rejection of the connection. */
  description?: string;
  /** A message indicating if changes on the service provider require any updates on the consumer. */
  actionRequired?: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** Blob restore status. */
export interface BlobRestoreStatus {
  /**
   * The status of blob restore progress. Possible values are: - InProgress: Indicates that blob restore is ongoing. - Complete: Indicates that blob restore has been completed successfully. - Failed: Indicates that blob restore is failed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: BlobRestoreProgressStatus;
  /**
   * Failure reason when blob restore is failed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly failureReason?: string;
  /**
   * Id for tracking blob restore request.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly restoreId?: string;
  /**
   * Blob restore request parameters.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly parameters?: BlobRestoreParameters;
}

/** Blob restore parameters */
export interface BlobRestoreParameters {
  /** Restore blob to the specified time. */
  timeToRestore: Date;
  /** Blob ranges to restore. */
  blobRanges: BlobRestoreRange[];
}

/** Blob range */
export interface BlobRestoreRange {
  /** Blob start range. This is inclusive. Empty means account start. */
  startRange: string;
  /** Blob end range. This is exclusive. Empty means account end. */
  endRange: string;
}

/** The parameters that can be provided when updating the storage account properties. */
export interface StorageAccountUpdateParameters {
  /** Gets or sets the SKU name. Note that the SKU name cannot be updated to Standard_ZRS, Premium_LRS or Premium_ZRS, nor can accounts of those SKU names be updated to any other value. */
  sku?: Sku;
  /** Gets or sets a list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater in length than 128 characters and a value no greater in length than 256 characters. */
  tags?: { [propertyName: string]: string };
  /** The identity of the resource. */
  identity?: Identity;
  /** Optional. Indicates the type of storage account. Currently only StorageV2 value supported by server. */
  kind?: Kind;
  /** Custom domain assigned to the storage account by the user. Name is the CNAME source. Only one custom domain is supported per storage account at this time. To clear the existing custom domain, use an empty string for the custom domain name property. */
  customDomain?: CustomDomain;
  /** Provides the encryption settings on the account. The default setting is unencrypted. */
  encryption?: Encryption;
  /** Required for storage accounts where kind = BlobStorage. The access tier used for billing. */
  accessTier?: AccessTier;
  /** Provides the identity based authentication settings for Azure Files. */
  azureFilesIdentityBasedAuthentication?: AzureFilesIdentityBasedAuthentication;
  /** Allows https traffic only to storage service if sets to true. */
  enableHttpsTrafficOnly?: boolean;
  /** Network rule set */
  networkRuleSet?: NetworkRuleSet;
  /** Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled. */
  largeFileSharesState?: LargeFileSharesState;
  /** Maintains information about the network routing choice opted by the user for data transfer */
  routingPreference?: RoutingPreference;
  /** Allow or disallow public access to all blobs or containers in the storage account. The default interpretation is true for this property. */
  allowBlobPublicAccess?: boolean;
  /** Set the minimum TLS version to be permitted on requests to storage. The default interpretation is TLS 1.0 for this property. */
  minimumTlsVersion?: MinimumTlsVersion;
  /** Indicates whether the storage account permits requests to be authorized with the account access key via Shared Key. If false, then all requests, including shared access signatures, must be authorized with Azure Active Directory (Azure AD). The default value is null, which is equivalent to true. */
  allowSharedKeyAccess?: boolean;
}

/** The response from the List Storage Accounts operation. */
export interface StorageAccountListResult {
  /**
   * Gets the list of storage accounts and their properties.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: StorageAccount[];
  /**
   * Request URL that can be used to query next page of storage accounts. Returned when total number of requested storage accounts exceed maximum page size.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The response from the ListKeys operation. */
export interface StorageAccountListKeysResult {
  /**
   * Gets the list of storage account keys and their properties for the specified storage account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly keys?: StorageAccountKey[];
}

/** An access key for the storage account. */
export interface StorageAccountKey {
  /**
   * Name of the key.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly keyName?: string;
  /**
   * Base 64-encoded value of the key.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: string;
  /**
   * Permissions for the key -- read-only or full permissions.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly permissions?: KeyPermission;
}

/** The parameters used to regenerate the storage account key. */
export interface StorageAccountRegenerateKeyParameters {
  /** The name of storage keys that want to be regenerated, possible values are key1, key2, kerb1, kerb2. */
  keyName: string;
}

/** The response from the List Usages operation. */
export interface UsageListResult {
  /** Gets or sets the list of Storage Resource Usages. */
  value?: Usage[];
}

/** Describes Storage Resource Usage. */
export interface Usage {
  /**
   * Gets the unit of measurement.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly unit?: UsageUnit;
  /**
   * Gets the current count of the allocated resources in the subscription.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly currentValue?: number;
  /**
   * Gets the maximum count of the resources that can be allocated in the subscription.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly limit?: number;
  /**
   * Gets the name of the type of usage.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: UsageName;
}

/** The usage names that can be used; currently limited to StorageAccount. */
export interface UsageName {
  /**
   * Gets a string describing the resource name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: string;
  /**
   * Gets a localized string describing the resource name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly localizedValue?: string;
}

/** The parameters to list SAS credentials of a storage account. */
export interface AccountSasParameters {
  /** The signed services accessible with the account SAS. Possible values include: Blob (b), Queue (q), Table (t), File (f). */
  services: Services;
  /** The signed resource types that are accessible with the account SAS. Service (s): Access to service-level APIs; Container (c): Access to container-level APIs; Object (o): Access to object-level APIs for blobs, queue messages, table entities, and files. */
  resourceTypes: SignedResourceTypes;
  /** The signed permissions for the account SAS. Possible values include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p). */
  permissions: Permissions;
  /** An IP address or a range of IP addresses from which to accept requests. */
  iPAddressOrRange?: string;
  /** The protocol permitted for a request made with the account SAS. */
  protocols?: HttpProtocol;
  /** The time at which the SAS becomes valid. */
  sharedAccessStartTime?: Date;
  /** The time at which the shared access signature becomes invalid. */
  sharedAccessExpiryTime: Date;
  /** The key to sign the account SAS token with. */
  keyToSign?: string;
}

/** The List SAS credentials operation response. */
export interface ListAccountSasResponse {
  /**
   * List SAS credentials of storage account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly accountSasToken?: string;
}

/** The parameters to list service SAS credentials of a specific resource. */
export interface ServiceSasParameters {
  /** The canonical path to the signed resource. */
  canonicalizedResource: string;
  /** The signed services accessible with the service SAS. Possible values include: Blob (b), Container (c), File (f), Share (s). */
  resource?: SignedResource;
  /** The signed permissions for the service SAS. Possible values include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p). */
  permissions?: Permissions;
  /** An IP address or a range of IP addresses from which to accept requests. */
  iPAddressOrRange?: string;
  /** The protocol permitted for a request made with the account SAS. */
  protocols?: HttpProtocol;
  /** The time at which the SAS becomes valid. */
  sharedAccessStartTime?: Date;
  /** The time at which the shared access signature becomes invalid. */
  sharedAccessExpiryTime?: Date;
  /** A unique value up to 64 characters in length that correlates to an access policy specified for the container, queue, or table. */
  identifier?: string;
  /** The start of partition key. */
  partitionKeyStart?: string;
  /** The end of partition key. */
  partitionKeyEnd?: string;
  /** The start of row key. */
  rowKeyStart?: string;
  /** The end of row key. */
  rowKeyEnd?: string;
  /** The key to sign the account SAS token with. */
  keyToSign?: string;
  /** The response header override for cache control. */
  cacheControl?: string;
  /** The response header override for content disposition. */
  contentDisposition?: string;
  /** The response header override for content encoding. */
  contentEncoding?: string;
  /** The response header override for content language. */
  contentLanguage?: string;
  /** The response header override for content type. */
  contentType?: string;
}

/** The List service SAS credentials operation response. */
export interface ListServiceSasResponse {
  /**
   * List service SAS credentials of specific resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly serviceSasToken?: string;
}

/** The Storage Account ManagementPolicies Rules. See more details in: https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts. */
export interface ManagementPolicySchema {
  /** The Storage Account ManagementPolicies Rules. See more details in: https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts. */
  rules: ManagementPolicyRule[];
}

/** An object that wraps the Lifecycle rule. Each rule is uniquely defined by name. */
export interface ManagementPolicyRule {
  /** Rule is enabled if set to true. */
  enabled?: boolean;
  /** A rule name can contain any combination of alpha numeric characters. Rule name is case-sensitive. It must be unique within a policy. */
  name: string;
  /** The valid value is Lifecycle */
  type: RuleType;
  /** An object that defines the Lifecycle rule. */
  definition: ManagementPolicyDefinition;
}

/** An object that defines the Lifecycle rule. Each definition is made up with a filters set and an actions set. */
export interface ManagementPolicyDefinition {
  /** An object that defines the action set. */
  actions: ManagementPolicyAction;
  /** An object that defines the filter set. */
  filters?: ManagementPolicyFilter;
}

/** Actions are applied to the filtered blobs when the execution condition is met. */
export interface ManagementPolicyAction {
  /** The management policy action for base blob */
  baseBlob?: ManagementPolicyBaseBlob;
  /** The management policy action for snapshot */
  snapshot?: ManagementPolicySnapShot;
  /** The management policy action for version */
  version?: ManagementPolicyVersion;
}

/** Management policy action for base blob. */
export interface ManagementPolicyBaseBlob {
  /** The function to tier blobs to cool storage. Support blobs currently at Hot tier */
  tierToCool?: DateAfterModification;
  /** The function to tier blobs to archive storage. Support blobs currently at Hot or Cool tier */
  tierToArchive?: DateAfterModification;
  /** The function to delete the blob */
  delete?: DateAfterModification;
  /** This property enables auto tiering of a blob from cool to hot on a blob access. This property requires tierToCool.daysAfterLastAccessTimeGreaterThan. */
  enableAutoTierToHotFromCool?: boolean;
}

/** Object to define the number of days after object last modification Or last access. Properties daysAfterModificationGreaterThan and daysAfterLastAccessTimeGreaterThan are mutually exclusive. */
export interface DateAfterModification {
  /** Value indicating the age in days after last modification */
  daysAfterModificationGreaterThan?: number;
  /** Value indicating the age in days after last blob access. This property can only be used in conjunction with last access time tracking policy */
  daysAfterLastAccessTimeGreaterThan?: number;
}

/** Management policy action for snapshot. */
export interface ManagementPolicySnapShot {
  /** The function to tier blob snapshot to cool storage. Support blob snapshot currently at Hot tier */
  tierToCool?: DateAfterCreation;
  /** The function to tier blob snapshot to archive storage. Support blob snapshot currently at Hot or Cool tier */
  tierToArchive?: DateAfterCreation;
  /** The function to delete the blob snapshot */
  delete?: DateAfterCreation;
}

/** Object to define the number of days after creation. */
export interface DateAfterCreation {
  /** Value indicating the age in days after creation */
  daysAfterCreationGreaterThan: number;
}

/** Management policy action for blob version. */
export interface ManagementPolicyVersion {
  /** The function to tier blob version to cool storage. Support blob version currently at Hot tier */
  tierToCool?: DateAfterCreation;
  /** The function to tier blob version to archive storage. Support blob version currently at Hot or Cool tier */
  tierToArchive?: DateAfterCreation;
  /** The function to delete the blob version */
  delete?: DateAfterCreation;
}

/** Filters limit rule actions to a subset of blobs within the storage account. If multiple filters are defined, a logical AND is performed on all filters. */
export interface ManagementPolicyFilter {
  /** An array of strings for prefixes to be match. */
  prefixMatch?: string[];
  /** An array of predefined enum values. Currently blockBlob supports all tiering and delete actions. Only delete actions are supported for appendBlob. */
  blobTypes: string[];
  /** An array of blob index tag based filters, there can be at most 10 tag filters */
  blobIndexMatch?: TagFilter[];
}

/** Blob index tag based filtering for blob objects */
export interface TagFilter {
  /** This is the filter tag name, it can have 1 - 128 characters */
  name: string;
  /** This is the comparison operator which is used for object comparison and filtering. Only == (equality operator) is currently supported */
  op: string;
  /** This is the filter tag value field used for tag based filtering, it can have 0 - 256 characters */
  value: string;
}

/** The storage account blob inventory policy rules. */
export interface BlobInventoryPolicySchema {
  /** Policy is enabled if set to true. */
  enabled: boolean;
  /** Container name where blob inventory files are stored. Must be pre-created. */
  destination: string;
  /** The valid value is Inventory */
  type: InventoryRuleType;
  /** The storage account blob inventory policy rules. The rule is applied when it is enabled. */
  rules: BlobInventoryPolicyRule[];
}

/** An object that wraps the blob inventory rule. Each rule is uniquely defined by name. */
export interface BlobInventoryPolicyRule {
  /** Rule is enabled when set to true. */
  enabled: boolean;
  /** A rule name can contain any combination of alpha numeric characters. Rule name is case-sensitive. It must be unique within a policy. */
  name: string;
  /** An object that defines the blob inventory policy rule. */
  definition: BlobInventoryPolicyDefinition;
}

/** An object that defines the blob inventory rule. Each definition consists of a set of filters. */
export interface BlobInventoryPolicyDefinition {
  /** An object that defines the filter set. */
  filters: BlobInventoryPolicyFilter;
}

/** An object that defines the blob inventory rule filter conditions. */
export interface BlobInventoryPolicyFilter {
  /** An array of strings for blob prefixes to be matched. */
  prefixMatch?: string[];
  /** An array of predefined enum values. Valid values include blockBlob, appendBlob, pageBlob. Hns accounts does not support pageBlobs. */
  blobTypes: string[];
  /** Includes blob versions in blob inventory when value set to true. */
  includeBlobVersions?: boolean;
  /** Includes blob snapshots in blob inventory when value set to true. */
  includeSnapshots?: boolean;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** An error response from the storage resource provider. */
export interface ErrorResponse {
  /** Azure Storage Resource Provider error response body. */
  error?: ErrorResponseBody;
}

/** Error response body contract. */
export interface ErrorResponseBody {
  /** An identifier for the error. Codes are invariant and are intended to be consumed programmatically. */
  code?: string;
  /** A message describing the error, intended to be suitable for display in a user interface. */
  message?: string;
}

/** List of blob inventory policies returned. */
export interface ListBlobInventoryPolicy {
  /**
   * List of blob inventory policies.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: BlobInventoryPolicy[];
}

/** List of private endpoint connection associated with the specified storage account */
export interface PrivateEndpointConnectionListResult {
  /** Array of private endpoint connections */
  value?: PrivateEndpointConnection[];
}

/** A list of private link resources */
export interface PrivateLinkResourceListResult {
  /** Array of private link resources */
  value?: PrivateLinkResource[];
}

/** List storage account object replication policies. */
export interface ObjectReplicationPolicies {
  /** The replication policy between two storage accounts. */
  value?: ObjectReplicationPolicy[];
}

/** The replication policy rule between two containers. */
export interface ObjectReplicationPolicyRule {
  /** Rule Id is auto-generated for each new rule on destination account. It is required for put policy on source account. */
  ruleId?: string;
  /** Required. Source container name. */
  sourceContainer: string;
  /** Required. Destination container name. */
  destinationContainer: string;
  /** Optional. An object that defines the filter set. */
  filters?: ObjectReplicationPolicyFilter;
}

/** Filters limit replication to a subset of blobs within the storage account. A logical OR is performed on values in the filter. If multiple filters are defined, a logical AND is performed on all filters. */
export interface ObjectReplicationPolicyFilter {
  /** Optional. Filters the results to replicate only blobs whose names begin with the specified prefix. */
  prefixMatch?: string[];
  /** Blobs created after the time will be replicated to the destination. It must be in datetime format 'yyyy-MM-ddTHH:mm:ssZ'. Example: 2020-02-19T16:05:00Z */
  minCreationTime?: string;
}

/** The key vault properties for the encryption scope. This is a required field if encryption scope 'source' attribute is set to 'Microsoft.KeyVault'. */
export interface EncryptionScopeKeyVaultProperties {
  /** The object identifier for a key vault key object. When applied, the encryption scope will use the key referenced by the identifier to enable customer-managed key support on this encryption scope. */
  keyUri?: string;
}

/** List of encryption scopes requested, and if paging is required, a URL to the next page of encryption scopes. */
export interface EncryptionScopeListResult {
  /**
   * List of encryption scopes requested.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: EncryptionScope[];
  /**
   * Request URL that can be used to query next page of encryption scopes. Returned when total number of requested encryption scopes exceeds the maximum page size.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The Private Endpoint Connection resource. */
export interface PrivateEndpointConnection extends Resource {
  /** The resource of private end point. */
  privateEndpoint?: PrivateEndpoint;
  /** A collection of information about the state of the connection between service consumer and provider. */
  privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
  /**
   * The provisioning state of the private endpoint connection resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: PrivateEndpointConnectionProvisioningState;
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export interface TrackedResource extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
}

/** The Get Storage Account ManagementPolicies operation response. */
export interface ManagementPolicy extends Resource {
  /**
   * Returns the date and time the ManagementPolicies was last modified.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedTime?: Date;
  /** The Storage Account ManagementPolicy, in JSON format. See more details in: https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts. */
  policy?: ManagementPolicySchema;
}

/** The storage account blob inventory policy. */
export interface BlobInventoryPolicy extends Resource {
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /**
   * Returns the last modified date and time of the blob inventory policy.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedTime?: Date;
  /** The storage account blob inventory policy object. It is composed of policy rules. */
  policy?: BlobInventoryPolicySchema;
}

/** A private link resource */
export interface PrivateLinkResource extends Resource {
  /**
   * The private link resource group id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly groupId?: string;
  /**
   * The private link resource required member names.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly requiredMembers?: string[];
  /** The private link resource Private link DNS zone name. */
  requiredZoneNames?: string[];
}

/** The replication policy between two storage accounts. Multiple rules can be defined in one policy. */
export interface ObjectReplicationPolicy extends Resource {
  /**
   * A unique id for object replication policy.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly policyId?: string;
  /**
   * Indicates when the policy is enabled on the source account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly enabledTime?: Date;
  /** Required. Source account name. */
  sourceAccount?: string;
  /** Required. Destination account name. */
  destinationAccount?: string;
  /** The storage account object replication rules. */
  rules?: ObjectReplicationPolicyRule[];
}

/** The Encryption Scope resource. */
export interface EncryptionScope extends Resource {
  /** The provider for the encryption scope. Possible values (case-insensitive):  Microsoft.Storage, Microsoft.KeyVault. */
  source?: EncryptionScopeSource;
  /** The state of the encryption scope. Possible values (case-insensitive):  Enabled, Disabled. */
  state?: EncryptionScopeState;
  /**
   * Gets the creation date and time of the encryption scope in UTC.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly creationTime?: Date;
  /**
   * Gets the last modification date and time of the encryption scope in UTC.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedTime?: Date;
  /** The key vault properties for the encryption scope. This is a required field if encryption scope 'source' attribute is set to 'Microsoft.KeyVault'. */
  keyVaultProperties?: EncryptionScopeKeyVaultProperties;
}

/** The storage account. */
export interface StorageAccount extends TrackedResource {
  /**
   * Gets the SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sku?: Sku;
  /**
   * Gets the Kind.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly kind?: Kind;
  /** The identity of the resource. */
  identity?: Identity;
  /**
   * Gets the status of the storage account at the time the operation was called.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Gets the URLs that are used to perform a retrieval of a public blob, queue, or table object. Note that Standard_ZRS and Premium_LRS accounts only return the blob endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly primaryEndpoints?: Endpoints;
  /**
   * Gets the location of the primary data center for the storage account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly primaryLocation?: string;
  /**
   * Gets the status indicating whether the primary location of the storage account is available or unavailable.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusOfPrimary?: AccountStatus;
  /**
   * Gets the timestamp of the most recent instance of a failover to the secondary location. Only the most recent timestamp is retained. This element is not returned if there has never been a failover instance. Only available if the accountType is Standard_GRS or Standard_RAGRS.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastGeoFailoverTime?: Date;
  /**
   * Gets the location of the geo-replicated secondary for the storage account. Only available if the accountType is Standard_GRS or Standard_RAGRS.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly secondaryLocation?: string;
  /**
   * Gets the status indicating whether the secondary location of the storage account is available or unavailable. Only available if the SKU name is Standard_GRS or Standard_RAGRS.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusOfSecondary?: AccountStatus;
  /**
   * Gets the creation date and time of the storage account in UTC.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly creationTime?: Date;
  /**
   * Gets the custom domain the user assigned to this storage account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly customDomain?: CustomDomain;
  /**
   * Gets the URLs that are used to perform a retrieval of a public blob, queue, or table object from the secondary location of the storage account. Only available if the SKU name is Standard_RAGRS.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly secondaryEndpoints?: Endpoints;
  /**
   * Gets the encryption settings on the account. If unspecified, the account is unencrypted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly encryption?: Encryption;
  /**
   * Required for storage accounts where kind = BlobStorage. The access tier used for billing.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly accessTier?: AccessTier;
  /** Provides the identity based authentication settings for Azure Files. */
  azureFilesIdentityBasedAuthentication?: AzureFilesIdentityBasedAuthentication;
  /** Allows https traffic only to storage service if sets to true. */
  enableHttpsTrafficOnly?: boolean;
  /**
   * Network rule set
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkRuleSet?: NetworkRuleSet;
  /** Account HierarchicalNamespace enabled if sets to true. */
  isHnsEnabled?: boolean;
  /**
   * Geo Replication Stats
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly geoReplicationStats?: GeoReplicationStats;
  /**
   * If the failover is in progress, the value will be true, otherwise, it will be null.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly failoverInProgress?: boolean;
  /** Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled. */
  largeFileSharesState?: LargeFileSharesState;
  /**
   * List of private endpoint connection associated with the specified storage account
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly privateEndpointConnections?: PrivateEndpointConnection[];
  /** Maintains information about the network routing choice opted by the user for data transfer */
  routingPreference?: RoutingPreference;
  /**
   * Blob restore status
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly blobRestoreStatus?: BlobRestoreStatus;
  /** Allow or disallow public access to all blobs or containers in the storage account. The default interpretation is true for this property. */
  allowBlobPublicAccess?: boolean;
  /** Set the minimum TLS version to be permitted on requests to storage. The default interpretation is TLS 1.0 for this property. */
  minimumTlsVersion?: MinimumTlsVersion;
  /** Indicates whether the storage account permits requests to be authorized with the account access key via Shared Key. If false, then all requests, including shared access signatures, must be authorized with Azure Active Directory (Azure AD). The default value is null, which is equivalent to true. */
  allowSharedKeyAccess?: boolean;
}

/** Known values of {@link SkuName} that the service accepts. */
export enum KnownSkuName {
  /** StandardLRS */
  StandardLRS = "Standard_LRS",
  /** StandardGRS */
  StandardGRS = "Standard_GRS",
  /** StandardRagrs */
  StandardRagrs = "Standard_RAGRS",
  /** StandardZRS */
  StandardZRS = "Standard_ZRS",
  /** PremiumLRS */
  PremiumLRS = "Premium_LRS",
  /** PremiumZRS */
  PremiumZRS = "Premium_ZRS",
  /** StandardGzrs */
  StandardGzrs = "Standard_GZRS",
  /** StandardRagzrs */
  StandardRagzrs = "Standard_RAGZRS"
}

/**
 * Defines values for SkuName. \
 * {@link KnownSkuName} can be used interchangeably with SkuName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard_LRS** \
 * **Standard_GRS** \
 * **Standard_RAGRS** \
 * **Standard_ZRS** \
 * **Premium_LRS** \
 * **Premium_ZRS** \
 * **Standard_GZRS** \
 * **Standard_RAGZRS**
 */
export type SkuName = string;

/** Known values of {@link Kind} that the service accepts. */
export enum KnownKind {
  /** Storage */
  Storage = "Storage",
  /** StorageV2 */
  StorageV2 = "StorageV2",
  /** BlobStorage */
  BlobStorage = "BlobStorage",
  /** FileStorage */
  FileStorage = "FileStorage",
  /** BlockBlobStorage */
  BlockBlobStorage = "BlockBlobStorage"
}

/**
 * Defines values for Kind. \
 * {@link KnownKind} can be used interchangeably with Kind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Storage** \
 * **StorageV2** \
 * **BlobStorage** \
 * **FileStorage** \
 * **BlockBlobStorage**
 */
export type Kind = string;

/** Known values of {@link ReasonCode} that the service accepts. */
export enum KnownReasonCode {
  /** QuotaId */
  QuotaId = "QuotaId",
  /** NotAvailableForSubscription */
  NotAvailableForSubscription = "NotAvailableForSubscription"
}

/**
 * Defines values for ReasonCode. \
 * {@link KnownReasonCode} can be used interchangeably with ReasonCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **QuotaId** \
 * **NotAvailableForSubscription**
 */
export type ReasonCode = string;

/** Known values of {@link KeyType} that the service accepts. */
export enum KnownKeyType {
  /** Service */
  Service = "Service",
  /** Account */
  Account = "Account"
}

/**
 * Defines values for KeyType. \
 * {@link KnownKeyType} can be used interchangeably with KeyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Service** \
 * **Account**
 */
export type KeyType = string;

/** Known values of {@link KeySource} that the service accepts. */
export enum KnownKeySource {
  /** MicrosoftStorage */
  MicrosoftStorage = "Microsoft.Storage",
  /** MicrosoftKeyvault */
  MicrosoftKeyvault = "Microsoft.Keyvault"
}

/**
 * Defines values for KeySource. \
 * {@link KnownKeySource} can be used interchangeably with KeySource,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Microsoft.Storage** \
 * **Microsoft.Keyvault**
 */
export type KeySource = string;

/** Known values of {@link Bypass} that the service accepts. */
export enum KnownBypass {
  /** None */
  None = "None",
  /** Logging */
  Logging = "Logging",
  /** Metrics */
  Metrics = "Metrics",
  /** AzureServices */
  AzureServices = "AzureServices"
}

/**
 * Defines values for Bypass. \
 * {@link KnownBypass} can be used interchangeably with Bypass,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Logging** \
 * **Metrics** \
 * **AzureServices**
 */
export type Bypass = string;

/** Known values of {@link DirectoryServiceOptions} that the service accepts. */
export enum KnownDirectoryServiceOptions {
  /** None */
  None = "None",
  /** Aadds */
  Aadds = "AADDS",
  /** AD */
  AD = "AD"
}

/**
 * Defines values for DirectoryServiceOptions. \
 * {@link KnownDirectoryServiceOptions} can be used interchangeably with DirectoryServiceOptions,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **AADDS** \
 * **AD**
 */
export type DirectoryServiceOptions = string;

/** Known values of {@link LargeFileSharesState} that the service accepts. */
export enum KnownLargeFileSharesState {
  /** Disabled */
  Disabled = "Disabled",
  /** Enabled */
  Enabled = "Enabled"
}

/**
 * Defines values for LargeFileSharesState. \
 * {@link KnownLargeFileSharesState} can be used interchangeably with LargeFileSharesState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **Enabled**
 */
export type LargeFileSharesState = string;

/** Known values of {@link RoutingChoice} that the service accepts. */
export enum KnownRoutingChoice {
  /** MicrosoftRouting */
  MicrosoftRouting = "MicrosoftRouting",
  /** InternetRouting */
  InternetRouting = "InternetRouting"
}

/**
 * Defines values for RoutingChoice. \
 * {@link KnownRoutingChoice} can be used interchangeably with RoutingChoice,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **MicrosoftRouting** \
 * **InternetRouting**
 */
export type RoutingChoice = string;

/** Known values of {@link MinimumTlsVersion} that the service accepts. */
export enum KnownMinimumTlsVersion {
  /** TLS10 */
  TLS10 = "TLS1_0",
  /** TLS11 */
  TLS11 = "TLS1_1",
  /** TLS12 */
  TLS12 = "TLS1_2"
}

/**
 * Defines values for MinimumTlsVersion. \
 * {@link KnownMinimumTlsVersion} can be used interchangeably with MinimumTlsVersion,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **TLS1_0** \
 * **TLS1_1** \
 * **TLS1_2**
 */
export type MinimumTlsVersion = string;

/** Known values of {@link GeoReplicationStatus} that the service accepts. */
export enum KnownGeoReplicationStatus {
  /** Live */
  Live = "Live",
  /** Bootstrap */
  Bootstrap = "Bootstrap",
  /** Unavailable */
  Unavailable = "Unavailable"
}

/**
 * Defines values for GeoReplicationStatus. \
 * {@link KnownGeoReplicationStatus} can be used interchangeably with GeoReplicationStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Live** \
 * **Bootstrap** \
 * **Unavailable**
 */
export type GeoReplicationStatus = string;

/** Known values of {@link PrivateEndpointServiceConnectionStatus} that the service accepts. */
export enum KnownPrivateEndpointServiceConnectionStatus {
  /** Pending */
  Pending = "Pending",
  /** Approved */
  Approved = "Approved",
  /** Rejected */
  Rejected = "Rejected"
}

/**
 * Defines values for PrivateEndpointServiceConnectionStatus. \
 * {@link KnownPrivateEndpointServiceConnectionStatus} can be used interchangeably with PrivateEndpointServiceConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Approved** \
 * **Rejected**
 */
export type PrivateEndpointServiceConnectionStatus = string;

/** Known values of {@link PrivateEndpointConnectionProvisioningState} that the service accepts. */
export enum KnownPrivateEndpointConnectionProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Creating */
  Creating = "Creating",
  /** Deleting */
  Deleting = "Deleting",
  /** Failed */
  Failed = "Failed"
}

/**
 * Defines values for PrivateEndpointConnectionProvisioningState. \
 * {@link KnownPrivateEndpointConnectionProvisioningState} can be used interchangeably with PrivateEndpointConnectionProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Creating** \
 * **Deleting** \
 * **Failed**
 */
export type PrivateEndpointConnectionProvisioningState = string;

/** Known values of {@link BlobRestoreProgressStatus} that the service accepts. */
export enum KnownBlobRestoreProgressStatus {
  /** InProgress */
  InProgress = "InProgress",
  /** Complete */
  Complete = "Complete",
  /** Failed */
  Failed = "Failed"
}

/**
 * Defines values for BlobRestoreProgressStatus. \
 * {@link KnownBlobRestoreProgressStatus} can be used interchangeably with BlobRestoreProgressStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **InProgress** \
 * **Complete** \
 * **Failed**
 */
export type BlobRestoreProgressStatus = string;

/** Known values of {@link Services} that the service accepts. */
export enum KnownServices {
  /** B */
  B = "b",
  /** Q */
  Q = "q",
  /** T */
  T = "t",
  /** F */
  F = "f"
}

/**
 * Defines values for Services. \
 * {@link KnownServices} can be used interchangeably with Services,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **b** \
 * **q** \
 * **t** \
 * **f**
 */
export type Services = string;

/** Known values of {@link SignedResourceTypes} that the service accepts. */
export enum KnownSignedResourceTypes {
  /** S */
  S = "s",
  /** C */
  C = "c",
  /** O */
  O = "o"
}

/**
 * Defines values for SignedResourceTypes. \
 * {@link KnownSignedResourceTypes} can be used interchangeably with SignedResourceTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **s** \
 * **c** \
 * **o**
 */
export type SignedResourceTypes = string;

/** Known values of {@link Permissions} that the service accepts. */
export enum KnownPermissions {
  /** R */
  R = "r",
  /** D */
  D = "d",
  /** W */
  W = "w",
  /** L */
  L = "l",
  /** A */
  A = "a",
  /** C */
  C = "c",
  /** U */
  U = "u",
  /** P */
  P = "p"
}

/**
 * Defines values for Permissions. \
 * {@link KnownPermissions} can be used interchangeably with Permissions,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **r** \
 * **d** \
 * **w** \
 * **l** \
 * **a** \
 * **c** \
 * **u** \
 * **p**
 */
export type Permissions = string;

/** Known values of {@link SignedResource} that the service accepts. */
export enum KnownSignedResource {
  /** B */
  B = "b",
  /** C */
  C = "c",
  /** F */
  F = "f",
  /** S */
  S = "s"
}

/**
 * Defines values for SignedResource. \
 * {@link KnownSignedResource} can be used interchangeably with SignedResource,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **b** \
 * **c** \
 * **f** \
 * **s**
 */
export type SignedResource = string;

/** Known values of {@link ManagementPolicyName} that the service accepts. */
export enum KnownManagementPolicyName {
  /** Default */
  Default = "default"
}

/**
 * Defines values for ManagementPolicyName. \
 * {@link KnownManagementPolicyName} can be used interchangeably with ManagementPolicyName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **default**
 */
export type ManagementPolicyName = string;

/** Known values of {@link RuleType} that the service accepts. */
export enum KnownRuleType {
  /** Lifecycle */
  Lifecycle = "Lifecycle"
}

/**
 * Defines values for RuleType. \
 * {@link KnownRuleType} can be used interchangeably with RuleType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Lifecycle**
 */
export type RuleType = string;

/** Known values of {@link BlobInventoryPolicyName} that the service accepts. */
export enum KnownBlobInventoryPolicyName {
  /** Default */
  Default = "default"
}

/**
 * Defines values for BlobInventoryPolicyName. \
 * {@link KnownBlobInventoryPolicyName} can be used interchangeably with BlobInventoryPolicyName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **default**
 */
export type BlobInventoryPolicyName = string;

/** Known values of {@link InventoryRuleType} that the service accepts. */
export enum KnownInventoryRuleType {
  /** Inventory */
  Inventory = "Inventory"
}

/**
 * Defines values for InventoryRuleType. \
 * {@link KnownInventoryRuleType} can be used interchangeably with InventoryRuleType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Inventory**
 */
export type InventoryRuleType = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link EncryptionScopeSource} that the service accepts. */
export enum KnownEncryptionScopeSource {
  /** MicrosoftStorage */
  MicrosoftStorage = "Microsoft.Storage",
  /** MicrosoftKeyVault */
  MicrosoftKeyVault = "Microsoft.KeyVault"
}

/**
 * Defines values for EncryptionScopeSource. \
 * {@link KnownEncryptionScopeSource} can be used interchangeably with EncryptionScopeSource,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Microsoft.Storage** \
 * **Microsoft.KeyVault**
 */
export type EncryptionScopeSource = string;

/** Known values of {@link EncryptionScopeState} that the service accepts. */
export enum KnownEncryptionScopeState {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled"
}

/**
 * Defines values for EncryptionScopeState. \
 * {@link KnownEncryptionScopeState} can be used interchangeably with EncryptionScopeState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type EncryptionScopeState = string;
/** Defines values for SkuTier. */
export type SkuTier = "Standard" | "Premium";
/** Defines values for Reason. */
export type Reason = "AccountNameInvalid" | "AlreadyExists";
/** Defines values for State. */
export type State =
  | "provisioning"
  | "deprovisioning"
  | "succeeded"
  | "failed"
  | "networkSourceDeleted";
/** Defines values for DefaultAction. */
export type DefaultAction = "Allow" | "Deny";
/** Defines values for AccessTier. */
export type AccessTier = "Hot" | "Cool";
/** Defines values for ProvisioningState. */
export type ProvisioningState = "Creating" | "ResolvingDNS" | "Succeeded";
/** Defines values for AccountStatus. */
export type AccountStatus = "available" | "unavailable";
/** Defines values for StorageAccountExpand. */
export type StorageAccountExpand = "geoReplicationStats" | "blobRestoreStatus";
/** Defines values for KeyPermission. */
export type KeyPermission = "Read" | "Full";
/** Defines values for UsageUnit. */
export type UsageUnit =
  | "Count"
  | "Bytes"
  | "Seconds"
  | "Percent"
  | "CountsPerSecond"
  | "BytesPerSecond";
/** Defines values for HttpProtocol. */
export type HttpProtocol = "https,http" | "https";

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface SkusListOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type SkusListResponse = StorageSkuListResult;

/** Optional parameters. */
export interface StorageAccountsCheckNameAvailabilityOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the checkNameAvailability operation. */
export type StorageAccountsCheckNameAvailabilityResponse = CheckNameAvailabilityResult;

/** Optional parameters. */
export interface StorageAccountsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type StorageAccountsCreateResponse = StorageAccount;

/** Optional parameters. */
export interface StorageAccountsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface StorageAccountsGetPropertiesOptionalParams
  extends coreClient.OperationOptions {
  /** May be used to expand the properties within account's properties. By default, data is not included when fetching properties. Currently we only support geoReplicationStats and blobRestoreStatus. */
  expand?: StorageAccountExpand;
}

/** Contains response data for the getProperties operation. */
export type StorageAccountsGetPropertiesResponse = StorageAccount;

/** Optional parameters. */
export interface StorageAccountsUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type StorageAccountsUpdateResponse = StorageAccount;

/** Optional parameters. */
export interface StorageAccountsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type StorageAccountsListResponse = StorageAccountListResult;

/** Optional parameters. */
export interface StorageAccountsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type StorageAccountsListByResourceGroupResponse = StorageAccountListResult;

/** Optional parameters. */
export interface StorageAccountsListKeysOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listKeys operation. */
export type StorageAccountsListKeysResponse = StorageAccountListKeysResult;

/** Optional parameters. */
export interface StorageAccountsRegenerateKeyOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the regenerateKey operation. */
export type StorageAccountsRegenerateKeyResponse = StorageAccountListKeysResult;

/** Optional parameters. */
export interface StorageAccountsListAccountSASOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listAccountSAS operation. */
export type StorageAccountsListAccountSASResponse = ListAccountSasResponse;

/** Optional parameters. */
export interface StorageAccountsListServiceSASOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listServiceSAS operation. */
export type StorageAccountsListServiceSASResponse = ListServiceSasResponse;

/** Optional parameters. */
export interface StorageAccountsFailoverOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface StorageAccountsRestoreBlobRangesOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the restoreBlobRanges operation. */
export type StorageAccountsRestoreBlobRangesResponse = BlobRestoreStatus;

/** Optional parameters. */
export interface StorageAccountsRevokeUserDelegationKeysOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface StorageAccountsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type StorageAccountsListNextResponse = StorageAccountListResult;

/** Optional parameters. */
export interface UsagesListByLocationOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByLocation operation. */
export type UsagesListByLocationResponse = UsageListResult;

/** Optional parameters. */
export interface ManagementPoliciesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ManagementPoliciesGetResponse = ManagementPolicy;

/** Optional parameters. */
export interface ManagementPoliciesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type ManagementPoliciesCreateOrUpdateResponse = ManagementPolicy;

/** Optional parameters. */
export interface ManagementPoliciesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface BlobInventoryPoliciesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type BlobInventoryPoliciesGetResponse = BlobInventoryPolicy;

/** Optional parameters. */
export interface BlobInventoryPoliciesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type BlobInventoryPoliciesCreateOrUpdateResponse = BlobInventoryPolicy;

/** Optional parameters. */
export interface BlobInventoryPoliciesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface BlobInventoryPoliciesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type BlobInventoryPoliciesListResponse = ListBlobInventoryPolicy;

/** Optional parameters. */
export interface PrivateEndpointConnectionsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type PrivateEndpointConnectionsListResponse = PrivateEndpointConnectionListResult;

/** Optional parameters. */
export interface PrivateEndpointConnectionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PrivateEndpointConnectionsGetResponse = PrivateEndpointConnection;

/** Optional parameters. */
export interface PrivateEndpointConnectionsPutOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the put operation. */
export type PrivateEndpointConnectionsPutResponse = PrivateEndpointConnection;

/** Optional parameters. */
export interface PrivateEndpointConnectionsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface PrivateLinkResourcesListByStorageAccountOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByStorageAccount operation. */
export type PrivateLinkResourcesListByStorageAccountResponse = PrivateLinkResourceListResult;

/** Optional parameters. */
export interface ObjectReplicationPoliciesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ObjectReplicationPoliciesListResponse = ObjectReplicationPolicies;

/** Optional parameters. */
export interface ObjectReplicationPoliciesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ObjectReplicationPoliciesGetResponse = ObjectReplicationPolicy;

/** Optional parameters. */
export interface ObjectReplicationPoliciesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type ObjectReplicationPoliciesCreateOrUpdateResponse = ObjectReplicationPolicy;

/** Optional parameters. */
export interface ObjectReplicationPoliciesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface EncryptionScopesPutOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the put operation. */
export type EncryptionScopesPutResponse = EncryptionScope;

/** Optional parameters. */
export interface EncryptionScopesPatchOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the patch operation. */
export type EncryptionScopesPatchResponse = EncryptionScope;

/** Optional parameters. */
export interface EncryptionScopesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type EncryptionScopesGetResponse = EncryptionScope;

/** Optional parameters. */
export interface EncryptionScopesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type EncryptionScopesListResponse = EncryptionScopeListResult;

/** Optional parameters. */
export interface EncryptionScopesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type EncryptionScopesListNextResponse = EncryptionScopeListResult;

/** Optional parameters. */
export interface StorageManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
