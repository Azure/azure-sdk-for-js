/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { StorageClientContext } from "../storageClientContext";
import {
  QueueCreateOptionalParams,
  QueueCreateResponse,
  QueueDeleteOptionalParams,
  QueueDeleteResponse,
  QueueGetPropertiesOptionalParams,
  QueueGetPropertiesResponse,
  QueueSetMetadataOptionalParams,
  QueueSetMetadataResponse,
  QueueGetAccessPolicyOptionalParams,
  QueueGetAccessPolicyResponse,
  QueueSetAccessPolicyOptionalParams,
  QueueSetAccessPolicyResponse
} from "../models";

/** Class representing a Queue. */
export class Queue {
  private readonly client: StorageClientContext;

  /**
   * Initialize a new instance of the class Queue class.
   * @param client Reference to the service client
   */
  constructor(client: StorageClientContext) {
    this.client = client;
  }

  /**
   * creates a new queue under the given account.
   * @param options The options parameters.
   */
  create(options?: QueueCreateOptionalParams): Promise<QueueCreateResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      createOperationSpec
    ) as Promise<QueueCreateResponse>;
  }

  /**
   * operation permanently deletes the specified queue
   * @param options The options parameters.
   */
  delete(options?: QueueDeleteOptionalParams): Promise<QueueDeleteResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      deleteOperationSpec
    ) as Promise<QueueDeleteResponse>;
  }

  /**
   * Retrieves user-defined metadata and queue properties on the specified queue. Metadata is associated
   * with the queue as name-values pairs.
   * @param options The options parameters.
   */
  getProperties(
    options?: QueueGetPropertiesOptionalParams
  ): Promise<QueueGetPropertiesResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getPropertiesOperationSpec
    ) as Promise<QueueGetPropertiesResponse>;
  }

  /**
   * sets user-defined metadata on the specified queue. Metadata is associated with the queue as
   * name-value pairs.
   * @param options The options parameters.
   */
  setMetadata(
    options?: QueueSetMetadataOptionalParams
  ): Promise<QueueSetMetadataResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      setMetadataOperationSpec
    ) as Promise<QueueSetMetadataResponse>;
  }

  /**
   * returns details about any stored access policies specified on the queue that may be used with Shared
   * Access Signatures.
   * @param options The options parameters.
   */
  getAccessPolicy(
    options?: QueueGetAccessPolicyOptionalParams
  ): Promise<QueueGetAccessPolicyResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getAccessPolicyOperationSpec
    ) as Promise<QueueGetAccessPolicyResponse>;
  }

  /**
   * sets stored access policies for the queue that may be used with Shared Access Signatures
   * @param options The options parameters.
   */
  setAccessPolicy(
    options?: QueueSetAccessPolicyOptionalParams
  ): Promise<QueueSetAccessPolicyResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      setAccessPolicyOperationSpec
    ) as Promise<QueueSetAccessPolicyResponse>;
  }
}
// Operation Specifications
const xmlSerializer = new coreHttp.Serializer(Mappers, /* isXml */ true);

const createOperationSpec: coreHttp.OperationSpec = {
  path: "/{queueName}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: Mappers.QueueCreateHeaders
    },
    204: {
      headersMapper: Mappers.QueueCreateHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.QueueCreateExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds],
  urlParameters: [Parameters.url],
  headerParameters: [
    Parameters.version,
    Parameters.requestId,
    Parameters.accept1,
    Parameters.metadata
  ],
  isXML: true,
  serializer: xmlSerializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path: "/{queueName}",
  httpMethod: "DELETE",
  responses: {
    204: {
      headersMapper: Mappers.QueueDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.QueueDeleteExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds],
  urlParameters: [Parameters.url],
  headerParameters: [
    Parameters.version,
    Parameters.requestId,
    Parameters.accept1
  ],
  isXML: true,
  serializer: xmlSerializer
};
const getPropertiesOperationSpec: coreHttp.OperationSpec = {
  path: "/{queueName}",
  httpMethod: "GET",
  responses: {
    200: {
      headersMapper: Mappers.QueueGetPropertiesHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.QueueGetPropertiesExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp3],
  urlParameters: [Parameters.url],
  headerParameters: [
    Parameters.version,
    Parameters.requestId,
    Parameters.accept1
  ],
  isXML: true,
  serializer: xmlSerializer
};
const setMetadataOperationSpec: coreHttp.OperationSpec = {
  path: "/{queueName}",
  httpMethod: "PUT",
  responses: {
    204: {
      headersMapper: Mappers.QueueSetMetadataHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.QueueSetMetadataExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp3],
  urlParameters: [Parameters.url],
  headerParameters: [
    Parameters.version,
    Parameters.requestId,
    Parameters.accept1,
    Parameters.metadata
  ],
  isXML: true,
  serializer: xmlSerializer
};
const getAccessPolicyOperationSpec: coreHttp.OperationSpec = {
  path: "/{queueName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "SignedIdentifier" }
          }
        },
        serializedName: "SignedIdentifiers",
        xmlName: "SignedIdentifiers",
        xmlIsWrapped: true,
        xmlElementName: "SignedIdentifier"
      },
      headersMapper: Mappers.QueueGetAccessPolicyHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.QueueGetAccessPolicyExceptionHeaders
    }
  },
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp4],
  urlParameters: [Parameters.url],
  headerParameters: [
    Parameters.version,
    Parameters.requestId,
    Parameters.accept1
  ],
  isXML: true,
  serializer: xmlSerializer
};
const setAccessPolicyOperationSpec: coreHttp.OperationSpec = {
  path: "/{queueName}",
  httpMethod: "PUT",
  responses: {
    204: {
      headersMapper: Mappers.QueueSetAccessPolicyHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.QueueSetAccessPolicyExceptionHeaders
    }
  },
  requestBody: Parameters.queueAcl,
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp4],
  urlParameters: [Parameters.url],
  headerParameters: [
    Parameters.contentType,
    Parameters.accept,
    Parameters.version,
    Parameters.requestId
  ],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "xml",
  serializer: xmlSerializer
};
