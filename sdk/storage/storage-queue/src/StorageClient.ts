// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

import { StorageClient as StorageClientContext } from "./generated/src/";
import { StorageContextClient } from "./StorageContextClient";
import {
  Pipeline,
  StoragePipelineOptions,
  getCoreClientOptions,
  getCredentialFromPipeline,
} from "../../storage-blob/src/Pipeline";
import { getAccountNameFromUrl } from "./utils/utils.common";
import { OperationTracingOptions } from "@azure/core-tracing";
import { AnonymousCredential } from "../../storage-blob/src/credentials/AnonymousCredential";
import { StorageSharedKeyCredential } from "../../storage-blob/src/credentials/StorageSharedKeyCredential";
import { HttpClient } from "@azure/core-rest-pipeline";
import { TokenCredential } from "@azure/core-auth";

/**
 * An interface for options common to every remote operation.
 */
export interface CommonOptions {
  /**
   * Options to configure spans created when tracing is enabled.
   */
  tracingOptions?: OperationTracingOptions;
}

/**
 * A StorageClient represents a based client class for {@link QueueServiceClient}, {@link QueueClient} and etc.
 */
export abstract class StorageClient {
  /**
   * URL string value.
   */
  public readonly url: string;
  public readonly accountName: string;

  /**
   * Request policy pipeline.
   *
   * @internal
   */
  protected readonly pipeline: Pipeline;

  /**
   * Credential factory in the pipeline to authenticate requests to the service, such as AnonymousCredential, StorageSharedKeyCredential.
   * Initialized to an AnonymousCredential if not able to retrieve it from the pipeline.
   *
   * @internal
   */
  protected readonly credential: StorageSharedKeyCredential | AnonymousCredential | TokenCredential;

  /**
   * StorageClientContext is a reference to protocol layer operations entry, which is
   * generated by AutoRest generator.
   */
  protected readonly storageClientContext: StorageClientContext;

  /**
   * Creates an instance of StorageClient.
   * @param url -
   * @param pipeline -
   */
  protected constructor(url: string, pipeline: Pipeline) {
    this.url = url;
    this.accountName = getAccountNameFromUrl(url);
    this.pipeline = pipeline;
    this.storageClientContext = getStorageClientContext(this.url, this.pipeline);
    this.credential = getCredentialFromPipeline(pipeline);
  }
}

// The following type is introduced to avoid a breaking change during the
// migration of V6 SDK generator. Can be removed later when a really
// breaking change is released.

/**
 * Defines values for ListQueuesIncludeType.
 * Possible values include: 'metadata'
 * @readonly
 */
export type ListQueuesIncludeType = "metadata";

let testOnlyHttpClient: HttpClient | undefined;
/**
 * @internal
 * Set a custom default http client for testing purposes
 */
export function setTestOnlySetHttpClient(httpClient: HttpClient): void {
  testOnlyHttpClient = httpClient;
}

/**
 * @internal
 */
export function getStorageClientContext(url: string, pipeline: Pipeline): StorageClientContext {
  const pipelineOptions = pipeline.options as StoragePipelineOptions;
  // Set maximum timeout for queue operations.
  // This was previously set manually in the retry policy specific to this package.
  // https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations
  if (pipelineOptions.retryOptions === undefined) {
    pipelineOptions.retryOptions = {
      tryTimeoutInMs: 30 * 1000,
    };
  } else if (pipelineOptions.retryOptions.tryTimeoutInMs === undefined) {
    (pipelineOptions.retryOptions as any).tryTimeoutInMs = 30 * 1000;
  }
  const coreOptions = getCoreClientOptions(pipeline);
  if (testOnlyHttpClient) {
    coreOptions.httpClient = testOnlyHttpClient;
  }
  return new StorageContextClient(url, coreOptions);
}
