/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/backupVaultsMappers";
import * as Parameters from "../models/parameters";
import { DataProtectionClientContext } from "../dataProtectionClientContext";

/** Class representing a BackupVaults. */
export class BackupVaults {
  private readonly client: DataProtectionClientContext;

  /**
   * Create a BackupVaults.
   * @param {DataProtectionClientContext} client Reference to the service client.
   */
  constructor(client: DataProtectionClientContext) {
    this.client = client;
  }

  /**
   * Returns resource collection belonging to a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.BackupVaultsGetResourcesInSubscriptionResponse>
   */
  getResourcesInSubscription(options?: msRest.RequestOptionsBase): Promise<Models.BackupVaultsGetResourcesInSubscriptionResponse>;
  /**
   * @param callback The callback
   */
  getResourcesInSubscription(callback: msRest.ServiceCallback<Models.BackupVaultResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getResourcesInSubscription(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupVaultResourceList>): void;
  getResourcesInSubscription(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupVaultResourceList>, callback?: msRest.ServiceCallback<Models.BackupVaultResourceList>): Promise<Models.BackupVaultsGetResourcesInSubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getResourcesInSubscriptionOperationSpec,
      callback) as Promise<Models.BackupVaultsGetResourcesInSubscriptionResponse>;
  }

  /**
   * Returns resource collection belonging to a resource group.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param [options] The optional parameters
   * @returns Promise<Models.BackupVaultsGetResourcesInResourceGroupResponse>
   */
  getResourcesInResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.BackupVaultsGetResourcesInResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param callback The callback
   */
  getResourcesInResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.BackupVaultResourceList>): void;
  /**
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param options The optional parameters
   * @param callback The callback
   */
  getResourcesInResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupVaultResourceList>): void;
  getResourcesInResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupVaultResourceList>, callback?: msRest.ServiceCallback<Models.BackupVaultResourceList>): Promise<Models.BackupVaultsGetResourcesInResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      getResourcesInResourceGroupOperationSpec,
      callback) as Promise<Models.BackupVaultsGetResourcesInResourceGroupResponse>;
  }

  /**
   * Returns a resource belonging to a resource group.
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param [options] The optional parameters
   * @returns Promise<Models.BackupVaultsGetResponse>
   */
  get(vaultName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.BackupVaultsGetResponse>;
  /**
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param callback The callback
   */
  get(vaultName: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.BackupVaultResource>): void;
  /**
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(vaultName: string, resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupVaultResource>): void;
  get(vaultName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupVaultResource>, callback?: msRest.ServiceCallback<Models.BackupVaultResource>): Promise<Models.BackupVaultsGetResponse> {
    return this.client.sendOperationRequest(
      {
        vaultName,
        resourceGroupName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.BackupVaultsGetResponse>;
  }

  /**
   * Creates or updates a BackupVault resource belonging to a resource group.
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param parameters Request body for operation
   * @param [options] The optional parameters
   * @returns Promise<Models.BackupVaultsPutResponse>
   */
  put(vaultName: string, resourceGroupName: string, parameters: Models.BackupVaultResource, options?: msRest.RequestOptionsBase): Promise<Models.BackupVaultsPutResponse> {
    return this.beginPut(vaultName,resourceGroupName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.BackupVaultsPutResponse>;
  }

  /**
   * Deletes a BackupVault resource from the resource group.
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(vaultName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param callback The callback
   */
  deleteMethod(vaultName: string, resourceGroupName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(vaultName: string, resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(vaultName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        vaultName,
        resourceGroupName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Updates a BackupVault resource belonging to a resource group. For example, updating tags for a
   * resource.
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param parameters Request body for operation
   * @param [options] The optional parameters
   * @returns Promise<Models.BackupVaultsPatchResponse>
   */
  patch(vaultName: string, resourceGroupName: string, parameters: Models.PatchResourceRequestInput, options?: msRest.RequestOptionsBase): Promise<Models.BackupVaultsPatchResponse> {
    return this.beginPatch(vaultName,resourceGroupName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.BackupVaultsPatchResponse>;
  }

  /**
   * @summary API to check for resource name availability
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param location The location in which uniqueness will be verified.
   * @param parameters Check name availability request
   * @param [options] The optional parameters
   * @returns Promise<Models.BackupVaultsCheckNameAvailabilityResponse>
   */
  checkNameAvailability(resourceGroupName: string, location: string, parameters: Models.CheckNameAvailabilityRequest, options?: msRest.RequestOptionsBase): Promise<Models.BackupVaultsCheckNameAvailabilityResponse>;
  /**
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param location The location in which uniqueness will be verified.
   * @param parameters Check name availability request
   * @param callback The callback
   */
  checkNameAvailability(resourceGroupName: string, location: string, parameters: Models.CheckNameAvailabilityRequest, callback: msRest.ServiceCallback<Models.CheckNameAvailabilityResult>): void;
  /**
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param location The location in which uniqueness will be verified.
   * @param parameters Check name availability request
   * @param options The optional parameters
   * @param callback The callback
   */
  checkNameAvailability(resourceGroupName: string, location: string, parameters: Models.CheckNameAvailabilityRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CheckNameAvailabilityResult>): void;
  checkNameAvailability(resourceGroupName: string, location: string, parameters: Models.CheckNameAvailabilityRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CheckNameAvailabilityResult>, callback?: msRest.ServiceCallback<Models.CheckNameAvailabilityResult>): Promise<Models.BackupVaultsCheckNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        location,
        parameters,
        options
      },
      checkNameAvailabilityOperationSpec,
      callback) as Promise<Models.BackupVaultsCheckNameAvailabilityResponse>;
  }

  /**
   * Creates or updates a BackupVault resource belonging to a resource group.
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param parameters Request body for operation
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginPut(vaultName: string, resourceGroupName: string, parameters: Models.BackupVaultResource, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        vaultName,
        resourceGroupName,
        parameters,
        options
      },
      beginPutOperationSpec,
      options);
  }

  /**
   * Updates a BackupVault resource belonging to a resource group. For example, updating tags for a
   * resource.
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param parameters Request body for operation
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginPatch(vaultName: string, resourceGroupName: string, parameters: Models.PatchResourceRequestInput, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        vaultName,
        resourceGroupName,
        parameters,
        options
      },
      beginPatchOperationSpec,
      options);
  }

  /**
   * Returns resource collection belonging to a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.BackupVaultsGetResourcesInSubscriptionNextResponse>
   */
  getResourcesInSubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.BackupVaultsGetResourcesInSubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getResourcesInSubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.BackupVaultResourceList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getResourcesInSubscriptionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupVaultResourceList>): void;
  getResourcesInSubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupVaultResourceList>, callback?: msRest.ServiceCallback<Models.BackupVaultResourceList>): Promise<Models.BackupVaultsGetResourcesInSubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getResourcesInSubscriptionNextOperationSpec,
      callback) as Promise<Models.BackupVaultsGetResourcesInSubscriptionNextResponse>;
  }

  /**
   * Returns resource collection belonging to a resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.BackupVaultsGetResourcesInResourceGroupNextResponse>
   */
  getResourcesInResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.BackupVaultsGetResourcesInResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getResourcesInResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.BackupVaultResourceList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getResourcesInResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupVaultResourceList>): void;
  getResourcesInResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupVaultResourceList>, callback?: msRest.ServiceCallback<Models.BackupVaultResourceList>): Promise<Models.BackupVaultsGetResourcesInResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getResourcesInResourceGroupNextOperationSpec,
      callback) as Promise<Models.BackupVaultsGetResourcesInResourceGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getResourcesInSubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.DataProtection/backupVaults",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BackupVaultResourceList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getResourcesInResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BackupVaultResourceList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}",
  urlParameters: [
    Parameters.vaultName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BackupVaultResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}",
  urlParameters: [
    Parameters.vaultName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const checkNameAvailabilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/locations/{location}/checkNameAvailability",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.location
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.CheckNameAvailabilityRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameAvailabilityResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginPutOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}",
  urlParameters: [
    Parameters.vaultName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.BackupVaultResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.BackupVaultResource
    },
    201: {
      bodyMapper: Mappers.BackupVaultResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginPatchOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}",
  urlParameters: [
    Parameters.vaultName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.PatchResourceRequestInput,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.BackupVaultResource
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getResourcesInSubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BackupVaultResourceList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getResourcesInResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BackupVaultResourceList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
