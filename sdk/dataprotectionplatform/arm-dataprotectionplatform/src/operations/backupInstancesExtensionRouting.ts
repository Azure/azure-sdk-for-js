/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { BackupInstancesExtensionRouting } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DataProtectionClient } from "../dataProtectionClient";
import {
  BackupInstanceResource,
  BackupInstancesExtensionRoutingListNextOptionalParams,
  BackupInstancesExtensionRoutingListOptionalParams,
  BackupInstancesExtensionRoutingListResponse,
  BackupInstancesExtensionRoutingListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing BackupInstancesExtensionRouting operations. */
export class BackupInstancesExtensionRoutingImpl
  implements BackupInstancesExtensionRouting {
  private readonly client: DataProtectionClient;

  /**
   * Initialize a new instance of the class BackupInstancesExtensionRouting class.
   * @param client Reference to the service client
   */
  constructor(client: DataProtectionClient) {
    this.client = client;
  }

  /**
   * Gets a list backup instances associated with a tracked resource
   * @param resourceId ARM path of the resource to be protected using Microsoft.DataProtection
   * @param options The options parameters.
   */
  public list(
    resourceId: string,
    options?: BackupInstancesExtensionRoutingListOptionalParams
  ): PagedAsyncIterableIterator<BackupInstanceResource> {
    const iter = this.listPagingAll(resourceId, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(resourceId, options);
      }
    };
  }

  private async *listPagingPage(
    resourceId: string,
    options?: BackupInstancesExtensionRoutingListOptionalParams
  ): AsyncIterableIterator<BackupInstanceResource[]> {
    let result = await this._list(resourceId, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(resourceId, continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    resourceId: string,
    options?: BackupInstancesExtensionRoutingListOptionalParams
  ): AsyncIterableIterator<BackupInstanceResource> {
    for await (const page of this.listPagingPage(resourceId, options)) {
      yield* page;
    }
  }

  /**
   * Gets a list backup instances associated with a tracked resource
   * @param resourceId ARM path of the resource to be protected using Microsoft.DataProtection
   * @param options The options parameters.
   */
  private _list(
    resourceId: string,
    options?: BackupInstancesExtensionRoutingListOptionalParams
  ): Promise<BackupInstancesExtensionRoutingListResponse> {
    return this.client.sendOperationRequest(
      { resourceId, options },
      listOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceId ARM path of the resource to be protected using Microsoft.DataProtection
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceId: string,
    nextLink: string,
    options?: BackupInstancesExtensionRoutingListNextOptionalParams
  ): Promise<BackupInstancesExtensionRoutingListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceId, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceId}/providers/Microsoft.DataProtection/backupInstances",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BackupInstanceResourceList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.resourceId],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BackupInstanceResourceList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.resourceId],
  headerParameters: [Parameters.accept],
  serializer
};
