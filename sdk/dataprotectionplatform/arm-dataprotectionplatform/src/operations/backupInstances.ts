/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/backupInstancesMappers";
import * as Parameters from "../models/parameters";
import { DataProtectionClientContext } from "../dataProtectionClientContext";

/** Class representing a BackupInstances. */
export class BackupInstances {
  private readonly client: DataProtectionClientContext;

  /**
   * Create a BackupInstances.
   * @param {DataProtectionClientContext} client Reference to the service client.
   */
  constructor(client: DataProtectionClientContext) {
    this.client = client;
  }

  /**
   * Gets a backup instances belonging to a backup vault
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param [options] The optional parameters
   * @returns Promise<Models.BackupInstancesGetBackupInstancesInVaultResponse>
   */
  getBackupInstancesInVault(vaultName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.BackupInstancesGetBackupInstancesInVaultResponse>;
  /**
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param callback The callback
   */
  getBackupInstancesInVault(vaultName: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.BackupInstanceResourceList>): void;
  /**
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param options The optional parameters
   * @param callback The callback
   */
  getBackupInstancesInVault(vaultName: string, resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupInstanceResourceList>): void;
  getBackupInstancesInVault(vaultName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupInstanceResourceList>, callback?: msRest.ServiceCallback<Models.BackupInstanceResourceList>): Promise<Models.BackupInstancesGetBackupInstancesInVaultResponse> {
    return this.client.sendOperationRequest(
      {
        vaultName,
        resourceGroupName,
        options
      },
      getBackupInstancesInVaultOperationSpec,
      callback) as Promise<Models.BackupInstancesGetBackupInstancesInVaultResponse>;
  }

  /**
   * Gets a backup instance with name in a backup vault
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param backupInstanceName The name of the backup instance
   * @param [options] The optional parameters
   * @returns Promise<Models.BackupInstancesGetResponse>
   */
  get(vaultName: string, resourceGroupName: string, backupInstanceName: string, options?: msRest.RequestOptionsBase): Promise<Models.BackupInstancesGetResponse>;
  /**
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param backupInstanceName The name of the backup instance
   * @param callback The callback
   */
  get(vaultName: string, resourceGroupName: string, backupInstanceName: string, callback: msRest.ServiceCallback<Models.BackupInstanceResource>): void;
  /**
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param backupInstanceName The name of the backup instance
   * @param options The optional parameters
   * @param callback The callback
   */
  get(vaultName: string, resourceGroupName: string, backupInstanceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupInstanceResource>): void;
  get(vaultName: string, resourceGroupName: string, backupInstanceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupInstanceResource>, callback?: msRest.ServiceCallback<Models.BackupInstanceResource>): Promise<Models.BackupInstancesGetResponse> {
    return this.client.sendOperationRequest(
      {
        vaultName,
        resourceGroupName,
        backupInstanceName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.BackupInstancesGetResponse>;
  }

  /**
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param backupInstanceName The name of the backup instance
   * @param parameters Request body for operation
   * @param [options] The optional parameters
   * @returns Promise<Models.BackupInstancesPutResponse>
   */
  put(vaultName: string, resourceGroupName: string, backupInstanceName: string, parameters: Models.BackupInstanceResource, options?: msRest.RequestOptionsBase): Promise<Models.BackupInstancesPutResponse> {
    return this.beginPut(vaultName,resourceGroupName,backupInstanceName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.BackupInstancesPutResponse>;
  }

  /**
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param backupInstanceName The name of the backup instance
   * @param [options] The optional parameters
   * @returns Promise<Models.BackupInstancesDeleteResponse>
   */
  deleteMethod(vaultName: string, resourceGroupName: string, backupInstanceName: string, options?: msRest.RequestOptionsBase): Promise<Models.BackupInstancesDeleteResponse> {
    return this.beginDeleteMethod(vaultName,resourceGroupName,backupInstanceName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.BackupInstancesDeleteResponse>;
  }

  /**
   * Trigger adhoc backup
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param backupInstanceName The name of the backup instance
   * @param parameters Request body for operation
   * @param [options] The optional parameters
   * @returns Promise<Models.BackupInstancesAdhocBackupResponse>
   */
  adhocBackup(vaultName: string, resourceGroupName: string, backupInstanceName: string, parameters: Models.TriggerBackupRequest, options?: msRest.RequestOptionsBase): Promise<Models.BackupInstancesAdhocBackupResponse> {
    return this.beginAdhocBackup(vaultName,resourceGroupName,backupInstanceName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.BackupInstancesAdhocBackupResponse>;
  }

  /**
   * Validate whether adhoc backup will be successful or not
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param parameters Request body for operation
   * @param [options] The optional parameters
   * @returns Promise<Models.BackupInstancesValidateForBackupResponse>
   */
  validateForBackup(vaultName: string, resourceGroupName: string, parameters: Models.ValidateForBackupRequest, options?: msRest.RequestOptionsBase): Promise<Models.BackupInstancesValidateForBackupResponse> {
    return this.beginValidateForBackup(vaultName,resourceGroupName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.BackupInstancesValidateForBackupResponse>;
  }

  /**
   * rehydrate recovery point for restore for a BackupInstance
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param vaultName The name of the backup vault.
   * @param parameters Request body for operation
   * @param backupInstanceName
   * @param [options] The optional parameters
   * @returns Promise<Models.BackupInstancesTriggerRehydrateResponse>
   */
  triggerRehydrate(resourceGroupName: string, vaultName: string, parameters: Models.AzureBackupRehydrationRequest, backupInstanceName: string, options?: msRest.RequestOptionsBase): Promise<Models.BackupInstancesTriggerRehydrateResponse> {
    return this.beginTriggerRehydrate(resourceGroupName,vaultName,parameters,backupInstanceName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.BackupInstancesTriggerRehydrateResponse>;
  }

  /**
   * Triggers restore for a BackupInstance
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param backupInstanceName The name of the backup instance
   * @param parameters Request body for operation
   * @param [options] The optional parameters
   * @returns Promise<Models.BackupInstancesTriggerRestoreResponse>
   */
  triggerRestore(vaultName: string, resourceGroupName: string, backupInstanceName: string, parameters: Models.AzureBackupRestoreRequestUnion, options?: msRest.RequestOptionsBase): Promise<Models.BackupInstancesTriggerRestoreResponse> {
    return this.beginTriggerRestore(vaultName,resourceGroupName,backupInstanceName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.BackupInstancesTriggerRestoreResponse>;
  }

  /**
   * Validates if Restore can be triggered for a DataSource
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param backupInstanceName The name of the backup instance
   * @param parameters Request body for operation
   * @param [options] The optional parameters
   * @returns Promise<Models.BackupInstancesValidateRestoreResponse>
   */
  validateRestore(vaultName: string, resourceGroupName: string, backupInstanceName: string, parameters: Models.ValidateRestoreRequestObject, options?: msRest.RequestOptionsBase): Promise<Models.BackupInstancesValidateRestoreResponse> {
    return this.beginValidateRestore(vaultName,resourceGroupName,backupInstanceName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.BackupInstancesValidateRestoreResponse>;
  }

  /**
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param backupInstanceName The name of the backup instance
   * @param parameters Request body for operation
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginPut(vaultName: string, resourceGroupName: string, backupInstanceName: string, parameters: Models.BackupInstanceResource, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        vaultName,
        resourceGroupName,
        backupInstanceName,
        parameters,
        options
      },
      beginPutOperationSpec,
      options);
  }

  /**
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param backupInstanceName The name of the backup instance
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(vaultName: string, resourceGroupName: string, backupInstanceName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        vaultName,
        resourceGroupName,
        backupInstanceName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Trigger adhoc backup
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param backupInstanceName The name of the backup instance
   * @param parameters Request body for operation
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginAdhocBackup(vaultName: string, resourceGroupName: string, backupInstanceName: string, parameters: Models.TriggerBackupRequest, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        vaultName,
        resourceGroupName,
        backupInstanceName,
        parameters,
        options
      },
      beginAdhocBackupOperationSpec,
      options);
  }

  /**
   * Validate whether adhoc backup will be successful or not
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param parameters Request body for operation
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginValidateForBackup(vaultName: string, resourceGroupName: string, parameters: Models.ValidateForBackupRequest, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        vaultName,
        resourceGroupName,
        parameters,
        options
      },
      beginValidateForBackupOperationSpec,
      options);
  }

  /**
   * rehydrate recovery point for restore for a BackupInstance
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param vaultName The name of the backup vault.
   * @param parameters Request body for operation
   * @param backupInstanceName
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginTriggerRehydrate(resourceGroupName: string, vaultName: string, parameters: Models.AzureBackupRehydrationRequest, backupInstanceName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        vaultName,
        parameters,
        backupInstanceName,
        options
      },
      beginTriggerRehydrateOperationSpec,
      options);
  }

  /**
   * Triggers restore for a BackupInstance
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param backupInstanceName The name of the backup instance
   * @param parameters Request body for operation
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginTriggerRestore(vaultName: string, resourceGroupName: string, backupInstanceName: string, parameters: Models.AzureBackupRestoreRequestUnion, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        vaultName,
        resourceGroupName,
        backupInstanceName,
        parameters,
        options
      },
      beginTriggerRestoreOperationSpec,
      options);
  }

  /**
   * Validates if Restore can be triggered for a DataSource
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param backupInstanceName The name of the backup instance
   * @param parameters Request body for operation
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginValidateRestore(vaultName: string, resourceGroupName: string, backupInstanceName: string, parameters: Models.ValidateRestoreRequestObject, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        vaultName,
        resourceGroupName,
        backupInstanceName,
        parameters,
        options
      },
      beginValidateRestoreOperationSpec,
      options);
  }

  /**
   * Gets a backup instances belonging to a backup vault
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.BackupInstancesGetBackupInstancesInVaultNextResponse>
   */
  getBackupInstancesInVaultNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.BackupInstancesGetBackupInstancesInVaultNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getBackupInstancesInVaultNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.BackupInstanceResourceList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getBackupInstancesInVaultNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupInstanceResourceList>): void;
  getBackupInstancesInVaultNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupInstanceResourceList>, callback?: msRest.ServiceCallback<Models.BackupInstanceResourceList>): Promise<Models.BackupInstancesGetBackupInstancesInVaultNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getBackupInstancesInVaultNextOperationSpec,
      callback) as Promise<Models.BackupInstancesGetBackupInstancesInVaultNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getBackupInstancesInVaultOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/backupInstances",
  urlParameters: [
    Parameters.vaultName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BackupInstanceResourceList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/backupInstances/{backupInstanceName}",
  urlParameters: [
    Parameters.vaultName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.backupInstanceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BackupInstanceResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginPutOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/backupInstances/{backupInstanceName}",
  urlParameters: [
    Parameters.vaultName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.backupInstanceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.BackupInstanceResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.BackupInstanceResource
    },
    201: {
      bodyMapper: Mappers.BackupInstanceResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/backupInstances/{backupInstanceName}",
  urlParameters: [
    Parameters.vaultName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.backupInstanceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      headersMapper: Mappers.BackupInstancesDeleteHeaders
    },
    202: {
      headersMapper: Mappers.BackupInstancesDeleteHeaders
    },
    204: {
      headersMapper: Mappers.BackupInstancesDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.BackupInstancesDeleteHeaders
    }
  },
  serializer
};

const beginAdhocBackupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/backupInstances/{backupInstanceName}/backup",
  urlParameters: [
    Parameters.vaultName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.backupInstanceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.TriggerBackupRequest,
      required: true
    }
  },
  responses: {
    202: {
      headersMapper: Mappers.BackupInstancesAdhocBackupHeaders
    },
    204: {
      headersMapper: Mappers.BackupInstancesAdhocBackupHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.BackupInstancesAdhocBackupHeaders
    }
  },
  serializer
};

const beginValidateForBackupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/validateForBackup",
  urlParameters: [
    Parameters.vaultName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.ValidateForBackupRequest,
      required: true
    }
  },
  responses: {
    202: {
      headersMapper: Mappers.BackupInstancesValidateForBackupHeaders
    },
    204: {
      headersMapper: Mappers.BackupInstancesValidateForBackupHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.BackupInstancesValidateForBackupHeaders
    }
  },
  serializer
};

const beginTriggerRehydrateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/backupInstances/{backupInstanceName}/rehydrate",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.vaultName,
    Parameters.backupInstanceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.AzureBackupRehydrationRequest,
      required: true
    }
  },
  responses: {
    202: {
      headersMapper: Mappers.BackupInstancesTriggerRehydrateHeaders
    },
    204: {
      headersMapper: Mappers.BackupInstancesTriggerRehydrateHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.BackupInstancesTriggerRehydrateHeaders
    }
  },
  serializer
};

const beginTriggerRestoreOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/backupInstances/{backupInstanceName}/restore",
  urlParameters: [
    Parameters.vaultName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.backupInstanceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.AzureBackupRestoreRequest,
      required: true
    }
  },
  responses: {
    202: {
      headersMapper: Mappers.BackupInstancesTriggerRestoreHeaders
    },
    204: {
      headersMapper: Mappers.BackupInstancesTriggerRestoreHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.BackupInstancesTriggerRestoreHeaders
    }
  },
  serializer
};

const beginValidateRestoreOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/backupInstances/{backupInstanceName}/validateRestore",
  urlParameters: [
    Parameters.vaultName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.backupInstanceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.ValidateRestoreRequestObject,
      required: true
    }
  },
  responses: {
    202: {
      headersMapper: Mappers.BackupInstancesValidateRestoreHeaders
    },
    204: {
      headersMapper: Mappers.BackupInstancesValidateRestoreHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.BackupInstancesValidateRestoreHeaders
    }
  },
  serializer
};

const getBackupInstancesInVaultNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BackupInstanceResourceList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
