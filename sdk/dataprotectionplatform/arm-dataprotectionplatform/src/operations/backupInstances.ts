/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { BackupInstances } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DataProtectionClient } from "../dataProtectionClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  BackupInstanceResource,
  BackupInstancesListNextOptionalParams,
  BackupInstancesListOptionalParams,
  BackupInstancesListResponse,
  BackupInstancesGetOptionalParams,
  BackupInstancesGetResponse,
  BackupInstancesCreateOrUpdateOptionalParams,
  BackupInstancesCreateOrUpdateResponse,
  BackupInstancesDeleteOptionalParams,
  TriggerBackupRequest,
  BackupInstancesAdhocBackupOptionalParams,
  BackupInstancesAdhocBackupResponse,
  ValidateForBackupRequest,
  BackupInstancesValidateForBackupOptionalParams,
  BackupInstancesValidateForBackupResponse,
  AzureBackupRehydrationRequest,
  BackupInstancesTriggerRehydrateOptionalParams,
  BackupInstancesTriggerRehydrateResponse,
  AzureBackupRestoreRequestUnion,
  BackupInstancesTriggerRestoreOptionalParams,
  BackupInstancesTriggerRestoreResponse,
  ValidateRestoreRequestObject,
  BackupInstancesValidateForRestoreOptionalParams,
  BackupInstancesValidateForRestoreResponse,
  BackupInstancesListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing BackupInstances operations. */
export class BackupInstancesImpl implements BackupInstances {
  private readonly client: DataProtectionClient;

  /**
   * Initialize a new instance of the class BackupInstances class.
   * @param client Reference to the service client
   */
  constructor(client: DataProtectionClient) {
    this.client = client;
  }

  /**
   * Gets a backup instances belonging to a backup vault
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param options The options parameters.
   */
  public list(
    vaultName: string,
    resourceGroupName: string,
    options?: BackupInstancesListOptionalParams
  ): PagedAsyncIterableIterator<BackupInstanceResource> {
    const iter = this.listPagingAll(vaultName, resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(vaultName, resourceGroupName, options);
      }
    };
  }

  private async *listPagingPage(
    vaultName: string,
    resourceGroupName: string,
    options?: BackupInstancesListOptionalParams
  ): AsyncIterableIterator<BackupInstanceResource[]> {
    let result = await this._list(vaultName, resourceGroupName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(
        vaultName,
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    vaultName: string,
    resourceGroupName: string,
    options?: BackupInstancesListOptionalParams
  ): AsyncIterableIterator<BackupInstanceResource> {
    for await (const page of this.listPagingPage(
      vaultName,
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets a backup instances belonging to a backup vault
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param options The options parameters.
   */
  private _list(
    vaultName: string,
    resourceGroupName: string,
    options?: BackupInstancesListOptionalParams
  ): Promise<BackupInstancesListResponse> {
    return this.client.sendOperationRequest(
      { vaultName, resourceGroupName, options },
      listOperationSpec
    );
  }

  /**
   * Gets a backup instance with name in a backup vault
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param backupInstanceName The name of the backup instance
   * @param options The options parameters.
   */
  get(
    vaultName: string,
    resourceGroupName: string,
    backupInstanceName: string,
    options?: BackupInstancesGetOptionalParams
  ): Promise<BackupInstancesGetResponse> {
    return this.client.sendOperationRequest(
      { vaultName, resourceGroupName, backupInstanceName, options },
      getOperationSpec
    );
  }

  /**
   * Create or update a backup instance in a backup vault
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param backupInstanceName The name of the backup instance
   * @param parameters Request body for operation
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    vaultName: string,
    resourceGroupName: string,
    backupInstanceName: string,
    parameters: BackupInstanceResource,
    options?: BackupInstancesCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<BackupInstancesCreateOrUpdateResponse>,
      BackupInstancesCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<BackupInstancesCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { vaultName, resourceGroupName, backupInstanceName, parameters, options },
      createOrUpdateOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * Create or update a backup instance in a backup vault
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param backupInstanceName The name of the backup instance
   * @param parameters Request body for operation
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    vaultName: string,
    resourceGroupName: string,
    backupInstanceName: string,
    parameters: BackupInstanceResource,
    options?: BackupInstancesCreateOrUpdateOptionalParams
  ): Promise<BackupInstancesCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      vaultName,
      resourceGroupName,
      backupInstanceName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete a backup instance in a backup vault
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param backupInstanceName The name of the backup instance
   * @param options The options parameters.
   */
  async beginDelete(
    vaultName: string,
    resourceGroupName: string,
    backupInstanceName: string,
    options?: BackupInstancesDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { vaultName, resourceGroupName, backupInstanceName, options },
      deleteOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * Delete a backup instance in a backup vault
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param backupInstanceName The name of the backup instance
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    vaultName: string,
    resourceGroupName: string,
    backupInstanceName: string,
    options?: BackupInstancesDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      vaultName,
      resourceGroupName,
      backupInstanceName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Trigger adhoc backup
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param backupInstanceName The name of the backup instance
   * @param parameters Request body for operation
   * @param options The options parameters.
   */
  async beginAdhocBackup(
    vaultName: string,
    resourceGroupName: string,
    backupInstanceName: string,
    parameters: TriggerBackupRequest,
    options?: BackupInstancesAdhocBackupOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<BackupInstancesAdhocBackupResponse>,
      BackupInstancesAdhocBackupResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<BackupInstancesAdhocBackupResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { vaultName, resourceGroupName, backupInstanceName, parameters, options },
      adhocBackupOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * Trigger adhoc backup
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param backupInstanceName The name of the backup instance
   * @param parameters Request body for operation
   * @param options The options parameters.
   */
  async beginAdhocBackupAndWait(
    vaultName: string,
    resourceGroupName: string,
    backupInstanceName: string,
    parameters: TriggerBackupRequest,
    options?: BackupInstancesAdhocBackupOptionalParams
  ): Promise<BackupInstancesAdhocBackupResponse> {
    const poller = await this.beginAdhocBackup(
      vaultName,
      resourceGroupName,
      backupInstanceName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Validate whether adhoc backup will be successful or not
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param parameters Request body for operation
   * @param options The options parameters.
   */
  async beginValidateForBackup(
    vaultName: string,
    resourceGroupName: string,
    parameters: ValidateForBackupRequest,
    options?: BackupInstancesValidateForBackupOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<BackupInstancesValidateForBackupResponse>,
      BackupInstancesValidateForBackupResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<BackupInstancesValidateForBackupResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { vaultName, resourceGroupName, parameters, options },
      validateForBackupOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * Validate whether adhoc backup will be successful or not
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param parameters Request body for operation
   * @param options The options parameters.
   */
  async beginValidateForBackupAndWait(
    vaultName: string,
    resourceGroupName: string,
    parameters: ValidateForBackupRequest,
    options?: BackupInstancesValidateForBackupOptionalParams
  ): Promise<BackupInstancesValidateForBackupResponse> {
    const poller = await this.beginValidateForBackup(
      vaultName,
      resourceGroupName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * rehydrate recovery point for restore for a BackupInstance
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param vaultName The name of the backup vault.
   * @param backupInstanceName
   * @param parameters Request body for operation
   * @param options The options parameters.
   */
  async beginTriggerRehydrate(
    resourceGroupName: string,
    vaultName: string,
    backupInstanceName: string,
    parameters: AzureBackupRehydrationRequest,
    options?: BackupInstancesTriggerRehydrateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<BackupInstancesTriggerRehydrateResponse>,
      BackupInstancesTriggerRehydrateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<BackupInstancesTriggerRehydrateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, vaultName, backupInstanceName, parameters, options },
      triggerRehydrateOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * rehydrate recovery point for restore for a BackupInstance
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param vaultName The name of the backup vault.
   * @param backupInstanceName
   * @param parameters Request body for operation
   * @param options The options parameters.
   */
  async beginTriggerRehydrateAndWait(
    resourceGroupName: string,
    vaultName: string,
    backupInstanceName: string,
    parameters: AzureBackupRehydrationRequest,
    options?: BackupInstancesTriggerRehydrateOptionalParams
  ): Promise<BackupInstancesTriggerRehydrateResponse> {
    const poller = await this.beginTriggerRehydrate(
      resourceGroupName,
      vaultName,
      backupInstanceName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Triggers restore for a BackupInstance
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param backupInstanceName The name of the backup instance
   * @param parameters Request body for operation
   * @param options The options parameters.
   */
  async beginTriggerRestore(
    vaultName: string,
    resourceGroupName: string,
    backupInstanceName: string,
    parameters: AzureBackupRestoreRequestUnion,
    options?: BackupInstancesTriggerRestoreOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<BackupInstancesTriggerRestoreResponse>,
      BackupInstancesTriggerRestoreResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<BackupInstancesTriggerRestoreResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { vaultName, resourceGroupName, backupInstanceName, parameters, options },
      triggerRestoreOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * Triggers restore for a BackupInstance
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param backupInstanceName The name of the backup instance
   * @param parameters Request body for operation
   * @param options The options parameters.
   */
  async beginTriggerRestoreAndWait(
    vaultName: string,
    resourceGroupName: string,
    backupInstanceName: string,
    parameters: AzureBackupRestoreRequestUnion,
    options?: BackupInstancesTriggerRestoreOptionalParams
  ): Promise<BackupInstancesTriggerRestoreResponse> {
    const poller = await this.beginTriggerRestore(
      vaultName,
      resourceGroupName,
      backupInstanceName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Validates if Restore can be triggered for a DataSource
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param backupInstanceName The name of the backup instance
   * @param parameters Request body for operation
   * @param options The options parameters.
   */
  async beginValidateForRestore(
    vaultName: string,
    resourceGroupName: string,
    backupInstanceName: string,
    parameters: ValidateRestoreRequestObject,
    options?: BackupInstancesValidateForRestoreOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<BackupInstancesValidateForRestoreResponse>,
      BackupInstancesValidateForRestoreResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<BackupInstancesValidateForRestoreResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { vaultName, resourceGroupName, backupInstanceName, parameters, options },
      validateForRestoreOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * Validates if Restore can be triggered for a DataSource
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param backupInstanceName The name of the backup instance
   * @param parameters Request body for operation
   * @param options The options parameters.
   */
  async beginValidateForRestoreAndWait(
    vaultName: string,
    resourceGroupName: string,
    backupInstanceName: string,
    parameters: ValidateRestoreRequestObject,
    options?: BackupInstancesValidateForRestoreOptionalParams
  ): Promise<BackupInstancesValidateForRestoreResponse> {
    const poller = await this.beginValidateForRestore(
      vaultName,
      resourceGroupName,
      backupInstanceName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * ListNext
   * @param vaultName The name of the backup vault.
   * @param resourceGroupName The name of the resource group where the backup vault is present.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    vaultName: string,
    resourceGroupName: string,
    nextLink: string,
    options?: BackupInstancesListNextOptionalParams
  ): Promise<BackupInstancesListNextResponse> {
    return this.client.sendOperationRequest(
      { vaultName, resourceGroupName, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/backupInstances",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BackupInstanceResourceList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/backupInstances/{backupInstanceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BackupInstanceResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName,
    Parameters.backupInstanceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/backupInstances/{backupInstanceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.BackupInstanceResource
    },
    201: {
      bodyMapper: Mappers.BackupInstanceResource
    },
    202: {
      bodyMapper: Mappers.BackupInstanceResource
    },
    204: {
      bodyMapper: Mappers.BackupInstanceResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName,
    Parameters.backupInstanceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/backupInstances/{backupInstanceName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName,
    Parameters.backupInstanceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const adhocBackupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/backupInstances/{backupInstanceName}/backup",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.OperationJobExtendedInfo
    },
    201: {
      bodyMapper: Mappers.OperationJobExtendedInfo
    },
    202: {
      bodyMapper: Mappers.OperationJobExtendedInfo
    },
    204: {
      bodyMapper: Mappers.OperationJobExtendedInfo
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters6,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName,
    Parameters.backupInstanceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const validateForBackupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/validateForBackup",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.OperationJobExtendedInfo
    },
    201: {
      bodyMapper: Mappers.OperationJobExtendedInfo
    },
    202: {
      bodyMapper: Mappers.OperationJobExtendedInfo
    },
    204: {
      bodyMapper: Mappers.OperationJobExtendedInfo
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters7,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const triggerRehydrateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/backupInstances/{backupInstanceName}/rehydrate",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.BackupInstancesTriggerRehydrateHeaders
    },
    201: {
      headersMapper: Mappers.BackupInstancesTriggerRehydrateHeaders
    },
    202: {
      headersMapper: Mappers.BackupInstancesTriggerRehydrateHeaders
    },
    204: {
      headersMapper: Mappers.BackupInstancesTriggerRehydrateHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters8,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName,
    Parameters.backupInstanceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const triggerRestoreOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/backupInstances/{backupInstanceName}/restore",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.OperationJobExtendedInfo
    },
    201: {
      bodyMapper: Mappers.OperationJobExtendedInfo
    },
    202: {
      bodyMapper: Mappers.OperationJobExtendedInfo
    },
    204: {
      bodyMapper: Mappers.OperationJobExtendedInfo
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters9,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName,
    Parameters.backupInstanceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const validateForRestoreOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/backupInstances/{backupInstanceName}/validateRestore",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.OperationJobExtendedInfo
    },
    201: {
      bodyMapper: Mappers.OperationJobExtendedInfo
    },
    202: {
      bodyMapper: Mappers.OperationJobExtendedInfo
    },
    204: {
      bodyMapper: Mappers.OperationJobExtendedInfo
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters10,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName,
    Parameters.backupInstanceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BackupInstanceResourceList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
