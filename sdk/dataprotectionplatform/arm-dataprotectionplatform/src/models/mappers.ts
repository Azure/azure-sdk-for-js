/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const DeleteOption: msRest.CompositeMapper = {
  serializedName: "DeleteOption",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    uberParent: "DeleteOption",
    className: "DeleteOption",
    modelProperties: {
      duration: {
        required: true,
        serializedName: "duration",
        type: {
          name: "String"
        }
      },
      objectType: {
        required: true,
        serializedName: "objectType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AbsoluteDeleteOption: msRest.CompositeMapper = {
  serializedName: "AbsoluteDeleteOption",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DeleteOption.type.polymorphicDiscriminator,
    uberParent: "DeleteOption",
    className: "AbsoluteDeleteOption",
    modelProperties: {
      ...DeleteOption.type.modelProperties
    }
  }
};

export const AdhocBackupTriggerOption: msRest.CompositeMapper = {
  serializedName: "AdhocBackupTriggerOption",
  type: {
    name: "Composite",
    className: "AdhocBackupTriggerOption",
    modelProperties: {
      retentionTagOverride: {
        serializedName: "retentionTagOverride",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AdHocBackupRuleOptions: msRest.CompositeMapper = {
  serializedName: "AdHocBackupRuleOptions",
  type: {
    name: "Composite",
    className: "AdHocBackupRuleOptions",
    modelProperties: {
      ruleName: {
        required: true,
        serializedName: "ruleName",
        type: {
          name: "String"
        }
      },
      triggerOption: {
        required: true,
        serializedName: "triggerOption",
        type: {
          name: "Composite",
          className: "AdhocBackupTriggerOption"
        }
      }
    }
  }
};

export const RetentionTag: msRest.CompositeMapper = {
  serializedName: "RetentionTag",
  type: {
    name: "Composite",
    className: "RetentionTag",
    modelProperties: {
      eTag: {
        readOnly: true,
        serializedName: "eTag",
        type: {
          name: "String"
        }
      },
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      tagName: {
        required: true,
        serializedName: "tagName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AdhocBasedTaggingCriteria: msRest.CompositeMapper = {
  serializedName: "AdhocBasedTaggingCriteria",
  type: {
    name: "Composite",
    className: "AdhocBasedTaggingCriteria",
    modelProperties: {
      tagInfo: {
        serializedName: "tagInfo",
        type: {
          name: "Composite",
          className: "RetentionTag"
        }
      }
    }
  }
};

export const TriggerContext: msRest.CompositeMapper = {
  serializedName: "TriggerContext",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    uberParent: "TriggerContext",
    className: "TriggerContext",
    modelProperties: {
      objectType: {
        required: true,
        serializedName: "objectType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AdhocBasedTriggerContext: msRest.CompositeMapper = {
  serializedName: "AdhocBasedTriggerContext",
  type: {
    name: "Composite",
    polymorphicDiscriminator: TriggerContext.type.polymorphicDiscriminator,
    uberParent: "TriggerContext",
    className: "AdhocBasedTriggerContext",
    modelProperties: {
      ...TriggerContext.type.modelProperties,
      taggingCriteria: {
        required: true,
        serializedName: "taggingCriteria",
        type: {
          name: "Composite",
          className: "AdhocBasedTaggingCriteria"
        }
      }
    }
  }
};

export const RecoveryPointDataStoreDetails: msRest.CompositeMapper = {
  serializedName: "RecoveryPointDataStoreDetails",
  type: {
    name: "Composite",
    className: "RecoveryPointDataStoreDetails",
    modelProperties: {
      creationTime: {
        serializedName: "creationTime",
        type: {
          name: "DateTime"
        }
      },
      expiryTime: {
        serializedName: "expiryTime",
        type: {
          name: "DateTime"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      metaData: {
        serializedName: "metaData",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      visible: {
        serializedName: "visible",
        type: {
          name: "Boolean"
        }
      },
      rehydrationExpiryTime: {
        readOnly: true,
        serializedName: "rehydrationExpiryTime",
        type: {
          name: "DateTime"
        }
      },
      rehydrationStatus: {
        readOnly: true,
        serializedName: "rehydrationStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureBackupRecoveryPoint: msRest.CompositeMapper = {
  serializedName: "AzureBackupRecoveryPoint",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    uberParent: "AzureBackupRecoveryPoint",
    className: "AzureBackupRecoveryPoint",
    modelProperties: {
      objectType: {
        required: true,
        serializedName: "objectType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureBackupDiscreteRecoveryPoint: msRest.CompositeMapper = {
  serializedName: "AzureBackupDiscreteRecoveryPoint",
  type: {
    name: "Composite",
    polymorphicDiscriminator: AzureBackupRecoveryPoint.type.polymorphicDiscriminator,
    uberParent: "AzureBackupRecoveryPoint",
    className: "AzureBackupDiscreteRecoveryPoint",
    modelProperties: {
      ...AzureBackupRecoveryPoint.type.modelProperties,
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      recoveryPointDataStoresDetails: {
        serializedName: "recoveryPointDataStoresDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecoveryPointDataStoreDetails"
            }
          }
        }
      },
      recoveryPointTime: {
        required: true,
        serializedName: "recoveryPointTime",
        type: {
          name: "DateTime"
        }
      },
      recoveryPointType: {
        serializedName: "recoveryPointType",
        type: {
          name: "String"
        }
      },
      retentionTagName: {
        serializedName: "retentionTagName",
        type: {
          name: "String"
        }
      },
      retentionTagVersion: {
        serializedName: "retentionTagVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InnerError: msRest.CompositeMapper = {
  serializedName: "InnerError",
  type: {
    name: "Composite",
    className: "InnerError",
    modelProperties: {
      additionalInfo: {
        serializedName: "additionalInfo",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      embeddedInnerError: {
        serializedName: "embeddedInnerError",
        type: {
          name: "Composite",
          className: "InnerError"
        }
      }
    }
  }
};

export const UserFacingError: msRest.CompositeMapper = {
  serializedName: "UserFacingError",
  type: {
    name: "Composite",
    className: "UserFacingError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UserFacingError"
            }
          }
        }
      },
      innerError: {
        serializedName: "innerError",
        type: {
          name: "Composite",
          className: "InnerError"
        }
      },
      isRetryable: {
        serializedName: "isRetryable",
        type: {
          name: "Boolean"
        }
      },
      isUserError: {
        serializedName: "isUserError",
        type: {
          name: "Boolean"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      recommendedAction: {
        serializedName: "recommendedAction",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RestoreJobRecoveryPointDetails: msRest.CompositeMapper = {
  serializedName: "RestoreJobRecoveryPointDetails",
  type: {
    name: "Composite",
    className: "RestoreJobRecoveryPointDetails",
    modelProperties: {
      recoveryPointID: {
        serializedName: "recoveryPointID",
        type: {
          name: "String"
        }
      },
      recoveryPointTime: {
        serializedName: "recoveryPointTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const JobSubTask: msRest.CompositeMapper = {
  serializedName: "JobSubTask",
  type: {
    name: "Composite",
    className: "JobSubTask",
    modelProperties: {
      additionalDetails: {
        serializedName: "additionalDetails",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      taskId: {
        required: true,
        serializedName: "taskId",
        type: {
          name: "Number"
        }
      },
      taskName: {
        required: true,
        serializedName: "taskName",
        type: {
          name: "String"
        }
      },
      taskProgress: {
        readOnly: true,
        serializedName: "taskProgress",
        type: {
          name: "String"
        }
      },
      taskStatus: {
        required: true,
        serializedName: "taskStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobExtendedInfo: msRest.CompositeMapper = {
  serializedName: "JobExtendedInfo",
  type: {
    name: "Composite",
    className: "JobExtendedInfo",
    modelProperties: {
      additionalDetails: {
        serializedName: "additionalDetails",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      backupInstanceState: {
        readOnly: true,
        serializedName: "backupInstanceState",
        type: {
          name: "String"
        }
      },
      dataTransferredInBytes: {
        readOnly: true,
        serializedName: "dataTransferredInBytes",
        type: {
          name: "Number"
        }
      },
      recoveryDestination: {
        readOnly: true,
        serializedName: "recoveryDestination",
        type: {
          name: "String"
        }
      },
      sourceRecoverPoint: {
        readOnly: true,
        serializedName: "sourceRecoverPoint",
        type: {
          name: "Composite",
          className: "RestoreJobRecoveryPointDetails"
        }
      },
      subTasks: {
        readOnly: true,
        serializedName: "subTasks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobSubTask"
            }
          }
        }
      },
      targetRecoverPoint: {
        readOnly: true,
        serializedName: "targetRecoverPoint",
        type: {
          name: "Composite",
          className: "RestoreJobRecoveryPointDetails"
        }
      }
    }
  }
};

export const AzureBackupJob: msRest.CompositeMapper = {
  serializedName: "AzureBackupJob",
  type: {
    name: "Composite",
    className: "AzureBackupJob",
    modelProperties: {
      activityID: {
        required: true,
        serializedName: "activityID",
        type: {
          name: "String"
        }
      },
      backupInstanceFriendlyName: {
        required: true,
        serializedName: "backupInstanceFriendlyName",
        type: {
          name: "String"
        }
      },
      backupInstanceId: {
        readOnly: true,
        serializedName: "backupInstanceId",
        type: {
          name: "String"
        }
      },
      dataSourceId: {
        required: true,
        serializedName: "dataSourceId",
        type: {
          name: "String"
        }
      },
      dataSourceLocation: {
        required: true,
        serializedName: "dataSourceLocation",
        type: {
          name: "String"
        }
      },
      dataSourceName: {
        required: true,
        serializedName: "dataSourceName",
        type: {
          name: "String"
        }
      },
      dataSourceSetName: {
        required: true,
        serializedName: "dataSourceSetName",
        type: {
          name: "String"
        }
      },
      dataSourceType: {
        required: true,
        serializedName: "dataSourceType",
        type: {
          name: "String"
        }
      },
      duration: {
        readOnly: true,
        serializedName: "duration",
        type: {
          name: "TimeSpan"
        }
      },
      endTime: {
        readOnly: true,
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      errorDetails: {
        readOnly: true,
        serializedName: "errorDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UserFacingError"
            }
          }
        }
      },
      extendedInfo: {
        readOnly: true,
        serializedName: "extendedInfo",
        type: {
          name: "Composite",
          className: "JobExtendedInfo"
        }
      },
      isUserTriggered: {
        required: true,
        serializedName: "isUserTriggered",
        type: {
          name: "Boolean"
        }
      },
      operation: {
        required: true,
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      operationCategory: {
        required: true,
        serializedName: "operationCategory",
        type: {
          name: "String"
        }
      },
      policyId: {
        readOnly: true,
        serializedName: "policyId",
        type: {
          name: "String"
        }
      },
      policyName: {
        readOnly: true,
        serializedName: "policyName",
        type: {
          name: "String"
        }
      },
      progressEnabled: {
        required: true,
        serializedName: "progressEnabled",
        type: {
          name: "Boolean"
        }
      },
      progressUrl: {
        readOnly: true,
        serializedName: "progressUrl",
        type: {
          name: "String"
        }
      },
      restoreType: {
        readOnly: true,
        serializedName: "restoreType",
        type: {
          name: "String"
        }
      },
      sourceResourceGroup: {
        required: true,
        serializedName: "sourceResourceGroup",
        type: {
          name: "String"
        }
      },
      sourceSubscriptionID: {
        required: true,
        serializedName: "sourceSubscriptionID",
        type: {
          name: "String"
        }
      },
      startTime: {
        required: true,
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      status: {
        required: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        required: true,
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      },
      supportedActions: {
        required: true,
        serializedName: "supportedActions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      vaultName: {
        required: true,
        serializedName: "vaultName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DppResource: msRest.CompositeMapper = {
  serializedName: "DppResource",
  type: {
    name: "Composite",
    className: "DppResource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const AzureBackupJobResource: msRest.CompositeMapper = {
  serializedName: "AzureBackupJobResource",
  type: {
    name: "Composite",
    className: "AzureBackupJobResource",
    modelProperties: {
      ...DppResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "AzureBackupJob"
        }
      }
    }
  }
};

export const BackupParameters: msRest.CompositeMapper = {
  serializedName: "BackupParameters",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    uberParent: "BackupParameters",
    className: "BackupParameters",
    modelProperties: {
      objectType: {
        required: true,
        serializedName: "objectType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureBackupParams: msRest.CompositeMapper = {
  serializedName: "AzureBackupParams",
  type: {
    name: "Composite",
    polymorphicDiscriminator: BackupParameters.type.polymorphicDiscriminator,
    uberParent: "BackupParameters",
    className: "AzureBackupParams",
    modelProperties: {
      ...BackupParameters.type.modelProperties,
      backupType: {
        required: true,
        serializedName: "backupType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureBackupRestoreRequest: msRest.CompositeMapper = {
  serializedName: "AzureBackupRestoreRequest",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    uberParent: "AzureBackupRestoreRequest",
    className: "AzureBackupRestoreRequest",
    modelProperties: {
      restoreTargetInfo: {
        required: true,
        serializedName: "restoreTargetInfo",
        defaultValue: {},
        type: {
          name: "Composite",
          className: "RestoreTargetInfoBase"
        }
      },
      sourceDataStoreType: {
        required: true,
        serializedName: "sourceDataStoreType",
        type: {
          name: "String"
        }
      },
      objectType: {
        required: true,
        serializedName: "objectType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureBackupRecoveryPointBasedRestoreRequest: msRest.CompositeMapper = {
  serializedName: "AzureBackupRecoveryPointBasedRestoreRequest",
  type: {
    name: "Composite",
    polymorphicDiscriminator: AzureBackupRestoreRequest.type.polymorphicDiscriminator,
    uberParent: "AzureBackupRestoreRequest",
    className: "AzureBackupRecoveryPointBasedRestoreRequest",
    modelProperties: {
      ...AzureBackupRestoreRequest.type.modelProperties,
      recoveryPointId: {
        required: true,
        serializedName: "recoveryPointId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureBackupRecoveryPointResource: msRest.CompositeMapper = {
  serializedName: "AzureBackupRecoveryPointResource",
  type: {
    name: "Composite",
    className: "AzureBackupRecoveryPointResource",
    modelProperties: {
      ...DppResource.type.modelProperties,
      objectType: {
        required: true,
        serializedName: "properties.objectType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureBackupRehydrationRequest: msRest.CompositeMapper = {
  serializedName: "AzureBackupRehydrationRequest",
  type: {
    name: "Composite",
    className: "AzureBackupRehydrationRequest",
    modelProperties: {
      recoveryPointId: {
        required: true,
        serializedName: "recoveryPointId",
        type: {
          name: "String"
        }
      },
      rehydrationPriority: {
        serializedName: "rehydrationPriority",
        type: {
          name: "String"
        }
      },
      rehydrationRetentionDuration: {
        required: true,
        serializedName: "rehydrationRetentionDuration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RestoreTargetInfoBase: msRest.CompositeMapper = {
  serializedName: "RestoreTargetInfoBase",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    uberParent: "RestoreTargetInfoBase",
    className: "RestoreTargetInfoBase",
    modelProperties: {
      recoveryOption: {
        required: true,
        isConstant: true,
        serializedName: "recoveryOption",
        defaultValue: 'FailIfExists',
        type: {
          name: "String"
        }
      },
      restoreLocation: {
        serializedName: "restoreLocation",
        type: {
          name: "String"
        }
      },
      objectType: {
        required: true,
        serializedName: "objectType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureBackupRestoreWithRehydrationRequest: msRest.CompositeMapper = {
  serializedName: "AzureBackupRestoreWithRehydrationRequest",
  type: {
    name: "Composite",
    polymorphicDiscriminator: AzureBackupRestoreRequest.type.polymorphicDiscriminator,
    uberParent: "AzureBackupRestoreRequest",
    className: "AzureBackupRestoreWithRehydrationRequest",
    modelProperties: {
      ...AzureBackupRecoveryPointBasedRestoreRequest.type.modelProperties,
      rehydrationPriority: {
        required: true,
        serializedName: "rehydrationPriority",
        type: {
          name: "String"
        }
      },
      rehydrationRetentionDuration: {
        required: true,
        serializedName: "rehydrationRetentionDuration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataStoreInfoBase: msRest.CompositeMapper = {
  serializedName: "DataStoreInfoBase",
  type: {
    name: "Composite",
    className: "DataStoreInfoBase",
    modelProperties: {
      dataStoreType: {
        required: true,
        serializedName: "dataStoreType",
        type: {
          name: "String"
        }
      },
      objectType: {
        required: true,
        serializedName: "objectType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BasePolicyRule: msRest.CompositeMapper = {
  serializedName: "BasePolicyRule",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    uberParent: "BasePolicyRule",
    className: "BasePolicyRule",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      objectType: {
        required: true,
        serializedName: "objectType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureBackupRule: msRest.CompositeMapper = {
  serializedName: "AzureBackupRule",
  type: {
    name: "Composite",
    polymorphicDiscriminator: BasePolicyRule.type.polymorphicDiscriminator,
    uberParent: "BasePolicyRule",
    className: "AzureBackupRule",
    modelProperties: {
      ...BasePolicyRule.type.modelProperties,
      backupParameters: {
        serializedName: "backupParameters",
        type: {
          name: "Composite",
          className: "BackupParameters"
        }
      },
      dataStore: {
        required: true,
        serializedName: "dataStore",
        type: {
          name: "Composite",
          className: "DataStoreInfoBase"
        }
      },
      trigger: {
        required: true,
        serializedName: "trigger",
        type: {
          name: "Composite",
          className: "TriggerContext"
        }
      }
    }
  }
};

export const DataStoreParameters: msRest.CompositeMapper = {
  serializedName: "DataStoreParameters",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    uberParent: "DataStoreParameters",
    className: "DataStoreParameters",
    modelProperties: {
      dataStoreType: {
        required: true,
        serializedName: "dataStoreType",
        type: {
          name: "String"
        }
      },
      objectType: {
        required: true,
        serializedName: "objectType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureOperationalStoreParameters: msRest.CompositeMapper = {
  serializedName: "AzureOperationalStoreParameters",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataStoreParameters.type.polymorphicDiscriminator,
    uberParent: "DataStoreParameters",
    className: "AzureOperationalStoreParameters",
    modelProperties: {
      ...DataStoreParameters.type.modelProperties,
      resourceGroupId: {
        serializedName: "resourceGroupId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CopyOption: msRest.CompositeMapper = {
  serializedName: "CopyOption",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    uberParent: "CopyOption",
    className: "CopyOption",
    modelProperties: {
      objectType: {
        required: true,
        serializedName: "objectType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TargetCopySetting: msRest.CompositeMapper = {
  serializedName: "TargetCopySetting",
  type: {
    name: "Composite",
    className: "TargetCopySetting",
    modelProperties: {
      copyAfter: {
        required: true,
        serializedName: "copyAfter",
        type: {
          name: "Composite",
          className: "CopyOption"
        }
      },
      dataStore: {
        required: true,
        serializedName: "dataStore",
        type: {
          name: "Composite",
          className: "DataStoreInfoBase"
        }
      }
    }
  }
};

export const SourceLifeCycle: msRest.CompositeMapper = {
  serializedName: "SourceLifeCycle",
  type: {
    name: "Composite",
    className: "SourceLifeCycle",
    modelProperties: {
      deleteAfter: {
        required: true,
        serializedName: "deleteAfter",
        type: {
          name: "Composite",
          className: "DeleteOption"
        }
      },
      sourceDataStore: {
        required: true,
        serializedName: "sourceDataStore",
        type: {
          name: "Composite",
          className: "DataStoreInfoBase"
        }
      },
      targetDataStoreCopySettings: {
        serializedName: "targetDataStoreCopySettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TargetCopySetting"
            }
          }
        }
      }
    }
  }
};

export const AzureRetentionRule: msRest.CompositeMapper = {
  serializedName: "AzureRetentionRule",
  type: {
    name: "Composite",
    polymorphicDiscriminator: BasePolicyRule.type.polymorphicDiscriminator,
    uberParent: "BasePolicyRule",
    className: "AzureRetentionRule",
    modelProperties: {
      ...BasePolicyRule.type.modelProperties,
      isDefault: {
        serializedName: "isDefault",
        type: {
          name: "Boolean"
        }
      },
      lifecycles: {
        required: true,
        serializedName: "lifecycles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SourceLifeCycle"
            }
          }
        }
      }
    }
  }
};

export const BackupCriteria: msRest.CompositeMapper = {
  serializedName: "BackupCriteria",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    uberParent: "BackupCriteria",
    className: "BackupCriteria",
    modelProperties: {
      objectType: {
        required: true,
        serializedName: "objectType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Datasource: msRest.CompositeMapper = {
  serializedName: "Datasource",
  type: {
    name: "Composite",
    className: "Datasource",
    modelProperties: {
      datasourceType: {
        serializedName: "datasourceType",
        type: {
          name: "String"
        }
      },
      objectType: {
        serializedName: "objectType",
        type: {
          name: "String"
        }
      },
      resourceID: {
        required: true,
        serializedName: "resourceID",
        type: {
          name: "String"
        }
      },
      resourceLocation: {
        serializedName: "resourceLocation",
        type: {
          name: "String"
        }
      },
      resourceName: {
        serializedName: "resourceName",
        type: {
          name: "String"
        }
      },
      resourceType: {
        serializedName: "resourceType",
        type: {
          name: "String"
        }
      },
      resourceUri: {
        serializedName: "resourceUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatasourceSet: msRest.CompositeMapper = {
  serializedName: "DatasourceSet",
  type: {
    name: "Composite",
    className: "DatasourceSet",
    modelProperties: {
      datasourceType: {
        serializedName: "datasourceType",
        type: {
          name: "String"
        }
      },
      objectType: {
        serializedName: "objectType",
        type: {
          name: "String"
        }
      },
      resourceID: {
        required: true,
        serializedName: "resourceID",
        type: {
          name: "String"
        }
      },
      resourceLocation: {
        serializedName: "resourceLocation",
        type: {
          name: "String"
        }
      },
      resourceName: {
        serializedName: "resourceName",
        type: {
          name: "String"
        }
      },
      resourceType: {
        serializedName: "resourceType",
        type: {
          name: "String"
        }
      },
      resourceUri: {
        serializedName: "resourceUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PolicyParameters: msRest.CompositeMapper = {
  serializedName: "PolicyParameters",
  type: {
    name: "Composite",
    className: "PolicyParameters",
    modelProperties: {
      dataStoreParametersList: {
        serializedName: "dataStoreParametersList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataStoreParameters"
            }
          }
        }
      }
    }
  }
};

export const PolicyInfo: msRest.CompositeMapper = {
  serializedName: "PolicyInfo",
  type: {
    name: "Composite",
    className: "PolicyInfo",
    modelProperties: {
      policyId: {
        required: true,
        serializedName: "policyId",
        type: {
          name: "String"
        }
      },
      policyVersion: {
        readOnly: true,
        serializedName: "policyVersion",
        type: {
          name: "String"
        }
      },
      policyParameters: {
        serializedName: "policyParameters",
        type: {
          name: "Composite",
          className: "PolicyParameters"
        }
      }
    }
  }
};

export const ProtectionStatusDetails: msRest.CompositeMapper = {
  serializedName: "ProtectionStatusDetails",
  type: {
    name: "Composite",
    className: "ProtectionStatusDetails",
    modelProperties: {
      errorDetails: {
        serializedName: "errorDetails",
        type: {
          name: "Composite",
          className: "UserFacingError"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackupInstance: msRest.CompositeMapper = {
  serializedName: "BackupInstance",
  type: {
    name: "Composite",
    className: "BackupInstance",
    modelProperties: {
      dataSourceInfo: {
        required: true,
        serializedName: "dataSourceInfo",
        type: {
          name: "Composite",
          className: "Datasource"
        }
      },
      dataSourceSetInfo: {
        serializedName: "dataSourceSetInfo",
        type: {
          name: "Composite",
          className: "DatasourceSet"
        }
      },
      objectType: {
        serializedName: "objectType",
        type: {
          name: "String"
        }
      },
      policyInfo: {
        required: true,
        serializedName: "policyInfo",
        type: {
          name: "Composite",
          className: "PolicyInfo"
        }
      },
      protectionStatus: {
        readOnly: true,
        serializedName: "protectionStatus",
        type: {
          name: "Composite",
          className: "ProtectionStatusDetails"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackupInstanceResource: msRest.CompositeMapper = {
  serializedName: "BackupInstanceResource",
  type: {
    name: "Composite",
    className: "BackupInstanceResource",
    modelProperties: {
      ...DppResource.type.modelProperties,
      dataSourceInfo: {
        required: true,
        serializedName: "properties.dataSourceInfo",
        type: {
          name: "Composite",
          className: "Datasource"
        }
      },
      dataSourceSetInfo: {
        serializedName: "properties.dataSourceSetInfo",
        type: {
          name: "Composite",
          className: "DatasourceSet"
        }
      },
      objectType: {
        serializedName: "properties.objectType",
        type: {
          name: "String"
        }
      },
      policyInfo: {
        required: true,
        serializedName: "properties.policyInfo",
        type: {
          name: "Composite",
          className: "PolicyInfo"
        }
      },
      protectionStatus: {
        readOnly: true,
        serializedName: "properties.protectionStatus",
        type: {
          name: "Composite",
          className: "ProtectionStatusDetails"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BaseBackupPolicy: msRest.CompositeMapper = {
  serializedName: "BaseBackupPolicy",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    uberParent: "BaseBackupPolicy",
    className: "BaseBackupPolicy",
    modelProperties: {
      datasourceTypes: {
        required: true,
        serializedName: "datasourceTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      objectType: {
        required: true,
        serializedName: "objectType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackupPolicy: msRest.CompositeMapper = {
  serializedName: "BackupPolicy",
  type: {
    name: "Composite",
    polymorphicDiscriminator: BaseBackupPolicy.type.polymorphicDiscriminator,
    uberParent: "BaseBackupPolicy",
    className: "BackupPolicy",
    modelProperties: {
      ...BaseBackupPolicy.type.modelProperties,
      policyRules: {
        required: true,
        serializedName: "policyRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BasePolicyRule"
            }
          }
        }
      }
    }
  }
};

export const BackupSchedule: msRest.CompositeMapper = {
  serializedName: "BackupSchedule",
  type: {
    name: "Composite",
    className: "BackupSchedule",
    modelProperties: {
      repeatingTimeIntervals: {
        required: true,
        serializedName: "repeatingTimeIntervals",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const StorageSetting: msRest.CompositeMapper = {
  serializedName: "StorageSetting",
  type: {
    name: "Composite",
    className: "StorageSetting",
    modelProperties: {
      dataStoreType: {
        serializedName: "dataStoreType",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DppTrackedResource: msRest.CompositeMapper = {
  serializedName: "DppTrackedResource",
  type: {
    name: "Composite",
    className: "DppTrackedResource",
    modelProperties: {
      eTag: {
        serializedName: "eTag",
        type: {
          name: "String"
        }
      },
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "DppIdentityDetails"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const BackupVaultResource: msRest.CompositeMapper = {
  serializedName: "BackupVaultResource",
  type: {
    name: "Composite",
    className: "BackupVaultResource",
    modelProperties: {
      ...DppTrackedResource.type.modelProperties,
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      storageSettings: {
        serializedName: "properties.storageSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageSetting"
            }
          }
        }
      }
    }
  }
};

export const BaseBackupPolicyResource: msRest.CompositeMapper = {
  serializedName: "BaseBackupPolicyResource",
  type: {
    name: "Composite",
    className: "BaseBackupPolicyResource",
    modelProperties: {
      ...DppResource.type.modelProperties,
      datasourceTypes: {
        required: true,
        serializedName: "properties.datasourceTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      objectType: {
        required: true,
        serializedName: "properties.objectType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityRequest: msRest.CompositeMapper = {
  serializedName: "CheckNameAvailabilityRequest",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityResult: msRest.CompositeMapper = {
  serializedName: "CheckNameAvailabilityResult",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityResult",
    modelProperties: {
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      nameAvailable: {
        serializedName: "nameAvailable",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClientDiscoveryDisplay: msRest.CompositeMapper = {
  serializedName: "ClientDiscoveryDisplay",
  type: {
    name: "Composite",
    className: "ClientDiscoveryDisplay",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClientDiscoveryForLogSpecification: msRest.CompositeMapper = {
  serializedName: "ClientDiscoveryForLogSpecification",
  type: {
    name: "Composite",
    className: "ClientDiscoveryForLogSpecification",
    modelProperties: {
      blobDuration: {
        serializedName: "blobDuration",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClientDiscoveryForServiceSpecification: msRest.CompositeMapper = {
  serializedName: "ClientDiscoveryForServiceSpecification",
  type: {
    name: "Composite",
    className: "ClientDiscoveryForServiceSpecification",
    modelProperties: {
      logSpecifications: {
        serializedName: "logSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClientDiscoveryForLogSpecification"
            }
          }
        }
      }
    }
  }
};

export const ClientDiscoveryValueForSingleApi: msRest.CompositeMapper = {
  serializedName: "ClientDiscoveryValueForSingleApi",
  type: {
    name: "Composite",
    className: "ClientDiscoveryValueForSingleApi",
    modelProperties: {
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "ClientDiscoveryDisplay"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        type: {
          name: "Boolean"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      serviceSpecification: {
        serializedName: "properties.serviceSpecification",
        type: {
          name: "Composite",
          className: "ClientDiscoveryForServiceSpecification"
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: msRest.CompositeMapper = {
  serializedName: "ErrorAdditionalInfo",
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      info: {
        readOnly: true,
        serializedName: "info",
        type: {
          name: "Object"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorModel: msRest.CompositeMapper = {
  serializedName: "Error",
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      additionalInfo: {
        readOnly: true,
        serializedName: "additionalInfo",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      },
      code: {
        readOnly: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      details: {
        readOnly: true,
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorModel"
            }
          }
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        readOnly: true,
        serializedName: "target",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CopyOnExpiryOption: msRest.CompositeMapper = {
  serializedName: "CopyOnExpiryOption",
  type: {
    name: "Composite",
    polymorphicDiscriminator: CopyOption.type.polymorphicDiscriminator,
    uberParent: "CopyOption",
    className: "CopyOnExpiryOption",
    modelProperties: {
      ...CopyOption.type.modelProperties
    }
  }
};

export const CustomCopyOption: msRest.CompositeMapper = {
  serializedName: "CustomCopyOption",
  type: {
    name: "Composite",
    polymorphicDiscriminator: CopyOption.type.polymorphicDiscriminator,
    uberParent: "CopyOption",
    className: "CustomCopyOption",
    modelProperties: {
      ...CopyOption.type.modelProperties,
      duration: {
        serializedName: "duration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Day: msRest.CompositeMapper = {
  serializedName: "Day",
  type: {
    name: "Composite",
    className: "Day",
    modelProperties: {
      date: {
        serializedName: "date",
        type: {
          name: "Number"
        }
      },
      isLast: {
        serializedName: "isLast",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DppIdentityDetails: msRest.CompositeMapper = {
  serializedName: "DppIdentityDetails",
  type: {
    name: "Composite",
    className: "DppIdentityDetails",
    modelProperties: {
      principalId: {
        readOnly: true,
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      tenantId: {
        readOnly: true,
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SystemData: msRest.CompositeMapper = {
  serializedName: "systemData",
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const DppResourceList: msRest.CompositeMapper = {
  serializedName: "DppResourceList",
  type: {
    name: "Composite",
    className: "DppResourceList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DppTrackedResourceList: msRest.CompositeMapper = {
  serializedName: "DppTrackedResourceList",
  type: {
    name: "Composite",
    className: "DppTrackedResourceList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExportJobsResult: msRest.CompositeMapper = {
  serializedName: "ExportJobsResult",
  type: {
    name: "Composite",
    className: "ExportJobsResult",
    modelProperties: {
      blobUrl: {
        readOnly: true,
        serializedName: "blobUrl",
        type: {
          name: "String"
        }
      },
      blobSasKey: {
        readOnly: true,
        serializedName: "blobSasKey",
        type: {
          name: "String"
        }
      },
      excelFileBlobUrl: {
        readOnly: true,
        serializedName: "excelFileBlobUrl",
        type: {
          name: "String"
        }
      },
      excelFileBlobSasKey: {
        readOnly: true,
        serializedName: "excelFileBlobSasKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FeatureValidationRequestBase: msRest.CompositeMapper = {
  serializedName: "FeatureValidationRequestBase",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    uberParent: "FeatureValidationRequestBase",
    className: "FeatureValidationRequestBase",
    modelProperties: {
      objectType: {
        required: true,
        serializedName: "objectType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FeatureValidationRequest: msRest.CompositeMapper = {
  serializedName: "FeatureValidationRequest",
  type: {
    name: "Composite",
    polymorphicDiscriminator: FeatureValidationRequestBase.type.polymorphicDiscriminator,
    uberParent: "FeatureValidationRequestBase",
    className: "FeatureValidationRequest",
    modelProperties: {
      ...FeatureValidationRequestBase.type.modelProperties,
      featureType: {
        serializedName: "featureType",
        type: {
          name: "String"
        }
      },
      featureName: {
        serializedName: "featureName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SupportedFeature: msRest.CompositeMapper = {
  serializedName: "SupportedFeature",
  type: {
    name: "Composite",
    className: "SupportedFeature",
    modelProperties: {
      featureName: {
        serializedName: "featureName",
        type: {
          name: "String"
        }
      },
      supportStatus: {
        serializedName: "supportStatus",
        type: {
          name: "String"
        }
      },
      exposureControlledFeatures: {
        serializedName: "exposureControlledFeatures",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const FeatureValidationResponseBase: msRest.CompositeMapper = {
  serializedName: "FeatureValidationResponseBase",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    uberParent: "FeatureValidationResponseBase",
    className: "FeatureValidationResponseBase",
    modelProperties: {
      objectType: {
        required: true,
        serializedName: "objectType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FeatureValidationResponse: msRest.CompositeMapper = {
  serializedName: "FeatureValidationResponse",
  type: {
    name: "Composite",
    polymorphicDiscriminator: FeatureValidationResponseBase.type.polymorphicDiscriminator,
    uberParent: "FeatureValidationResponseBase",
    className: "FeatureValidationResponse",
    modelProperties: {
      ...FeatureValidationResponseBase.type.modelProperties,
      featureType: {
        serializedName: "featureType",
        type: {
          name: "String"
        }
      },
      features: {
        serializedName: "features",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SupportedFeature"
            }
          }
        }
      }
    }
  }
};

export const ImmediateCopyOption: msRest.CompositeMapper = {
  serializedName: "ImmediateCopyOption",
  type: {
    name: "Composite",
    polymorphicDiscriminator: CopyOption.type.polymorphicDiscriminator,
    uberParent: "CopyOption",
    className: "ImmediateCopyOption",
    modelProperties: {
      ...CopyOption.type.modelProperties
    }
  }
};

export const OperationExtendedInfo: msRest.CompositeMapper = {
  serializedName: "OperationExtendedInfo",
  type: {
    name: "Composite",
    className: "OperationExtendedInfo",
    modelProperties: {
      objectType: {
        serializedName: "objectType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationJobExtendedInfo: msRest.CompositeMapper = {
  serializedName: "OperationJobExtendedInfo",
  type: {
    name: "Composite",
    className: "OperationJobExtendedInfo",
    modelProperties: {
      ...OperationExtendedInfo.type.modelProperties,
      jobId: {
        serializedName: "jobId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationResource: msRest.CompositeMapper = {
  serializedName: "OperationResource",
  type: {
    name: "Composite",
    className: "OperationResource",
    modelProperties: {
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorModel"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      objectType: {
        serializedName: "properties.objectType",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PatchResourceRequestInput: msRest.CompositeMapper = {
  serializedName: "PatchResourceRequestInput",
  type: {
    name: "Composite",
    className: "PatchResourceRequestInput",
    modelProperties: {
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "DppIdentityDetails"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const TargetDetails: msRest.CompositeMapper = {
  serializedName: "TargetDetails",
  type: {
    name: "Composite",
    className: "TargetDetails",
    modelProperties: {
      filePrefix: {
        required: true,
        serializedName: "filePrefix",
        type: {
          name: "String"
        }
      },
      restoreTargetLocationType: {
        required: true,
        serializedName: "restoreTargetLocationType",
        type: {
          name: "String"
        }
      },
      url: {
        required: true,
        serializedName: "url",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RestoreFilesTargetInfo: msRest.CompositeMapper = {
  serializedName: "RestoreFilesTargetInfo",
  type: {
    name: "Composite",
    polymorphicDiscriminator: RestoreTargetInfoBase.type.polymorphicDiscriminator,
    uberParent: "RestoreTargetInfoBase",
    className: "RestoreFilesTargetInfo",
    modelProperties: {
      ...RestoreTargetInfoBase.type.modelProperties,
      targetDetails: {
        required: true,
        serializedName: "targetDetails",
        type: {
          name: "Composite",
          className: "TargetDetails"
        }
      }
    }
  }
};

export const RestoreTargetInfo: msRest.CompositeMapper = {
  serializedName: "RestoreTargetInfo",
  type: {
    name: "Composite",
    polymorphicDiscriminator: RestoreTargetInfoBase.type.polymorphicDiscriminator,
    uberParent: "RestoreTargetInfoBase",
    className: "RestoreTargetInfo",
    modelProperties: {
      ...RestoreTargetInfoBase.type.modelProperties,
      datasourceInfo: {
        required: true,
        serializedName: "datasourceInfo",
        type: {
          name: "Composite",
          className: "Datasource"
        }
      },
      datasourceSetInfo: {
        serializedName: "datasourceSetInfo",
        type: {
          name: "Composite",
          className: "DatasourceSet"
        }
      }
    }
  }
};

export const ScheduleBasedBackupCriteria: msRest.CompositeMapper = {
  serializedName: "ScheduleBasedBackupCriteria",
  type: {
    name: "Composite",
    polymorphicDiscriminator: BackupCriteria.type.polymorphicDiscriminator,
    uberParent: "BackupCriteria",
    className: "ScheduleBasedBackupCriteria",
    modelProperties: {
      ...BackupCriteria.type.modelProperties,
      absoluteCriteria: {
        serializedName: "absoluteCriteria",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      daysOfMonth: {
        serializedName: "daysOfMonth",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Day"
            }
          }
        }
      },
      daysOfTheWeek: {
        serializedName: "daysOfTheWeek",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      monthsOfYear: {
        serializedName: "monthsOfYear",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      scheduleTimes: {
        serializedName: "scheduleTimes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTime"
            }
          }
        }
      },
      weeksOfTheMonth: {
        serializedName: "weeksOfTheMonth",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const TaggingCriteria: msRest.CompositeMapper = {
  serializedName: "TaggingCriteria",
  type: {
    name: "Composite",
    className: "TaggingCriteria",
    modelProperties: {
      criteria: {
        serializedName: "criteria",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BackupCriteria"
            }
          }
        }
      },
      isDefault: {
        required: true,
        serializedName: "isDefault",
        type: {
          name: "Boolean"
        }
      },
      taggingPriority: {
        required: true,
        serializedName: "taggingPriority",
        type: {
          name: "Number"
        }
      },
      tagInfo: {
        required: true,
        serializedName: "tagInfo",
        type: {
          name: "Composite",
          className: "RetentionTag"
        }
      }
    }
  }
};

export const ScheduleBasedTriggerContext: msRest.CompositeMapper = {
  serializedName: "ScheduleBasedTriggerContext",
  type: {
    name: "Composite",
    polymorphicDiscriminator: TriggerContext.type.polymorphicDiscriminator,
    uberParent: "TriggerContext",
    className: "ScheduleBasedTriggerContext",
    modelProperties: {
      ...TriggerContext.type.modelProperties,
      schedule: {
        required: true,
        serializedName: "schedule",
        type: {
          name: "Composite",
          className: "BackupSchedule"
        }
      },
      taggingCriteria: {
        required: true,
        serializedName: "taggingCriteria",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TaggingCriteria"
            }
          }
        }
      }
    }
  }
};

export const TriggerBackupRequest: msRest.CompositeMapper = {
  serializedName: "TriggerBackupRequest",
  type: {
    name: "Composite",
    className: "TriggerBackupRequest",
    modelProperties: {
      backupRuleOptions: {
        required: true,
        serializedName: "backupRuleOptions",
        type: {
          name: "Composite",
          className: "AdHocBackupRuleOptions"
        }
      }
    }
  }
};

export const ValidateForBackupRequest: msRest.CompositeMapper = {
  serializedName: "ValidateForBackupRequest",
  type: {
    name: "Composite",
    className: "ValidateForBackupRequest",
    modelProperties: {
      backupInstance: {
        required: true,
        serializedName: "backupInstance",
        type: {
          name: "Composite",
          className: "BackupInstance"
        }
      }
    }
  }
};

export const ValidateRestoreRequestObject: msRest.CompositeMapper = {
  serializedName: "ValidateRestoreRequestObject",
  type: {
    name: "Composite",
    className: "ValidateRestoreRequestObject",
    modelProperties: {
      restoreRequestObject: {
        required: true,
        serializedName: "restoreRequestObject",
        defaultValue: {},
        type: {
          name: "Composite",
          className: "AzureBackupRestoreRequest"
        }
      }
    }
  }
};

export const BackupInstancesDeleteHeaders: msRest.CompositeMapper = {
  serializedName: "backupinstances-delete-headers",
  type: {
    name: "Composite",
    className: "BackupInstancesDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BackupInstancesAdhocBackupHeaders: msRest.CompositeMapper = {
  serializedName: "backupinstances-adhocbackup-headers",
  type: {
    name: "Composite",
    className: "BackupInstancesAdhocBackupHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BackupInstancesValidateForBackupHeaders: msRest.CompositeMapper = {
  serializedName: "backupinstances-validateforbackup-headers",
  type: {
    name: "Composite",
    className: "BackupInstancesValidateForBackupHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BackupInstancesTriggerRehydrateHeaders: msRest.CompositeMapper = {
  serializedName: "backupinstances-triggerrehydrate-headers",
  type: {
    name: "Composite",
    className: "BackupInstancesTriggerRehydrateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BackupInstancesTriggerRestoreHeaders: msRest.CompositeMapper = {
  serializedName: "backupinstances-triggerrestore-headers",
  type: {
    name: "Composite",
    className: "BackupInstancesTriggerRestoreHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BackupInstancesValidateRestoreHeaders: msRest.CompositeMapper = {
  serializedName: "backupinstances-validaterestore-headers",
  type: {
    name: "Composite",
    className: "BackupInstancesValidateRestoreHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ExportJobsTriggerHeaders: msRest.CompositeMapper = {
  serializedName: "exportjobs-trigger-headers",
  type: {
    name: "Composite",
    className: "ExportJobsTriggerHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BackupVaultResourceList: msRest.CompositeMapper = {
  serializedName: "BackupVaultResourceList",
  type: {
    name: "Composite",
    className: "BackupVaultResourceList",
    modelProperties: {
      ...DppResourceList.type.modelProperties,
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BackupVaultResource"
            }
          }
        }
      }
    }
  }
};

export const ClientDiscoveryResponse: msRest.CompositeMapper = {
  serializedName: "ClientDiscoveryResponse",
  type: {
    name: "Composite",
    className: "ClientDiscoveryResponse",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClientDiscoveryValueForSingleApi"
            }
          }
        }
      }
    }
  }
};

export const BaseBackupPolicyResourceList: msRest.CompositeMapper = {
  serializedName: "BaseBackupPolicyResourceList",
  type: {
    name: "Composite",
    className: "BaseBackupPolicyResourceList",
    modelProperties: {
      ...DppResourceList.type.modelProperties,
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BaseBackupPolicyResource"
            }
          }
        }
      }
    }
  }
};

export const BackupInstanceResourceList: msRest.CompositeMapper = {
  serializedName: "BackupInstanceResourceList",
  type: {
    name: "Composite",
    className: "BackupInstanceResourceList",
    modelProperties: {
      ...DppResourceList.type.modelProperties,
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BackupInstanceResource"
            }
          }
        }
      }
    }
  }
};

export const AzureBackupRecoveryPointResourceList: msRest.CompositeMapper = {
  serializedName: "AzureBackupRecoveryPointResourceList",
  type: {
    name: "Composite",
    className: "AzureBackupRecoveryPointResourceList",
    modelProperties: {
      ...DppResourceList.type.modelProperties,
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureBackupRecoveryPointResource"
            }
          }
        }
      }
    }
  }
};

export const AzureBackupJobResourceList: msRest.CompositeMapper = {
  serializedName: "AzureBackupJobResourceList",
  type: {
    name: "Composite",
    className: "AzureBackupJobResourceList",
    modelProperties: {
      ...DppResourceList.type.modelProperties,
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureBackupJobResource"
            }
          }
        }
      }
    }
  }
};

export const discriminators = {
  'DeleteOption.AbsoluteDeleteOption' : AbsoluteDeleteOption,
  'TriggerContext.AdhocBasedTriggerContext' : AdhocBasedTriggerContext,
  'AzureBackupRecoveryPoint.AzureBackupDiscreteRecoveryPoint' : AzureBackupDiscreteRecoveryPoint,
  'BackupParameters.AzureBackupParams' : AzureBackupParams,
  'AzureBackupRecoveryPoint' : AzureBackupRecoveryPoint,
  'AzureBackupRestoreRequest.AzureBackupRecoveryPointBasedRestoreRequest' : AzureBackupRecoveryPointBasedRestoreRequest,
  'RestoreTargetInfoBase' : RestoreTargetInfoBase,
  'AzureBackupRestoreRequest' : AzureBackupRestoreRequest,
  'AzureBackupRestoreRequest.AzureBackupRestoreWithRehydrationRequest' : AzureBackupRestoreWithRehydrationRequest,
  'BackupParameters' : BackupParameters,
  'TriggerContext' : TriggerContext,
  'BasePolicyRule.AzureBackupRule' : AzureBackupRule,
  'DataStoreParameters.AzureOperationalStoreParameters' : AzureOperationalStoreParameters,
  'DeleteOption' : DeleteOption,
  'CopyOption' : CopyOption,
  'BasePolicyRule.AzureRetentionRule' : AzureRetentionRule,
  'BackupCriteria' : BackupCriteria,
  'DataStoreParameters' : DataStoreParameters,
  'BasePolicyRule' : BasePolicyRule,
  'BaseBackupPolicy.BackupPolicy' : BackupPolicy,
  'BaseBackupPolicy' : BaseBackupPolicy,
  'CopyOption.CopyOnExpiryOption' : CopyOnExpiryOption,
  'CopyOption.CustomCopyOption' : CustomCopyOption,
  'FeatureValidationRequestBase.FeatureValidationRequest' : FeatureValidationRequest,
  'FeatureValidationRequestBase' : FeatureValidationRequestBase,
  'FeatureValidationResponseBase.FeatureValidationResponse' : FeatureValidationResponse,
  'FeatureValidationResponseBase' : FeatureValidationResponseBase,
  'CopyOption.ImmediateCopyOption' : ImmediateCopyOption,
  'RestoreTargetInfoBase.RestoreFilesTargetInfo' : RestoreFilesTargetInfo,
  'RestoreTargetInfoBase.RestoreTargetInfo' : RestoreTargetInfo,
  'BackupCriteria.ScheduleBasedBackupCriteria' : ScheduleBasedBackupCriteria,
  'TriggerContext.ScheduleBasedTriggerContext' : ScheduleBasedTriggerContext

};
