/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  NetAppAccount,
  AccountsListBySubscriptionOptionalParams,
  AccountsListOptionalParams,
  AccountsGetOptionalParams,
  AccountsGetResponse,
  AccountsCreateOrUpdateOptionalParams,
  AccountsCreateOrUpdateResponse,
  AccountsDeleteOptionalParams,
  NetAppAccountPatch,
  AccountsUpdateOptionalParams,
  AccountsUpdateResponse,
  AccountsRenewCredentialsOptionalParams,
  AccountsTransitionToCmkOptionalParams,
  AccountsTransitionToCmkResponse,
  AccountsGetChangeKeyVaultInformationOptionalParams,
  AccountsGetChangeKeyVaultInformationResponse,
  AccountsChangeKeyVaultOptionalParams,
  AccountsChangeKeyVaultResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Accounts. */
export interface Accounts {
  /**
   * List and describe all NetApp accounts in the subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: AccountsListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<NetAppAccount>;
  /**
   * List and describe all NetApp accounts in the resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    options?: AccountsListOptionalParams,
  ): PagedAsyncIterableIterator<NetAppAccount>;
  /**
   * Get the NetApp account
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the NetApp account
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    options?: AccountsGetOptionalParams,
  ): Promise<AccountsGetResponse>;
  /**
   * Create or update the specified NetApp account within the resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the NetApp account
   * @param body NetApp Account object supplied in the body of the operation.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    accountName: string,
    body: NetAppAccount,
    options?: AccountsCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<AccountsCreateOrUpdateResponse>,
      AccountsCreateOrUpdateResponse
    >
  >;
  /**
   * Create or update the specified NetApp account within the resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the NetApp account
   * @param body NetApp Account object supplied in the body of the operation.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    accountName: string,
    body: NetAppAccount,
    options?: AccountsCreateOrUpdateOptionalParams,
  ): Promise<AccountsCreateOrUpdateResponse>;
  /**
   * Delete the specified NetApp account
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the NetApp account
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    accountName: string,
    options?: AccountsDeleteOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Delete the specified NetApp account
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the NetApp account
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    accountName: string,
    options?: AccountsDeleteOptionalParams,
  ): Promise<void>;
  /**
   * Patch the specified NetApp account
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the NetApp account
   * @param body NetApp Account object supplied in the body of the operation.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    accountName: string,
    body: NetAppAccountPatch,
    options?: AccountsUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<AccountsUpdateResponse>,
      AccountsUpdateResponse
    >
  >;
  /**
   * Patch the specified NetApp account
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the NetApp account
   * @param body NetApp Account object supplied in the body of the operation.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    accountName: string,
    body: NetAppAccountPatch,
    options?: AccountsUpdateOptionalParams,
  ): Promise<AccountsUpdateResponse>;
  /**
   * Renew identity credentials that are used to authenticate to key vault, for customer-managed key
   * encryption. If encryption.identity.principalId does not match identity.principalId, running this
   * operation will fix it.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the NetApp account
   * @param options The options parameters.
   */
  beginRenewCredentials(
    resourceGroupName: string,
    accountName: string,
    options?: AccountsRenewCredentialsOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Renew identity credentials that are used to authenticate to key vault, for customer-managed key
   * encryption. If encryption.identity.principalId does not match identity.principalId, running this
   * operation will fix it.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the NetApp account
   * @param options The options parameters.
   */
  beginRenewCredentialsAndWait(
    resourceGroupName: string,
    accountName: string,
    options?: AccountsRenewCredentialsOptionalParams,
  ): Promise<void>;
  /**
   * Transitions all volumes in a VNet to a different encryption key source (Microsoft-managed key or
   * Azure Key Vault). Operation fails if targeted volumes share encryption sibling set with volumes from
   * another account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the NetApp account
   * @param options The options parameters.
   */
  beginTransitionToCmk(
    resourceGroupName: string,
    accountName: string,
    options?: AccountsTransitionToCmkOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<AccountsTransitionToCmkResponse>,
      AccountsTransitionToCmkResponse
    >
  >;
  /**
   * Transitions all volumes in a VNet to a different encryption key source (Microsoft-managed key or
   * Azure Key Vault). Operation fails if targeted volumes share encryption sibling set with volumes from
   * another account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the NetApp account
   * @param options The options parameters.
   */
  beginTransitionToCmkAndWait(
    resourceGroupName: string,
    accountName: string,
    options?: AccountsTransitionToCmkOptionalParams,
  ): Promise<AccountsTransitionToCmkResponse>;
  /**
   * Contains data from encryption.keyVaultProperties as well as information about which private endpoint
   * is used by each encryption sibling set. Response from this endpoint can be modified and used as
   * request body for POST request.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the NetApp account
   * @param options The options parameters.
   */
  beginGetChangeKeyVaultInformation(
    resourceGroupName: string,
    accountName: string,
    options?: AccountsGetChangeKeyVaultInformationOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<AccountsGetChangeKeyVaultInformationResponse>,
      AccountsGetChangeKeyVaultInformationResponse
    >
  >;
  /**
   * Contains data from encryption.keyVaultProperties as well as information about which private endpoint
   * is used by each encryption sibling set. Response from this endpoint can be modified and used as
   * request body for POST request.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the NetApp account
   * @param options The options parameters.
   */
  beginGetChangeKeyVaultInformationAndWait(
    resourceGroupName: string,
    accountName: string,
    options?: AccountsGetChangeKeyVaultInformationOptionalParams,
  ): Promise<AccountsGetChangeKeyVaultInformationResponse>;
  /**
   * Affects existing volumes that are encrypted with Key Vault/Managed HSM, and new volumes. Supports
   * HSM to Key Vault, Key Vault to HSM, HSM to HSM and Key Vault to Key Vault.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the NetApp account
   * @param options The options parameters.
   */
  beginChangeKeyVault(
    resourceGroupName: string,
    accountName: string,
    options?: AccountsChangeKeyVaultOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<AccountsChangeKeyVaultResponse>,
      AccountsChangeKeyVaultResponse
    >
  >;
  /**
   * Affects existing volumes that are encrypted with Key Vault/Managed HSM, and new volumes. Supports
   * HSM to Key Vault, Key Vault to HSM, HSM to HSM and Key Vault to Key Vault.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the NetApp account
   * @param options The options parameters.
   */
  beginChangeKeyVaultAndWait(
    resourceGroupName: string,
    accountName: string,
    options?: AccountsChangeKeyVaultOptionalParams,
  ): Promise<AccountsChangeKeyVaultResponse>;
}
