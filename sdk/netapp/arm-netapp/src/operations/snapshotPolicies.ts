/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/snapshotPoliciesMappers";
import * as Parameters from "../models/parameters";
import { AzureNetAppFilesManagementClientContext } from "../azureNetAppFilesManagementClientContext";

/** Class representing a SnapshotPolicies. */
export class SnapshotPolicies {
  private readonly client: AzureNetAppFilesManagementClientContext;

  /**
   * Create a SnapshotPolicies.
   * @param {AzureNetAppFilesManagementClientContext} client Reference to the service client.
   */
  constructor(client: AzureNetAppFilesManagementClientContext) {
    this.client = client;
  }

  /**
   * List snapshot policy
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param [options] The optional parameters
   * @returns Promise<Models.SnapshotPoliciesListResponse>
   */
  list(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase): Promise<Models.SnapshotPoliciesListResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param callback The callback
   */
  list(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.SnapshotPoliciesList>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SnapshotPoliciesList>): void;
  list(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SnapshotPoliciesList>, callback?: msRest.ServiceCallback<Models.SnapshotPoliciesList>): Promise<Models.SnapshotPoliciesListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.SnapshotPoliciesListResponse>;
  }

  /**
   * Get a snapshot Policy
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param snapshotPolicyName The name of the snapshot policy target
   * @param [options] The optional parameters
   * @returns Promise<Models.SnapshotPoliciesGetResponse>
   */
  get(resourceGroupName: string, accountName: string, snapshotPolicyName: string, options?: msRest.RequestOptionsBase): Promise<Models.SnapshotPoliciesGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param snapshotPolicyName The name of the snapshot policy target
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, snapshotPolicyName: string, callback: msRest.ServiceCallback<Models.SnapshotPolicy>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param snapshotPolicyName The name of the snapshot policy target
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, snapshotPolicyName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SnapshotPolicy>): void;
  get(resourceGroupName: string, accountName: string, snapshotPolicyName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SnapshotPolicy>, callback?: msRest.ServiceCallback<Models.SnapshotPolicy>): Promise<Models.SnapshotPoliciesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        snapshotPolicyName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.SnapshotPoliciesGetResponse>;
  }

  /**
   * Create a snapshot policy
   * @param body Snapshot policy object supplied in the body of the operation.
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param snapshotPolicyName The name of the snapshot policy target
   * @param [options] The optional parameters
   * @returns Promise<Models.SnapshotPoliciesCreateResponse>
   */
  create(body: Models.SnapshotPolicy, resourceGroupName: string, accountName: string, snapshotPolicyName: string, options?: msRest.RequestOptionsBase): Promise<Models.SnapshotPoliciesCreateResponse>;
  /**
   * @param body Snapshot policy object supplied in the body of the operation.
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param snapshotPolicyName The name of the snapshot policy target
   * @param callback The callback
   */
  create(body: Models.SnapshotPolicy, resourceGroupName: string, accountName: string, snapshotPolicyName: string, callback: msRest.ServiceCallback<Models.SnapshotPolicy>): void;
  /**
   * @param body Snapshot policy object supplied in the body of the operation.
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param snapshotPolicyName The name of the snapshot policy target
   * @param options The optional parameters
   * @param callback The callback
   */
  create(body: Models.SnapshotPolicy, resourceGroupName: string, accountName: string, snapshotPolicyName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SnapshotPolicy>): void;
  create(body: Models.SnapshotPolicy, resourceGroupName: string, accountName: string, snapshotPolicyName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SnapshotPolicy>, callback?: msRest.ServiceCallback<Models.SnapshotPolicy>): Promise<Models.SnapshotPoliciesCreateResponse> {
    return this.client.sendOperationRequest(
      {
        body,
        resourceGroupName,
        accountName,
        snapshotPolicyName,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.SnapshotPoliciesCreateResponse>;
  }

  /**
   * Patch a snapshot policy
   * @param body Snapshot policy object supplied in the body of the operation.
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param snapshotPolicyName The name of the snapshot policy target
   * @param [options] The optional parameters
   * @returns Promise<Models.SnapshotPoliciesUpdateResponse>
   */
  update(body: Models.SnapshotPolicyPatch, resourceGroupName: string, accountName: string, snapshotPolicyName: string, options?: msRest.RequestOptionsBase): Promise<Models.SnapshotPoliciesUpdateResponse> {
    return this.beginUpdate(body,resourceGroupName,accountName,snapshotPolicyName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.SnapshotPoliciesUpdateResponse>;
  }

  /**
   * Delete snapshot policy
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param snapshotPolicyName The name of the snapshot policy target
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, accountName: string, snapshotPolicyName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,accountName,snapshotPolicyName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Get volumes associated with snapshot policy
   * @summary Get volumes for snapshot policy
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param snapshotPolicyName The name of the snapshot policy target
   * @param [options] The optional parameters
   * @returns Promise<Models.SnapshotPoliciesListVolumesResponse>
   */
  listVolumes(resourceGroupName: string, accountName: string, snapshotPolicyName: string, options?: msRest.RequestOptionsBase): Promise<Models.SnapshotPoliciesListVolumesResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param snapshotPolicyName The name of the snapshot policy target
   * @param callback The callback
   */
  listVolumes(resourceGroupName: string, accountName: string, snapshotPolicyName: string, callback: msRest.ServiceCallback<Models.SnapshotPolicyVolumeList>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param snapshotPolicyName The name of the snapshot policy target
   * @param options The optional parameters
   * @param callback The callback
   */
  listVolumes(resourceGroupName: string, accountName: string, snapshotPolicyName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SnapshotPolicyVolumeList>): void;
  listVolumes(resourceGroupName: string, accountName: string, snapshotPolicyName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SnapshotPolicyVolumeList>, callback?: msRest.ServiceCallback<Models.SnapshotPolicyVolumeList>): Promise<Models.SnapshotPoliciesListVolumesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        snapshotPolicyName,
        options
      },
      listVolumesOperationSpec,
      callback) as Promise<Models.SnapshotPoliciesListVolumesResponse>;
  }

  /**
   * Patch a snapshot policy
   * @param body Snapshot policy object supplied in the body of the operation.
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param snapshotPolicyName The name of the snapshot policy target
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(body: Models.SnapshotPolicyPatch, resourceGroupName: string, accountName: string, snapshotPolicyName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        body,
        resourceGroupName,
        accountName,
        snapshotPolicyName,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * Delete snapshot policy
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param snapshotPolicyName The name of the snapshot policy target
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, accountName: string, snapshotPolicyName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        snapshotPolicyName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/snapshotPolicies",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SnapshotPoliciesList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/snapshotPolicies/{snapshotPolicyName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.snapshotPolicyName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SnapshotPolicy
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/snapshotPolicies/{snapshotPolicyName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.snapshotPolicyName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.SnapshotPolicy,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SnapshotPolicy
    },
    201: {
      bodyMapper: Mappers.SnapshotPolicy
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listVolumesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/snapshotPolicies/{snapshotPolicyName}/volumes",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.snapshotPolicyName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SnapshotPolicyVolumeList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/snapshotPolicies/{snapshotPolicyName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.snapshotPolicyName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.SnapshotPolicyPatch,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SnapshotPolicy
    },
    202: {
      bodyMapper: Mappers.SnapshotPolicy
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/snapshotPolicies/{snapshotPolicyName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.snapshotPolicyName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
