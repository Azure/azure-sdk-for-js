/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { NetAppResource } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { NetAppManagementClient } from "../netAppManagementClient";
import {
  CheckNameResourceTypes,
  NetAppResourceCheckNameAvailabilityOptionalParams,
  NetAppResourceCheckNameAvailabilityResponse,
  NetAppResourceCheckFilePathAvailabilityOptionalParams,
  NetAppResourceCheckFilePathAvailabilityResponse,
  CheckQuotaNameResourceTypes,
  NetAppResourceCheckQuotaAvailabilityOptionalParams,
  NetAppResourceCheckQuotaAvailabilityResponse,
  NetAppResourceQueryRegionInfoOptionalParams,
  NetAppResourceQueryRegionInfoResponse
} from "../models";

/** Class containing NetAppResource operations. */
export class NetAppResourceImpl implements NetAppResource {
  private readonly client: NetAppManagementClient;

  /**
   * Initialize a new instance of the class NetAppResource class.
   * @param client Reference to the service client
   */
  constructor(client: NetAppManagementClient) {
    this.client = client;
  }

  /**
   * Check if a resource name is available.
   * @param location The name of Azure region.
   * @param name Resource name to verify.
   * @param typeParam Resource type used for verification.
   * @param resourceGroup Resource group name.
   * @param options The options parameters.
   */
  checkNameAvailability(
    location: string,
    name: string,
    typeParam: CheckNameResourceTypes,
    resourceGroup: string,
    options?: NetAppResourceCheckNameAvailabilityOptionalParams
  ): Promise<NetAppResourceCheckNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      { location, name, typeParam, resourceGroup, options },
      checkNameAvailabilityOperationSpec
    );
  }

  /**
   * Check if a file path is available.
   * @param location The name of Azure region.
   * @param name File path to verify.
   * @param subnetId The Azure Resource URI for a delegated subnet. Must have the delegation
   *                 Microsoft.NetApp/volumes
   * @param options The options parameters.
   */
  checkFilePathAvailability(
    location: string,
    name: string,
    subnetId: string,
    options?: NetAppResourceCheckFilePathAvailabilityOptionalParams
  ): Promise<NetAppResourceCheckFilePathAvailabilityResponse> {
    return this.client.sendOperationRequest(
      { location, name, subnetId, options },
      checkFilePathAvailabilityOperationSpec
    );
  }

  /**
   * Check if a quota is available.
   * @param location The name of Azure region.
   * @param name Name of the resource to verify.
   * @param typeParam Resource type used for verification.
   * @param resourceGroup Resource group name.
   * @param options The options parameters.
   */
  checkQuotaAvailability(
    location: string,
    name: string,
    typeParam: CheckQuotaNameResourceTypes,
    resourceGroup: string,
    options?: NetAppResourceCheckQuotaAvailabilityOptionalParams
  ): Promise<NetAppResourceCheckQuotaAvailabilityResponse> {
    return this.client.sendOperationRequest(
      { location, name, typeParam, resourceGroup, options },
      checkQuotaAvailabilityOperationSpec
    );
  }

  /**
   * Provides storage to network proximity and logical zone mapping information.
   * @param location The name of Azure region.
   * @param options The options parameters.
   */
  queryRegionInfo(
    location: string,
    options?: NetAppResourceQueryRegionInfoOptionalParams
  ): Promise<NetAppResourceQueryRegionInfoResponse> {
    return this.client.sendOperationRequest(
      { location, options },
      queryRegionInfoOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const checkNameAvailabilityOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.NetApp/locations/{location}/checkNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CheckAvailabilityResponse
    },
    default: {}
  },
  requestBody: {
    parameterPath: {
      name: ["name"],
      typeParam: ["typeParam"],
      resourceGroup: ["resourceGroup"]
    },
    mapper: { ...Mappers.ResourceNameAvailabilityRequest, required: true }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const checkFilePathAvailabilityOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.NetApp/locations/{location}/checkFilePathAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CheckAvailabilityResponse
    },
    default: {}
  },
  requestBody: {
    parameterPath: { name: ["name"], subnetId: ["subnetId"] },
    mapper: { ...Mappers.FilePathAvailabilityRequest, required: true }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const checkQuotaAvailabilityOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.NetApp/locations/{location}/checkQuotaAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CheckAvailabilityResponse
    },
    default: {}
  },
  requestBody: {
    parameterPath: {
      name: ["name"],
      typeParam: ["typeParam"],
      resourceGroup: ["resourceGroup"]
    },
    mapper: { ...Mappers.QuotaAvailabilityRequest, required: true }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const queryRegionInfoOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.NetApp/locations/{location}/regionInfo",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RegionInfo
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  headerParameters: [Parameters.accept],
  serializer
};
