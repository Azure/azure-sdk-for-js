/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/netAppResourceQuotaLimitsMappers";
import * as Parameters from "../models/parameters";
import { AzureNetAppFilesManagementClientContext } from "../azureNetAppFilesManagementClientContext";

/** Class representing a NetAppResourceQuotaLimits. */
export class NetAppResourceQuotaLimits {
  private readonly client: AzureNetAppFilesManagementClientContext;

  /**
   * Create a NetAppResourceQuotaLimits.
   * @param {AzureNetAppFilesManagementClientContext} client Reference to the service client.
   */
  constructor(client: AzureNetAppFilesManagementClientContext) {
    this.client = client;
  }

  /**
   * Get the default and current limits for quotas
   * @summary Get quota limits
   * @param location The location
   * @param [options] The optional parameters
   * @returns Promise<Models.NetAppResourceQuotaLimitsListResponse>
   */
  list(location: string, options?: msRest.RequestOptionsBase): Promise<Models.NetAppResourceQuotaLimitsListResponse>;
  /**
   * @param location The location
   * @param callback The callback
   */
  list(location: string, callback: msRest.ServiceCallback<Models.SubscriptionQuotaItemList>): void;
  /**
   * @param location The location
   * @param options The optional parameters
   * @param callback The callback
   */
  list(location: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SubscriptionQuotaItemList>): void;
  list(location: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SubscriptionQuotaItemList>, callback?: msRest.ServiceCallback<Models.SubscriptionQuotaItemList>): Promise<Models.NetAppResourceQuotaLimitsListResponse> {
    return this.client.sendOperationRequest(
      {
        location,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.NetAppResourceQuotaLimitsListResponse>;
  }

  /**
   * Get the default and current subscription quota limit
   * @summary Get quota limits
   * @param location The location
   * @param quotaLimitName The name of the Quota Limit
   * @param [options] The optional parameters
   * @returns Promise<Models.NetAppResourceQuotaLimitsGetResponse>
   */
  get(location: string, quotaLimitName: string, options?: msRest.RequestOptionsBase): Promise<Models.NetAppResourceQuotaLimitsGetResponse>;
  /**
   * @param location The location
   * @param quotaLimitName The name of the Quota Limit
   * @param callback The callback
   */
  get(location: string, quotaLimitName: string, callback: msRest.ServiceCallback<Models.SubscriptionQuotaItem>): void;
  /**
   * @param location The location
   * @param quotaLimitName The name of the Quota Limit
   * @param options The optional parameters
   * @param callback The callback
   */
  get(location: string, quotaLimitName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SubscriptionQuotaItem>): void;
  get(location: string, quotaLimitName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SubscriptionQuotaItem>, callback?: msRest.ServiceCallback<Models.SubscriptionQuotaItem>): Promise<Models.NetAppResourceQuotaLimitsGetResponse> {
    return this.client.sendOperationRequest(
      {
        location,
        quotaLimitName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.NetAppResourceQuotaLimitsGetResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.NetApp/locations/{location}/quotaLimits",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.location
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionQuotaItemList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.NetApp/locations/{location}/quotaLimits/{quotaLimitName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.quotaLimitName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionQuotaItem
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
