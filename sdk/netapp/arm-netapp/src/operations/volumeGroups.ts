/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/volumeGroupsMappers";
import * as Parameters from "../models/parameters";
import { AzureNetAppFilesManagementClientContext } from "../azureNetAppFilesManagementClientContext";

/** Class representing a VolumeGroups. */
export class VolumeGroups {
  private readonly client: AzureNetAppFilesManagementClientContext;

  /**
   * Create a VolumeGroups.
   * @param {AzureNetAppFilesManagementClientContext} client Reference to the service client.
   */
  constructor(client: AzureNetAppFilesManagementClientContext) {
    this.client = client;
  }

  /**
   * List all volume groups for given account
   * @summary Describe all volume groups
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param [options] The optional parameters
   * @returns Promise<Models.VolumeGroupsListByNetAppAccountResponse>
   */
  listByNetAppAccount(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase): Promise<Models.VolumeGroupsListByNetAppAccountResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param callback The callback
   */
  listByNetAppAccount(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.VolumeGroupList>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param options The optional parameters
   * @param callback The callback
   */
  listByNetAppAccount(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VolumeGroupList>): void;
  listByNetAppAccount(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VolumeGroupList>, callback?: msRest.ServiceCallback<Models.VolumeGroupList>): Promise<Models.VolumeGroupsListByNetAppAccountResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      listByNetAppAccountOperationSpec,
      callback) as Promise<Models.VolumeGroupsListByNetAppAccountResponse>;
  }

  /**
   * Get details of the specified volume group
   * @summary Describe a Volume Group
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param volumeGroupName The name of the volumeGroup
   * @param [options] The optional parameters
   * @returns Promise<Models.VolumeGroupsGetResponse>
   */
  get(resourceGroupName: string, accountName: string, volumeGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.VolumeGroupsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param volumeGroupName The name of the volumeGroup
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, volumeGroupName: string, callback: msRest.ServiceCallback<Models.VolumeGroupDetails>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param volumeGroupName The name of the volumeGroup
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, volumeGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VolumeGroupDetails>): void;
  get(resourceGroupName: string, accountName: string, volumeGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VolumeGroupDetails>, callback?: msRest.ServiceCallback<Models.VolumeGroupDetails>): Promise<Models.VolumeGroupsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        volumeGroupName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.VolumeGroupsGetResponse>;
  }

  /**
   * Create a volume group along with specified volumes
   * @summary Create the specified volume group and volumes. Creating volume group will create all
   * the volumes specified in request body implicitly. Once volumes are created using volume group,
   * those will be treated as regular volumes thereafter.
   * @param body Volume Group object supplied in the body of the operation.
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param volumeGroupName The name of the volumeGroup
   * @param [options] The optional parameters
   * @returns Promise<Models.VolumeGroupsCreateResponse>
   */
  create(body: Models.VolumeGroupDetails, resourceGroupName: string, accountName: string, volumeGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.VolumeGroupsCreateResponse> {
    return this.beginCreate(body,resourceGroupName,accountName,volumeGroupName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VolumeGroupsCreateResponse>;
  }

  /**
   * Delete the specified volume group only if there are no volumes under volume group.
   * @summary Delete a volume group
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param volumeGroupName The name of the volumeGroup
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, accountName: string, volumeGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,accountName,volumeGroupName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Create a volume group along with specified volumes
   * @summary Create the specified volume group and volumes. Creating volume group will create all
   * the volumes specified in request body implicitly. Once volumes are created using volume group,
   * those will be treated as regular volumes thereafter.
   * @param body Volume Group object supplied in the body of the operation.
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param volumeGroupName The name of the volumeGroup
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreate(body: Models.VolumeGroupDetails, resourceGroupName: string, accountName: string, volumeGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        body,
        resourceGroupName,
        accountName,
        volumeGroupName,
        options
      },
      beginCreateOperationSpec,
      options);
  }

  /**
   * Delete the specified volume group only if there are no volumes under volume group.
   * @summary Delete a volume group
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param volumeGroupName The name of the volumeGroup
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, accountName: string, volumeGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        volumeGroupName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByNetAppAccountOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/volumeGroups",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VolumeGroupList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/volumeGroups/{volumeGroupName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.volumeGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VolumeGroupDetails
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/volumeGroups/{volumeGroupName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.volumeGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.VolumeGroupDetails,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.VolumeGroupDetails
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/volumeGroups/{volumeGroupName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.volumeGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
