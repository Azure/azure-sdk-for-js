/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/backupsMappers";
import * as Parameters from "../models/parameters";
import { AzureNetAppFilesManagementClientContext } from "../azureNetAppFilesManagementClientContext";

/** Class representing a Backups. */
export class Backups {
  private readonly client: AzureNetAppFilesManagementClientContext;

  /**
   * Create a Backups.
   * @param {AzureNetAppFilesManagementClientContext} client Reference to the service client.
   */
  constructor(client: AzureNetAppFilesManagementClientContext) {
    this.client = client;
  }

  /**
   * Get the status of the backup for a volume
   * @summary Get volume's backup status
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param poolName The name of the capacity pool
   * @param volumeName The name of the volume
   * @param [options] The optional parameters
   * @returns Promise<Models.BackupsGetStatusResponse>
   */
  getStatus(
    resourceGroupName: string,
    accountName: string,
    poolName: string,
    volumeName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.BackupsGetStatusResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param poolName The name of the capacity pool
   * @param volumeName The name of the volume
   * @param callback The callback
   */
  getStatus(
    resourceGroupName: string,
    accountName: string,
    poolName: string,
    volumeName: string,
    callback: msRest.ServiceCallback<Models.BackupStatus>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param poolName The name of the capacity pool
   * @param volumeName The name of the volume
   * @param options The optional parameters
   * @param callback The callback
   */
  getStatus(
    resourceGroupName: string,
    accountName: string,
    poolName: string,
    volumeName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.BackupStatus>
  ): void;
  getStatus(
    resourceGroupName: string,
    accountName: string,
    poolName: string,
    volumeName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupStatus>,
    callback?: msRest.ServiceCallback<Models.BackupStatus>
  ): Promise<Models.BackupsGetStatusResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        poolName,
        volumeName,
        options
      },
      getStatusOperationSpec,
      callback
    ) as Promise<Models.BackupsGetStatusResponse>;
  }

  /**
   * List all backups for a volume
   * @summary List Backups
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param poolName The name of the capacity pool
   * @param volumeName The name of the volume
   * @param [options] The optional parameters
   * @returns Promise<Models.BackupsListResponse>
   */
  list(
    resourceGroupName: string,
    accountName: string,
    poolName: string,
    volumeName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.BackupsListResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param poolName The name of the capacity pool
   * @param volumeName The name of the volume
   * @param callback The callback
   */
  list(
    resourceGroupName: string,
    accountName: string,
    poolName: string,
    volumeName: string,
    callback: msRest.ServiceCallback<Models.BackupsList>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param poolName The name of the capacity pool
   * @param volumeName The name of the volume
   * @param options The optional parameters
   * @param callback The callback
   */
  list(
    resourceGroupName: string,
    accountName: string,
    poolName: string,
    volumeName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.BackupsList>
  ): void;
  list(
    resourceGroupName: string,
    accountName: string,
    poolName: string,
    volumeName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupsList>,
    callback?: msRest.ServiceCallback<Models.BackupsList>
  ): Promise<Models.BackupsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        poolName,
        volumeName,
        options
      },
      listOperationSpec,
      callback
    ) as Promise<Models.BackupsListResponse>;
  }

  /**
   * Gets the specified backup of the volume
   * @summary Get a backup
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param poolName The name of the capacity pool
   * @param volumeName The name of the volume
   * @param backupName The name of the backup
   * @param [options] The optional parameters
   * @returns Promise<Models.BackupsGetResponse>
   */
  get(
    resourceGroupName: string,
    accountName: string,
    poolName: string,
    volumeName: string,
    backupName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.BackupsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param poolName The name of the capacity pool
   * @param volumeName The name of the volume
   * @param backupName The name of the backup
   * @param callback The callback
   */
  get(
    resourceGroupName: string,
    accountName: string,
    poolName: string,
    volumeName: string,
    backupName: string,
    callback: msRest.ServiceCallback<Models.Backup>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param poolName The name of the capacity pool
   * @param volumeName The name of the volume
   * @param backupName The name of the backup
   * @param options The optional parameters
   * @param callback The callback
   */
  get(
    resourceGroupName: string,
    accountName: string,
    poolName: string,
    volumeName: string,
    backupName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.Backup>
  ): void;
  get(
    resourceGroupName: string,
    accountName: string,
    poolName: string,
    volumeName: string,
    backupName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Backup>,
    callback?: msRest.ServiceCallback<Models.Backup>
  ): Promise<Models.BackupsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        poolName,
        volumeName,
        backupName,
        options
      },
      getOperationSpec,
      callback
    ) as Promise<Models.BackupsGetResponse>;
  }

  /**
   * Create a backup for the volume
   * @summary Create a backup
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param poolName The name of the capacity pool
   * @param volumeName The name of the volume
   * @param backupName The name of the backup
   * @param body Backup object supplied in the body of the operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.BackupsCreateResponse>
   */
  create(
    resourceGroupName: string,
    accountName: string,
    poolName: string,
    volumeName: string,
    backupName: string,
    body: Models.Backup,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.BackupsCreateResponse> {
    return this.beginCreate(
      resourceGroupName,
      accountName,
      poolName,
      volumeName,
      backupName,
      body,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished()) as Promise<Models.BackupsCreateResponse>;
  }

  /**
   * Patch a backup for the volume
   * @summary Patch a backup
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param poolName The name of the capacity pool
   * @param volumeName The name of the volume
   * @param backupName The name of the backup
   * @param [options] The optional parameters
   * @returns Promise<Models.BackupsUpdateResponse>
   */
  update(
    resourceGroupName: string,
    accountName: string,
    poolName: string,
    volumeName: string,
    backupName: string,
    options?: Models.BackupsUpdateOptionalParams
  ): Promise<Models.BackupsUpdateResponse> {
    return this.beginUpdate(
      resourceGroupName,
      accountName,
      poolName,
      volumeName,
      backupName,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished()) as Promise<Models.BackupsUpdateResponse>;
  }

  /**
   * Delete a backup of the volume
   * @summary Delete backup
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param poolName The name of the capacity pool
   * @param volumeName The name of the volume
   * @param backupName The name of the backup
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(
    resourceGroupName: string,
    accountName: string,
    poolName: string,
    volumeName: string,
    backupName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(
      resourceGroupName,
      accountName,
      poolName,
      volumeName,
      backupName,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished());
  }

  /**
   * Create a backup for the volume
   * @summary Create a backup
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param poolName The name of the capacity pool
   * @param volumeName The name of the volume
   * @param backupName The name of the backup
   * @param body Backup object supplied in the body of the operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreate(
    resourceGroupName: string,
    accountName: string,
    poolName: string,
    volumeName: string,
    backupName: string,
    body: Models.Backup,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        poolName,
        volumeName,
        backupName,
        body,
        options
      },
      beginCreateOperationSpec,
      options
    );
  }

  /**
   * Patch a backup for the volume
   * @summary Patch a backup
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param poolName The name of the capacity pool
   * @param volumeName The name of the volume
   * @param backupName The name of the backup
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(
    resourceGroupName: string,
    accountName: string,
    poolName: string,
    volumeName: string,
    backupName: string,
    options?: Models.BackupsBeginUpdateOptionalParams
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        poolName,
        volumeName,
        backupName,
        options
      },
      beginUpdateOperationSpec,
      options
    );
  }

  /**
   * Delete a backup of the volume
   * @summary Delete backup
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param poolName The name of the capacity pool
   * @param volumeName The name of the volume
   * @param backupName The name of the backup
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(
    resourceGroupName: string,
    accountName: string,
    poolName: string,
    volumeName: string,
    backupName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        poolName,
        volumeName,
        backupName,
        options
      },
      beginDeleteMethodOperationSpec,
      options
    );
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/backupStatus",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.poolName,
    Parameters.volumeName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.BackupStatus
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/backups",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.poolName,
    Parameters.volumeName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.BackupsList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/backups/{backupName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.poolName,
    Parameters.volumeName,
    Parameters.backupName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.Backup
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/backups/{backupName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.poolName,
    Parameters.volumeName,
    Parameters.backupName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Backup,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Backup
    },
    201: {
      bodyMapper: Mappers.Backup
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/backups/{backupName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.poolName,
    Parameters.volumeName,
    Parameters.backupName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: ["options", "body"],
    mapper: Mappers.BackupPatch
  },
  responses: {
    200: {
      bodyMapper: Mappers.Backup
    },
    202: {
      bodyMapper: Mappers.Backup
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/backups/{backupName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.poolName,
    Parameters.volumeName,
    Parameters.backupName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
