/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Subvolumes } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { NetAppManagementClient } from "../netAppManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  SubvolumeInfo,
  SubvolumesListByVolumeNextOptionalParams,
  SubvolumesListByVolumeOptionalParams,
  SubvolumesListByVolumeResponse,
  SubvolumesGetOptionalParams,
  SubvolumesGetResponse,
  SubvolumesCreateOptionalParams,
  SubvolumesCreateResponse,
  SubvolumePatchRequest,
  SubvolumesUpdateOptionalParams,
  SubvolumesUpdateResponse,
  SubvolumesDeleteOptionalParams,
  SubvolumesGetMetadataOptionalParams,
  SubvolumesGetMetadataResponse,
  SubvolumesListByVolumeNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Subvolumes operations. */
export class SubvolumesImpl implements Subvolumes {
  private readonly client: NetAppManagementClient;

  /**
   * Initialize a new instance of the class Subvolumes class.
   * @param client Reference to the service client
   */
  constructor(client: NetAppManagementClient) {
    this.client = client;
  }

  /**
   * Returns a list of the subvolumes in the volume
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the NetApp account
   * @param poolName The name of the capacity pool
   * @param volumeName The name of the volume
   * @param options The options parameters.
   */
  public listByVolume(
    resourceGroupName: string,
    accountName: string,
    poolName: string,
    volumeName: string,
    options?: SubvolumesListByVolumeOptionalParams
  ): PagedAsyncIterableIterator<SubvolumeInfo> {
    const iter = this.listByVolumePagingAll(
      resourceGroupName,
      accountName,
      poolName,
      volumeName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByVolumePagingPage(
          resourceGroupName,
          accountName,
          poolName,
          volumeName,
          options,
          settings
        );
      }
    };
  }

  private async *listByVolumePagingPage(
    resourceGroupName: string,
    accountName: string,
    poolName: string,
    volumeName: string,
    options?: SubvolumesListByVolumeOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<SubvolumeInfo[]> {
    let result: SubvolumesListByVolumeResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByVolume(
        resourceGroupName,
        accountName,
        poolName,
        volumeName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByVolumeNext(
        resourceGroupName,
        accountName,
        poolName,
        volumeName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByVolumePagingAll(
    resourceGroupName: string,
    accountName: string,
    poolName: string,
    volumeName: string,
    options?: SubvolumesListByVolumeOptionalParams
  ): AsyncIterableIterator<SubvolumeInfo> {
    for await (const page of this.listByVolumePagingPage(
      resourceGroupName,
      accountName,
      poolName,
      volumeName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Returns a list of the subvolumes in the volume
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the NetApp account
   * @param poolName The name of the capacity pool
   * @param volumeName The name of the volume
   * @param options The options parameters.
   */
  private _listByVolume(
    resourceGroupName: string,
    accountName: string,
    poolName: string,
    volumeName: string,
    options?: SubvolumesListByVolumeOptionalParams
  ): Promise<SubvolumesListByVolumeResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, poolName, volumeName, options },
      listByVolumeOperationSpec
    );
  }

  /**
   * Returns the path associated with the subvolumeName provided
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the NetApp account
   * @param poolName The name of the capacity pool
   * @param volumeName The name of the volume
   * @param subvolumeName The name of the subvolume.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    poolName: string,
    volumeName: string,
    subvolumeName: string,
    options?: SubvolumesGetOptionalParams
  ): Promise<SubvolumesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        poolName,
        volumeName,
        subvolumeName,
        options
      },
      getOperationSpec
    );
  }

  /**
   * Creates a subvolume in the path or clones the subvolume mentioned in the parentPath
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the NetApp account
   * @param poolName The name of the capacity pool
   * @param volumeName The name of the volume
   * @param subvolumeName The name of the subvolume.
   * @param body Subvolume object supplied in the body of the operation.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    accountName: string,
    poolName: string,
    volumeName: string,
    subvolumeName: string,
    body: SubvolumeInfo,
    options?: SubvolumesCreateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<SubvolumesCreateResponse>,
      SubvolumesCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<SubvolumesCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        accountName,
        poolName,
        volumeName,
        subvolumeName,
        body,
        options
      },
      spec: createOperationSpec
    });
    const poller = await createHttpPoller<
      SubvolumesCreateResponse,
      OperationState<SubvolumesCreateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates a subvolume in the path or clones the subvolume mentioned in the parentPath
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the NetApp account
   * @param poolName The name of the capacity pool
   * @param volumeName The name of the volume
   * @param subvolumeName The name of the subvolume.
   * @param body Subvolume object supplied in the body of the operation.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    accountName: string,
    poolName: string,
    volumeName: string,
    subvolumeName: string,
    body: SubvolumeInfo,
    options?: SubvolumesCreateOptionalParams
  ): Promise<SubvolumesCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      accountName,
      poolName,
      volumeName,
      subvolumeName,
      body,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Patch a subvolume
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the NetApp account
   * @param poolName The name of the capacity pool
   * @param volumeName The name of the volume
   * @param subvolumeName The name of the subvolume.
   * @param body Subvolume object supplied in the body of the operation.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    accountName: string,
    poolName: string,
    volumeName: string,
    subvolumeName: string,
    body: SubvolumePatchRequest,
    options?: SubvolumesUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<SubvolumesUpdateResponse>,
      SubvolumesUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<SubvolumesUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        accountName,
        poolName,
        volumeName,
        subvolumeName,
        body,
        options
      },
      spec: updateOperationSpec
    });
    const poller = await createHttpPoller<
      SubvolumesUpdateResponse,
      OperationState<SubvolumesUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Patch a subvolume
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the NetApp account
   * @param poolName The name of the capacity pool
   * @param volumeName The name of the volume
   * @param subvolumeName The name of the subvolume.
   * @param body Subvolume object supplied in the body of the operation.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    accountName: string,
    poolName: string,
    volumeName: string,
    subvolumeName: string,
    body: SubvolumePatchRequest,
    options?: SubvolumesUpdateOptionalParams
  ): Promise<SubvolumesUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      accountName,
      poolName,
      volumeName,
      subvolumeName,
      body,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete subvolume
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the NetApp account
   * @param poolName The name of the capacity pool
   * @param volumeName The name of the volume
   * @param subvolumeName The name of the subvolume.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    accountName: string,
    poolName: string,
    volumeName: string,
    subvolumeName: string,
    options?: SubvolumesDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        accountName,
        poolName,
        volumeName,
        subvolumeName,
        options
      },
      spec: deleteOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete subvolume
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the NetApp account
   * @param poolName The name of the capacity pool
   * @param volumeName The name of the volume
   * @param subvolumeName The name of the subvolume.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    accountName: string,
    poolName: string,
    volumeName: string,
    subvolumeName: string,
    options?: SubvolumesDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      accountName,
      poolName,
      volumeName,
      subvolumeName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Get details of the specified subvolume
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the NetApp account
   * @param poolName The name of the capacity pool
   * @param volumeName The name of the volume
   * @param subvolumeName The name of the subvolume.
   * @param options The options parameters.
   */
  async beginGetMetadata(
    resourceGroupName: string,
    accountName: string,
    poolName: string,
    volumeName: string,
    subvolumeName: string,
    options?: SubvolumesGetMetadataOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<SubvolumesGetMetadataResponse>,
      SubvolumesGetMetadataResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<SubvolumesGetMetadataResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        accountName,
        poolName,
        volumeName,
        subvolumeName,
        options
      },
      spec: getMetadataOperationSpec
    });
    const poller = await createHttpPoller<
      SubvolumesGetMetadataResponse,
      OperationState<SubvolumesGetMetadataResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Get details of the specified subvolume
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the NetApp account
   * @param poolName The name of the capacity pool
   * @param volumeName The name of the volume
   * @param subvolumeName The name of the subvolume.
   * @param options The options parameters.
   */
  async beginGetMetadataAndWait(
    resourceGroupName: string,
    accountName: string,
    poolName: string,
    volumeName: string,
    subvolumeName: string,
    options?: SubvolumesGetMetadataOptionalParams
  ): Promise<SubvolumesGetMetadataResponse> {
    const poller = await this.beginGetMetadata(
      resourceGroupName,
      accountName,
      poolName,
      volumeName,
      subvolumeName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * ListByVolumeNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the NetApp account
   * @param poolName The name of the capacity pool
   * @param volumeName The name of the volume
   * @param nextLink The nextLink from the previous successful call to the ListByVolume method.
   * @param options The options parameters.
   */
  private _listByVolumeNext(
    resourceGroupName: string,
    accountName: string,
    poolName: string,
    volumeName: string,
    nextLink: string,
    options?: SubvolumesListByVolumeNextOptionalParams
  ): Promise<SubvolumesListByVolumeNextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        poolName,
        volumeName,
        nextLink,
        options
      },
      listByVolumeNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByVolumeOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/subvolumes",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SubvolumesList
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.poolName,
    Parameters.volumeName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/subvolumes/{subvolumeName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SubvolumeInfo
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.poolName,
    Parameters.volumeName,
    Parameters.subvolumeName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/subvolumes/{subvolumeName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SubvolumeInfo
    },
    201: {
      bodyMapper: Mappers.SubvolumeInfo
    },
    202: {
      bodyMapper: Mappers.SubvolumeInfo
    },
    204: {
      bodyMapper: Mappers.SubvolumeInfo
    },
    default: {}
  },
  requestBody: Parameters.body29,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.poolName,
    Parameters.volumeName,
    Parameters.subvolumeName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/subvolumes/{subvolumeName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SubvolumeInfo
    },
    201: {
      bodyMapper: Mappers.SubvolumeInfo
    },
    202: {
      bodyMapper: Mappers.SubvolumeInfo
    },
    204: {
      bodyMapper: Mappers.SubvolumeInfo
    },
    default: {}
  },
  requestBody: Parameters.body30,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.poolName,
    Parameters.volumeName,
    Parameters.subvolumeName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/subvolumes/{subvolumeName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.poolName,
    Parameters.volumeName,
    Parameters.subvolumeName
  ],
  serializer
};
const getMetadataOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/subvolumes/{subvolumeName}/getMetadata",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SubvolumeModel
    },
    201: {
      bodyMapper: Mappers.SubvolumeModel
    },
    202: {
      bodyMapper: Mappers.SubvolumeModel
    },
    204: {
      bodyMapper: Mappers.SubvolumeModel
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.poolName,
    Parameters.volumeName,
    Parameters.subvolumeName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByVolumeNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SubvolumesList
    },
    default: {}
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.nextLink,
    Parameters.poolName,
    Parameters.volumeName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
