/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/accountBackupsMappers";
import * as Parameters from "../models/parameters";
import { AzureNetAppFilesManagementClientContext } from "../azureNetAppFilesManagementClientContext";

/** Class representing a AccountBackups. */
export class AccountBackups {
  private readonly client: AzureNetAppFilesManagementClientContext;

  /**
   * Create a AccountBackups.
   * @param {AzureNetAppFilesManagementClientContext} client Reference to the service client.
   */
  constructor(client: AzureNetAppFilesManagementClientContext) {
    this.client = client;
  }

  /**
   * List all Backups for a Netapp Account
   * @summary List Backups for a Netapp Account
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param [options] The optional parameters
   * @returns Promise<Models.AccountBackupsListResponse>
   */
  list(
    resourceGroupName: string,
    accountName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.AccountBackupsListResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param callback The callback
   */
  list(
    resourceGroupName: string,
    accountName: string,
    callback: msRest.ServiceCallback<Models.BackupsList>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param options The optional parameters
   * @param callback The callback
   */
  list(
    resourceGroupName: string,
    accountName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.BackupsList>
  ): void;
  list(
    resourceGroupName: string,
    accountName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupsList>,
    callback?: msRest.ServiceCallback<Models.BackupsList>
  ): Promise<Models.AccountBackupsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      listOperationSpec,
      callback
    ) as Promise<Models.AccountBackupsListResponse>;
  }

  /**
   * Gets the specified backup for a Netapp Account
   * @summary Get Backup for a Netapp Account
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param backupName The name of the backup
   * @param [options] The optional parameters
   * @returns Promise<Models.AccountBackupsGetResponse>
   */
  get(
    resourceGroupName: string,
    accountName: string,
    backupName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.AccountBackupsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param backupName The name of the backup
   * @param callback The callback
   */
  get(
    resourceGroupName: string,
    accountName: string,
    backupName: string,
    callback: msRest.ServiceCallback<Models.Backup>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param backupName The name of the backup
   * @param options The optional parameters
   * @param callback The callback
   */
  get(
    resourceGroupName: string,
    accountName: string,
    backupName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.Backup>
  ): void;
  get(
    resourceGroupName: string,
    accountName: string,
    backupName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Backup>,
    callback?: msRest.ServiceCallback<Models.Backup>
  ): Promise<Models.AccountBackupsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        backupName,
        options
      },
      getOperationSpec,
      callback
    ) as Promise<Models.AccountBackupsGetResponse>;
  }

  /**
   * Delete the specified Backup for a Netapp Account
   * @summary Delete Backup for a Netapp Account
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param backupName The name of the backup
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(
    resourceGroupName: string,
    accountName: string,
    backupName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(
      resourceGroupName,
      accountName,
      backupName,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished());
  }

  /**
   * Delete the specified Backup for a Netapp Account
   * @summary Delete Backup for a Netapp Account
   * @param resourceGroupName The name of the resource group.
   * @param accountName The name of the NetApp account
   * @param backupName The name of the backup
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(
    resourceGroupName: string,
    accountName: string,
    backupName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        backupName,
        options
      },
      beginDeleteMethodOperationSpec,
      options
    );
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/accountBackups",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.accountName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.BackupsList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/accountBackups/{backupName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.backupName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.Backup
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/accountBackups/{backupName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.backupName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
