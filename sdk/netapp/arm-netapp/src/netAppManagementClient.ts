/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import {
  OperationsImpl,
  NetAppResourceImpl,
  NetAppResourceQuotaLimitsImpl,
  AccountsImpl,
  PoolsImpl,
  VolumesImpl,
  SnapshotsImpl,
  SnapshotPoliciesImpl,
  BackupsImpl,
  AccountBackupsImpl,
  BackupPoliciesImpl,
  VaultsImpl,
  VolumeGroupsImpl,
  SubvolumesImpl
} from "./operations";
import {
  Operations,
  NetAppResource,
  NetAppResourceQuotaLimits,
  Accounts,
  Pools,
  Volumes,
  Snapshots,
  SnapshotPolicies,
  Backups,
  AccountBackups,
  BackupPolicies,
  Vaults,
  VolumeGroups,
  Subvolumes
} from "./operationsInterfaces";
import { NetAppManagementClientOptionalParams } from "./models";

export class NetAppManagementClient extends coreClient.ServiceClient {
  $host: string;
  apiVersion: string;
  subscriptionId: string;

  /**
   * Initializes a new instance of the NetAppManagementClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription.
   *                       The subscription ID forms part of the URI for every service call.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: NetAppManagementClientOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (subscriptionId === undefined) {
      throw new Error("'subscriptionId' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: NetAppManagementClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-arm-netapp/15.1.1`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    if (!options.credentialScopes) {
      options.credentialScopes = ["https://management.azure.com/.default"];
    }
    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      baseUri: options.endpoint || "https://management.azure.com"
    };
    super(optionsWithDefaults);
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.apiVersion = options.apiVersion || "2021-10-01";
    this.operations = new OperationsImpl(this);
    this.netAppResource = new NetAppResourceImpl(this);
    this.netAppResourceQuotaLimits = new NetAppResourceQuotaLimitsImpl(this);
    this.accounts = new AccountsImpl(this);
    this.pools = new PoolsImpl(this);
    this.volumes = new VolumesImpl(this);
    this.snapshots = new SnapshotsImpl(this);
    this.snapshotPolicies = new SnapshotPoliciesImpl(this);
    this.backups = new BackupsImpl(this);
    this.accountBackups = new AccountBackupsImpl(this);
    this.backupPolicies = new BackupPoliciesImpl(this);
    this.vaults = new VaultsImpl(this);
    this.volumeGroups = new VolumeGroupsImpl(this);
    this.subvolumes = new SubvolumesImpl(this);
  }

  operations: Operations;
  netAppResource: NetAppResource;
  netAppResourceQuotaLimits: NetAppResourceQuotaLimits;
  accounts: Accounts;
  pools: Pools;
  volumes: Volumes;
  snapshots: Snapshots;
  snapshotPolicies: SnapshotPolicies;
  backups: Backups;
  accountBackups: AccountBackups;
  backupPolicies: BackupPolicies;
  vaults: Vaults;
  volumeGroups: VolumeGroups;
  subvolumes: Subvolumes;
}
