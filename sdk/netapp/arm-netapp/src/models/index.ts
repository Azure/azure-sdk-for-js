/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * Display metadata associated with the operation.
 */
export interface OperationDisplay {
  /**
   * Service provider: Microsoft NetApp.
   */
  provider?: string;
  /**
   * Resource on which the operation is performed etc.
   */
  resource?: string;
  /**
   * Type of operation: get, read, delete, etc.
   */
  operation?: string;
  /**
   * Operation description.
   */
  description?: string;
}

/**
 * Dimension of blobs, possibly be blob type or access tier.
 */
export interface Dimension {
  /**
   * Display name of dimension.
   */
  name?: string;
  /**
   * Display name of dimension.
   */
  displayName?: string;
}

/**
 * Metric specification of operation.
 */
export interface MetricSpecification {
  /**
   * Name of metric specification.
   */
  name?: string;
  /**
   * Display name of metric specification.
   */
  displayName?: string;
  /**
   * Display description of metric specification.
   */
  displayDescription?: string;
  /**
   * Unit could be Bytes or Count.
   */
  unit?: string;
  /**
   * Dimensions of blobs, including blob type and access tier.
   */
  dimensions?: Dimension[];
  /**
   * Aggregation type could be Average.
   */
  aggregationType?: string;
  /**
   * The property to decide fill gap with zero or not.
   */
  fillGapWithZero?: boolean;
  /**
   * The category this metric specification belong to, could be Capacity.
   */
  category?: string;
  /**
   * Account Resource Id.
   */
  resourceIdDimensionNameOverride?: string;
}

/**
 * One property of operation, include metric specifications.
 */
export interface ServiceSpecification {
  /**
   * Metric specifications of operation.
   */
  metricSpecifications?: MetricSpecification[];
}

/**
 * Microsoft.NetApp REST API operation definition.
 */
export interface Operation {
  /**
   * Operation name: {provider}/{resource}/{operation}
   */
  name?: string;
  /**
   * Display metadata associated with the operation.
   */
  display?: OperationDisplay;
  /**
   * The origin of operations.
   */
  origin?: string;
  /**
   * One property of operation, include metric specifications.
   */
  serviceSpecification?: ServiceSpecification;
}

/**
 * Information regarding availability of a resource.
 */
export interface CheckAvailabilityResponse {
  /**
   * <code>true</code> indicates name is valid and available. <code>false</code> indicates the name
   * is invalid, unavailable, or both.
   */
  isAvailable?: boolean;
  /**
   * <code>Invalid</code> indicates the name provided does not match Azure App Service naming
   * requirements. <code>AlreadyExists</code> indicates that the name is already in use and is
   * therefore unavailable. Possible values include: 'Invalid', 'AlreadyExists'
   */
  reason?: InAvailabilityReasonType;
  /**
   * If reason == invalid, provide the user with the reason why the given name is invalid, and
   * provide the resource naming requirements so that the user can select a valid name. If reason
   * == AlreadyExists, explain that resource name is already in use, and direct them to select a
   * different name.
   */
  message?: string;
}

/**
 * Resource name availability request content.
 */
export interface ResourceNameAvailabilityRequest {
  /**
   * Resource name to verify.
   */
  name: string;
  /**
   * Resource type used for verification. Possible values include:
   * 'Microsoft.NetApp/netAppAccounts', 'Microsoft.NetApp/netAppAccounts/capacityPools',
   * 'Microsoft.NetApp/netAppAccounts/capacityPools/volumes',
   * 'Microsoft.NetApp/netAppAccounts/capacityPools/volumes/snapshots'
   */
  type: CheckNameResourceTypes;
  /**
   * Resource group name.
   */
  resourceGroup: string;
}

/**
 * Quota availability request content.
 */
export interface QuotaAvailabilityRequest {
  /**
   * Name of the resource to verify.
   */
  name: string;
  /**
   * Resource type used for verification. Possible values include:
   * 'Microsoft.NetApp/netAppAccounts', 'Microsoft.NetApp/netAppAccounts/capacityPools',
   * 'Microsoft.NetApp/netAppAccounts/capacityPools/volumes',
   * 'Microsoft.NetApp/netAppAccounts/capacityPools/volumes/snapshots'
   */
  type: CheckQuotaNameResourceTypes;
  /**
   * Resource group name.
   */
  resourceGroup: string;
}

/**
 * Active Directory
 */
export interface ActiveDirectory {
  /**
   * Id of the Active Directory
   */
  activeDirectoryId?: string;
  /**
   * Username of Active Directory domain administrator
   */
  username?: string;
  /**
   * Plain text password of Active Directory domain administrator, value is masked in the response
   */
  password?: string;
  /**
   * Name of the Active Directory domain
   */
  domain?: string;
  /**
   * Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain
   */
  dns?: string;
  /**
   * Status of the Active Directory. Possible values include: 'Created', 'InUse', 'Deleted',
   * 'Error', 'Updating'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: ActiveDirectoryStatus;
  /**
   * Any details in regards to the Status of the Active Directory
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly statusDetails?: string;
  /**
   * NetBIOS name of the SMB server. This name will be registered as a computer account in the AD
   * and used to mount volumes
   */
  smbServerName?: string;
  /**
   * The Organizational Unit (OU) within the Windows Active Directory. Default value:
   * 'CN=Computers'.
   */
  organizationalUnit?: string;
  /**
   * The Active Directory site the service will limit Domain Controller discovery to
   */
  site?: string;
  /**
   * Users to be added to the Built-in Backup Operator active directory group. A list of unique
   * usernames without domain specifier
   */
  backupOperators?: string[];
  /**
   * kdc server IP addresses for the active directory machine. This optional parameter is used only
   * while creating kerberos volume.
   */
  kdcIP?: string;
  /**
   * Name of the active directory machine. This optional parameter is used only while creating
   * kerberos volume
   */
  adName?: string;
  /**
   * When LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active
   * Directory Certificate Service's self-signed root CA certificate, this optional parameter is
   * used only for dual protocol with LDAP user-mapping volumes.
   */
  serverRootCACertificate?: string;
  /**
   * If enabled, AES encryption will be enabled for SMB communication.
   */
  aesEncryption?: boolean;
  /**
   * Specifies whether or not the LDAP traffic needs to be signed.
   */
  ldapSigning?: boolean;
  /**
   * Domain Users in the Active directory to be given SeSecurityPrivilege privilege (Needed for SMB
   * Continuously available shares for SQL). A list of unique usernames without domain specifier
   */
  securityOperators?: string[];
  /**
   * Specifies whether or not the LDAP traffic needs to be secured via TLS.
   */
  ldapOverTLS?: boolean;
  /**
   * If enabled, NFS client local users can also (in addition to LDAP users) access the NFS
   * volumes.
   */
  allowLocalNfsUsersWithLdap?: boolean;
}

/**
 * Encryption settings
 */
export interface AccountEncryption {
  /**
   * Encryption Key Source. Possible values are: 'Microsoft.NetApp'.
   */
  keySource?: string;
}

/**
 * Metadata pertaining to creation and last modification of the resource.
 */
export interface SystemData {
  /**
   * The identity that created the resource.
   */
  createdBy?: string;
  /**
   * The type of identity that created the resource. Possible values include: 'User',
   * 'Application', 'ManagedIdentity', 'Key'
   */
  createdByType?: CreatedByType;
  /**
   * The timestamp of resource creation (UTC).
   */
  createdAt?: Date;
  /**
   * The identity that last modified the resource.
   */
  lastModifiedBy?: string;
  /**
   * The type of identity that last modified the resource. Possible values include: 'User',
   * 'Application', 'ManagedIdentity', 'Key'
   */
  lastModifiedByType?: CreatedByType;
  /**
   * The timestamp of resource last modification (UTC)
   */
  lastModifiedAt?: Date;
}

/**
 * NetApp account resource
 */
export interface NetAppAccount extends BaseResource {
  /**
   * Resource location
   */
  location: string;
  /**
   * Resource Id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
  /**
   * Azure lifecycle management
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * Active Directories
   */
  activeDirectories?: ActiveDirectory[];
  /**
   * Encryption settings
   */
  encryption?: AccountEncryption;
  /**
   * The system meta data relating to this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly systemData?: SystemData;
}

/**
 * NetApp account patch resource
 */
export interface NetAppAccountPatch extends BaseResource {
  /**
   * Resource location
   */
  location?: string;
  /**
   * Resource Id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
  /**
   * Azure lifecycle management
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * Active Directories
   */
  activeDirectories?: ActiveDirectory[];
  /**
   * Encryption settings
   */
  encryption?: AccountEncryption;
}

/**
 * Capacity pool resource
 */
export interface CapacityPool extends BaseResource {
  /**
   * Resource location
   */
  location: string;
  /**
   * Resource Id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
  /**
   * poolId. UUID v4 used to identify the Pool
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly poolId?: string;
  /**
   * size. Provisioned size of the pool (in bytes). Allowed values are in 4TiB chunks (value must
   * be multiply of 4398046511104).
   */
  size: number;
  /**
   * serviceLevel. The service level of the file system. Possible values include: 'Standard',
   * 'Premium', 'Ultra'. Default value: 'Premium'.
   */
  serviceLevel: ServiceLevel;
  /**
   * Azure lifecycle management
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * Total throughput of pool in Mibps
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly totalThroughputMibps?: number;
  /**
   * Utilized throughput of pool in Mibps
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly utilizedThroughputMibps?: number;
  /**
   * qosType. The qos type of the pool. Possible values include: 'Auto', 'Manual'. Default value:
   * 'Auto'.
   */
  qosType?: QosType;
}

/**
 * Capacity pool patch resource
 */
export interface CapacityPoolPatch extends BaseResource {
  /**
   * Resource location
   */
  location?: string;
  /**
   * Resource Id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
  /**
   * size. Provisioned size of the pool (in bytes). Allowed values are in 4TiB chunks (value must
   * be multiply of 4398046511104). Default value: 4398046511104.
   */
  size?: number;
  /**
   * qosType. The qos type of the pool. Possible values include: 'Auto', 'Manual'. Default value:
   * 'Auto'.
   */
  qosType?: QosType;
}

/**
 * Volume Export Policy Rule
 */
export interface ExportPolicyRule {
  /**
   * Order index
   */
  ruleIndex?: number;
  /**
   * Read only access
   */
  unixReadOnly?: boolean;
  /**
   * Read and write access
   */
  unixReadWrite?: boolean;
  /**
   * Kerberos5 Read only access. To be use with swagger version 2020-05-01 or later. Default value:
   * false.
   */
  kerberos5ReadOnly?: boolean;
  /**
   * Kerberos5 Read and write access. To be use with swagger version 2020-05-01 or later. Default
   * value: false.
   */
  kerberos5ReadWrite?: boolean;
  /**
   * Kerberos5i Read only access. To be use with swagger version 2020-05-01 or later. Default
   * value: false.
   */
  kerberos5iReadOnly?: boolean;
  /**
   * Kerberos5i Read and write access. To be use with swagger version 2020-05-01 or later. Default
   * value: false.
   */
  kerberos5iReadWrite?: boolean;
  /**
   * Kerberos5p Read only access. To be use with swagger version 2020-05-01 or later. Default
   * value: false.
   */
  kerberos5pReadOnly?: boolean;
  /**
   * Kerberos5p Read and write access. To be use with swagger version 2020-05-01 or later. Default
   * value: false.
   */
  kerberos5pReadWrite?: boolean;
  /**
   * Allows CIFS protocol
   */
  cifs?: boolean;
  /**
   * Allows NFSv3 protocol. Enable only for NFSv3 type volumes
   */
  nfsv3?: boolean;
  /**
   * Allows NFSv4.1 protocol. Enable only for NFSv4.1 type volumes
   */
  nfsv41?: boolean;
  /**
   * Client ingress specification as comma separated string with IPv4 CIDRs, IPv4 host addresses
   * and host names
   */
  allowedClients?: string;
  /**
   * Has root access to volume. Default value: true.
   */
  hasRootAccess?: boolean;
}

/**
 * Set of export policy rules
 * @summary exportPolicy
 */
export interface VolumePropertiesExportPolicy {
  /**
   * Export policy rule. Export policy rule
   */
  rules?: ExportPolicyRule[];
}

/**
 * Mount target properties
 */
export interface MountTargetProperties {
  /**
   * mountTargetId. UUID v4 used to identify the MountTarget
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly mountTargetId?: string;
  /**
   * fileSystemId. UUID v4 used to identify the MountTarget
   */
  fileSystemId: string;
  /**
   * ipAddress. The mount target's IPv4 address
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly ipAddress?: string;
  /**
   * smbServerFQDN. The SMB server's Fully Qualified Domain Name, FQDN
   */
  smbServerFqdn?: string;
}

/**
 * Volume Backup Properties
 */
export interface VolumeBackupProperties {
  /**
   * Backup Policy Resource ID
   */
  backupPolicyId?: string;
  /**
   * Policy Enforced
   */
  policyEnforced?: boolean;
  /**
   * Vault Resource ID
   */
  vaultId?: string;
  /**
   * Backup Enabled
   */
  backupEnabled?: boolean;
}

/**
 * Replication properties
 */
export interface ReplicationObject {
  /**
   * Id
   */
  replicationId?: string;
  /**
   * Indicates whether the local volume is the source or destination for the Volume Replication.
   * Possible values include: 'src', 'dst'
   */
  endpointType?: EndpointType;
  /**
   * Schedule. Possible values include: '_10minutely', 'hourly', 'daily'
   */
  replicationSchedule: ReplicationSchedule;
  /**
   * The resource ID of the remote volume.
   */
  remoteVolumeResourceId: string;
  /**
   * The remote region for the other end of the Volume Replication.
   */
  remoteVolumeRegion?: string;
}

/**
 * Volume Snapshot Properties
 */
export interface VolumeSnapshotProperties {
  /**
   * Snapshot Policy ResourceId
   */
  snapshotPolicyId?: string;
}

/**
 * DataProtection type volumes include an object containing details of the replication
 * @summary DataProtection
 */
export interface VolumePropertiesDataProtection {
  /**
   * Backup. Backup Properties
   */
  backup?: VolumeBackupProperties;
  /**
   * Replication. Replication properties
   */
  replication?: ReplicationObject;
  /**
   * Snapshot. Snapshot properties.
   */
  snapshot?: VolumeSnapshotProperties;
}

/**
 * Volume resource
 */
export interface Volume extends BaseResource {
  /**
   * Resource location
   */
  location: string;
  /**
   * Resource Id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
  /**
   * FileSystem ID. Unique FileSystem Identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fileSystemId?: string;
  /**
   * Creation Token or File Path. A unique file path for the volume. Used when creating mount
   * targets
   */
  creationToken: string;
  /**
   * serviceLevel. The service level of the file system. Possible values include: 'Standard',
   * 'Premium', 'Ultra'. Default value: 'Premium'.
   */
  serviceLevel?: ServiceLevel;
  /**
   * usageThreshold. Maximum storage quota allowed for a file system in bytes. This is a soft quota
   * used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.
   * Default value: 107374182400.
   */
  usageThreshold: number;
  /**
   * exportPolicy. Set of export policy rules
   */
  exportPolicy?: VolumePropertiesExportPolicy;
  /**
   * protocolTypes. Set of protocol types, default NFSv3, CIFS for SMB protocol
   */
  protocolTypes?: string[];
  /**
   * Azure lifecycle management
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * Snapshot ID. UUID v4 or resource identifier used to identify the Snapshot.
   */
  snapshotId?: string;
  /**
   * Backup ID. UUID v4 or resource identifier used to identify the Backup.
   */
  backupId?: string;
  /**
   * Baremetal Tenant ID. Unique Baremetal Tenant Identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly baremetalTenantId?: string;
  /**
   * The Azure Resource URI for a delegated subnet. Must have the delegation
   * Microsoft.NetApp/volumes
   */
  subnetId: string;
  /**
   * mountTargets. List of mount targets
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly mountTargets?: MountTargetProperties[];
  /**
   * What type of volume is this
   */
  volumeType?: string;
  /**
   * DataProtection. DataProtection type volumes include an object containing details of the
   * replication
   */
  dataProtection?: VolumePropertiesDataProtection;
  /**
   * Restoring
   */
  isRestoring?: boolean;
  /**
   * If enabled (true) the volume will contain a read-only snapshot directory which provides access
   * to each of the volume's snapshots (default to true). Default value: true.
   */
  snapshotDirectoryVisible?: boolean;
  /**
   * Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later.
   * Default value: false.
   */
  kerberosEnabled?: boolean;
  /**
   * The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS
   * protocol. Possible values include: 'ntfs', 'unix'. Default value: 'unix'.
   */
  securityStyle?: SecurityStyle;
  /**
   * Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be
   * used with swagger version 2020-08-01 or later. Default value: false.
   */
  smbEncryption?: boolean;
  /**
   * Enables continuously available share property for smb volume. Only applicable for SMB volume.
   * Default value: false.
   */
  smbContinuouslyAvailable?: boolean;
  /**
   * Maximum throughput in Mibps that can be achieved by this volume. Default value: 0.
   */
  throughputMibps?: number;
  /**
   * Encryption Key Source. Possible values are: 'Microsoft.NetApp'
   */
  encryptionKeySource?: string;
  /**
   * Specifies whether LDAP is enabled or not for a given NFS volume. Default value: false.
   */
  ldapEnabled?: boolean;
}

/**
 * Identity for the resource.
 */
export interface ResourceIdentity {
  /**
   * Object id of the identity resource
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalId?: string;
  /**
   * The tenant id of the resource
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tenantId?: string;
  /**
   * Type of Identity. Supported values are: 'None', 'SystemAssigned'
   */
  type?: string;
}

/**
 * Replication status
 */
export interface ReplicationStatus {
  /**
   * Replication health check
   */
  healthy?: boolean;
  /**
   * Status of the mirror relationship. Possible values include: 'Idle', 'Transferring'
   */
  relationshipStatus?: RelationshipStatus;
  /**
   * The status of the replication. Possible values include: 'Uninitialized', 'Mirrored', 'Broken'
   */
  mirrorState?: MirrorState;
  /**
   * The progress of the replication
   */
  totalProgress?: string;
  /**
   * Displays error message if the replication is in an error state
   */
  errorMessage?: string;
}

/**
 * Set of export policy rules
 * @summary exportPolicy
 */
export interface VolumePatchPropertiesExportPolicy {
  /**
   * Export policy rule. Export policy rule
   */
  rules?: ExportPolicyRule[];
}

/**
 * DataProtection type volumes include an object containing details of the replication
 * @summary DataProtection
 */
export interface VolumePatchPropertiesDataProtection {
  /**
   * Backup. Backup Properties
   */
  backup?: VolumeBackupProperties;
  /**
   * Snapshot. Snapshot properties.
   */
  snapshot?: VolumeSnapshotProperties;
}

/**
 * Volume patch resource
 */
export interface VolumePatch extends BaseResource {
  /**
   * Resource location
   */
  location?: string;
  /**
   * Resource Id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
  /**
   * serviceLevel. The service level of the file system. Possible values include: 'Standard',
   * 'Premium', 'Ultra'. Default value: 'Premium'.
   */
  serviceLevel?: ServiceLevel;
  /**
   * usageThreshold. Maximum storage quota allowed for a file system in bytes. This is a soft quota
   * used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.
   * Default value: 107374182400.
   */
  usageThreshold?: number;
  /**
   * exportPolicy. Set of export policy rules
   */
  exportPolicy?: VolumePatchPropertiesExportPolicy;
  /**
   * Maximum throughput in Mibps that can be achieved by this volume.
   */
  throughputMibps?: number;
  /**
   * DataProtection. DataProtection type volumes include an object containing details of the
   * replication
   */
  dataProtection?: VolumePatchPropertiesDataProtection;
}

/**
 * Mount Target
 */
export interface MountTarget {
  /**
   * Resource location
   */
  location: string;
  /**
   * Resource Id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
  /**
   * mountTargetId. UUID v4 used to identify the MountTarget
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly mountTargetId?: string;
  /**
   * fileSystemId. UUID v4 used to identify the MountTarget
   */
  fileSystemId: string;
  /**
   * ipAddress. The mount target's IPv4 address
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly ipAddress?: string;
  /**
   * smbServerFQDN. The SMB server's Fully Qualified Domain Name, FQDN
   */
  smbServerFqdn?: string;
}

/**
 * Snapshot of a Volume
 */
export interface Snapshot extends BaseResource {
  /**
   * Resource location
   */
  location: string;
  /**
   * Resource Id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * snapshotId. UUID v4 used to identify the Snapshot
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly snapshotId?: string;
  /**
   * name. The creation date of the snapshot
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly created?: Date;
  /**
   * Azure lifecycle management
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
}

/**
 * Hourly Schedule properties
 */
export interface HourlySchedule {
  /**
   * Hourly snapshot count to keep
   */
  snapshotsToKeep?: number;
  /**
   * Indicates which minute snapshot should be taken
   */
  minute?: number;
  /**
   * Resource size in bytes, current storage usage for the volume in bytes
   */
  usedBytes?: number;
}

/**
 * Daily Schedule properties
 */
export interface DailySchedule {
  /**
   * Daily snapshot count to keep
   */
  snapshotsToKeep?: number;
  /**
   * Indicates which hour in UTC timezone a snapshot should be taken
   */
  hour?: number;
  /**
   * Indicates which minute snapshot should be taken
   */
  minute?: number;
  /**
   * Resource size in bytes, current storage usage for the volume in bytes
   */
  usedBytes?: number;
}

/**
 * Weekly Schedule properties, make a snapshot every week at a specific day or days
 */
export interface WeeklySchedule {
  /**
   * Weekly snapshot count to keep
   */
  snapshotsToKeep?: number;
  /**
   * Indicates which weekdays snapshot should be taken, accepts a comma separated list of week day
   * names in english
   */
  day?: string;
  /**
   * Indicates which hour in UTC timezone a snapshot should be taken
   */
  hour?: number;
  /**
   * Indicates which minute snapshot should be taken
   */
  minute?: number;
  /**
   * Resource size in bytes, current storage usage for the volume in bytes
   */
  usedBytes?: number;
}

/**
 * Monthly Schedule properties
 */
export interface MonthlySchedule {
  /**
   * Monthly snapshot count to keep
   */
  snapshotsToKeep?: number;
  /**
   * Indicates which days of the month snapshot should be taken. A comma delimited string.
   */
  daysOfMonth?: string;
  /**
   * Indicates which hour in UTC timezone a snapshot should be taken
   */
  hour?: number;
  /**
   * Indicates which minute snapshot should be taken
   */
  minute?: number;
  /**
   * Resource size in bytes, current storage usage for the volume in bytes
   */
  usedBytes?: number;
}

/**
 * Snapshot policy information
 */
export interface SnapshotPolicy extends BaseResource {
  /**
   * Resource location
   */
  location: string;
  /**
   * Resource Id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
  /**
   * hourlySchedule. Schedule for hourly snapshots
   */
  hourlySchedule?: HourlySchedule;
  /**
   * dailySchedule. Schedule for daily snapshots
   */
  dailySchedule?: DailySchedule;
  /**
   * weeklySchedule. Schedule for weekly snapshots
   */
  weeklySchedule?: WeeklySchedule;
  /**
   * monthlySchedule. Schedule for monthly snapshots
   */
  monthlySchedule?: MonthlySchedule;
  /**
   * The property to decide policy is enabled or not
   */
  enabled?: boolean;
  /**
   * Azure lifecycle management
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
}

/**
 * Snapshot policy properties
 */
export interface SnapshotPolicyDetails {
  /**
   * Resource location
   */
  location?: string;
  /**
   * Resource Id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
  /**
   * hourlySchedule. Schedule for hourly snapshots
   */
  hourlySchedule?: HourlySchedule;
  /**
   * dailySchedule. Schedule for daily snapshots
   */
  dailySchedule?: DailySchedule;
  /**
   * weeklySchedule. Schedule for weekly snapshots
   */
  weeklySchedule?: WeeklySchedule;
  /**
   * monthlySchedule. Schedule for monthly snapshots
   */
  monthlySchedule?: MonthlySchedule;
  /**
   * The property to decide policy is enabled or not
   */
  enabled?: boolean;
  /**
   * Azure lifecycle management
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
}

/**
 * Snapshot policy Details for create and update
 */
export interface SnapshotPolicyPatch {
  /**
   * Resource location
   */
  location?: string;
  /**
   * Resource Id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
  /**
   * hourlySchedule. Schedule for hourly snapshots
   */
  hourlySchedule?: HourlySchedule;
  /**
   * dailySchedule. Schedule for daily snapshots
   */
  dailySchedule?: DailySchedule;
  /**
   * weeklySchedule. Schedule for weekly snapshots
   */
  weeklySchedule?: WeeklySchedule;
  /**
   * monthlySchedule. Schedule for monthly snapshots
   */
  monthlySchedule?: MonthlySchedule;
  /**
   * The property to decide policy is enabled or not
   */
  enabled?: boolean;
  /**
   * Azure lifecycle management
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
}

/**
 * Volumes associated with snapshot policy
 */
export interface SnapshotPolicyVolumeList {
  /**
   * List of volumes
   */
  value?: any[];
}

/**
 * revert a volume to the snapshot
 */
export interface VolumeRevert {
  /**
   * Resource id of the snapshot
   */
  snapshotId?: string;
}

/**
 * Authorize request
 */
export interface AuthorizeRequest {
  /**
   * Resource id of the remote volume
   */
  remoteVolumeResourceId?: string;
}

/**
 * Break replication request
 */
export interface BreakReplicationRequest {
  /**
   * If replication is in status transferring and you want to force break the replication, set to
   * true
   */
  forceBreakReplication?: boolean;
}

/**
 * Pool change request
 */
export interface PoolChangeRequest {
  /**
   * Resource id of the pool to move volume to
   */
  newPoolResourceId: string;
}

/**
 * Backup of a Volume
 */
export interface Backup extends BaseResource {
  /**
   * Resource location
   */
  location: string;
  /**
   * Resource Id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * backupId. UUID v4 used to identify the Backup
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly backupId?: string;
  /**
   * name. The creation date of the backup
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly creationDate?: Date;
  /**
   * Azure lifecycle management
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * Size of backup
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly size?: number;
  /**
   * Label for backup
   */
  label?: string;
  /**
   * backupType. Type of backup Manual or Scheduled. Possible values include: 'Manual', 'Scheduled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly backupType?: BackupType;
  /**
   * Failure reason
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly failureReason?: string;
  /**
   * Volume name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly volumeName?: string;
  /**
   * Manual backup an already existing snapshot. This will always be false for scheduled backups
   * and true/false for manual backups. Default value: false.
   */
  useExistingSnapshot?: boolean;
}

/**
 * Backup patch
 */
export interface BackupPatch extends BaseResource {
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
  /**
   * backupId. UUID v4 used to identify the Backup
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly backupId?: string;
  /**
   * name. The creation date of the backup
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly creationDate?: Date;
  /**
   * Azure lifecycle management
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * Size of backup
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly size?: number;
  /**
   * Label for backup
   */
  label?: string;
  /**
   * backupType. Type of backup Manual or Scheduled. Possible values include: 'Manual', 'Scheduled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly backupType?: BackupType;
  /**
   * Failure reason
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly failureReason?: string;
  /**
   * Volume name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly volumeName?: string;
  /**
   * Manual backup an already existing snapshot. This will always be false for scheduled backups
   * and true/false for manual backups. Default value: false.
   */
  useExistingSnapshot?: boolean;
}

/**
 * Volume details using the backup policy
 */
export interface VolumeBackups {
  /**
   * Volume name
   */
  volumeName?: string;
  /**
   * Total count of backups for volume
   */
  backupsCount?: number;
  /**
   * Policy enabled
   */
  policyEnabled?: boolean;
}

/**
 * Backup policy information
 */
export interface BackupPolicy extends BaseResource {
  /**
   * Resource location
   */
  location: string;
  /**
   * Resource Id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
  /**
   * Name of backup policy
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name1?: string;
  /**
   * Azure lifecycle management
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * Daily backups count to keep
   */
  dailyBackupsToKeep?: number;
  /**
   * Weekly backups count to keep
   */
  weeklyBackupsToKeep?: number;
  /**
   * Monthly backups count to keep
   */
  monthlyBackupsToKeep?: number;
  /**
   * Yearly backups count to keep
   */
  yearlyBackupsToKeep?: number;
  /**
   * Volumes using current backup policy
   */
  volumesAssigned?: number;
  /**
   * The property to decide policy is enabled or not
   */
  enabled?: boolean;
  /**
   * A list of volumes assigned to this policy
   */
  volumeBackups?: VolumeBackups[];
}

/**
 * Backup policy properties
 */
export interface BackupPolicyDetails extends BaseResource {
  /**
   * Resource location
   */
  location?: string;
  /**
   * Resource Id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
  /**
   * Name of backup policy
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name1?: string;
  /**
   * Azure lifecycle management
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * Daily backups count to keep
   */
  dailyBackupsToKeep?: number;
  /**
   * Weekly backups count to keep
   */
  weeklyBackupsToKeep?: number;
  /**
   * Monthly backups count to keep
   */
  monthlyBackupsToKeep?: number;
  /**
   * Yearly backups count to keep
   */
  yearlyBackupsToKeep?: number;
  /**
   * Volumes using current backup policy
   */
  volumesAssigned?: number;
  /**
   * The property to decide policy is enabled or not
   */
  enabled?: boolean;
  /**
   * A list of volumes assigned to this policy
   */
  volumeBackups?: VolumeBackups[];
}

/**
 * Backup policy Details for create and update
 */
export interface BackupPolicyPatch extends BaseResource {
  /**
   * Resource location
   */
  location?: string;
  /**
   * Resource Id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
  /**
   * Name of backup policy
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name1?: string;
  /**
   * Azure lifecycle management
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * Daily backups count to keep
   */
  dailyBackupsToKeep?: number;
  /**
   * Weekly backups count to keep
   */
  weeklyBackupsToKeep?: number;
  /**
   * Monthly backups count to keep
   */
  monthlyBackupsToKeep?: number;
  /**
   * Yearly backups count to keep
   */
  yearlyBackupsToKeep?: number;
  /**
   * Volumes using current backup policy
   */
  volumesAssigned?: number;
  /**
   * The property to decide policy is enabled or not
   */
  enabled?: boolean;
  /**
   * A list of volumes assigned to this policy
   */
  volumeBackups?: VolumeBackups[];
}

/**
 * Vault information
 */
export interface Vault extends BaseResource {
  /**
   * Resource location
   */
  location: string;
  /**
   * Resource Id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Vault Name
   */
  vaultName?: string;
}

/**
 * Backup status
 */
export interface BackupStatus {
  /**
   * Backup health status
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly healthy?: boolean;
  /**
   * Status of the backup mirror relationship. Possible values include: 'Idle', 'Transferring'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly relationshipStatus?: RelationshipStatus;
  /**
   * The status of the backup. Possible values include: 'Uninitialized', 'Mirrored', 'Broken'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly mirrorState?: MirrorState;
  /**
   * Reason for the unhealthy backup relationship
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly unhealthyReason?: string;
  /**
   * Displays error message if the backup is in an error state
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errorMessage?: string;
}

/**
 * Optional Parameters.
 */
export interface VolumesRevertOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Resource id of the snapshot
   */
  snapshotId?: string;
}

/**
 * Optional Parameters.
 */
export interface VolumesBreakReplicationOptionalParams extends msRest.RequestOptionsBase {
  /**
   * If replication is in status transferring and you want to force break the replication, set to
   * true
   */
  forceBreakReplication?: boolean;
}

/**
 * Optional Parameters.
 */
export interface VolumesAuthorizeReplicationOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Resource id of the remote volume
   */
  remoteVolumeResourceId?: string;
}

/**
 * Optional Parameters.
 */
export interface VolumesBeginRevertOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Resource id of the snapshot
   */
  snapshotId?: string;
}

/**
 * Optional Parameters.
 */
export interface VolumesBeginBreakReplicationOptionalParams extends msRest.RequestOptionsBase {
  /**
   * If replication is in status transferring and you want to force break the replication, set to
   * true
   */
  forceBreakReplication?: boolean;
}

/**
 * Optional Parameters.
 */
export interface VolumesBeginAuthorizeReplicationOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Resource id of the remote volume
   */
  remoteVolumeResourceId?: string;
}

/**
 * Optional Parameters.
 */
export interface BackupsUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Backup object supplied in the body of the operation.
   */
  body?: BackupPatch;
}

/**
 * Optional Parameters.
 */
export interface BackupsBeginUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Backup object supplied in the body of the operation.
   */
  body?: BackupPatch;
}

/**
 * An interface representing AzureNetAppFilesManagementClientOptions.
 */
export interface AzureNetAppFilesManagementClientOptions extends AzureServiceClientOptions {
  baseUri?: string;
}

/**
 * @interface
 * Result of the request to list Cloud Volume operations. It contains a list of operations and a
 * URL link to get the next set of results.
 * @extends Array<Operation>
 */
export interface OperationListResult extends Array<Operation> {}

/**
 * @interface
 * List of NetApp account resources
 * @extends Array<NetAppAccount>
 */
export interface NetAppAccountList extends Array<NetAppAccount> {
  /**
   * URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * List of capacity pool resources
 * @extends Array<CapacityPool>
 */
export interface CapacityPoolList extends Array<CapacityPool> {
  /**
   * URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * List of volume resources
 * @extends Array<Volume>
 */
export interface VolumeList extends Array<Volume> {
  /**
   * URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * List of Snapshots
 * @extends Array<Snapshot>
 */
export interface SnapshotsList extends Array<Snapshot> {}

/**
 * @interface
 * List of Snapshot Policies
 * @extends Array<SnapshotPolicy>
 */
export interface SnapshotPoliciesList extends Array<SnapshotPolicy> {}

/**
 * @interface
 * List of Backups
 * @extends Array<Backup>
 */
export interface BackupsList extends Array<Backup> {}

/**
 * @interface
 * List of Backup Policies
 * @extends Array<BackupPolicy>
 */
export interface BackupPoliciesList extends Array<BackupPolicy> {}

/**
 * @interface
 * List of Vaults
 * @extends Array<Vault>
 */
export interface VaultList extends Array<Vault> {}

/**
 * Defines values for InAvailabilityReasonType.
 * Possible values include: 'Invalid', 'AlreadyExists'
 * @readonly
 * @enum {string}
 */
export type InAvailabilityReasonType = "Invalid" | "AlreadyExists";

/**
 * Defines values for CheckNameResourceTypes.
 * Possible values include: 'Microsoft.NetApp/netAppAccounts',
 * 'Microsoft.NetApp/netAppAccounts/capacityPools',
 * 'Microsoft.NetApp/netAppAccounts/capacityPools/volumes',
 * 'Microsoft.NetApp/netAppAccounts/capacityPools/volumes/snapshots'
 * @readonly
 * @enum {string}
 */
export type CheckNameResourceTypes =
  | "Microsoft.NetApp/netAppAccounts"
  | "Microsoft.NetApp/netAppAccounts/capacityPools"
  | "Microsoft.NetApp/netAppAccounts/capacityPools/volumes"
  | "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/snapshots";

/**
 * Defines values for CheckQuotaNameResourceTypes.
 * Possible values include: 'Microsoft.NetApp/netAppAccounts',
 * 'Microsoft.NetApp/netAppAccounts/capacityPools',
 * 'Microsoft.NetApp/netAppAccounts/capacityPools/volumes',
 * 'Microsoft.NetApp/netAppAccounts/capacityPools/volumes/snapshots'
 * @readonly
 * @enum {string}
 */
export type CheckQuotaNameResourceTypes =
  | "Microsoft.NetApp/netAppAccounts"
  | "Microsoft.NetApp/netAppAccounts/capacityPools"
  | "Microsoft.NetApp/netAppAccounts/capacityPools/volumes"
  | "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/snapshots";

/**
 * Defines values for ActiveDirectoryStatus.
 * Possible values include: 'Created', 'InUse', 'Deleted', 'Error', 'Updating'
 * @readonly
 * @enum {string}
 */
export type ActiveDirectoryStatus = "Created" | "InUse" | "Deleted" | "Error" | "Updating";

/**
 * Defines values for CreatedByType.
 * Possible values include: 'User', 'Application', 'ManagedIdentity', 'Key'
 * @readonly
 * @enum {string}
 */
export type CreatedByType = "User" | "Application" | "ManagedIdentity" | "Key";

/**
 * Defines values for ServiceLevel.
 * Possible values include: 'Standard', 'Premium', 'Ultra'
 * @readonly
 * @enum {string}
 */
export type ServiceLevel = "Standard" | "Premium" | "Ultra";

/**
 * Defines values for QosType.
 * Possible values include: 'Auto', 'Manual'
 * @readonly
 * @enum {string}
 */
export type QosType = "Auto" | "Manual";

/**
 * Defines values for EndpointType.
 * Possible values include: 'src', 'dst'
 * @readonly
 * @enum {string}
 */
export type EndpointType = "src" | "dst";

/**
 * Defines values for ReplicationSchedule.
 * Possible values include: '_10minutely', 'hourly', 'daily'
 * @readonly
 * @enum {string}
 */
export type ReplicationSchedule = "_10minutely" | "hourly" | "daily";

/**
 * Defines values for SecurityStyle.
 * Possible values include: 'ntfs', 'unix'
 * @readonly
 * @enum {string}
 */
export type SecurityStyle = "ntfs" | "unix";

/**
 * Defines values for RelationshipStatus.
 * Possible values include: 'Idle', 'Transferring'
 * @readonly
 * @enum {string}
 */
export type RelationshipStatus = "Idle" | "Transferring";

/**
 * Defines values for MirrorState.
 * Possible values include: 'Uninitialized', 'Mirrored', 'Broken'
 * @readonly
 * @enum {string}
 */
export type MirrorState = "Uninitialized" | "Mirrored" | "Broken";

/**
 * Defines values for BackupType.
 * Possible values include: 'Manual', 'Scheduled'
 * @readonly
 * @enum {string}
 */
export type BackupType = "Manual" | "Scheduled";

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationListResult;
  };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type NetAppResourceCheckNameAvailabilityResponse = CheckAvailabilityResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CheckAvailabilityResponse;
  };
};

/**
 * Contains response data for the checkFilePathAvailability operation.
 */
export type NetAppResourceCheckFilePathAvailabilityResponse = CheckAvailabilityResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CheckAvailabilityResponse;
  };
};

/**
 * Contains response data for the checkQuotaAvailability operation.
 */
export type NetAppResourceCheckQuotaAvailabilityResponse = CheckAvailabilityResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CheckAvailabilityResponse;
  };
};

/**
 * Contains response data for the list operation.
 */
export type AccountsListResponse = NetAppAccountList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetAppAccountList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type AccountsGetResponse = NetAppAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetAppAccount;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type AccountsCreateOrUpdateResponse = NetAppAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetAppAccount;
  };
};

/**
 * Contains response data for the update operation.
 */
export type AccountsUpdateResponse = NetAppAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetAppAccount;
  };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type AccountsBeginCreateOrUpdateResponse = NetAppAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetAppAccount;
  };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type AccountsBeginUpdateResponse = NetAppAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetAppAccount;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type AccountsListNextResponse = NetAppAccountList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NetAppAccountList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type PoolsListResponse = CapacityPoolList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CapacityPoolList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type PoolsGetResponse = CapacityPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CapacityPool;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PoolsCreateOrUpdateResponse = CapacityPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CapacityPool;
  };
};

/**
 * Contains response data for the update operation.
 */
export type PoolsUpdateResponse = CapacityPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CapacityPool;
  };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type PoolsBeginCreateOrUpdateResponse = CapacityPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CapacityPool;
  };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type PoolsBeginUpdateResponse = CapacityPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CapacityPool;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type PoolsListNextResponse = CapacityPoolList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CapacityPoolList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type VolumesListResponse = VolumeList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VolumeList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type VolumesGetResponse = Volume & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Volume;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VolumesCreateOrUpdateResponse = Volume & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Volume;
  };
};

/**
 * Contains response data for the update operation.
 */
export type VolumesUpdateResponse = Volume & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Volume;
  };
};

/**
 * Contains response data for the replicationStatusMethod operation.
 */
export type VolumesReplicationStatusMethodResponse = ReplicationStatus & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReplicationStatus;
  };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type VolumesBeginCreateOrUpdateResponse = Volume & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Volume;
  };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type VolumesBeginUpdateResponse = Volume & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Volume;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type VolumesListNextResponse = VolumeList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VolumeList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type SnapshotsListResponse = SnapshotsList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SnapshotsList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type SnapshotsGetResponse = Snapshot & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Snapshot;
  };
};

/**
 * Contains response data for the create operation.
 */
export type SnapshotsCreateResponse = Snapshot & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Snapshot;
  };
};

/**
 * Contains response data for the update operation.
 */
export type SnapshotsUpdateResponse = Snapshot & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Snapshot;
  };
};

/**
 * Contains response data for the beginCreate operation.
 */
export type SnapshotsBeginCreateResponse = Snapshot & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Snapshot;
  };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type SnapshotsBeginUpdateResponse = Snapshot & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Snapshot;
  };
};

/**
 * Contains response data for the list operation.
 */
export type SnapshotPoliciesListResponse = SnapshotPoliciesList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SnapshotPoliciesList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type SnapshotPoliciesGetResponse = SnapshotPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SnapshotPolicy;
  };
};

/**
 * Contains response data for the create operation.
 */
export type SnapshotPoliciesCreateResponse = SnapshotPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SnapshotPolicy;
  };
};

/**
 * Contains response data for the update operation.
 */
export type SnapshotPoliciesUpdateResponse = SnapshotPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SnapshotPolicy;
  };
};

/**
 * Contains response data for the listVolumes operation.
 */
export type SnapshotPoliciesListVolumesResponse = SnapshotPolicyVolumeList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SnapshotPolicyVolumeList;
  };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type SnapshotPoliciesBeginUpdateResponse = SnapshotPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SnapshotPolicy;
  };
};

/**
 * Contains response data for the getStatus operation.
 */
export type BackupsGetStatusResponse = BackupStatus & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupStatus;
  };
};

/**
 * Contains response data for the list operation.
 */
export type BackupsListResponse = BackupsList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupsList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type BackupsGetResponse = Backup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Backup;
  };
};

/**
 * Contains response data for the create operation.
 */
export type BackupsCreateResponse = Backup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Backup;
  };
};

/**
 * Contains response data for the update operation.
 */
export type BackupsUpdateResponse = Backup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Backup;
  };
};

/**
 * Contains response data for the beginCreate operation.
 */
export type BackupsBeginCreateResponse = Backup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Backup;
  };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type BackupsBeginUpdateResponse = Backup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Backup;
  };
};

/**
 * Contains response data for the list operation.
 */
export type AccountBackupsListResponse = BackupsList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupsList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type AccountBackupsGetResponse = Backup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Backup;
  };
};

/**
 * Contains response data for the list operation.
 */
export type BackupPoliciesListResponse = BackupPoliciesList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupPoliciesList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type BackupPoliciesGetResponse = BackupPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupPolicy;
  };
};

/**
 * Contains response data for the create operation.
 */
export type BackupPoliciesCreateResponse = BackupPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupPolicy;
  };
};

/**
 * Contains response data for the update operation.
 */
export type BackupPoliciesUpdateResponse = BackupPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupPolicy;
  };
};

/**
 * Contains response data for the beginCreate operation.
 */
export type BackupPoliciesBeginCreateResponse = BackupPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupPolicy;
  };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type BackupPoliciesBeginUpdateResponse = BackupPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupPolicy;
  };
};

/**
 * Contains response data for the list operation.
 */
export type VaultsListResponse = VaultList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: VaultList;
  };
};
