/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Result of the request to list Cloud Volume operations. It contains a list of operations and a URL link to get the next set of results. */
export interface OperationListResult {
  /** List of Storage operations supported by the Storage resource provider. */
  value?: Operation[];
}

/** Microsoft.NetApp REST API operation definition. */
export interface Operation {
  /** Operation name: {provider}/{resource}/{operation} */
  name?: string;
  /** Display metadata associated with the operation. */
  display?: OperationDisplay;
  /** The origin of operations. */
  origin?: string;
  /** One property of operation, include metric specifications. */
  serviceSpecification?: ServiceSpecification;
}

/** Display metadata associated with the operation. */
export interface OperationDisplay {
  /** Service provider: Microsoft NetApp. */
  provider?: string;
  /** Resource on which the operation is performed etc. */
  resource?: string;
  /** Type of operation: get, read, delete, etc. */
  operation?: string;
  /** Operation description. */
  description?: string;
}

/** One property of operation, include metric specifications. */
export interface ServiceSpecification {
  /** Metric specifications of operation. */
  metricSpecifications?: MetricSpecification[];
  /** Log specification of operation. */
  logSpecifications?: LogSpecification[];
}

/** Metric specification of operation. */
export interface MetricSpecification {
  /** Name of metric specification. */
  name?: string;
  /** Display name of metric specification. */
  displayName?: string;
  /** Display description of metric specification. */
  displayDescription?: string;
  /** Unit could be Bytes or Count. */
  unit?: string;
  /** Support metric aggregation type. */
  supportedAggregationTypes?: MetricAggregationType[];
  /** The supported time grain types for the metrics. */
  supportedTimeGrainTypes?: string[];
  /** The internal metric name. */
  internalMetricName?: string;
  /** Whether or not the service is using regional MDM accounts. */
  enableRegionalMdmAccount?: boolean;
  /** The source MDM account. */
  sourceMdmAccount?: string;
  /** The source MDM namespace. */
  sourceMdmNamespace?: string;
  /** Dimensions of blobs, including blob type and access tier. */
  dimensions?: Dimension[];
  /** Aggregation type could be Average. */
  aggregationType?: string;
  /** The property to decide fill gap with zero or not. */
  fillGapWithZero?: boolean;
  /** The category this metric specification belong to, could be Capacity. */
  category?: string;
  /** Account Resource Id. */
  resourceIdDimensionNameOverride?: string;
  /** Whether the metric is internal. */
  isInternal?: boolean;
}

/** Dimension of blobs, possibly be blob type or access tier. */
export interface Dimension {
  /** Display name of dimension. */
  name?: string;
  /** Display name of dimension. */
  displayName?: string;
}

/** Log Definition of a single resource metric. */
export interface LogSpecification {
  /** Name of log specification. */
  name?: string;
  /** Display name of log specification. */
  displayName?: string;
}

/** Resource name availability request content. */
export interface ResourceNameAvailabilityRequest {
  /** Resource name to verify. */
  name: string;
  /** Resource type used for verification. */
  type: CheckNameResourceTypes;
  /** Resource group name. */
  resourceGroup: string;
}

/** Information regarding availability of a resource. */
export interface CheckAvailabilityResponse {
  /** <code>true</code> indicates name is valid and available. <code>false</code> indicates the name is invalid, unavailable, or both. */
  isAvailable?: boolean;
  /** <code>Invalid</code> indicates the name provided does not match Azure App Service naming requirements. <code>AlreadyExists</code> indicates that the name is already in use and is therefore unavailable. */
  reason?: InAvailabilityReasonType;
  /** If reason == invalid, provide the user with the reason why the given name is invalid, and provide the resource naming requirements so that the user can select a valid name. If reason == AlreadyExists, explain that resource name is already in use, and direct them to select a different name. */
  message?: string;
}

/** File path availability request content - availability is based on the name and the subnetId. */
export interface FilePathAvailabilityRequest {
  /** File path to verify. */
  name: string;
  /** The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes */
  subnetId: string;
}

/** Quota availability request content. */
export interface QuotaAvailabilityRequest {
  /** Name of the resource to verify. */
  name: string;
  /** Resource type used for verification. */
  type: CheckQuotaNameResourceTypes;
  /** Resource group name. */
  resourceGroup: string;
}

/** List of Subscription Quota Items */
export interface SubscriptionQuotaItemList {
  /** A list of SubscriptionQuotaItems */
  value?: SubscriptionQuotaItem[];
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** Provides region specific information. */
export interface RegionInfo {
  /** Provides storage to network proximity information in the region. */
  storageToNetworkProximity?: RegionStorageToNetworkProximity;
  /** Provides logical availability zone mappings for the subscription for a region. */
  availabilityZoneMappings?: RegionInfoAvailabilityZoneMappingsItem[];
}

export interface RegionInfoAvailabilityZoneMappingsItem {
  /** Logical availability zone. */
  availabilityZone?: string;
  /** Available availability zone */
  isAvailable?: boolean;
}

/** List of NetApp account resources */
export interface NetAppAccountList {
  /** Multiple NetApp accounts */
  value?: NetAppAccount[];
  /** URL to get the next set of results. */
  nextLink?: string;
}

/** Active Directory */
export interface ActiveDirectory {
  /** Id of the Active Directory */
  activeDirectoryId?: string;
  /** A domain user account with permission to create machine accounts */
  username?: string;
  /** Plain text password of Active Directory domain administrator, value is masked in the response */
  password?: string;
  /** Name of the Active Directory domain */
  domain?: string;
  /** Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain */
  dns?: string;
  /**
   * Status of the Active Directory
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: ActiveDirectoryStatus;
  /**
   * Any details in regards to the Status of the Active Directory
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusDetails?: string;
  /** NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes */
  smbServerName?: string;
  /** The Organizational Unit (OU) within the Windows Active Directory */
  organizationalUnit?: string;
  /** The Active Directory site the service will limit Domain Controller discovery to */
  site?: string;
  /** Users to be added to the Built-in Backup Operator active directory group. A list of unique usernames without domain specifier */
  backupOperators?: string[];
  /** Users to be added to the Built-in Administrators active directory group. A list of unique usernames without domain specifier */
  administrators?: string[];
  /** kdc server IP addresses for the active directory machine. This optional parameter is used only while creating kerberos volume. */
  kdcIP?: string;
  /** Name of the active directory machine. This optional parameter is used only while creating kerberos volume */
  adName?: string;
  /** When LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active Directory Certificate Service's self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes. */
  serverRootCACertificate?: string;
  /** If enabled, AES encryption will be enabled for SMB communication. */
  aesEncryption?: boolean;
  /** Specifies whether or not the LDAP traffic needs to be signed. */
  ldapSigning?: boolean;
  /** Domain Users in the Active directory to be given SeSecurityPrivilege privilege (Needed for SMB Continuously available shares for SQL). A list of unique usernames without domain specifier */
  securityOperators?: string[];
  /** Specifies whether or not the LDAP traffic needs to be secured via TLS. */
  ldapOverTLS?: boolean;
  /**  If enabled, NFS client local users can also (in addition to LDAP users) access the NFS volumes. */
  allowLocalNfsUsersWithLdap?: boolean;
  /** If enabled, Traffic between the SMB server to Domain Controller (DC) will be encrypted. */
  encryptDCConnections?: boolean;
  /** LDAP Search scope options */
  ldapSearchScope?: LdapSearchScopeOpt;
  /** Comma separated list of IPv4 addresses of preferred servers for LDAP client. At most two comma separated IPv4 addresses can be passed. */
  preferredServersForLdapClient?: string;
}

/** LDAP search scope */
export interface LdapSearchScopeOpt {
  /** This specifies the user DN, which overrides the base DN for user lookups. */
  userDN?: string;
  /** This specifies the group DN, which overrides the base DN for group lookups. */
  groupDN?: string;
  /** This specifies the custom LDAP search filter to be used when looking up group membership from LDAP server. */
  groupMembershipFilter?: string;
}

/** Encryption settings */
export interface AccountEncryption {
  /** The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.NetApp, Microsoft.KeyVault */
  keySource?: KeySource;
  /** Properties provided by KeVault. Applicable if keySource is 'Microsoft.KeyVault'. */
  keyVaultProperties?: KeyVaultProperties;
  /** Identity used to authenticate to KeyVault. Applicable if keySource is 'Microsoft.KeyVault'. */
  identity?: EncryptionIdentity;
}

/** Properties of key vault. */
export interface KeyVaultProperties {
  /**
   * UUID v4 used to identify the Azure Key Vault configuration
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly keyVaultId?: string;
  /** The Uri of KeyVault. */
  keyVaultUri: string;
  /** The name of KeyVault key. */
  keyName: string;
  /** The resource ID of KeyVault. */
  keyVaultResourceId: string;
  /**
   * Status of the KeyVault connection.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: KeyVaultStatus;
}

/** Identity used to authenticate with key vault. */
export interface EncryptionIdentity {
  /**
   * The principal ID (object ID) of the identity used to authenticate with key vault. Read-only.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /** The ARM resource identifier of the user assigned identity used to authenticate with key vault. Applicable if identity.type has 'UserAssigned'. It should match key of identity.userAssignedIdentities. */
  userAssignedIdentity?: string;
}

/** Managed service identity (system assigned and/or user assigned identities) */
export interface ManagedServiceIdentity {
  /**
   * The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed). */
  type: ManagedServiceIdentityType;
  /** The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests. */
  userAssignedIdentities?: { [propertyName: string]: UserAssignedIdentity };
}

/** User assigned identity properties */
export interface UserAssignedIdentity {
  /**
   * The principal ID of the assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The client ID of the assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clientId?: string;
}

/** NetApp account patch resource */
export interface NetAppAccountPatch {
  /** Resource location */
  location?: string;
  /**
   * Resource Id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Resource name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Resource type
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Resource tags */
  tags?: { [propertyName: string]: string };
  /** The identity used for the resource. */
  identity?: ManagedServiceIdentity;
  /**
   * Azure lifecycle management
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** Active Directories */
  activeDirectories?: ActiveDirectory[];
  /** Encryption settings */
  encryption?: AccountEncryption;
  /**
   * Shows the status of disableShowmount for all volumes under the subscription, null equals false
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly disableShowmount?: boolean;
}

/** An error response from the service. */
export interface CloudError {
  /** Cloud error body. */
  error?: CloudErrorBody;
}

/** An error response from the service. */
export interface CloudErrorBody {
  /** An identifier for the error. Codes are invariant and are intended to be consumed programmatically. */
  code?: string;
  /** A message describing the error, intended to be suitable for display in a user interface. */
  message?: string;
}

/** List of capacity pool resources */
export interface CapacityPoolList {
  /** List of Capacity pools */
  value?: CapacityPool[];
  /** URL to get the next set of results. */
  nextLink?: string;
}

/** Capacity pool patch resource */
export interface CapacityPoolPatch {
  /** Resource location */
  location?: string;
  /**
   * Resource Id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Resource name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Resource type
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Resource tags */
  tags?: { [propertyName: string]: string };
  /** Provisioned size of the pool (in bytes). Allowed values are in 1TiB chunks (value must be multiply of 4398046511104). */
  size?: number;
  /** The qos type of the pool */
  qosType?: QosType;
  /** If enabled (true) the pool can contain cool Access enabled volumes. */
  coolAccess?: boolean;
}

/** List of volume resources */
export interface VolumeList {
  /** List of volumes */
  value?: Volume[];
  /** URL to get the next set of results. */
  nextLink?: string;
}

/** Set of export policy rules */
export interface VolumePropertiesExportPolicy {
  /** Export policy rule */
  rules?: ExportPolicyRule[];
}

/** Volume Export Policy Rule */
export interface ExportPolicyRule {
  /** Order index */
  ruleIndex?: number;
  /** Read only access */
  unixReadOnly?: boolean;
  /** Read and write access */
  unixReadWrite?: boolean;
  /** Kerberos5 Read only access. To be use with swagger version 2020-05-01 or later */
  kerberos5ReadOnly?: boolean;
  /** Kerberos5 Read and write access. To be use with swagger version 2020-05-01 or later */
  kerberos5ReadWrite?: boolean;
  /** Kerberos5i Read only access. To be use with swagger version 2020-05-01 or later */
  kerberos5IReadOnly?: boolean;
  /** Kerberos5i Read and write access. To be use with swagger version 2020-05-01 or later */
  kerberos5IReadWrite?: boolean;
  /** Kerberos5p Read only access. To be use with swagger version 2020-05-01 or later */
  kerberos5PReadOnly?: boolean;
  /** Kerberos5p Read and write access. To be use with swagger version 2020-05-01 or later */
  kerberos5PReadWrite?: boolean;
  /** Allows CIFS protocol */
  cifs?: boolean;
  /** Allows NFSv3 protocol. Enable only for NFSv3 type volumes */
  nfsv3?: boolean;
  /** Allows NFSv4.1 protocol. Enable only for NFSv4.1 type volumes */
  nfsv41?: boolean;
  /** Client ingress specification as comma separated string with IPv4 CIDRs, IPv4 host addresses and host names */
  allowedClients?: string;
  /** Has root access to volume */
  hasRootAccess?: boolean;
  /** This parameter specifies who is authorized to change the ownership of a file. restricted - Only root user can change the ownership of the file. unrestricted - Non-root users can change ownership of files that they own. */
  chownMode?: ChownMode;
}

/** Mount target properties */
export interface MountTargetProperties {
  /**
   * UUID v4 used to identify the MountTarget
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly mountTargetId?: string;
  /** UUID v4 used to identify the MountTarget */
  fileSystemId: string;
  /**
   * The mount target's IPv4 address
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipAddress?: string;
  /** The SMB server's Fully Qualified Domain Name, FQDN */
  smbServerFqdn?: string;
}

/** DataProtection type volumes include an object containing details of the replication */
export interface VolumePropertiesDataProtection {
  /** Backup Properties */
  backup?: VolumeBackupProperties;
  /** Replication properties */
  replication?: ReplicationObject;
  /** Snapshot properties. */
  snapshot?: VolumeSnapshotProperties;
  /** VolumeRelocation properties */
  volumeRelocation?: VolumeRelocationProperties;
}

/** Volume Backup Properties */
export interface VolumeBackupProperties {
  /** Backup Policy Resource ID */
  backupPolicyId?: string;
  /** Policy Enforced */
  policyEnforced?: boolean;
  /** Backup Enabled */
  backupEnabled?: boolean;
}

/** Replication properties */
export interface ReplicationObject {
  /** Id */
  replicationId?: string;
  /** Indicates whether the local volume is the source or destination for the Volume Replication */
  endpointType?: EndpointType;
  /** Schedule */
  replicationSchedule?: ReplicationSchedule;
  /** The resource ID of the remote volume. */
  remoteVolumeResourceId: string;
  /** The remote region for the other end of the Volume Replication. */
  remoteVolumeRegion?: string;
}

/** Volume Snapshot Properties */
export interface VolumeSnapshotProperties {
  /** Snapshot Policy ResourceId */
  snapshotPolicyId?: string;
}

/** Volume relocation properties */
export interface VolumeRelocationProperties {
  /** Has relocation been requested for this volume */
  relocationRequested?: boolean;
  /**
   * Has relocation finished and is ready to be cleaned up
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly readyToBeFinalized?: boolean;
}

/** Application specific parameters for the placement of volumes in the volume group */
export interface PlacementKeyValuePairs {
  /** Key for an application specific parameter for the placement of volumes in the volume group */
  key: string;
  /** Value for an application specific parameter for the placement of volumes in the volume group */
  value: string;
}

/** Volume patch resource */
export interface VolumePatch {
  /** Resource location */
  location?: string;
  /**
   * Resource Id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Resource name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Resource type
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Resource tags */
  tags?: { [propertyName: string]: string };
  /** The service level of the file system */
  serviceLevel?: ServiceLevel;
  /** Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB, 500Tib for LargeVolume. Specified in bytes. */
  usageThreshold?: number;
  /** Set of export policy rules */
  exportPolicy?: VolumePatchPropertiesExportPolicy;
  /** Maximum throughput in MiB/s that can be achieved by this volume and this will be accepted as input only for manual qosType volume */
  throughputMibps?: number;
  /** DataProtection type volumes include an object containing details of the replication */
  dataProtection?: VolumePatchPropertiesDataProtection;
  /** Specifies if default quota is enabled for the volume. */
  isDefaultQuotaEnabled?: boolean;
  /** Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies . */
  defaultUserQuotaInKiBs?: number;
  /** Default group quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies. */
  defaultGroupQuotaInKiBs?: number;
  /** UNIX permissions for NFS volume accepted in octal 4 digit format. First digit selects the set user ID(4), set group ID (2) and sticky (1) attributes. Second digit selects permission for the owner of the file: read (4), write (2) and execute (1). Third selects permissions for other users in the same group. the fourth for other users not in the group. 0755 - gives read/write/execute permissions to owner and read/execute to group and other users. */
  unixPermissions?: string;
  /** Specifies whether Cool Access(tiering) is enabled for the volume. */
  coolAccess?: boolean;
  /** Specifies the number of days after which data that is not accessed by clients will be tiered. */
  coolnessPeriod?: number;
  /** If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots. */
  snapshotDirectoryVisible?: boolean;
}

/** Set of export policy rules */
export interface VolumePatchPropertiesExportPolicy {
  /** Export policy rule */
  rules?: ExportPolicyRule[];
}

/** DataProtection type volumes include an object containing details of the replication */
export interface VolumePatchPropertiesDataProtection {
  /** Backup Properties */
  backup?: VolumeBackupProperties;
  /** Snapshot properties. */
  snapshot?: VolumeSnapshotProperties;
}

/** revert a volume to the snapshot */
export interface VolumeRevert {
  /** Resource id of the snapshot */
  snapshotId?: string;
}

/** Break file locks request */
export interface BreakFileLocksRequest {
  /** To clear file locks on a volume for a particular client */
  clientIp?: string;
  /** Break File locks could be a disruptive operation for application as locks on the volume will be broken, if want to process, set to true. */
  confirmRunningDisruptiveOperation?: boolean;
}

/** Get group Id list for LDAP User request */
export interface GetGroupIdListForLdapUserRequest {
  /** username is required to fetch the group to which user is part of */
  username: string;
}

/** Group Id list for Ldap user */
export interface GetGroupIdListForLdapUserResponse {
  /** Group Id list */
  groupIdsForLdapUser?: string[];
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** Break replication request */
export interface BreakReplicationRequest {
  /** If replication is in status transferring and you want to force break the replication, set to true */
  forceBreakReplication?: boolean;
}

/** Re-establish request object supplied in the body of the operation. */
export interface ReestablishReplicationRequest {
  /** Resource id of the source volume for the replication */
  sourceVolumeId?: string;
}

/** Replication status */
export interface ReplicationStatus {
  /** Replication health check */
  healthy?: boolean;
  /** Status of the mirror relationship */
  relationshipStatus?: RelationshipStatus;
  /** The status of the replication */
  mirrorState?: MirrorState;
  /** The progress of the replication */
  totalProgress?: string;
  /** Displays error message if the replication is in an error state */
  errorMessage?: string;
}

/** List Replications */
export interface ListReplications {
  /** A list of replications */
  value?: Replication[];
}

/** Replication properties */
export interface Replication {
  /** Indicates whether the local volume is the source or destination for the Volume Replication */
  endpointType?: EndpointType;
  /** Schedule */
  replicationSchedule?: ReplicationSchedule;
  /** The resource ID of the remote volume. */
  remoteVolumeResourceId: string;
  /** The remote region for the other end of the Volume Replication. */
  remoteVolumeRegion?: string;
}

/** Authorize request */
export interface AuthorizeRequest {
  /** Resource id of the remote volume */
  remoteVolumeResourceId?: string;
}

/** Pool change request */
export interface PoolChangeRequest {
  /** Resource id of the pool to move volume to */
  newPoolResourceId: string;
}

/** Relocate volume request */
export interface RelocateVolumeRequest {
  /** New creation token for the volume that controls the mount point name */
  creationToken?: string;
}

/** List of Snapshots */
export interface SnapshotsList {
  /** A list of Snapshots */
  value?: Snapshot[];
}

/** Restore payload for Single File Snapshot Restore */
export interface SnapshotRestoreFiles {
  /** List of files to be restored */
  filePaths: string[];
  /** Destination folder where the files will be restored */
  destinationPath?: string;
}

/** List of Snapshot Policies */
export interface SnapshotPoliciesList {
  /** A list of snapshot policies */
  value?: SnapshotPolicy[];
}

/** Hourly Schedule properties */
export interface HourlySchedule {
  /** Hourly snapshot count to keep */
  snapshotsToKeep?: number;
  /** Indicates which minute snapshot should be taken */
  minute?: number;
  /** Resource size in bytes, current storage usage for the volume in bytes */
  usedBytes?: number;
}

/** Daily Schedule properties */
export interface DailySchedule {
  /** Daily snapshot count to keep */
  snapshotsToKeep?: number;
  /** Indicates which hour in UTC timezone a snapshot should be taken */
  hour?: number;
  /** Indicates which minute snapshot should be taken */
  minute?: number;
  /** Resource size in bytes, current storage usage for the volume in bytes */
  usedBytes?: number;
}

/** Weekly Schedule properties, make a snapshot every week at a specific day or days */
export interface WeeklySchedule {
  /** Weekly snapshot count to keep */
  snapshotsToKeep?: number;
  /** Indicates which weekdays snapshot should be taken, accepts a comma separated list of week day names in english */
  day?: string;
  /** Indicates which hour in UTC timezone a snapshot should be taken */
  hour?: number;
  /** Indicates which minute snapshot should be taken */
  minute?: number;
  /** Resource size in bytes, current storage usage for the volume in bytes */
  usedBytes?: number;
}

/** Monthly Schedule properties */
export interface MonthlySchedule {
  /** Monthly snapshot count to keep */
  snapshotsToKeep?: number;
  /** Indicates which days of the month snapshot should be taken. A comma delimited string. */
  daysOfMonth?: string;
  /** Indicates which hour in UTC timezone a snapshot should be taken */
  hour?: number;
  /** Indicates which minute snapshot should be taken */
  minute?: number;
  /** Resource size in bytes, current storage usage for the volume in bytes */
  usedBytes?: number;
}

/** Snapshot policy Details for create and update */
export interface SnapshotPolicyPatch {
  /** Resource location */
  location?: string;
  /**
   * Resource Id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Resource name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Resource type
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Resource tags */
  tags?: { [propertyName: string]: string };
  /** Schedule for hourly snapshots */
  hourlySchedule?: HourlySchedule;
  /** Schedule for daily snapshots */
  dailySchedule?: DailySchedule;
  /** Schedule for weekly snapshots */
  weeklySchedule?: WeeklySchedule;
  /** Schedule for monthly snapshots */
  monthlySchedule?: MonthlySchedule;
  /** The property to decide policy is enabled or not */
  enabled?: boolean;
  /**
   * Azure lifecycle management
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
}

/** Volumes associated with snapshot policy */
export interface SnapshotPolicyVolumeList {
  /** List of volumes */
  value?: Volume[];
}

/** Backup status */
export interface BackupStatus {
  /**
   * Backup health status
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly healthy?: boolean;
  /**
   * Status of the backup mirror relationship
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly relationshipStatus?: RelationshipStatus;
  /**
   * The status of the backup
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly mirrorState?: MirrorState;
  /**
   * Reason for the unhealthy backup relationship
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly unhealthyReason?: string;
  /**
   * Displays error message if the backup is in an error state
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorMessage?: string;
  /**
   * Displays the last transfer size
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastTransferSize?: number;
  /**
   * Displays the last transfer type
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastTransferType?: string;
  /**
   * Displays the total bytes transferred
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly totalTransferBytes?: number;
}

/** Restore status */
export interface RestoreStatus {
  /**
   * Restore health status
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly healthy?: boolean;
  /**
   * Status of the restore SnapMirror relationship
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly relationshipStatus?: RelationshipStatus;
  /**
   * The status of the restore
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly mirrorState?: MirrorState;
  /**
   * Reason for the unhealthy restore relationship
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly unhealthyReason?: string;
  /**
   * Displays error message if the restore is in an error state
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorMessage?: string;
  /**
   * Displays the total bytes transferred
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly totalTransferBytes?: number;
}

/** List of Backups */
export interface BackupsList {
  /** A list of Backups */
  value?: Backup[];
}

/** Backup patch */
export interface BackupPatch {
  /** Resource tags */
  tags?: { [propertyName: string]: string };
  /**
   * UUID v4 used to identify the Backup
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly backupId?: string;
  /**
   * The creation date of the backup
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly creationDate?: Date;
  /**
   * Azure lifecycle management
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * Size of backup
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly size?: number;
  /** Label for backup */
  label?: string;
  /**
   * Type of backup Manual or Scheduled
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly backupType?: BackupType;
  /**
   * Failure reason
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly failureReason?: string;
  /**
   * Volume name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly volumeName?: string;
  /** Manual backup an already existing snapshot. This will always be false for scheduled backups and true/false for manual backups */
  useExistingSnapshot?: boolean;
}

/** List of Backup Policies */
export interface BackupPoliciesList {
  /** A list of backup policies */
  value?: BackupPolicy[];
}

/** Volume details using the backup policy */
export interface VolumeBackups {
  /** Volume name */
  volumeName?: string;
  /** Total count of backups for volume */
  backupsCount?: number;
  /** Policy enabled */
  policyEnabled?: boolean;
}

/** Backup policy Details for create and update */
export interface BackupPolicyPatch {
  /** Resource location */
  location?: string;
  /**
   * Resource Id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Resource name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Resource type
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Resource tags */
  tags?: { [propertyName: string]: string };
  /**
   * Backup Policy Resource ID
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly backupPolicyId?: string;
  /**
   * Azure lifecycle management
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** Daily backups count to keep */
  dailyBackupsToKeep?: number;
  /** Weekly backups count to keep */
  weeklyBackupsToKeep?: number;
  /** Monthly backups count to keep */
  monthlyBackupsToKeep?: number;
  /**
   * Volumes using current backup policy
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly volumesAssigned?: number;
  /** The property to decide policy is enabled or not */
  enabled?: boolean;
  /**
   * A list of volumes assigned to this policy
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly volumeBackups?: VolumeBackups[];
}

/** List of Volume Quota Rules */
export interface VolumeQuotaRulesList {
  /** A list of Volume Quota Rules */
  value?: VolumeQuotaRule[];
}

/** Patchable Quota Rule of a Volume */
export interface VolumeQuotaRulePatch {
  /** Resource tags */
  tags?: { [propertyName: string]: string };
  /**
   * Gets the status of the VolumeQuotaRule at the time the operation was called.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** Size of quota */
  quotaSizeInKiBs?: number;
  /** Type of quota */
  quotaType?: Type;
  /** UserID/GroupID/SID based on the quota target type. UserID and groupID can be found by running ‘id’ or ‘getent’ command for the user or group and SID can be found by running <wmic useraccount where name='user-name' get sid> */
  quotaTarget?: string;
}

/** List of volume group resources */
export interface VolumeGroupList {
  /** List of volume Groups */
  value?: VolumeGroup[];
}

/** Volume group resource */
export interface VolumeGroup {
  /** Resource location */
  location?: string;
  /**
   * Resource Id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Resource name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Resource type
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure lifecycle management
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** Volume group details */
  groupMetaData?: VolumeGroupMetaData;
}

/** Volume group properties */
export interface VolumeGroupMetaData {
  /** Group Description */
  groupDescription?: string;
  /** Application Type */
  applicationType?: ApplicationType;
  /** Application specific identifier */
  applicationIdentifier?: string;
  /** Application specific placement rules for the volume group */
  globalPlacementRules?: PlacementKeyValuePairs[];
  /** Application specific identifier of deployment rules for the volume group */
  deploymentSpecId?: string;
  /**
   * Number of volumes in volume group
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly volumesCount?: number;
}

/** Volume group resource for create */
export interface VolumeGroupDetails {
  /** Resource location */
  location?: string;
  /**
   * Resource Id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Resource name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Resource type
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure lifecycle management
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** Volume group details */
  groupMetaData?: VolumeGroupMetaData;
  /** List of volumes from group */
  volumes?: VolumeGroupVolumeProperties[];
}

/** Volume resource */
export interface VolumeGroupVolumeProperties {
  /**
   * Resource Id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /** Resource name */
  name?: string;
  /**
   * Resource type
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Resource tags */
  tags?: { [propertyName: string]: string };
  /**
   * Unique FileSystem Identifier.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fileSystemId?: string;
  /** A unique file path for the volume. Used when creating mount targets */
  creationToken: string;
  /** The service level of the file system */
  serviceLevel?: ServiceLevel;
  /** Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB, 500Tib for LargeVolume. Specified in bytes. */
  usageThreshold: number;
  /** Set of export policy rules */
  exportPolicy?: VolumePropertiesExportPolicy;
  /** Set of protocol types, default NFSv3, CIFS for SMB protocol */
  protocolTypes?: string[];
  /**
   * Azure lifecycle management
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** UUID v4 or resource identifier used to identify the Snapshot. */
  snapshotId?: string;
  /** If enabled (true) the snapshot the volume was created from will be automatically deleted after the volume create operation has finished.  Defaults to false */
  deleteBaseSnapshot?: boolean;
  /** UUID v4 or resource identifier used to identify the Backup. */
  backupId?: string;
  /**
   * Unique Baremetal Tenant Identifier.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly baremetalTenantId?: string;
  /** The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes */
  subnetId: string;
  /** Basic network, or Standard features available to the volume. */
  networkFeatures?: NetworkFeatures;
  /**
   * Network Sibling Set ID for the the group of volumes sharing networking resources.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkSiblingSetId?: string;
  /**
   * Provides storage to network proximity information for the volume.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly storageToNetworkProximity?: VolumeStorageToNetworkProximity;
  /**
   * List of mount targets
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly mountTargets?: MountTargetProperties[];
  /** What type of volume is this. For destination volumes in Cross Region Replication, set type to DataProtection */
  volumeType?: string;
  /** DataProtection type volumes include an object containing details of the replication */
  dataProtection?: VolumePropertiesDataProtection;
  /** Restoring */
  isRestoring?: boolean;
  /** If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots (defaults to true). */
  snapshotDirectoryVisible?: boolean;
  /** Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later */
  kerberosEnabled?: boolean;
  /** The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol */
  securityStyle?: SecurityStyle;
  /** Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later */
  smbEncryption?: boolean;
  /** Enables access based enumeration share property for SMB Shares. Only applicable for SMB/DualProtocol volume */
  smbAccessBasedEnumeration?: SmbAccessBasedEnumeration;
  /** Enables non browsable property for SMB Shares. Only applicable for SMB/DualProtocol volume */
  smbNonBrowsable?: SmbNonBrowsable;
  /** Enables continuously available share property for smb volume. Only applicable for SMB volume */
  smbContinuouslyAvailable?: boolean;
  /** Maximum throughput in MiB/s that can be achieved by this volume and this will be accepted as input only for manual qosType volume */
  throughputMibps?: number;
  /**
   * Actual throughput in MiB/s for auto qosType volumes calculated based on size and serviceLevel
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actualThroughputMibps?: number;
  /** Source of key used to encrypt data in volume. Applicable if NetApp account has encryption.keySource = 'Microsoft.KeyVault'. Possible values (case-insensitive) are: 'Microsoft.NetApp, Microsoft.KeyVault' */
  encryptionKeySource?: EncryptionKeySource;
  /** The resource ID of private endpoint for KeyVault. It must reside in the same VNET as the volume. Only applicable if encryptionKeySource = 'Microsoft.KeyVault'. */
  keyVaultPrivateEndpointResourceId?: string;
  /** Specifies whether LDAP is enabled or not for a given NFS volume. */
  ldapEnabled?: boolean;
  /** Specifies whether Cool Access(tiering) is enabled for the volume. */
  coolAccess?: boolean;
  /** Specifies the number of days after which data that is not accessed by clients will be tiered. */
  coolnessPeriod?: number;
  /** UNIX permissions for NFS volume accepted in octal 4 digit format. First digit selects the set user ID(4), set group ID (2) and sticky (1) attributes. Second digit selects permission for the owner of the file: read (4), write (2) and execute (1). Third selects permissions for other users in the same group. the fourth for other users not in the group. 0755 - gives read/write/execute permissions to owner and read/execute to group and other users. */
  unixPermissions?: string;
  /**
   * When a volume is being restored from another volume's snapshot, will show the percentage completion of this cloning process. When this value is empty/null there is no cloning process currently happening on this volume. This value will update every 5 minutes during cloning.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cloneProgress?: number;
  /**
   * Flag indicating whether file access logs are enabled for the volume, based on active diagnostic settings present on the volume.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fileAccessLogs?: FileAccessLogs;
  /** Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore purpose */
  avsDataStore?: AvsDataStore;
  /**
   * Data store resource unique identifier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dataStoreResourceId?: string[];
  /** Specifies if default quota is enabled for the volume. */
  isDefaultQuotaEnabled?: boolean;
  /** Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies . */
  defaultUserQuotaInKiBs?: number;
  /** Default group quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies. */
  defaultGroupQuotaInKiBs?: number;
  /**
   * Maximum number of files allowed. Needs a service request in order to be changed. Only allowed to be changed if volume quota is more than 4TiB.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly maximumNumberOfFiles?: number;
  /**
   * Volume Group Name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly volumeGroupName?: string;
  /** Pool Resource Id used in case of creating a volume through volume group */
  capacityPoolResourceId?: string;
  /** Proximity placement group associated with the volume */
  proximityPlacementGroup?: string;
  /**
   * T2 network information
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly t2Network?: string;
  /** Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log */
  volumeSpecName?: string;
  /**
   * Specifies if the volume is encrypted or not. Only available on volumes created or updated after 2022-01-01.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly encrypted?: boolean;
  /** Application specific placement rules for the particular volume */
  placementRules?: PlacementKeyValuePairs[];
  /** Flag indicating whether subvolume operations are enabled on the volume */
  enableSubvolumes?: EnableSubvolumes;
  /**
   * The availability zone where the volume is provisioned. This refers to the logical availability zone where the volume resides.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisionedAvailabilityZone?: string;
  /** Specifies whether volume is a Large Volume or Regular Volume. */
  isLargeVolume?: boolean;
  /**
   * Id of the snapshot or backup that the volume is restored from.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly originatingResourceId?: string;
}

/** List of Subvolumes */
export interface SubvolumesList {
  /** A list of Subvolumes */
  value?: SubvolumeInfo[];
  /** URL to get the next set of results. */
  nextLink?: string;
}

/** Subvolume Patch Request properties */
export interface SubvolumePatchRequest {
  /** Truncate subvolume to the provided size in bytes */
  size?: number;
  /** path to the subvolume */
  path?: string;
}

/** Result of the post subvolume and action is to get metadata of the subvolume. */
export interface SubvolumeModel {
  /**
   * Resource Id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Resource name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Resource type
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Path to the subvolume */
  path?: string;
  /** Path to the parent subvolume */
  parentPath?: string;
  /** Size of subvolume */
  size?: number;
  /** Bytes used */
  bytesUsed?: number;
  /** Permissions of the subvolume */
  permissions?: string;
  /** Creation time and date */
  creationTimeStamp?: Date;
  /** Most recent access time and date */
  accessedTimeStamp?: Date;
  /** Most recent modification time and date */
  modifiedTimeStamp?: Date;
  /** Most recent change time and date */
  changedTimeStamp?: Date;
  /** Azure lifecycle management */
  provisioningState?: string;
}

/** Restore payload for single file backup restore */
export interface BackupRestoreFiles {
  /** List of files to be restored */
  fileList: string[];
  /** Destination folder where the files will be restored. The path name should start with a forward slash. If it is omitted from request then restore is done at the root folder of the destination volume by default */
  restoreFilePath?: string;
  /** Resource Id of the destination volume on which the files need to be restored */
  destinationVolumeId: string;
}

/** Identity for the resource. */
export interface ResourceIdentity {
  /**
   * Object id of the identity resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant id of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** Type of Identity. Supported values are: 'None', 'SystemAssigned' */
  type?: string;
}

/** Mount Target */
export interface MountTarget {
  /** Resource location */
  location: string;
  /**
   * Resource Id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Resource name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Resource type
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Resource tags */
  tags?: { [propertyName: string]: string };
  /**
   * UUID v4 used to identify the MountTarget
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly mountTargetId?: string;
  /** UUID v4 used to identify the MountTarget */
  fileSystemId: string;
  /**
   * The mount target's IPv4 address
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipAddress?: string;
  /** The SMB server's Fully Qualified Domain Name, FQDN */
  smbServerFqdn?: string;
}

/** Snapshot policy properties */
export interface SnapshotPolicyDetails {
  /** Resource location */
  location?: string;
  /**
   * Resource Id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Resource name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Resource type
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Resource tags */
  tags?: { [propertyName: string]: string };
  /** Schedule for hourly snapshots */
  hourlySchedule?: HourlySchedule;
  /** Schedule for daily snapshots */
  dailySchedule?: DailySchedule;
  /** Schedule for weekly snapshots */
  weeklySchedule?: WeeklySchedule;
  /** Schedule for monthly snapshots */
  monthlySchedule?: MonthlySchedule;
  /** The property to decide policy is enabled or not */
  enabled?: boolean;
  /**
   * Azure lifecycle management
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export interface TrackedResource extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
}

/** Information regarding Subscription Quota Item. */
export interface SubscriptionQuotaItem extends ProxyResource {
  /**
   * The current quota value.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly current?: number;
  /**
   * The default quota value.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly default?: number;
}

/** Snapshot of a Volume */
export interface Snapshot extends ProxyResource {
  /** Resource location */
  location: string;
  /**
   * UUID v4 used to identify the Snapshot
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly snapshotId?: string;
  /**
   * The creation date of the snapshot
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly created?: Date;
  /**
   * Azure lifecycle management
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
}

/** Backup of a Volume */
export interface Backup extends ProxyResource {
  /** Resource location */
  location: string;
  /**
   * UUID v4 used to identify the Backup
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly backupId?: string;
  /**
   * The creation date of the backup
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly creationDate?: Date;
  /**
   * Azure lifecycle management
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * Size of backup
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly size?: number;
  /** Label for backup */
  label?: string;
  /**
   * Type of backup Manual or Scheduled
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly backupType?: BackupType;
  /**
   * Failure reason
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly failureReason?: string;
  /**
   * Volume name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly volumeName?: string;
  /** Manual backup an already existing snapshot. This will always be false for scheduled backups and true/false for manual backups */
  useExistingSnapshot?: boolean;
}

/** Subvolume Information properties */
export interface SubvolumeInfo extends ProxyResource {
  /** Path to the subvolume */
  path?: string;
  /** Truncate subvolume to the provided size in bytes */
  size?: number;
  /** parent path to the subvolume */
  parentPath?: string;
  /**
   * Azure lifecycle management
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
}

/** NetApp account resource */
export interface NetAppAccount extends TrackedResource {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly etag?: string;
  /** The identity used for the resource. */
  identity?: ManagedServiceIdentity;
  /**
   * Azure lifecycle management
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** Active Directories */
  activeDirectories?: ActiveDirectory[];
  /** Encryption settings */
  encryption?: AccountEncryption;
  /**
   * Shows the status of disableShowmount for all volumes under the subscription, null equals false
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly disableShowmount?: boolean;
}

/** Capacity pool resource */
export interface CapacityPool extends TrackedResource {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly etag?: string;
  /**
   * UUID v4 used to identify the Pool
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly poolId?: string;
  /** Provisioned size of the pool (in bytes). Allowed values are in 1TiB chunks (value must be multiply of 4398046511104). */
  size: number;
  /** The service level of the file system */
  serviceLevel: ServiceLevel;
  /**
   * Azure lifecycle management
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * Total throughput of pool in MiB/s
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly totalThroughputMibps?: number;
  /**
   * Utilized throughput of pool in MiB/s
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly utilizedThroughputMibps?: number;
  /** The qos type of the pool */
  qosType?: QosType;
  /** If enabled (true) the pool can contain cool Access enabled volumes. */
  coolAccess?: boolean;
  /** Encryption type of the capacity pool, set encryption type for data at rest for this pool and all volumes in it. This value can only be set when creating new pool. */
  encryptionType?: EncryptionType;
}

/** Volume resource */
export interface Volume extends TrackedResource {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly etag?: string;
  /** Availability Zone */
  zones?: string[];
  /**
   * Unique FileSystem Identifier.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fileSystemId?: string;
  /** A unique file path for the volume. Used when creating mount targets */
  creationToken: string;
  /** The service level of the file system */
  serviceLevel?: ServiceLevel;
  /** Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB, 500Tib for LargeVolume. Specified in bytes. */
  usageThreshold: number;
  /** Set of export policy rules */
  exportPolicy?: VolumePropertiesExportPolicy;
  /** Set of protocol types, default NFSv3, CIFS for SMB protocol */
  protocolTypes?: string[];
  /**
   * Azure lifecycle management
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** UUID v4 or resource identifier used to identify the Snapshot. */
  snapshotId?: string;
  /** If enabled (true) the snapshot the volume was created from will be automatically deleted after the volume create operation has finished.  Defaults to false */
  deleteBaseSnapshot?: boolean;
  /** UUID v4 or resource identifier used to identify the Backup. */
  backupId?: string;
  /**
   * Unique Baremetal Tenant Identifier.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly baremetalTenantId?: string;
  /** The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes */
  subnetId: string;
  /** Basic network, or Standard features available to the volume. */
  networkFeatures?: NetworkFeatures;
  /**
   * Network Sibling Set ID for the the group of volumes sharing networking resources.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkSiblingSetId?: string;
  /**
   * Provides storage to network proximity information for the volume.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly storageToNetworkProximity?: VolumeStorageToNetworkProximity;
  /**
   * List of mount targets
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly mountTargets?: MountTargetProperties[];
  /** What type of volume is this. For destination volumes in Cross Region Replication, set type to DataProtection */
  volumeType?: string;
  /** DataProtection type volumes include an object containing details of the replication */
  dataProtection?: VolumePropertiesDataProtection;
  /** Restoring */
  isRestoring?: boolean;
  /** If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots (defaults to true). */
  snapshotDirectoryVisible?: boolean;
  /** Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later */
  kerberosEnabled?: boolean;
  /** The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol */
  securityStyle?: SecurityStyle;
  /** Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later */
  smbEncryption?: boolean;
  /** Enables access based enumeration share property for SMB Shares. Only applicable for SMB/DualProtocol volume */
  smbAccessBasedEnumeration?: SmbAccessBasedEnumeration;
  /** Enables non browsable property for SMB Shares. Only applicable for SMB/DualProtocol volume */
  smbNonBrowsable?: SmbNonBrowsable;
  /** Enables continuously available share property for smb volume. Only applicable for SMB volume */
  smbContinuouslyAvailable?: boolean;
  /** Maximum throughput in MiB/s that can be achieved by this volume and this will be accepted as input only for manual qosType volume */
  throughputMibps?: number;
  /**
   * Actual throughput in MiB/s for auto qosType volumes calculated based on size and serviceLevel
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actualThroughputMibps?: number;
  /** Source of key used to encrypt data in volume. Applicable if NetApp account has encryption.keySource = 'Microsoft.KeyVault'. Possible values (case-insensitive) are: 'Microsoft.NetApp, Microsoft.KeyVault' */
  encryptionKeySource?: EncryptionKeySource;
  /** The resource ID of private endpoint for KeyVault. It must reside in the same VNET as the volume. Only applicable if encryptionKeySource = 'Microsoft.KeyVault'. */
  keyVaultPrivateEndpointResourceId?: string;
  /** Specifies whether LDAP is enabled or not for a given NFS volume. */
  ldapEnabled?: boolean;
  /** Specifies whether Cool Access(tiering) is enabled for the volume. */
  coolAccess?: boolean;
  /** Specifies the number of days after which data that is not accessed by clients will be tiered. */
  coolnessPeriod?: number;
  /** UNIX permissions for NFS volume accepted in octal 4 digit format. First digit selects the set user ID(4), set group ID (2) and sticky (1) attributes. Second digit selects permission for the owner of the file: read (4), write (2) and execute (1). Third selects permissions for other users in the same group. the fourth for other users not in the group. 0755 - gives read/write/execute permissions to owner and read/execute to group and other users. */
  unixPermissions?: string;
  /**
   * When a volume is being restored from another volume's snapshot, will show the percentage completion of this cloning process. When this value is empty/null there is no cloning process currently happening on this volume. This value will update every 5 minutes during cloning.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cloneProgress?: number;
  /**
   * Flag indicating whether file access logs are enabled for the volume, based on active diagnostic settings present on the volume.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fileAccessLogs?: FileAccessLogs;
  /** Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore purpose */
  avsDataStore?: AvsDataStore;
  /**
   * Data store resource unique identifier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dataStoreResourceId?: string[];
  /** Specifies if default quota is enabled for the volume. */
  isDefaultQuotaEnabled?: boolean;
  /** Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies . */
  defaultUserQuotaInKiBs?: number;
  /** Default group quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies. */
  defaultGroupQuotaInKiBs?: number;
  /**
   * Maximum number of files allowed. Needs a service request in order to be changed. Only allowed to be changed if volume quota is more than 4TiB.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly maximumNumberOfFiles?: number;
  /**
   * Volume Group Name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly volumeGroupName?: string;
  /** Pool Resource Id used in case of creating a volume through volume group */
  capacityPoolResourceId?: string;
  /** Proximity placement group associated with the volume */
  proximityPlacementGroup?: string;
  /**
   * T2 network information
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly t2Network?: string;
  /** Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log */
  volumeSpecName?: string;
  /**
   * Specifies if the volume is encrypted or not. Only available on volumes created or updated after 2022-01-01.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly encrypted?: boolean;
  /** Application specific placement rules for the particular volume */
  placementRules?: PlacementKeyValuePairs[];
  /** Flag indicating whether subvolume operations are enabled on the volume */
  enableSubvolumes?: EnableSubvolumes;
  /**
   * The availability zone where the volume is provisioned. This refers to the logical availability zone where the volume resides.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisionedAvailabilityZone?: string;
  /** Specifies whether volume is a Large Volume or Regular Volume. */
  isLargeVolume?: boolean;
  /**
   * Id of the snapshot or backup that the volume is restored from.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly originatingResourceId?: string;
}

/** Snapshot policy information */
export interface SnapshotPolicy extends TrackedResource {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly etag?: string;
  /** Schedule for hourly snapshots */
  hourlySchedule?: HourlySchedule;
  /** Schedule for daily snapshots */
  dailySchedule?: DailySchedule;
  /** Schedule for weekly snapshots */
  weeklySchedule?: WeeklySchedule;
  /** Schedule for monthly snapshots */
  monthlySchedule?: MonthlySchedule;
  /** The property to decide policy is enabled or not */
  enabled?: boolean;
  /**
   * Azure lifecycle management
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
}

/** Backup policy information */
export interface BackupPolicy extends TrackedResource {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly etag?: string;
  /**
   * Backup Policy Resource ID
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly backupPolicyId?: string;
  /**
   * Azure lifecycle management
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** Daily backups count to keep */
  dailyBackupsToKeep?: number;
  /** Weekly backups count to keep */
  weeklyBackupsToKeep?: number;
  /** Monthly backups count to keep */
  monthlyBackupsToKeep?: number;
  /**
   * Volumes using current backup policy
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly volumesAssigned?: number;
  /** The property to decide policy is enabled or not */
  enabled?: boolean;
  /**
   * A list of volumes assigned to this policy
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly volumeBackups?: VolumeBackups[];
}

/** Quota Rule of a Volume */
export interface VolumeQuotaRule extends TrackedResource {
  /**
   * Gets the status of the VolumeQuotaRule at the time the operation was called.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** Size of quota */
  quotaSizeInKiBs?: number;
  /** Type of quota */
  quotaType?: Type;
  /** UserID/GroupID/SID based on the quota target type. UserID and groupID can be found by running ‘id’ or ‘getent’ command for the user or group and SID can be found by running <wmic useraccount where name='user-name' get sid> */
  quotaTarget?: string;
}

/** Defines headers for Volumes_breakFileLocks operation. */
export interface VolumesBreakFileLocksHeaders {
  location?: string;
}

/** Defines headers for Volumes_listGetGroupIdListForLdapUser operation. */
export interface VolumesListGetGroupIdListForLdapUserHeaders {
  location?: string;
}

/** Defines headers for Backups_restoreFiles operation. */
export interface BackupsRestoreFilesHeaders {
  location?: string;
}

/** Known values of {@link MetricAggregationType} that the service accepts. */
export enum KnownMetricAggregationType {
  /** Average */
  Average = "Average"
}

/**
 * Defines values for MetricAggregationType. \
 * {@link KnownMetricAggregationType} can be used interchangeably with MetricAggregationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Average**
 */
export type MetricAggregationType = string;

/** Known values of {@link CheckNameResourceTypes} that the service accepts. */
export enum KnownCheckNameResourceTypes {
  /** MicrosoftNetAppNetAppAccounts */
  MicrosoftNetAppNetAppAccounts = "Microsoft.NetApp/netAppAccounts",
  /** MicrosoftNetAppNetAppAccountsCapacityPools */
  MicrosoftNetAppNetAppAccountsCapacityPools = "Microsoft.NetApp/netAppAccounts/capacityPools",
  /** MicrosoftNetAppNetAppAccountsCapacityPoolsVolumes */
  MicrosoftNetAppNetAppAccountsCapacityPoolsVolumes = "Microsoft.NetApp/netAppAccounts/capacityPools/volumes",
  /** MicrosoftNetAppNetAppAccountsCapacityPoolsVolumesSnapshots */
  MicrosoftNetAppNetAppAccountsCapacityPoolsVolumesSnapshots = "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/snapshots"
}

/**
 * Defines values for CheckNameResourceTypes. \
 * {@link KnownCheckNameResourceTypes} can be used interchangeably with CheckNameResourceTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Microsoft.NetApp\/netAppAccounts** \
 * **Microsoft.NetApp\/netAppAccounts\/capacityPools** \
 * **Microsoft.NetApp\/netAppAccounts\/capacityPools\/volumes** \
 * **Microsoft.NetApp\/netAppAccounts\/capacityPools\/volumes\/snapshots**
 */
export type CheckNameResourceTypes = string;

/** Known values of {@link InAvailabilityReasonType} that the service accepts. */
export enum KnownInAvailabilityReasonType {
  /** Invalid */
  Invalid = "Invalid",
  /** AlreadyExists */
  AlreadyExists = "AlreadyExists"
}

/**
 * Defines values for InAvailabilityReasonType. \
 * {@link KnownInAvailabilityReasonType} can be used interchangeably with InAvailabilityReasonType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid** \
 * **AlreadyExists**
 */
export type InAvailabilityReasonType = string;

/** Known values of {@link CheckQuotaNameResourceTypes} that the service accepts. */
export enum KnownCheckQuotaNameResourceTypes {
  /** MicrosoftNetAppNetAppAccounts */
  MicrosoftNetAppNetAppAccounts = "Microsoft.NetApp/netAppAccounts",
  /** MicrosoftNetAppNetAppAccountsCapacityPools */
  MicrosoftNetAppNetAppAccountsCapacityPools = "Microsoft.NetApp/netAppAccounts/capacityPools",
  /** MicrosoftNetAppNetAppAccountsCapacityPoolsVolumes */
  MicrosoftNetAppNetAppAccountsCapacityPoolsVolumes = "Microsoft.NetApp/netAppAccounts/capacityPools/volumes",
  /** MicrosoftNetAppNetAppAccountsCapacityPoolsVolumesSnapshots */
  MicrosoftNetAppNetAppAccountsCapacityPoolsVolumesSnapshots = "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/snapshots"
}

/**
 * Defines values for CheckQuotaNameResourceTypes. \
 * {@link KnownCheckQuotaNameResourceTypes} can be used interchangeably with CheckQuotaNameResourceTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Microsoft.NetApp\/netAppAccounts** \
 * **Microsoft.NetApp\/netAppAccounts\/capacityPools** \
 * **Microsoft.NetApp\/netAppAccounts\/capacityPools\/volumes** \
 * **Microsoft.NetApp\/netAppAccounts\/capacityPools\/volumes\/snapshots**
 */
export type CheckQuotaNameResourceTypes = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link RegionStorageToNetworkProximity} that the service accepts. */
export enum KnownRegionStorageToNetworkProximity {
  /** Basic network connectivity. */
  Default = "Default",
  /** Standard T1 network connectivity. */
  T1 = "T1",
  /** Standard T2 network connectivity. */
  T2 = "T2",
  /** Standard AcrossT2 network connectivity. */
  AcrossT2 = "AcrossT2",
  /** Standard T1 and T2 network connectivity. */
  T1AndT2 = "T1AndT2",
  /** Standard T1 and AcrossT2 network connectivity. */
  T1AndAcrossT2 = "T1AndAcrossT2",
  /** Standard T2 and AcrossT2 network connectivity. */
  T2AndAcrossT2 = "T2AndAcrossT2",
  /** Standard T1, T2 and AcrossT2 network connectivity. */
  T1AndT2AndAcrossT2 = "T1AndT2AndAcrossT2"
}

/**
 * Defines values for RegionStorageToNetworkProximity. \
 * {@link KnownRegionStorageToNetworkProximity} can be used interchangeably with RegionStorageToNetworkProximity,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default**: Basic network connectivity. \
 * **T1**: Standard T1 network connectivity. \
 * **T2**: Standard T2 network connectivity. \
 * **AcrossT2**: Standard AcrossT2 network connectivity. \
 * **T1AndT2**: Standard T1 and T2 network connectivity. \
 * **T1AndAcrossT2**: Standard T1 and AcrossT2 network connectivity. \
 * **T2AndAcrossT2**: Standard T2 and AcrossT2 network connectivity. \
 * **T1AndT2AndAcrossT2**: Standard T1, T2 and AcrossT2 network connectivity.
 */
export type RegionStorageToNetworkProximity = string;

/** Known values of {@link ActiveDirectoryStatus} that the service accepts. */
export enum KnownActiveDirectoryStatus {
  /** Active Directory created but not in use */
  Created = "Created",
  /** Active Directory in use by SMB Volume */
  InUse = "InUse",
  /** Active Directory Deleted */
  Deleted = "Deleted",
  /** Error with the Active Directory */
  Error = "Error",
  /** Active Directory Updating */
  Updating = "Updating"
}

/**
 * Defines values for ActiveDirectoryStatus. \
 * {@link KnownActiveDirectoryStatus} can be used interchangeably with ActiveDirectoryStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Created**: Active Directory created but not in use \
 * **InUse**: Active Directory in use by SMB Volume \
 * **Deleted**: Active Directory Deleted \
 * **Error**: Error with the Active Directory \
 * **Updating**: Active Directory Updating
 */
export type ActiveDirectoryStatus = string;

/** Known values of {@link KeySource} that the service accepts. */
export enum KnownKeySource {
  /** Microsoft-managed key encryption */
  MicrosoftNetApp = "Microsoft.NetApp",
  /** Customer-managed key encryption */
  MicrosoftKeyVault = "Microsoft.KeyVault"
}

/**
 * Defines values for KeySource. \
 * {@link KnownKeySource} can be used interchangeably with KeySource,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Microsoft.NetApp**: Microsoft-managed key encryption \
 * **Microsoft.KeyVault**: Customer-managed key encryption
 */
export type KeySource = string;

/** Known values of {@link KeyVaultStatus} that the service accepts. */
export enum KnownKeyVaultStatus {
  /** KeyVault connection created but not in use */
  Created = "Created",
  /** KeyVault connection in use by SMB Volume */
  InUse = "InUse",
  /** KeyVault connection Deleted */
  Deleted = "Deleted",
  /** Error with the KeyVault connection */
  Error = "Error",
  /** KeyVault connection Updating */
  Updating = "Updating"
}

/**
 * Defines values for KeyVaultStatus. \
 * {@link KnownKeyVaultStatus} can be used interchangeably with KeyVaultStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Created**: KeyVault connection created but not in use \
 * **InUse**: KeyVault connection in use by SMB Volume \
 * **Deleted**: KeyVault connection Deleted \
 * **Error**: Error with the KeyVault connection \
 * **Updating**: KeyVault connection Updating
 */
export type KeyVaultStatus = string;

/** Known values of {@link ManagedServiceIdentityType} that the service accepts. */
export enum KnownManagedServiceIdentityType {
  /** None */
  None = "None",
  /** SystemAssigned */
  SystemAssigned = "SystemAssigned",
  /** UserAssigned */
  UserAssigned = "UserAssigned",
  /** SystemAssignedUserAssigned */
  SystemAssignedUserAssigned = "SystemAssigned,UserAssigned"
}

/**
 * Defines values for ManagedServiceIdentityType. \
 * {@link KnownManagedServiceIdentityType} can be used interchangeably with ManagedServiceIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAssigned,UserAssigned**
 */
export type ManagedServiceIdentityType = string;

/** Known values of {@link ServiceLevel} that the service accepts. */
export enum KnownServiceLevel {
  /** Standard service level */
  Standard = "Standard",
  /** Premium service level */
  Premium = "Premium",
  /** Ultra service level */
  Ultra = "Ultra",
  /** Zone redundant storage service level */
  StandardZRS = "StandardZRS"
}

/**
 * Defines values for ServiceLevel. \
 * {@link KnownServiceLevel} can be used interchangeably with ServiceLevel,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard**: Standard service level \
 * **Premium**: Premium service level \
 * **Ultra**: Ultra service level \
 * **StandardZRS**: Zone redundant storage service level
 */
export type ServiceLevel = string;

/** Known values of {@link QosType} that the service accepts. */
export enum KnownQosType {
  /** qos type Auto */
  Auto = "Auto",
  /** qos type Manual */
  Manual = "Manual"
}

/**
 * Defines values for QosType. \
 * {@link KnownQosType} can be used interchangeably with QosType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Auto**: qos type Auto \
 * **Manual**: qos type Manual
 */
export type QosType = string;

/** Known values of {@link EncryptionType} that the service accepts. */
export enum KnownEncryptionType {
  /** EncryptionType Single, volumes will use single encryption at rest */
  Single = "Single",
  /** EncryptionType Double, volumes will use double encryption at rest */
  Double = "Double"
}

/**
 * Defines values for EncryptionType. \
 * {@link KnownEncryptionType} can be used interchangeably with EncryptionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Single**: EncryptionType Single, volumes will use single encryption at rest \
 * **Double**: EncryptionType Double, volumes will use double encryption at rest
 */
export type EncryptionType = string;

/** Known values of {@link ChownMode} that the service accepts. */
export enum KnownChownMode {
  /** Restricted */
  Restricted = "Restricted",
  /** Unrestricted */
  Unrestricted = "Unrestricted"
}

/**
 * Defines values for ChownMode. \
 * {@link KnownChownMode} can be used interchangeably with ChownMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Restricted** \
 * **Unrestricted**
 */
export type ChownMode = string;

/** Known values of {@link NetworkFeatures} that the service accepts. */
export enum KnownNetworkFeatures {
  /** Basic network feature. */
  Basic = "Basic",
  /** Standard network feature. */
  Standard = "Standard"
}

/**
 * Defines values for NetworkFeatures. \
 * {@link KnownNetworkFeatures} can be used interchangeably with NetworkFeatures,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic**: Basic network feature. \
 * **Standard**: Standard network feature.
 */
export type NetworkFeatures = string;

/** Known values of {@link VolumeStorageToNetworkProximity} that the service accepts. */
export enum KnownVolumeStorageToNetworkProximity {
  /** Basic storage to network connectivity. */
  Default = "Default",
  /** Standard T1 storage to network connectivity. */
  T1 = "T1",
  /** Standard T2 storage to network connectivity. */
  T2 = "T2",
  /** Standard AcrossT2 storage to network connectivity. */
  AcrossT2 = "AcrossT2"
}

/**
 * Defines values for VolumeStorageToNetworkProximity. \
 * {@link KnownVolumeStorageToNetworkProximity} can be used interchangeably with VolumeStorageToNetworkProximity,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default**: Basic storage to network connectivity. \
 * **T1**: Standard T1 storage to network connectivity. \
 * **T2**: Standard T2 storage to network connectivity. \
 * **AcrossT2**: Standard AcrossT2 storage to network connectivity.
 */
export type VolumeStorageToNetworkProximity = string;

/** Known values of {@link EndpointType} that the service accepts. */
export enum KnownEndpointType {
  /** Src */
  Src = "src",
  /** Dst */
  Dst = "dst"
}

/**
 * Defines values for EndpointType. \
 * {@link KnownEndpointType} can be used interchangeably with EndpointType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **src** \
 * **dst**
 */
export type EndpointType = string;

/** Known values of {@link ReplicationSchedule} that the service accepts. */
export enum KnownReplicationSchedule {
  /** 10Minutely */
  "10Minutely" = "_10minutely",
  /** Hourly */
  Hourly = "hourly",
  /** Daily */
  Daily = "daily"
}

/**
 * Defines values for ReplicationSchedule. \
 * {@link KnownReplicationSchedule} can be used interchangeably with ReplicationSchedule,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **_10minutely** \
 * **hourly** \
 * **daily**
 */
export type ReplicationSchedule = string;

/** Known values of {@link SecurityStyle} that the service accepts. */
export enum KnownSecurityStyle {
  /** Ntfs */
  Ntfs = "ntfs",
  /** Unix */
  Unix = "unix"
}

/**
 * Defines values for SecurityStyle. \
 * {@link KnownSecurityStyle} can be used interchangeably with SecurityStyle,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ntfs** \
 * **unix**
 */
export type SecurityStyle = string;

/** Known values of {@link SmbAccessBasedEnumeration} that the service accepts. */
export enum KnownSmbAccessBasedEnumeration {
  /** smbAccessBasedEnumeration share setting is disabled */
  Disabled = "Disabled",
  /** smbAccessBasedEnumeration share setting is enabled */
  Enabled = "Enabled"
}

/**
 * Defines values for SmbAccessBasedEnumeration. \
 * {@link KnownSmbAccessBasedEnumeration} can be used interchangeably with SmbAccessBasedEnumeration,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled**: smbAccessBasedEnumeration share setting is disabled \
 * **Enabled**: smbAccessBasedEnumeration share setting is enabled
 */
export type SmbAccessBasedEnumeration = string;

/** Known values of {@link SmbNonBrowsable} that the service accepts. */
export enum KnownSmbNonBrowsable {
  /** smbNonBrowsable share setting is disabled */
  Disabled = "Disabled",
  /** smbNonBrowsable share setting is enabled */
  Enabled = "Enabled"
}

/**
 * Defines values for SmbNonBrowsable. \
 * {@link KnownSmbNonBrowsable} can be used interchangeably with SmbNonBrowsable,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled**: smbNonBrowsable share setting is disabled \
 * **Enabled**: smbNonBrowsable share setting is enabled
 */
export type SmbNonBrowsable = string;

/** Known values of {@link EncryptionKeySource} that the service accepts. */
export enum KnownEncryptionKeySource {
  /** Microsoft-managed key encryption */
  MicrosoftNetApp = "Microsoft.NetApp",
  /** Customer-managed key encryption */
  MicrosoftKeyVault = "Microsoft.KeyVault"
}

/**
 * Defines values for EncryptionKeySource. \
 * {@link KnownEncryptionKeySource} can be used interchangeably with EncryptionKeySource,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Microsoft.NetApp**: Microsoft-managed key encryption \
 * **Microsoft.KeyVault**: Customer-managed key encryption
 */
export type EncryptionKeySource = string;

/** Known values of {@link FileAccessLogs} that the service accepts. */
export enum KnownFileAccessLogs {
  /** fileAccessLogs are enabled */
  Enabled = "Enabled",
  /** fileAccessLogs are not enabled */
  Disabled = "Disabled"
}

/**
 * Defines values for FileAccessLogs. \
 * {@link KnownFileAccessLogs} can be used interchangeably with FileAccessLogs,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled**: fileAccessLogs are enabled \
 * **Disabled**: fileAccessLogs are not enabled
 */
export type FileAccessLogs = string;

/** Known values of {@link AvsDataStore} that the service accepts. */
export enum KnownAvsDataStore {
  /** avsDataStore is enabled */
  Enabled = "Enabled",
  /** avsDataStore is disabled */
  Disabled = "Disabled"
}

/**
 * Defines values for AvsDataStore. \
 * {@link KnownAvsDataStore} can be used interchangeably with AvsDataStore,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled**: avsDataStore is enabled \
 * **Disabled**: avsDataStore is disabled
 */
export type AvsDataStore = string;

/** Known values of {@link EnableSubvolumes} that the service accepts. */
export enum KnownEnableSubvolumes {
  /** subvolumes are enabled */
  Enabled = "Enabled",
  /** subvolumes are not enabled */
  Disabled = "Disabled"
}

/**
 * Defines values for EnableSubvolumes. \
 * {@link KnownEnableSubvolumes} can be used interchangeably with EnableSubvolumes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled**: subvolumes are enabled \
 * **Disabled**: subvolumes are not enabled
 */
export type EnableSubvolumes = string;

/** Known values of {@link RelationshipStatus} that the service accepts. */
export enum KnownRelationshipStatus {
  /** Idle */
  Idle = "Idle",
  /** Transferring */
  Transferring = "Transferring"
}

/**
 * Defines values for RelationshipStatus. \
 * {@link KnownRelationshipStatus} can be used interchangeably with RelationshipStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Idle** \
 * **Transferring**
 */
export type RelationshipStatus = string;

/** Known values of {@link MirrorState} that the service accepts. */
export enum KnownMirrorState {
  /** Uninitialized */
  Uninitialized = "Uninitialized",
  /** Mirrored */
  Mirrored = "Mirrored",
  /** Broken */
  Broken = "Broken"
}

/**
 * Defines values for MirrorState. \
 * {@link KnownMirrorState} can be used interchangeably with MirrorState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Uninitialized** \
 * **Mirrored** \
 * **Broken**
 */
export type MirrorState = string;

/** Known values of {@link BackupType} that the service accepts. */
export enum KnownBackupType {
  /** Manual backup */
  Manual = "Manual",
  /** Scheduled backup */
  Scheduled = "Scheduled"
}

/**
 * Defines values for BackupType. \
 * {@link KnownBackupType} can be used interchangeably with BackupType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Manual**: Manual backup \
 * **Scheduled**: Scheduled backup
 */
export type BackupType = string;

/** Known values of {@link Type} that the service accepts. */
export enum KnownType {
  /** Default user quota */
  DefaultUserQuota = "DefaultUserQuota",
  /** Default group quota */
  DefaultGroupQuota = "DefaultGroupQuota",
  /** Individual user quota */
  IndividualUserQuota = "IndividualUserQuota",
  /** Individual group quota */
  IndividualGroupQuota = "IndividualGroupQuota"
}

/**
 * Defines values for Type. \
 * {@link KnownType} can be used interchangeably with Type,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **DefaultUserQuota**: Default user quota \
 * **DefaultGroupQuota**: Default group quota \
 * **IndividualUserQuota**: Individual user quota \
 * **IndividualGroupQuota**: Individual group quota
 */
export type Type = string;

/** Known values of {@link ApplicationType} that the service accepts. */
export enum KnownApplicationType {
  /** SAPHana */
  SAPHana = "SAP-HANA"
}

/**
 * Defines values for ApplicationType. \
 * {@link KnownApplicationType} can be used interchangeably with ApplicationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SAP-HANA**
 */
export type ApplicationType = string;
/** Defines values for ProvisioningState. */
export type ProvisioningState =
  | "Accepted"
  | "Creating"
  | "Patching"
  | "Deleting"
  | "Moving"
  | "Failed"
  | "Succeeded";

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface NetAppResourceCheckNameAvailabilityOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the checkNameAvailability operation. */
export type NetAppResourceCheckNameAvailabilityResponse = CheckAvailabilityResponse;

/** Optional parameters. */
export interface NetAppResourceCheckFilePathAvailabilityOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the checkFilePathAvailability operation. */
export type NetAppResourceCheckFilePathAvailabilityResponse = CheckAvailabilityResponse;

/** Optional parameters. */
export interface NetAppResourceCheckQuotaAvailabilityOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the checkQuotaAvailability operation. */
export type NetAppResourceCheckQuotaAvailabilityResponse = CheckAvailabilityResponse;

/** Optional parameters. */
export interface NetAppResourceQueryRegionInfoOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the queryRegionInfo operation. */
export type NetAppResourceQueryRegionInfoResponse = RegionInfo;

/** Optional parameters. */
export interface NetAppResourceQuotaLimitsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type NetAppResourceQuotaLimitsListResponse = SubscriptionQuotaItemList;

/** Optional parameters. */
export interface NetAppResourceQuotaLimitsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type NetAppResourceQuotaLimitsGetResponse = SubscriptionQuotaItem;

/** Optional parameters. */
export interface AccountsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type AccountsListBySubscriptionResponse = NetAppAccountList;

/** Optional parameters. */
export interface AccountsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type AccountsListResponse = NetAppAccountList;

/** Optional parameters. */
export interface AccountsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type AccountsGetResponse = NetAppAccount;

/** Optional parameters. */
export interface AccountsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type AccountsCreateOrUpdateResponse = NetAppAccount;

/** Optional parameters. */
export interface AccountsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface AccountsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type AccountsUpdateResponse = NetAppAccount;

/** Optional parameters. */
export interface AccountsRenewCredentialsOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface AccountsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type AccountsListBySubscriptionNextResponse = NetAppAccountList;

/** Optional parameters. */
export interface AccountsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type AccountsListNextResponse = NetAppAccountList;

/** Optional parameters. */
export interface PoolsListOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type PoolsListResponse = CapacityPoolList;

/** Optional parameters. */
export interface PoolsGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PoolsGetResponse = CapacityPool;

/** Optional parameters. */
export interface PoolsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type PoolsCreateOrUpdateResponse = CapacityPool;

/** Optional parameters. */
export interface PoolsUpdateOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type PoolsUpdateResponse = CapacityPool;

/** Optional parameters. */
export interface PoolsDeleteOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface PoolsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type PoolsListNextResponse = CapacityPoolList;

/** Optional parameters. */
export interface VolumesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type VolumesListResponse = VolumeList;

/** Optional parameters. */
export interface VolumesGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type VolumesGetResponse = Volume;

/** Optional parameters. */
export interface VolumesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type VolumesCreateOrUpdateResponse = Volume;

/** Optional parameters. */
export interface VolumesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type VolumesUpdateResponse = Volume;

/** Optional parameters. */
export interface VolumesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** An option to force delete the volume. Will cleanup resources connected to the particular volume */
  forceDelete?: boolean;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VolumesRevertOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VolumesResetCifsPasswordOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VolumesBreakFileLocksOptionalParams
  extends coreClient.OperationOptions {
  /** Optional body to provide the ability to clear file locks with selected options */
  body?: BreakFileLocksRequest;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VolumesListGetGroupIdListForLdapUserOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the listGetGroupIdListForLdapUser operation. */
export type VolumesListGetGroupIdListForLdapUserResponse = GetGroupIdListForLdapUserResponse;

/** Optional parameters. */
export interface VolumesBreakReplicationOptionalParams
  extends coreClient.OperationOptions {
  /** Optional body to force break the replication. */
  body?: BreakReplicationRequest;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VolumesReestablishReplicationOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VolumesReplicationStatusOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the replicationStatus operation. */
export type VolumesReplicationStatusResponse = ReplicationStatus;

/** Optional parameters. */
export interface VolumesListReplicationsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listReplications operation. */
export type VolumesListReplicationsResponse = ListReplications;

/** Optional parameters. */
export interface VolumesResyncReplicationOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VolumesDeleteReplicationOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VolumesAuthorizeReplicationOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VolumesReInitializeReplicationOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VolumesPoolChangeOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VolumesRelocateOptionalParams
  extends coreClient.OperationOptions {
  /** Relocate volume request */
  body?: RelocateVolumeRequest;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VolumesFinalizeRelocationOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VolumesRevertRelocationOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VolumesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type VolumesListNextResponse = VolumeList;

/** Optional parameters. */
export interface SnapshotsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type SnapshotsListResponse = SnapshotsList;

/** Optional parameters. */
export interface SnapshotsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SnapshotsGetResponse = Snapshot;

/** Optional parameters. */
export interface SnapshotsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type SnapshotsCreateResponse = Snapshot;

/** Optional parameters. */
export interface SnapshotsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type SnapshotsUpdateResponse = Snapshot;

/** Optional parameters. */
export interface SnapshotsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface SnapshotsRestoreFilesOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface SnapshotPoliciesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type SnapshotPoliciesListResponse = SnapshotPoliciesList;

/** Optional parameters. */
export interface SnapshotPoliciesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SnapshotPoliciesGetResponse = SnapshotPolicy;

/** Optional parameters. */
export interface SnapshotPoliciesCreateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type SnapshotPoliciesCreateResponse = SnapshotPolicy;

/** Optional parameters. */
export interface SnapshotPoliciesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type SnapshotPoliciesUpdateResponse = SnapshotPolicy;

/** Optional parameters. */
export interface SnapshotPoliciesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface SnapshotPoliciesListVolumesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listVolumes operation. */
export type SnapshotPoliciesListVolumesResponse = SnapshotPolicyVolumeList;

/** Optional parameters. */
export interface BackupsGetStatusOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getStatus operation. */
export type BackupsGetStatusResponse = BackupStatus;

/** Optional parameters. */
export interface BackupsGetVolumeRestoreStatusOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getVolumeRestoreStatus operation. */
export type BackupsGetVolumeRestoreStatusResponse = RestoreStatus;

/** Optional parameters. */
export interface BackupsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type BackupsListResponse = BackupsList;

/** Optional parameters. */
export interface BackupsGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type BackupsGetResponse = Backup;

/** Optional parameters. */
export interface BackupsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type BackupsCreateResponse = Backup;

/** Optional parameters. */
export interface BackupsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Backup object supplied in the body of the operation. */
  body?: BackupPatch;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type BackupsUpdateResponse = Backup;

/** Optional parameters. */
export interface BackupsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface BackupsRestoreFilesOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface AccountBackupsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type AccountBackupsListResponse = BackupsList;

/** Optional parameters. */
export interface AccountBackupsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type AccountBackupsGetResponse = Backup;

/** Optional parameters. */
export interface AccountBackupsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface BackupPoliciesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type BackupPoliciesListResponse = BackupPoliciesList;

/** Optional parameters. */
export interface BackupPoliciesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type BackupPoliciesGetResponse = BackupPolicy;

/** Optional parameters. */
export interface BackupPoliciesCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type BackupPoliciesCreateResponse = BackupPolicy;

/** Optional parameters. */
export interface BackupPoliciesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type BackupPoliciesUpdateResponse = BackupPolicy;

/** Optional parameters. */
export interface BackupPoliciesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VolumeQuotaRulesListByVolumeOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByVolume operation. */
export type VolumeQuotaRulesListByVolumeResponse = VolumeQuotaRulesList;

/** Optional parameters. */
export interface VolumeQuotaRulesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type VolumeQuotaRulesGetResponse = VolumeQuotaRule;

/** Optional parameters. */
export interface VolumeQuotaRulesCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type VolumeQuotaRulesCreateResponse = VolumeQuotaRule;

/** Optional parameters. */
export interface VolumeQuotaRulesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type VolumeQuotaRulesUpdateResponse = VolumeQuotaRule;

/** Optional parameters. */
export interface VolumeQuotaRulesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VolumeGroupsListByNetAppAccountOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByNetAppAccount operation. */
export type VolumeGroupsListByNetAppAccountResponse = VolumeGroupList;

/** Optional parameters. */
export interface VolumeGroupsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type VolumeGroupsGetResponse = VolumeGroupDetails;

/** Optional parameters. */
export interface VolumeGroupsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type VolumeGroupsCreateResponse = VolumeGroupDetails;

/** Optional parameters. */
export interface VolumeGroupsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface SubvolumesListByVolumeOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByVolume operation. */
export type SubvolumesListByVolumeResponse = SubvolumesList;

/** Optional parameters. */
export interface SubvolumesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SubvolumesGetResponse = SubvolumeInfo;

/** Optional parameters. */
export interface SubvolumesCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type SubvolumesCreateResponse = SubvolumeInfo;

/** Optional parameters. */
export interface SubvolumesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type SubvolumesUpdateResponse = SubvolumeInfo;

/** Optional parameters. */
export interface SubvolumesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface SubvolumesGetMetadataOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the getMetadata operation. */
export type SubvolumesGetMetadataResponse = SubvolumeModel;

/** Optional parameters. */
export interface SubvolumesListByVolumeNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByVolumeNext operation. */
export type SubvolumesListByVolumeNextResponse = SubvolumesList;

/** Optional parameters. */
export interface NetAppManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
