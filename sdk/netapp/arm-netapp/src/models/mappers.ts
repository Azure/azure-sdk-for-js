/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      serviceSpecification: {
        serializedName: "properties.serviceSpecification",
        type: {
          name: "Composite",
          className: "ServiceSpecification"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceSpecification",
    modelProperties: {
      metricSpecifications: {
        serializedName: "metricSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricSpecification"
            }
          }
        }
      },
      logSpecifications: {
        serializedName: "logSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LogSpecification"
            }
          }
        }
      }
    }
  }
};

export const MetricSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricSpecification",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      displayDescription: {
        serializedName: "displayDescription",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      supportedAggregationTypes: {
        serializedName: "supportedAggregationTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      supportedTimeGrainTypes: {
        serializedName: "supportedTimeGrainTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      internalMetricName: {
        serializedName: "internalMetricName",
        type: {
          name: "String"
        }
      },
      enableRegionalMdmAccount: {
        serializedName: "enableRegionalMdmAccount",
        type: {
          name: "Boolean"
        }
      },
      sourceMdmAccount: {
        serializedName: "sourceMdmAccount",
        type: {
          name: "String"
        }
      },
      sourceMdmNamespace: {
        serializedName: "sourceMdmNamespace",
        type: {
          name: "String"
        }
      },
      dimensions: {
        serializedName: "dimensions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Dimension"
            }
          }
        }
      },
      aggregationType: {
        serializedName: "aggregationType",
        type: {
          name: "String"
        }
      },
      fillGapWithZero: {
        serializedName: "fillGapWithZero",
        type: {
          name: "Boolean"
        }
      },
      category: {
        serializedName: "category",
        type: {
          name: "String"
        }
      },
      resourceIdDimensionNameOverride: {
        serializedName: "resourceIdDimensionNameOverride",
        type: {
          name: "String"
        }
      },
      isInternal: {
        serializedName: "isInternal",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const Dimension: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Dimension",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LogSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LogSpecification",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceNameAvailabilityRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceNameAvailabilityRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      typeParam: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        serializedName: "resourceGroup",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckAvailabilityResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckAvailabilityResponse",
    modelProperties: {
      isAvailable: {
        serializedName: "isAvailable",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FilePathAvailabilityRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FilePathAvailabilityRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      subnetId: {
        serializedName: "subnetId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QuotaAvailabilityRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QuotaAvailabilityRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      typeParam: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        serializedName: "resourceGroup",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubscriptionQuotaItemList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubscriptionQuotaItemList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubscriptionQuotaItem"
            }
          }
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const RegionInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegionInfo",
    modelProperties: {
      storageToNetworkProximity: {
        serializedName: "storageToNetworkProximity",
        type: {
          name: "String"
        }
      },
      availabilityZoneMappings: {
        serializedName: "availabilityZoneMappings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RegionInfoAvailabilityZoneMappingsItem"
            }
          }
        }
      }
    }
  }
};

export const RegionInfoAvailabilityZoneMappingsItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegionInfoAvailabilityZoneMappingsItem",
    modelProperties: {
      availabilityZone: {
        serializedName: "availabilityZone",
        type: {
          name: "String"
        }
      },
      isAvailable: {
        serializedName: "isAvailable",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const NetAppAccountList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetAppAccountList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetAppAccount"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ActiveDirectory: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ActiveDirectory",
    modelProperties: {
      activeDirectoryId: {
        serializedName: "activeDirectoryId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      username: {
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      },
      domain: {
        serializedName: "domain",
        type: {
          name: "String"
        }
      },
      dns: {
        constraints: {
          Pattern: new RegExp(
            "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)((, ?)(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$"
          )
        },
        serializedName: "dns",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      statusDetails: {
        serializedName: "statusDetails",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      smbServerName: {
        serializedName: "smbServerName",
        type: {
          name: "String"
        }
      },
      organizationalUnit: {
        defaultValue: "CN=Computers",
        serializedName: "organizationalUnit",
        type: {
          name: "String"
        }
      },
      site: {
        serializedName: "site",
        type: {
          name: "String"
        }
      },
      backupOperators: {
        serializedName: "backupOperators",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MaxLength: 255,
              MinLength: 1
            },
            type: {
              name: "String"
            }
          }
        }
      },
      administrators: {
        serializedName: "administrators",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MaxLength: 255,
              MinLength: 1
            },
            type: {
              name: "String"
            }
          }
        }
      },
      kdcIP: {
        constraints: {
          Pattern: new RegExp(
            "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)((, ?)(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$"
          )
        },
        serializedName: "kdcIP",
        type: {
          name: "String"
        }
      },
      adName: {
        constraints: {
          MaxLength: 64,
          MinLength: 1
        },
        serializedName: "adName",
        type: {
          name: "String"
        }
      },
      serverRootCACertificate: {
        constraints: {
          MaxLength: 10240,
          MinLength: 1
        },
        serializedName: "serverRootCACertificate",
        type: {
          name: "String"
        }
      },
      aesEncryption: {
        serializedName: "aesEncryption",
        type: {
          name: "Boolean"
        }
      },
      ldapSigning: {
        serializedName: "ldapSigning",
        type: {
          name: "Boolean"
        }
      },
      securityOperators: {
        serializedName: "securityOperators",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MaxLength: 255,
              MinLength: 1
            },
            type: {
              name: "String"
            }
          }
        }
      },
      ldapOverTLS: {
        serializedName: "ldapOverTLS",
        type: {
          name: "Boolean"
        }
      },
      allowLocalNfsUsersWithLdap: {
        serializedName: "allowLocalNfsUsersWithLdap",
        type: {
          name: "Boolean"
        }
      },
      encryptDCConnections: {
        serializedName: "encryptDCConnections",
        type: {
          name: "Boolean"
        }
      },
      ldapSearchScope: {
        serializedName: "ldapSearchScope",
        type: {
          name: "Composite",
          className: "LdapSearchScopeOpt"
        }
      }
    }
  }
};

export const LdapSearchScopeOpt: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LdapSearchScopeOpt",
    modelProperties: {
      userDN: {
        constraints: {
          MaxLength: 255
        },
        serializedName: "userDN",
        type: {
          name: "String"
        }
      },
      groupDN: {
        constraints: {
          MaxLength: 255
        },
        serializedName: "groupDN",
        type: {
          name: "String"
        }
      },
      groupMembershipFilter: {
        constraints: {
          MaxLength: 255
        },
        serializedName: "groupMembershipFilter",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AccountEncryption: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountEncryption",
    modelProperties: {
      keySource: {
        defaultValue: "Microsoft.NetApp",
        serializedName: "keySource",
        type: {
          name: "String"
        }
      },
      keyVaultProperties: {
        serializedName: "keyVaultProperties",
        type: {
          name: "Composite",
          className: "KeyVaultProperties"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "EncryptionIdentity"
        }
      }
    }
  }
};

export const KeyVaultProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyVaultProperties",
    modelProperties: {
      keyVaultId: {
        constraints: {
          Pattern: new RegExp(
            "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"
          ),
          MaxLength: 36,
          MinLength: 36
        },
        serializedName: "keyVaultId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      keyVaultUri: {
        serializedName: "keyVaultUri",
        required: true,
        type: {
          name: "String"
        }
      },
      keyName: {
        serializedName: "keyName",
        required: true,
        type: {
          name: "String"
        }
      },
      keyVaultResourceId: {
        serializedName: "keyVaultResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EncryptionIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EncryptionIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      userAssignedIdentity: {
        serializedName: "userAssignedIdentity",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Identity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Identity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserAssignedIdentity" }
          }
        }
      }
    }
  }
};

export const UserAssignedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetAppAccountPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetAppAccountPatch",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      activeDirectories: {
        serializedName: "properties.activeDirectories",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ActiveDirectory"
            }
          }
        }
      },
      encryption: {
        serializedName: "properties.encryption",
        type: {
          name: "Composite",
          className: "AccountEncryption"
        }
      },
      disableShowmount: {
        serializedName: "properties.disableShowmount",
        readOnly: true,
        nullable: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const CloudError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CloudErrorBody"
        }
      }
    }
  }
};

export const CloudErrorBody: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudErrorBody",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CapacityPoolList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CapacityPoolList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CapacityPool"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CapacityPoolPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CapacityPoolPatch",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      size: {
        defaultValue: 4398046511104,
        serializedName: "properties.size",
        type: {
          name: "Number"
        }
      },
      qosType: {
        serializedName: "properties.qosType",
        type: {
          name: "String"
        }
      },
      coolAccess: {
        serializedName: "properties.coolAccess",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const VolumeList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VolumeList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Volume"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VolumePropertiesExportPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VolumePropertiesExportPolicy",
    modelProperties: {
      rules: {
        serializedName: "rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExportPolicyRule"
            }
          }
        }
      }
    }
  }
};

export const ExportPolicyRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExportPolicyRule",
    modelProperties: {
      ruleIndex: {
        serializedName: "ruleIndex",
        type: {
          name: "Number"
        }
      },
      unixReadOnly: {
        serializedName: "unixReadOnly",
        type: {
          name: "Boolean"
        }
      },
      unixReadWrite: {
        serializedName: "unixReadWrite",
        type: {
          name: "Boolean"
        }
      },
      kerberos5ReadOnly: {
        defaultValue: false,
        serializedName: "kerberos5ReadOnly",
        type: {
          name: "Boolean"
        }
      },
      kerberos5ReadWrite: {
        defaultValue: false,
        serializedName: "kerberos5ReadWrite",
        type: {
          name: "Boolean"
        }
      },
      kerberos5IReadOnly: {
        defaultValue: false,
        serializedName: "kerberos5iReadOnly",
        type: {
          name: "Boolean"
        }
      },
      kerberos5IReadWrite: {
        defaultValue: false,
        serializedName: "kerberos5iReadWrite",
        type: {
          name: "Boolean"
        }
      },
      kerberos5PReadOnly: {
        defaultValue: false,
        serializedName: "kerberos5pReadOnly",
        type: {
          name: "Boolean"
        }
      },
      kerberos5PReadWrite: {
        defaultValue: false,
        serializedName: "kerberos5pReadWrite",
        type: {
          name: "Boolean"
        }
      },
      cifs: {
        serializedName: "cifs",
        type: {
          name: "Boolean"
        }
      },
      nfsv3: {
        serializedName: "nfsv3",
        type: {
          name: "Boolean"
        }
      },
      nfsv41: {
        serializedName: "nfsv41",
        type: {
          name: "Boolean"
        }
      },
      allowedClients: {
        serializedName: "allowedClients",
        type: {
          name: "String"
        }
      },
      hasRootAccess: {
        defaultValue: true,
        serializedName: "hasRootAccess",
        type: {
          name: "Boolean"
        }
      },
      chownMode: {
        defaultValue: "Restricted",
        serializedName: "chownMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MountTargetProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MountTargetProperties",
    modelProperties: {
      mountTargetId: {
        constraints: {
          Pattern: new RegExp(
            "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"
          ),
          MaxLength: 36,
          MinLength: 36
        },
        serializedName: "mountTargetId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fileSystemId: {
        constraints: {
          Pattern: new RegExp(
            "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"
          ),
          MaxLength: 36,
          MinLength: 36
        },
        serializedName: "fileSystemId",
        required: true,
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      smbServerFqdn: {
        serializedName: "smbServerFqdn",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VolumePropertiesDataProtection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VolumePropertiesDataProtection",
    modelProperties: {
      backup: {
        serializedName: "backup",
        type: {
          name: "Composite",
          className: "VolumeBackupProperties"
        }
      },
      replication: {
        serializedName: "replication",
        type: {
          name: "Composite",
          className: "ReplicationObject"
        }
      },
      snapshot: {
        serializedName: "snapshot",
        type: {
          name: "Composite",
          className: "VolumeSnapshotProperties"
        }
      }
    }
  }
};

export const VolumeBackupProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VolumeBackupProperties",
    modelProperties: {
      backupPolicyId: {
        serializedName: "backupPolicyId",
        type: {
          name: "String"
        }
      },
      policyEnforced: {
        serializedName: "policyEnforced",
        type: {
          name: "Boolean"
        }
      },
      vaultId: {
        serializedName: "vaultId",
        type: {
          name: "String"
        }
      },
      backupEnabled: {
        serializedName: "backupEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ReplicationObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationObject",
    modelProperties: {
      replicationId: {
        serializedName: "replicationId",
        type: {
          name: "String"
        }
      },
      endpointType: {
        serializedName: "endpointType",
        type: {
          name: "String"
        }
      },
      replicationSchedule: {
        serializedName: "replicationSchedule",
        type: {
          name: "String"
        }
      },
      remoteVolumeResourceId: {
        serializedName: "remoteVolumeResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      remoteVolumeRegion: {
        serializedName: "remoteVolumeRegion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VolumeSnapshotProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VolumeSnapshotProperties",
    modelProperties: {
      snapshotPolicyId: {
        serializedName: "snapshotPolicyId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PlacementKeyValuePairs: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PlacementKeyValuePairs",
    modelProperties: {
      key: {
        serializedName: "key",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VolumePatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VolumePatch",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      serviceLevel: {
        defaultValue: "Premium",
        serializedName: "properties.serviceLevel",
        type: {
          name: "String"
        }
      },
      usageThreshold: {
        defaultValue: 107374182400,
        constraints: {
          InclusiveMaximum: 549755813888000,
          InclusiveMinimum: 107374182400
        },
        serializedName: "properties.usageThreshold",
        type: {
          name: "Number"
        }
      },
      exportPolicy: {
        serializedName: "properties.exportPolicy",
        type: {
          name: "Composite",
          className: "VolumePatchPropertiesExportPolicy"
        }
      },
      throughputMibps: {
        serializedName: "properties.throughputMibps",
        type: {
          name: "Number"
        }
      },
      dataProtection: {
        serializedName: "properties.dataProtection",
        type: {
          name: "Composite",
          className: "VolumePatchPropertiesDataProtection"
        }
      },
      isDefaultQuotaEnabled: {
        defaultValue: false,
        serializedName: "properties.isDefaultQuotaEnabled",
        type: {
          name: "Boolean"
        }
      },
      defaultUserQuotaInKiBs: {
        defaultValue: 0,
        serializedName: "properties.defaultUserQuotaInKiBs",
        type: {
          name: "Number"
        }
      },
      defaultGroupQuotaInKiBs: {
        defaultValue: 0,
        serializedName: "properties.defaultGroupQuotaInKiBs",
        type: {
          name: "Number"
        }
      },
      unixPermissions: {
        constraints: {
          MaxLength: 4,
          MinLength: 4
        },
        serializedName: "properties.unixPermissions",
        nullable: true,
        type: {
          name: "String"
        }
      },
      coolAccess: {
        serializedName: "properties.coolAccess",
        type: {
          name: "Boolean"
        }
      },
      coolnessPeriod: {
        constraints: {
          InclusiveMaximum: 63,
          InclusiveMinimum: 7
        },
        serializedName: "properties.coolnessPeriod",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VolumePatchPropertiesExportPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VolumePatchPropertiesExportPolicy",
    modelProperties: {
      rules: {
        serializedName: "rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExportPolicyRule"
            }
          }
        }
      }
    }
  }
};

export const VolumePatchPropertiesDataProtection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VolumePatchPropertiesDataProtection",
    modelProperties: {
      backup: {
        serializedName: "backup",
        type: {
          name: "Composite",
          className: "VolumeBackupProperties"
        }
      },
      snapshot: {
        serializedName: "snapshot",
        type: {
          name: "Composite",
          className: "VolumeSnapshotProperties"
        }
      }
    }
  }
};

export const VolumeRevert: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VolumeRevert",
    modelProperties: {
      snapshotId: {
        serializedName: "snapshotId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BreakReplicationRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BreakReplicationRequest",
    modelProperties: {
      forceBreakReplication: {
        serializedName: "forceBreakReplication",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ReestablishReplicationRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReestablishReplicationRequest",
    modelProperties: {
      sourceVolumeId: {
        serializedName: "sourceVolumeId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReplicationStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationStatus",
    modelProperties: {
      healthy: {
        serializedName: "healthy",
        type: {
          name: "Boolean"
        }
      },
      relationshipStatus: {
        serializedName: "relationshipStatus",
        type: {
          name: "String"
        }
      },
      mirrorState: {
        serializedName: "mirrorState",
        type: {
          name: "String"
        }
      },
      totalProgress: {
        serializedName: "totalProgress",
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListReplications: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListReplications",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Replication"
            }
          }
        }
      }
    }
  }
};

export const Replication: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Replication",
    modelProperties: {
      endpointType: {
        serializedName: "endpointType",
        type: {
          name: "String"
        }
      },
      replicationSchedule: {
        serializedName: "replicationSchedule",
        type: {
          name: "String"
        }
      },
      remoteVolumeResourceId: {
        serializedName: "remoteVolumeResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      remoteVolumeRegion: {
        serializedName: "remoteVolumeRegion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AuthorizeRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AuthorizeRequest",
    modelProperties: {
      remoteVolumeResourceId: {
        serializedName: "remoteVolumeResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolChangeRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolChangeRequest",
    modelProperties: {
      newPoolResourceId: {
        serializedName: "newPoolResourceId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RelocateVolumeRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RelocateVolumeRequest",
    modelProperties: {
      creationToken: {
        serializedName: "creationToken",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SnapshotsList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SnapshotsList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Snapshot"
            }
          }
        }
      }
    }
  }
};

export const Snapshot: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Snapshot",
    modelProperties: {
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      snapshotId: {
        constraints: {
          Pattern: new RegExp(
            "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"
          ),
          MaxLength: 36,
          MinLength: 36
        },
        serializedName: "properties.snapshotId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      created: {
        serializedName: "properties.created",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SnapshotRestoreFiles: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SnapshotRestoreFiles",
    modelProperties: {
      filePaths: {
        constraints: {
          MinItems: 1,
          MaxItems: 10
        },
        serializedName: "filePaths",
        required: true,
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MaxLength: 1024,
              MinLength: 1
            },
            type: {
              name: "String"
            }
          }
        }
      },
      destinationPath: {
        serializedName: "destinationPath",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SnapshotPoliciesList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SnapshotPoliciesList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SnapshotPolicy"
            }
          }
        }
      }
    }
  }
};

export const HourlySchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HourlySchedule",
    modelProperties: {
      snapshotsToKeep: {
        serializedName: "snapshotsToKeep",
        type: {
          name: "Number"
        }
      },
      minute: {
        serializedName: "minute",
        type: {
          name: "Number"
        }
      },
      usedBytes: {
        serializedName: "usedBytes",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DailySchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DailySchedule",
    modelProperties: {
      snapshotsToKeep: {
        serializedName: "snapshotsToKeep",
        type: {
          name: "Number"
        }
      },
      hour: {
        serializedName: "hour",
        type: {
          name: "Number"
        }
      },
      minute: {
        serializedName: "minute",
        type: {
          name: "Number"
        }
      },
      usedBytes: {
        serializedName: "usedBytes",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const WeeklySchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WeeklySchedule",
    modelProperties: {
      snapshotsToKeep: {
        serializedName: "snapshotsToKeep",
        type: {
          name: "Number"
        }
      },
      day: {
        serializedName: "day",
        type: {
          name: "String"
        }
      },
      hour: {
        serializedName: "hour",
        type: {
          name: "Number"
        }
      },
      minute: {
        serializedName: "minute",
        type: {
          name: "Number"
        }
      },
      usedBytes: {
        serializedName: "usedBytes",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const MonthlySchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MonthlySchedule",
    modelProperties: {
      snapshotsToKeep: {
        serializedName: "snapshotsToKeep",
        type: {
          name: "Number"
        }
      },
      daysOfMonth: {
        serializedName: "daysOfMonth",
        type: {
          name: "String"
        }
      },
      hour: {
        serializedName: "hour",
        type: {
          name: "Number"
        }
      },
      minute: {
        serializedName: "minute",
        type: {
          name: "Number"
        }
      },
      usedBytes: {
        serializedName: "usedBytes",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SnapshotPolicyPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SnapshotPolicyPatch",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      hourlySchedule: {
        serializedName: "properties.hourlySchedule",
        type: {
          name: "Composite",
          className: "HourlySchedule"
        }
      },
      dailySchedule: {
        serializedName: "properties.dailySchedule",
        type: {
          name: "Composite",
          className: "DailySchedule"
        }
      },
      weeklySchedule: {
        serializedName: "properties.weeklySchedule",
        type: {
          name: "Composite",
          className: "WeeklySchedule"
        }
      },
      monthlySchedule: {
        serializedName: "properties.monthlySchedule",
        type: {
          name: "Composite",
          className: "MonthlySchedule"
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SnapshotPolicyVolumeList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SnapshotPolicyVolumeList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Volume"
            }
          }
        }
      }
    }
  }
};

export const BackupStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupStatus",
    modelProperties: {
      healthy: {
        serializedName: "healthy",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      relationshipStatus: {
        serializedName: "relationshipStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      mirrorState: {
        serializedName: "mirrorState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      unhealthyReason: {
        serializedName: "unhealthyReason",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastTransferSize: {
        serializedName: "lastTransferSize",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      lastTransferType: {
        serializedName: "lastTransferType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      totalTransferBytes: {
        serializedName: "totalTransferBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RestoreStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestoreStatus",
    modelProperties: {
      healthy: {
        serializedName: "healthy",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      relationshipStatus: {
        serializedName: "relationshipStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      mirrorState: {
        serializedName: "mirrorState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      unhealthyReason: {
        serializedName: "unhealthyReason",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      totalTransferBytes: {
        serializedName: "totalTransferBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BackupsList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupsList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Backup"
            }
          }
        }
      }
    }
  }
};

export const Backup: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Backup",
    modelProperties: {
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      backupId: {
        constraints: {
          Pattern: new RegExp(
            "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"
          ),
          MaxLength: 36,
          MinLength: 36
        },
        serializedName: "properties.backupId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationDate: {
        serializedName: "properties.creationDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      size: {
        serializedName: "properties.size",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      label: {
        serializedName: "properties.label",
        type: {
          name: "String"
        }
      },
      backupType: {
        serializedName: "properties.backupType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      failureReason: {
        serializedName: "properties.failureReason",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      volumeName: {
        serializedName: "properties.volumeName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      useExistingSnapshot: {
        defaultValue: false,
        serializedName: "properties.useExistingSnapshot",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const BackupPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupPatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      backupId: {
        constraints: {
          Pattern: new RegExp(
            "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"
          ),
          MaxLength: 36,
          MinLength: 36
        },
        serializedName: "properties.backupId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationDate: {
        serializedName: "properties.creationDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      size: {
        serializedName: "properties.size",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      label: {
        serializedName: "properties.label",
        type: {
          name: "String"
        }
      },
      backupType: {
        serializedName: "properties.backupType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      failureReason: {
        serializedName: "properties.failureReason",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      volumeName: {
        serializedName: "properties.volumeName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      useExistingSnapshot: {
        defaultValue: false,
        serializedName: "properties.useExistingSnapshot",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const BackupPoliciesList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupPoliciesList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BackupPolicy"
            }
          }
        }
      }
    }
  }
};

export const VolumeBackups: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VolumeBackups",
    modelProperties: {
      volumeName: {
        serializedName: "volumeName",
        type: {
          name: "String"
        }
      },
      backupsCount: {
        serializedName: "backupsCount",
        type: {
          name: "Number"
        }
      },
      policyEnabled: {
        serializedName: "policyEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const BackupPolicyPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupPolicyPatch",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      backupPolicyId: {
        serializedName: "properties.backupPolicyId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dailyBackupsToKeep: {
        serializedName: "properties.dailyBackupsToKeep",
        type: {
          name: "Number"
        }
      },
      weeklyBackupsToKeep: {
        serializedName: "properties.weeklyBackupsToKeep",
        type: {
          name: "Number"
        }
      },
      monthlyBackupsToKeep: {
        serializedName: "properties.monthlyBackupsToKeep",
        type: {
          name: "Number"
        }
      },
      volumesAssigned: {
        serializedName: "properties.volumesAssigned",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      volumeBackups: {
        serializedName: "properties.volumeBackups",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VolumeBackups"
            }
          }
        }
      }
    }
  }
};

export const VolumeQuotaRulesList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VolumeQuotaRulesList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VolumeQuotaRule"
            }
          }
        }
      }
    }
  }
};

export const VolumeQuotaRulePatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VolumeQuotaRulePatch",
    modelProperties: {
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Accepted",
            "Creating",
            "Patching",
            "Deleting",
            "Moving",
            "Failed",
            "Succeeded"
          ]
        }
      },
      quotaSizeInKiBs: {
        serializedName: "properties.quotaSizeInKiBs",
        type: {
          name: "Number"
        }
      },
      quotaType: {
        serializedName: "properties.quotaType",
        type: {
          name: "String"
        }
      },
      quotaTarget: {
        serializedName: "properties.quotaTarget",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VaultList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Vault"
            }
          }
        }
      }
    }
  }
};

export const Vault: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Vault",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vaultName: {
        serializedName: "properties.vaultName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VolumeGroupList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VolumeGroupList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VolumeGroup"
            }
          }
        }
      }
    }
  }
};

export const VolumeGroup: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VolumeGroup",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      groupMetaData: {
        serializedName: "properties.groupMetaData",
        type: {
          name: "Composite",
          className: "VolumeGroupMetaData"
        }
      }
    }
  }
};

export const VolumeGroupMetaData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VolumeGroupMetaData",
    modelProperties: {
      groupDescription: {
        serializedName: "groupDescription",
        type: {
          name: "String"
        }
      },
      applicationType: {
        serializedName: "applicationType",
        type: {
          name: "String"
        }
      },
      applicationIdentifier: {
        serializedName: "applicationIdentifier",
        type: {
          name: "String"
        }
      },
      globalPlacementRules: {
        serializedName: "globalPlacementRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PlacementKeyValuePairs"
            }
          }
        }
      },
      deploymentSpecId: {
        serializedName: "deploymentSpecId",
        type: {
          name: "String"
        }
      },
      volumesCount: {
        serializedName: "volumesCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VolumeGroupDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VolumeGroupDetails",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      groupMetaData: {
        serializedName: "properties.groupMetaData",
        type: {
          name: "Composite",
          className: "VolumeGroupMetaData"
        }
      },
      volumes: {
        serializedName: "properties.volumes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VolumeGroupVolumeProperties"
            }
          }
        }
      }
    }
  }
};

export const VolumeGroupVolumeProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VolumeGroupVolumeProperties",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      fileSystemId: {
        constraints: {
          Pattern: new RegExp(
            "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"
          ),
          MaxLength: 36,
          MinLength: 36
        },
        serializedName: "properties.fileSystemId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationToken: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9\\-]{0,79}$"),
          MaxLength: 80,
          MinLength: 1
        },
        serializedName: "properties.creationToken",
        required: true,
        type: {
          name: "String"
        }
      },
      serviceLevel: {
        defaultValue: "Premium",
        serializedName: "properties.serviceLevel",
        type: {
          name: "String"
        }
      },
      usageThreshold: {
        defaultValue: 107374182400,
        constraints: {
          InclusiveMaximum: 549755813888000,
          InclusiveMinimum: 107374182400
        },
        serializedName: "properties.usageThreshold",
        required: true,
        type: {
          name: "Number"
        }
      },
      exportPolicy: {
        serializedName: "properties.exportPolicy",
        type: {
          name: "Composite",
          className: "VolumePropertiesExportPolicy"
        }
      },
      protocolTypes: {
        serializedName: "properties.protocolTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      snapshotId: {
        serializedName: "properties.snapshotId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      deleteBaseSnapshot: {
        serializedName: "properties.deleteBaseSnapshot",
        type: {
          name: "Boolean"
        }
      },
      backupId: {
        serializedName: "properties.backupId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      baremetalTenantId: {
        serializedName: "properties.baremetalTenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subnetId: {
        serializedName: "properties.subnetId",
        required: true,
        type: {
          name: "String"
        }
      },
      networkFeatures: {
        defaultValue: "Basic",
        serializedName: "properties.networkFeatures",
        type: {
          name: "String"
        }
      },
      networkSiblingSetId: {
        constraints: {
          Pattern: new RegExp(
            "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"
          ),
          MaxLength: 36,
          MinLength: 36
        },
        serializedName: "properties.networkSiblingSetId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      storageToNetworkProximity: {
        serializedName: "properties.storageToNetworkProximity",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      mountTargets: {
        serializedName: "properties.mountTargets",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MountTargetProperties"
            }
          }
        }
      },
      volumeType: {
        serializedName: "properties.volumeType",
        type: {
          name: "String"
        }
      },
      dataProtection: {
        serializedName: "properties.dataProtection",
        type: {
          name: "Composite",
          className: "VolumePropertiesDataProtection"
        }
      },
      isRestoring: {
        serializedName: "properties.isRestoring",
        type: {
          name: "Boolean"
        }
      },
      snapshotDirectoryVisible: {
        defaultValue: true,
        serializedName: "properties.snapshotDirectoryVisible",
        type: {
          name: "Boolean"
        }
      },
      kerberosEnabled: {
        defaultValue: false,
        serializedName: "properties.kerberosEnabled",
        type: {
          name: "Boolean"
        }
      },
      securityStyle: {
        defaultValue: "unix",
        serializedName: "properties.securityStyle",
        type: {
          name: "String"
        }
      },
      smbEncryption: {
        defaultValue: false,
        serializedName: "properties.smbEncryption",
        type: {
          name: "Boolean"
        }
      },
      smbAccessBasedEnumeration: {
        serializedName: "properties.smbAccessBasedEnumeration",
        type: {
          name: "String"
        }
      },
      smbNonBrowsable: {
        serializedName: "properties.smbNonBrowsable",
        type: {
          name: "String"
        }
      },
      smbContinuouslyAvailable: {
        defaultValue: false,
        serializedName: "properties.smbContinuouslyAvailable",
        type: {
          name: "Boolean"
        }
      },
      throughputMibps: {
        serializedName: "properties.throughputMibps",
        type: {
          name: "Number"
        }
      },
      encryptionKeySource: {
        defaultValue: "Microsoft.NetApp",
        serializedName: "properties.encryptionKeySource",
        type: {
          name: "String"
        }
      },
      keyVaultPrivateEndpointResourceId: {
        serializedName: "properties.keyVaultPrivateEndpointResourceId",
        type: {
          name: "String"
        }
      },
      ldapEnabled: {
        defaultValue: false,
        serializedName: "properties.ldapEnabled",
        type: {
          name: "Boolean"
        }
      },
      coolAccess: {
        defaultValue: false,
        serializedName: "properties.coolAccess",
        type: {
          name: "Boolean"
        }
      },
      coolnessPeriod: {
        constraints: {
          InclusiveMaximum: 63,
          InclusiveMinimum: 7
        },
        serializedName: "properties.coolnessPeriod",
        type: {
          name: "Number"
        }
      },
      unixPermissions: {
        defaultValue: "0770",
        constraints: {
          MaxLength: 4,
          MinLength: 4
        },
        serializedName: "properties.unixPermissions",
        nullable: true,
        type: {
          name: "String"
        }
      },
      cloneProgress: {
        serializedName: "properties.cloneProgress",
        readOnly: true,
        nullable: true,
        type: {
          name: "Number"
        }
      },
      avsDataStore: {
        defaultValue: "Disabled",
        serializedName: "properties.avsDataStore",
        type: {
          name: "String"
        }
      },
      isDefaultQuotaEnabled: {
        defaultValue: false,
        serializedName: "properties.isDefaultQuotaEnabled",
        type: {
          name: "Boolean"
        }
      },
      defaultUserQuotaInKiBs: {
        defaultValue: 0,
        serializedName: "properties.defaultUserQuotaInKiBs",
        type: {
          name: "Number"
        }
      },
      defaultGroupQuotaInKiBs: {
        defaultValue: 0,
        serializedName: "properties.defaultGroupQuotaInKiBs",
        type: {
          name: "Number"
        }
      },
      maximumNumberOfFiles: {
        serializedName: "properties.maximumNumberOfFiles",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      volumeGroupName: {
        serializedName: "properties.volumeGroupName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      capacityPoolResourceId: {
        serializedName: "properties.capacityPoolResourceId",
        type: {
          name: "String"
        }
      },
      proximityPlacementGroup: {
        serializedName: "properties.proximityPlacementGroup",
        type: {
          name: "String"
        }
      },
      t2Network: {
        serializedName: "properties.t2Network",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      volumeSpecName: {
        serializedName: "properties.volumeSpecName",
        type: {
          name: "String"
        }
      },
      encrypted: {
        serializedName: "properties.encrypted",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      placementRules: {
        serializedName: "properties.placementRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PlacementKeyValuePairs"
            }
          }
        }
      },
      enableSubvolumes: {
        defaultValue: "Disabled",
        serializedName: "properties.enableSubvolumes",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubvolumesList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubvolumesList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubvolumeInfo"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubvolumePatchRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubvolumePatchRequest",
    modelProperties: {
      size: {
        serializedName: "properties.size",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      path: {
        serializedName: "properties.path",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubvolumeModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubvolumeModel",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      path: {
        serializedName: "properties.path",
        type: {
          name: "String"
        }
      },
      parentPath: {
        serializedName: "properties.parentPath",
        type: {
          name: "String"
        }
      },
      size: {
        serializedName: "properties.size",
        type: {
          name: "Number"
        }
      },
      bytesUsed: {
        serializedName: "properties.bytesUsed",
        type: {
          name: "Number"
        }
      },
      permissions: {
        serializedName: "properties.permissions",
        type: {
          name: "String"
        }
      },
      creationTimeStamp: {
        serializedName: "properties.creationTimeStamp",
        type: {
          name: "DateTime"
        }
      },
      accessedTimeStamp: {
        serializedName: "properties.accessedTimeStamp",
        type: {
          name: "DateTime"
        }
      },
      modifiedTimeStamp: {
        serializedName: "properties.modifiedTimeStamp",
        type: {
          name: "DateTime"
        }
      },
      changedTimeStamp: {
        serializedName: "properties.changedTimeStamp",
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VolumeRelocationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VolumeRelocationProperties",
    modelProperties: {
      oldVolumeId: {
        serializedName: "oldVolumeId",
        type: {
          name: "String"
        }
      },
      oldBareMetalTenantId: {
        serializedName: "oldBareMetalTenantId",
        type: {
          name: "String"
        }
      },
      relocationRequested: {
        serializedName: "relocationRequested",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const MountTarget: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MountTarget",
    modelProperties: {
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      mountTargetId: {
        constraints: {
          Pattern: new RegExp(
            "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"
          ),
          MaxLength: 36,
          MinLength: 36
        },
        serializedName: "properties.mountTargetId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fileSystemId: {
        constraints: {
          Pattern: new RegExp(
            "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"
          ),
          MaxLength: 36,
          MinLength: 36
        },
        serializedName: "properties.fileSystemId",
        required: true,
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "properties.ipAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      smbServerFqdn: {
        serializedName: "properties.smbServerFqdn",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SnapshotPolicyDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SnapshotPolicyDetails",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      hourlySchedule: {
        serializedName: "properties.hourlySchedule",
        type: {
          name: "Composite",
          className: "HourlySchedule"
        }
      },
      dailySchedule: {
        serializedName: "properties.dailySchedule",
        type: {
          name: "Composite",
          className: "DailySchedule"
        }
      },
      weeklySchedule: {
        serializedName: "properties.weeklySchedule",
        type: {
          name: "Composite",
          className: "WeeklySchedule"
        }
      },
      monthlySchedule: {
        serializedName: "properties.monthlySchedule",
        type: {
          name: "Composite",
          className: "MonthlySchedule"
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackupPolicyDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupPolicyDetails",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      backupPolicyId: {
        serializedName: "properties.backupPolicyId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dailyBackupsToKeep: {
        serializedName: "properties.dailyBackupsToKeep",
        type: {
          name: "Number"
        }
      },
      weeklyBackupsToKeep: {
        serializedName: "properties.weeklyBackupsToKeep",
        type: {
          name: "Number"
        }
      },
      monthlyBackupsToKeep: {
        serializedName: "properties.monthlyBackupsToKeep",
        type: {
          name: "Number"
        }
      },
      volumesAssigned: {
        serializedName: "properties.volumesAssigned",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      volumeBackups: {
        serializedName: "properties.volumeBackups",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VolumeBackups"
            }
          }
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubscriptionQuotaItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubscriptionQuotaItem",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      current: {
        serializedName: "properties.current",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      default: {
        serializedName: "properties.default",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SubvolumeInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubvolumeInfo",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      path: {
        serializedName: "properties.path",
        type: {
          name: "String"
        }
      },
      size: {
        serializedName: "properties.size",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      parentPath: {
        serializedName: "properties.parentPath",
        nullable: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetAppAccount: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetAppAccount",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      activeDirectories: {
        serializedName: "properties.activeDirectories",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ActiveDirectory"
            }
          }
        }
      },
      encryption: {
        serializedName: "properties.encryption",
        type: {
          name: "Composite",
          className: "AccountEncryption"
        }
      },
      disableShowmount: {
        serializedName: "properties.disableShowmount",
        readOnly: true,
        nullable: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const CapacityPool: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CapacityPool",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      poolId: {
        constraints: {
          Pattern: new RegExp(
            "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"
          ),
          MaxLength: 36,
          MinLength: 36
        },
        serializedName: "properties.poolId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      size: {
        defaultValue: 4398046511104,
        serializedName: "properties.size",
        required: true,
        type: {
          name: "Number"
        }
      },
      serviceLevel: {
        defaultValue: "Premium",
        serializedName: "properties.serviceLevel",
        required: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      totalThroughputMibps: {
        serializedName: "properties.totalThroughputMibps",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      utilizedThroughputMibps: {
        serializedName: "properties.utilizedThroughputMibps",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      qosType: {
        serializedName: "properties.qosType",
        type: {
          name: "String"
        }
      },
      coolAccess: {
        defaultValue: false,
        serializedName: "properties.coolAccess",
        type: {
          name: "Boolean"
        }
      },
      encryptionType: {
        defaultValue: "Single",
        serializedName: "properties.encryptionType",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Volume: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Volume",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      zones: {
        serializedName: "zones",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MaxLength: 255,
              MinLength: 1
            },
            type: {
              name: "String"
            }
          }
        }
      },
      fileSystemId: {
        constraints: {
          Pattern: new RegExp(
            "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"
          ),
          MaxLength: 36,
          MinLength: 36
        },
        serializedName: "properties.fileSystemId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationToken: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9\\-]{0,79}$"),
          MaxLength: 80,
          MinLength: 1
        },
        serializedName: "properties.creationToken",
        required: true,
        type: {
          name: "String"
        }
      },
      serviceLevel: {
        defaultValue: "Premium",
        serializedName: "properties.serviceLevel",
        type: {
          name: "String"
        }
      },
      usageThreshold: {
        defaultValue: 107374182400,
        constraints: {
          InclusiveMaximum: 549755813888000,
          InclusiveMinimum: 107374182400
        },
        serializedName: "properties.usageThreshold",
        required: true,
        type: {
          name: "Number"
        }
      },
      exportPolicy: {
        serializedName: "properties.exportPolicy",
        type: {
          name: "Composite",
          className: "VolumePropertiesExportPolicy"
        }
      },
      protocolTypes: {
        serializedName: "properties.protocolTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      snapshotId: {
        serializedName: "properties.snapshotId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      deleteBaseSnapshot: {
        serializedName: "properties.deleteBaseSnapshot",
        type: {
          name: "Boolean"
        }
      },
      backupId: {
        serializedName: "properties.backupId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      baremetalTenantId: {
        serializedName: "properties.baremetalTenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subnetId: {
        serializedName: "properties.subnetId",
        required: true,
        type: {
          name: "String"
        }
      },
      networkFeatures: {
        defaultValue: "Basic",
        serializedName: "properties.networkFeatures",
        type: {
          name: "String"
        }
      },
      networkSiblingSetId: {
        constraints: {
          Pattern: new RegExp(
            "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"
          ),
          MaxLength: 36,
          MinLength: 36
        },
        serializedName: "properties.networkSiblingSetId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      storageToNetworkProximity: {
        serializedName: "properties.storageToNetworkProximity",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      mountTargets: {
        serializedName: "properties.mountTargets",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MountTargetProperties"
            }
          }
        }
      },
      volumeType: {
        serializedName: "properties.volumeType",
        type: {
          name: "String"
        }
      },
      dataProtection: {
        serializedName: "properties.dataProtection",
        type: {
          name: "Composite",
          className: "VolumePropertiesDataProtection"
        }
      },
      isRestoring: {
        serializedName: "properties.isRestoring",
        type: {
          name: "Boolean"
        }
      },
      snapshotDirectoryVisible: {
        defaultValue: true,
        serializedName: "properties.snapshotDirectoryVisible",
        type: {
          name: "Boolean"
        }
      },
      kerberosEnabled: {
        defaultValue: false,
        serializedName: "properties.kerberosEnabled",
        type: {
          name: "Boolean"
        }
      },
      securityStyle: {
        defaultValue: "unix",
        serializedName: "properties.securityStyle",
        type: {
          name: "String"
        }
      },
      smbEncryption: {
        defaultValue: false,
        serializedName: "properties.smbEncryption",
        type: {
          name: "Boolean"
        }
      },
      smbAccessBasedEnumeration: {
        serializedName: "properties.smbAccessBasedEnumeration",
        type: {
          name: "String"
        }
      },
      smbNonBrowsable: {
        serializedName: "properties.smbNonBrowsable",
        type: {
          name: "String"
        }
      },
      smbContinuouslyAvailable: {
        defaultValue: false,
        serializedName: "properties.smbContinuouslyAvailable",
        type: {
          name: "Boolean"
        }
      },
      throughputMibps: {
        serializedName: "properties.throughputMibps",
        type: {
          name: "Number"
        }
      },
      encryptionKeySource: {
        defaultValue: "Microsoft.NetApp",
        serializedName: "properties.encryptionKeySource",
        type: {
          name: "String"
        }
      },
      keyVaultPrivateEndpointResourceId: {
        serializedName: "properties.keyVaultPrivateEndpointResourceId",
        type: {
          name: "String"
        }
      },
      ldapEnabled: {
        defaultValue: false,
        serializedName: "properties.ldapEnabled",
        type: {
          name: "Boolean"
        }
      },
      coolAccess: {
        defaultValue: false,
        serializedName: "properties.coolAccess",
        type: {
          name: "Boolean"
        }
      },
      coolnessPeriod: {
        constraints: {
          InclusiveMaximum: 63,
          InclusiveMinimum: 7
        },
        serializedName: "properties.coolnessPeriod",
        type: {
          name: "Number"
        }
      },
      unixPermissions: {
        defaultValue: "0770",
        constraints: {
          MaxLength: 4,
          MinLength: 4
        },
        serializedName: "properties.unixPermissions",
        nullable: true,
        type: {
          name: "String"
        }
      },
      cloneProgress: {
        serializedName: "properties.cloneProgress",
        readOnly: true,
        nullable: true,
        type: {
          name: "Number"
        }
      },
      avsDataStore: {
        defaultValue: "Disabled",
        serializedName: "properties.avsDataStore",
        type: {
          name: "String"
        }
      },
      isDefaultQuotaEnabled: {
        defaultValue: false,
        serializedName: "properties.isDefaultQuotaEnabled",
        type: {
          name: "Boolean"
        }
      },
      defaultUserQuotaInKiBs: {
        defaultValue: 0,
        serializedName: "properties.defaultUserQuotaInKiBs",
        type: {
          name: "Number"
        }
      },
      defaultGroupQuotaInKiBs: {
        defaultValue: 0,
        serializedName: "properties.defaultGroupQuotaInKiBs",
        type: {
          name: "Number"
        }
      },
      maximumNumberOfFiles: {
        serializedName: "properties.maximumNumberOfFiles",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      volumeGroupName: {
        serializedName: "properties.volumeGroupName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      capacityPoolResourceId: {
        serializedName: "properties.capacityPoolResourceId",
        type: {
          name: "String"
        }
      },
      proximityPlacementGroup: {
        serializedName: "properties.proximityPlacementGroup",
        type: {
          name: "String"
        }
      },
      t2Network: {
        serializedName: "properties.t2Network",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      volumeSpecName: {
        serializedName: "properties.volumeSpecName",
        type: {
          name: "String"
        }
      },
      encrypted: {
        serializedName: "properties.encrypted",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      placementRules: {
        serializedName: "properties.placementRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PlacementKeyValuePairs"
            }
          }
        }
      },
      enableSubvolumes: {
        defaultValue: "Disabled",
        serializedName: "properties.enableSubvolumes",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SnapshotPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SnapshotPolicy",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hourlySchedule: {
        serializedName: "properties.hourlySchedule",
        type: {
          name: "Composite",
          className: "HourlySchedule"
        }
      },
      dailySchedule: {
        serializedName: "properties.dailySchedule",
        type: {
          name: "Composite",
          className: "DailySchedule"
        }
      },
      weeklySchedule: {
        serializedName: "properties.weeklySchedule",
        type: {
          name: "Composite",
          className: "WeeklySchedule"
        }
      },
      monthlySchedule: {
        serializedName: "properties.monthlySchedule",
        type: {
          name: "Composite",
          className: "MonthlySchedule"
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackupPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupPolicy",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      backupPolicyId: {
        serializedName: "properties.backupPolicyId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dailyBackupsToKeep: {
        serializedName: "properties.dailyBackupsToKeep",
        type: {
          name: "Number"
        }
      },
      weeklyBackupsToKeep: {
        serializedName: "properties.weeklyBackupsToKeep",
        type: {
          name: "Number"
        }
      },
      monthlyBackupsToKeep: {
        serializedName: "properties.monthlyBackupsToKeep",
        type: {
          name: "Number"
        }
      },
      volumesAssigned: {
        serializedName: "properties.volumesAssigned",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      volumeBackups: {
        serializedName: "properties.volumeBackups",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VolumeBackups"
            }
          }
        }
      }
    }
  }
};

export const VolumeQuotaRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VolumeQuotaRule",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Accepted",
            "Creating",
            "Patching",
            "Deleting",
            "Moving",
            "Failed",
            "Succeeded"
          ]
        }
      },
      quotaSizeInKiBs: {
        serializedName: "properties.quotaSizeInKiBs",
        type: {
          name: "Number"
        }
      },
      quotaType: {
        serializedName: "properties.quotaType",
        type: {
          name: "String"
        }
      },
      quotaTarget: {
        serializedName: "properties.quotaTarget",
        type: {
          name: "String"
        }
      }
    }
  }
};
