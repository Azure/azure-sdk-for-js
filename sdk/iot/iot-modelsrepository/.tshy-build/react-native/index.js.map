{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BG;AAEH,OAAO,EAAE,sBAAsB,EAAE,MAAM,6BAA6B,CAAC;AAIrE,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAC7C,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,MAAM,sBAAsB,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * This is the ModelsRepositoryClient Library for JavaScript.\n *\n * @remarks\n * This ModelsRepositoryClient is built around getting DTDL Models from a user-specified\n * location. The two main variables are the repositoryLocation, which is a path or URI to either a remote\n * or local repository where the models are located, and the dtmis, which can be one or more dtmis that\n * will be mapped to specific models contained in the repository location that the user wishes to get.\n *\n * @example\n * ```ts snippet:ReadmeSampleGetModels\n * import { ModelsRepositoryClient } from \"@azure/iot-modelsrepository\";\n *\n * // Global endpoint client\n * const client = new ModelsRepositoryClient();\n *\n * // The output of getModels() will include at least the definition for the target dtmi.\n * // If the model dependency resolution configuration is not disabled, then models in which the\n * // target dtmi depends on will also be included in the returned object (mapping dtmis to model objects).\n * const dtmi = \"dtmi:com:example:TemperatureController;1\";\n * const models = await client.getModels(dtmi, { dependencyResolution: \"tryFromExpanded\" });\n *\n * // In this case the above dtmi has 2 model dependencies.\n * // dtmi:com:example:Thermostat;1 and dtmi:azure:DeviceManagement:DeviceInformation;1\n * console.log(`${dtmi} resolved in ${Object.keys(models).length} interfaces.`);\n * ```\n *\n * @packageDocumentation\n */\n\nexport { ModelsRepositoryClient } from \"./modelsRepositoryClient.js\";\nexport { GetModelsOptions } from \"./interfaces/getModelsOptions.js\";\nexport { ModelsRepositoryClientOptions } from \"./interfaces/modelsRepositoryClientOptions.js\";\nexport { dependencyResolutionType } from \"./dependencyResolutionType.js\";\nexport { ModelError } from \"./exceptions.js\";\nexport { getModelUri, isValidDtmi } from \"./dtmiConventions.js\";\n"]}