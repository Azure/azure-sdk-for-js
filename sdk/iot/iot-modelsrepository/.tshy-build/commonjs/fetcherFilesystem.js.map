{"version":3,"file":"fetcherFilesystem.js","sourceRoot":"","sources":["../../src/fetcherFilesystem.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;;AAElC,8DAAyB;AACzB,wDAAkC;AAElC,kEAAsD;AAEtD,2CAAqC;AAGrC,SAAS,eAAe,CAAC,QAAgB;IACvC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACrC,iBAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;YAC1C,IAAI,GAAG,KAAK,SAAS,EAAE,CAAC;gBACtB,MAAM,CAAC,GAAG,CAAC,CAAC;YACd,CAAC;iBAAM,CAAC;gBACN,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC;YACD,OAAO,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AAED;;;;;GAKG;AACH,MAAa,iBAAiB;IAG5B,YAAY,YAAoB;QAC9B,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;IACpC,CAAC;IAED,KAAK,CAAC,KAAK,CAAC,QAAgB;QAC1B,kBAAM,CAAC,IAAI,CAAC,YAAY,QAAQ,wBAAwB,CAAC,CAAC;QAC1D,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;QAC7D,IAAI,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE,CAAC;YACnD,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;QACxD,CAAC;QAED,IAAI,CAAC;YACH,kBAAM,CAAC,IAAI,CAAC,gBAAgB,YAAY,EAAE,CAAC,CAAC;YAC5C,MAAM,QAAQ,GAAG,MAAM,eAAe,CAAC,YAAY,CAAC,CAAC;YACrD,MAAM,UAAU,GAAkB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YACvD,OAAO,UAAU,CAAC;QACpB,CAAC;QAAC,OAAO,CAAM,EAAE,CAAC;YAChB,MAAM,OAAO,GAAqB;gBAChC,IAAI,EAAE,kBAAkB;gBACxB,UAAU,EAAE,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAE,MAAM;aACtB,CAAC;YACF,MAAM,IAAI,8BAAS,CAAC,iCAAiC,EAAE,OAAO,CAAC,CAAC;QAClE,CAAC;IACH,CAAC;CACF;AA3BD,8CA2BC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport fs from \"node:fs\";\nimport * as path from \"node:path\";\nimport type { RestErrorOptions } from \"@azure/core-rest-pipeline\";\nimport { RestError } from \"@azure/core-rest-pipeline\";\nimport type { Fetcher } from \"./fetcherAbstract.js\";\nimport { logger } from \"./logger.js\";\nimport type { DTDL } from \"./psuedoDtdl.js\";\n\nfunction readFilePromise(filePath: string): Promise<string> {\n  return new Promise((resolve, reject) => {\n    fs.readFile(filePath, \"utf8\", (err, data) => {\n      if (err !== undefined) {\n        reject(err);\n      } else {\n        resolve(data);\n      }\n      return 0;\n    });\n  });\n}\n\n/**\n * The Filesystem Fetcher implements the generic Fetcher interface\n * so that models are fetched from a filesystem endpoint.\n *\n * @internal\n */\nexport class FilesystemFetcher implements Fetcher {\n  private _baseFilePath: string;\n\n  constructor(baseFilePath: string) {\n    this._baseFilePath = baseFilePath;\n  }\n\n  async fetch(filePath: string): Promise<DTDL | DTDL[]> {\n    logger.info(`Fetching ${filePath} from local filesystem`);\n    const absolutePath = path.join(this._baseFilePath, filePath);\n    if (absolutePath.indexOf(this._baseFilePath) !== 0) {\n      throw new Error(\"Attempted to escape base file path\");\n    }\n\n    try {\n      logger.info(`File open on ${absolutePath}`);\n      const dtdlFile = await readFilePromise(absolutePath);\n      const parsedDtdl: DTDL | DTDL[] = JSON.parse(dtdlFile);\n      return parsedDtdl;\n    } catch (e: any) {\n      const options: RestErrorOptions = {\n        code: \"ResourceNotFound\",\n        statusCode: e?.status,\n      };\n      throw new RestError(\"Failed to fetch from Filesystem\", options);\n    }\n  }\n}\n"]}