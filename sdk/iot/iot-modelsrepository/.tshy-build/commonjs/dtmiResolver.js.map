{"version":3,"file":"dtmiResolver.js","sourceRoot":"","sources":["../../src/dtmiResolver.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAIlC,6DAAyD;AACzD,mDAA6C;AAE7C,2CAAqC;AAErC;;;;;;;;GAQG;AACH,MAAa,YAAY;IAEvB,YAAY,OAAgB;QAC1B,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC1B,CAAC;IAED,KAAK,CAAC,OAAO,CACX,KAAe,EACf,aAAsB,EACtB,OAA0B;QAE1B,MAAM,QAAQ,GAA6B,EAAE,CAAC;QAC9C,MAAM,YAAY,GAAG,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE;YAC5C,MAAM,QAAQ,GAAG,IAAA,sCAAiB,EAAC,IAAI,EAAE,aAAa,CAAC,CAAC;YACxD,kBAAM,CAAC,IAAI,CAAC,SAAS,IAAI,6BAA6B,QAAQ,EAAE,CAAC,CAAC;YAClE,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;YAC1D,IAAI,aAAa,EAAE,CAAC;gBAClB,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC;oBACxB,MAAM,QAAQ,GAAc,IAAe,CAAC,GAAG,CAAC,CAAC,KAAW,EAAE,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;oBAC/E,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;wBAC7B,MAAM,IAAI,0BAAU,CAClB,6CAA6C,IAAI,eAAe,QAAQ,EAAE,CAC3E,CAAC;oBACJ,CAAC;oBACD,KAAK,MAAM,KAAK,IAAI,IAAI,EAAE,CAAC;wBACzB,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC;oBACjC,CAAC;gBACH,CAAC;qBAAM,CAAC;oBACN,MAAM,IAAI,0BAAU,CAAC,0DAA0D,CAAC,CAAC;gBACnF,CAAC;YACH,CAAC;iBAAM,CAAC;gBACN,MAAM,KAAK,GAAG,IAAY,CAAC;gBAC3B,IAAI,KAAK,CAAC,KAAK,CAAC,KAAK,IAAI,EAAE,CAAC;oBAC1B,MAAM,IAAI,0BAAU,CAAC,4BAA4B,IAAI,cAAc,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;gBACrF,CAAC;gBAED,QAAQ,CAAC,GAAG,IAAI,EAAE,CAAC,GAAG,KAAK,CAAC;YAC9B,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,MAAM,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAChC,OAAO,QAAQ,CAAC;IAClB,CAAC;CACF;AA3CD,oCA2CC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { OperationOptions } from \"@azure/core-client\";\nimport type { DTDL } from \"./psuedoDtdl.js\";\nimport { convertDtmiToPath } from \"./dtmiConventions.js\";\nimport { ModelError } from \"./exceptions.js\";\nimport type { Fetcher } from \"./fetcherAbstract.js\";\nimport { logger } from \"./logger.js\";\n\n/**\n * DtmiResolver handles reformatting the DTMIs to paths and passing options\n * down to the configured fetcher. It is almost like a middle man between the\n * user-facing API and the PsuedoParser (which identifies if there are sub-dependencies\n * to resolve), and the configured fetcher, which will go out to the endpoint,\n * either in the filesystem or through a URI, and actually get the model we want.\n *\n * @internal\n */\nexport class DtmiResolver {\n  private _fetcher: Fetcher;\n  constructor(fetcher: Fetcher) {\n    this._fetcher = fetcher;\n  }\n\n  async resolve(\n    dtmis: string[],\n    expandedModel: boolean,\n    options?: OperationOptions,\n  ): Promise<{ [dtmi: string]: DTDL }> {\n    const modelMap: { [dtmi: string]: DTDL } = {};\n    const dtdlPromises = dtmis.map(async (dtmi) => {\n      const dtdlPath = convertDtmiToPath(dtmi, expandedModel);\n      logger.info(`Model ${dtmi} located in repository at ${dtdlPath}`);\n      const dtdl = await this._fetcher.fetch(dtdlPath, options);\n      if (expandedModel) {\n        if (Array.isArray(dtdl)) {\n          const modelIds: string[] = (dtdl as DTDL[]).map((model: DTDL) => model[\"@id\"]);\n          if (!modelIds.includes(dtmi)) {\n            throw new ModelError(\n              `DTMI mismatch on expanded DTDL - Request: ${dtmi}, Response: ${modelIds}`,\n            );\n          }\n          for (const model of dtdl) {\n            modelMap[model[\"@id\"]] = model;\n          }\n        } else {\n          throw new ModelError(\"Expanded format should always return an array of models.\");\n        }\n      } else {\n        const model = dtdl as DTDL;\n        if (model[\"@id\"] !== dtmi) {\n          throw new ModelError(`DTMI mismatch - Request: ${dtmi}, Response ${model[\"@id\"]}`);\n        }\n\n        modelMap[`${dtmi}`] = model;\n      }\n    });\n\n    await Promise.all(dtdlPromises);\n    return modelMap;\n  }\n}\n"]}