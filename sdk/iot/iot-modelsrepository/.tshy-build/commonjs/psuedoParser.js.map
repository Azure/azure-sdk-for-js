{"version":3,"file":"psuedoParser.js","sourceRoot":"","sources":["../../src/psuedoParser.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { DTDL } from \"./psuedoDtdl.js\";\nimport { logger } from \"./logger.js\";\nimport type { DtmiResolver } from \"./dtmiResolver.js\";\nimport { RestError } from \"@azure/core-rest-pipeline\";\n\n/**\n * The PsuedoParser is an interesting implementation. Essentially, this\n * codebase works in tandem with a Digital Twins Parser, which simultaneously\n * defines the DTDL structure and validates models match the correct DTDL format.\n * In lieu of using that Parser as a dependency (for a complex network of reasons),\n * we implement this class, which kind of parses. Because it uses the resovler too,\n * we can, during psuedo-parsing, identify any times we should resolve a dependency,\n * and then resolve the dependencies until the dependency tree is fully resolved.\n *\n * @internal\n */\nexport class PseudoParser {\n  private _resolver: DtmiResolver;\n\n  // eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\n  constructor(resolver: DtmiResolver) {\n    this._resolver = resolver;\n  }\n\n  async expand(models: DTDL[], tryFromExpanded: boolean): Promise<{ [dtmi: string]: DTDL }> {\n    const expandedMap: { [dtmi: string]: DTDL } = {};\n    for (let i = 0; i < models.length; i++) {\n      const model: DTDL = models[i];\n      if (model[\"@id\"] !== undefined) {\n        expandedMap[model[\"@id\"]] = model;\n      } else {\n        throw Error(`model ${model} does not contain @id member`);\n      }\n      await this._expand(model, expandedMap, tryFromExpanded);\n    }\n    return expandedMap;\n  }\n\n  private async _expand(\n    model: DTDL,\n    modelMap: { [dtmi: string]: DTDL },\n    tryFromExpanded: boolean,\n  ): Promise<void> {\n    logger.info(`Expanding model: ${model[\"@id\"]}`);\n    const dependencies = this._getModelDependencies(model);\n    const dependenciesToResolve = dependencies.filter((dependency: string) => {\n      return !(dependency in modelMap);\n    });\n    if (dependenciesToResolve.length !== 0) {\n      logger.info(`Outstanding dependencies found: ${dependenciesToResolve}`);\n      let resolvedDependenciesMap: { [s: string]: unknown };\n      try {\n        resolvedDependenciesMap = await this._resolver.resolve(\n          dependenciesToResolve,\n          tryFromExpanded,\n        );\n      } catch (e: any) {\n        if (e instanceof RestError) {\n          resolvedDependenciesMap = await this._resolver.resolve(dependenciesToResolve, false);\n        } else {\n          throw e;\n        }\n      }\n      Object.keys(resolvedDependenciesMap).forEach((key) => {\n        modelMap[key] = resolvedDependenciesMap[key] as DTDL;\n      });\n      const promiseList: Promise<void>[] = [];\n      Object.values(resolvedDependenciesMap).forEach((dependencyModel) => {\n        promiseList.push(this._expand(dependencyModel as DTDL, modelMap, tryFromExpanded));\n      });\n      await Promise.all(promiseList);\n    }\n  }\n\n  private _getModelDependencies(model: DTDL): string[] {\n    const dependencies = [];\n\n    if (model.contents !== undefined) {\n      const contents = model.contents;\n      contents.forEach((element) => {\n        if (\n          element[\"@type\"] &&\n          typeof element[\"@type\"] === \"string\" &&\n          element[\"@type\"] === \"Component\"\n        ) {\n          if (element.schema && typeof element.schema === \"string\") {\n            dependencies.push(element.schema);\n          }\n        }\n      });\n    }\n\n    if (model.extends !== undefined) {\n      if (typeof model.extends === \"string\") {\n        dependencies.push(model.extends);\n      } else if (Array.isArray(model.extends)) {\n        model.extends.forEach((element) => {\n          if (typeof element === \"string\") {\n            dependencies.push(element);\n          } else if (typeof element === \"object\") {\n            dependencies.push(this._getModelDependencies(element));\n          }\n        });\n      }\n    }\n\n    const noDuplicates = Array.from(new Set(dependencies));\n    return noDuplicates;\n  }\n}\n"]}