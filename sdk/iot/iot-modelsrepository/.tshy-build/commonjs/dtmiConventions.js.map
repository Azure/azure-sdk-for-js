{"version":3,"file":"dtmiConventions.js","sourceRoot":"","sources":["../../src/dtmiConventions.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AASlC,kCAKC;AASD,kCAUC;AASD,8CAcC;AAtDD;;;;;;GAMG;AACH,SAAgB,WAAW,CAAC,IAAY;IACtC,IAAI,OAAO,IAAI,KAAK,QAAQ;QAAE,OAAO,KAAK,CAAC;IAC3C,MAAM,EAAE,GACN,yGAAyG,CAAC;IAC5G,OAAO,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,2DAA2D;AACnF,CAAC;AAED;;;;;;GAMG;AACH,SAAgB,WAAW,CACzB,IAAY,EACZ,aAAqB,EACrB,WAAoB,KAAK;IAEzB,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;QACjC,aAAa,GAAG,aAAa,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IAC5C,CAAC;IACD,MAAM,QAAQ,GAAG,aAAa,GAAG,iBAAiB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IACnE,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED;;;;;;GAMG;AACH,SAAgB,iBAAiB,CAAC,IAAY,EAAE,QAAiB;IAC/D,uEAAuE;IACvE,wEAAwE;IACxE,mDAAmD;IAEnD,IAAI,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC;QACtB,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,OAAO,CAAC;QACnF,IAAI,QAAQ,EAAE,CAAC;YACb,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,gBAAgB,CAAC,CAAC;QACvD,CAAC;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;SAAM,CAAC;QACN,MAAM,IAAI,KAAK,CAAC,+DAA+D,CAAC,CAAC;IACnF,CAAC;AACH,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * isValidDtmi validates if a given dtmi matches the convention.\n * This is based on the DTMI spec:\n * https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md#digital-twin-model-identifier\n *\n * @param dtmi - digital twins model identifier string\n */\nexport function isValidDtmi(dtmi: string): boolean {\n  if (typeof dtmi !== \"string\") return false;\n  const re =\n    /^dtmi:[A-Za-z](?:[A-Za-z0-9_]*[A-Za-z0-9])?(?::[A-Za-z](?:[A-Za-z0-9_]*[A-Za-z0-9])?)*;[1-9][0-9]{0,8}$/;\n  return re.test(dtmi); // true if dtmi matches regular expression, false otherwise\n}\n\n/**\n * Given the dtmi and repository uri, will get a fully qualified model uri.\n *\n * @param dtmi - digital twins model identifier string\n * @param repositoryUri - base URI for repository\n * @param expanded - is the Model URI .json or .expanded.json\n */\nexport function getModelUri(\n  dtmi: string,\n  repositoryUri: string,\n  expanded: boolean = false,\n): string {\n  if (!repositoryUri.endsWith(\"/\")) {\n    repositoryUri = repositoryUri.concat(\"/\");\n  }\n  const modelUri = repositoryUri + convertDtmiToPath(dtmi, expanded);\n  return modelUri;\n}\n\n/**\n * convertDtmiToPath converts a given dtmi string to a path.\n *\n * @param dtmi - digital twins model identifier string\n * @param expanded - is the Model URI .json or .expanded.json\n * @internal\n */\nexport function convertDtmiToPath(dtmi: string, expanded: boolean): string {\n  // presently this dtmi to path function does not return the path with a\n  // file format at the end, i.e. does not append .json or .expanded.json.\n  // that happens in the dtmiToQualifiedPath function\n\n  if (isValidDtmi(dtmi)) {\n    let thePath = `${dtmi.toLowerCase().replace(/:/gm, \"/\").replace(/;/gm, \"-\")}.json`;\n    if (expanded) {\n      thePath = thePath.replace(\".json\", \".expanded.json\");\n    }\n    return thePath;\n  } else {\n    throw new Error(\"DTMI provided is invalid. Ensure it follows DTMI conventions.\");\n  }\n}\n"]}