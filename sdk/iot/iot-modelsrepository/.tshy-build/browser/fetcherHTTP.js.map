{"version":3,"file":"fetcherHTTP.js","sourceRoot":"","sources":["../../src/fetcherHTTP.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AASlC,OAAO,EAAE,iBAAiB,EAAE,qBAAqB,EAAE,SAAS,EAAE,MAAM,2BAA2B,CAAC;AAChG,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAC;AAIrC;;;;;GAKG;AACH,MAAM,OAAO,WAAW;IAItB,wEAAwE;IACxE,YAAY,OAAe,EAAE,MAAqB;QAChD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC1B,CAAC;IAED,KAAK,CAAC,KAAK,CAAC,IAAY,EAAE,OAA0B;;QAClD,MAAM,CAAC,IAAI,CAAC,YAAY,IAAI,uBAAuB,CAAC,CAAC;QACrD,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,OAAO,GAAG,EAAE,CAAC;QACf,CAAC;QACD,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC;QACzC,MAAM,aAAa,GAAgB,KAAK,CAAC;QACzC,MAAM,aAAa,GAAgB,iBAAiB,CAAC,MAAA,OAAO,CAAC,cAAc,0CAAE,aAAa,CAAC,CAAC;QAC5F,MAAM,cAAc,GAAG;YACrB,GAAG,EAAE,KAAK;YACV,MAAM,EAAE,aAAa;YACrB,OAAO,EAAE,aAAa;YACtB,OAAO,EAAE,MAAA,OAAO,CAAC,cAAc,0CAAE,OAAO;YACxC,WAAW,EAAE,OAAO,CAAC,WAAW;YAChC,cAAc,EAAE,OAAO,CAAC,cAAc;YACtC,uBAAuB,EAAE,IAAI;SAC9B,CAAC;QACF,MAAM,OAAO,GAAoB,qBAAqB,CAAC,cAAc,CAAC,CAAC;QACvE,MAAM,GAAG,GAAqB,MAAM,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QAEtE,IAAI,GAAG,CAAC,MAAM,IAAI,GAAG,IAAI,GAAG,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC;YAC1C,MAAM,YAAY,GAAG,GAAG,CAAC,UAAU,IAAI,EAAE,CAAC;YAC1C,MAAM,UAAU,GAAkB,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;YAC3D,OAAO,UAAU,CAAC;QACpB,CAAC;aAAM,CAAC;YACN,MAAM,IAAI,SAAS,CAAC,+CAA+C,EAAE;gBACnE,IAAI,EAAE,kBAAkB;gBACxB,UAAU,EAAE,GAAG,CAAC,MAAM;gBACtB,QAAQ,EAAE,GAAG;gBACb,OAAO,EAAE,OAAO;aACjB,CAAC,CAAC;QACL,CAAC;IACH,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { OperationOptions, ServiceClient } from \"@azure/core-client\";\nimport type {\n  HttpHeaders,\n  HttpMethods,\n  PipelineRequest,\n  PipelineResponse,\n} from \"@azure/core-rest-pipeline\";\nimport { createHttpHeaders, createPipelineRequest, RestError } from \"@azure/core-rest-pipeline\";\nimport { logger } from \"./logger.js\";\nimport type { Fetcher } from \"./fetcherAbstract.js\";\nimport type { DTDL } from \"./psuedoDtdl.js\";\n\n/**\n * The HTTP Fetcher implements the Fetcher interface to\n * retrieve models through HTTP calls.\n *\n * @internal\n */\nexport class HttpFetcher implements Fetcher {\n  private _client: ServiceClient;\n  private _baseURL: string;\n\n  // eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\n  constructor(baseURL: string, client: ServiceClient) {\n    this._client = client;\n    this._baseURL = baseURL;\n  }\n\n  async fetch(path: string, options?: OperationOptions): Promise<DTDL | DTDL[]> {\n    logger.info(`Fetching ${path} from remote endpoint`);\n    if (!options) {\n      options = {};\n    }\n    const myURL = this._baseURL + \"/\" + path;\n    const requestMethod: HttpMethods = \"GET\";\n    const requestHeader: HttpHeaders = createHttpHeaders(options.requestOptions?.customHeaders);\n    const requestOptions = {\n      url: myURL,\n      method: requestMethod,\n      headers: requestHeader,\n      timeout: options.requestOptions?.timeout,\n      abortSignal: options.abortSignal,\n      tracingOptions: options.tracingOptions,\n      allowInsecureConnection: true,\n    };\n    const request: PipelineRequest = createPipelineRequest(requestOptions);\n    const res: PipelineResponse = await this._client.sendRequest(request);\n\n    if (res.status >= 200 && res.status < 400) {\n      const dtdlAsString = res.bodyAsText || \"\";\n      const parsedDtdl: DTDL | DTDL[] = JSON.parse(dtdlAsString);\n      return parsedDtdl;\n    } else {\n      throw new RestError(\"Error on HTTP Request in remote model fetcher\", {\n        code: \"ResourceNotFound\",\n        statusCode: res.status,\n        response: res,\n        request: request,\n      });\n    }\n  }\n}\n"]}