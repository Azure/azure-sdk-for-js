{"version":3,"file":"modelsRepositoryClient.js","sourceRoot":"","sources":["../../src/modelsRepositoryClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport {\n  DEFAULT_API_VERSION,\n  DEFAULT_REPOSITORY_LOCATION,\n  DEFAULT_USER_AGENT,\n  DEPENDENCY_MODE_DISABLED,\n  DEPENDENCY_MODE_ENABLED,\n  DEPENDENCY_MODE_TRY_FROM_EXPANDED,\n} from \"./utils/constants.js\";\nimport type { InternalClientPipelineOptions } from \"@azure/core-client\";\nimport { createClientPipeline } from \"@azure/core-client\";\nimport type { Fetcher } from \"./fetcherAbstract.js\";\nimport { isLocalPath, normalize } from \"./utils/path.js\";\nimport { FilesystemFetcher } from \"./fetcherFilesystem.js\";\nimport type { dependencyResolutionType } from \"./dependencyResolutionType.js\";\nimport { DtmiResolver } from \"./dtmiResolver.js\";\nimport { PseudoParser } from \"./psuedoParser.js\";\nimport type { ModelsRepositoryClientOptions } from \"./interfaces/modelsRepositoryClientOptions.js\";\nimport { logger } from \"./logger.js\";\nimport { IoTModelsRepositoryServiceClient } from \"./modelsRepositoryServiceClient.js\";\nimport { HttpFetcher } from \"./fetcherHTTP.js\";\nimport type { GetModelsOptions } from \"./interfaces/getModelsOptions.js\";\nimport type { DTDL } from \"./psuedoDtdl.js\";\n\n/**\n * Initializes a new instance of the IoT Models Repository Client.\n */\nexport class ModelsRepositoryClient {\n  private _repositoryLocation: string;\n  private _dependencyResolution: dependencyResolutionType;\n  private _apiVersion: string;\n  private _fetcher: Fetcher;\n  private _resolver: DtmiResolver;\n  private _pseudoParser: PseudoParser;\n\n  /**\n   * The ModelsRepositoryClient constructor\n   * @param options - The models repository client options that govern the behavior of the client.\n   */\n  constructor(options: ModelsRepositoryClientOptions = {}) {\n    this._repositoryLocation = options.repositoryLocation || DEFAULT_REPOSITORY_LOCATION;\n    logger.info(`Client configured for repository location ${this._repositoryLocation}`);\n    this._dependencyResolution =\n      options.dependencyResolution ||\n      this._checkDefaultDependencyResolution(!!options.repositoryLocation);\n    logger.info(`Client configured for dependency mode: ${this._dependencyResolution}`);\n    this._fetcher = this._createFetcher(this._repositoryLocation, options);\n    this._resolver = new DtmiResolver(this._fetcher);\n    this._pseudoParser = new PseudoParser(this._resolver);\n\n    // Store api version here (for now). Currently doesn't do anything\n    this._apiVersion = options.apiVersion || DEFAULT_API_VERSION;\n  }\n\n  /**\n   * improves the readability of the constructor.\n   * based on a boolean returns the proper dependency resolution setting string.\n   */\n  private _checkDefaultDependencyResolution(customRepository: boolean): dependencyResolutionType {\n    if (customRepository) {\n      return \"enabled\";\n    } else {\n      return \"tryFromExpanded\";\n    }\n  }\n\n  /**\n   * Though currently not relevant, can specify API Version for communicating with\n   * the service.\n   */\n  get apiVersion(): string {\n    return this._apiVersion;\n  }\n\n  /**\n   * Configured repository location for this instance. Will be used as the endpoint to get the models from.\n   */\n  get repositoryLocation(): string {\n    return this._repositoryLocation;\n  }\n\n  /**\n   * Configured type of dependency resolution for this instance. Dictates how the client deals with model dependencies.\n   */\n  get dependencyResolution(): dependencyResolutionType {\n    return this._dependencyResolution;\n  }\n\n  /**\n   * Because of the local / remote optionality of this client, the service client\n   * must be dynamically generated based on the repository location. If the provided\n   * repository location is a remote location, then this private method will be used\n   * to create the IoT Models Repository Service Client.\n   */\n  private _createClient(options: ModelsRepositoryClientOptions): IoTModelsRepositoryServiceClient {\n    const { ...pipelineOptions } = options;\n\n    if (!pipelineOptions.userAgentOptions) {\n      pipelineOptions.userAgentOptions = {};\n    }\n    if (pipelineOptions.userAgentOptions.userAgentPrefix) {\n      pipelineOptions.userAgentOptions.userAgentPrefix = `${pipelineOptions.userAgentOptions.userAgentPrefix} ${DEFAULT_USER_AGENT}`;\n    } else {\n      pipelineOptions.userAgentOptions.userAgentPrefix = DEFAULT_USER_AGENT;\n    }\n\n    const internalPipelineOptions: InternalClientPipelineOptions = {\n      ...pipelineOptions,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n        },\n      },\n    };\n\n    const pipeline = createClientPipeline(internalPipelineOptions);\n    const client = new IoTModelsRepositoryServiceClient(this._repositoryLocation, { pipeline });\n    return client;\n  }\n\n  /**\n   * The fetcher is an abstraction necessary since this client can communicate with remote or local\n   * Model Repositories based on the provided location. It will analyze the provided location based\n   * on that create either an HTTP Fetcher, which uses the IoT Models Repository Service Client,\n   * or a Filesystem Fetcher.\n   */\n  private _createFetcher(location: string, options: ModelsRepositoryClientOptions): Fetcher {\n    let locationURL;\n    let fetcher;\n    if (isLocalPath(location)) {\n      // POSIX Filesystem Path or Windows Filesystem Path\n      logger.info(`Repository location identified as filesystem path - using FilesystemFetcher`);\n      fetcher = new FilesystemFetcher(normalize(location));\n    } else {\n      locationURL = new URL(location);\n      const prot = locationURL.protocol;\n      if (prot.includes(\"http\") || prot.includes(\"https\")) {\n        logger.info(`Repository location identified as HTTP/HTTPS endpoint - using HttpFetcher`);\n        const client = this._createClient(options);\n        fetcher = new HttpFetcher(location, client);\n      } else if (prot.includes(\"file\")) {\n        // filesystem URI\n        logger.info(\"Repository Location identified as filesystem URI - using FilesystemFetcher\");\n        fetcher = new FilesystemFetcher(location);\n      } else if (prot === \"\" && location.search(/\\.[a-zA-Z]{2,63}$/)) {\n        // Web URL with protocol unspecified - default to HTTPS\n        logger.info(\n          \"Repository Location identified as remote endpoint without protocol specified - using HttpFetcher\",\n        );\n        const fLocation = \"https://\" + location;\n        const client = this._createClient(options);\n        fetcher = new HttpFetcher(fLocation, client);\n      } else {\n        throw new EvalError(`Unable to identify location: ${location}`);\n      }\n    }\n\n    return fetcher;\n  }\n\n  /**\n   * Retrieve one or more models based upon on or more provided dtmis.\n   * @param dtmis - one dtmi represented as a string\n   * @param options - options to govern behavior of model getter.\n   */\n  async getModels(dtmis: string, options?: GetModelsOptions): Promise<{ [dtmi: string]: unknown }>;\n  /**\n   * Retrieve one or more models based upon on or more provided dtmis.\n   * @param dtmis - dtmi strings in an array.\n   * @param options - options to govern behavior of model getter.\n   */\n  async getModels(\n    dtmis: string[],\n    options?: GetModelsOptions,\n  ): Promise<{ [dtmi: string]: unknown }>;\n  async getModels(\n    dtmis: string | string[],\n    options?: GetModelsOptions,\n  ): Promise<{ [dtmi: string]: unknown }> {\n    let modelMap: { [dtmi: string]: unknown };\n    if (!Array.isArray(dtmis)) {\n      dtmis = [dtmis];\n    }\n\n    const dependencyResolution = options?.dependencyResolution || this._dependencyResolution;\n\n    if (dependencyResolution === DEPENDENCY_MODE_DISABLED) {\n      logger.info(\"Getting models w/ dependency resolution mode: disabled\");\n      logger.info(`Retreiving model(s): ${dtmis}...`);\n      modelMap = await this._resolver.resolve(dtmis, false, options);\n    } else if (dependencyResolution === DEPENDENCY_MODE_ENABLED) {\n      logger.info(`Getting models w/ dependency resolution mode: enabled`);\n      logger.info(`Retreiving model(s): ${dtmis}...`);\n      const baseModelMap = await this._resolver.resolve(dtmis, false, options);\n      const baseModelList = Object.keys(baseModelMap).map((key) => baseModelMap[key]);\n      logger.info(`Retreiving model dependencies for ${dtmis}...`);\n      modelMap = await this._pseudoParser.expand(baseModelList, false);\n    } else if (dependencyResolution === DEPENDENCY_MODE_TRY_FROM_EXPANDED) {\n      logger.info(`Getting models w/ dependency resolution mode: tryFromExpanded`);\n      try {\n        logger.info(`Retreiving expanded model(s): ${dtmis}...`);\n        modelMap = await this._resolver.resolve(dtmis, true, options);\n      } catch (e: any) {\n        if (e.name === \"RestError\" && e.code === \"ResouceNotFound\") {\n          logger.info(\"Could not retrieve model(s) from expanded model DTDL - \");\n          const baseModelMap: { [dtmi: string]: unknown } = await this._resolver.resolve(\n            dtmis,\n            false,\n            options,\n          );\n          const baseModelList = Object.keys(baseModelMap).map((key) => baseModelMap[key]);\n          logger.info(`Retreiving model dependencies for ${dtmis}...`);\n          modelMap = await this._pseudoParser.expand(baseModelList as DTDL[], true);\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      throw EvalError(`Invalid dependency resolution mode: ${dependencyResolution}`);\n    }\n\n    return modelMap;\n  }\n}\n"]}