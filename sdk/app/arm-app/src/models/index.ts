/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Container App collection ARM resource. */
export interface ContainerAppCollection {
  /** Collection of resources. */
  value: ContainerApp[];
  /**
   * Link to next page of resources.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Managed service identity (system assigned and/or user assigned identities) */
export interface ManagedServiceIdentity {
  /**
   * The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed). */
  type: ManagedServiceIdentityType;
  /** The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests. */
  userAssignedIdentities?: { [propertyName: string]: UserAssignedIdentity };
}

/** User assigned identity properties */
export interface UserAssignedIdentity {
  /**
   * The principal ID of the assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The client ID of the assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clientId?: string;
}

/** Non versioned Container App configuration properties that define the mutable settings of a Container app */
export interface Configuration {
  /** Collection of secrets used by a Container app */
  secrets?: Secret[];
  /**
   * ActiveRevisionsMode controls how active revisions are handled for the Container app:
   * <list><item>Multiple: multiple revisions can be active. If no value if provided, this is the default</item><item>Single: Only one revision can be active at a time. Revision weights can not be used in this mode</item></list>
   */
  activeRevisionsMode?: ActiveRevisionsMode;
  /** Ingress configurations. */
  ingress?: Ingress;
  /** Collection of private container registry credentials for containers used by the Container app */
  registries?: RegistryCredentials[];
  /** Dapr configuration for the Container App. */
  dapr?: Dapr;
}

/** Secret definition. */
export interface Secret {
  /** Secret Name. */
  name?: string;
  /** Secret Value. */
  value?: string;
}

/** Container App Ingress configuration. */
export interface Ingress {
  /**
   * Hostname.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fqdn?: string;
  /** Bool indicating if app exposes an external http endpoint */
  external?: boolean;
  /** Target Port in containers for traffic from ingress */
  targetPort?: number;
  /** Ingress transport protocol */
  transport?: IngressTransportMethod;
  /** Traffic weights for app's revisions */
  traffic?: TrafficWeight[];
  /** custom domain bindings for Container Apps' hostnames. */
  customDomains?: CustomDomain[];
  /** Bool indicating if HTTP connections to is allowed. If set to false HTTP connections are automatically redirected to HTTPS connections */
  allowInsecure?: boolean;
}

/** Traffic weight assigned to a revision */
export interface TrafficWeight {
  /** Name of a revision */
  revisionName?: string;
  /** Traffic weight assigned to a revision */
  weight?: number;
  /** Indicates that the traffic weight belongs to a latest stable revision */
  latestRevision?: boolean;
}

/** Custom Domain of a Container App */
export interface CustomDomain {
  /** Hostname. */
  name: string;
  /** Custom Domain binding type. */
  bindingType?: BindingType;
  /** Resource Id of the Certificate to be bound to this hostname. Must exist in the Managed Environment. */
  certificateId: string;
}

/** Container App Private Registry */
export interface RegistryCredentials {
  /** Container Registry Server */
  server?: string;
  /** Container Registry Username */
  username?: string;
  /** The name of the Secret that contains the registry login password */
  passwordSecretRef?: string;
}

/** Container App Dapr configuration. */
export interface Dapr {
  /** Boolean indicating if the Dapr side car is enabled */
  enabled?: boolean;
  /** Dapr application identifier */
  appId?: string;
  /** Tells Dapr which protocol your application is using. Valid options are http and grpc. Default is http */
  appProtocol?: AppProtocol;
  /** Tells Dapr which port your application is listening on */
  appPort?: number;
}

/**
 * Container App versioned application definition.
 * Defines the desired state of an immutable revision.
 * Any changes to this section Will result in a new revision being created
 */
export interface Template {
  /** User friendly suffix that is appended to the revision name */
  revisionSuffix?: string;
  /** List of container definitions for the Container App. */
  containers?: Container[];
  /** Scaling properties for the Container App. */
  scale?: Scale;
  /** List of volume definitions for the Container App. */
  volumes?: Volume[];
}

/** Container App container definition. */
export interface Container {
  /** Container image tag. */
  image?: string;
  /** Custom container name. */
  name?: string;
  /** Container start command. */
  command?: string[];
  /** Container start command arguments. */
  args?: string[];
  /** Container environment variables. */
  env?: EnvironmentVar[];
  /** Container resource requirements. */
  resources?: ContainerResources;
  /** List of probes for the container. */
  probes?: ContainerAppProbe[];
  /** Container volume mounts. */
  volumeMounts?: VolumeMount[];
}

/** Container App container environment variable. */
export interface EnvironmentVar {
  /** Environment variable name. */
  name?: string;
  /** Non-secret environment variable value. */
  value?: string;
  /** Name of the Container App secret from which to pull the environment variable value. */
  secretRef?: string;
}

/** Container App container resource requirements. */
export interface ContainerResources {
  /** Required CPU in cores, e.g. 0.5 */
  cpu?: number;
  /** Required memory, e.g. "250Mb" */
  memory?: string;
  /**
   * Ephemeral Storage, e.g. "1Gi"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ephemeralStorage?: string;
}

/** Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic. */
export interface ContainerAppProbe {
  /** Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1. Maximum value is 10. */
  failureThreshold?: number;
  /** HTTPGet specifies the http request to perform. */
  httpGet?: ContainerAppProbeHttpGet;
  /** Number of seconds after the container has started before liveness probes are initiated. Minimum value is 1. Maximum value is 60. */
  initialDelaySeconds?: number;
  /** How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value is 240. */
  periodSeconds?: number;
  /** Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1. Maximum value is 10. */
  successThreshold?: number;
  /** TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported. */
  tcpSocket?: ContainerAppProbeTcpSocket;
  /** Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is an alpha field and requires enabling ProbeTerminationGracePeriod feature gate. Maximum value is 3600 seconds (1 hour) */
  terminationGracePeriodSeconds?: number;
  /** Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 240. */
  timeoutSeconds?: number;
  /** The type of probe. */
  type?: Type;
}

/** HTTPGet specifies the http request to perform. */
export interface ContainerAppProbeHttpGet {
  /** Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead. */
  host?: string;
  /** Custom headers to set in the request. HTTP allows repeated headers. */
  httpHeaders?: ContainerAppProbeHttpGetHttpHeadersItem[];
  /** Path to access on the HTTP server. */
  path?: string;
  /** Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. */
  port: number;
  /** Scheme to use for connecting to the host. Defaults to HTTP. */
  scheme?: string;
}

/** HTTPHeader describes a custom header to be used in HTTP probes */
export interface ContainerAppProbeHttpGetHttpHeadersItem {
  /** The header field name */
  name: string;
  /** The header field value */
  value: string;
}

/** TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported. */
export interface ContainerAppProbeTcpSocket {
  /** Optional: Host name to connect to, defaults to the pod IP. */
  host?: string;
  /** Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. */
  port: number;
}

/** Volume mount for the Container App. */
export interface VolumeMount {
  /** This must match the Name of a Volume. */
  volumeName?: string;
  /** Path within the container at which the volume should be mounted.Must not contain ':'. */
  mountPath?: string;
}

/** Container App scaling configurations. */
export interface Scale {
  /** Optional. Minimum number of container replicas. */
  minReplicas?: number;
  /** Optional. Maximum number of container replicas. Defaults to 10 if not set. */
  maxReplicas?: number;
  /** Scaling rules. */
  rules?: ScaleRule[];
}

/** Container App container scaling rule. */
export interface ScaleRule {
  /** Scale Rule Name */
  name?: string;
  /** Azure Queue based scaling. */
  azureQueue?: QueueScaleRule;
  /** Custom scale rule. */
  custom?: CustomScaleRule;
  /** HTTP requests based scaling. */
  http?: HttpScaleRule;
}

/** Container App container Azure Queue based scaling rule. */
export interface QueueScaleRule {
  /** Queue name. */
  queueName?: string;
  /** Queue length. */
  queueLength?: number;
  /** Authentication secrets for the queue scale rule. */
  auth?: ScaleRuleAuth[];
}

/** Auth Secrets for Container App Scale Rule */
export interface ScaleRuleAuth {
  /** Name of the Container App secret from which to pull the auth params. */
  secretRef?: string;
  /** Trigger Parameter that uses the secret */
  triggerParameter?: string;
}

/** Container App container Custom scaling rule. */
export interface CustomScaleRule {
  /**
   * Type of the custom scale rule
   * eg: azure-servicebus, redis etc.
   */
  type?: string;
  /** Metadata properties to describe custom scale rule. */
  metadata?: { [propertyName: string]: string };
  /** Authentication secrets for the custom scale rule. */
  auth?: ScaleRuleAuth[];
}

/** Container App container Custom scaling rule. */
export interface HttpScaleRule {
  /** Metadata properties to describe http scale rule. */
  metadata?: { [propertyName: string]: string };
  /** Authentication secrets for the custom scale rule. */
  auth?: ScaleRuleAuth[];
}

/** Volume definitions for the Container App. */
export interface Volume {
  /** Volume name. */
  name?: string;
  /** Storage type for the volume. If not provided, use EmptyDir. */
  storageType?: StorageType;
  /** Name of storage resource. No need to provide for EmptyDir. */
  storageName?: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** App Service error response. */
export interface DefaultErrorResponse {
  /**
   * Error model.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly error?: DefaultErrorResponseError;
}

/** Error model. */
export interface DefaultErrorResponseError {
  /**
   * Standardized string to programmatically identify the error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * Detailed error description and debugging information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * Detailed error description and debugging information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /** Details or the error */
  details?: DefaultErrorResponseErrorDetailsItem[];
  /**
   * More information to debug error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly innererror?: string;
}

/** Detailed errors. */
export interface DefaultErrorResponseErrorDetailsItem {
  /**
   * Standardized string to programmatically identify the error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * Detailed error description and debugging information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * Detailed error description and debugging information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
}

/** Container App Patch. */
export interface ContainerAppPatch {
  /** Application-specific metadata in the form of key-value pairs. */
  tags?: { [propertyName: string]: string };
}

/** Container App Secrets Collection ARM resource. */
export interface SecretsCollection {
  /** Collection of resources. */
  value: ContainerAppSecret[];
}

/** Container App Secret. */
export interface ContainerAppSecret {
  /**
   * Secret Name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Secret Value.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: string;
}

/** Container App Revisions collection ARM resource. */
export interface RevisionCollection {
  /** Collection of resources. */
  value: Revision[];
  /**
   * Link to next page of resources.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Container object under Container App Revision Replica. */
export interface ReplicaContainer {
  /** The Name of the Container */
  name?: string;
  /** The Id of the Container */
  containerId?: string;
  /** The container ready status */
  ready?: boolean;
  /** The container start status */
  started?: boolean;
  /** The container restart count */
  restartCount?: number;
}

/** Container App Revision Replicas collection ARM resource. */
export interface ReplicaCollection {
  /** Collection of resources. */
  value: Replica[];
}

/** Collection of Environments */
export interface ManagedEnvironmentsCollection {
  /** Collection of resources. */
  value: ManagedEnvironment[];
  /**
   * Link to next page of resources.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Configuration properties for apps environment to join a Virtual Network */
export interface VnetConfiguration {
  /** Boolean indicating the environment only has an internal load balancer. These environments do not have a public static IP resource, must provide ControlPlaneSubnetResourceId and AppSubnetResourceId if enabling this property */
  internal?: boolean;
  /** Resource ID of a subnet for infrastructure components. This subnet must be in the same VNET as the subnet defined in runtimeSubnetId. Must not overlap with any other provided IP ranges. */
  infrastructureSubnetId?: string;
  /** Resource ID of a subnet that Container App containers are injected into. This subnet must be in the same VNET as the subnet defined in infrastructureSubnetId. Must not overlap with any other provided IP ranges. */
  runtimeSubnetId?: string;
  /** CIDR notation IP range assigned to the Docker bridge, network. Must not overlap with any other provided IP ranges. */
  dockerBridgeCidr?: string;
  /** IP range in CIDR notation that can be reserved for environment infrastructure IP addresses. Must not overlap with any other provided IP ranges. */
  platformReservedCidr?: string;
  /**  An IP address from the IP range defined by platformReservedCidr that will be reserved for the internal DNS server. */
  platformReservedDnsIP?: string;
}

/** Configuration of application logs */
export interface AppLogsConfiguration {
  /** Logs destination */
  destination?: string;
  /** Log Analytics configuration */
  logAnalyticsConfiguration?: LogAnalyticsConfiguration;
}

/** Log analytics configuration */
export interface LogAnalyticsConfiguration {
  /** Log analytics customer id */
  customerId?: string;
  /** Log analytics customer key */
  sharedKey?: string;
}

/** An environment for hosting container apps */
export interface ManagedEnvironmentPatch {
  /** Application-specific metadata in the form of key-value pairs. */
  tags?: { [propertyName: string]: string };
}

/** Collection of Certificates. */
export interface CertificateCollection {
  /** Collection of resources. */
  value: Certificate[];
  /**
   * Link to next page of resources.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Certificate resource specific properties */
export interface CertificateProperties {
  /**
   * Provisioning state of the certificate.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: CertificateProvisioningState;
  /** Certificate password. */
  password?: string;
  /**
   * Subject name of the certificate.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly subjectName?: string;
  /** PFX or PEM blob */
  value?: Uint8Array;
  /**
   * Certificate issuer.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly issuer?: string;
  /**
   * Certificate issue Date.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly issueDate?: Date;
  /**
   * Certificate expiration date.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly expirationDate?: Date;
  /**
   * Certificate thumbprint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly thumbprint?: string;
  /**
   * Is the certificate valid?.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly valid?: boolean;
  /**
   * Public key hash.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly publicKeyHash?: string;
}

/** A certificate to update */
export interface CertificatePatch {
  /** Application-specific metadata in the form of key-value pairs. */
  tags?: { [propertyName: string]: string };
}

/** Available operations of the service */
export interface AvailableOperations {
  /** Collection of available operation details */
  value?: OperationDetail[];
  /**
   * URL client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/** Operation detail payload */
export interface OperationDetail {
  /** Name of the operation */
  name?: string;
  /** Indicates whether the operation is a data action */
  isDataAction?: boolean;
  /** Display of the operation */
  display?: OperationDisplay;
  /** Origin of the operation */
  origin?: string;
}

/** Operation display payload */
export interface OperationDisplay {
  /** Resource provider of the operation */
  provider?: string;
  /** Resource of the operation */
  resource?: string;
  /** Localized friendly name for the operation */
  operation?: string;
  /** Localized friendly description for the operation */
  description?: string;
}

/** SourceControl collection ARM resource. */
export interface SourceControlCollection {
  /** Collection of resources. */
  value: SourceControl[];
  /**
   * Link to next page of resources.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Configuration properties that define the mutable settings of a Container App SourceControl */
export interface GithubActionConfiguration {
  /** Registry configurations. */
  registryInfo?: RegistryInfo;
  /** AzureCredentials configurations. */
  azureCredentials?: AzureCredentials;
  /** Docker file path */
  dockerfilePath?: string;
  /** Code or Image */
  publishType?: string;
  /** Operation system */
  os?: string;
  /** Runtime stack */
  runtimeStack?: string;
  /** Runtime Version */
  runtimeVersion?: string;
}

/** Container App registry information. */
export interface RegistryInfo {
  /** registry server Url. */
  registryUrl?: string;
  /** registry username. */
  registryUserName?: string;
  /** registry secret. */
  registryPassword?: string;
}

/** Container App credentials. */
export interface AzureCredentials {
  /** Client Id. */
  clientId?: string;
  /** Client Secret. */
  clientSecret?: string;
  /** Tenant Id. */
  tenantId?: string;
  /** Subscription Id. */
  subscriptionId?: string;
}

/** Dapr Components ARM resource. */
export interface DaprComponentsCollection {
  /** Collection of resources. */
  value: DaprComponent[];
  /**
   * Link to next page of resources.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Dapr component metadata. */
export interface DaprMetadata {
  /** Metadata property name. */
  name?: string;
  /** Metadata property value. */
  value?: string;
  /** Name of the Dapr Component secret from which to pull the metadata property value. */
  secretRef?: string;
}

/** AuthConfig collection ARM resource. */
export interface AuthConfigCollection {
  /** Collection of resources. */
  value: AuthConfig[];
  /**
   * Link to next page of resources.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The configuration settings of the platform of ContainerApp Service Authentication/Authorization. */
export interface AuthPlatform {
  /** <code>true</code> if the Authentication / Authorization feature is enabled for the current app; otherwise, <code>false</code>. */
  enabled?: boolean;
  /**
   * The RuntimeVersion of the Authentication / Authorization feature in use for the current app.
   * The setting in this value can control the behavior of certain features in the Authentication / Authorization module.
   */
  runtimeVersion?: string;
}

/** The configuration settings that determines the validation flow of users using ContainerApp Service Authentication/Authorization. */
export interface GlobalValidation {
  /** The action to take when an unauthenticated client attempts to access the app. */
  unauthenticatedClientAction?: UnauthenticatedClientActionV2;
  /**
   * The default authentication provider to use when multiple providers are configured.
   * This setting is only needed if multiple providers are configured and the unauthenticated client
   * action is set to "RedirectToLoginPage".
   */
  redirectToProvider?: string;
  /** The paths for which unauthenticated flow would not be redirected to the login page. */
  excludedPaths?: string[];
}

/** The configuration settings of each of the identity providers used to configure ContainerApp Service Authentication/Authorization. */
export interface IdentityProviders {
  /** The configuration settings of the Azure Active directory provider. */
  azureActiveDirectory?: AzureActiveDirectory;
  /** The configuration settings of the Facebook provider. */
  facebook?: Facebook;
  /** The configuration settings of the GitHub provider. */
  gitHub?: GitHub;
  /** The configuration settings of the Google provider. */
  google?: Google;
  /** The configuration settings of the Twitter provider. */
  twitter?: Twitter;
  /** The configuration settings of the Apple provider. */
  apple?: Apple;
  /** The configuration settings of the Azure Static Web Apps provider. */
  azureStaticWebApps?: AzureStaticWebApps;
  /**
   * The map of the name of the alias of each custom Open ID Connect provider to the
   * configuration settings of the custom Open ID Connect provider.
   */
  customOpenIdConnectProviders?: {
    [propertyName: string]: CustomOpenIdConnectProvider;
  };
}

/** The configuration settings of the Azure Active directory provider. */
export interface AzureActiveDirectory {
  /** <code>false</code> if the Azure Active Directory provider should not be enabled despite the set registration; otherwise, <code>true</code>. */
  enabled?: boolean;
  /** The configuration settings of the Azure Active Directory app registration. */
  registration?: AzureActiveDirectoryRegistration;
  /** The configuration settings of the Azure Active Directory login flow. */
  login?: AzureActiveDirectoryLogin;
  /** The configuration settings of the Azure Active Directory token validation flow. */
  validation?: AzureActiveDirectoryValidation;
  /**
   * Gets a value indicating whether the Azure AD configuration was auto-provisioned using 1st party tooling.
   * This is an internal flag primarily intended to support the Azure Management Portal. Users should not
   * read or write to this property.
   */
  isAutoProvisioned?: boolean;
}

/** The configuration settings of the Azure Active Directory app registration. */
export interface AzureActiveDirectoryRegistration {
  /**
   * The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.
   * When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://login.microsoftonline.com/v2.0/{tenant-guid}/.
   * This URI is a case-sensitive identifier for the token issuer.
   * More information on OpenID Connect Discovery: http://openid.net/specs/openid-connect-discovery-1_0.html
   */
  openIdIssuer?: string;
  /**
   * The Client ID of this relying party application, known as the client_id.
   * This setting is required for enabling OpenID Connection authentication with Azure Active Directory or
   * other 3rd party OpenID Connect providers.
   * More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html
   */
  clientId?: string;
  /** The app setting name that contains the client secret of the relying party application. */
  clientSecretSettingName?: string;
  /**
   * An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as
   * a replacement for the Client Secret. It is also optional.
   */
  clientSecretCertificateThumbprint?: string;
  /**
   * An alternative to the client secret thumbprint, that is the subject alternative name of a certificate used for signing purposes. This property acts as
   * a replacement for the Client Secret Certificate Thumbprint. It is also optional.
   */
  clientSecretCertificateSubjectAlternativeName?: string;
  /**
   * An alternative to the client secret thumbprint, that is the issuer of a certificate used for signing purposes. This property acts as
   * a replacement for the Client Secret Certificate Thumbprint. It is also optional.
   */
  clientSecretCertificateIssuer?: string;
}

/** The configuration settings of the Azure Active Directory login flow. */
export interface AzureActiveDirectoryLogin {
  /**
   * Login parameters to send to the OpenID Connect authorization endpoint when
   * a user logs in. Each parameter must be in the form "key=value".
   */
  loginParameters?: string[];
  /** <code>true</code> if the www-authenticate provider should be omitted from the request; otherwise, <code>false</code>. */
  disableWWWAuthenticate?: boolean;
}

/** The configuration settings of the Azure Active Directory token validation flow. */
export interface AzureActiveDirectoryValidation {
  /** The configuration settings of the checks that should be made while validating the JWT Claims. */
  jwtClaimChecks?: JwtClaimChecks;
  /** The list of audiences that can make successful authentication/authorization requests. */
  allowedAudiences?: string[];
  /** The configuration settings of the default authorization policy. */
  defaultAuthorizationPolicy?: DefaultAuthorizationPolicy;
}

/** The configuration settings of the checks that should be made while validating the JWT Claims. */
export interface JwtClaimChecks {
  /** The list of the allowed groups. */
  allowedGroups?: string[];
  /** The list of the allowed client applications. */
  allowedClientApplications?: string[];
}

/** The configuration settings of the Azure Active Directory default authorization policy. */
export interface DefaultAuthorizationPolicy {
  /** The configuration settings of the Azure Active Directory allowed principals. */
  allowedPrincipals?: AllowedPrincipals;
  /** The configuration settings of the Azure Active Directory allowed applications. */
  allowedApplications?: string[];
}

/** The configuration settings of the Azure Active Directory allowed principals. */
export interface AllowedPrincipals {
  /** The list of the allowed groups. */
  groups?: string[];
  /** The list of the allowed identities. */
  identities?: string[];
}

/** The configuration settings of the Facebook provider. */
export interface Facebook {
  /** <code>false</code> if the Facebook provider should not be enabled despite the set registration; otherwise, <code>true</code>. */
  enabled?: boolean;
  /** The configuration settings of the app registration for the Facebook provider. */
  registration?: AppRegistration;
  /** The version of the Facebook api to be used while logging in. */
  graphApiVersion?: string;
  /** The configuration settings of the login flow. */
  login?: LoginScopes;
}

/** The configuration settings of the app registration for providers that have app ids and app secrets */
export interface AppRegistration {
  /** The App ID of the app used for login. */
  appId?: string;
  /** The app setting name that contains the app secret. */
  appSecretSettingName?: string;
}

/** The configuration settings of the login flow, including the scopes that should be requested. */
export interface LoginScopes {
  /** A list of the scopes that should be requested while authenticating. */
  scopes?: string[];
}

/** The configuration settings of the GitHub provider. */
export interface GitHub {
  /** <code>false</code> if the GitHub provider should not be enabled despite the set registration; otherwise, <code>true</code>. */
  enabled?: boolean;
  /** The configuration settings of the app registration for the GitHub provider. */
  registration?: ClientRegistration;
  /** The configuration settings of the login flow. */
  login?: LoginScopes;
}

/** The configuration settings of the app registration for providers that have client ids and client secrets */
export interface ClientRegistration {
  /** The Client ID of the app used for login. */
  clientId?: string;
  /** The app setting name that contains the client secret. */
  clientSecretSettingName?: string;
}

/** The configuration settings of the Google provider. */
export interface Google {
  /** <code>false</code> if the Google provider should not be enabled despite the set registration; otherwise, <code>true</code>. */
  enabled?: boolean;
  /** The configuration settings of the app registration for the Google provider. */
  registration?: ClientRegistration;
  /** The configuration settings of the login flow. */
  login?: LoginScopes;
  /** The configuration settings of the Azure Active Directory token validation flow. */
  validation?: AllowedAudiencesValidation;
}

/** The configuration settings of the Allowed Audiences validation flow. */
export interface AllowedAudiencesValidation {
  /** The configuration settings of the allowed list of audiences from which to validate the JWT token. */
  allowedAudiences?: string[];
}

/** The configuration settings of the Twitter provider. */
export interface Twitter {
  /** <code>false</code> if the Twitter provider should not be enabled despite the set registration; otherwise, <code>true</code>. */
  enabled?: boolean;
  /** The configuration settings of the app registration for the Twitter provider. */
  registration?: TwitterRegistration;
}

/** The configuration settings of the app registration for the Twitter provider. */
export interface TwitterRegistration {
  /**
   * The OAuth 1.0a consumer key of the Twitter application used for sign-in.
   * This setting is required for enabling Twitter Sign-In.
   * Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
   */
  consumerKey?: string;
  /**
   * The app setting name that contains the OAuth 1.0a consumer secret of the Twitter
   * application used for sign-in.
   */
  consumerSecretSettingName?: string;
}

/** The configuration settings of the Apple provider. */
export interface Apple {
  /** <code>false</code> if the Apple provider should not be enabled despite the set registration; otherwise, <code>true</code>. */
  enabled?: boolean;
  /** The configuration settings of the Apple registration. */
  registration?: AppleRegistration;
  /** The configuration settings of the login flow. */
  login?: LoginScopes;
}

/** The configuration settings of the registration for the Apple provider */
export interface AppleRegistration {
  /** The Client ID of the app used for login. */
  clientId?: string;
  /** The app setting name that contains the client secret. */
  clientSecretSettingName?: string;
}

/** The configuration settings of the Azure Static Web Apps provider. */
export interface AzureStaticWebApps {
  /** <code>false</code> if the Azure Static Web Apps provider should not be enabled despite the set registration; otherwise, <code>true</code>. */
  enabled?: boolean;
  /** The configuration settings of the Azure Static Web Apps registration. */
  registration?: AzureStaticWebAppsRegistration;
}

/** The configuration settings of the registration for the Azure Static Web Apps provider */
export interface AzureStaticWebAppsRegistration {
  /** The Client ID of the app used for login. */
  clientId?: string;
}

/** The configuration settings of the custom Open ID Connect provider. */
export interface CustomOpenIdConnectProvider {
  /** <code>false</code> if the custom Open ID provider provider should not be enabled; otherwise, <code>true</code>. */
  enabled?: boolean;
  /** The configuration settings of the app registration for the custom Open ID Connect provider. */
  registration?: OpenIdConnectRegistration;
  /** The configuration settings of the login flow of the custom Open ID Connect provider. */
  login?: OpenIdConnectLogin;
}

/** The configuration settings of the app registration for the custom Open ID Connect provider. */
export interface OpenIdConnectRegistration {
  /** The client id of the custom Open ID Connect provider. */
  clientId?: string;
  /** The authentication credentials of the custom Open ID Connect provider. */
  clientCredential?: OpenIdConnectClientCredential;
  /** The configuration settings of the endpoints used for the custom Open ID Connect provider. */
  openIdConnectConfiguration?: OpenIdConnectConfig;
}

/** The authentication client credentials of the custom Open ID Connect provider. */
export interface OpenIdConnectClientCredential {
  /** The method that should be used to authenticate the user. */
  method?: "ClientSecretPost";
  /** The app setting that contains the client secret for the custom Open ID Connect provider. */
  clientSecretSettingName?: string;
}

/** The configuration settings of the endpoints used for the custom Open ID Connect provider. */
export interface OpenIdConnectConfig {
  /** The endpoint to be used to make an authorization request. */
  authorizationEndpoint?: string;
  /** The endpoint to be used to request a token. */
  tokenEndpoint?: string;
  /** The endpoint that issues the token. */
  issuer?: string;
  /** The endpoint that provides the keys necessary to validate the token. */
  certificationUri?: string;
  /** The endpoint that contains all the configuration endpoints for the provider. */
  wellKnownOpenIdConfiguration?: string;
}

/** The configuration settings of the login flow of the custom Open ID Connect provider. */
export interface OpenIdConnectLogin {
  /** The name of the claim that contains the users name. */
  nameClaimType?: string;
  /** A list of the scopes that should be requested while authenticating. */
  scopes?: string[];
}

/** The configuration settings of the login flow of users using ContainerApp Service Authentication/Authorization. */
export interface Login {
  /** The routes that specify the endpoints used for login and logout requests. */
  routes?: LoginRoutes;
  /** <code>true</code> if the fragments from the request are preserved after the login request is made; otherwise, <code>false</code>. */
  preserveUrlFragmentsForLogins?: boolean;
  /**
   * External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored.
   * This is an advanced setting typically only needed by Windows Store application backends.
   * Note that URLs within the current domain are always implicitly allowed.
   */
  allowedExternalRedirectUrls?: string[];
  /** The configuration settings of the session cookie's expiration. */
  cookieExpiration?: CookieExpiration;
  /** The configuration settings of the nonce used in the login flow. */
  nonce?: Nonce;
}

/** The routes that specify the endpoints used for login and logout requests. */
export interface LoginRoutes {
  /** The endpoint at which a logout request should be made. */
  logoutEndpoint?: string;
}

/** The configuration settings of the session cookie's expiration. */
export interface CookieExpiration {
  /** The convention used when determining the session cookie's expiration. */
  convention?: CookieExpirationConvention;
  /** The time after the request is made when the session cookie should expire. */
  timeToExpiration?: string;
}

/** The configuration settings of the nonce used in the login flow. */
export interface Nonce {
  /** <code>false</code> if the nonce should not be validated while completing the login flow; otherwise, <code>true</code>. */
  validateNonce?: boolean;
  /** The time after the request is made when the nonce should expire. */
  nonceExpirationInterval?: string;
}

/** The configuration settings of the HTTP requests for authentication and authorization requests made against ContainerApp Service Authentication/Authorization. */
export interface HttpSettings {
  /** <code>false</code> if the authentication/authorization responses not having the HTTPS scheme are permissible; otherwise, <code>true</code>. */
  requireHttps?: boolean;
  /** The configuration settings of the paths HTTP requests. */
  routes?: HttpSettingsRoutes;
  /** The configuration settings of a forward proxy used to make the requests. */
  forwardProxy?: ForwardProxy;
}

/** The configuration settings of the paths HTTP requests. */
export interface HttpSettingsRoutes {
  /** The prefix that should precede all the authentication/authorization paths. */
  apiPrefix?: string;
}

/** The configuration settings of a forward proxy used to make the requests. */
export interface ForwardProxy {
  /** The convention used to determine the url of the request made. */
  convention?: ForwardProxyConvention;
  /** The name of the header containing the host of the request. */
  customHostHeaderName?: string;
  /** The name of the header containing the scheme of the request. */
  customProtoHeaderName?: string;
}

/** Collection of Storage for Environments */
export interface ManagedEnvironmentStoragesCollection {
  /** Collection of storage resources. */
  value: ManagedEnvironmentStorage[];
}

/** Storage properties */
export interface ManagedEnvironmentStorageProperties {
  /** Azure file properties */
  azureFile?: AzureFileProperties;
}

/** Azure File Properties. */
export interface AzureFileProperties {
  /** Storage account name for azure file. */
  accountName?: string;
  /** Storage account key for azure file. */
  accountKey?: string;
  /** Access mode for storage */
  accessMode?: AccessMode;
  /** Azure file share name. */
  shareName?: string;
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export type TrackedResource = Resource & {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
};

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export type ProxyResource = Resource & {};

/** Container App. */
export type ContainerApp = TrackedResource & {
  /** managed identities for the Container App to interact with other Azure services without maintaining any secrets or credentials in code. */
  identity?: ManagedServiceIdentity;
  /**
   * Provisioning state of the Container App.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ContainerAppProvisioningState;
  /** Resource ID of the Container App's environment. */
  managedEnvironmentId?: string;
  /**
   * Name of the latest revision of the Container App.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly latestRevisionName?: string;
  /**
   * Fully Qualified Domain Name of the latest revision of the Container App.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly latestRevisionFqdn?: string;
  /**
   * Id used to verify domain name ownership
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly customDomainVerificationId?: string;
  /** Non versioned Container App configuration properties. */
  configuration?: Configuration;
  /** Container App versioned application definition. */
  template?: Template;
  /**
   * Outbound IP Addresses for container app.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly outboundIPAddresses?: string[];
};

/** An environment for hosting container apps */
export type ManagedEnvironment = TrackedResource & {
  /**
   * Provisioning state of the Environment.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: EnvironmentProvisioningState;
  /** Azure Monitor instrumentation key used by Dapr to export Service to Service communication telemetry */
  daprAIInstrumentationKey?: string;
  /** Vnet configuration for the environment */
  vnetConfiguration?: VnetConfiguration;
  /**
   * Any errors that occurred during deployment or deployment validation
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly deploymentErrors?: string;
  /**
   * Default Domain Name for the cluster
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly defaultDomain?: string;
  /**
   * Static IP of the Environment
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly staticIp?: string;
  /**
   * Cluster configuration which enables the log daemon to export
   * app logs to a destination. Currently only "log-analytics" is
   * supported
   */
  appLogsConfiguration?: AppLogsConfiguration;
};

/** Certificate used for Custom Domain bindings of Container Apps in a Managed Environment */
export type Certificate = TrackedResource & {
  /** Certificate resource specific properties */
  properties?: CertificateProperties;
};

/** Custom domain analysis. */
export type CustomHostnameAnalysisResult = ProxyResource & {
  /**
   * Host name that was analyzed
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hostName?: string;
  /**
   * <code>true</code> if hostname is already verified; otherwise, <code>false</code>.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isHostnameAlreadyVerified?: boolean;
  /**
   * DNS verification test result.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly customDomainVerificationTest?: DnsVerificationTestResult;
  /**
   * Raw failure information if DNS verification fails.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly customDomainVerificationFailureInfo?: DefaultErrorResponse;
  /**
   * <code>true</code> if there is a conflict on the Container App's managed environment; otherwise, <code>false</code>.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hasConflictOnManagedEnvironment?: boolean;
  /**
   * Name of the conflicting Container App on the Managed Environment if it's within the same subscription.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly conflictingContainerAppResourceId?: string;
  /** CName records visible for this hostname. */
  cNameRecords?: string[];
  /** TXT records visible for this hostname. */
  txtRecords?: string[];
  /** A records visible for this hostname. */
  aRecords?: string[];
  /** Alternate CName records visible for this hostname. */
  alternateCNameRecords?: string[];
  /** Alternate TXT records visible for this hostname. */
  alternateTxtRecords?: string[];
};

/** Container App Revision. */
export type Revision = ProxyResource & {
  /**
   * Timestamp describing when the revision was created
   * by controller
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdTime?: Date;
  /**
   * Fully qualified domain name of the revision
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fqdn?: string;
  /**
   * Container App Revision Template with all possible settings and the
   * defaults if user did not provide them. The defaults are populated
   * as they were at the creation time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly template?: Template;
  /**
   * Boolean describing if the Revision is Active
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly active?: boolean;
  /**
   * Number of pods currently running for this revision
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly replicas?: number;
  /**
   * Traffic weight assigned to this revision
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly trafficWeight?: number;
  /**
   * Optional Field - Platform Error Message
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningError?: string;
  /**
   * Current health State of the revision
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly healthState?: RevisionHealthState;
  /**
   * Current provisioning State of the revision
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: RevisionProvisioningState;
};

/** Container App Revision Replica. */
export type Replica = ProxyResource & {
  /**
   * Timestamp describing when the pod was created by controller
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdTime?: Date;
  /** The containers collection under a replica. */
  containers?: ReplicaContainer[];
};

/** Container App SourceControl. */
export type SourceControl = ProxyResource & {
  /**
   * Current provisioning State of the operation
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operationState?: SourceControlOperationState;
  /** The repo url which will be integrated to ContainerApp. */
  repoUrl?: string;
  /** The branch which will trigger the auto deployment */
  branch?: string;
  /**
   * Container App Revision Template with all possible settings and the
   * defaults if user did not provide them. The defaults are populated
   * as they were at the creation time
   */
  githubActionConfiguration?: GithubActionConfiguration;
};

/** Dapr Component. */
export type DaprComponent = ProxyResource & {
  /** Component type */
  componentType?: string;
  /** Component version */
  version?: string;
  /** Boolean describing if the component errors are ignores */
  ignoreErrors?: boolean;
  /** Initialization timeout */
  initTimeout?: string;
  /** Collection of secrets used by a Dapr component */
  secrets?: Secret[];
  /** Component metadata */
  metadata?: DaprMetadata[];
  /** Names of container apps that can use this Dapr component */
  scopes?: string[];
};

/** Configuration settings for the Azure ContainerApp Service Authentication / Authorization feature. */
export type AuthConfig = ProxyResource & {
  /** The configuration settings of the platform of ContainerApp Service Authentication/Authorization. */
  platform?: AuthPlatform;
  /** The configuration settings that determines the validation flow of users using  Service Authentication/Authorization. */
  globalValidation?: GlobalValidation;
  /** The configuration settings of each of the identity providers used to configure ContainerApp Service Authentication/Authorization. */
  identityProviders?: IdentityProviders;
  /** The configuration settings of the login flow of users using ContainerApp Service Authentication/Authorization. */
  login?: Login;
  /** The configuration settings of the HTTP requests for authentication and authorization requests made against ContainerApp Service Authentication/Authorization. */
  httpSettings?: HttpSettings;
};

/** Storage resource for managedEnvironment. */
export type ManagedEnvironmentStorage = ProxyResource & {
  /** Storage properties */
  properties?: ManagedEnvironmentStorageProperties;
};

/** Known values of {@link ManagedServiceIdentityType} that the service accepts. */
export enum KnownManagedServiceIdentityType {
  None = "None",
  SystemAssigned = "SystemAssigned",
  UserAssigned = "UserAssigned",
  SystemAssignedUserAssigned = "SystemAssigned,UserAssigned"
}

/**
 * Defines values for ManagedServiceIdentityType. \
 * {@link KnownManagedServiceIdentityType} can be used interchangeably with ManagedServiceIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAssigned,UserAssigned**
 */
export type ManagedServiceIdentityType = string;

/** Known values of {@link ContainerAppProvisioningState} that the service accepts. */
export enum KnownContainerAppProvisioningState {
  InProgress = "InProgress",
  Succeeded = "Succeeded",
  Failed = "Failed",
  Canceled = "Canceled"
}

/**
 * Defines values for ContainerAppProvisioningState. \
 * {@link KnownContainerAppProvisioningState} can be used interchangeably with ContainerAppProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **InProgress** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled**
 */
export type ContainerAppProvisioningState = string;

/** Known values of {@link ActiveRevisionsMode} that the service accepts. */
export enum KnownActiveRevisionsMode {
  Multiple = "multiple",
  Single = "single"
}

/**
 * Defines values for ActiveRevisionsMode. \
 * {@link KnownActiveRevisionsMode} can be used interchangeably with ActiveRevisionsMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **multiple** \
 * **single**
 */
export type ActiveRevisionsMode = string;

/** Known values of {@link IngressTransportMethod} that the service accepts. */
export enum KnownIngressTransportMethod {
  Auto = "auto",
  Http = "http",
  Http2 = "http2"
}

/**
 * Defines values for IngressTransportMethod. \
 * {@link KnownIngressTransportMethod} can be used interchangeably with IngressTransportMethod,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **auto** \
 * **http** \
 * **http2**
 */
export type IngressTransportMethod = string;

/** Known values of {@link BindingType} that the service accepts. */
export enum KnownBindingType {
  Disabled = "Disabled",
  SniEnabled = "SniEnabled"
}

/**
 * Defines values for BindingType. \
 * {@link KnownBindingType} can be used interchangeably with BindingType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **SniEnabled**
 */
export type BindingType = string;

/** Known values of {@link AppProtocol} that the service accepts. */
export enum KnownAppProtocol {
  Http = "http",
  Grpc = "grpc"
}

/**
 * Defines values for AppProtocol. \
 * {@link KnownAppProtocol} can be used interchangeably with AppProtocol,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **http** \
 * **grpc**
 */
export type AppProtocol = string;

/** Known values of {@link Type} that the service accepts. */
export enum KnownType {
  Liveness = "liveness",
  Readiness = "readiness",
  Startup = "startup"
}

/**
 * Defines values for Type. \
 * {@link KnownType} can be used interchangeably with Type,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **liveness** \
 * **readiness** \
 * **startup**
 */
export type Type = string;

/** Known values of {@link StorageType} that the service accepts. */
export enum KnownStorageType {
  AzureFile = "AzureFile",
  EmptyDir = "EmptyDir"
}

/**
 * Defines values for StorageType. \
 * {@link KnownStorageType} can be used interchangeably with StorageType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AzureFile** \
 * **EmptyDir**
 */
export type StorageType = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  User = "User",
  Application = "Application",
  ManagedIdentity = "ManagedIdentity",
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link RevisionHealthState} that the service accepts. */
export enum KnownRevisionHealthState {
  Healthy = "Healthy",
  Unhealthy = "Unhealthy",
  None = "None"
}

/**
 * Defines values for RevisionHealthState. \
 * {@link KnownRevisionHealthState} can be used interchangeably with RevisionHealthState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Healthy** \
 * **Unhealthy** \
 * **None**
 */
export type RevisionHealthState = string;

/** Known values of {@link RevisionProvisioningState} that the service accepts. */
export enum KnownRevisionProvisioningState {
  Provisioning = "Provisioning",
  Provisioned = "Provisioned",
  Failed = "Failed",
  Deprovisioning = "Deprovisioning",
  Deprovisioned = "Deprovisioned"
}

/**
 * Defines values for RevisionProvisioningState. \
 * {@link KnownRevisionProvisioningState} can be used interchangeably with RevisionProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Provisioning** \
 * **Provisioned** \
 * **Failed** \
 * **Deprovisioning** \
 * **Deprovisioned**
 */
export type RevisionProvisioningState = string;

/** Known values of {@link EnvironmentProvisioningState} that the service accepts. */
export enum KnownEnvironmentProvisioningState {
  Succeeded = "Succeeded",
  Failed = "Failed",
  Canceled = "Canceled",
  Waiting = "Waiting",
  InitializationInProgress = "InitializationInProgress",
  InfrastructureSetupInProgress = "InfrastructureSetupInProgress",
  InfrastructureSetupComplete = "InfrastructureSetupComplete",
  ScheduledForDelete = "ScheduledForDelete",
  UpgradeRequested = "UpgradeRequested",
  UpgradeFailed = "UpgradeFailed"
}

/**
 * Defines values for EnvironmentProvisioningState. \
 * {@link KnownEnvironmentProvisioningState} can be used interchangeably with EnvironmentProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Waiting** \
 * **InitializationInProgress** \
 * **InfrastructureSetupInProgress** \
 * **InfrastructureSetupComplete** \
 * **ScheduledForDelete** \
 * **UpgradeRequested** \
 * **UpgradeFailed**
 */
export type EnvironmentProvisioningState = string;

/** Known values of {@link CertificateProvisioningState} that the service accepts. */
export enum KnownCertificateProvisioningState {
  Succeeded = "Succeeded",
  Failed = "Failed",
  Canceled = "Canceled",
  DeleteFailed = "DeleteFailed",
  Pending = "Pending"
}

/**
 * Defines values for CertificateProvisioningState. \
 * {@link KnownCertificateProvisioningState} can be used interchangeably with CertificateProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **DeleteFailed** \
 * **Pending**
 */
export type CertificateProvisioningState = string;

/** Known values of {@link SourceControlOperationState} that the service accepts. */
export enum KnownSourceControlOperationState {
  InProgress = "InProgress",
  Succeeded = "Succeeded",
  Failed = "Failed",
  Canceled = "Canceled"
}

/**
 * Defines values for SourceControlOperationState. \
 * {@link KnownSourceControlOperationState} can be used interchangeably with SourceControlOperationState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **InProgress** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled**
 */
export type SourceControlOperationState = string;

/** Known values of {@link AccessMode} that the service accepts. */
export enum KnownAccessMode {
  ReadOnly = "ReadOnly",
  ReadWrite = "ReadWrite"
}

/**
 * Defines values for AccessMode. \
 * {@link KnownAccessMode} can be used interchangeably with AccessMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ReadOnly** \
 * **ReadWrite**
 */
export type AccessMode = string;
/** Defines values for DnsVerificationTestResult. */
export type DnsVerificationTestResult = "Passed" | "Failed" | "Skipped";
/** Defines values for UnauthenticatedClientActionV2. */
export type UnauthenticatedClientActionV2 =
  | "RedirectToLoginPage"
  | "AllowAnonymous"
  | "Return401"
  | "Return403";
/** Defines values for CookieExpirationConvention. */
export type CookieExpirationConvention =
  | "FixedTime"
  | "IdentityProviderDerived";
/** Defines values for ForwardProxyConvention. */
export type ForwardProxyConvention = "NoProxy" | "Standard" | "Custom";

/** Optional parameters. */
export interface ContainerAppsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type ContainerAppsListBySubscriptionResponse = ContainerAppCollection;

/** Optional parameters. */
export interface ContainerAppsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type ContainerAppsListByResourceGroupResponse = ContainerAppCollection;

/** Optional parameters. */
export interface ContainerAppsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ContainerAppsGetResponse = ContainerApp;

/** Optional parameters. */
export interface ContainerAppsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ContainerAppsCreateOrUpdateResponse = ContainerApp;

/** Optional parameters. */
export interface ContainerAppsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ContainerAppsUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type ContainerAppsUpdateResponse = ContainerApp;

/** Optional parameters. */
export interface ContainerAppsListCustomHostNameAnalysisOptionalParams
  extends coreClient.OperationOptions {
  /** Custom hostname. */
  customHostname?: string;
}

/** Contains response data for the listCustomHostNameAnalysis operation. */
export type ContainerAppsListCustomHostNameAnalysisResponse = CustomHostnameAnalysisResult;

/** Optional parameters. */
export interface ContainerAppsListSecretsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listSecrets operation. */
export type ContainerAppsListSecretsResponse = SecretsCollection;

/** Optional parameters. */
export interface ContainerAppsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type ContainerAppsListBySubscriptionNextResponse = ContainerAppCollection;

/** Optional parameters. */
export interface ContainerAppsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type ContainerAppsListByResourceGroupNextResponse = ContainerAppCollection;

/** Optional parameters. */
export interface ContainerAppsRevisionsListRevisionsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listRevisions operation. */
export type ContainerAppsRevisionsListRevisionsResponse = RevisionCollection;

/** Optional parameters. */
export interface ContainerAppsRevisionsGetRevisionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getRevision operation. */
export type ContainerAppsRevisionsGetRevisionResponse = Revision;

/** Optional parameters. */
export interface ContainerAppsRevisionsActivateRevisionOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ContainerAppsRevisionsDeactivateRevisionOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ContainerAppsRevisionsRestartRevisionOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ContainerAppsRevisionsListRevisionsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listRevisionsNext operation. */
export type ContainerAppsRevisionsListRevisionsNextResponse = RevisionCollection;

/** Optional parameters. */
export interface ContainerAppsRevisionReplicasGetReplicaOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getReplica operation. */
export type ContainerAppsRevisionReplicasGetReplicaResponse = Replica;

/** Optional parameters. */
export interface ContainerAppsRevisionReplicasListReplicasOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listReplicas operation. */
export type ContainerAppsRevisionReplicasListReplicasResponse = ReplicaCollection;

/** Optional parameters. */
export interface ManagedEnvironmentsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type ManagedEnvironmentsListBySubscriptionResponse = ManagedEnvironmentsCollection;

/** Optional parameters. */
export interface ManagedEnvironmentsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type ManagedEnvironmentsListByResourceGroupResponse = ManagedEnvironmentsCollection;

/** Optional parameters. */
export interface ManagedEnvironmentsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ManagedEnvironmentsGetResponse = ManagedEnvironment;

/** Optional parameters. */
export interface ManagedEnvironmentsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ManagedEnvironmentsCreateOrUpdateResponse = ManagedEnvironment;

/** Optional parameters. */
export interface ManagedEnvironmentsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ManagedEnvironmentsUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type ManagedEnvironmentsUpdateResponse = ManagedEnvironment;

/** Optional parameters. */
export interface ManagedEnvironmentsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type ManagedEnvironmentsListBySubscriptionNextResponse = ManagedEnvironmentsCollection;

/** Optional parameters. */
export interface ManagedEnvironmentsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type ManagedEnvironmentsListByResourceGroupNextResponse = ManagedEnvironmentsCollection;

/** Optional parameters. */
export interface CertificatesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type CertificatesListResponse = CertificateCollection;

/** Optional parameters. */
export interface CertificatesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type CertificatesGetResponse = Certificate;

/** Optional parameters. */
export interface CertificatesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Certificate to be created or updated */
  certificateEnvelope?: Certificate;
}

/** Contains response data for the createOrUpdate operation. */
export type CertificatesCreateOrUpdateResponse = Certificate;

/** Optional parameters. */
export interface CertificatesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface CertificatesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type CertificatesUpdateResponse = Certificate;

/** Optional parameters. */
export interface CertificatesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type CertificatesListNextResponse = CertificateCollection;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = AvailableOperations;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = AvailableOperations;

/** Optional parameters. */
export interface ContainerAppsSourceControlsListByContainerAppOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByContainerApp operation. */
export type ContainerAppsSourceControlsListByContainerAppResponse = SourceControlCollection;

/** Optional parameters. */
export interface ContainerAppsSourceControlsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ContainerAppsSourceControlsGetResponse = SourceControl;

/** Optional parameters. */
export interface ContainerAppsSourceControlsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ContainerAppsSourceControlsCreateOrUpdateResponse = SourceControl;

/** Optional parameters. */
export interface ContainerAppsSourceControlsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ContainerAppsSourceControlsListByContainerAppNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByContainerAppNext operation. */
export type ContainerAppsSourceControlsListByContainerAppNextResponse = SourceControlCollection;

/** Optional parameters. */
export interface DaprComponentsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type DaprComponentsListResponse = DaprComponentsCollection;

/** Optional parameters. */
export interface DaprComponentsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DaprComponentsGetResponse = DaprComponent;

/** Optional parameters. */
export interface DaprComponentsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type DaprComponentsCreateOrUpdateResponse = DaprComponent;

/** Optional parameters. */
export interface DaprComponentsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface DaprComponentsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type DaprComponentsListNextResponse = DaprComponentsCollection;

/** Optional parameters. */
export interface ContainerAppsAuthConfigsListByContainerAppOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByContainerApp operation. */
export type ContainerAppsAuthConfigsListByContainerAppResponse = AuthConfigCollection;

/** Optional parameters. */
export interface ContainerAppsAuthConfigsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ContainerAppsAuthConfigsGetResponse = AuthConfig;

/** Optional parameters. */
export interface ContainerAppsAuthConfigsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type ContainerAppsAuthConfigsCreateOrUpdateResponse = AuthConfig;

/** Optional parameters. */
export interface ContainerAppsAuthConfigsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ContainerAppsAuthConfigsListByContainerAppNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByContainerAppNext operation. */
export type ContainerAppsAuthConfigsListByContainerAppNextResponse = AuthConfigCollection;

/** Optional parameters. */
export interface ManagedEnvironmentsStoragesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ManagedEnvironmentsStoragesListResponse = ManagedEnvironmentStoragesCollection;

/** Optional parameters. */
export interface ManagedEnvironmentsStoragesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ManagedEnvironmentsStoragesGetResponse = ManagedEnvironmentStorage;

/** Optional parameters. */
export interface ManagedEnvironmentsStoragesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type ManagedEnvironmentsStoragesCreateOrUpdateResponse = ManagedEnvironmentStorage;

/** Optional parameters. */
export interface ManagedEnvironmentsStoragesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ContainerAppsAPIClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
