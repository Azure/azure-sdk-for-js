/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ContainerAppsSourceControls } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ContainerAppsAPIClient } from "../containerAppsAPIClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  SourceControl,
  ContainerAppsSourceControlsListByContainerAppNextOptionalParams,
  ContainerAppsSourceControlsListByContainerAppOptionalParams,
  ContainerAppsSourceControlsListByContainerAppResponse,
  ContainerAppsSourceControlsGetOptionalParams,
  ContainerAppsSourceControlsGetResponse,
  ContainerAppsSourceControlsCreateOrUpdateOptionalParams,
  ContainerAppsSourceControlsCreateOrUpdateResponse,
  ContainerAppsSourceControlsDeleteOptionalParams,
  ContainerAppsSourceControlsListByContainerAppNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ContainerAppsSourceControls operations. */
export class ContainerAppsSourceControlsImpl
  implements ContainerAppsSourceControls {
  private readonly client: ContainerAppsAPIClient;

  /**
   * Initialize a new instance of the class ContainerAppsSourceControls class.
   * @param client Reference to the service client
   */
  constructor(client: ContainerAppsAPIClient) {
    this.client = client;
  }

  /**
   * Get the Container App SourceControls in a given resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App.
   * @param options The options parameters.
   */
  public listByContainerApp(
    resourceGroupName: string,
    containerAppName: string,
    options?: ContainerAppsSourceControlsListByContainerAppOptionalParams
  ): PagedAsyncIterableIterator<SourceControl> {
    const iter = this.listByContainerAppPagingAll(
      resourceGroupName,
      containerAppName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByContainerAppPagingPage(
          resourceGroupName,
          containerAppName,
          options
        );
      }
    };
  }

  private async *listByContainerAppPagingPage(
    resourceGroupName: string,
    containerAppName: string,
    options?: ContainerAppsSourceControlsListByContainerAppOptionalParams
  ): AsyncIterableIterator<SourceControl[]> {
    let result = await this._listByContainerApp(
      resourceGroupName,
      containerAppName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByContainerAppNext(
        resourceGroupName,
        containerAppName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByContainerAppPagingAll(
    resourceGroupName: string,
    containerAppName: string,
    options?: ContainerAppsSourceControlsListByContainerAppOptionalParams
  ): AsyncIterableIterator<SourceControl> {
    for await (const page of this.listByContainerAppPagingPage(
      resourceGroupName,
      containerAppName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get the Container App SourceControls in a given resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App.
   * @param options The options parameters.
   */
  private _listByContainerApp(
    resourceGroupName: string,
    containerAppName: string,
    options?: ContainerAppsSourceControlsListByContainerAppOptionalParams
  ): Promise<ContainerAppsSourceControlsListByContainerAppResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, containerAppName, options },
      listByContainerAppOperationSpec
    );
  }

  /**
   * Get a SourceControl of a Container App.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App.
   * @param sourceControlName Name of the Container App SourceControl.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    containerAppName: string,
    sourceControlName: string,
    options?: ContainerAppsSourceControlsGetOptionalParams
  ): Promise<ContainerAppsSourceControlsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, containerAppName, sourceControlName, options },
      getOperationSpec
    );
  }

  /**
   * Create or update the SourceControl for a Container App.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App.
   * @param sourceControlName Name of the Container App SourceControl.
   * @param sourceControlEnvelope Properties used to create a Container App SourceControl
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    containerAppName: string,
    sourceControlName: string,
    sourceControlEnvelope: SourceControl,
    options?: ContainerAppsSourceControlsCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ContainerAppsSourceControlsCreateOrUpdateResponse>,
      ContainerAppsSourceControlsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ContainerAppsSourceControlsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        containerAppName,
        sourceControlName,
        sourceControlEnvelope,
        options
      },
      createOrUpdateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create or update the SourceControl for a Container App.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App.
   * @param sourceControlName Name of the Container App SourceControl.
   * @param sourceControlEnvelope Properties used to create a Container App SourceControl
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    containerAppName: string,
    sourceControlName: string,
    sourceControlEnvelope: SourceControl,
    options?: ContainerAppsSourceControlsCreateOrUpdateOptionalParams
  ): Promise<ContainerAppsSourceControlsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      containerAppName,
      sourceControlName,
      sourceControlEnvelope,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete a Container App SourceControl.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App.
   * @param sourceControlName Name of the Container App SourceControl.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    containerAppName: string,
    sourceControlName: string,
    options?: ContainerAppsSourceControlsDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, containerAppName, sourceControlName, options },
      deleteOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a Container App SourceControl.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App.
   * @param sourceControlName Name of the Container App SourceControl.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    containerAppName: string,
    sourceControlName: string,
    options?: ContainerAppsSourceControlsDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      containerAppName,
      sourceControlName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * ListByContainerAppNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param containerAppName Name of the Container App.
   * @param nextLink The nextLink from the previous successful call to the ListByContainerApp method.
   * @param options The options parameters.
   */
  private _listByContainerAppNext(
    resourceGroupName: string,
    containerAppName: string,
    nextLink: string,
    options?: ContainerAppsSourceControlsListByContainerAppNextOptionalParams
  ): Promise<ContainerAppsSourceControlsListByContainerAppNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, containerAppName, nextLink, options },
      listByContainerAppNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByContainerAppOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/sourcecontrols",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SourceControlCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.containerAppName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/sourcecontrols/{sourceControlName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SourceControl
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.containerAppName,
    Parameters.sourceControlName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/sourcecontrols/{sourceControlName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SourceControl
    },
    201: {
      bodyMapper: Mappers.SourceControl
    },
    202: {
      bodyMapper: Mappers.SourceControl
    },
    204: {
      bodyMapper: Mappers.SourceControl
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  requestBody: Parameters.sourceControlEnvelope,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.containerAppName,
    Parameters.sourceControlName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}/sourcecontrols/{sourceControlName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.containerAppName,
    Parameters.sourceControlName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByContainerAppNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SourceControlCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.containerAppName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
