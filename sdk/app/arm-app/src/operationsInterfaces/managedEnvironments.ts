/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  ManagedEnvironment,
  ManagedEnvironmentsListBySubscriptionOptionalParams,
  ManagedEnvironmentsListByResourceGroupOptionalParams,
  ManagedEnvironmentsGetOptionalParams,
  ManagedEnvironmentsGetResponse,
  ManagedEnvironmentsCreateOrUpdateOptionalParams,
  ManagedEnvironmentsCreateOrUpdateResponse,
  ManagedEnvironmentsDeleteOptionalParams,
  ManagedEnvironmentPatch,
  ManagedEnvironmentsUpdateOptionalParams,
  ManagedEnvironmentsUpdateResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a ManagedEnvironments. */
export interface ManagedEnvironments {
  /**
   * Get all Managed Environments for a subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: ManagedEnvironmentsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<ManagedEnvironment>;
  /**
   * Get all the Managed Environments in a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: ManagedEnvironmentsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<ManagedEnvironment>;
  /**
   * Get the properties of a Managed Environment used to host container apps.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param name Name of the Environment.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    name: string,
    options?: ManagedEnvironmentsGetOptionalParams
  ): Promise<ManagedEnvironmentsGetResponse>;
  /**
   * Creates or updates a Managed Environment used to host container apps.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param name Name of the Environment.
   * @param environmentEnvelope Configuration details of the Environment.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    name: string,
    environmentEnvelope: ManagedEnvironment,
    options?: ManagedEnvironmentsCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ManagedEnvironmentsCreateOrUpdateResponse>,
      ManagedEnvironmentsCreateOrUpdateResponse
    >
  >;
  /**
   * Creates or updates a Managed Environment used to host container apps.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param name Name of the Environment.
   * @param environmentEnvelope Configuration details of the Environment.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    name: string,
    environmentEnvelope: ManagedEnvironment,
    options?: ManagedEnvironmentsCreateOrUpdateOptionalParams
  ): Promise<ManagedEnvironmentsCreateOrUpdateResponse>;
  /**
   * Delete a Managed Environment if it does not have any container apps.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param name Name of the Environment.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    name: string,
    options?: ManagedEnvironmentsDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Delete a Managed Environment if it does not have any container apps.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param name Name of the Environment.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    name: string,
    options?: ManagedEnvironmentsDeleteOptionalParams
  ): Promise<void>;
  /**
   * Patches a Managed Environment. Only patching of tags is supported currently
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param name Name of the Environment.
   * @param environmentEnvelope Configuration details of the Environment.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    name: string,
    environmentEnvelope: ManagedEnvironmentPatch,
    options?: ManagedEnvironmentsUpdateOptionalParams
  ): Promise<ManagedEnvironmentsUpdateResponse>;
}
