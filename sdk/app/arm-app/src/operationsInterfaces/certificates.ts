/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  Certificate,
  CertificatesListOptionalParams,
  CertificatesGetOptionalParams,
  CertificatesGetResponse,
  CertificatesCreateOrUpdateOptionalParams,
  CertificatesCreateOrUpdateResponse,
  CertificatesDeleteOptionalParams,
  CertificatePatch,
  CertificatesUpdateOptionalParams,
  CertificatesUpdateResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Certificates. */
export interface Certificates {
  /**
   * Get the Certificates in a given managed environment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param managedEnvironmentName Name of the Managed Environment.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    managedEnvironmentName: string,
    options?: CertificatesListOptionalParams
  ): PagedAsyncIterableIterator<Certificate>;
  /**
   * Get the specified Certificate.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param managedEnvironmentName Name of the Managed Environment.
   * @param name Name of the Certificate.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    managedEnvironmentName: string,
    name: string,
    options?: CertificatesGetOptionalParams
  ): Promise<CertificatesGetResponse>;
  /**
   * Create or Update a Certificate.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param managedEnvironmentName Name of the Managed Environment.
   * @param name Name of the Certificate.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    managedEnvironmentName: string,
    name: string,
    options?: CertificatesCreateOrUpdateOptionalParams
  ): Promise<CertificatesCreateOrUpdateResponse>;
  /**
   * Deletes the specified Certificate.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param managedEnvironmentName Name of the Managed Environment.
   * @param name Name of the Certificate.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    managedEnvironmentName: string,
    name: string,
    options?: CertificatesDeleteOptionalParams
  ): Promise<void>;
  /**
   * Patches a certificate. Currently only patching of tags is supported
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param managedEnvironmentName Name of the Managed Environment.
   * @param name Name of the Certificate.
   * @param certificateEnvelope Properties of a certificate that need to be updated
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    managedEnvironmentName: string,
    name: string,
    certificateEnvelope: CertificatePatch,
    options?: CertificatesUpdateOptionalParams
  ): Promise<CertificatesUpdateResponse>;
}
