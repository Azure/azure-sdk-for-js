/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  ManagedEnvironmentsStoragesListOptionalParams,
  ManagedEnvironmentsStoragesListResponse,
  ManagedEnvironmentsStoragesGetOptionalParams,
  ManagedEnvironmentsStoragesGetResponse,
  ManagedEnvironmentStorage,
  ManagedEnvironmentsStoragesCreateOrUpdateOptionalParams,
  ManagedEnvironmentsStoragesCreateOrUpdateResponse,
  ManagedEnvironmentsStoragesDeleteOptionalParams
} from "../models";

/** Interface representing a ManagedEnvironmentsStorages. */
export interface ManagedEnvironmentsStorages {
  /**
   * Get all storages for a managedEnvironment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param envName Name of the Environment.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    envName: string,
    options?: ManagedEnvironmentsStoragesListOptionalParams
  ): Promise<ManagedEnvironmentsStoragesListResponse>;
  /**
   * Get storage for a managedEnvironment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param envName Name of the Environment.
   * @param name Name of the storage.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    envName: string,
    name: string,
    options?: ManagedEnvironmentsStoragesGetOptionalParams
  ): Promise<ManagedEnvironmentsStoragesGetResponse>;
  /**
   * Create or update storage for a managedEnvironment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param envName Name of the Environment.
   * @param name Name of the storage.
   * @param storageEnvelope Configuration details of storage.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    envName: string,
    name: string,
    storageEnvelope: ManagedEnvironmentStorage,
    options?: ManagedEnvironmentsStoragesCreateOrUpdateOptionalParams
  ): Promise<ManagedEnvironmentsStoragesCreateOrUpdateResponse>;
  /**
   * Delete storage for a managedEnvironment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param envName Name of the Environment.
   * @param name Name of the storage.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    envName: string,
    name: string,
    options?: ManagedEnvironmentsStoragesDeleteOptionalParams
  ): Promise<void>;
}
