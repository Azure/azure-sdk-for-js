/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import {
  ContainerAppsImpl,
  ContainerAppsRevisionsImpl,
  ContainerAppsRevisionReplicasImpl,
  ManagedEnvironmentsImpl,
  CertificatesImpl,
  OperationsImpl,
  ContainerAppsSourceControlsImpl,
  DaprComponentsImpl,
  ContainerAppsAuthConfigsImpl,
  ManagedEnvironmentsStoragesImpl
} from "./operations";
import {
  ContainerApps,
  ContainerAppsRevisions,
  ContainerAppsRevisionReplicas,
  ManagedEnvironments,
  Certificates,
  Operations,
  ContainerAppsSourceControls,
  DaprComponents,
  ContainerAppsAuthConfigs,
  ManagedEnvironmentsStorages
} from "./operationsInterfaces";
import { ContainerAppsAPIClientOptionalParams } from "./models";

export class ContainerAppsAPIClient extends coreClient.ServiceClient {
  $host: string;
  subscriptionId: string;
  apiVersion: string;

  /**
   * Initializes a new instance of the ContainerAppsAPIClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The ID of the target subscription.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: ContainerAppsAPIClientOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (subscriptionId === undefined) {
      throw new Error("'subscriptionId' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: ContainerAppsAPIClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-arm-app/1.0.0-beta.4`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    if (!options.credentialScopes) {
      options.credentialScopes = ["https://management.azure.com/.default"];
    }
    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      baseUri:
        options.endpoint ?? options.baseUri ?? "https://management.azure.com"
    };
    super(optionsWithDefaults);
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.apiVersion = options.apiVersion || "2022-01-01-preview";
    this.containerApps = new ContainerAppsImpl(this);
    this.containerAppsRevisions = new ContainerAppsRevisionsImpl(this);
    this.containerAppsRevisionReplicas = new ContainerAppsRevisionReplicasImpl(
      this
    );
    this.managedEnvironments = new ManagedEnvironmentsImpl(this);
    this.certificates = new CertificatesImpl(this);
    this.operations = new OperationsImpl(this);
    this.containerAppsSourceControls = new ContainerAppsSourceControlsImpl(
      this
    );
    this.daprComponents = new DaprComponentsImpl(this);
    this.containerAppsAuthConfigs = new ContainerAppsAuthConfigsImpl(this);
    this.managedEnvironmentsStorages = new ManagedEnvironmentsStoragesImpl(
      this
    );
  }

  containerApps: ContainerApps;
  containerAppsRevisions: ContainerAppsRevisions;
  containerAppsRevisionReplicas: ContainerAppsRevisionReplicas;
  managedEnvironments: ManagedEnvironments;
  certificates: Certificates;
  operations: Operations;
  containerAppsSourceControls: ContainerAppsSourceControls;
  daprComponents: DaprComponents;
  containerAppsAuthConfigs: ContainerAppsAuthConfigs;
  managedEnvironmentsStorages: ManagedEnvironmentsStorages;
}
