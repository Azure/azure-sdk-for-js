/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { GuestConfigurationAssignmentsVmss } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { GuestConfigurationClient } from "../guestConfigurationClient";
import {
  GuestConfigurationAssignment,
  GuestConfigurationAssignmentsVmssListOptionalParams,
  GuestConfigurationAssignmentsVmssListResponse,
  GuestConfigurationAssignmentsVmssCreateOrUpdateOptionalParams,
  GuestConfigurationAssignmentsVmssCreateOrUpdateResponse,
  GuestConfigurationAssignmentsVmssGetOptionalParams,
  GuestConfigurationAssignmentsVmssGetResponse,
  GuestConfigurationAssignmentsVmssDeleteOptionalParams,
  GuestConfigurationAssignmentsVmssDeleteResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing GuestConfigurationAssignmentsVmss operations. */
export class GuestConfigurationAssignmentsVmssImpl
  implements GuestConfigurationAssignmentsVmss
{
  private readonly client: GuestConfigurationClient;

  /**
   * Initialize a new instance of the class GuestConfigurationAssignmentsVmss class.
   * @param client Reference to the service client
   */
  constructor(client: GuestConfigurationClient) {
    this.client = client;
  }

  /**
   * List all guest configuration assignments for VMSS.
   * @param resourceGroupName The resource group name.
   * @param vmssName The name of the virtual machine scale set.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    vmssName: string,
    options?: GuestConfigurationAssignmentsVmssListOptionalParams,
  ): PagedAsyncIterableIterator<GuestConfigurationAssignment> {
    const iter = this.listPagingAll(resourceGroupName, vmssName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          vmssName,
          options,
          settings,
        );
      },
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    vmssName: string,
    options?: GuestConfigurationAssignmentsVmssListOptionalParams,
    _settings?: PageSettings,
  ): AsyncIterableIterator<GuestConfigurationAssignment[]> {
    let result: GuestConfigurationAssignmentsVmssListResponse;
    result = await this._list(resourceGroupName, vmssName, options);
    yield result.value || [];
  }

  private async *listPagingAll(
    resourceGroupName: string,
    vmssName: string,
    options?: GuestConfigurationAssignmentsVmssListOptionalParams,
  ): AsyncIterableIterator<GuestConfigurationAssignment> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      vmssName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Creates an association between a VMSS and guest configuration
   * @param resourceGroupName The resource group name.
   * @param vmssName The name of the virtual machine scale set.
   * @param name Name of the guest configuration assignment.
   * @param parameters Parameters supplied to the create or update guest configuration assignment.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    vmssName: string,
    name: string,
    parameters: GuestConfigurationAssignment,
    options?: GuestConfigurationAssignmentsVmssCreateOrUpdateOptionalParams,
  ): Promise<GuestConfigurationAssignmentsVmssCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, vmssName, name, parameters, options },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Get information about a guest configuration assignment for VMSS
   * @param resourceGroupName The resource group name.
   * @param vmssName The name of the virtual machine scale set.
   * @param name The guest configuration assignment name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    vmssName: string,
    name: string,
    options?: GuestConfigurationAssignmentsVmssGetOptionalParams,
  ): Promise<GuestConfigurationAssignmentsVmssGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, vmssName, name, options },
      getOperationSpec,
    );
  }

  /**
   * Delete a guest configuration assignment for VMSS
   * @param resourceGroupName The resource group name.
   * @param vmssName The name of the virtual machine scale set.
   * @param name The guest configuration assignment name.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    vmssName: string,
    name: string,
    options?: GuestConfigurationAssignmentsVmssDeleteOptionalParams,
  ): Promise<GuestConfigurationAssignmentsVmssDeleteResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, vmssName, name, options },
      deleteOperationSpec,
    );
  }

  /**
   * List all guest configuration assignments for VMSS.
   * @param resourceGroupName The resource group name.
   * @param vmssName The name of the virtual machine scale set.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    vmssName: string,
    options?: GuestConfigurationAssignmentsVmssListOptionalParams,
  ): Promise<GuestConfigurationAssignmentsVmssListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, vmssName, options },
      listOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmssName}/providers/Microsoft.GuestConfiguration/guestConfigurationAssignments/{name}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.GuestConfigurationAssignment,
    },
    201: {
      bodyMapper: Mappers.GuestConfigurationAssignment,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vmssName,
    Parameters.name,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmssName}/providers/Microsoft.GuestConfiguration/guestConfigurationAssignments/{name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GuestConfigurationAssignment,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vmssName,
    Parameters.name,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmssName}/providers/Microsoft.GuestConfiguration/guestConfigurationAssignments/{name}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.GuestConfigurationAssignment,
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vmssName,
    Parameters.name,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmssName}/providers/Microsoft.GuestConfiguration/guestConfigurationAssignments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GuestConfigurationAssignmentList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vmssName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
