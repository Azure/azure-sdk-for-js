/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  SolutionConfiguration,
  SolutionConfigurationsListOptionalParams,
  SolutionConfigurationsGetOptionalParams,
  SolutionConfigurationsGetResponse,
  SolutionConfigurationsCreateOrUpdateOptionalParams,
  SolutionConfigurationsCreateOrUpdateResponse,
  SolutionConfigurationUpdate,
  SolutionConfigurationsUpdateOptionalParams,
  SolutionConfigurationsUpdateResponse,
  SolutionConfigurationsDeleteOptionalParams,
  SolutionConfigurationsSyncNowOptionalParams,
  SolutionConfigurationsSyncNowResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a SolutionConfigurations. */
export interface SolutionConfigurations {
  /**
   * List SolutionConfiguration resources by parent
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param options The options parameters.
   */
  list(
    resourceUri: string,
    options?: SolutionConfigurationsListOptionalParams,
  ): PagedAsyncIterableIterator<SolutionConfiguration>;
  /**
   * Get a SolutionConfiguration
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param solutionConfiguration Represent Solution Configuration Resource.
   * @param options The options parameters.
   */
  get(
    resourceUri: string,
    solutionConfiguration: string,
    options?: SolutionConfigurationsGetOptionalParams,
  ): Promise<SolutionConfigurationsGetResponse>;
  /**
   * Create a SolutionConfiguration
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param solutionConfiguration Represent Solution Configuration Resource.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceUri: string,
    solutionConfiguration: string,
    resource: SolutionConfiguration,
    options?: SolutionConfigurationsCreateOrUpdateOptionalParams,
  ): Promise<SolutionConfigurationsCreateOrUpdateResponse>;
  /**
   * Update a SolutionConfiguration
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param solutionConfiguration Represent Solution Configuration Resource.
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  update(
    resourceUri: string,
    solutionConfiguration: string,
    properties: SolutionConfigurationUpdate,
    options?: SolutionConfigurationsUpdateOptionalParams,
  ): Promise<SolutionConfigurationsUpdateResponse>;
  /**
   * Delete a SolutionConfiguration
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param solutionConfiguration Represent Solution Configuration Resource.
   * @param options The options parameters.
   */
  delete(
    resourceUri: string,
    solutionConfiguration: string,
    options?: SolutionConfigurationsDeleteOptionalParams,
  ): Promise<void>;
  /**
   * Trigger immediate sync with source cloud
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param solutionConfiguration Represent Solution Configuration Resource.
   * @param options The options parameters.
   */
  beginSyncNow(
    resourceUri: string,
    solutionConfiguration: string,
    options?: SolutionConfigurationsSyncNowOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SolutionConfigurationsSyncNowResponse>,
      SolutionConfigurationsSyncNowResponse
    >
  >;
  /**
   * Trigger immediate sync with source cloud
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param solutionConfiguration Represent Solution Configuration Resource.
   * @param options The options parameters.
   */
  beginSyncNowAndWait(
    resourceUri: string,
    solutionConfiguration: string,
    options?: SolutionConfigurationsSyncNowOptionalParams,
  ): Promise<SolutionConfigurationsSyncNowResponse>;
}
