/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter,
} from "@azure/core-client";
import {
  SolutionConfiguration as SolutionConfigurationMapper,
  SolutionConfigurationUpdate as SolutionConfigurationUpdateMapper,
  GenerateAwsTemplateRequest as GenerateAwsTemplateRequestMapper,
  PublicCloudConnector as PublicCloudConnectorMapper,
  PublicCloudConnectorUpdate as PublicCloudConnectorUpdateMapper,
  EndpointResource as EndpointResourceMapper,
  ListCredentialsRequest as ListCredentialsRequestMapper,
  ListIngressGatewayCredentialsRequest as ListIngressGatewayCredentialsRequestMapper,
  ManagedProxyRequest as ManagedProxyRequestMapper,
  ServiceConfigurationResource as ServiceConfigurationResourceMapper,
  ServiceConfigurationResourcePatch as ServiceConfigurationResourcePatchMapper,
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String",
    },
  },
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2024-12-01",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String",
    },
  },
};

export const resourceUri: OperationURLParameter = {
  parameterPath: "resourceUri",
  mapper: {
    serializedName: "resourceUri",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const solutionConfiguration: OperationURLParameter = {
  parameterPath: "solutionConfiguration",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9-]{3,63}$"),
    },
    serializedName: "solutionConfiguration",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String",
    },
  },
};

export const resource: OperationParameter = {
  parameterPath: "resource",
  mapper: SolutionConfigurationMapper,
};

export const properties: OperationParameter = {
  parameterPath: "properties",
  mapper: SolutionConfigurationUpdateMapper,
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const inventoryId: OperationURLParameter = {
  parameterPath: "inventoryId",
  mapper: {
    serializedName: "inventoryId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const generateAwsTemplateRequest: OperationParameter = {
  parameterPath: "generateAwsTemplateRequest",
  mapper: GenerateAwsTemplateRequestMapper,
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "Uuid",
    },
  },
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1,
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const publicCloudConnector: OperationURLParameter = {
  parameterPath: "publicCloudConnector",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9-]{3,63}$"),
    },
    serializedName: "publicCloudConnector",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource1: OperationParameter = {
  parameterPath: "resource",
  mapper: PublicCloudConnectorMapper,
};

export const properties1: OperationParameter = {
  parameterPath: "properties",
  mapper: PublicCloudConnectorUpdateMapper,
};

export const solutionType: OperationURLParameter = {
  parameterPath: "solutionType",
  mapper: {
    serializedName: "solutionType",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const endpointName: OperationURLParameter = {
  parameterPath: "endpointName",
  mapper: {
    serializedName: "endpointName",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const endpointResource: OperationParameter = {
  parameterPath: "endpointResource",
  mapper: EndpointResourceMapper,
};

export const listCredentialsRequest: OperationParameter = {
  parameterPath: ["options", "listCredentialsRequest"],
  mapper: ListCredentialsRequestMapper,
};

export const expiresin: OperationQueryParameter = {
  parameterPath: ["options", "expiresin"],
  mapper: {
    defaultValue: 10800,
    constraints: {
      InclusiveMaximum: 10800,
      InclusiveMinimum: 600,
    },
    serializedName: "expiresin",
    type: {
      name: "Number",
    },
  },
};

export const listIngressGatewayCredentialsRequest: OperationParameter = {
  parameterPath: ["options", "listIngressGatewayCredentialsRequest"],
  mapper: ListIngressGatewayCredentialsRequestMapper,
};

export const managedProxyRequest: OperationParameter = {
  parameterPath: "managedProxyRequest",
  mapper: ManagedProxyRequestMapper,
};

export const serviceConfigurationName: OperationURLParameter = {
  parameterPath: "serviceConfigurationName",
  mapper: {
    serializedName: "serviceConfigurationName",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const serviceConfigurationResource: OperationParameter = {
  parameterPath: "serviceConfigurationResource",
  mapper: ServiceConfigurationResourceMapper,
};

export const serviceConfigurationResource1: OperationParameter = {
  parameterPath: "serviceConfigurationResource",
  mapper: ServiceConfigurationResourcePatchMapper,
};
