/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/endpointsMappers";
import * as Parameters from "../models/parameters";
import { HybridConnectivityManagementAPIContext } from "../hybridConnectivityManagementAPIContext";

/** Class representing a Endpoints. */
export class Endpoints {
  private readonly client: HybridConnectivityManagementAPIContext;

  /**
   * Create a Endpoints.
   * @param {HybridConnectivityManagementAPIContext} client Reference to the service client.
   */
  constructor(client: HybridConnectivityManagementAPIContext) {
    this.client = client;
  }

  /**
   * List of endpoints to the target resource.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   * connected.
   * @param [options] The optional parameters
   * @returns Promise<Models.EndpointsListResponse>
   */
  list(resourceUri: string, options?: msRest.RequestOptionsBase): Promise<Models.EndpointsListResponse>;
  /**
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   * connected.
   * @param callback The callback
   */
  list(resourceUri: string, callback: msRest.ServiceCallback<Models.EndpointsList>): void;
  /**
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   * connected.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceUri: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EndpointsList>): void;
  list(resourceUri: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EndpointsList>, callback?: msRest.ServiceCallback<Models.EndpointsList>): Promise<Models.EndpointsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceUri,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.EndpointsListResponse>;
  }

  /**
   * Gets the endpoint to the resource.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   * connected.
   * @param endpointName The endpoint name.
   * @param [options] The optional parameters
   * @returns Promise<Models.EndpointsGetResponse>
   */
  get(resourceUri: string, endpointName: string, options?: msRest.RequestOptionsBase): Promise<Models.EndpointsGetResponse>;
  /**
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   * connected.
   * @param endpointName The endpoint name.
   * @param callback The callback
   */
  get(resourceUri: string, endpointName: string, callback: msRest.ServiceCallback<Models.EndpointResource>): void;
  /**
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   * connected.
   * @param endpointName The endpoint name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceUri: string, endpointName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EndpointResource>): void;
  get(resourceUri: string, endpointName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EndpointResource>, callback?: msRest.ServiceCallback<Models.EndpointResource>): Promise<Models.EndpointsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceUri,
        endpointName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.EndpointsGetResponse>;
  }

  /**
   * Create or update the endpoint to the target resource.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   * connected.
   * @param endpointName The endpoint name.
   * @param endpointResource Endpoint details
   * @param [options] The optional parameters
   * @returns Promise<Models.EndpointsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceUri: string, endpointName: string, endpointResource: Models.EndpointResource, options?: msRest.RequestOptionsBase): Promise<Models.EndpointsCreateOrUpdateResponse>;
  /**
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   * connected.
   * @param endpointName The endpoint name.
   * @param endpointResource Endpoint details
   * @param callback The callback
   */
  createOrUpdate(resourceUri: string, endpointName: string, endpointResource: Models.EndpointResource, callback: msRest.ServiceCallback<Models.EndpointResource>): void;
  /**
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   * connected.
   * @param endpointName The endpoint name.
   * @param endpointResource Endpoint details
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceUri: string, endpointName: string, endpointResource: Models.EndpointResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EndpointResource>): void;
  createOrUpdate(resourceUri: string, endpointName: string, endpointResource: Models.EndpointResource, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EndpointResource>, callback?: msRest.ServiceCallback<Models.EndpointResource>): Promise<Models.EndpointsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceUri,
        endpointName,
        endpointResource,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.EndpointsCreateOrUpdateResponse>;
  }

  /**
   * Update the endpoint to the target resource.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   * connected.
   * @param endpointName The endpoint name.
   * @param endpointResource Endpoint details
   * @param [options] The optional parameters
   * @returns Promise<Models.EndpointsUpdateResponse>
   */
  update(resourceUri: string, endpointName: string, endpointResource: Models.EndpointResource, options?: msRest.RequestOptionsBase): Promise<Models.EndpointsUpdateResponse>;
  /**
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   * connected.
   * @param endpointName The endpoint name.
   * @param endpointResource Endpoint details
   * @param callback The callback
   */
  update(resourceUri: string, endpointName: string, endpointResource: Models.EndpointResource, callback: msRest.ServiceCallback<Models.EndpointResource>): void;
  /**
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   * connected.
   * @param endpointName The endpoint name.
   * @param endpointResource Endpoint details
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceUri: string, endpointName: string, endpointResource: Models.EndpointResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EndpointResource>): void;
  update(resourceUri: string, endpointName: string, endpointResource: Models.EndpointResource, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EndpointResource>, callback?: msRest.ServiceCallback<Models.EndpointResource>): Promise<Models.EndpointsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceUri,
        endpointName,
        endpointResource,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.EndpointsUpdateResponse>;
  }

  /**
   * Deletes the endpoint access to the target resource.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   * connected.
   * @param endpointName The endpoint name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceUri: string, endpointName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   * connected.
   * @param endpointName The endpoint name.
   * @param callback The callback
   */
  deleteMethod(resourceUri: string, endpointName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   * connected.
   * @param endpointName The endpoint name.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceUri: string, endpointName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceUri: string, endpointName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceUri,
        endpointName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Gets the endpoint access credentials to the resource.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   * connected.
   * @param endpointName The endpoint name.
   * @param [options] The optional parameters
   * @returns Promise<Models.EndpointsListCredentialsResponse>
   */
  listCredentials(resourceUri: string, endpointName: string, options?: Models.EndpointsListCredentialsOptionalParams): Promise<Models.EndpointsListCredentialsResponse>;
  /**
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   * connected.
   * @param endpointName The endpoint name.
   * @param callback The callback
   */
  listCredentials(resourceUri: string, endpointName: string, callback: msRest.ServiceCallback<Models.EndpointAccessResource>): void;
  /**
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   * connected.
   * @param endpointName The endpoint name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listCredentials(resourceUri: string, endpointName: string, options: Models.EndpointsListCredentialsOptionalParams, callback: msRest.ServiceCallback<Models.EndpointAccessResource>): void;
  listCredentials(resourceUri: string, endpointName: string, options?: Models.EndpointsListCredentialsOptionalParams | msRest.ServiceCallback<Models.EndpointAccessResource>, callback?: msRest.ServiceCallback<Models.EndpointAccessResource>): Promise<Models.EndpointsListCredentialsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceUri,
        endpointName,
        options
      },
      listCredentialsOperationSpec,
      callback) as Promise<Models.EndpointsListCredentialsResponse>;
  }

  /**
   * List of endpoints to the target resource.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.EndpointsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.EndpointsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.EndpointsList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EndpointsList>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EndpointsList>, callback?: msRest.ServiceCallback<Models.EndpointsList>): Promise<Models.EndpointsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.EndpointsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints",
  urlParameters: [
    Parameters.resourceUri
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EndpointsList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}",
  urlParameters: [
    Parameters.resourceUri,
    Parameters.endpointName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EndpointResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}",
  urlParameters: [
    Parameters.resourceUri,
    Parameters.endpointName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "endpointResource",
    mapper: {
      ...Mappers.EndpointResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.EndpointResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}",
  urlParameters: [
    Parameters.resourceUri,
    Parameters.endpointName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "endpointResource",
    mapper: {
      ...Mappers.EndpointResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.EndpointResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}",
  urlParameters: [
    Parameters.resourceUri,
    Parameters.endpointName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listCredentialsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/listCredentials",
  urlParameters: [
    Parameters.resourceUri,
    Parameters.endpointName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.expiresin
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EndpointAccessResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EndpointsList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
