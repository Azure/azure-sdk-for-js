/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { GenerateAwsTemplate } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { HybridConnectivityManagementAPI } from "../hybridConnectivityManagementAPI";
import {
  GenerateAwsTemplateRequest,
  GenerateAwsTemplatePostOptionalParams,
  GenerateAwsTemplatePostResponse,
} from "../models";

/** Class containing GenerateAwsTemplate operations. */
export class GenerateAwsTemplateImpl implements GenerateAwsTemplate {
  private readonly client: HybridConnectivityManagementAPI;

  /**
   * Initialize a new instance of the class GenerateAwsTemplate class.
   * @param client Reference to the service client
   */
  constructor(client: HybridConnectivityManagementAPI) {
    this.client = client;
  }

  /**
   * Retrieve AWS Cloud Formation template
   * @param generateAwsTemplateRequest ConnectorId and SolutionTypes and their properties to Generate AWS
   *                                   CFT Template.
   * @param options The options parameters.
   */
  post(
    generateAwsTemplateRequest: GenerateAwsTemplateRequest,
    options?: GenerateAwsTemplatePostOptionalParams,
  ): Promise<GenerateAwsTemplatePostResponse> {
    return this.client.sendOperationRequest(
      { generateAwsTemplateRequest, options },
      postOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const postOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.HybridConnectivity/generateAwsTemplate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } },
      },
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.generateAwsTemplateRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
