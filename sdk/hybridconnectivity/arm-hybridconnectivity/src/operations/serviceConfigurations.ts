/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ServiceConfigurations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { HybridConnectivityManagementAPI } from "../hybridConnectivityManagementAPI";
import {
  ServiceConfigurationResource,
  ServiceConfigurationsListByEndpointResourceNextOptionalParams,
  ServiceConfigurationsListByEndpointResourceOptionalParams,
  ServiceConfigurationsListByEndpointResourceResponse,
  ServiceConfigurationsGetOptionalParams,
  ServiceConfigurationsGetResponse,
  ServiceConfigurationsCreateOrupdateOptionalParams,
  ServiceConfigurationsCreateOrupdateResponse,
  ServiceConfigurationResourcePatch,
  ServiceConfigurationsUpdateOptionalParams,
  ServiceConfigurationsUpdateResponse,
  ServiceConfigurationsDeleteOptionalParams,
  ServiceConfigurationsListByEndpointResourceNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ServiceConfigurations operations. */
export class ServiceConfigurationsImpl implements ServiceConfigurations {
  private readonly client: HybridConnectivityManagementAPI;

  /**
   * Initialize a new instance of the class ServiceConfigurations class.
   * @param client Reference to the service client
   */
  constructor(client: HybridConnectivityManagementAPI) {
    this.client = client;
  }

  /**
   * API to enumerate registered services in service configurations under a Endpoint Resource
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param endpointName The endpoint name.
   * @param options The options parameters.
   */
  public listByEndpointResource(
    resourceUri: string,
    endpointName: string,
    options?: ServiceConfigurationsListByEndpointResourceOptionalParams
  ): PagedAsyncIterableIterator<ServiceConfigurationResource> {
    const iter = this.listByEndpointResourcePagingAll(
      resourceUri,
      endpointName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByEndpointResourcePagingPage(
          resourceUri,
          endpointName,
          options,
          settings
        );
      }
    };
  }

  private async *listByEndpointResourcePagingPage(
    resourceUri: string,
    endpointName: string,
    options?: ServiceConfigurationsListByEndpointResourceOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ServiceConfigurationResource[]> {
    let result: ServiceConfigurationsListByEndpointResourceResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByEndpointResource(
        resourceUri,
        endpointName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByEndpointResourceNext(
        resourceUri,
        endpointName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByEndpointResourcePagingAll(
    resourceUri: string,
    endpointName: string,
    options?: ServiceConfigurationsListByEndpointResourceOptionalParams
  ): AsyncIterableIterator<ServiceConfigurationResource> {
    for await (const page of this.listByEndpointResourcePagingPage(
      resourceUri,
      endpointName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * API to enumerate registered services in service configurations under a Endpoint Resource
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param endpointName The endpoint name.
   * @param options The options parameters.
   */
  private _listByEndpointResource(
    resourceUri: string,
    endpointName: string,
    options?: ServiceConfigurationsListByEndpointResourceOptionalParams
  ): Promise<ServiceConfigurationsListByEndpointResourceResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, endpointName, options },
      listByEndpointResourceOperationSpec
    );
  }

  /**
   * Gets the details about the service to the resource.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param endpointName The endpoint name.
   * @param serviceConfigurationName The service name.
   * @param options The options parameters.
   */
  get(
    resourceUri: string,
    endpointName: string,
    serviceConfigurationName: string,
    options?: ServiceConfigurationsGetOptionalParams
  ): Promise<ServiceConfigurationsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, endpointName, serviceConfigurationName, options },
      getOperationSpec
    );
  }

  /**
   * Create or update a service in serviceConfiguration for the endpoint resource.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param endpointName The endpoint name.
   * @param serviceConfigurationName The service name.
   * @param serviceConfigurationResource Service details
   * @param options The options parameters.
   */
  createOrupdate(
    resourceUri: string,
    endpointName: string,
    serviceConfigurationName: string,
    serviceConfigurationResource: ServiceConfigurationResource,
    options?: ServiceConfigurationsCreateOrupdateOptionalParams
  ): Promise<ServiceConfigurationsCreateOrupdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceUri,
        endpointName,
        serviceConfigurationName,
        serviceConfigurationResource,
        options
      },
      createOrupdateOperationSpec
    );
  }

  /**
   * Update the service details in the service configurations of the target resource.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param endpointName The endpoint name.
   * @param serviceConfigurationName The service name.
   * @param serviceConfigurationResource Service details
   * @param options The options parameters.
   */
  update(
    resourceUri: string,
    endpointName: string,
    serviceConfigurationName: string,
    serviceConfigurationResource: ServiceConfigurationResourcePatch,
    options?: ServiceConfigurationsUpdateOptionalParams
  ): Promise<ServiceConfigurationsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceUri,
        endpointName,
        serviceConfigurationName,
        serviceConfigurationResource,
        options
      },
      updateOperationSpec
    );
  }

  /**
   * Deletes the service details to the target resource.
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param endpointName The endpoint name.
   * @param serviceConfigurationName The service name.
   * @param options The options parameters.
   */
  delete(
    resourceUri: string,
    endpointName: string,
    serviceConfigurationName: string,
    options?: ServiceConfigurationsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceUri, endpointName, serviceConfigurationName, options },
      deleteOperationSpec
    );
  }

  /**
   * ListByEndpointResourceNext
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource to be
   *                    connected.
   * @param endpointName The endpoint name.
   * @param nextLink The nextLink from the previous successful call to the ListByEndpointResource method.
   * @param options The options parameters.
   */
  private _listByEndpointResourceNext(
    resourceUri: string,
    endpointName: string,
    nextLink: string,
    options?: ServiceConfigurationsListByEndpointResourceNextOptionalParams
  ): Promise<ServiceConfigurationsListByEndpointResourceNextResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, endpointName, nextLink, options },
      listByEndpointResourceNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByEndpointResourceOperationSpec: coreClient.OperationSpec = {
  path:
    "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceConfigurations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServiceConfigurationList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceUri,
    Parameters.endpointName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceConfigurations/{serviceConfigurationName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServiceConfigurationResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceUri,
    Parameters.endpointName,
    Parameters.serviceConfigurationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrupdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceConfigurations/{serviceConfigurationName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ServiceConfigurationResource
    },
    201: {
      bodyMapper: Mappers.ServiceConfigurationResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.serviceConfigurationResource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceUri,
    Parameters.endpointName,
    Parameters.serviceConfigurationName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceConfigurations/{serviceConfigurationName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ServiceConfigurationResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.serviceConfigurationResource1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceUri,
    Parameters.endpointName,
    Parameters.serviceConfigurationName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceConfigurations/{serviceConfigurationName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceUri,
    Parameters.endpointName,
    Parameters.serviceConfigurationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByEndpointResourceNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServiceConfigurationList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.resourceUri,
    Parameters.endpointName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
