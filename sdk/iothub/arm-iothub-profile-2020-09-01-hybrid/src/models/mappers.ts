/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const CertificateVerificationDescription: msRest.CompositeMapper = {
  serializedName: "CertificateVerificationDescription",
  type: {
    name: "Composite",
    className: "CertificateVerificationDescription",
    modelProperties: {
      certificate: {
        serializedName: "certificate",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CertificateProperties: msRest.CompositeMapper = {
  serializedName: "CertificateProperties",
  type: {
    name: "Composite",
    className: "CertificateProperties",
    modelProperties: {
      subject: {
        readOnly: true,
        serializedName: "subject",
        type: {
          name: "String"
        }
      },
      expiry: {
        readOnly: true,
        serializedName: "expiry",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      thumbprint: {
        readOnly: true,
        serializedName: "thumbprint",
        type: {
          name: "String"
        }
      },
      isVerified: {
        readOnly: true,
        serializedName: "isVerified",
        type: {
          name: "Boolean"
        }
      },
      created: {
        readOnly: true,
        serializedName: "created",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      updated: {
        readOnly: true,
        serializedName: "updated",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      certificate: {
        serializedName: "certificate",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CertificateDescription: msRest.CompositeMapper = {
  serializedName: "CertificateDescription",
  type: {
    name: "Composite",
    className: "CertificateDescription",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "CertificateProperties"
        }
      },
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CertificateListDescription: msRest.CompositeMapper = {
  serializedName: "CertificateListDescription",
  type: {
    name: "Composite",
    className: "CertificateListDescription",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CertificateDescription"
            }
          }
        }
      }
    }
  }
};

export const CertificateBodyDescription: msRest.CompositeMapper = {
  serializedName: "CertificateBodyDescription",
  type: {
    name: "Composite",
    className: "CertificateBodyDescription",
    modelProperties: {
      certificate: {
        serializedName: "certificate",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CertificatePropertiesWithNonce: msRest.CompositeMapper = {
  serializedName: "CertificatePropertiesWithNonce",
  type: {
    name: "Composite",
    className: "CertificatePropertiesWithNonce",
    modelProperties: {
      subject: {
        readOnly: true,
        serializedName: "subject",
        type: {
          name: "String"
        }
      },
      expiry: {
        readOnly: true,
        serializedName: "expiry",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      thumbprint: {
        readOnly: true,
        serializedName: "thumbprint",
        type: {
          name: "String"
        }
      },
      isVerified: {
        readOnly: true,
        serializedName: "isVerified",
        type: {
          name: "Boolean"
        }
      },
      created: {
        readOnly: true,
        serializedName: "created",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      updated: {
        readOnly: true,
        serializedName: "updated",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      verificationCode: {
        readOnly: true,
        serializedName: "verificationCode",
        type: {
          name: "String"
        }
      },
      certificate: {
        readOnly: true,
        serializedName: "certificate",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CertificateWithNonceDescription: msRest.CompositeMapper = {
  serializedName: "CertificateWithNonceDescription",
  type: {
    name: "Composite",
    className: "CertificateWithNonceDescription",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "CertificatePropertiesWithNonce"
        }
      },
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SharedAccessSignatureAuthorizationRule: msRest.CompositeMapper = {
  serializedName: "SharedAccessSignatureAuthorizationRule",
  type: {
    name: "Composite",
    className: "SharedAccessSignatureAuthorizationRule",
    modelProperties: {
      keyName: {
        required: true,
        serializedName: "keyName",
        type: {
          name: "String"
        }
      },
      primaryKey: {
        serializedName: "primaryKey",
        type: {
          name: "String"
        }
      },
      secondaryKey: {
        serializedName: "secondaryKey",
        type: {
          name: "String"
        }
      },
      rights: {
        required: true,
        serializedName: "rights",
        type: {
          name: "Enum",
          allowedValues: [
            "RegistryRead",
            "RegistryWrite",
            "ServiceConnect",
            "DeviceConnect",
            "RegistryRead, RegistryWrite",
            "RegistryRead, ServiceConnect",
            "RegistryRead, DeviceConnect",
            "RegistryWrite, ServiceConnect",
            "RegistryWrite, DeviceConnect",
            "ServiceConnect, DeviceConnect",
            "RegistryRead, RegistryWrite, ServiceConnect",
            "RegistryRead, RegistryWrite, DeviceConnect",
            "RegistryRead, ServiceConnect, DeviceConnect",
            "RegistryWrite, ServiceConnect, DeviceConnect",
            "RegistryRead, RegistryWrite, ServiceConnect, DeviceConnect"
          ]
        }
      }
    }
  }
};

export const IpFilterRule: msRest.CompositeMapper = {
  serializedName: "IpFilterRule",
  type: {
    name: "Composite",
    className: "IpFilterRule",
    modelProperties: {
      filterName: {
        required: true,
        serializedName: "filterName",
        type: {
          name: "String"
        }
      },
      action: {
        required: true,
        serializedName: "action",
        type: {
          name: "Enum",
          allowedValues: [
            "Accept",
            "Reject"
          ]
        }
      },
      ipMask: {
        required: true,
        serializedName: "ipMask",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventHubProperties: msRest.CompositeMapper = {
  serializedName: "EventHubProperties",
  type: {
    name: "Composite",
    className: "EventHubProperties",
    modelProperties: {
      retentionTimeInDays: {
        serializedName: "retentionTimeInDays",
        type: {
          name: "Number"
        }
      },
      partitionCount: {
        serializedName: "partitionCount",
        type: {
          name: "Number"
        }
      },
      partitionIds: {
        readOnly: true,
        serializedName: "partitionIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      path: {
        readOnly: true,
        serializedName: "path",
        type: {
          name: "String"
        }
      },
      endpoint: {
        readOnly: true,
        serializedName: "endpoint",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoutingServiceBusQueueEndpointProperties: msRest.CompositeMapper = {
  serializedName: "RoutingServiceBusQueueEndpointProperties",
  type: {
    name: "Composite",
    className: "RoutingServiceBusQueueEndpointProperties",
    modelProperties: {
      connectionString: {
        required: true,
        serializedName: "connectionString",
        type: {
          name: "String"
        }
      },
      name: {
        required: true,
        serializedName: "name",
        constraints: {
          Pattern: /^[A-Za-z0-9-._]{1,64}$/
        },
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        serializedName: "resourceGroup",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoutingServiceBusTopicEndpointProperties: msRest.CompositeMapper = {
  serializedName: "RoutingServiceBusTopicEndpointProperties",
  type: {
    name: "Composite",
    className: "RoutingServiceBusTopicEndpointProperties",
    modelProperties: {
      connectionString: {
        required: true,
        serializedName: "connectionString",
        type: {
          name: "String"
        }
      },
      name: {
        required: true,
        serializedName: "name",
        constraints: {
          Pattern: /^[A-Za-z0-9-._]{1,64}$/
        },
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        serializedName: "resourceGroup",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoutingEventHubProperties: msRest.CompositeMapper = {
  serializedName: "RoutingEventHubProperties",
  type: {
    name: "Composite",
    className: "RoutingEventHubProperties",
    modelProperties: {
      connectionString: {
        required: true,
        serializedName: "connectionString",
        type: {
          name: "String"
        }
      },
      name: {
        required: true,
        serializedName: "name",
        constraints: {
          Pattern: /^[A-Za-z0-9-._]{1,64}$/
        },
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        serializedName: "resourceGroup",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoutingStorageContainerProperties: msRest.CompositeMapper = {
  serializedName: "RoutingStorageContainerProperties",
  type: {
    name: "Composite",
    className: "RoutingStorageContainerProperties",
    modelProperties: {
      connectionString: {
        required: true,
        serializedName: "connectionString",
        type: {
          name: "String"
        }
      },
      name: {
        required: true,
        serializedName: "name",
        constraints: {
          Pattern: /^[A-Za-z0-9-._]{1,64}$/
        },
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        serializedName: "resourceGroup",
        type: {
          name: "String"
        }
      },
      containerName: {
        required: true,
        serializedName: "containerName",
        type: {
          name: "String"
        }
      },
      fileNameFormat: {
        serializedName: "fileNameFormat",
        type: {
          name: "String"
        }
      },
      batchFrequencyInSeconds: {
        serializedName: "batchFrequencyInSeconds",
        constraints: {
          InclusiveMaximum: 720,
          InclusiveMinimum: 60
        },
        type: {
          name: "Number"
        }
      },
      maxChunkSizeInBytes: {
        serializedName: "maxChunkSizeInBytes",
        constraints: {
          InclusiveMaximum: 524288000,
          InclusiveMinimum: 10485760
        },
        type: {
          name: "Number"
        }
      },
      encoding: {
        serializedName: "encoding",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoutingEndpoints: msRest.CompositeMapper = {
  serializedName: "RoutingEndpoints",
  type: {
    name: "Composite",
    className: "RoutingEndpoints",
    modelProperties: {
      serviceBusQueues: {
        serializedName: "serviceBusQueues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RoutingServiceBusQueueEndpointProperties"
            }
          }
        }
      },
      serviceBusTopics: {
        serializedName: "serviceBusTopics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RoutingServiceBusTopicEndpointProperties"
            }
          }
        }
      },
      eventHubs: {
        serializedName: "eventHubs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RoutingEventHubProperties"
            }
          }
        }
      },
      storageContainers: {
        serializedName: "storageContainers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RoutingStorageContainerProperties"
            }
          }
        }
      }
    }
  }
};

export const RouteProperties: msRest.CompositeMapper = {
  serializedName: "RouteProperties",
  type: {
    name: "Composite",
    className: "RouteProperties",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        constraints: {
          Pattern: /^[A-Za-z0-9-._]{1,64}$/
        },
        type: {
          name: "String"
        }
      },
      source: {
        required: true,
        serializedName: "source",
        type: {
          name: "String"
        }
      },
      condition: {
        serializedName: "condition",
        type: {
          name: "String"
        }
      },
      endpointNames: {
        required: true,
        serializedName: "endpointNames",
        constraints: {
          MaxItems: 1,
          MinItems: 1
        },
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      isEnabled: {
        required: true,
        serializedName: "isEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const FallbackRouteProperties: msRest.CompositeMapper = {
  serializedName: "FallbackRouteProperties",
  type: {
    name: "Composite",
    className: "FallbackRouteProperties",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      source: {
        required: true,
        isConstant: true,
        serializedName: "source",
        defaultValue: 'DeviceMessages',
        type: {
          name: "String"
        }
      },
      condition: {
        serializedName: "condition",
        type: {
          name: "String"
        }
      },
      endpointNames: {
        required: true,
        serializedName: "endpointNames",
        constraints: {
          MaxItems: 1,
          MinItems: 1
        },
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      isEnabled: {
        required: true,
        serializedName: "isEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const EnrichmentProperties: msRest.CompositeMapper = {
  serializedName: "EnrichmentProperties",
  type: {
    name: "Composite",
    className: "EnrichmentProperties",
    modelProperties: {
      key: {
        required: true,
        serializedName: "key",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      endpointNames: {
        required: true,
        serializedName: "endpointNames",
        constraints: {
          MinItems: 1
        },
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const RoutingProperties: msRest.CompositeMapper = {
  serializedName: "RoutingProperties",
  type: {
    name: "Composite",
    className: "RoutingProperties",
    modelProperties: {
      endpoints: {
        serializedName: "endpoints",
        type: {
          name: "Composite",
          className: "RoutingEndpoints"
        }
      },
      routes: {
        serializedName: "routes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RouteProperties"
            }
          }
        }
      },
      fallbackRoute: {
        serializedName: "fallbackRoute",
        type: {
          name: "Composite",
          className: "FallbackRouteProperties"
        }
      },
      enrichments: {
        serializedName: "enrichments",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnrichmentProperties"
            }
          }
        }
      }
    }
  }
};

export const StorageEndpointProperties: msRest.CompositeMapper = {
  serializedName: "StorageEndpointProperties",
  type: {
    name: "Composite",
    className: "StorageEndpointProperties",
    modelProperties: {
      sasTtlAsIso8601: {
        serializedName: "sasTtlAsIso8601",
        type: {
          name: "TimeSpan"
        }
      },
      connectionString: {
        required: true,
        serializedName: "connectionString",
        type: {
          name: "String"
        }
      },
      containerName: {
        required: true,
        serializedName: "containerName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MessagingEndpointProperties: msRest.CompositeMapper = {
  serializedName: "MessagingEndpointProperties",
  type: {
    name: "Composite",
    className: "MessagingEndpointProperties",
    modelProperties: {
      lockDurationAsIso8601: {
        serializedName: "lockDurationAsIso8601",
        type: {
          name: "TimeSpan"
        }
      },
      ttlAsIso8601: {
        serializedName: "ttlAsIso8601",
        type: {
          name: "TimeSpan"
        }
      },
      maxDeliveryCount: {
        serializedName: "maxDeliveryCount",
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const FeedbackProperties: msRest.CompositeMapper = {
  serializedName: "FeedbackProperties",
  type: {
    name: "Composite",
    className: "FeedbackProperties",
    modelProperties: {
      lockDurationAsIso8601: {
        serializedName: "lockDurationAsIso8601",
        type: {
          name: "TimeSpan"
        }
      },
      ttlAsIso8601: {
        serializedName: "ttlAsIso8601",
        type: {
          name: "TimeSpan"
        }
      },
      maxDeliveryCount: {
        serializedName: "maxDeliveryCount",
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CloudToDeviceProperties: msRest.CompositeMapper = {
  serializedName: "CloudToDeviceProperties",
  type: {
    name: "Composite",
    className: "CloudToDeviceProperties",
    modelProperties: {
      maxDeliveryCount: {
        serializedName: "maxDeliveryCount",
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      defaultTtlAsIso8601: {
        serializedName: "defaultTtlAsIso8601",
        type: {
          name: "TimeSpan"
        }
      },
      feedback: {
        serializedName: "feedback",
        type: {
          name: "Composite",
          className: "FeedbackProperties"
        }
      }
    }
  }
};

export const IotHubPropertiesDeviceStreams: msRest.CompositeMapper = {
  serializedName: "IotHubProperties_deviceStreams",
  type: {
    name: "Composite",
    className: "IotHubPropertiesDeviceStreams",
    modelProperties: {
      streamingEndpoints: {
        serializedName: "streamingEndpoints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const IotHubLocationDescription: msRest.CompositeMapper = {
  serializedName: "IotHubLocationDescription",
  type: {
    name: "Composite",
    className: "IotHubLocationDescription",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      role: {
        serializedName: "role",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IotHubProperties: msRest.CompositeMapper = {
  serializedName: "IotHubProperties",
  type: {
    name: "Composite",
    className: "IotHubProperties",
    modelProperties: {
      authorizationPolicies: {
        serializedName: "authorizationPolicies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SharedAccessSignatureAuthorizationRule"
            }
          }
        }
      },
      ipFilterRules: {
        serializedName: "ipFilterRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpFilterRule"
            }
          }
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "provisioningState",
        type: {
          name: "String"
        }
      },
      state: {
        readOnly: true,
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      hostName: {
        readOnly: true,
        serializedName: "hostName",
        type: {
          name: "String"
        }
      },
      eventHubEndpoints: {
        serializedName: "eventHubEndpoints",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "EventHubProperties"
            }
          }
        }
      },
      routing: {
        serializedName: "routing",
        type: {
          name: "Composite",
          className: "RoutingProperties"
        }
      },
      storageEndpoints: {
        serializedName: "storageEndpoints",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "StorageEndpointProperties"
            }
          }
        }
      },
      messagingEndpoints: {
        serializedName: "messagingEndpoints",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "MessagingEndpointProperties"
            }
          }
        }
      },
      enableFileUploadNotifications: {
        serializedName: "enableFileUploadNotifications",
        type: {
          name: "Boolean"
        }
      },
      cloudToDevice: {
        serializedName: "cloudToDevice",
        type: {
          name: "Composite",
          className: "CloudToDeviceProperties"
        }
      },
      comments: {
        serializedName: "comments",
        type: {
          name: "String"
        }
      },
      deviceStreams: {
        serializedName: "deviceStreams",
        type: {
          name: "Composite",
          className: "IotHubPropertiesDeviceStreams"
        }
      },
      features: {
        serializedName: "features",
        type: {
          name: "String"
        }
      },
      locations: {
        readOnly: true,
        serializedName: "locations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IotHubLocationDescription"
            }
          }
        }
      }
    }
  }
};

export const IotHubSkuInfo: msRest.CompositeMapper = {
  serializedName: "IotHubSkuInfo",
  type: {
    name: "Composite",
    className: "IotHubSkuInfo",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tier: {
        readOnly: true,
        serializedName: "tier",
        type: {
          name: "Enum",
          allowedValues: [
            "Free",
            "Standard",
            "Basic"
          ]
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Resource: msRest.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        constraints: {
          Pattern: /^(?![0-9]+$)(?!-)[a-zA-Z0-9-]{2,49}[a-zA-Z0-9]$/
        },
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const IotHubDescription: msRest.CompositeMapper = {
  serializedName: "IotHubDescription",
  type: {
    name: "Composite",
    className: "IotHubDescription",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "IotHubProperties"
        }
      },
      sku: {
        required: true,
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "IotHubSkuInfo"
        }
      }
    }
  }
};

export const OperationDisplay: msRest.CompositeMapper = {
  serializedName: "Operation_display",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        readOnly: true,
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        readOnly: true,
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        readOnly: true,
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        readOnly: true,
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: msRest.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      }
    }
  }
};

export const ErrorDetails: msRest.CompositeMapper = {
  serializedName: "ErrorDetails",
  type: {
    name: "Composite",
    className: "ErrorDetails",
    modelProperties: {
      code: {
        readOnly: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      httpStatusCode: {
        readOnly: true,
        serializedName: "httpStatusCode",
        type: {
          name: "String"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      details: {
        readOnly: true,
        serializedName: "details",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IotHubQuotaMetricInfo: msRest.CompositeMapper = {
  serializedName: "IotHubQuotaMetricInfo",
  type: {
    name: "Composite",
    className: "IotHubQuotaMetricInfo",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      currentValue: {
        readOnly: true,
        serializedName: "currentValue",
        type: {
          name: "Number"
        }
      },
      maxValue: {
        readOnly: true,
        serializedName: "maxValue",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const EndpointHealthData: msRest.CompositeMapper = {
  serializedName: "EndpointHealthData",
  type: {
    name: "Composite",
    className: "EndpointHealthData",
    modelProperties: {
      endpointId: {
        serializedName: "endpointId",
        type: {
          name: "String"
        }
      },
      healthStatus: {
        serializedName: "healthStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegistryStatistics: msRest.CompositeMapper = {
  serializedName: "RegistryStatistics",
  type: {
    name: "Composite",
    className: "RegistryStatistics",
    modelProperties: {
      totalDeviceCount: {
        readOnly: true,
        serializedName: "totalDeviceCount",
        type: {
          name: "Number"
        }
      },
      enabledDeviceCount: {
        readOnly: true,
        serializedName: "enabledDeviceCount",
        type: {
          name: "Number"
        }
      },
      disabledDeviceCount: {
        readOnly: true,
        serializedName: "disabledDeviceCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const JobResponse: msRest.CompositeMapper = {
  serializedName: "JobResponse",
  type: {
    name: "Composite",
    className: "JobResponse",
    modelProperties: {
      jobId: {
        readOnly: true,
        serializedName: "jobId",
        type: {
          name: "String"
        }
      },
      startTimeUtc: {
        readOnly: true,
        serializedName: "startTimeUtc",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      endTimeUtc: {
        readOnly: true,
        serializedName: "endTimeUtc",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "unknown",
            "enqueued",
            "running",
            "completed",
            "failed",
            "cancelled"
          ]
        }
      },
      failureReason: {
        readOnly: true,
        serializedName: "failureReason",
        type: {
          name: "String"
        }
      },
      statusMessage: {
        readOnly: true,
        serializedName: "statusMessage",
        type: {
          name: "String"
        }
      },
      parentJobId: {
        readOnly: true,
        serializedName: "parentJobId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IotHubCapacity: msRest.CompositeMapper = {
  serializedName: "IotHubCapacity",
  type: {
    name: "Composite",
    className: "IotHubCapacity",
    modelProperties: {
      minimum: {
        readOnly: true,
        serializedName: "minimum",
        constraints: {
          InclusiveMaximum: 1,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      maximum: {
        readOnly: true,
        serializedName: "maximum",
        type: {
          name: "Number"
        }
      },
      default: {
        readOnly: true,
        serializedName: "default",
        type: {
          name: "Number"
        }
      },
      scaleType: {
        readOnly: true,
        serializedName: "scaleType",
        type: {
          name: "Enum",
          allowedValues: [
            "Automatic",
            "Manual",
            "None"
          ]
        }
      }
    }
  }
};

export const IotHubSkuDescription: msRest.CompositeMapper = {
  serializedName: "IotHubSkuDescription",
  type: {
    name: "Composite",
    className: "IotHubSkuDescription",
    modelProperties: {
      resourceType: {
        readOnly: true,
        serializedName: "resourceType",
        type: {
          name: "String"
        }
      },
      sku: {
        required: true,
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "IotHubSkuInfo"
        }
      },
      capacity: {
        required: true,
        serializedName: "capacity",
        type: {
          name: "Composite",
          className: "IotHubCapacity"
        }
      }
    }
  }
};

export const TagsResource: msRest.CompositeMapper = {
  serializedName: "TagsResource",
  type: {
    name: "Composite",
    className: "TagsResource",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const EventHubConsumerGroupInfo: msRest.CompositeMapper = {
  serializedName: "EventHubConsumerGroupInfo",
  type: {
    name: "Composite",
    className: "EventHubConsumerGroupInfo",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationInputs: msRest.CompositeMapper = {
  serializedName: "OperationInputs",
  type: {
    name: "Composite",
    className: "OperationInputs",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IotHubNameAvailabilityInfo: msRest.CompositeMapper = {
  serializedName: "IotHubNameAvailabilityInfo",
  type: {
    name: "Composite",
    className: "IotHubNameAvailabilityInfo",
    modelProperties: {
      nameAvailable: {
        readOnly: true,
        serializedName: "nameAvailable",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        readOnly: true,
        serializedName: "reason",
        type: {
          name: "Enum",
          allowedValues: [
            "Invalid",
            "AlreadyExists"
          ]
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Name: msRest.CompositeMapper = {
  serializedName: "Name",
  type: {
    name: "Composite",
    className: "Name",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      localizedValue: {
        serializedName: "localizedValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UserSubscriptionQuota: msRest.CompositeMapper = {
  serializedName: "UserSubscriptionQuota",
  type: {
    name: "Composite",
    className: "UserSubscriptionQuota",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      currentValue: {
        serializedName: "currentValue",
        type: {
          name: "Number"
        }
      },
      limit: {
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "Name"
        }
      }
    }
  }
};

export const UserSubscriptionQuotaListResult: msRest.CompositeMapper = {
  serializedName: "UserSubscriptionQuotaListResult",
  type: {
    name: "Composite",
    className: "UserSubscriptionQuotaListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UserSubscriptionQuota"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoutingMessage: msRest.CompositeMapper = {
  serializedName: "RoutingMessage",
  type: {
    name: "Composite",
    className: "RoutingMessage",
    modelProperties: {
      body: {
        serializedName: "body",
        type: {
          name: "String"
        }
      },
      appProperties: {
        serializedName: "appProperties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      systemProperties: {
        serializedName: "systemProperties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const RoutingTwinProperties: msRest.CompositeMapper = {
  serializedName: "RoutingTwin_properties",
  type: {
    name: "Composite",
    className: "RoutingTwinProperties",
    modelProperties: {
      desired: {
        serializedName: "desired",
        type: {
          name: "Object"
        }
      },
      reported: {
        serializedName: "reported",
        type: {
          name: "Object"
        }
      }
    }
  }
};

export const RoutingTwin: msRest.CompositeMapper = {
  serializedName: "RoutingTwin",
  type: {
    name: "Composite",
    className: "RoutingTwin",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Object"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "RoutingTwinProperties"
        }
      }
    }
  }
};

export const TestAllRoutesInput: msRest.CompositeMapper = {
  serializedName: "TestAllRoutesInput",
  type: {
    name: "Composite",
    className: "TestAllRoutesInput",
    modelProperties: {
      routingSource: {
        serializedName: "routingSource",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "Composite",
          className: "RoutingMessage"
        }
      },
      twin: {
        serializedName: "twin",
        type: {
          name: "Composite",
          className: "RoutingTwin"
        }
      }
    }
  }
};

export const MatchedRoute: msRest.CompositeMapper = {
  serializedName: "MatchedRoute",
  type: {
    name: "Composite",
    className: "MatchedRoute",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "RouteProperties"
        }
      }
    }
  }
};

export const TestAllRoutesResult: msRest.CompositeMapper = {
  serializedName: "TestAllRoutesResult",
  type: {
    name: "Composite",
    className: "TestAllRoutesResult",
    modelProperties: {
      routes: {
        serializedName: "routes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MatchedRoute"
            }
          }
        }
      }
    }
  }
};

export const TestRouteInput: msRest.CompositeMapper = {
  serializedName: "TestRouteInput",
  type: {
    name: "Composite",
    className: "TestRouteInput",
    modelProperties: {
      message: {
        serializedName: "message",
        type: {
          name: "Composite",
          className: "RoutingMessage"
        }
      },
      route: {
        required: true,
        serializedName: "route",
        type: {
          name: "Composite",
          className: "RouteProperties"
        }
      },
      twin: {
        serializedName: "twin",
        type: {
          name: "Composite",
          className: "RoutingTwin"
        }
      }
    }
  }
};

export const RouteErrorPosition: msRest.CompositeMapper = {
  serializedName: "RouteErrorPosition",
  type: {
    name: "Composite",
    className: "RouteErrorPosition",
    modelProperties: {
      line: {
        serializedName: "line",
        type: {
          name: "Number"
        }
      },
      column: {
        serializedName: "column",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RouteErrorRange: msRest.CompositeMapper = {
  serializedName: "RouteErrorRange",
  type: {
    name: "Composite",
    className: "RouteErrorRange",
    modelProperties: {
      start: {
        serializedName: "start",
        type: {
          name: "Composite",
          className: "RouteErrorPosition"
        }
      },
      end: {
        serializedName: "end",
        type: {
          name: "Composite",
          className: "RouteErrorPosition"
        }
      }
    }
  }
};

export const RouteCompilationError: msRest.CompositeMapper = {
  serializedName: "RouteCompilationError",
  type: {
    name: "Composite",
    className: "RouteCompilationError",
    modelProperties: {
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      severity: {
        serializedName: "severity",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "Composite",
          className: "RouteErrorRange"
        }
      }
    }
  }
};

export const TestRouteResultDetails: msRest.CompositeMapper = {
  serializedName: "TestRouteResultDetails",
  type: {
    name: "Composite",
    className: "TestRouteResultDetails",
    modelProperties: {
      compilationErrors: {
        serializedName: "compilationErrors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RouteCompilationError"
            }
          }
        }
      }
    }
  }
};

export const TestRouteResult: msRest.CompositeMapper = {
  serializedName: "TestRouteResult",
  type: {
    name: "Composite",
    className: "TestRouteResult",
    modelProperties: {
      result: {
        serializedName: "result",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Composite",
          className: "TestRouteResultDetails"
        }
      }
    }
  }
};

export const ExportDevicesRequest: msRest.CompositeMapper = {
  serializedName: "ExportDevicesRequest",
  type: {
    name: "Composite",
    className: "ExportDevicesRequest",
    modelProperties: {
      exportBlobContainerUri: {
        required: true,
        serializedName: "exportBlobContainerUri",
        type: {
          name: "String"
        }
      },
      excludeKeys: {
        required: true,
        serializedName: "excludeKeys",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ImportDevicesRequest: msRest.CompositeMapper = {
  serializedName: "ImportDevicesRequest",
  type: {
    name: "Composite",
    className: "ImportDevicesRequest",
    modelProperties: {
      inputBlobContainerUri: {
        required: true,
        serializedName: "inputBlobContainerUri",
        type: {
          name: "String"
        }
      },
      outputBlobContainerUri: {
        required: true,
        serializedName: "outputBlobContainerUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FailoverInput: msRest.CompositeMapper = {
  serializedName: "FailoverInput",
  type: {
    name: "Composite",
    className: "FailoverInput",
    modelProperties: {
      failoverRegion: {
        required: true,
        serializedName: "failoverRegion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: msRest.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IotHubDescriptionListResult: msRest.CompositeMapper = {
  serializedName: "IotHubDescriptionListResult",
  type: {
    name: "Composite",
    className: "IotHubDescriptionListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IotHubDescription"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IotHubSkuDescriptionListResult: msRest.CompositeMapper = {
  serializedName: "IotHubSkuDescriptionListResult",
  type: {
    name: "Composite",
    className: "IotHubSkuDescriptionListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IotHubSkuDescription"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventHubConsumerGroupsListResult: msRest.CompositeMapper = {
  serializedName: "EventHubConsumerGroupsListResult",
  type: {
    name: "Composite",
    className: "EventHubConsumerGroupsListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EventHubConsumerGroupInfo"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobResponseListResult: msRest.CompositeMapper = {
  serializedName: "JobResponseListResult",
  type: {
    name: "Composite",
    className: "JobResponseListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobResponse"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IotHubQuotaMetricInfoListResult: msRest.CompositeMapper = {
  serializedName: "IotHubQuotaMetricInfoListResult",
  type: {
    name: "Composite",
    className: "IotHubQuotaMetricInfoListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IotHubQuotaMetricInfo"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EndpointHealthDataListResult: msRest.CompositeMapper = {
  serializedName: "EndpointHealthDataListResult",
  type: {
    name: "Composite",
    className: "EndpointHealthDataListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EndpointHealthData"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SharedAccessSignatureAuthorizationRuleListResult: msRest.CompositeMapper = {
  serializedName: "SharedAccessSignatureAuthorizationRuleListResult",
  type: {
    name: "Composite",
    className: "SharedAccessSignatureAuthorizationRuleListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SharedAccessSignatureAuthorizationRule"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};
