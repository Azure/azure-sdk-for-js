/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  CertificatesListByIotHubOptionalParams,
  CertificatesListByIotHubResponse,
  CertificatesGetOptionalParams,
  CertificatesGetResponse,
  CertificateBodyDescription,
  CertificatesCreateOrUpdateOptionalParams,
  CertificatesCreateOrUpdateResponse,
  CertificatesDeleteOptionalParams,
  CertificatesGenerateVerificationCodeOptionalParams,
  CertificatesGenerateVerificationCodeResponse,
  CertificateVerificationDescription,
  CertificatesVerifyOptionalParams,
  CertificatesVerifyResponse
} from "../models";

/** Interface representing a Certificates. */
export interface Certificates {
  /**
   * Returns the list of certificates.
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param options The options parameters.
   */
  listByIotHub(
    resourceGroupName: string,
    resourceName: string,
    options?: CertificatesListByIotHubOptionalParams
  ): Promise<CertificatesListByIotHubResponse>;
  /**
   * Returns the certificate.
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param certificateName The name of the certificate
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    resourceName: string,
    certificateName: string,
    options?: CertificatesGetOptionalParams
  ): Promise<CertificatesGetResponse>;
  /**
   * Adds new or replaces existing certificate.
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param certificateName The name of the certificate
   * @param certificateDescription The certificate body.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    resourceName: string,
    certificateName: string,
    certificateDescription: CertificateBodyDescription,
    options?: CertificatesCreateOrUpdateOptionalParams
  ): Promise<CertificatesCreateOrUpdateResponse>;
  /**
   * Deletes an existing X509 certificate or does nothing if it does not exist.
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param certificateName The name of the certificate
   * @param ifMatch ETag of the Certificate.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    resourceName: string,
    certificateName: string,
    ifMatch: string,
    options?: CertificatesDeleteOptionalParams
  ): Promise<void>;
  /**
   * Generates verification code for proof of possession flow. The verification code will be used to
   * generate a leaf certificate.
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param certificateName The name of the certificate
   * @param ifMatch ETag of the Certificate.
   * @param options The options parameters.
   */
  generateVerificationCode(
    resourceGroupName: string,
    resourceName: string,
    certificateName: string,
    ifMatch: string,
    options?: CertificatesGenerateVerificationCodeOptionalParams
  ): Promise<CertificatesGenerateVerificationCodeResponse>;
  /**
   * Verifies the certificate's private key possession by providing the leaf cert issued by the verifying
   * pre uploaded certificate.
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param certificateName The name of the certificate
   * @param ifMatch ETag of the Certificate.
   * @param certificateVerificationBody The name of the certificate
   * @param options The options parameters.
   */
  verify(
    resourceGroupName: string,
    resourceName: string,
    certificateName: string,
    ifMatch: string,
    certificateVerificationBody: CertificateVerificationDescription,
    options?: CertificatesVerifyOptionalParams
  ): Promise<CertificatesVerifyResponse>;
}
