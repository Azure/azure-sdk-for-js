/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/iotHubResourceMappers";
import * as Parameters from "../models/parameters";
import { IotHubClientContext } from "../iotHubClientContext";

/** Class representing a IotHubResource. */
export class IotHubResource {
  private readonly client: IotHubClientContext;

  /**
   * Create a IotHubResource.
   * @param {IotHubClientContext} client Reference to the service client.
   */
  constructor(client: IotHubClientContext) {
    this.client = client;
  }

  /**
   * Get the non-security related metadata of an IoT hub.
   * @summary Get the non-security related metadata of an IoT hub
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotHubResourceGetResponse>
   */
  get(
    resourceGroupName: string,
    resourceName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.IotHubResourceGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param callback The callback
   */
  get(
    resourceGroupName: string,
    resourceName: string,
    callback: msRest.ServiceCallback<Models.IotHubDescription>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(
    resourceGroupName: string,
    resourceName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.IotHubDescription>
  ): void;
  get(
    resourceGroupName: string,
    resourceName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IotHubDescription>,
    callback?: msRest.ServiceCallback<Models.IotHubDescription>
  ): Promise<Models.IotHubResourceGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        options
      },
      getOperationSpec,
      callback
    ) as Promise<Models.IotHubResourceGetResponse>;
  }

  /**
   * Create or update the metadata of an Iot hub. The usual pattern to modify a property is to
   * retrieve the IoT hub metadata and security metadata, and then combine them with the modified
   * values in a new body to update the IoT hub. If certain properties are missing in the JSON,
   * updating IoT Hub may cause these values to fallback to default, which may lead to unexpected
   * behavior.
   * @summary Create or update the metadata of an IoT hub.
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param iotHubDescription The IoT hub metadata and security metadata.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotHubResourceCreateOrUpdateResponse>
   */
  createOrUpdate(
    resourceGroupName: string,
    resourceName: string,
    iotHubDescription: Models.IotHubDescription,
    options?: Models.IotHubResourceCreateOrUpdateOptionalParams
  ): Promise<Models.IotHubResourceCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(
      resourceGroupName,
      resourceName,
      iotHubDescription,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished()) as Promise<
      Models.IotHubResourceCreateOrUpdateResponse
    >;
  }

  /**
   * Update an existing IoT Hub tags. to update other fields use the CreateOrUpdate method
   * @summary Update an existing IoT Hubs tags.
   * @param resourceGroupName Resource group identifier.
   * @param resourceName Name of iot hub to update.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotHubResourceUpdateResponse>
   */
  update(
    resourceGroupName: string,
    resourceName: string,
    options?: Models.IotHubResourceUpdateOptionalParams
  ): Promise<Models.IotHubResourceUpdateResponse> {
    return this.beginUpdate(resourceGroupName, resourceName, options).then((lroPoller) =>
      lroPoller.pollUntilFinished()
    ) as Promise<Models.IotHubResourceUpdateResponse>;
  }

  /**
   * Delete an IoT hub.
   * @summary Delete an IoT hub
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotHubResourceDeleteMethodResponse>
   */
  deleteMethod(
    resourceGroupName: string,
    resourceName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.IotHubResourceDeleteMethodResponse> {
    return this.beginDeleteMethod(resourceGroupName, resourceName, options).then((lroPoller) =>
      lroPoller.pollUntilFinished()
    ) as Promise<Models.IotHubResourceDeleteMethodResponse>;
  }

  /**
   * Get all the IoT hubs in a subscription.
   * @summary Get all the IoT hubs in a subscription
   * @param [options] The optional parameters
   * @returns Promise<Models.IotHubResourceListBySubscriptionResponse>
   */
  listBySubscription(
    options?: msRest.RequestOptionsBase
  ): Promise<Models.IotHubResourceListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: msRest.ServiceCallback<Models.IotHubDescriptionListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.IotHubDescriptionListResult>
  ): void;
  listBySubscription(
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.IotHubDescriptionListResult>,
    callback?: msRest.ServiceCallback<Models.IotHubDescriptionListResult>
  ): Promise<Models.IotHubResourceListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback
    ) as Promise<Models.IotHubResourceListBySubscriptionResponse>;
  }

  /**
   * Get all the IoT hubs in a resource group.
   * @summary Get all the IoT hubs in a resource group
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotHubResourceListByResourceGroupResponse>
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.IotHubResourceListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param callback The callback
   */
  listByResourceGroup(
    resourceGroupName: string,
    callback: msRest.ServiceCallback<Models.IotHubDescriptionListResult>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(
    resourceGroupName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.IotHubDescriptionListResult>
  ): void;
  listByResourceGroup(
    resourceGroupName: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.IotHubDescriptionListResult>,
    callback?: msRest.ServiceCallback<Models.IotHubDescriptionListResult>
  ): Promise<Models.IotHubResourceListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback
    ) as Promise<Models.IotHubResourceListByResourceGroupResponse>;
  }

  /**
   * Get the statistics from an IoT hub.
   * @summary Get the statistics from an IoT hub
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotHubResourceGetStatsResponse>
   */
  getStats(
    resourceGroupName: string,
    resourceName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.IotHubResourceGetStatsResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param callback The callback
   */
  getStats(
    resourceGroupName: string,
    resourceName: string,
    callback: msRest.ServiceCallback<Models.RegistryStatistics>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param options The optional parameters
   * @param callback The callback
   */
  getStats(
    resourceGroupName: string,
    resourceName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.RegistryStatistics>
  ): void;
  getStats(
    resourceGroupName: string,
    resourceName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RegistryStatistics>,
    callback?: msRest.ServiceCallback<Models.RegistryStatistics>
  ): Promise<Models.IotHubResourceGetStatsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        options
      },
      getStatsOperationSpec,
      callback
    ) as Promise<Models.IotHubResourceGetStatsResponse>;
  }

  /**
   * Get the list of valid SKUs for an IoT hub.
   * @summary Get the list of valid SKUs for an IoT hub
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotHubResourceGetValidSkusResponse>
   */
  getValidSkus(
    resourceGroupName: string,
    resourceName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.IotHubResourceGetValidSkusResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param callback The callback
   */
  getValidSkus(
    resourceGroupName: string,
    resourceName: string,
    callback: msRest.ServiceCallback<Models.IotHubSkuDescriptionListResult>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param options The optional parameters
   * @param callback The callback
   */
  getValidSkus(
    resourceGroupName: string,
    resourceName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.IotHubSkuDescriptionListResult>
  ): void;
  getValidSkus(
    resourceGroupName: string,
    resourceName: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.IotHubSkuDescriptionListResult>,
    callback?: msRest.ServiceCallback<Models.IotHubSkuDescriptionListResult>
  ): Promise<Models.IotHubResourceGetValidSkusResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        options
      },
      getValidSkusOperationSpec,
      callback
    ) as Promise<Models.IotHubResourceGetValidSkusResponse>;
  }

  /**
   * Get a list of the consumer groups in the Event Hub-compatible device-to-cloud endpoint in an IoT
   * hub.
   * @summary Get a list of the consumer groups in the Event Hub-compatible device-to-cloud endpoint
   * in an IoT hub
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param eventHubEndpointName The name of the Event Hub-compatible endpoint.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotHubResourceListEventHubConsumerGroupsResponse>
   */
  listEventHubConsumerGroups(
    resourceGroupName: string,
    resourceName: string,
    eventHubEndpointName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.IotHubResourceListEventHubConsumerGroupsResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param eventHubEndpointName The name of the Event Hub-compatible endpoint.
   * @param callback The callback
   */
  listEventHubConsumerGroups(
    resourceGroupName: string,
    resourceName: string,
    eventHubEndpointName: string,
    callback: msRest.ServiceCallback<Models.EventHubConsumerGroupsListResult>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param eventHubEndpointName The name of the Event Hub-compatible endpoint.
   * @param options The optional parameters
   * @param callback The callback
   */
  listEventHubConsumerGroups(
    resourceGroupName: string,
    resourceName: string,
    eventHubEndpointName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.EventHubConsumerGroupsListResult>
  ): void;
  listEventHubConsumerGroups(
    resourceGroupName: string,
    resourceName: string,
    eventHubEndpointName: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.EventHubConsumerGroupsListResult>,
    callback?: msRest.ServiceCallback<Models.EventHubConsumerGroupsListResult>
  ): Promise<Models.IotHubResourceListEventHubConsumerGroupsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        eventHubEndpointName,
        options
      },
      listEventHubConsumerGroupsOperationSpec,
      callback
    ) as Promise<Models.IotHubResourceListEventHubConsumerGroupsResponse>;
  }

  /**
   * Get a consumer group from the Event Hub-compatible device-to-cloud endpoint for an IoT hub.
   * @summary Get a consumer group from the Event Hub-compatible device-to-cloud endpoint for an IoT
   * hub
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param eventHubEndpointName The name of the Event Hub-compatible endpoint in the IoT hub.
   * @param name The name of the consumer group to retrieve.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotHubResourceGetEventHubConsumerGroupResponse>
   */
  getEventHubConsumerGroup(
    resourceGroupName: string,
    resourceName: string,
    eventHubEndpointName: string,
    name: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.IotHubResourceGetEventHubConsumerGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param eventHubEndpointName The name of the Event Hub-compatible endpoint in the IoT hub.
   * @param name The name of the consumer group to retrieve.
   * @param callback The callback
   */
  getEventHubConsumerGroup(
    resourceGroupName: string,
    resourceName: string,
    eventHubEndpointName: string,
    name: string,
    callback: msRest.ServiceCallback<Models.EventHubConsumerGroupInfo>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param eventHubEndpointName The name of the Event Hub-compatible endpoint in the IoT hub.
   * @param name The name of the consumer group to retrieve.
   * @param options The optional parameters
   * @param callback The callback
   */
  getEventHubConsumerGroup(
    resourceGroupName: string,
    resourceName: string,
    eventHubEndpointName: string,
    name: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.EventHubConsumerGroupInfo>
  ): void;
  getEventHubConsumerGroup(
    resourceGroupName: string,
    resourceName: string,
    eventHubEndpointName: string,
    name: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EventHubConsumerGroupInfo>,
    callback?: msRest.ServiceCallback<Models.EventHubConsumerGroupInfo>
  ): Promise<Models.IotHubResourceGetEventHubConsumerGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        eventHubEndpointName,
        name,
        options
      },
      getEventHubConsumerGroupOperationSpec,
      callback
    ) as Promise<Models.IotHubResourceGetEventHubConsumerGroupResponse>;
  }

  /**
   * Add a consumer group to an Event Hub-compatible endpoint in an IoT hub.
   * @summary Add a consumer group to an Event Hub-compatible endpoint in an IoT hub
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param eventHubEndpointName The name of the Event Hub-compatible endpoint in the IoT hub.
   * @param name The name of the consumer group to add.
   * @param properties
   * @param [options] The optional parameters
   * @returns Promise<Models.IotHubResourceCreateEventHubConsumerGroupResponse>
   */
  createEventHubConsumerGroup(
    resourceGroupName: string,
    resourceName: string,
    eventHubEndpointName: string,
    name: string,
    properties: Models.EventHubConsumerGroupName,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.IotHubResourceCreateEventHubConsumerGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param eventHubEndpointName The name of the Event Hub-compatible endpoint in the IoT hub.
   * @param name The name of the consumer group to add.
   * @param properties
   * @param callback The callback
   */
  createEventHubConsumerGroup(
    resourceGroupName: string,
    resourceName: string,
    eventHubEndpointName: string,
    name: string,
    properties: Models.EventHubConsumerGroupName,
    callback: msRest.ServiceCallback<Models.EventHubConsumerGroupInfo>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param eventHubEndpointName The name of the Event Hub-compatible endpoint in the IoT hub.
   * @param name The name of the consumer group to add.
   * @param properties
   * @param options The optional parameters
   * @param callback The callback
   */
  createEventHubConsumerGroup(
    resourceGroupName: string,
    resourceName: string,
    eventHubEndpointName: string,
    name: string,
    properties: Models.EventHubConsumerGroupName,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.EventHubConsumerGroupInfo>
  ): void;
  createEventHubConsumerGroup(
    resourceGroupName: string,
    resourceName: string,
    eventHubEndpointName: string,
    name: string,
    properties: Models.EventHubConsumerGroupName,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EventHubConsumerGroupInfo>,
    callback?: msRest.ServiceCallback<Models.EventHubConsumerGroupInfo>
  ): Promise<Models.IotHubResourceCreateEventHubConsumerGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        eventHubEndpointName,
        name,
        properties,
        options
      },
      createEventHubConsumerGroupOperationSpec,
      callback
    ) as Promise<Models.IotHubResourceCreateEventHubConsumerGroupResponse>;
  }

  /**
   * Delete a consumer group from an Event Hub-compatible endpoint in an IoT hub.
   * @summary Delete a consumer group from an Event Hub-compatible endpoint in an IoT hub
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param eventHubEndpointName The name of the Event Hub-compatible endpoint in the IoT hub.
   * @param name The name of the consumer group to delete.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteEventHubConsumerGroup(
    resourceGroupName: string,
    resourceName: string,
    eventHubEndpointName: string,
    name: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param eventHubEndpointName The name of the Event Hub-compatible endpoint in the IoT hub.
   * @param name The name of the consumer group to delete.
   * @param callback The callback
   */
  deleteEventHubConsumerGroup(
    resourceGroupName: string,
    resourceName: string,
    eventHubEndpointName: string,
    name: string,
    callback: msRest.ServiceCallback<void>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param eventHubEndpointName The name of the Event Hub-compatible endpoint in the IoT hub.
   * @param name The name of the consumer group to delete.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteEventHubConsumerGroup(
    resourceGroupName: string,
    resourceName: string,
    eventHubEndpointName: string,
    name: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<void>
  ): void;
  deleteEventHubConsumerGroup(
    resourceGroupName: string,
    resourceName: string,
    eventHubEndpointName: string,
    name: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>,
    callback?: msRest.ServiceCallback<void>
  ): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        eventHubEndpointName,
        name,
        options
      },
      deleteEventHubConsumerGroupOperationSpec,
      callback
    );
  }

  /**
   * Get a list of all the jobs in an IoT hub. For more information, see:
   * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
   * @summary Get a list of all the jobs in an IoT hub. For more information, see:
   * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotHubResourceListJobsResponse>
   */
  listJobs(
    resourceGroupName: string,
    resourceName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.IotHubResourceListJobsResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param callback The callback
   */
  listJobs(
    resourceGroupName: string,
    resourceName: string,
    callback: msRest.ServiceCallback<Models.JobResponseListResult>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param options The optional parameters
   * @param callback The callback
   */
  listJobs(
    resourceGroupName: string,
    resourceName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.JobResponseListResult>
  ): void;
  listJobs(
    resourceGroupName: string,
    resourceName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.JobResponseListResult>,
    callback?: msRest.ServiceCallback<Models.JobResponseListResult>
  ): Promise<Models.IotHubResourceListJobsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        options
      },
      listJobsOperationSpec,
      callback
    ) as Promise<Models.IotHubResourceListJobsResponse>;
  }

  /**
   * Get the details of a job from an IoT hub. For more information, see:
   * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
   * @summary Get the details of a job from an IoT hub. For more information, see:
   * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param jobId The job identifier.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotHubResourceGetJobResponse>
   */
  getJob(
    resourceGroupName: string,
    resourceName: string,
    jobId: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.IotHubResourceGetJobResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param jobId The job identifier.
   * @param callback The callback
   */
  getJob(
    resourceGroupName: string,
    resourceName: string,
    jobId: string,
    callback: msRest.ServiceCallback<Models.JobResponse>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param jobId The job identifier.
   * @param options The optional parameters
   * @param callback The callback
   */
  getJob(
    resourceGroupName: string,
    resourceName: string,
    jobId: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.JobResponse>
  ): void;
  getJob(
    resourceGroupName: string,
    resourceName: string,
    jobId: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.JobResponse>,
    callback?: msRest.ServiceCallback<Models.JobResponse>
  ): Promise<Models.IotHubResourceGetJobResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        jobId,
        options
      },
      getJobOperationSpec,
      callback
    ) as Promise<Models.IotHubResourceGetJobResponse>;
  }

  /**
   * Get the quota metrics for an IoT hub.
   * @summary Get the quota metrics for an IoT hub
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotHubResourceGetQuotaMetricsResponse>
   */
  getQuotaMetrics(
    resourceGroupName: string,
    resourceName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.IotHubResourceGetQuotaMetricsResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param callback The callback
   */
  getQuotaMetrics(
    resourceGroupName: string,
    resourceName: string,
    callback: msRest.ServiceCallback<Models.IotHubQuotaMetricInfoListResult>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param options The optional parameters
   * @param callback The callback
   */
  getQuotaMetrics(
    resourceGroupName: string,
    resourceName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.IotHubQuotaMetricInfoListResult>
  ): void;
  getQuotaMetrics(
    resourceGroupName: string,
    resourceName: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.IotHubQuotaMetricInfoListResult>,
    callback?: msRest.ServiceCallback<Models.IotHubQuotaMetricInfoListResult>
  ): Promise<Models.IotHubResourceGetQuotaMetricsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        options
      },
      getQuotaMetricsOperationSpec,
      callback
    ) as Promise<Models.IotHubResourceGetQuotaMetricsResponse>;
  }

  /**
   * Get the health for routing endpoints.
   * @summary Get the health for routing endpoints
   * @param resourceGroupName
   * @param iotHubName
   * @param [options] The optional parameters
   * @returns Promise<Models.IotHubResourceGetEndpointHealthResponse>
   */
  getEndpointHealth(
    resourceGroupName: string,
    iotHubName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.IotHubResourceGetEndpointHealthResponse>;
  /**
   * @param resourceGroupName
   * @param iotHubName
   * @param callback The callback
   */
  getEndpointHealth(
    resourceGroupName: string,
    iotHubName: string,
    callback: msRest.ServiceCallback<Models.EndpointHealthDataListResult>
  ): void;
  /**
   * @param resourceGroupName
   * @param iotHubName
   * @param options The optional parameters
   * @param callback The callback
   */
  getEndpointHealth(
    resourceGroupName: string,
    iotHubName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.EndpointHealthDataListResult>
  ): void;
  getEndpointHealth(
    resourceGroupName: string,
    iotHubName: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.EndpointHealthDataListResult>,
    callback?: msRest.ServiceCallback<Models.EndpointHealthDataListResult>
  ): Promise<Models.IotHubResourceGetEndpointHealthResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        iotHubName,
        options
      },
      getEndpointHealthOperationSpec,
      callback
    ) as Promise<Models.IotHubResourceGetEndpointHealthResponse>;
  }

  /**
   * Check if an IoT hub name is available.
   * @summary Check if an IoT hub name is available
   * @param name The name of the IoT hub to check.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotHubResourceCheckNameAvailabilityResponse>
   */
  checkNameAvailability(
    name: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.IotHubResourceCheckNameAvailabilityResponse>;
  /**
   * @param name The name of the IoT hub to check.
   * @param callback The callback
   */
  checkNameAvailability(
    name: string,
    callback: msRest.ServiceCallback<Models.IotHubNameAvailabilityInfo>
  ): void;
  /**
   * @param name The name of the IoT hub to check.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkNameAvailability(
    name: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.IotHubNameAvailabilityInfo>
  ): void;
  checkNameAvailability(
    name: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IotHubNameAvailabilityInfo>,
    callback?: msRest.ServiceCallback<Models.IotHubNameAvailabilityInfo>
  ): Promise<Models.IotHubResourceCheckNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      {
        name,
        options
      },
      checkNameAvailabilityOperationSpec,
      callback
    ) as Promise<Models.IotHubResourceCheckNameAvailabilityResponse>;
  }

  /**
   * Test all routes configured in this Iot Hub
   * @summary Test all routes
   * @param input Input for testing all routes
   * @param iotHubName IotHub to be tested
   * @param resourceGroupName resource group which Iot Hub belongs to
   * @param [options] The optional parameters
   * @returns Promise<Models.IotHubResourceTestAllRoutesResponse>
   */
  testAllRoutes(
    input: Models.TestAllRoutesInput,
    iotHubName: string,
    resourceGroupName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.IotHubResourceTestAllRoutesResponse>;
  /**
   * @param input Input for testing all routes
   * @param iotHubName IotHub to be tested
   * @param resourceGroupName resource group which Iot Hub belongs to
   * @param callback The callback
   */
  testAllRoutes(
    input: Models.TestAllRoutesInput,
    iotHubName: string,
    resourceGroupName: string,
    callback: msRest.ServiceCallback<Models.TestAllRoutesResult>
  ): void;
  /**
   * @param input Input for testing all routes
   * @param iotHubName IotHub to be tested
   * @param resourceGroupName resource group which Iot Hub belongs to
   * @param options The optional parameters
   * @param callback The callback
   */
  testAllRoutes(
    input: Models.TestAllRoutesInput,
    iotHubName: string,
    resourceGroupName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.TestAllRoutesResult>
  ): void;
  testAllRoutes(
    input: Models.TestAllRoutesInput,
    iotHubName: string,
    resourceGroupName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TestAllRoutesResult>,
    callback?: msRest.ServiceCallback<Models.TestAllRoutesResult>
  ): Promise<Models.IotHubResourceTestAllRoutesResponse> {
    return this.client.sendOperationRequest(
      {
        input,
        iotHubName,
        resourceGroupName,
        options
      },
      testAllRoutesOperationSpec,
      callback
    ) as Promise<Models.IotHubResourceTestAllRoutesResponse>;
  }

  /**
   * Test the new route for this Iot Hub
   * @summary Test the new route
   * @param input Route that needs to be tested
   * @param iotHubName IotHub to be tested
   * @param resourceGroupName resource group which Iot Hub belongs to
   * @param [options] The optional parameters
   * @returns Promise<Models.IotHubResourceTestRouteResponse>
   */
  testRoute(
    input: Models.TestRouteInput,
    iotHubName: string,
    resourceGroupName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.IotHubResourceTestRouteResponse>;
  /**
   * @param input Route that needs to be tested
   * @param iotHubName IotHub to be tested
   * @param resourceGroupName resource group which Iot Hub belongs to
   * @param callback The callback
   */
  testRoute(
    input: Models.TestRouteInput,
    iotHubName: string,
    resourceGroupName: string,
    callback: msRest.ServiceCallback<Models.TestRouteResult>
  ): void;
  /**
   * @param input Route that needs to be tested
   * @param iotHubName IotHub to be tested
   * @param resourceGroupName resource group which Iot Hub belongs to
   * @param options The optional parameters
   * @param callback The callback
   */
  testRoute(
    input: Models.TestRouteInput,
    iotHubName: string,
    resourceGroupName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.TestRouteResult>
  ): void;
  testRoute(
    input: Models.TestRouteInput,
    iotHubName: string,
    resourceGroupName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TestRouteResult>,
    callback?: msRest.ServiceCallback<Models.TestRouteResult>
  ): Promise<Models.IotHubResourceTestRouteResponse> {
    return this.client.sendOperationRequest(
      {
        input,
        iotHubName,
        resourceGroupName,
        options
      },
      testRouteOperationSpec,
      callback
    ) as Promise<Models.IotHubResourceTestRouteResponse>;
  }

  /**
   * Get the security metadata for an IoT hub. For more information, see:
   * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
   * @summary Get the security metadata for an IoT hub. For more information, see:
   * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotHubResourceListKeysResponse>
   */
  listKeys(
    resourceGroupName: string,
    resourceName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.IotHubResourceListKeysResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param callback The callback
   */
  listKeys(
    resourceGroupName: string,
    resourceName: string,
    callback: msRest.ServiceCallback<Models.SharedAccessSignatureAuthorizationRuleListResult>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param options The optional parameters
   * @param callback The callback
   */
  listKeys(
    resourceGroupName: string,
    resourceName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.SharedAccessSignatureAuthorizationRuleListResult>
  ): void;
  listKeys(
    resourceGroupName: string,
    resourceName: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.SharedAccessSignatureAuthorizationRuleListResult>,
    callback?: msRest.ServiceCallback<Models.SharedAccessSignatureAuthorizationRuleListResult>
  ): Promise<Models.IotHubResourceListKeysResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        options
      },
      listKeysOperationSpec,
      callback
    ) as Promise<Models.IotHubResourceListKeysResponse>;
  }

  /**
   * Get a shared access policy by name from an IoT hub. For more information, see:
   * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
   * @summary Get a shared access policy by name from an IoT hub. For more information, see:
   * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param keyName The name of the shared access policy.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotHubResourceGetKeysForKeyNameResponse>
   */
  getKeysForKeyName(
    resourceGroupName: string,
    resourceName: string,
    keyName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.IotHubResourceGetKeysForKeyNameResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param keyName The name of the shared access policy.
   * @param callback The callback
   */
  getKeysForKeyName(
    resourceGroupName: string,
    resourceName: string,
    keyName: string,
    callback: msRest.ServiceCallback<Models.SharedAccessSignatureAuthorizationRule>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param keyName The name of the shared access policy.
   * @param options The optional parameters
   * @param callback The callback
   */
  getKeysForKeyName(
    resourceGroupName: string,
    resourceName: string,
    keyName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.SharedAccessSignatureAuthorizationRule>
  ): void;
  getKeysForKeyName(
    resourceGroupName: string,
    resourceName: string,
    keyName: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.SharedAccessSignatureAuthorizationRule>,
    callback?: msRest.ServiceCallback<Models.SharedAccessSignatureAuthorizationRule>
  ): Promise<Models.IotHubResourceGetKeysForKeyNameResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        keyName,
        options
      },
      getKeysForKeyNameOperationSpec,
      callback
    ) as Promise<Models.IotHubResourceGetKeysForKeyNameResponse>;
  }

  /**
   * Exports all the device identities in the IoT hub identity registry to an Azure Storage blob
   * container. For more information, see:
   * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
   * @summary Exports all the device identities in the IoT hub identity registry to an Azure Storage
   * blob container. For more information, see:
   * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param exportDevicesParameters The parameters that specify the export devices operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotHubResourceExportDevicesResponse>
   */
  exportDevices(
    resourceGroupName: string,
    resourceName: string,
    exportDevicesParameters: Models.ExportDevicesRequest,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.IotHubResourceExportDevicesResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param exportDevicesParameters The parameters that specify the export devices operation.
   * @param callback The callback
   */
  exportDevices(
    resourceGroupName: string,
    resourceName: string,
    exportDevicesParameters: Models.ExportDevicesRequest,
    callback: msRest.ServiceCallback<Models.JobResponse>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param exportDevicesParameters The parameters that specify the export devices operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  exportDevices(
    resourceGroupName: string,
    resourceName: string,
    exportDevicesParameters: Models.ExportDevicesRequest,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.JobResponse>
  ): void;
  exportDevices(
    resourceGroupName: string,
    resourceName: string,
    exportDevicesParameters: Models.ExportDevicesRequest,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.JobResponse>,
    callback?: msRest.ServiceCallback<Models.JobResponse>
  ): Promise<Models.IotHubResourceExportDevicesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        exportDevicesParameters,
        options
      },
      exportDevicesOperationSpec,
      callback
    ) as Promise<Models.IotHubResourceExportDevicesResponse>;
  }

  /**
   * Import, update, or delete device identities in the IoT hub identity registry from a blob. For
   * more information, see:
   * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
   * @summary Import, update, or delete device identities in the IoT hub identity registry from a
   * blob. For more information, see:
   * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param importDevicesParameters The parameters that specify the import devices operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotHubResourceImportDevicesResponse>
   */
  importDevices(
    resourceGroupName: string,
    resourceName: string,
    importDevicesParameters: Models.ImportDevicesRequest,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.IotHubResourceImportDevicesResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param importDevicesParameters The parameters that specify the import devices operation.
   * @param callback The callback
   */
  importDevices(
    resourceGroupName: string,
    resourceName: string,
    importDevicesParameters: Models.ImportDevicesRequest,
    callback: msRest.ServiceCallback<Models.JobResponse>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param importDevicesParameters The parameters that specify the import devices operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  importDevices(
    resourceGroupName: string,
    resourceName: string,
    importDevicesParameters: Models.ImportDevicesRequest,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.JobResponse>
  ): void;
  importDevices(
    resourceGroupName: string,
    resourceName: string,
    importDevicesParameters: Models.ImportDevicesRequest,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.JobResponse>,
    callback?: msRest.ServiceCallback<Models.JobResponse>
  ): Promise<Models.IotHubResourceImportDevicesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        importDevicesParameters,
        options
      },
      importDevicesOperationSpec,
      callback
    ) as Promise<Models.IotHubResourceImportDevicesResponse>;
  }

  /**
   * Create or update the metadata of an Iot hub. The usual pattern to modify a property is to
   * retrieve the IoT hub metadata and security metadata, and then combine them with the modified
   * values in a new body to update the IoT hub. If certain properties are missing in the JSON,
   * updating IoT Hub may cause these values to fallback to default, which may lead to unexpected
   * behavior.
   * @summary Create or update the metadata of an IoT hub.
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param iotHubDescription The IoT hub metadata and security metadata.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    resourceName: string,
    iotHubDescription: Models.IotHubDescription,
    options?: Models.IotHubResourceBeginCreateOrUpdateOptionalParams
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        resourceName,
        iotHubDescription,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options
    );
  }

  /**
   * Update an existing IoT Hub tags. to update other fields use the CreateOrUpdate method
   * @summary Update an existing IoT Hubs tags.
   * @param resourceGroupName Resource group identifier.
   * @param resourceName Name of iot hub to update.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(
    resourceGroupName: string,
    resourceName: string,
    options?: Models.IotHubResourceBeginUpdateOptionalParams
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        resourceName,
        options
      },
      beginUpdateOperationSpec,
      options
    );
  }

  /**
   * Delete an IoT hub.
   * @summary Delete an IoT hub
   * @param resourceGroupName The name of the resource group that contains the IoT hub.
   * @param resourceName The name of the IoT hub.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(
    resourceGroupName: string,
    resourceName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        resourceName,
        options
      },
      beginDeleteMethodOperationSpec,
      options
    );
  }

  /**
   * Get all the IoT hubs in a subscription.
   * @summary Get all the IoT hubs in a subscription
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotHubResourceListBySubscriptionNextResponse>
   */
  listBySubscriptionNext(
    nextPageLink: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.IotHubResourceListBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBySubscriptionNext(
    nextPageLink: string,
    callback: msRest.ServiceCallback<Models.IotHubDescriptionListResult>
  ): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptionNext(
    nextPageLink: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.IotHubDescriptionListResult>
  ): void;
  listBySubscriptionNext(
    nextPageLink: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.IotHubDescriptionListResult>,
    callback?: msRest.ServiceCallback<Models.IotHubDescriptionListResult>
  ): Promise<Models.IotHubResourceListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBySubscriptionNextOperationSpec,
      callback
    ) as Promise<Models.IotHubResourceListBySubscriptionNextResponse>;
  }

  /**
   * Get all the IoT hubs in a resource group.
   * @summary Get all the IoT hubs in a resource group
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotHubResourceListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(
    nextPageLink: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.IotHubResourceListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(
    nextPageLink: string,
    callback: msRest.ServiceCallback<Models.IotHubDescriptionListResult>
  ): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(
    nextPageLink: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.IotHubDescriptionListResult>
  ): void;
  listByResourceGroupNext(
    nextPageLink: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.IotHubDescriptionListResult>,
    callback?: msRest.ServiceCallback<Models.IotHubDescriptionListResult>
  ): Promise<Models.IotHubResourceListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback
    ) as Promise<Models.IotHubResourceListByResourceGroupNextResponse>;
  }

  /**
   * Get the list of valid SKUs for an IoT hub.
   * @summary Get the list of valid SKUs for an IoT hub
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotHubResourceGetValidSkusNextResponse>
   */
  getValidSkusNext(
    nextPageLink: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.IotHubResourceGetValidSkusNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getValidSkusNext(
    nextPageLink: string,
    callback: msRest.ServiceCallback<Models.IotHubSkuDescriptionListResult>
  ): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getValidSkusNext(
    nextPageLink: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.IotHubSkuDescriptionListResult>
  ): void;
  getValidSkusNext(
    nextPageLink: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.IotHubSkuDescriptionListResult>,
    callback?: msRest.ServiceCallback<Models.IotHubSkuDescriptionListResult>
  ): Promise<Models.IotHubResourceGetValidSkusNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getValidSkusNextOperationSpec,
      callback
    ) as Promise<Models.IotHubResourceGetValidSkusNextResponse>;
  }

  /**
   * Get a list of the consumer groups in the Event Hub-compatible device-to-cloud endpoint in an IoT
   * hub.
   * @summary Get a list of the consumer groups in the Event Hub-compatible device-to-cloud endpoint
   * in an IoT hub
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotHubResourceListEventHubConsumerGroupsNextResponse>
   */
  listEventHubConsumerGroupsNext(
    nextPageLink: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.IotHubResourceListEventHubConsumerGroupsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listEventHubConsumerGroupsNext(
    nextPageLink: string,
    callback: msRest.ServiceCallback<Models.EventHubConsumerGroupsListResult>
  ): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listEventHubConsumerGroupsNext(
    nextPageLink: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.EventHubConsumerGroupsListResult>
  ): void;
  listEventHubConsumerGroupsNext(
    nextPageLink: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.EventHubConsumerGroupsListResult>,
    callback?: msRest.ServiceCallback<Models.EventHubConsumerGroupsListResult>
  ): Promise<Models.IotHubResourceListEventHubConsumerGroupsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listEventHubConsumerGroupsNextOperationSpec,
      callback
    ) as Promise<Models.IotHubResourceListEventHubConsumerGroupsNextResponse>;
  }

  /**
   * Get a list of all the jobs in an IoT hub. For more information, see:
   * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
   * @summary Get a list of all the jobs in an IoT hub. For more information, see:
   * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotHubResourceListJobsNextResponse>
   */
  listJobsNext(
    nextPageLink: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.IotHubResourceListJobsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listJobsNext(
    nextPageLink: string,
    callback: msRest.ServiceCallback<Models.JobResponseListResult>
  ): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listJobsNext(
    nextPageLink: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.JobResponseListResult>
  ): void;
  listJobsNext(
    nextPageLink: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.JobResponseListResult>,
    callback?: msRest.ServiceCallback<Models.JobResponseListResult>
  ): Promise<Models.IotHubResourceListJobsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listJobsNextOperationSpec,
      callback
    ) as Promise<Models.IotHubResourceListJobsNextResponse>;
  }

  /**
   * Get the quota metrics for an IoT hub.
   * @summary Get the quota metrics for an IoT hub
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotHubResourceGetQuotaMetricsNextResponse>
   */
  getQuotaMetricsNext(
    nextPageLink: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.IotHubResourceGetQuotaMetricsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getQuotaMetricsNext(
    nextPageLink: string,
    callback: msRest.ServiceCallback<Models.IotHubQuotaMetricInfoListResult>
  ): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getQuotaMetricsNext(
    nextPageLink: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.IotHubQuotaMetricInfoListResult>
  ): void;
  getQuotaMetricsNext(
    nextPageLink: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.IotHubQuotaMetricInfoListResult>,
    callback?: msRest.ServiceCallback<Models.IotHubQuotaMetricInfoListResult>
  ): Promise<Models.IotHubResourceGetQuotaMetricsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getQuotaMetricsNextOperationSpec,
      callback
    ) as Promise<Models.IotHubResourceGetQuotaMetricsNextResponse>;
  }

  /**
   * Get the health for routing endpoints.
   * @summary Get the health for routing endpoints
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotHubResourceGetEndpointHealthNextResponse>
   */
  getEndpointHealthNext(
    nextPageLink: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.IotHubResourceGetEndpointHealthNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getEndpointHealthNext(
    nextPageLink: string,
    callback: msRest.ServiceCallback<Models.EndpointHealthDataListResult>
  ): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getEndpointHealthNext(
    nextPageLink: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.EndpointHealthDataListResult>
  ): void;
  getEndpointHealthNext(
    nextPageLink: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.EndpointHealthDataListResult>,
    callback?: msRest.ServiceCallback<Models.EndpointHealthDataListResult>
  ): Promise<Models.IotHubResourceGetEndpointHealthNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getEndpointHealthNextOperationSpec,
      callback
    ) as Promise<Models.IotHubResourceGetEndpointHealthNextResponse>;
  }

  /**
   * Get the security metadata for an IoT hub. For more information, see:
   * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
   * @summary Get the security metadata for an IoT hub. For more information, see:
   * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotHubResourceListKeysNextResponse>
   */
  listKeysNext(
    nextPageLink: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.IotHubResourceListKeysNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listKeysNext(
    nextPageLink: string,
    callback: msRest.ServiceCallback<Models.SharedAccessSignatureAuthorizationRuleListResult>
  ): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listKeysNext(
    nextPageLink: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.SharedAccessSignatureAuthorizationRuleListResult>
  ): void;
  listKeysNext(
    nextPageLink: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.SharedAccessSignatureAuthorizationRuleListResult>,
    callback?: msRest.ServiceCallback<Models.SharedAccessSignatureAuthorizationRuleListResult>
  ): Promise<Models.IotHubResourceListKeysNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listKeysNextOperationSpec,
      callback
    ) as Promise<Models.IotHubResourceListKeysNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.resourceName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.IotHubDescription
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Devices/IotHubs",
  urlParameters: [Parameters.subscriptionId],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.IotHubDescriptionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.IotHubDescriptionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const getStatsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/IotHubStats",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.resourceName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.RegistryStatistics
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const getValidSkusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/skus",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.resourceName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.IotHubSkuDescriptionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const listEventHubConsumerGroupsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.eventHubEndpointName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.EventHubConsumerGroupsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const getEventHubConsumerGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups/{name}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.eventHubEndpointName,
    Parameters.name
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.EventHubConsumerGroupInfo
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const createEventHubConsumerGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups/{name}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.eventHubEndpointName,
    Parameters.name
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: {
      properties: "properties"
    },
    mapper: {
      ...Mappers.EventHubConsumerGroupBodyDescription,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.EventHubConsumerGroupInfo
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const deleteEventHubConsumerGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups/{name}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.eventHubEndpointName,
    Parameters.name
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const listJobsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/jobs",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.resourceName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.JobResponseListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const getJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/jobs/{jobId}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.jobId
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.JobResponse
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const getQuotaMetricsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/quotaMetrics",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.resourceName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.IotHubQuotaMetricInfoListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const getEndpointHealthOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{iotHubName}/routingEndpointsHealth",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.iotHubName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.EndpointHealthDataListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const checkNameAvailabilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Devices/checkNameAvailability",
  urlParameters: [Parameters.subscriptionId],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: {
      name: "name"
    },
    mapper: {
      ...Mappers.OperationInputs,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.IotHubNameAvailabilityInfo
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const testAllRoutesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{iotHubName}/routing/routes/$testall",
  urlParameters: [Parameters.iotHubName, Parameters.subscriptionId, Parameters.resourceGroupName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "input",
    mapper: {
      ...Mappers.TestAllRoutesInput,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.TestAllRoutesResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const testRouteOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{iotHubName}/routing/routes/$testnew",
  urlParameters: [Parameters.iotHubName, Parameters.subscriptionId, Parameters.resourceGroupName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "input",
    mapper: {
      ...Mappers.TestRouteInput,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.TestRouteResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const listKeysOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/listkeys",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.resourceName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.SharedAccessSignatureAuthorizationRuleListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const getKeysForKeyNameOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/IotHubKeys/{keyName}/listkeys",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.keyName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.SharedAccessSignatureAuthorizationRule
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const exportDevicesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/exportDevices",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.resourceName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "exportDevicesParameters",
    mapper: {
      ...Mappers.ExportDevicesRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.JobResponse
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const importDevicesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/importDevices",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.resourceName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "importDevicesParameters",
    mapper: {
      ...Mappers.ImportDevicesRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.JobResponse
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.resourceName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.ifMatch0, Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "iotHubDescription",
    mapper: {
      ...Mappers.IotHubDescription,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.IotHubDescription
    },
    201: {
      bodyMapper: Mappers.IotHubDescription
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.resourceName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: {
      tags: ["options", "tags"]
    },
    mapper: {
      ...Mappers.TagsResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.IotHubDescription
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.resourceName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.IotHubDescription
    },
    202: {
      bodyMapper: Mappers.IotHubDescription
    },
    204: {},
    404: {
      bodyMapper: Mappers.ErrorDetails
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const listBySubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [Parameters.nextPageLink],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.IotHubDescriptionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [Parameters.nextPageLink],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.IotHubDescriptionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const getValidSkusNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [Parameters.nextPageLink],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.IotHubSkuDescriptionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const listEventHubConsumerGroupsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [Parameters.nextPageLink],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.EventHubConsumerGroupsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const listJobsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [Parameters.nextPageLink],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.JobResponseListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const getQuotaMetricsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [Parameters.nextPageLink],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.IotHubQuotaMetricInfoListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const getEndpointHealthNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [Parameters.nextPageLink],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.EndpointHealthDataListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const listKeysNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [Parameters.nextPageLink],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.SharedAccessSignatureAuthorizationRuleListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};
