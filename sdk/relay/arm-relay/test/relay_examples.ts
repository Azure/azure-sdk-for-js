/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  env,
  Recorder,
  RecorderStartOptions,
  delay,
  isPlaybackMode,
} from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { Context } from "mocha";
import { RelayAPI } from "../src/relayAPI";

const replaceableVariables: Record<string, string> = {
  AZURE_CLIENT_ID: "azure_client_id",
  AZURE_CLIENT_SECRET: "azure_client_secret",
  AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
  SUBSCRIPTION_ID: "azure_subscription_id"
};

const recorderOptions: RecorderStartOptions = {
  envSetupForPlayback: replaceableVariables
};

export const testPollingOptions = {
  updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};

describe("Relay test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: RelayAPI;
  let location: string;
  let resourceGroup: string;
  let relayName: string;
  let namespaceName: string;
  let authorizationRuleName: string;

  beforeEach(async function (this: Context) {
    recorder = new Recorder(this.currentTest);
    await recorder.start(recorderOptions);
    subscriptionId = env.SUBSCRIPTION_ID || '';
    // This is an example of how the environment variables are used
    const credential = createTestCredential();
    client = new RelayAPI(credential, subscriptionId, recorder.configureClientOptions({}));
    location = "eastus";
    resourceGroup = "myjstest";
    relayName = "myrelayxxx";
    namespaceName = "mynamespacexxx";
    authorizationRuleName = "myauthorizationxxxx";
  });

  afterEach(async function () {
    await recorder.stop();
  });

  it("namespaces create test", async function () {
    const res = await client.namespaces.beginCreateOrUpdateAndWait(resourceGroup, namespaceName, {
      location: location,
      sku: {
        name: "Standard",
        tier: "Standard"
      },
      tags: {
        tag1: "value1"
      }
    });
    assert.equal(res.name, namespaceName);
  });

  it("namespaces get test", async function () {
    const res = await client.namespaces.get(resourceGroup, namespaceName);
    assert.equal(res.name, namespaceName);
  });

  it("namespaces list test", async function () {
    const resArray = new Array();
    for await (let item of client.namespaces.list()) {
      resArray.push(item);
    }
  });

  it("namespaces update test", async function () {
    const res = await client.namespaces.update(resourceGroup, namespaceName, {
      tags: {
        tag1: "value1",
        tag2: "value2",
        tag3: "value3"
      }
    });
    assert.equal(res.type, "Microsoft.Relay/Namespaces");
  });

  it("wCFRelays create test", async function () {
    const res = await client.wCFRelays.createOrUpdate(resourceGroup, namespaceName, relayName, {
      relayType: "NetTcp",
      requiresClientAuthorization: true,
      requiresTransportSecurity: true,
    });
    assert.equal(res.name, relayName);
  });

  it("wCFRelays createOrUpdateAuthorizationRule test", async function () {
    const res = await client.wCFRelays.createOrUpdateAuthorizationRule(resourceGroup, namespaceName, relayName, authorizationRuleName, { rights: ["Listen", "Send"] });
    assert.equal(res.name, authorizationRuleName);
  });

  it("wCFRelays get test", async function () {
    const res = await client.wCFRelays.get(resourceGroup, namespaceName, relayName);
    assert.equal(res.name, relayName);
  });

  it("wCFRelays getAuthorizationRule test", async function () {
    const res = await client.wCFRelays.getAuthorizationRule(resourceGroup, namespaceName, relayName, authorizationRuleName);
    assert.equal(res.name, authorizationRuleName);
  });

  it("wCFRelays list test", async function () {
    const resArray = new Array();
    for await (let item of client.wCFRelays.listByNamespace(resourceGroup, namespaceName)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 1);
  });

  it("wCFRelays listAuthorizationRules test", async function () {
    const resArray = new Array();
    for await (let item of client.wCFRelays.listAuthorizationRules(resourceGroup, namespaceName, relayName)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 1);
  });

  it("wCFRelays deleteAuthorizationRule test", async function () {
    const res = await client.wCFRelays.deleteAuthorizationRule(resourceGroup, namespaceName, relayName, authorizationRuleName);
    const resArray = new Array();
    for await (let item of client.wCFRelays.listAuthorizationRules(resourceGroup, namespaceName, relayName)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });

  it("wCFRelays delete test", async function () {
    const res = await client.wCFRelays.delete(resourceGroup, namespaceName, relayName);
    const resArray = new Array();
    for await (let item of client.wCFRelays.listByNamespace(resourceGroup, namespaceName)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });

  it("namespaces delete test", async function () {
    const res = await client.namespaces.beginDeleteAndWait(resourceGroup, namespaceName, testPollingOptions);
    const resArray = new Array();
    for await (let item of client.namespaces.listByResourceGroup(resourceGroup)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });
});
